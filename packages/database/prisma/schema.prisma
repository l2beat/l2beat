generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/kysely/generated"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model CurrentPrice {
  coingeckoId String   @id @db.VarChar(255)
  priceUsd    Float    @db.Real
  updatedAt   DateTime @db.Timestamp(6)
}

model Stake {
  id             String @id @db.VarChar(255)
  totalStake     Float  @db.Real
  thresholdStake Float  @db.Real
}

model BridgeEscrow {
  id                 String          @id @db.Char(21)
  networkId          String          @db.Char(21)
  network            Network         @relation("network", fields: [networkId], references: [id])
  address            String
  externalBridgeId   String?         @db.Char(21)
  externalBridge     ExternalBridge? @relation(fields: [externalBridgeId], references: [id])
  canonicalNetworkId String?         @db.Char(21)
  canonicalNetwork   Network?        @relation("canonicalNetwork", fields: [canonicalNetworkId], references: [id])
  tokens             Token[]
  updatedAt          DateTime        @updatedAt
  createdAt          DateTime        @default(now())

  @@unique([networkId, address])
}

enum ExternalBridgeType {
  Axelar
  LayerZeroV1
  Orbit
  Wormhole
}

model ExternalBridge {
  id      String             @id @db.Char(21)
  name    String             @db.VarChar(256)
  type    ExternalBridgeType @unique
  tokens  TokenBridge[]
  escrows BridgeEscrow[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Deployment {
  id              String    @id @db.Char(21)
  tokenId         String    @unique
  token           Token     @relation(fields: [tokenId], references: [id])
  txHash          String?   @db.Char(66)
  blockNumber     Int?
  timestamp       DateTime? @db.Timestamp(6)
  from            String?
  to              String?
  isDeployerEoa   Boolean?
  sourceAvailable Boolean
  updatedAt       DateTime  @updatedAt
  createdAt       DateTime  @default(now())
}

enum ExplorerType {
  Etherscan
}

model NetworkRpc {
  id        String   @id @db.Char(21)
  networkId String   @db.Char(21)
  network   Network  @relation(fields: [networkId], references: [id])
  url       String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model NetworkExplorer {
  id        String       @id @db.Char(21)
  networkId String       @db.Char(21)
  network   Network      @relation(fields: [networkId], references: [id])
  type      ExplorerType
  url       String
  apiKey    String
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())

  @@unique(networkId)
  @@unique([networkId, type])
}

model Network {
  id                         String           @id @db.Char(21)
  chainId                    Int
  name                       String           @db.VarChar(256)
  coingeckoId                String?          @unique @db.VarChar(256)
  axelarId                   String?          @db.VarChar(256)
  axelarGatewayAddress       String?          @db.Char(42)
  orbitId                    String?          @db.VarChar(256)
  wormholeId                 String?          @db.VarChar(256)
  layerZeroV1EndpointAddress String?          @db.Char(42)
  logoUrl                    String?          @db.VarChar(256)
  bridgeEscrows              BridgeEscrow[]   @relation("network")
  canonicalBridgeEscrows     BridgeEscrow[]   @relation("canonicalNetwork")
  rpcs                       NetworkRpc[]
  explorer                   NetworkExplorer?
  tokens                     Token[]
  updatedAt                  DateTime         @updatedAt
  createdAt                  DateTime         @default(now())
}

model TokenBridge {
  id               String          @id @db.Char(21)
  sourceTokenId    String          @db.Char(21)
  sourceToken      Token           @relation("bridgedTo", fields: [sourceTokenId], references: [id])
  targetTokenId    String          @unique @db.Char(21)
  targetToken      Token           @relation("bridgedFrom", fields: [targetTokenId], references: [id])
  externalBridgeId String?         @db.Char(21)
  externalBridge   ExternalBridge? @relation(fields: [externalBridgeId], references: [id])
  updatedAt        DateTime        @updatedAt
  createdAt        DateTime        @default(now())
}

model TokenMeta {
  id           String   @id @db.Char(21)
  tokenId      String   @db.Char(21)
  token        Token    @relation(fields: [tokenId], references: [id])
  externalId   String?  @db.VarChar(256)
  source       String   @db.VarChar(256)
  name         String?  @db.VarChar(256)
  symbol       String?  @db.VarChar(32)
  decimals     Int?
  logoUrl      String?  @db.VarChar(256)
  contractName String?  @db.VarChar(256)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  @@unique([tokenId, source])
}

model Token {
  id          String         @id @db.Char(21)
  networkId   String         @db.Char(21)
  network     Network        @relation(fields: [networkId], references: [id])
  address     String
  deployment  Deployment?
  metadata    TokenMeta[]
  bridgedTo   TokenBridge[]  @relation("bridgedTo")
  bridgedFrom TokenBridge?   @relation("bridgedFrom")
  escrows     BridgeEscrow[]
  updatedAt   DateTime       @updatedAt
  createdAt   DateTime       @default(now())

  @@unique([networkId, address])
}

model Cache {
  key         String   @id
  value       String
  chainId     Int
  blockNumber Int?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @db.Timestamp(6)
}

model Activity {
  projectId String   @db.VarChar(255)
  timestamp DateTime @db.Timestamp(6)
  count     Int
  start     Int      @default(0)
  end       Int      @default(0)

  @@id([projectId, timestamp])
}

model AggregatedL2Cost {
  timestamp      DateTime @db.Timestamp(6)
  projectId      String   @db.VarChar(255)
  totalGas       Int
  totalGasEth    Float    @db.Real
  totalGasUsd    Float    @db.Real
  blobsGas       Int?
  blobsGasEth    Float?   @db.Real
  blobsGasUsd    Float?   @db.Real
  calldataGas    Int
  calldataGasEth Float    @db.Real
  calldataGasUsd Float    @db.Real
  computeGas     Int
  computeGasEth  Float    @db.Real
  computeGasUsd  Float    @db.Real
  overheadGasEth Float    @db.Real
  overheadGasUsd Float    @db.Real
  overheadGas    Int

  @@id([projectId, timestamp])
  @@index([projectId])
  @@index([timestamp])
}

model Amount {
  timestamp       DateTime @db.Timestamp(6)
  amount          Decimal  @db.Decimal(80, 0)
  configurationId String   @db.Char(12)

  @@id([configurationId, timestamp])
}

model BlockTimestamp {
  chain       String   @db.VarChar(255)
  timestamp   DateTime @db.Timestamp(6)
  blockNumber Int

  @@id([chain, timestamp])
}

model DailyDiscovery {
  projectName       String   @db.VarChar(255)
  chainId           Int
  timestamp         DateTime @db.Timestamp(6)
  blockNumber       Int
  version           Int
  configHash        String   @db.VarChar(255)
  discoveryJsonBlob Json

  @@id([projectName, chainId, timestamp])
}

model DiscoveryCache {
  key         String @id
  value       String
  blockNumber Int
  chain       String @db.VarChar(255)
}

model Finality {
  projectId              String   @db.VarChar(255)
  timestamp              DateTime @db.Timestamp(6)
  minimumTimeToInclusion Int
  maximumTimeToInclusion Int
  averageTimeToInclusion Int
  averageStateUpdate     Int?

  @@id([projectId, timestamp])
}

model IndexerConfiguration {
  id            String @id @db.Char(12)
  indexerId     String @db.VarChar(255)
  currentHeight Int?
  minHeight     Int
  maxHeight     Int?
  properties    String

  @@index([indexerId])
}

model IndexerState {
  indexerId    String    @id @db.VarChar(255)
  safeHeight   Int
  minTimestamp DateTime? @db.Timestamp(6)
  configHash   String?
}

model L2Cost {
  configurationId String   @db.VarChar(12)
  txHash          String   @db.VarChar(255)
  timestamp       DateTime @db.Timestamp(6)
  gasUsed         Int
  gasPrice        BigInt
  calldataGasUsed Int
  calldataLength  Int
  blobGasUsed     Int?
  blobGasPrice    BigInt?

  @@id([configurationId, txHash])
}

model L2CostPrice {
  timestamp DateTime @id @db.Timestamp(6)
  priceUsd  Float    @db.Real
}

model Liveness {
  timestamp       DateTime @db.Timestamp(6)
  blockNumber     Int
  txHash          String   @db.VarChar(255)
  configurationId String   @db.VarChar(12)

  @@id([configurationId, txHash])
}

model Price {
  timestamp       DateTime @db.Timestamp(6)
  priceUsd        Float    @db.Real
  configurationId String   @db.Char(12)

  @@id([configurationId, timestamp])
}

model TvlCleaner {
  repositoryName        String    @id @db.VarChar(255)
  hourlyCleanedUntil    DateTime? @db.Timestamp(6)
  sixHourlyCleanedUntil DateTime? @db.Timestamp(6)
}

model UpdateMonitor {
  projectName       String    @db.VarChar(255)
  blockNumber       Int
  timestamp         DateTime? @db.Timestamp(6)
  discoveryJsonBlob Json
  configHash        String    @default("") @db.VarChar(255)
  version           Int       @default(0)
  chainId           Int       @default(1)

  @@id([projectName, chainId])
}

model UpdateNotifier {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @db.Timestamp(6)
  projectName  String   @db.VarChar(255)
  blockNumber  Int
  diffJsonBlob Json
  chainId      Int      @default(1)

  @@index([blockNumber])
  @@index([projectName])
}

model Value {
  timestamp                   DateTime @db.Timestamp(6)
  projectId                   String   @db.VarChar(255)
  dataSource                  String   @db.VarChar(255)
  external                    BigInt?
  externalAssociated          BigInt   @default(0)
  externalForTotal            BigInt?
  externalAssociatedForTotal  BigInt   @default(0)
  canonical                   BigInt?
  canonicalAssociated         BigInt   @default(0)
  canonicalForTotal           BigInt?
  canonicalAssociatedForTotal BigInt   @default(0)
  native                      BigInt?
  nativeAssociated            BigInt   @default(0)
  nativeForTotal              BigInt?
  nativeAssociatedForTotal    BigInt   @default(0)
  ether                       BigInt   @default(0)
  stablecoin                  BigInt   @default(0)

  @@id([projectId, timestamp, dataSource])
}

model VerifierStatus {
  address     String   @db.VarChar(255)
  chainId     Int
  lastUsed    DateTime @db.Timestamp(6)
  lastUpdated DateTime @db.Timestamp(6)

  @@id([address, chainId])
}

model AggregatedLiveness {
  projectId String   @db.VarChar(255)
  subtype   String   @db.VarChar(255)
  range     String   @db.VarChar(255)
  min       Int
  avg       Int
  max       Int
  updatedAt DateTime @db.Timestamp(6)

  @@id([projectId, subtype, range])
}

model Anomaly {
  timestamp DateTime @db.Timestamp(6)
  projectId String   @db.VarChar(255)
  subtype   String   @db.VarChar(255)
  duration  Int

  @@id([timestamp, projectId, subtype])
}

model FlatSources {
  projectName String @db.VarChar(255)
  chainId     Int
  blockNumber Int
  contentHash String @db.VarChar(255)
  flat        Json

  @@id([projectName, chainId])
}
