generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/kysely/generated"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model CurrentPrice {
  coingeckoId String   @id @db.VarChar(255)
  priceUsd    Float    @db.Real
  updatedAt   DateTime @db.Timestamp(6)
}

model Stake {
  id             String @id @db.VarChar(255)
  totalStake     Float  @db.Real
  thresholdStake Float  @db.Real
}

model Activity {
  projectId String   @db.VarChar(255)
  timestamp DateTime @db.Timestamp(6)
  count     Int
  uopsCount Int?
  start     Int      @default(0)
  end       Int      @default(0)

  @@id([projectId, timestamp])
}

model AggregatedL2Cost {
  timestamp      DateTime @db.Timestamp(6)
  projectId      String   @db.VarChar(255)
  totalGas       Int
  totalGasEth    Float    @db.Real
  totalGasUsd    Float    @db.Real
  blobsGas       Int?
  blobsGasEth    Float?   @db.Real
  blobsGasUsd    Float?   @db.Real
  calldataGas    Int
  calldataGasEth Float    @db.Real
  calldataGasUsd Float    @db.Real
  computeGas     Int
  computeGasEth  Float    @db.Real
  computeGasUsd  Float    @db.Real
  overheadGasEth Float    @db.Real
  overheadGasUsd Float    @db.Real
  overheadGas    Int

  @@id([projectId, timestamp])
  @@index([projectId])
  @@index([timestamp])
}

model Amount {
  timestamp       DateTime @db.Timestamp(6)
  amount          Decimal  @db.Decimal(80, 0)
  configurationId String   @db.Char(12)

  @@id([configurationId, timestamp])
}

model BlockTimestamp {
  chain       String   @db.VarChar(255)
  timestamp   DateTime @db.Timestamp(6)
  blockNumber Int

  @@id([chain, timestamp])
}

model DiscoveryCache {
  key   String @id
  value String
}

model Finality {
  projectId              String   @db.VarChar(255)
  timestamp              DateTime @db.Timestamp(6)
  minimumTimeToInclusion Int
  maximumTimeToInclusion Int
  averageTimeToInclusion Int
  averageStateUpdate     Int?

  @@id([projectId, timestamp])
}

model IndexerConfiguration {
  id            String @id @db.Char(12)
  indexerId     String @db.VarChar(255)
  currentHeight Int?
  minHeight     Int
  maxHeight     Int?
  properties    String

  @@index([indexerId])
}

model IndexerState {
  indexerId    String    @id @db.VarChar(255)
  safeHeight   Int
  minTimestamp DateTime? @db.Timestamp(6)
  configHash   String?
}

model L2Cost {
  configurationId String   @db.VarChar(12)
  txHash          String   @db.VarChar(255)
  timestamp       DateTime @db.Timestamp(6)
  gasUsed         Int
  gasPrice        BigInt
  calldataGasUsed Int
  calldataLength  Int
  blobGasUsed     Int?
  blobGasPrice    BigInt?

  @@id([configurationId, txHash])
}

model L2CostPrice {
  timestamp DateTime @id @db.Timestamp(6)
  priceUsd  Float    @db.Real
}

model Liveness {
  timestamp       DateTime @db.Timestamp(6)
  blockNumber     Int
  txHash          String   @db.VarChar(255)
  configurationId String   @db.VarChar(12)

  @@id([configurationId, txHash])
}

model Price {
  timestamp       DateTime @db.Timestamp(6)
  priceUsd        Float    @db.Real
  configurationId String   @db.Char(12)

  @@id([configurationId, timestamp])
}

model TvlCleaner {
  repositoryName        String    @id @db.VarChar(255)
  hourlyCleanedUntil    DateTime? @db.Timestamp(6)
  sixHourlyCleanedUntil DateTime? @db.Timestamp(6)
}

model UpdateMonitor {
  projectName       String    @db.VarChar(255)
  blockNumber       Int
  timestamp         DateTime? @db.Timestamp(6)
  discoveryJsonBlob Json
  configHash        String    @default("") @db.VarChar(255)
  chainId           Int       @default(1)

  @@id([projectName, chainId])
}

model UpdateNotifier {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @db.Timestamp(6)
  projectName  String   @db.VarChar(255)
  blockNumber  Int
  diffJsonBlob Json
  chainId      Int      @default(1)

  @@index([blockNumber])
  @@index([projectName])
}

model Value {
  timestamp                   DateTime @db.Timestamp(6)
  projectId                   String   @db.VarChar(255)
  dataSource                  String   @db.VarChar(255)
  external                    BigInt?
  externalAssociated          BigInt   @default(0)
  externalForTotal            BigInt?
  externalAssociatedForTotal  BigInt   @default(0)
  canonical                   BigInt?
  canonicalAssociated         BigInt   @default(0)
  canonicalForTotal           BigInt?
  canonicalAssociatedForTotal BigInt   @default(0)
  native                      BigInt?
  nativeAssociated            BigInt   @default(0)
  nativeForTotal              BigInt?
  nativeAssociatedForTotal    BigInt   @default(0)
  ether                       BigInt   @default(0)
  stablecoin                  BigInt   @default(0)

  @@id([projectId, timestamp, dataSource])
}

model VerifierStatus {
  address     String   @db.VarChar(255)
  chainId     Int
  lastUsed    DateTime @db.Timestamp(6)
  lastUpdated DateTime @db.Timestamp(6)

  @@id([address, chainId])
}

model AggregatedLiveness {
  projectId String   @db.VarChar(255)
  subtype   String   @db.VarChar(255)
  range     String   @db.VarChar(255)
  min       Int
  avg       Int
  max       Int
  updatedAt DateTime @db.Timestamp(6)

  @@id([projectId, subtype, range])
}

model Anomaly {
  timestamp DateTime @db.Timestamp(6)
  projectId String   @db.VarChar(255)
  subtype   String   @db.VarChar(255)
  duration  Int

  @@id([timestamp, projectId, subtype])
}

model FlatSources {
  projectName String @db.VarChar(255)
  chainId     Int
  blockNumber Int
  contentHash String @db.VarChar(255)
  flat        Json

  @@id([projectName, chainId])
}
