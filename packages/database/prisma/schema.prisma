generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/kysely/generated"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model CurrentPrice {
  coingeckoId String   @id @db.VarChar(255)
  priceUsd    Float    @db.Real
  updatedAt   DateTime @db.Timestamp(6)
}

model Stake {
  id             String @id @db.VarChar(255)
  totalStake     Float  @db.Real
  thresholdStake Float  @db.Real
}

model Activity {
  projectId String   @db.VarChar(255)
  timestamp DateTime @db.Timestamp(6)
  count     Int
  uopsCount Int?
  start     Int      @default(0)
  end       Int      @default(0)

  @@id([projectId, timestamp])
}

model AggregatedL2Cost {
  timestamp      DateTime @db.Timestamp(6)
  projectId      String   @db.VarChar(255)
  totalGas       Int
  totalGasEth    Float    @db.Real
  totalGasUsd    Float    @db.Real
  blobsGas       Int?
  blobsGasEth    Float?   @db.Real
  blobsGasUsd    Float?   @db.Real
  calldataGas    Int
  calldataGasEth Float    @db.Real
  calldataGasUsd Float    @db.Real
  computeGas     Int
  computeGasEth  Float    @db.Real
  computeGasUsd  Float    @db.Real
  overheadGasEth Float    @db.Real
  overheadGasUsd Float    @db.Real
  overheadGas    Int

  @@id([projectId, timestamp])
  @@index([projectId])
  @@index([timestamp])
}

model DataAvailability {
  timestamp       DateTime @db.Timestamp(6)
  daLayer         String   @db.VarChar(255)
  projectId       String   @db.VarChar(255)
  configurationId String   @db.VarChar(12)
  totalSize       BigInt

  @@id([timestamp, daLayer, projectId, configurationId])
  @@index([projectId, timestamp(sort: Asc)])
}

model DiscoveryCache {
  key   String @id
  value String
}

model IndexerConfiguration {
  id            String @id @db.Char(12)
  indexerId     String @db.VarChar(255)
  currentHeight Int?
  minHeight     Int
  maxHeight     Int?
  properties    String

  @@index([indexerId])
}

model IndexerState {
  indexerId    String    @id @db.VarChar(255)
  safeHeight   Int
  minTimestamp DateTime? @db.Timestamp(6)
  configHash   String?
}

model L2Cost {
  configurationId String   @db.VarChar(12)
  txHash          String   @db.VarChar(255)
  timestamp       DateTime @db.Timestamp(6)
  gasUsed         Int
  gasPrice        BigInt
  calldataGasUsed Int
  calldataLength  Int
  blobGasUsed     Int?
  blobGasPrice    BigInt?

  @@id([configurationId, txHash])
}

model L2CostPrice {
  timestamp DateTime @id @db.Timestamp(6)
  priceUsd  Float    @db.Real
}

model Liveness {
  timestamp       DateTime @db.Timestamp(6)
  blockNumber     Int
  txHash          String   @db.VarChar(255)
  configurationId String   @db.VarChar(12)

  @@id([configurationId, txHash])
  @@index([configurationId, timestamp])
}

model RealTimeLiveness {
  configurationId String   @db.VarChar(12)
  txHash          String   @db.VarChar(255)
  timestamp       DateTime @db.Timestamp(6)
  blockNumber     Int

  @@id([configurationId, txHash])
  @@index([configurationId, timestamp])
}

model UpdateMonitor {
  projectId         String    @db.VarChar(255)
  blockNumber       Int
  timestamp         DateTime? @db.Timestamp(6)
  discoveryJsonBlob Json
  configHash        String    @default("") @db.VarChar(255)
  chainId           Int       @default(1)

  @@id([projectId, chainId])
}

model UpdateNotifier {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @db.Timestamp(6)
  projectId    String   @db.VarChar(255)
  timestamp    DateTime @default(now()) @db.Timestamp(6)
  diffJsonBlob Json
  chainId      Int      @default(1)

  @@index([timestamp])
  @@index([projectId])
}

model UpdateMessage {
  projectId String   @db.VarChar(255)
  chain     String   @db.VarChar(255)
  timestamp DateTime @db.Timestamp(6)
  message   String   @db.Text

  @@id([projectId, chain, timestamp])
}

model VerifierStatus {
  address     String   @db.VarChar(255)
  chainId     Int
  lastUsed    DateTime @db.Timestamp(6)
  lastUpdated DateTime @db.Timestamp(6)

  @@id([address, chainId])
}

model AggregatedLiveness {
  timestamp       DateTime @db.Timestamp(6)
  projectId       String   @db.VarChar(255)
  subtype         String   @db.VarChar(255)
  min             Int
  avg             Int
  max             Int
  numberOfRecords Int

  @@id([timestamp, projectId, subtype])
  @@index([projectId])
}

model Anomaly {
  timestamp DateTime @db.Timestamp(6)
  projectId String   @db.VarChar(255)
  subtype   String   @db.VarChar(255)
  duration  Int

  @@id([timestamp, projectId, subtype])
}

model RealTimeAnomaly {
  start      DateTime  @db.Timestamp(6)
  projectId  String    @db.VarChar(255)
  subtype    String    @db.VarChar(255)
  status     String    @db.VarChar(255)
  isApproved Boolean   @default(false)
  end        DateTime? @db.Timestamp(6)

  @@id([start, projectId, subtype])
}

model AnomalyStats {
  timestamp DateTime @db.Timestamp(6)
  projectId String   @db.VarChar(255)
  subtype   String   @db.VarChar(255)
  mean      Float    @db.Real
  stdDev    Float    @db.Real

  @@id([timestamp, projectId, subtype])
}

model FlatSources {
  projectId   String   @db.VarChar(255)
  chainId     Int
  timestamp   DateTime @default(now()) @db.Timestamp(6)
  contentHash String   @db.VarChar(255)
  flat        Json

  @@id([projectId, chainId])
}

model TvsAmount {
  timestamp       DateTime @db.Timestamp(6)
  configurationId String   @db.Char(12)
  amount          Decimal  @db.Decimal(80, 0)

  @@id([timestamp, configurationId])
}

model TvsBlockTimestamp {
  timestamp       DateTime @db.Timestamp(6)
  configurationId String   @db.Char(12)
  chain           String   @db.VarChar(255)
  blockNumber     Int

  @@id([timestamp, configurationId])
  @@index([chain])
}

model TvsPrice {
  timestamp       DateTime @db.Timestamp(6)
  configurationId String   @db.Char(12)
  priceId         String   @db.VarChar(255)
  priceUsd        Float    @db.Real

  @@id([timestamp, configurationId])
  @@index([priceId])
}

model TokenValue {
  timestamp       DateTime @db.Timestamp(6)
  configurationId String   @db.Char(12)
  projectId       String   @db.VarChar(255)
  tokenId         String   @db.VarChar(255)
  amount          Float    @db.Real
  value           Float    @db.Real
  valueForProject Float    @db.Real
  valueForSummary Float    @db.Real

  @@id([timestamp, configurationId])
  @@index([projectId])
  @@index([tokenId])
  @@index([projectId, tokenId, timestamp(sort: Desc)])
}

model ProjectValue {
  timestamp     DateTime @db.Timestamp(6)
  project       String   @db.VarChar(255)
  type          String   @db.VarChar(255)
  value         Float    @db.Real
  canonical     Float    @db.Real
  external      Float    @db.Real
  native        Float    @db.Real
  ether         Float    @db.Real
  stablecoin    Float    @db.Real
  other         Float    @db.Real
  associated    Float    @db.Real
  btc           Float    @default(0) @db.Real
  rwaRestricted Float    @default(0) @db.Real
  rwaPublic     Float    @default(0) @db.Real

  @@id([timestamp, project, type])
  @@index([type, project, timestamp])
}

model UpdateDiff {
  projectId         String   @db.VarChar(255)
  chain             String   @db.VarChar(255)
  address           String   @db.VarChar(255)
  type              String   @db.VarChar(255)
  timestamp         DateTime @db.Timestamp(6)
  diffBaseTimestamp DateTime @default(now()) @db.Timestamp(6)
  diffHeadTimestamp DateTime @default(now()) @db.Timestamp(6)

  @@unique([projectId, address, type, chain])
}

model Notification {
  id              String   @db.VarChar(255)
  channel         String   @db.VarChar(255)
  type            String   @db.VarChar(255)
  relatedEntityId String   @db.VarChar(255)
  timestamp       DateTime @db.Timestamp(6)

  @@id([id])
}

model Blob {
  id          Int      @id @default(autoincrement())
  blockNumber Int
  timestamp   DateTime @db.Timestamp(6)
  daLayer     Int
  from        String   @db.VarChar(255)
  to          String?  @db.VarChar(255)
  topics      String?
  size        BigInt?

  @@index([blockNumber])
}
