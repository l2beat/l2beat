generator kysely {
  provider        = "prisma-kysely"
  output          = "../src/kysely/generated"
  previewFeatures = ["multiSchema"]
  enumFileName    = "enums.ts"
  fileName        = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["activity", "public"]
}

model CurrentPrice {
  coingeckoId String   @id @db.VarChar(255)
  priceUsd    Float    @db.Real
  updatedAt   DateTime @db.Timestamp(6)

  @@schema("public")
}

model Stake {
  id             String @id @db.VarChar(255)
  totalStake     Float  @db.Real
  thresholdStake Float  @db.Real

  @@schema("public")
}

model BridgeEscrow {
  id                 String          @id @db.Char(21)
  networkId          String          @db.Char(21)
  network            Network         @relation("network", fields: [networkId], references: [id])
  address            String
  externalBridgeId   String?         @db.Char(21)
  externalBridge     ExternalBridge? @relation(fields: [externalBridgeId], references: [id])
  canonicalNetworkId String?         @db.Char(21)
  canonicalNetwork   Network?        @relation("canonicalNetwork", fields: [canonicalNetworkId], references: [id])
  tokens             Token[]
  updatedAt          DateTime        @default(now()) @updatedAt
  createdAt          DateTime        @default(now())

  @@unique([networkId, address])
  @@schema("public")
}

enum ExternalBridgeType {
  Axelar
  LayerZeroV1
  Orbit
  Wormhole

  @@schema("public")
}

model ExternalBridge {
  id      String             @id @db.Char(21)
  name    String             @db.VarChar(256)
  type    ExternalBridgeType @unique
  tokens  TokenBridge[]
  escrows BridgeEscrow[]

  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())

  @@schema("public")
}

model Deployment {
  id              String    @id @db.Char(21)
  tokenId         String    @unique
  token           Token     @relation(fields: [tokenId], references: [id])
  txHash          String?   @db.Char(66)
  blockNumber     Int?
  timestamp       DateTime? @db.Timestamp(6)
  from            String?
  to              String?
  isDeployerEoa   Boolean?
  sourceAvailable Boolean
  updatedAt       DateTime  @default(now()) @updatedAt
  createdAt       DateTime  @default(now())

  @@schema("public")
}

enum ExplorerType {
  Etherscan

  @@schema("public")
}

model NetworkRpc {
  id        String   @id @db.Char(21)
  networkId String   @db.Char(21)
  network   Network  @relation(fields: [networkId], references: [id])
  url       String
  updatedAt DateTime @default(now()) @updatedAt
  createdAt DateTime @default(now())

  @@schema("public")
}

model NetworkExplorer {
  id        String       @id @db.Char(21)
  networkId String       @db.Char(21)
  network   Network      @relation(fields: [networkId], references: [id])
  type      ExplorerType
  url       String
  apiKey    String
  updatedAt DateTime     @default(now()) @updatedAt
  createdAt DateTime     @default(now())

  @@unique(networkId)
  @@unique([networkId, type])
  @@schema("public")
}

model Network {
  id                         String           @id @db.Char(21)
  chainId                    Int
  name                       String           @db.VarChar(256)
  coingeckoId                String?          @unique @db.VarChar(256)
  axelarId                   String?          @db.VarChar(256)
  axelarGatewayAddress       String?          @db.Char(42)
  orbitId                    String?          @db.VarChar(256)
  wormholeId                 String?          @db.VarChar(256)
  layerZeroV1EndpointAddress String?          @db.Char(42)
  bridgeEscrows              BridgeEscrow[]   @relation("network")
  canonicalBridgeEscrows     BridgeEscrow[]   @relation("canonicalNetwork")
  rpcs                       NetworkRpc[]
  explorer                   NetworkExplorer?
  tokens                     Token[]
  updatedAt                  DateTime         @default(now()) @updatedAt
  createdAt                  DateTime         @default(now())

  @@schema("public")
}

model TokenBridge {
  id               String          @id @db.Char(21)
  sourceTokenId    String          @db.Char(21)
  sourceToken      Token           @relation("bridgedTo", fields: [sourceTokenId], references: [id])
  targetTokenId    String          @unique @db.Char(21)
  targetToken      Token           @relation("bridgedFrom", fields: [targetTokenId], references: [id])
  externalBridgeId String?         @db.Char(21)
  externalBridge   ExternalBridge? @relation(fields: [externalBridgeId], references: [id])
  updatedAt        DateTime        @default(now()) @updatedAt
  createdAt        DateTime        @default(now())

  @@schema("public")
}

model TokenMeta {
  id           String   @id @db.Char(21)
  tokenId      String   @db.Char(21)
  token        Token    @relation(fields: [tokenId], references: [id])
  externalId   String?  @db.VarChar(256)
  source       String   @db.VarChar(256)
  name         String?  @db.VarChar(256)
  symbol       String?  @db.VarChar(32)
  decimals     Int?
  logoUrl      String?  @db.VarChar(256)
  contractName String?  @db.VarChar(256)
  updatedAt    DateTime @default(now()) @updatedAt
  createdAt    DateTime @default(now())

  @@unique([tokenId, source])
  @@schema("public")
}

model Token {
  id          String         @id @db.Char(21)
  networkId   String         @db.Char(21)
  network     Network        @relation(fields: [networkId], references: [id])
  address     String
  deployment  Deployment?
  metadata    TokenMeta[]
  bridgedTo   TokenBridge[]  @relation("bridgedTo")
  bridgedFrom TokenBridge?   @relation("bridgedFrom")
  escrows     BridgeEscrow[]
  updatedAt   DateTime       @default(now()) @updatedAt
  createdAt   DateTime       @default(now())

  @@unique([networkId, address])
  @@schema("public")
}

model Cache {
  key         String   @id
  value       String
  chainId     Int
  blockNumber Int?
  updatedAt   DateTime @default(now()) @updatedAt
  createdAt   DateTime @default(now())

  @@schema("public")
}

model AggregatedL2Cost {
  timestamp      DateTime @map("timestamp") @db.Timestamp(6)
  projectId      String   @map("project_id") @db.VarChar(255)
  totalGas       Int      @map("total_gas")
  totalGasEth    Float    @map("total_gas_eth") @db.Real
  totalGasUsd    Float    @map("total_gas_usd") @db.Real
  blobsGas       Int?     @map("blobs_gas")
  blobsGasEth    Float?   @map("blobs_gas_eth") @db.Real
  blobsGasUsd    Float?   @map("blobs_gas_usd") @db.Real
  calldataGas    Int      @map("calldata_gas")
  calldataGasEth Float    @map("calldata_gas_eth") @db.Real
  calldataGasUsd Float    @map("calldata_gas_usd") @db.Real
  computeGas     Int      @map("compute_gas")
  computeGasEth  Float    @map("compute_gas_eth") @db.Real
  computeGasUsd  Float    @map("compute_gas_usd") @db.Real
  overheadGasEth Float    @map("overhead_gas_eth") @db.Real
  overheadGasUsd Float    @map("overhead_gas_usd") @db.Real
  overheadGas    Int      @map("overhead_gas")

  @@id([projectId, timestamp])
  @@index([projectId], map: "aggregated_l2_costs_project_id_index")
  @@index([timestamp], map: "aggregated_l2_costs_timestamp_index")
  @@map("aggregated_l2_costs")
  @@schema("public")
}

model Amount {
  timestamp       DateTime @map("timestamp") @db.Timestamp(6)
  amount          Decimal  @map("amount") @db.Decimal(80, 0)
  configurationId String   @map("configuration_id") @db.Char(12)

  @@id([configurationId, timestamp])
  @@map("amounts")
  @@schema("public")
}

model BlockTimestamp {
  chain       String   @map("chain") @db.VarChar(255)
  timestamp   DateTime @map("timestamp") @db.Timestamp(6)
  blockNumber Int      @map("block_number")

  @@id([chain, timestamp])
  @@map("block_timestamps")
  @@schema("public")
}

model DailyDiscovery {
  projectName       String   @map("project_name") @db.VarChar(255)
  chainId           Int      @map("chain_id")
  unixTimestamp     DateTime @map("unix_timestamp") @db.Timestamp(6)
  blockNumber       Int      @map("block_number")
  version           Int      @map("version")
  configHash        String   @map("config_hash") @db.VarChar(255)
  discoveryJsonBlob Json     @map("discovery_json_blob")

  @@id([projectName, chainId, unixTimestamp])
  @@map("daily_discovery")
  @@schema("public")
}

model DiscoveryCache {
  key         String @id @map("key")
  value       String @map("value")
  blockNumber Int    @map("block_number")
  chain       String @map("chain") @db.VarChar(255)

  @@map("discovery_cache")
  @@schema("public")
}

model Finality {
  projectId              String   @map("project_id") @db.VarChar(255)
  timestamp              DateTime @map("timestamp") @db.Timestamp(6)
  minimumTimeToInclusion Int      @map("minimum_time_to_inclusion")
  maximumTimeToInclusion Int      @map("maximum_time_to_inclusion")
  averageTimeToInclusion Int      @map("average_time_to_inclusion")
  averageStateUpdate     Int?     @map("average_state_update")

  @@id([projectId, timestamp])
  @@map("finality")
  @@schema("public")
}

model IndexerConfiguration {
  id            String @id @map("id") @db.Char(12)
  indexerId     String @map("indexer_id") @db.VarChar(255)
  currentHeight Int?   @map("current_height")
  minHeight     Int    @map("min_height")
  maxHeight     Int?   @map("max_height")
  properties    String @map("properties")

  @@index([indexerId], map: "indexer_configurations_indexer_id_index")
  @@map("indexer_configurations")
  @@schema("public")
}

model IndexerState {
  indexerId    String    @id @map("indexer_id") @db.VarChar(255)
  safeHeight   Int       @map("safe_height")
  minTimestamp DateTime? @map("min_timestamp") @db.Timestamp(6)
  configHash   String?   @map("config_hash")

  @@map("indexer_state")
  @@schema("public")
}

model L2Cost {
  trackedTxId       String           @map("tracked_tx_id") @db.VarChar(8)
  txHash            String           @unique(map: "l2_costs_tx_hash_unique") @map("tx_hash") @db.VarChar(255)
  timestamp         DateTime         @map("timestamp") @db.Timestamp(6)
  gasUsed           Int              @map("gas_used")
  gasPrice          BigInt           @map("gas_price")
  calldataGasUsed   Int              @map("calldata_gas_used")
  calldataLength    Int              @map("calldata_length")
  blobGasUsed       Int?             @map("blob_gas_used")
  blobGasPrice      BigInt?          @map("blob_gas_price")
  trackedTxsConfigs TrackedTxsConfig @relation(fields: [trackedTxId], references: [id], onDelete: Cascade, map: "l2_costs_tracked_tx_id_foreign")

  @@index([trackedTxId], map: "l2_costs_tracked_tx_id_index")
  @@map("l2_costs")
  @@schema("public")
}

model L2CostPrice {
  timestamp DateTime @id @map("timestamp") @db.Timestamp(6)
  priceUsd  Float    @map("price_usd") @db.Real

  @@map("l2_costs_prices")
  @@schema("public")
}

model Liveness {
  timestamp         DateTime         @map("timestamp") @db.Timestamp(6)
  blockNumber       Int              @map("block_number")
  txHash            String           @map("tx_hash") @db.VarChar(255)
  trackedTxId       String           @map("tracked_tx_id") @db.VarChar(8)
  trackedTxsConfigs TrackedTxsConfig @relation(fields: [trackedTxId], references: [id], onDelete: Cascade, map: "liveness_tracked_tx_id_foreign")

  @@id(trackedTxId, map: "liveness_tracked_tx_id_index")
  @@map("liveness")
  @@schema("public")
}

model Price {
  timestamp       DateTime @map("timestamp") @db.Timestamp(6)
  priceUsd        Float    @map("price_usd") @db.Real
  configurationId String   @map("configuration_id") @db.Char(12)

  @@id([configurationId, timestamp])
  @@map("prices")
  @@schema("public")
}

model SequenceProcessor {
  id            String   @id @map("id") @db.VarChar(255)
  lastProcessed Int      @map("last_processed")
  updatedAt     DateTime @map("updated_at") @db.Timestamp(6)
  latest        Int      @map("latest")
  syncedOnce    Boolean  @default(false) @map("synced_once")

  @@map("sequence_processor")
  @@schema("public")
}

model TrackedTxsConfig {
  id                      String     @id @map("id") @db.VarChar(255)
  projectId               String     @map("project_id") @db.VarChar(255)
  type                    String     @map("type") @db.VarChar(255)
  subtype                 String?    @map("subtype") @db.VarChar(255)
  debugInfo               String     @map("debug_info") @db.VarChar(255)
  sinceTimestampInclusive DateTime?  @map("since_timestamp_inclusive") @db.Timestamp(6)
  untilTimestampExclusive DateTime?  @map("until_timestamp_exclusive") @db.Timestamp(6)
  lastSyncedTimestamp     DateTime?  @map("last_synced_timestamp") @db.Timestamp(6)
  l2Costs                 L2Cost[]
  liveness                Liveness[]

  @@map("tracked_txs_configs")
  @@schema("public")
}

model TvlCleaner {
  repositoryName        String    @id @map("repository_name") @db.VarChar(255)
  hourlyCleanedUntil    DateTime? @map("hourly_cleaned_until") @db.Timestamp(6)
  sixHourlyCleanedUntil DateTime? @map("six_hourly_cleaned_until") @db.Timestamp(6)

  @@map("tvl_cleaner")
  @@schema("public")
}

model UpdateMonitor {
  projectName       String    @map("project_name") @db.VarChar(255)
  blockNumber       Int       @map("block_number")
  unixTimestamp     DateTime? @map("unix_timestamp") @db.Timestamp(6)
  discoveryJsonBlob Json      @map("discovery_json_blob")
  configHash        String    @default("") @map("config_hash") @db.VarChar(255)
  version           Int       @default(0) @map("version")
  chainId           Int       @default(1) @map("chain_id")

  @@id([projectName, chainId])
  @@map("update_monitor")
  @@schema("public")
}

model UpdateNotifier {
  id           Int      @id @default(autoincrement()) @map("id")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamp(6)
  projectName  String   @map("project_name") @db.VarChar(255)
  blockNumber  Int      @map("block_number")
  diffJsonBlob Json     @map("diff_json_blob")
  chainId      Int      @default(1) @map("chain_id")

  @@index([blockNumber], map: "update_notifier_block_number_index")
  @@index([projectName], map: "update_notifier_project_name_index")
  @@map("update_notifier")
  @@schema("public")
}

model Value {
  timestamp         DateTime @map("timestamp") @db.Timestamp(6)
  projectId         String   @map("project_id") @db.VarChar(255)
  dataSource        String   @map("data_source") @db.VarChar(255)
  external          BigInt   @map("external")
  externalForTotal  BigInt   @map("external_for_total")
  canonical         BigInt   @map("canonical")
  canonicalForTotal BigInt   @map("canonical_for_total")
  native            BigInt   @map("native")
  nativeForTotal    BigInt   @map("native_for_total")

  @@id([timestamp, projectId, dataSource])
  @@map("values")
  @@schema("public")
}

model VerifierStatus {
  address     String   @map("address") @db.VarChar(255)
  chainId     Int      @map("chain_id")
  lastUsed    DateTime @map("last_used") @db.Timestamp(6)
  lastUpdated DateTime @map("last_updated") @db.Timestamp(6)

  @@id([address, chainId])
  @@map("verifier_status")
  @@schema("public")
}

model Block {
  projectId     String   @map("project_id") @db.VarChar(255)
  unixTimestamp DateTime @map("unix_timestamp") @db.Timestamp(6)
  count         Int
  blockNumber   Int      @map("block_number")

  @@id([projectId, blockNumber])
  @@map("block")
  @@schema("activity")
}

model Starkex {
  projectId     String   @map("project_id") @db.VarChar(255)
  unixTimestamp DateTime @map("unix_timestamp") @db.Timestamp(6)
  count         Int

  @@id([projectId, unixTimestamp])
  @@map("starkex")
  @@schema("activity")
}

model ZkSync {
  blockNumber   Int      @map("block_number")
  blockIndex    Int      @map("block_index")
  unixTimestamp DateTime @map("unix_timestamp") @db.Timestamp(6)

  @@id([blockNumber, blockIndex])
  @@map("zksync")
  @@schema("activity")
}
