{
  "name": "across-v3",
  "chain": "ethereum",
  "blockNumber": 19976242,
  "configHash": "0xcffebba091e4ed4e857f8933a919d410f67cec3001021555f861d13088eac059",
  "version": 6,
  "contracts": [
    {
      "name": "VotingToken",
      "address": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828",
      "ignoreInWatchMode": ["totalSupply", "totalSupplyAt"],
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1578581061,
      "values": {
        "decimals": 18,
        "getMember": ["0x7b292034084A41B9D441B71b6E3557Edd0463fa8"],
        "name": "UMA Voting Token v1",
        "symbol": "UMA",
        "totalSupply": "119318055685610205968488991",
        "totalSupplyAt": [
          "100000000000000000000000000",
          "100000000000000000000000000",
          "100034524092695877009538769",
          "100150034524092695877009517"
        ]
      },
      "derivedName": "VotingToken"
    },
    {
      "name": "Boba_Adapter",
      "address": "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1651747441,
      "values": {
        "l1StandardBridge": "0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00",
        "l1Weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "l2GasLimit": 2000000,
        "messenger": "0x6D4528d192dB72E282265D6092F4B872f9Dff69e"
      },
      "derivedName": "Boba_Adapter"
    },
    {
      "name": "Finder",
      "address": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1578580941,
      "values": {
        "isOwner": false,
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      }
    },
    {
      "name": "ProposerV2",
      "address": "0x50efaC9619225d7fB4703C5872da978849B6E7cC",
      "ignoreInWatchMode": ["bond", "getCurrentTime"],
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1677231527,
      "values": {
        "bond": "5000000000000000000000",
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getCurrentTime": 1716994451,
        "governor": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "token": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828"
      },
      "derivedName": "ProposerV2"
    },
    {
      "name": "Ethereum_Adapter",
      "address": "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1651577227
    },
    {
      "name": "Arbitrum_Adapter",
      "address": "0x5473CBD30bEd1Bf97C0c9d7c59d268CD620dA426",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1716255479,
      "values": {
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "L1_DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "L1_ERC20_GATEWAY_ROUTER": "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef",
        "L1_INBOX": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
        "L2_CALL_VALUE": 0,
        "L2_GAS_PRICE": 5000000000,
        "L2_MAX_SUBMISSION_COST": "10000000000000000",
        "L2_REFUND_L2_ADDRESS": "0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010",
        "recipientCircleDomainId": 3,
        "RELAY_MESSAGE_L2_GAS_LIMIT": 2000000,
        "RELAY_TOKENS_L2_GAS_LIMIT": 300000,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "derivedName": "Arbitrum_Adapter"
    },
    {
      "name": "Ethereum_SpokePool",
      "address": "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5",
      "ignoreInWatchMode": ["numberOfDeposits", "getCurrentTime"],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x08C21b200eD06D2e32cEC91a770C3FcA8aD5F877",
        "admin": "0xc186fA914353c44b2E33eBE05f21846F1048bEda"
      },
      "implementations": ["0x08C21b200eD06D2e32cEC91a770C3FcA8aD5F877"],
      "sinceTimestamp": 1682355155,
      "values": {
        "chainId": 1,
        "crossDomainAdmin": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "depositQuoteTimeBuffer": 3600,
        "EMPTY_RELAYER": "0x0000000000000000000000000000000000000000",
        "EMPTY_REPAYMENT_CHAIN_ID": 0,
        "fillDeadlineBuffer": 21600,
        "getCurrentTime": 1716994451,
        "hubPool": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "INFINITE_FILL_DEADLINE": 4294967295,
        "MAX_TRANSFER_SIZE": "1000000000000000000000000000000000000",
        "numberOfDeposits": 1351583,
        "owner": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "pausedDeposits": false,
        "pausedFills": false,
        "proxiableUUID": "EXPECT_REVERT",
        "UPDATE_V3_DEPOSIT_DETAILS_HASH": "0x152eb71524aef34d838ab76573c14b1ebfa5e385d9ab29d7cf5398daa2438bd9",
        "wrappedNativeToken": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "derivedName": "Ethereum_SpokePool"
    },
    {
      "name": "GovernorV2",
      "address": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
      "ignoreInWatchMode": ["getCurrentTime", "numProposals"],
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1677230459,
      "values": {
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getCurrentTime": 1716994451,
        "getMember": [
          "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "0x50efaC9619225d7fB4703C5872da978849B6E7cC",
          "0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748"
        ],
        "numProposals": 204
      },
      "derivedName": "GovernorV2"
    },
    {
      "name": "LpTokenFactory",
      "address": "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1651576251
    },
    {
      "name": "Linea_Adapter",
      "address": "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1710046163,
      "values": {
        "L1_MESSAGE_SERVICE": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
        "L1_TOKEN_BRIDGE": "0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319",
        "L1_USDC_BRIDGE": "0x504A330327A089d8364C4ab3811Ee26976d388ce",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "derivedName": "Linea_Adapter"
    },
    {
      "name": "EmergencyProposalExecutor",
      "address": "0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a",
      "template": "GnosisSafe",
      "ignoreInWatchMode": ["nonce"],
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "2 of 4 (50%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1597806870,
      "values": {
        "domainSeparator": "0xc6747c7ca6899274b3575cd632681f9db9a0788dd1b7c7379382739baa6aa665",
        "getChainId": 1,
        "getOwners": [
          "0x363605C0bdE9F1F5053aDA30618d95dbFc109Bf5",
          "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
          "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
          "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe"
        ],
        "getThreshold": 2,
        "nonce": 628,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "OptimisticGovernor",
      "address": "0x8692B776d1Ff0664177c90465038056Dc64f8991",
      "upgradeability": {
        "type": "gnosis safe zodiac module",
        "avatar": "0xB524735356985D2f267FA010D681f061DfF03715",
        "target": "0xB524735356985D2f267FA010D681f061DfF03715",
        "guard": "0x0000000000000000000000000000000000000000"
      },
      "sinceTimestamp": 1683067175,
      "values": {
        "avatar": "0xB524735356985D2f267FA010D681f061DfF03715",
        "bondAmount": "2000000000000000000",
        "collateral": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "escalationManager": "0x0000000000000000000000000000000000000000",
        "EXPLANATION_KEY": "0x6578706c616e6174696f6e",
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getGuard": "0x0000000000000000000000000000000000000000",
        "getProposalBond": "2000000000000000000",
        "guard": "0x0000000000000000000000000000000000000000",
        "identifier": "0x4153534552545f54525554480000000000000000000000000000000000000000",
        "liveness": 172800,
        "optimisticOracleV3": "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "PROPOSAL_HASH_KEY": "0x70726f706f73616c48617368",
        "rules": "I assert that this transaction proposal is valid according to the following rules: Proposals approved on Snapshot, as verified at https://snapshot.org/#/acrossprotocol.eth, are valid as long as there is a minimum quorum of 6000000 and a minimum voting period of 72 hours and it does not appear that the Snapshot voting system is being exploited or is otherwise unavailable. The quorum and voting period are minimum requirements for a proposal to be valid. Quorum and voting period values set for a specific proposal in Snapshot should be used if they are more strict than the rules parameter. The explanation included with the on-chain proposal must be the unique IPFS identifier for the specific Snapshot proposal that was approved or a unique identifier for a proposal in an alternative voting system approved by DAO social consensus if Snapshot is being exploited or is otherwise unavailable.",
        "RULES_KEY": "0x72756c6573",
        "target": "0xB524735356985D2f267FA010D681f061DfF03715"
      },
      "derivedName": "OptimisticGovernor"
    },
    {
      "name": "EmergencyProposer",
      "address": "0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748",
      "ignoreInWatchMode": ["getCurrentTime"],
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1677231923,
      "values": {
        "emergencyProposals": [],
        "executor": "0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a",
        "getCurrentTime": 1716994451,
        "governor": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "minimumWaitTime": 864000,
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "quorum": "5000000000000000000000000",
        "token": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828"
      },
      "derivedName": "EmergencyProposer"
    },
    {
      "name": "Polygon_Adapter",
      "address": "0xb4AeF0178f5725392A26eE18684C2aB62adc912e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1716255695,
      "values": {
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "DEPOSIT_MANAGER": "0x401F6c983eA34274ec46f84D70b31C151321188b",
        "ERC20_PREDICATE": "0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf",
        "FX_STATE_SENDER": "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
        "L1_MATIC": "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "recipientCircleDomainId": 7,
        "ROOT_CHAIN_MANAGER": "0xA0c68C638235ee32657e8f720a23ceC1bFc77C77",
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "derivedName": "Polygon_Adapter"
    },
    {
      "name": "HubPool Multisig",
      "address": "0xB524735356985D2f267FA010D681f061DfF03715",
      "template": "GnosisSafe",
      "ignoreInWatchMode": ["nonce"],
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": ["0x8692B776d1Ff0664177c90465038056Dc64f8991"],
        "threshold": "3 of 5 (60%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1636157803,
      "values": {
        "domainSeparator": "0xbb022dfb1fe065f2a2c6ea647af6240343ff4b980bc3c1183ecd630958c3b59e",
        "getChainId": 1,
        "getOwners": [
          "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
          "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe",
          "0x996267d7d1B7f5046543feDe2c2Db473Ed4f65e9",
          "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
          "0x868CF19464e17F76D6419ACC802B122c22D2FD34"
        ],
        "getThreshold": 3,
        "nonce": 216,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "CoveredCallFinancialProductLibrary",
      "address": "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1618347170
    },
    {
      "name": "HubPool",
      "address": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
      "ignoreInWatchMode": ["rootBundleProposal"],
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1653167916,
      "values": {
        "bondAmount": "450000000000000000",
        "bondToken": "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea",
        "CrossChainContracts": {
          "1": {
            "l2ChainId": 1,
            "adapter": "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
            "spokePool": "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5"
          },
          "10": {
            "l2ChainId": 10,
            "adapter": "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b",
            "spokePool": "0x6f26Bf09B1C792e3228e5467807a900A503c0281"
          },
          "137": {
            "l2ChainId": 137,
            "adapter": "0xb4AeF0178f5725392A26eE18684C2aB62adc912e",
            "spokePool": "0x9295ee1d8C5b022Be115A2AD3c30C72E34e7F096"
          },
          "288": {
            "l2ChainId": 288,
            "adapter": "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
            "spokePool": "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58"
          },
          "324": {
            "l2ChainId": 324,
            "adapter": "0xE233009838CB898b50e0012a6E783FC9FeE447FB",
            "spokePool": "0xE0B015E54d54fc84a6cB9B666099c46adE9335FF"
          },
          "8453": {
            "l2ChainId": 8453,
            "adapter": "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c",
            "spokePool": "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64"
          },
          "34443": {
            "l2ChainId": 34443,
            "adapter": "0xf1B59868697f3925b72889ede818B9E7ba0316d0",
            "spokePool": "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96"
          },
          "42161": {
            "l2ChainId": 42161,
            "adapter": "0x5473CBD30bEd1Bf97C0c9d7c59d268CD620dA426",
            "spokePool": "0xe35e9842fceaCA96570B734083f4a58e8F7C5f2A"
          },
          "59144": {
            "l2ChainId": 59144,
            "adapter": "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE",
            "spokePool": "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75"
          }
        },
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "identifier": "0x4143524f53532d56320000000000000000000000000000000000000000000000",
        "liveness": 3600,
        "lpFeeRatePerSecond": 1500000000000,
        "lpTokenFactory": "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "paused": false,
        "protocolFeeCaptureAddress": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
        "protocolFeeCapturePct": 0,
        "rootBundleProposal": {
          "poolRebalanceRoot": "0x5e30134e2245b12ee5a1014d32f55cb9d08629f7ae9ba4ce172c91057216fc21",
          "relayerRefundRoot": "0x15aa8a795120b241a99e71ddb102c8005a618f86fcb455047346933463282841",
          "slowRelayRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "claimedBitMap": 127,
          "proposer": "0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c",
          "unclaimedPoolRebalanceLeafCount": 0,
          "challengePeriodEndTimestamp": 1716993251
        },
        "timerAddress": "0x0000000000000000000000000000000000000000",
        "weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "derivedName": "HubPool"
    },
    {
      "name": "Base_Adapter",
      "address": "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1716255947,
      "values": {
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "L1_STANDARD_BRIDGE": "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x866E82a600A1414e583f7F13623F1aC5d58b0Afa",
        "recipientCircleDomainId": 6,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "derivedName": "Base_Adapter"
    },
    {
      "name": "Optimism_Adapter",
      "address": "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1716255311,
      "values": {
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "DAI_OPTIMISM_BRIDGE": "0x10E6593CDda8c58a1d0f14C5164B376352a55f2F",
        "L1_STANDARD_BRIDGE": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "recipientCircleDomainId": 2,
        "SNX": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
        "SNX_OPTIMISM_BRIDGE": "0x39Ea01a0298C315d149a490E34B59Dbf2EC7e48F",
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "derivedName": "Optimism_Adapter"
    },
    {
      "name": "ZkSync_Adapter",
      "address": "0xE233009838CB898b50e0012a6E783FC9FeE447FB",
      "ignoreInWatchMode": ["getL1CallValue"],
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1691158667,
      "values": {
        "getL1CallValue": 500000000000000,
        "L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT": 800,
        "l1Weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 2000000,
        "l2RefundAddress": "0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010",
        "zkErc20Bridge": "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
        "zkSyncEthBridge": "0x32400084C286CF3E17e7B677ea9583e60a000324",
        "zkSyncMessageBridge": "0x32400084C286CF3E17e7B677ea9583e60a000324"
      },
      "derivedName": "ZkSync_Adapter"
    },
    {
      "name": "BondToken",
      "address": "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1692831647,
      "values": {
        "decimals": 18,
        "hubPool": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "name": "Across Bond Token",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "proposers": ["0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c"],
        "symbol": "ABT",
        "totalSupply": "27802902467539846062"
      },
      "derivedName": "BondToken"
    },
    {
      "name": "Mode_Adapter",
      "address": "0xf1B59868697f3925b72889ede818B9E7ba0316d0",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1716243911,
      "values": {
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0x735aDBbE72226BD52e818E7181953f42E3b0FF21",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f",
        "recipientCircleDomainId": 0,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "derivedName": "Mode_Adapter"
    },
    {
      "name": "OptimisticOracleV3",
      "address": "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1676487275,
      "values": {
        "burnedBondPercentage": "500000000000000000",
        "cachedOracle": "0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac",
        "defaultCurrency": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "defaultIdentifier": "0x4153534552545f54525554480000000000000000000000000000000000000000",
        "defaultLiveness": 7200,
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "numericalTrue": "1000000000000000000",
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "derivedName": "OptimisticOracleV3"
    }
  ],
  "eoas": [
    "0x0000000000000000000000000000000000000000",
    "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
    "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
    "0x363605C0bdE9F1F5053aDA30618d95dbFc109Bf5",
    "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
    "0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010",
    "0x6f26Bf09B1C792e3228e5467807a900A503c0281",
    "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75",
    "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe",
    "0x868CF19464e17F76D6419ACC802B122c22D2FD34",
    "0x9295ee1d8C5b022Be115A2AD3c30C72E34e7F096",
    "0x996267d7d1B7f5046543feDe2c2Db473Ed4f65e9",
    "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
    "0xE0B015E54d54fc84a6cB9B666099c46adE9335FF",
    "0xe35e9842fceaCA96570B734083f4a58e8F7C5f2A",
    "0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c"
  ],
  "abis": {
    "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828": [
      "constructor()",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Snapshot(uint256 id)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function addMember(uint256 roleId, address newMember)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function balanceOfAt(address account, uint256 snapshotId) view returns (uint256)",
      "function burn(uint256 value)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function getMember(uint256 roleId) view returns (address)",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function mint(address recipient, uint256 value) returns (bool)",
      "function name() view returns (string)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function resetMember(uint256 roleId, address newMember)",
      "function snapshot() returns (uint256)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function totalSupplyAt(uint256 snapshotId) view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
    ],
    "0x08C21b200eD06D2e32cEC91a770C3FcA8aD5F877": [
      "constructor(address _wrappedNativeTokenAddress, uint32 _depositQuoteTimeBuffer, uint32 _fillDeadlineBuffer)",
      "error ClaimedMerkleLeaf()",
      "error DepositsArePaused()",
      "error DisabledRoute()",
      "error ExpiredFillDeadline()",
      "error FillsArePaused()",
      "error InvalidChainId()",
      "error InvalidCrossDomainAdmin()",
      "error InvalidDepositorSignature()",
      "error InvalidExclusiveRelayer()",
      "error InvalidExclusivityDeadline()",
      "error InvalidFillDeadline()",
      "error InvalidHubPool()",
      "error InvalidMerkleLeaf()",
      "error InvalidMerkleProof()",
      "error InvalidPayoutAdjustmentPct()",
      "error InvalidQuoteTimestamp()",
      "error InvalidRelayerFeePct()",
      "error InvalidSlowFillRequest()",
      "error MaxTransferSizeExceeded()",
      "error MsgValueDoesNotMatchInputAmount()",
      "error NoSlowFillsInExclusivityWindow()",
      "error NotEOA()",
      "error NotExclusiveRelayer()",
      "error RelayFilled()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event EmergencyDeleteRootBundle(uint256 indexed rootBundleId)",
      "event EnabledDepositRoute(address indexed originToken, uint256 indexed destinationChainId, bool enabled)",
      "event ExecutedRelayerRefundRoot(uint256 amountToReturn, uint256 indexed chainId, uint256[] refundAmounts, uint32 indexed rootBundleId, uint32 indexed leafId, address l2TokenAddress, address[] refundAddresses, address caller)",
      "event FilledRelay(uint256 amount, uint256 totalFilledAmount, uint256 fillAmount, uint256 repaymentChainId, uint256 indexed originChainId, uint256 destinationChainId, int64 relayerFeePct, int64 realizedLpFeePct, uint32 indexed depositId, address destinationToken, address relayer, address indexed depositor, address recipient, bytes message, tuple(address recipient, bytes message, int64 relayerFeePct, bool isSlowRelay, int256 payoutAdjustmentPct) updatableRelayData)",
      "event FilledV3Relay(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 repaymentChainId, uint256 indexed originChainId, uint32 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, address exclusiveRelayer, address indexed relayer, address depositor, address recipient, bytes message, tuple(address updatedRecipient, bytes updatedMessage, uint256 updatedOutputAmount, uint8 fillType) relayExecutionInfo)",
      "event FundsDeposited(uint256 amount, uint256 originChainId, uint256 indexed destinationChainId, int64 relayerFeePct, uint32 indexed depositId, uint32 quoteTimestamp, address originToken, address recipient, address indexed depositor, bytes message)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PausedDeposits(bool isPaused)",
      "event PausedFills(bool isPaused)",
      "event RelayedRootBundle(uint32 indexed rootBundleId, bytes32 indexed relayerRefundRoot, bytes32 indexed slowRelayRoot)",
      "event RequestedSpeedUpDeposit(int64 newRelayerFeePct, uint32 indexed depositId, address indexed depositor, address updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "event RequestedSpeedUpV3Deposit(uint256 updatedOutputAmount, uint32 indexed depositId, address indexed depositor, address updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "event RequestedV3SlowFill(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed originChainId, uint32 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, address exclusiveRelayer, address depositor, address recipient, bytes message)",
      "event SetHubPool(address indexed newHubPool)",
      "event SetXDomainAdmin(address indexed newAdmin)",
      "event TokensBridged(uint256 amountToReturn, uint256 indexed chainId, uint32 indexed leafId, address indexed l2TokenAddress, address caller)",
      "event Upgraded(address indexed implementation)",
      "event V3FundsDeposited(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed destinationChainId, uint32 indexed depositId, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityDeadline, address indexed depositor, address recipient, address exclusiveRelayer, bytes message)",
      "function EMPTY_RELAYER() view returns (address)",
      "function EMPTY_REPAYMENT_CHAIN_ID() view returns (uint256)",
      "function INFINITE_FILL_DEADLINE() view returns (uint32)",
      "function MAX_TRANSFER_SIZE() view returns (uint256)",
      "function UPDATE_V3_DEPOSIT_DETAILS_HASH() view returns (bytes32)",
      "function __SpokePool_init(uint32 _initialDepositId, address _crossDomainAdmin, address _hubPool)",
      "function chainId() view returns (uint256)",
      "function crossDomainAdmin() view returns (address)",
      "function deposit(address recipient, address originToken, uint256 amount, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256) payable",
      "function depositFor(address depositor, address recipient, address originToken, uint256 amount, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256) payable",
      "function depositQuoteTimeBuffer() view returns (uint32)",
      "function depositV3(address depositor, address recipient, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, address exclusiveRelayer, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) payable",
      "function depositV3Now(address depositor, address recipient, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, address exclusiveRelayer, uint32 fillDeadlineOffset, uint32 exclusivityDeadline, bytes message) payable",
      "function emergencyDeleteRootBundle(uint256 rootBundleId)",
      "function enabledDepositRoutes(address, uint256) view returns (bool)",
      "function executeRelayerRefundLeaf(uint32 rootBundleId, tuple(uint256 amountToReturn, uint256 chainId, uint256[] refundAmounts, uint32 leafId, address l2TokenAddress, address[] refundAddresses) relayerRefundLeaf, bytes32[] proof) payable",
      "function executeV3SlowRelayLeaf(tuple(tuple(address depositor, address recipient, address exclusiveRelayer, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint32 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 chainId, uint256 updatedOutputAmount) slowFillLeaf, uint32 rootBundleId, bytes32[] proof)",
      "function fillDeadlineBuffer() view returns (uint32)",
      "function fillStatuses(bytes32) view returns (uint256)",
      "function fillV3Relay(tuple(address depositor, address recipient, address exclusiveRelayer, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint32 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 repaymentChainId)",
      "function fillV3RelayWithUpdatedDeposit(tuple(address depositor, address recipient, address exclusiveRelayer, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint32 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 repaymentChainId, uint256 updatedOutputAmount, address updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "function getCurrentTime() view returns (uint256)",
      "function hubPool() view returns (address)",
      "function initialize(uint32 _initialDepositId, address _hubPool)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numberOfDeposits() view returns (uint32)",
      "function owner() view returns (address)",
      "function pauseDeposits(bool pause)",
      "function pauseFills(bool pause)",
      "function pausedDeposits() view returns (bool)",
      "function pausedFills() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function relayRootBundle(bytes32 relayerRefundRoot, bytes32 slowRelayRoot)",
      "function renounceOwnership()",
      "function requestV3SlowFill(tuple(address depositor, address recipient, address exclusiveRelayer, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint32 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData)",
      "function rootBundles(uint256) view returns (bytes32 slowRelayRoot, bytes32 relayerRefundRoot)",
      "function setCrossDomainAdmin(address newCrossDomainAdmin)",
      "function setEnableRoute(address originToken, uint256 destinationChainId, bool enabled)",
      "function setHubPool(address newHubPool)",
      "function speedUpV3Deposit(address depositor, uint32 depositId, uint256 updatedOutputAmount, address updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "function transferOwnership(address newOwner)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function wrappedNativeToken() view returns (address)"
    ],
    "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function l1StandardBridge() view returns (address)",
      "function l1Weth() view returns (address)",
      "function l2GasLimit() view returns (uint32)",
      "function messenger() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x40f941E48A552bF496B154Af6bf55725f18D77c3": [
      "event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)",
      "function getImplementationAddress(bytes32 interfaceName) view returns (address implementationAddress)",
      "function interfacesImplemented(bytes32) view returns (address)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0x50efaC9619225d7fB4703C5872da978849B6E7cC": [
      "constructor(address _token, uint256 _bond, address _governor, address _finder)",
      "event BondSet(uint256 bond)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalResolved(uint256 indexed id, bool success)",
      "function bond() view returns (uint256)",
      "function bondedProposals(uint256) view returns (address sender, uint64 time, uint256 lockedBond, bytes ancillaryData)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function governor() view returns (address)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function owner() view returns (address)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions, bytes ancillaryData) returns (uint256)",
      "function renounceOwnership()",
      "function resolveProposal(uint256 id)",
      "function setBond(uint256 _bond)",
      "function token() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084": [
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x5473CBD30bEd1Bf97C0c9d7c59d268CD620dA426": [
      "constructor(address _l1ArbitrumInbox, address _l1ERC20GatewayRouter, address _l2RefundL2Address, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_DAI() view returns (address)",
      "function L1_ERC20_GATEWAY_ROUTER() view returns (address)",
      "function L1_INBOX() view returns (address)",
      "function L2_CALL_VALUE() view returns (uint256)",
      "function L2_GAS_PRICE() view returns (uint256)",
      "function L2_MAX_SUBMISSION_COST() view returns (uint256)",
      "function L2_REFUND_L2_ADDRESS() view returns (address)",
      "function RELAY_MESSAGE_L2_GAS_LIMIT() view returns (uint32)",
      "function RELAY_TOKENS_L2_GAS_LIMIT() view returns (uint32)",
      "function cctpTokenMessenger() view returns (address)",
      "function getL1CallValue(uint32 l2GasLimit) pure returns (uint256)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5": [
      "constructor(address _logic, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x7b292034084A41B9D441B71b6E3557Edd0463fa8": [
      "constructor(address _finderAddress, uint256 _startingId)",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event EmergencyExecution(address indexed to, uint256 value, bytes data)",
      "event NewProposal(uint256 indexed id, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event ProposalExecuted(uint256 indexed id, uint256 transactionIndex)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function addMember(uint256 roleId, address newMember)",
      "function emergencyExecute(tuple(address to, uint256 value, bytes data) transaction) payable",
      "function executeProposal(uint256 id, uint256 transactionIndex) payable",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getMember(uint256 roleId) view returns (address)",
      "function getProposal(uint256 id) view returns (tuple(tuple(address to, uint256 value, bytes data)[] transactions, uint256 requestTime, bytes ancillaryData))",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numProposals() view returns (uint256)",
      "function proposals(uint256) view returns (uint256 requestTime, bytes ancillaryData)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions, bytes ancillaryData)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)"
    ],
    "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d": [
      "function createLpToken(address l1Token) returns (address)"
    ],
    "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE": [
      "constructor(address _l1Weth, address _l1MessageService, address _l1TokenBridge, address _l1UsdcBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_MESSAGE_SERVICE() view returns (address)",
      "function L1_TOKEN_BRIDGE() view returns (address)",
      "function L1_USDC_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a": [
      "constructor(address _masterCopy)"
    ],
    "0x8692B776d1Ff0664177c90465038056Dc64f8991": [
      "constructor(address _finder, address _owner, address _collateral, uint256 _bondAmount, string _rules, bytes32 _identifier, uint64 _liveness)",
      "error NotIERC165Compliant(address guard_)",
      "event AvatarSet(address indexed previousAvatar, address indexed newAvatar)",
      "event ChangedGuard(address guard)",
      "event Initialized(uint8 version)",
      "event OptimisticGovernorDeployed(address indexed owner, address indexed avatar, address target)",
      "event OptimisticOracleChanged(address indexed newOptimisticOracleV3)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalDeleted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event ProposalExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event SetCollateralAndBond(address indexed collateral, uint256 indexed bondAmount)",
      "event SetEscalationManager(address indexed escalationManager)",
      "event SetIdentifier(bytes32 indexed identifier)",
      "event SetLiveness(uint64 indexed liveness)",
      "event SetRules(string rules)",
      "event TargetSet(address indexed previousTarget, address indexed newTarget)",
      "event TransactionExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId, uint256 indexed transactionIndex)",
      "event TransactionsProposed(address indexed proposer, uint256 indexed proposalTime, bytes32 indexed assertionId, tuple(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, uint256 requestTime) proposal, bytes32 proposalHash, bytes explanation, string rules, uint256 challengeWindowEnds)",
      "function EXPLANATION_KEY() view returns (bytes)",
      "function PROPOSAL_HASH_KEY() view returns (bytes)",
      "function RULES_KEY() view returns (bytes)",
      "function assertionDisputedCallback(bytes32 assertionId)",
      "function assertionIds(bytes32) view returns (bytes32)",
      "function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully)",
      "function avatar() view returns (address)",
      "function bondAmount() view returns (uint256)",
      "function collateral() view returns (address)",
      "function deleteProposalOnUpgrade(bytes32 proposalHash)",
      "function escalationManager() view returns (address)",
      "function executeProposal(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getGuard() view returns (address _guard)",
      "function getProposalBond() view returns (uint256)",
      "function guard() view returns (address)",
      "function identifier() view returns (bytes32)",
      "function liveness() view returns (uint64)",
      "function optimisticOracleV3() view returns (address)",
      "function owner() view returns (address)",
      "function proposalHashes(bytes32) view returns (bytes32)",
      "function proposeTransactions(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, bytes explanation)",
      "function renounceOwnership()",
      "function rules() view returns (string)",
      "function setAvatar(address _avatar)",
      "function setCollateralAndBond(address _collateral, uint256 _bondAmount)",
      "function setEscalationManager(address _escalationManager)",
      "function setGuard(address _guard)",
      "function setIdentifier(bytes32 _identifier)",
      "function setLiveness(uint64 _liveness)",
      "function setRules(string _rules)",
      "function setTarget(address _target)",
      "function setUp(bytes initializeParams)",
      "function sync()",
      "function target() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748": [
      "constructor(address _token, uint256 _quorum, address _governor, address _executor, uint64 _minimumWaitTime)",
      "event EmergencyProposalExecuted(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event EmergencyProposalRemoved(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event EmergencyProposalSlashed(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event EmergencyTransactionsProposed(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event ExecutorSet(address executor)",
      "event MinimumWaitTimeSet(uint256 minimumWaitTime)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QuorumSet(uint256 quorum)",
      "function emergencyProposals(uint256) view returns (address sender, uint64 expiryTime, uint256 lockedTokens)",
      "function emergencyPropose(tuple(address to, uint256 value, bytes data)[] transactions) returns (uint256)",
      "function executeEmergencyProposal(uint256 id) payable",
      "function executor() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function governor() view returns (address)",
      "function minimumWaitTime() view returns (uint64)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function owner() view returns (address)",
      "function quorum() view returns (uint256)",
      "function removeProposal(uint256 id)",
      "function renounceOwnership()",
      "function setExecutor(address newExecutor)",
      "function setMinimumWaitTime(uint64 newMinimumWaitTime)",
      "function setQuorum(uint256 newQuorum)",
      "function slashProposal(uint256 id)",
      "function token() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0xb4AeF0178f5725392A26eE18684C2aB62adc912e": [
      "constructor(address _rootChainManager, address _fxStateSender, address _depositManager, address _erc20Predicate, address _l1Matic, address _l1Weth, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function DEPOSIT_MANAGER() view returns (address)",
      "function ERC20_PREDICATE() view returns (address)",
      "function FX_STATE_SENDER() view returns (address)",
      "function L1_MATIC() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function ROOT_CHAIN_MANAGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xB524735356985D2f267FA010D681f061DfF03715": [
      "constructor(address _singleton)"
    ],
    "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58": [
      "function getStrikeForFinancialProduct(address financialProduct) view returns (tuple(uint256 rawValue))",
      "function setFinancialProductStrike(address financialProduct, tuple(uint256 rawValue) strikePrice)",
      "function transformCollateralRequirement(tuple(uint256 rawValue) oraclePrice, tuple(uint256 rawValue) collateralRequirement) view returns (tuple(uint256 rawValue))",
      "function transformPrice(tuple(uint256 rawValue) oraclePrice, uint256 requestTime) view returns (tuple(uint256 rawValue))",
      "function transformPriceIdentifier(bytes32 priceIdentifier, uint256 requestTime) view returns (bytes32)"
    ],
    "0xc186fA914353c44b2E33eBE05f21846F1048bEda": [
      "constructor(address _lpTokenFactory, address _finder, address _weth, address _timer)",
      "event BondSet(address indexed newBondToken, uint256 newBondAmount)",
      "event CrossChainContractsSet(uint256 l2ChainId, address adapter, address spokePool)",
      "event EmergencyRootBundleDeleted(bytes32 indexed poolRebalanceRoot, bytes32 indexed relayerRefundRoot, bytes32 slowRelayRoot, address indexed proposer)",
      "event IdentifierSet(bytes32 newIdentifier)",
      "event L1TokenEnabledForLiquidityProvision(address l1Token, address lpToken)",
      "event L2TokenDisabledForLiquidityProvision(address l1Token, address lpToken)",
      "event LiquidityAdded(address indexed l1Token, uint256 amount, uint256 lpTokensMinted, address indexed liquidityProvider)",
      "event LiquidityRemoved(address indexed l1Token, uint256 amount, uint256 lpTokensBurnt, address indexed liquidityProvider)",
      "event LivenessSet(uint256 newLiveness)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(bool indexed isPaused)",
      "event ProposeRootBundle(uint32 challengePeriodEndTimestamp, uint8 poolRebalanceLeafCount, uint256[] bundleEvaluationBlockNumbers, bytes32 indexed poolRebalanceRoot, bytes32 indexed relayerRefundRoot, bytes32 slowRelayRoot, address indexed proposer)",
      "event ProtocolFeeCaptureSet(address indexed newProtocolFeeCaptureAddress, uint256 indexed newProtocolFeeCapturePct)",
      "event ProtocolFeesCapturedClaimed(address indexed l1Token, uint256 indexed accumulatedFees)",
      "event RootBundleCanceled(address indexed disputer, uint256 requestTime)",
      "event RootBundleDisputed(address indexed disputer, uint256 requestTime)",
      "event RootBundleExecuted(uint256 groupIndex, uint256 indexed leafId, uint256 indexed chainId, address[] l1Tokens, uint256[] bundleLpFees, int256[] netSendAmounts, int256[] runningBalances, address indexed caller)",
      "event SetEnableDepositRoute(uint256 indexed originChainId, uint256 indexed destinationChainId, address indexed originToken, bool depositsEnabled)",
      "event SetPoolRebalanceRoute(uint256 indexed destinationChainId, address indexed l1Token, address indexed destinationToken)",
      "event SpokePoolAdminFunctionTriggered(uint256 indexed chainId, bytes message)",
      "function addLiquidity(address l1Token, uint256 l1TokenAmount) payable",
      "function bondAmount() view returns (uint256)",
      "function bondToken() view returns (address)",
      "function claimProtocolFeesCaptured(address l1Token)",
      "function crossChainContracts(uint256) view returns (address adapter, address spokePool)",
      "function disableL1TokenForLiquidityProvision(address l1Token)",
      "function disputeRootBundle()",
      "function emergencyDeleteProposal()",
      "function enableL1TokenForLiquidityProvision(address l1Token)",
      "function exchangeRateCurrent(address l1Token) returns (uint256)",
      "function executeRootBundle(uint256 chainId, uint256 groupIndex, uint256[] bundleLpFees, int256[] netSendAmounts, int256[] runningBalances, uint8 leafId, address[] l1Tokens, bytes32[] proof)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function haircutReserves(address l1Token, int256 haircutAmount)",
      "function identifier() view returns (bytes32)",
      "function liquidityUtilizationCurrent(address l1Token) returns (uint256)",
      "function liquidityUtilizationPostRelay(address l1Token, uint256 relayedAmount) returns (uint256)",
      "function liveness() view returns (uint32)",
      "function loadEthForL2Calls() payable",
      "function lpFeeRatePerSecond() view returns (uint256)",
      "function lpTokenFactory() view returns (address)",
      "function multicall(bytes[] data) payable returns (bytes[] results)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function poolRebalanceRoute(uint256 destinationChainId, address l1Token) view returns (address destinationToken)",
      "function pooledTokens(address) view returns (address lpToken, bool isEnabled, uint32 lastLpFeeUpdate, int256 utilizedReserves, uint256 liquidReserves, uint256 undistributedLpFees)",
      "function proposeRootBundle(uint256[] bundleEvaluationBlockNumbers, uint8 poolRebalanceLeafCount, bytes32 poolRebalanceRoot, bytes32 relayerRefundRoot, bytes32 slowRelayRoot)",
      "function protocolFeeCaptureAddress() view returns (address)",
      "function protocolFeeCapturePct() view returns (uint256)",
      "function relaySpokePoolAdminFunction(uint256 chainId, bytes functionData)",
      "function removeLiquidity(address l1Token, uint256 lpTokenAmount, bool sendEth)",
      "function renounceOwnership()",
      "function rootBundleProposal() view returns (bytes32 poolRebalanceRoot, bytes32 relayerRefundRoot, bytes32 slowRelayRoot, uint256 claimedBitMap, address proposer, uint8 unclaimedPoolRebalanceLeafCount, uint32 challengePeriodEndTimestamp)",
      "function setBond(address newBondToken, uint256 newBondAmount)",
      "function setCrossChainContracts(uint256 l2ChainId, address adapter, address spokePool)",
      "function setCurrentTime(uint256 time)",
      "function setDepositRoute(uint256 originChainId, uint256 destinationChainId, address originToken, bool depositsEnabled)",
      "function setIdentifier(bytes32 newIdentifier)",
      "function setLiveness(uint32 newLiveness)",
      "function setPaused(bool pause)",
      "function setPoolRebalanceRoute(uint256 destinationChainId, address l1Token, address destinationToken)",
      "function setProtocolFeeCapture(address newProtocolFeeCaptureAddress, uint256 newProtocolFeeCapturePct)",
      "function sync(address l1Token)",
      "function timerAddress() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unclaimedAccumulatedProtocolFees(address) view returns (uint256)",
      "function weth() view returns (address)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function DAI() view returns (address)",
      "function DAI_OPTIMISM_BRIDGE() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function SNX() view returns (address)",
      "function SNX_OPTIMISM_BRIDGE() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xE233009838CB898b50e0012a6E783FC9FeE447FB": [
      "constructor(address _l1Weth, address _l2RefundAddress)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "event ZkSyncMessageRelayed(bytes32 canonicalTxHash)",
      "function L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT() view returns (uint256)",
      "function L2_GAS_LIMIT() view returns (uint256)",
      "function getL1CallValue() view returns (uint256)",
      "function l1Weth() view returns (address)",
      "function l2RefundAddress() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function zkErc20Bridge() view returns (address)",
      "function zkSyncEthBridge() view returns (address)",
      "function zkSyncMessageBridge() view returns (address)"
    ],
    "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea": [
      "constructor(address _hubPool)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposerModified(address proposer, bool enabled)",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)",
      "function allowance(address, address) view returns (uint256)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function balanceOf(address) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function deposit() payable",
      "function hubPool() view returns (address)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function proposers(address) view returns (bool)",
      "function renounceOwnership()",
      "function setProposer(address proposer, bool enabled)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function transferFrom(address src, address dst, uint256 amt) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function withdraw(uint256 wad)"
    ],
    "0xf1B59868697f3925b72889ede818B9E7ba0316d0": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE": [
      "constructor(address _finder, address _defaultCurrency, uint64 _defaultLiveness)",
      "event AdminPropertiesSet(address defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage)",
      "event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer)",
      "event AssertionMade(bytes32 indexed assertionId, bytes32 domainId, bytes claim, address indexed asserter, address callbackRecipient, address escalationManager, address caller, uint64 expirationTime, address currency, uint256 bond, bytes32 indexed identifier)",
      "event AssertionSettled(bytes32 indexed assertionId, address indexed bondRecipient, bool disputed, bool settlementResolution, address settleCaller)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function assertTruth(bytes claim, address asserter, address callbackRecipient, address escalationManager, uint64 liveness, address currency, uint256 bond, bytes32 identifier, bytes32 domainId) returns (bytes32 assertionId)",
      "function assertTruthWithDefaults(bytes claim, address asserter) returns (bytes32)",
      "function assertions(bytes32) view returns (tuple(bool arbitrateViaEscalationManager, bool discardOracle, bool validateDisputers, address assertingCaller, address escalationManager) escalationManagerSettings, address asserter, uint64 assertionTime, bool settled, address currency, uint64 expirationTime, bool settlementResolution, bytes32 domainId, bytes32 identifier, uint256 bond, address callbackRecipient, address disputer)",
      "function burnedBondPercentage() view returns (uint256)",
      "function cachedCurrencies(address) view returns (bool isWhitelisted, uint256 finalFee)",
      "function cachedIdentifiers(bytes32) view returns (bool)",
      "function cachedOracle() view returns (address)",
      "function defaultCurrency() view returns (address)",
      "function defaultIdentifier() view returns (bytes32)",
      "function defaultLiveness() view returns (uint64)",
      "function disputeAssertion(bytes32 assertionId, address disputer)",
      "function finder() view returns (address)",
      "function getAssertion(bytes32 assertionId) view returns (tuple(tuple(bool arbitrateViaEscalationManager, bool discardOracle, bool validateDisputers, address assertingCaller, address escalationManager) escalationManagerSettings, address asserter, uint64 assertionTime, bool settled, address currency, uint64 expirationTime, bool settlementResolution, bytes32 domainId, bytes32 identifier, uint256 bond, address callbackRecipient, address disputer))",
      "function getAssertionResult(bytes32 assertionId) view returns (bool)",
      "function getCurrentTime() view returns (uint256)",
      "function getMinimumBond(address currency) view returns (uint256)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numericalTrue() view returns (int256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAdminProperties(address _defaultCurrency, uint64 _defaultLiveness, uint256 _burnedBondPercentage)",
      "function settleAndGetAssertionResult(bytes32 assertionId) returns (bool)",
      "function settleAssertion(bytes32 assertionId)",
      "function stampAssertion(bytes32 assertionId) view returns (bytes)",
      "function syncUmaParams(bytes32 identifier, address currency)",
      "function transferOwnership(address newOwner)"
    ]
  }
}
