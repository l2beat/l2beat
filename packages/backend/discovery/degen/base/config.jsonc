{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "base",
  "name": "degen",
  "initialAddresses": [
    "0xD34F3a11F10DB069173b32d84F02eDA578709143", // rollup proxy
    "0x43019F8BE1F192587883b67dEA2994999f5a2de2", // main bridge (stargate/layerzero?)
    "0xf70da97812CB96acDF810712Aa562db8dfA3dbEF" // relay bridge
  ],
  "names": {
    "0xD34F3a11F10DB069173b32d84F02eDA578709143": "RollupProxy",
    "0xEfEf4558802bF373Ce3307189C79a9cAb0a4Cb9C": "Bridge",
    "0x6216dD1EE27C5aCEC7427052d3eCDc98E2bc2221": "SequencerInbox",
    "0x21A1e2BFC61F30F2E81E0b08cd37c1FC7ef776E7": "Inbox",
    "0xe63ddb12FBb6211a73F12a4367b10dA0834B82da": "Outbox",
    "0x67812161Bbb6aCF891aA6028BC614a660961ceD8": "ChallengeManager",
    "0xaA3A7A2ec2477A61082E1C41a2c6710587917028": "UpgradeExecutor",
    "0x7dCe2FEE5e30EFf298cD3d9B92649f00EBDfc104": "RollupOwnerMultisig",
    "0x43019F8BE1F192587883b67dEA2994999f5a2de2": "UTBDecent", // Decent omnichain service (LayerZero)
    "0xf70da97812CB96acDF810712Aa562db8dfA3dbEF": "Relay Bridge" // EOA Bridge / Liquidity network https://relay.link/transactions/
  },
  "overrides": {
    "RollupProxy": {
      "ignoreMethods": [
        // Execution reverted
        "proxiableUUID"
      ],
      "ignoreInWatchMode": [
        "firstUnresolvedNode",
        "latestConfirmed",
        "latestNodeCreated"
      ],
      "fields": {
        // when this changes, it means the validators have changed
        "setValidatorCount": {
          "handler": {
            "type": "eventCount",
            "topics": [
              // event OwnerFunctionCalled(uint256 indexed id);
              "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
              // id == 6 is emitted inside setValidator()
              "0x0000000000000000000000000000000000000000000000000000000000000006"
            ]
          }
        },
        "challenges": {
          "handler": {
            "type": "stateFromEvent",
            "event": "RollupChallengeStarted",
            "returnParams": [
              "challengeIndex",
              "asserter",
              "challenger",
              "challengedNode"
            ]
          }
        },
        "validators": {
          "handler": {
            "type": "arbitrumActors",
            "actorType": "validator"
          }
        }
      }
    },
    "UpgradeExecutor": {
      "fields": {
        "accessControl": {
          "handler": {
            "type": "accessControl"
          }
        }
      }
    },
    "Outbox": {
      "ignoreMethods": ["spent", "isSpent"]
    },
    "Bridge": {
      "ignoreMethods": ["sequencerInboxAccs", "delayedInboxAccs"],
      "ignoreInWatchMode": [
        "delayedMessageCount",
        "sequencerMessageCount",
        "sequencerReportedSubMessageCount"
      ],
      "ignoreRelatives": ["nativeToken"]
    },
    "SequencerInbox": {
      "ignoreMethods": ["inboxAccs"],
      "ignoreInWatchMode": ["batchCount", "totalDelayedMessagesRead"],
      "fields": {
        // getting sequencers from the contract is too complex at the moment
        // so we hardcode it in config .ts
        // this field will notify us in case of changes
        "IS_HARDCODED_SEQUENCER_BATCH_POSTER": {
          "handler": {
            "type": "call",
            "method": "function isBatchPoster(address) external view returns (bool)",
            "args": ["0x02c903F5c76F3f00c1F659702Bd76DF30470bBEE"]
          }
        },
        "sequencerVersion": {
          "handler": {
            "type": "arbitrumSequencerVersion"
          }
        },
        "dacKeyset": {
          "handler": {
            "type": "arbitrumDACKeyset"
          }
        },
        // when this changes, it means the sequencers have changed
        "setIsBatchPosterCount": {
          "handler": {
            "type": "eventCount",
            "topics": [
              // event OwnerFunctionCalled(uint256 indexed id);
              "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
              // id == 6 is emitted inside setValidator()
              "0x0000000000000000000000000000000000000000000000000000000000000001"
            ]
          }
        },
        "batchPosters": {
          "handler": {
            "type": "arbitrumActors",
            "actorType": "batchPoster"
          }
        },
        "keySetUpdates": {
          "handler": {
            "type": "eventCount",
            "topics": [
              // SetValidKeyset(bytes32,bytes)
              "0xabca9b7986bc22ad0160eb0cb88ae75411eacfba4052af0b457a9335ef655722"
            ]
          }
        }
      }
    },
    "ChallengeManager": {
      "ignoreMethods": ["challenges"]
    },
    "UTBDecent": {
      "fields": {
        "accessControl": {
          "handler": {
            "type": "accessControl"
          }
        }
      }
    },
    "RollupOwnerMultisig": {
      "ignoreInWatchMode": ["nonce"]
    }
  }
}
