{
  "name": "b3",
  "chain": "base",
  "blockNumber": 23224422,
  "configHash": "0x1eaeab3dd70d66cbe86dd67c425b95ff39e595beaa4b0f149e9c81eefe93053f",
  "contracts": [
    {
      "name": "ProxyAdmin",
      "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x96d2f0fa1bd83ebd61ba6a2351c64c7fda7aa580b11ea67bb6bf4338e5c28512"
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "configure",
          "target": "0xd79005b0f06b2C518893d2Ba31f94429e555b6b1",
          "description": "set and change address mappings."
        },
        {
          "permission": "upgrade",
          "target": "0x3a314A6a3c1470Bf2854960D3Ce9D2435c7Ba794"
        },
        {
          "permission": "upgrade",
          "target": "0x3D748542A3bb90952d90f99F3fbfDAD8B6756B0A"
        },
        {
          "permission": "upgrade",
          "target": "0x536cf1ABfD22E61a13753c0F08613aDdF4ca0595"
        },
        {
          "permission": "upgrade",
          "target": "0x769547a723783FCA36BAaf1ECcf9dfdbF6d09F38",
          "description": "upgrading the bridge implementation can give access to all funds escrowed therein."
        },
        {
          "permission": "upgrade",
          "target": "0x88Ac5Be224B0bA925A9CA73a4FAFbA171849ec06"
        },
        {
          "permission": "upgrade",
          "target": "0xA9Bc65Ff5A3106351fa92B04C91d505BcCd92Cad"
        },
        {
          "permission": "upgrade",
          "target": "0xe736142a3e957660cBae61AC4bD61e5b65635140"
        }
      ],
      "sinceTimestamp": 1722376845,
      "values": {
        "$immutable": true,
        "addressManager": "0xd79005b0f06b2C518893d2Ba31f94429e555b6b1",
        "isUpgrading": false,
        "owner": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce"
      }
    },
    {
      "name": "B3Multisig",
      "address": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0x59fe14e95a8aa7f52213f18bae5c9329cf583a7ba31194698b15eddb97d5e825"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "configure",
          "target": "0xd79005b0f06b2C518893d2Ba31f94429e555b6b1",
          "description": "set and change address mappings.",
          "via": [{ "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A" }]
        },
        {
          "permission": "upgrade",
          "target": "0x3a314A6a3c1470Bf2854960D3Ce9D2435c7Ba794",
          "via": [{ "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A" }]
        },
        {
          "permission": "upgrade",
          "target": "0x3D748542A3bb90952d90f99F3fbfDAD8B6756B0A",
          "via": [{ "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A" }]
        },
        {
          "permission": "upgrade",
          "target": "0x536cf1ABfD22E61a13753c0F08613aDdF4ca0595",
          "via": [{ "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A" }]
        },
        {
          "permission": "upgrade",
          "target": "0x769547a723783FCA36BAaf1ECcf9dfdbF6d09F38",
          "description": "upgrading the bridge implementation can give access to all funds escrowed therein.",
          "via": [{ "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A" }]
        },
        {
          "permission": "upgrade",
          "target": "0x88Ac5Be224B0bA925A9CA73a4FAFbA171849ec06",
          "via": [{ "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A" }]
        },
        {
          "permission": "upgrade",
          "target": "0xA9Bc65Ff5A3106351fa92B04C91d505BcCd92Cad",
          "via": [{ "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A" }]
        },
        {
          "permission": "upgrade",
          "target": "0xe736142a3e957660cBae61AC4bD61e5b65635140",
          "via": [{ "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A" }]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "target": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1723143069,
      "values": {
        "$immutable": false,
        "$implementation": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "$members": [
          "0x34f1fb4c76019d83Eb287B56bAa5466Fc130A028",
          "0xB6faDA40e4376D262e25068534df4788023Bb8A3",
          "0x8486C301D5719ADdf6AB789E92D24423c50a940D",
          "0x03A0080CA69B333F2a3697Eed806Bd8c31baCF8B"
        ],
        "$threshold": 2,
        "domainSeparator": "0x9e8fae91af3a976fb5b1526f884afd69c9f0b900cbabc34cc3af2c94d235fd14",
        "getChainId": 8453,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 4 (50%)",
        "nonce": 6,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafeL2"
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x39d484F0FC1b3bfAed7D54934FF5C8e5d47A6867",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x6bee26e08bb3e482693649b598e8c0423de9025ebebdc773e9a2f9aa6f362478"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "categories": ["Core"],
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1722376845,
      "values": {
        "$immutable": false,
        "$implementation": "0xce1E945A3426f0521eB9D1Ccc63D6d204bC49D40",
        "$pastUpgrades": [
          [
            "2024-07-30T22:00:51.000Z",
            "0xaa3e854bd458ad1aae258f4953bc60a63725da3d809aa12717c8d7db7c5d7e7b",
            ["0xce1E945A3426f0521eB9D1Ccc63D6d204bC49D40"]
          ]
        ],
        "$upgradeCount": 1,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292646512",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x3a314A6a3c1470Bf2854960D3Ce9D2435c7Ba794",
        "PORTAL": "0x3a314A6a3c1470Bf2854960D3Ce9D2435c7Ba794",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0xd79005b0f06b2C518893d2Ba31f94429e555b6b1",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0xe736142a3e957660cBae61AC4bD61e5b65635140",
        "systemConfig": "0xA9Bc65Ff5A3106351fa92B04C91d505BcCd92Cad",
        "version": "2.4.0"
      }
    },
    {
      "name": "OptimismPortal",
      "address": "0x3a314A6a3c1470Bf2854960D3Ce9D2435c7Ba794",
      "template": "opstack/OptimismPortal",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0x268c4512b5cec8430ffcee3078214e3356c1983d934c7fc35982efd9e197dda3"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit funds from host chain to this chain. It also allows to prove and finalize withdrawals.",
      "issuedPermissions": [
        {
          "permission": "guard",
          "target": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
          "via": []
        },
        {
          "permission": "upgrade",
          "target": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce",
          "via": [
            {
              "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
              "delay": 0
            }
          ]
        }
      ],
      "ignoreInWatchMode": ["params"],
      "sinceTimestamp": 1722376845,
      "values": {
        "$admin": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
        "$implementation": "0x602267995C801D85b4b854817D0a2231f64C3D7D",
        "$pastUpgrades": [
          [
            "2024-07-30T22:00:51.000Z",
            "0xa0bc4ff6133312b014f644d0c8104e54bc815c0c973308333f1e065c61ed893d",
            ["0x602267995C801D85b4b854817D0a2231f64C3D7D"]
          ]
        ],
        "$upgradeCount": 1,
        "guardian": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
        "l2Oracle": "0x536cf1ABfD22E61a13753c0F08613aDdF4ca0595",
        "l2Sender": "0x000000000000000000000000000000000000dEaD",
        "params": {
          "prevBaseFee": 1000000000,
          "prevBoughtGas": 490798,
          "prevBlockNum": 23218056
        },
        "paused": false,
        "superchainConfig": "0xe736142a3e957660cBae61AC4bD61e5b65635140",
        "systemConfig": "0xA9Bc65Ff5A3106351fa92B04C91d505BcCd92Cad",
        "version": "2.8.1-beta.1"
      }
    },
    {
      "name": "L1ERC721Bridge",
      "address": "0x3D748542A3bb90952d90f99F3fbfDAD8B6756B0A",
      "template": "opstack/L1ERC721Bridge",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0x213ec4c2cba8ee3e5261dea43660185830da2ba624da6cd1bcd3c342732b576e"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce",
          "via": [
            {
              "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
              "delay": 0
            }
          ]
        }
      ],
      "sinceTimestamp": 1722376845,
      "values": {
        "$admin": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
        "$implementation": "0xd2227e78ee343a0d6166B4Bd5a18Ebb286c8Cc05",
        "$pastUpgrades": [
          [
            "2024-07-30T22:00:51.000Z",
            "0xef98d9c51853a310307b32604784a32db01277e5ef81e99705f563d2e574df27",
            ["0xd2227e78ee343a0d6166B4Bd5a18Ebb286c8Cc05"]
          ]
        ],
        "$upgradeCount": 1,
        "messenger": "0x39d484F0FC1b3bfAed7D54934FF5C8e5d47A6867",
        "MESSENGER": "0x39d484F0FC1b3bfAed7D54934FF5C8e5d47A6867",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000014",
        "otherBridge": "0x4200000000000000000000000000000000000014",
        "paused": false,
        "superchainConfig": "0xe736142a3e957660cBae61AC4bD61e5b65635140",
        "version": "2.1.0"
      }
    },
    {
      "name": "L2OutputOracle",
      "address": "0x536cf1ABfD22E61a13753c0F08613aDdF4ca0595",
      "template": "opstack/L2OutputOracle",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0x025c187b0231be4785898f25f98d749f953f5d06781772aef242812e2ecf52e3"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contains a list of proposed state roots which Proposers assert to be a result of block execution. Currently only the PROPOSER address can submit new state roots.",
      "issuedPermissions": [
        {
          "permission": "challenge",
          "target": "0xEAC870005Fe175eEc9365502eAEb2A6f50De1eff",
          "via": []
        },
        {
          "permission": "propose",
          "target": "0x9c9Db06722b3E33fa356C7347f7fBe328a26Dc7d",
          "via": []
        },
        {
          "permission": "upgrade",
          "target": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce",
          "via": [
            {
              "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
              "delay": 0
            }
          ]
        }
      ],
      "ignoreInWatchMode": [
        "nextBlockNumber",
        "nextOutputIndex",
        "latestBlockNumber",
        "latestOutputIndex"
      ],
      "sinceTimestamp": 1722376845,
      "values": {
        "$admin": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
        "$implementation": "0x0167E10be3293266c7F0f1b42E1a8906E638d0cb",
        "$pastUpgrades": [
          [
            "2024-07-30T22:00:51.000Z",
            "0x099a2b6b0c2c79230836328297b7a165f7a2426e8c8a70689875986d8f9943e0",
            ["0x0167E10be3293266c7F0f1b42E1a8906E638d0cb"]
          ]
        ],
        "$upgradeCount": 1,
        "challenger": "0xEAC870005Fe175eEc9365502eAEb2A6f50De1eff",
        "CHALLENGER": "0xEAC870005Fe175eEc9365502eAEb2A6f50De1eff",
        "deletedOutputs": [],
        "FINALIZATION_PERIOD_SECONDS": 604800,
        "finalizationPeriodSeconds": 604800,
        "L2_BLOCK_TIME": 1,
        "l2BlockTime": 1,
        "latestBlockNumber": 10857600,
        "latestOutputIndex": 3015,
        "nextBlockNumber": 10861200,
        "nextOutputIndex": 3016,
        "proposer": "0x9c9Db06722b3E33fa356C7347f7fBe328a26Dc7d",
        "PROPOSER": "0x9c9Db06722b3E33fa356C7347f7fBe328a26Dc7d",
        "startingBlockNumber": 0,
        "startingTimestamp": 1722375257,
        "SUBMISSION_INTERVAL": 3600,
        "submissionInterval": 3600,
        "version": "1.8.0"
      },
      "fieldMeta": {
        "FINALIZATION_PERIOD_SECONDS": {
          "description": "Challenge period (Number of seconds until a state root is finalized)."
        }
      }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x769547a723783FCA36BAaf1ECcf9dfdbF6d09F38",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x820ad9099a42cd2ff75db54e775ccd8dc8cd7e806ced5e4e2a0db4d047133cdd"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain. This contract can store any token.",
      "categories": ["Gateways&Escrows"],
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce",
          "via": [
            {
              "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
              "delay": 0,
              "description": "upgrading the bridge implementation can give access to all funds escrowed therein."
            }
          ]
        }
      ],
      "sinceTimestamp": 1722376845,
      "values": {
        "$admin": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
        "$implementation": "0x4bFC8d6bE2843626A1186bd6eEfAD1297650470a",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x39d484F0FC1b3bfAed7D54934FF5C8e5d47A6867",
        "MESSENGER": "0x39d484F0FC1b3bfAed7D54934FF5C8e5d47A6867",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0xe736142a3e957660cBae61AC4bD61e5b65635140",
        "systemConfig": "0xA9Bc65Ff5A3106351fa92B04C91d505BcCd92Cad",
        "version": "2.2.0"
      }
    },
    {
      "name": "Caldera Multisig 2",
      "address": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0x59fe14e95a8aa7f52213f18bae5c9329cf583a7ba31194698b15eddb97d5e825"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "configure",
          "target": "0xA9Bc65Ff5A3106351fa92B04C91d505BcCd92Cad",
          "description": "it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system."
        },
        {
          "permission": "guard",
          "target": "0x3a314A6a3c1470Bf2854960D3Ce9D2435c7Ba794"
        },
        {
          "permission": "guard",
          "target": "0xe736142a3e957660cBae61AC4bD61e5b65635140"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1716583269,
      "values": {
        "$immutable": false,
        "$implementation": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "$members": [
          "0xD61640d06dC7A61C46d9515680b4DDd2AC51E9A9",
          "0x356000Cec4fC967f8FC372381D983426760A0391",
          "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A"
        ],
        "$threshold": 2,
        "domainSeparator": "0x4fb2fc3bf94e37270ffe59bdcf3eec7f07722bd047093c7fd05fb408668db9d4",
        "getChainId": 8453,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 3 (67%)",
        "nonce": 10,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafeL2"
    },
    {
      "name": "OptimismMintableERC20Factory",
      "address": "0x88Ac5Be224B0bA925A9CA73a4FAFbA171849ec06",
      "template": "opstack/OptimismMintableERC20Factory",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0x4c5ac4e53576924cabbd2a471f368a541bc3f4b1f53fa41a389692fcc62f6176"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintablERC20 as this chain's representation of a token on the host chain, or vice-versa.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce",
          "via": [
            {
              "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
              "delay": 0
            }
          ]
        }
      ],
      "sinceTimestamp": 1722376845,
      "values": {
        "$admin": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
        "$implementation": "0xb482529Ce853b8a883db28D53190FCcf44AEbF09",
        "$pastUpgrades": [
          [
            "2024-07-30T22:00:51.000Z",
            "0xe13debf3c2756093d1b571b97d872f0e27d5b0c288a3a56fa07454ba38a9568b",
            ["0xb482529Ce853b8a883db28D53190FCcf44AEbF09"]
          ]
        ],
        "$upgradeCount": 1,
        "bridge": "0x769547a723783FCA36BAaf1ECcf9dfdbF6d09F38",
        "BRIDGE": "0x769547a723783FCA36BAaf1ECcf9dfdbF6d09F38",
        "version": "1.9.0"
      }
    },
    {
      "name": "SystemConfig",
      "address": "0xA9Bc65Ff5A3106351fa92B04C91d505BcCd92Cad",
      "template": "opstack/SystemConfig",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0x8594410431f0c8cc86d641b9954c3ad91e81fecc79f25ec8d62b294c44201533"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
      "issuedPermissions": [
        {
          "permission": "configure",
          "target": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
          "via": []
        },
        {
          "permission": "sequence",
          "target": "0x1af3F4e08a16B93ccBDF6887549697F17f9cf78A",
          "via": []
        },
        {
          "permission": "upgrade",
          "target": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce",
          "via": [
            {
              "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
              "delay": 0
            }
          ]
        }
      ],
      "ignoreInWatchMode": ["scalar", "overhead"],
      "sinceTimestamp": 1722376845,
      "values": {
        "$admin": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
        "$implementation": "0x14f5488aE20C2B591CD36D2Aa3Bc28442ed6d71a",
        "$pastUpgrades": [
          [
            "2024-07-30T22:00:51.000Z",
            "0x4b61daad29b5530f373ba733d9198892e26367bdb5e75a9d8bdbfbe2e00b4c13",
            ["0x14f5488aE20C2B591CD36D2Aa3Bc28442ed6d71a"]
          ]
        ],
        "$upgradeCount": 1,
        "basefeeScalar": 668098,
        "BATCH_INBOX_SLOT": "0x71ac12829d66ee73d8d95bff50b3589745ce57edae70a3fb111a2342464dc597",
        "batcherHash": "0x1af3F4e08a16B93ccBDF6887549697F17f9cf78A",
        "batchInbox": "0xFc536AB2Cc1e784Ae181ca8A23b3E9C828B934A8",
        "blobbasefeeScalar": 0,
        "DISPUTE_GAME_FACTORY_SLOT": "0x52322a25d9f59ea17656545543306b7aef62bc0cc53a0e65ccfa0c75b97aa906",
        "disputeGameFactory": "0xadA565Abc1Fe7358259c22dd0A7372229d943388",
        "gasLimit": 30000000,
        "gasPayingToken": {
          "addr_": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
          "decimals_": 18
        },
        "gasPayingTokenName": "Ether",
        "gasPayingTokenSymbol": "ETH",
        "isCustomGasToken": false,
        "L1_CROSS_DOMAIN_MESSENGER_SLOT": "0x383f291819e6d54073bc9a648251d97421076bdd101933c0c022219ce9580636",
        "L1_ERC_721_BRIDGE_SLOT": "0x46adcbebc6be8ce551740c29c47c8798210f23f7f4086c41752944352568d5a7",
        "L1_STANDARD_BRIDGE_SLOT": "0x9904ba90dde5696cda05c9e0dab5cbaa0fea005ace4d11218a02ac668dad6376",
        "l1CrossDomainMessenger": "0x39d484F0FC1b3bfAed7D54934FF5C8e5d47A6867",
        "l1ERC721Bridge": "0x3D748542A3bb90952d90f99F3fbfDAD8B6756B0A",
        "l1StandardBridge": "0x769547a723783FCA36BAaf1ECcf9dfdbF6d09F38",
        "maximumGasLimit": 200000000,
        "minimumGasLimit": 21000000,
        "opStackDA": {
          "isSomeTxsLengthEqualToCelestiaDAExample": true,
          "isSequencerSendingBlobTx": false
        },
        "OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT": "0xa04c5bb938ca6fc46d95553abf0a76345ce3e722a30bf4f74928b8e7d852320c",
        "OPTIMISM_PORTAL_SLOT": "0x4b6c74f9e688cb39801f2112c14a8c57232a3fc5202e1444126d4bce86eb19ac",
        "optimismMintableERC20Factory": "0x88Ac5Be224B0bA925A9CA73a4FAFbA171849ec06",
        "optimismPortal": "0x3a314A6a3c1470Bf2854960D3Ce9D2435c7Ba794",
        "overhead": 0,
        "owner": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
        "resourceConfig": {
          "maxResourceLimit": 20000000,
          "elasticityMultiplier": 10,
          "baseFeeMaxChangeDenominator": 8,
          "minimumBaseFee": 1000000000,
          "systemTxMaxGas": 1000000,
          "maximumBaseFee": "340282366920938463463374607431768211455"
        },
        "scalar": "452312848583266388373324160190187140051835877600158453279131187530911330754",
        "sequencerInbox": "0xFc536AB2Cc1e784Ae181ca8A23b3E9C828B934A8",
        "START_BLOCK_SLOT": "0xa11ee3ab75b40e88a0105e935d17cd36c8faee0138320d776c411291bdbbb19f",
        "startBlock": 17793752,
        "UNSAFE_BLOCK_SIGNER_SLOT": "0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08",
        "unsafeBlockSigner": "0x54bB68f8FE08Ff315DBe1A89265103ebcDcFfd39",
        "version": "2.3.0-beta.2",
        "VERSION": 0
      },
      "fieldMeta": {
        "gasLimit": {
          "severity": "LOW",
          "description": "Gas limit for blocks on L2."
        }
      }
    },
    {
      "name": "AddressManager",
      "address": "0xd79005b0f06b2C518893d2Ba31f94429e555b6b1",
      "template": "opstack/AddressManager",
      "sourceHashes": [
        "0xdc86a850f11dc2b5c0472a05d0e3c14f239baf2c3b1ab19631591b0827985380"
      ],
      "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts.",
      "issuedPermissions": [
        {
          "permission": "configure",
          "target": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce",
          "via": [
            {
              "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
              "delay": 0,
              "description": "set and change address mappings."
            }
          ]
        }
      ],
      "sinceTimestamp": 1722376845,
      "values": {
        "$immutable": true,
        "owner": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A"
      }
    },
    {
      "name": "SuperchainConfig",
      "address": "0xe736142a3e957660cBae61AC4bD61e5b65635140",
      "template": "opstack/SuperchainConfigFake",
      "sourceHashes": [
        "0x60ebf53dd49973efa525783a0716f706ac120b1ee0443943732fe5c97dd4959e",
        "0x3ac96c9c95e25f689f65a50f24b325e3f891029cb1cea96dc642418bbb535b1d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This is NOT the shared SuperchainConfig contract of the OP stack Superchain but rather a local fork. It manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
      "categories": ["Upgrades&Governance"],
      "issuedPermissions": [
        {
          "permission": "guard",
          "target": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
          "via": []
        },
        {
          "permission": "upgrade",
          "target": "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce",
          "via": [
            {
              "address": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
              "delay": 0
            }
          ]
        }
      ],
      "sinceTimestamp": 1722376845,
      "values": {
        "$admin": "0x102e24084a003feEbe57B536a3B4E29eD6AC855A",
        "$implementation": "0xAd41C2437Cb1327149e4e635caCE7c74d408be98",
        "$pastUpgrades": [
          [
            "2024-07-30T22:00:45.000Z",
            "0x10ed059260b22be3388c06149f85f1d40ac79278215253a87492ae868e952752",
            ["0xAd41C2437Cb1327149e4e635caCE7c74d408be98"]
          ]
        ],
        "$upgradeCount": 1,
        "guardian": "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d",
        "GUARDIAN_SLOT": "0xd30e835d3f35624761057ff5b27d558f97bd5be034621e62240e5c0b784abe68",
        "paused": false,
        "PAUSED_SLOT": "0x54176ff9944c4784e5857ec4e5ef560a462c483bf534eda43f91bb01a470b1b6",
        "version": "1.1.0"
      }
    }
  ],
  "eoas": [
    { "address": "0x000000000000000000000000000000000000dEaD" },
    { "address": "0x03A0080CA69B333F2a3697Eed806Bd8c31baCF8B" },
    { "address": "0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A" },
    {
      "address": "0x1af3F4e08a16B93ccBDF6887549697F17f9cf78A",
      "receivedPermissions": [
        {
          "permission": "sequence",
          "target": "0xA9Bc65Ff5A3106351fa92B04C91d505BcCd92Cad"
        }
      ]
    },
    { "address": "0x34f1fb4c76019d83Eb287B56bAa5466Fc130A028" },
    { "address": "0x356000Cec4fC967f8FC372381D983426760A0391" },
    { "address": "0x54bB68f8FE08Ff315DBe1A89265103ebcDcFfd39" },
    { "address": "0x8486C301D5719ADdf6AB789E92D24423c50a940D" },
    {
      "address": "0x9c9Db06722b3E33fa356C7347f7fBe328a26Dc7d",
      "receivedPermissions": [
        {
          "permission": "propose",
          "target": "0x536cf1ABfD22E61a13753c0F08613aDdF4ca0595"
        }
      ]
    },
    { "address": "0xB6faDA40e4376D262e25068534df4788023Bb8A3" },
    { "address": "0xD61640d06dC7A61C46d9515680b4DDd2AC51E9A9" },
    {
      "address": "0xEAC870005Fe175eEc9365502eAEb2A6f50De1eff",
      "receivedPermissions": [
        {
          "permission": "challenge",
          "target": "0x536cf1ABfD22E61a13753c0F08613aDdF4ca0595"
        }
      ]
    },
    { "address": "0xFc536AB2Cc1e784Ae181ca8A23b3E9C828B934A8" }
  ],
  "abis": {
    "0x0167E10be3293266c7F0f1b42E1a8906E638d0cb": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event OutputProposed(bytes32 indexed outputRoot, uint256 indexed l2OutputIndex, uint256 indexed l2BlockNumber, uint256 l1Timestamp)",
      "event OutputsDeleted(uint256 indexed prevNextOutputIndex, uint256 indexed newNextOutputIndex)",
      "function CHALLENGER() view returns (address)",
      "function FINALIZATION_PERIOD_SECONDS() view returns (uint256)",
      "function L2_BLOCK_TIME() view returns (uint256)",
      "function PROPOSER() view returns (address)",
      "function SUBMISSION_INTERVAL() view returns (uint256)",
      "function challenger() view returns (address)",
      "function computeL2Timestamp(uint256 _l2BlockNumber) view returns (uint256)",
      "function deleteL2Outputs(uint256 _l2OutputIndex)",
      "function finalizationPeriodSeconds() view returns (uint256)",
      "function getL2Output(uint256 _l2OutputIndex) view returns (tuple(bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber))",
      "function getL2OutputAfter(uint256 _l2BlockNumber) view returns (tuple(bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber))",
      "function getL2OutputIndexAfter(uint256 _l2BlockNumber) view returns (uint256)",
      "function initialize(uint256 _submissionInterval, uint256 _l2BlockTime, uint256 _startingBlockNumber, uint256 _startingTimestamp, address _proposer, address _challenger, uint256 _finalizationPeriodSeconds)",
      "function l2BlockTime() view returns (uint256)",
      "function latestBlockNumber() view returns (uint256)",
      "function latestOutputIndex() view returns (uint256)",
      "function nextBlockNumber() view returns (uint256)",
      "function nextOutputIndex() view returns (uint256)",
      "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1BlockHash, uint256 _l1BlockNumber) payable",
      "function proposer() view returns (address)",
      "function startingBlockNumber() view returns (uint256)",
      "function startingTimestamp() view returns (uint256)",
      "function submissionInterval() view returns (uint256)",
      "function version() view returns (string)"
    ],
    "0x102e24084a003feEbe57B536a3B4E29eD6AC855A": [
      "constructor(address _owner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function addressManager() view returns (address)",
      "function changeProxyAdmin(address _proxy, address _newAdmin)",
      "function getProxyAdmin(address _proxy) view returns (address)",
      "function getProxyImplementation(address _proxy) view returns (address)",
      "function implementationName(address) view returns (string)",
      "function isUpgrading() view returns (bool)",
      "function owner() view returns (address)",
      "function proxyType(address) view returns (uint8)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function setAddressManager(address _address)",
      "function setImplementationName(address _address, string _name)",
      "function setProxyType(address _address, uint8 _type)",
      "function setUpgrading(bool _upgrading)",
      "function transferOwnership(address newOwner)",
      "function upgrade(address _proxy, address _implementation)",
      "function upgradeAndCall(address _proxy, address _implementation, bytes _data) payable"
    ],
    "0x14f5488aE20C2B591CD36D2Aa3Bc28442ed6d71a": [
      "constructor()",
      "event ConfigUpdate(uint256 indexed version, uint8 indexed updateType, bytes data)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function BATCH_INBOX_SLOT() view returns (bytes32)",
      "function DISPUTE_GAME_FACTORY_SLOT() view returns (bytes32)",
      "function L1_CROSS_DOMAIN_MESSENGER_SLOT() view returns (bytes32)",
      "function L1_ERC_721_BRIDGE_SLOT() view returns (bytes32)",
      "function L1_STANDARD_BRIDGE_SLOT() view returns (bytes32)",
      "function OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT() view returns (bytes32)",
      "function OPTIMISM_PORTAL_SLOT() view returns (bytes32)",
      "function START_BLOCK_SLOT() view returns (bytes32)",
      "function UNSAFE_BLOCK_SIGNER_SLOT() view returns (bytes32)",
      "function VERSION() view returns (uint256)",
      "function basefeeScalar() view returns (uint32)",
      "function batchInbox() view returns (address addr_)",
      "function batcherHash() view returns (bytes32)",
      "function blobbasefeeScalar() view returns (uint32)",
      "function disputeGameFactory() view returns (address addr_)",
      "function gasLimit() view returns (uint64)",
      "function gasPayingToken() view returns (address addr_, uint8 decimals_)",
      "function gasPayingTokenName() view returns (string name_)",
      "function gasPayingTokenSymbol() view returns (string symbol_)",
      "function initialize(address _owner, uint32 _basefeeScalar, uint32 _blobbasefeeScalar, bytes32 _batcherHash, uint64 _gasLimit, address _unsafeBlockSigner, tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee) _config, address _batchInbox, tuple(address l1CrossDomainMessenger, address l1ERC721Bridge, address l1StandardBridge, address disputeGameFactory, address optimismPortal, address optimismMintableERC20Factory, address gasPayingToken) _addresses)",
      "function isCustomGasToken() view returns (bool)",
      "function l1CrossDomainMessenger() view returns (address addr_)",
      "function l1ERC721Bridge() view returns (address addr_)",
      "function l1StandardBridge() view returns (address addr_)",
      "function maximumGasLimit() pure returns (uint64)",
      "function minimumGasLimit() view returns (uint64)",
      "function optimismMintableERC20Factory() view returns (address addr_)",
      "function optimismPortal() view returns (address addr_)",
      "function overhead() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function resourceConfig() view returns (tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee))",
      "function scalar() view returns (uint256)",
      "function setBatcherHash(bytes32 _batcherHash)",
      "function setGasConfig(uint256 _overhead, uint256 _scalar)",
      "function setGasConfigEcotone(uint32 _basefeeScalar, uint32 _blobbasefeeScalar)",
      "function setGasLimit(uint64 _gasLimit)",
      "function setUnsafeBlockSigner(address _unsafeBlockSigner)",
      "function startBlock() view returns (uint256 startBlock_)",
      "function transferOwnership(address newOwner)",
      "function unsafeBlockSigner() view returns (address addr_)",
      "function version() pure returns (string)"
    ],
    "0x184d44C2DfB6d17C60B9Ca329b7B8630aea325Ce": [
      "constructor(address _singleton)"
    ],
    "0x39d484F0FC1b3bfAed7D54934FF5C8e5d47A6867": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0x3a314A6a3c1470Bf2854960D3Ce9D2435c7Ba794": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x3D748542A3bb90952d90f99F3fbfDAD8B6756B0A": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4bFC8d6bE2843626A1186bd6eEfAD1297650470a": [
      "constructor()",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger, address _superchainConfig, address _systemConfig)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function systemConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "0x536cf1ABfD22E61a13753c0F08613aDdF4ca0595": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x602267995C801D85b4b854817D0a2231f64C3D7D": [
      "constructor()",
      "error BadTarget()",
      "error CallPaused()",
      "error ContentLengthMismatch()",
      "error EmptyItem()",
      "error GasEstimation()",
      "error InvalidDataRemainder()",
      "error InvalidHeader()",
      "error LargeCalldata()",
      "error NoValue()",
      "error NonReentrant()",
      "error OnlyCustomGasToken()",
      "error OutOfGas()",
      "error SmallGasLimit()",
      "error TransferFailed()",
      "error Unauthorized()",
      "error UnexpectedList()",
      "error UnexpectedString()",
      "event Initialized(uint8 version)",
      "event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)",
      "event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)",
      "event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)",
      "function balance() view returns (uint256)",
      "function depositERC20Transaction(address _to, uint256 _mint, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data)",
      "function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable",
      "function donateETH() payable",
      "function finalizeWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx)",
      "function finalizedWithdrawals(bytes32) view returns (bool)",
      "function guardian() view returns (address)",
      "function initialize(address _l2Oracle, address _systemConfig, address _superchainConfig)",
      "function isOutputFinalized(uint256 _l2OutputIndex) view returns (bool)",
      "function l2Oracle() view returns (address)",
      "function l2Sender() view returns (address)",
      "function minimumGasLimit(uint64 _byteCount) pure returns (uint64)",
      "function params() view returns (uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)",
      "function paused() view returns (bool paused_)",
      "function proveWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _l2OutputIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function provenWithdrawals(bytes32) view returns (bytes32 outputRoot, uint128 timestamp, uint128 l2OutputIndex)",
      "function setGasPayingToken(address _token, uint8 _decimals, bytes32 _name, bytes32 _symbol)",
      "function superchainConfig() view returns (address)",
      "function systemConfig() view returns (address)",
      "function version() pure returns (string)"
    ],
    "0x769547a723783FCA36BAaf1ECcf9dfdbF6d09F38": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x87Ef0aB1189F76eBCaEe736A5EB8F639a8cF156d": [
      "constructor(address _singleton)"
    ],
    "0x88Ac5Be224B0bA925A9CA73a4FAFbA171849ec06": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xA9Bc65Ff5A3106351fa92B04C91d505BcCd92Cad": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xAd41C2437Cb1327149e4e635caCE7c74d408be98": [
      "constructor()",
      "event ConfigUpdate(uint8 indexed updateType, bytes data)",
      "event Initialized(uint8 version)",
      "event Paused(string identifier)",
      "event Unpaused()",
      "function GUARDIAN_SLOT() view returns (bytes32)",
      "function PAUSED_SLOT() view returns (bytes32)",
      "function guardian() view returns (address guardian_)",
      "function initialize(address _guardian, bool _paused)",
      "function pause(string _identifier)",
      "function paused() view returns (bool paused_)",
      "function unpause()",
      "function version() view returns (string)"
    ],
    "0xb482529Ce853b8a883db28D53190FCcf44AEbF09": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event OptimismMintableERC20Created(address indexed localToken, address indexed remoteToken, address deployer)",
      "event StandardL2TokenCreated(address indexed remoteToken, address indexed localToken)",
      "function BRIDGE() view returns (address)",
      "function bridge() view returns (address)",
      "function createOptimismMintableERC20(address _remoteToken, string _name, string _symbol) returns (address)",
      "function createOptimismMintableERC20WithDecimals(address _remoteToken, string _name, string _symbol, uint8 _decimals) returns (address)",
      "function createStandardL2Token(address _remoteToken, string _name, string _symbol) returns (address)",
      "function initialize(address _bridge)",
      "function version() view returns (string)"
    ],
    "0xce1E945A3426f0521eB9D1Ccc63D6d204bC49D40": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _superchainConfig, address _portal, address _systemConfig)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function systemConfig() view returns (address)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0xd2227e78ee343a0d6166B4Bd5a18Ebb286c8Cc05": [
      "constructor()",
      "event ERC721BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 tokenId, bytes extraData)",
      "event ERC721BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 tokenId, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC721(address _localToken, address _remoteToken, uint256 _tokenId, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC721To(address _localToken, address _remoteToken, address _to, uint256 _tokenId, uint32 _minGasLimit, bytes _extraData)",
      "function deposits(address, address, uint256) view returns (bool)",
      "function finalizeBridgeERC721(address _localToken, address _remoteToken, address _from, address _to, uint256 _tokenId, bytes _extraData)",
      "function initialize(address _messenger, address _superchainConfig)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "0xd79005b0f06b2C518893d2Ba31f94429e555b6b1": [
      "event AddressSet(string indexed name, address newAddress, address oldAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getAddress(string _name) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function transferOwnership(address newOwner)"
    ],
    "0xe736142a3e957660cBae61AC4bD61e5b65635140": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA": [
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)",
      "event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ]
  },
  "usedTemplates": {
    "global/ProxyAdmin": "0x171ea6062ecb94d6e7913ecd058660d724f0bcc40120cd2c11b836e5c0450091",
    "GnosisSafe": "0x18527e82c3800311291da7323caa876f588cde67692c1c84d5ecb5161da61359",
    "opstack/AddressManager": "0x10c898265c0f6d0de6612e994bd41456f435196949f9bc6069e03da9aa8bb9ba",
    "opstack/L1CrossDomainMessenger": "0xcf3e4600ef72e34e18a7c977b796d1f5a5d7878a503dd52cefad07854366a764",
    "opstack/L1ERC721Bridge": "0x9157c1cd7ed3201c1a946c31dcc053cf7ef28179fdf11cba202ffa8e8d1ab519",
    "opstack/L1StandardBridge": "0x9111ef1dcd42452953522f42115f0396e80b8ffacbe0ee0e3f62763880a6b6cc",
    "opstack/L2OutputOracle": "0x2da233df369518b2564031e603ae272763f51cec1bc780ab0a814e46046b47a2",
    "opstack/OptimismMintableERC20Factory": "0xcb5e318435eea9104576cca55f13180f9a41bd1900179ad8bf47d1aac60d725c",
    "opstack/OptimismPortal": "0x5fb419891d613086f39879ae360e765fdb6d154ef5ea5b2f5f98a4443a1b4839",
    "opstack/SuperchainConfigFake": "0x49e6353b6089be214c9fc1f021124f840323a29f519b5240594dd16c3a775ca8",
    "opstack/SystemConfig": "0x9b851394b558222bf283e4f132348dd3607cfbba09857db7aa5e3873aee7f6e3"
  }
}
