{
  "name": "ternoa",
  "chain": "ethereum",
  "blockNumber": 21737758,
  "configHash": "0x78909a4c6c4ad4404f492074cc41fa97686aebe17de0e52e529653ad084aeca0",
  "sharedModules": ["shared-polygon-cdk"],
  "contracts": [
    {
      "name": "Permit2",
      "address": "0x000000000022D473030F116dDEE9F6B43aC78BA3",
      "sourceHashes": [
        "0x84beffbcb4624fb74fab61c80beeb566023a939418284a8f44357b71cd40b63b"
      ],
      "sinceTimestamp": 1668647879,
      "values": {
        "$immutable": true,
        "DOMAIN_SEPARATOR": "0x866a5aba21966af95d6c7ab78eb2b2fc913915c28be3b9aa07cc04ff903e3f28"
      }
    },
    {
      "name": "PolygonEcosystemToken",
      "address": "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
      "sourceHashes": [
        "0xb814773e3a4cf3d1dd288afdeed9cbdc361edda62de8fa393290e5be836ffae0"
      ],
      "sinceTimestamp": 1698224783,
      "values": {
        "$immutable": true,
        "CAP_MANAGER_ROLE": "0x027f9f680a0c6704fd9796b55c67fe885252243966ecb05a88f3e7873c845d9a",
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DOMAIN_SEPARATOR": "0xb229387d8db422d84103ea5884522a783e8f8b570d17cc1e9bb39959983346f8",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Polygon Ecosystem Token",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "EMISSION_ROLE": "0x573321b8a13c75b2702bc4b0ad9afaae98bf6985285411964a564e68bf6da1c9",
        "lastMint": 1737539123,
        "mintPerSecondCap": "13370000000000000000",
        "name": "Polygon Ecosystem Token",
        "PERMIT2": "0x000000000022D473030F116dDEE9F6B43aC78BA3",
        "PERMIT2_REVOKER_ROLE": "0xbd4c1461ef59750b24719a44d7e2a7948c57fd12c98e333541b7ea7b61f07cb7",
        "permit2Enabled": true,
        "symbol": "POL",
        "totalSupply": "10347786406857051263502190641",
        "version": "1.1.0"
      }
    },
    {
      "name": "TernoaValidium",
      "address": "0x7fF0B5fF6Eb8B789456639AC2A02487c338c1789",
      "unverified": true,
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["lastAccInputHash"],
      "sinceTimestamp": 1735650935,
      "values": {
        "$admin": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
        "$implementation": "0x427113ae6F319BfFb4459bfF96eb8B6BDe1A127F",
        "$pastUpgrades": [
          [
            "2024-12-31T13:15:35.000Z",
            "0x6fa3d7225201238d78388fafabea13b5a54c4f1f037d51071c39c624aa072511",
            ["0x427113ae6F319BfFb4459bfF96eb8B6BDe1A127F"]
          ]
        ],
        "$upgradeCount": 1,
        "admin": "0x49015545B46B07082bd7faf2633643eae87710EC",
        "bridgeAddress": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "calculatePolPerForceBatch": 0,
        "dataAvailabilityProtocol": "0xB408a216927d31A27fd96176dbF1B825630f0301",
        "forceBatchAddress": "0x49015545B46B07082bd7faf2633643eae87710EC",
        "forceBatchTimeout": 432000,
        "gasTokenAddress": "0x03Be5C903c727Ee2C8C4e9bc0AcC860Cca4715e2",
        "gasTokenNetwork": 0,
        "GLOBAL_EXIT_ROOT_MANAGER_L2": "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA",
        "globalExitRootManager": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
        "INITIALIZE_TX_BRIDGE_LIST_LEN_LEN": 249,
        "INITIALIZE_TX_BRIDGE_PARAMS": "0x80808401c9c38094",
        "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS": "0x80b9",
        "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA": "0x80b8",
        "INITIALIZE_TX_CONSTANT_BYTES": 32,
        "INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA": 31,
        "INITIALIZE_TX_DATA_LEN_EMPTY_METADATA": 228,
        "INITIALIZE_TX_EFFECTIVE_PERCENTAGE": "0xff",
        "isSequenceWithDataAvailabilityAllowed": false,
        "lastAccInputHash": "0x872edda832008a6c390dec52fc7a7546f803385039a249dc5bab7cb4f1fe120a",
        "lastForceBatch": 0,
        "lastForceBatchSequenced": 0,
        "networkName": "Ternoa",
        "pendingAdmin": "0x0000000000000000000000000000000000000000",
        "pol": "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
        "rollupManager": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
        "SIGNATURE_INITIALIZE_TX_R": "0x00000000000000000000000000000000000000000000000000000005ca1ab1e0",
        "SIGNATURE_INITIALIZE_TX_S": "0x000000000000000000000000000000000000000000000000000000005ca1ab1e",
        "SIGNATURE_INITIALIZE_TX_V": 27,
        "TIMESTAMP_RANGE": 36,
        "trustedSequencer": "0x129A94208bb3030D809c36849d43b50d13e0cACf",
        "trustedSequencerURL": "https://rpc-mainnet.zkevm.ternoa.network"
      },
      "derivedName": "PolygonValidiumEtrog"
    },
    {
      "name": "Verifier",
      "address": "0x9B9671dB83CfcB4508bF361942488C5cA2b1286D",
      "template": "polygon-cdk/Verifier",
      "sourceHashes": [
        "0xa0662ee6bc9d2b6e692a65e797b6edb54b3019696dc845d2c644f705bd8bb5be"
      ],
      "description": "Verifies ZK proofs for the PolygonRollupManager.",
      "sinceTimestamp": 1729157663,
      "values": { "$immutable": true },
      "derivedName": "FflonkVerifier_12"
    },
    {
      "name": "TernoaDAC",
      "address": "0xB408a216927d31A27fd96176dbF1B825630f0301",
      "template": "polygon-cdk/PolygonDataCommittee",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0xf7c38d00c4b6000f1840ed38f9ae99d753da8ac69ee1b6ac9ed614f2b60d470f"
      ],
      "proxyType": "EIP1967 proxy",
      "displayName": "PolygonDataCommittee",
      "description": "Manages the members of the data availability committee (DAC) and the threshold for accepting commitments from them (Currently 1/1).",
      "issuedPermissions": [
        {
          "permission": "configure",
          "to": "0x49015545B46B07082bd7faf2633643eae87710EC",
          "description": "manage the members of the data availability committee and the threshold for valid commitments.",
          "via": []
        },
        {
          "permission": "upgrade",
          "to": "0x49015545B46B07082bd7faf2633643eae87710EC",
          "via": [{ "address": "0xE390FB0dd0Ea7684F59210d791D63E7fc28BbF9b" }]
        }
      ],
      "sinceTimestamp": 1735824851,
      "values": {
        "$admin": "0xE390FB0dd0Ea7684F59210d791D63E7fc28BbF9b",
        "$implementation": "0x0f32d8C0eB1cE4C5FFb1A6C4bb3b879D2184Ed11",
        "$pastUpgrades": [
          [
            "2025-01-02T13:34:11.000Z",
            "0xa1d4a7b4eaff3accd51899984230d34d5219786f1de408d9ac6174552d852dad",
            ["0x0f32d8C0eB1cE4C5FFb1A6C4bb3b879D2184Ed11"]
          ]
        ],
        "$upgradeCount": 1,
        "committeeHash": "0xc2e860a3b71eed0810e306264d0177c015825a9e64f139653004876456f639ff",
        "getAmountOfMembers": 1,
        "getProcotolName": "DataAvailabilityCommittee",
        "members": [
          [
            "https://dac.ternoa-mainnet.zeeve.online",
            "0x4cbCa28910376fb203188acC5fCdDc8F3b91c4B0"
          ]
        ],
        "owner": "0x49015545B46B07082bd7faf2633643eae87710EC",
        "requiredAmountOfSignatures": 1
      },
      "derivedName": "PolygonDataCommittee"
    },
    {
      "name": "DACProxyAdmin",
      "address": "0xE390FB0dd0Ea7684F59210d791D63E7fc28BbF9b",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x68f689a23d3badd91255602a1eb13d4789baedc16d904c3103244642fc78ca8f"
      ],
      "displayName": "ProxyAdmin",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "0xB408a216927d31A27fd96176dbF1B825630f0301"
        }
      ],
      "sinceTimestamp": 1735824839,
      "values": {
        "$immutable": true,
        "owner": "0x49015545B46B07082bd7faf2633643eae87710EC"
      },
      "derivedName": "ProxyAdmin"
    }
  ],
  "eoas": [
    { "address": "0x0000000000000000000000000000000000000000" },
    { "address": "0x129A94208bb3030D809c36849d43b50d13e0cACf" },
    {
      "address": "0x49015545B46B07082bd7faf2633643eae87710EC",
      "receivedPermissions": [
        {
          "permission": "configure",
          "from": "0xB408a216927d31A27fd96176dbF1B825630f0301",
          "description": "manage the members of the data availability committee and the threshold for valid commitments."
        },
        {
          "permission": "upgrade",
          "from": "0xB408a216927d31A27fd96176dbF1B825630f0301",
          "via": [{ "address": "0xE390FB0dd0Ea7684F59210d791D63E7fc28BbF9b" }]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "0xE390FB0dd0Ea7684F59210d791D63E7fc28BbF9b"
        }
      ]
    },
    { "address": "0x4cbCa28910376fb203188acC5fCdDc8F3b91c4B0" },
    { "address": "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA" }
  ],
  "abis": {
    "0x000000000022D473030F116dDEE9F6B43aC78BA3": [
      "error AllowanceExpired(uint256 deadline)",
      "error ExcessiveInvalidation()",
      "error InsufficientAllowance(uint256 amount)",
      "error InvalidAmount(uint256 maxAmount)",
      "error InvalidContractSignature()",
      "error InvalidNonce()",
      "error InvalidSignature()",
      "error InvalidSignatureLength()",
      "error InvalidSigner()",
      "error LengthMismatch()",
      "error SignatureExpired(uint256 signatureDeadline)",
      "event Approval(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration)",
      "event Lockdown(address indexed owner, address token, address spender)",
      "event NonceInvalidation(address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce)",
      "event Permit(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration, uint48 nonce)",
      "event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address, address, address) view returns (uint160 amount, uint48 expiration, uint48 nonce)",
      "function approve(address token, address spender, uint160 amount, uint48 expiration)",
      "function invalidateNonces(address token, address spender, uint48 newNonce)",
      "function invalidateUnorderedNonces(uint256 wordPos, uint256 mask)",
      "function lockdown(tuple(address token, address spender)[] approvals)",
      "function nonceBitmap(address, uint256) view returns (uint256)",
      "function permit(address owner, tuple(tuple(address token, uint160 amount, uint48 expiration, uint48 nonce)[] details, address spender, uint256 sigDeadline) permitBatch, bytes signature)",
      "function permit(address owner, tuple(tuple(address token, uint160 amount, uint48 expiration, uint48 nonce) details, address spender, uint256 sigDeadline) permitSingle, bytes signature)",
      "function permitTransferFrom(tuple(tuple(address token, uint256 amount) permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount) transferDetails, address owner, bytes signature)",
      "function permitTransferFrom(tuple(tuple(address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount)[] transferDetails, address owner, bytes signature)",
      "function permitWitnessTransferFrom(tuple(tuple(address token, uint256 amount) permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount) transferDetails, address owner, bytes32 witness, string witnessTypeString, bytes signature)",
      "function permitWitnessTransferFrom(tuple(tuple(address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount)[] transferDetails, address owner, bytes32 witness, string witnessTypeString, bytes signature)",
      "function transferFrom(tuple(address from, address to, uint160 amount, address token)[] transferDetails)",
      "function transferFrom(address from, address to, uint160 amount, address token)"
    ],
    "0x0f32d8C0eB1cE4C5FFb1A6C4bb3b879D2184Ed11": [
      "constructor()",
      "error CommitteeAddressDoesNotExist()",
      "error EmptyURLNotAllowed()",
      "error TooManyRequiredSignatures()",
      "error UnexpectedAddrsAndSignaturesSize()",
      "error UnexpectedAddrsBytesLength()",
      "error UnexpectedCommitteeHash()",
      "error WrongAddrOrder()",
      "event CommitteeUpdated(bytes32 committeeHash)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function committeeHash() view returns (bytes32)",
      "function getAmountOfMembers() view returns (uint256)",
      "function getProcotolName() pure returns (string)",
      "function initialize()",
      "function members(uint256) view returns (string url, address addr)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function requiredAmountOfSignatures() view returns (uint256)",
      "function setupCommittee(uint256 _requiredAmountOfSignatures, string[] urls, bytes addrsBytes)",
      "function transferOwnership(address newOwner)",
      "function verifyMessage(bytes32 signedHash, bytes signaturesAndAddrs) view"
    ],
    "0x427113ae6F319BfFb4459bfF96eb8B6BDe1A127F": [
      "constructor(address _globalExitRootManager, address _pol, address _bridgeAddress, address _rollupManager)",
      "error BatchAlreadyVerified()",
      "error BatchNotSequencedOrNotSequenceEnd()",
      "error ExceedMaxVerifyBatches()",
      "error FinalAccInputHashDoesNotMatch()",
      "error FinalNumBatchBelowLastVerifiedBatch()",
      "error FinalNumBatchDoesNotMatchPendingState()",
      "error FinalPendingStateNumInvalid()",
      "error ForceBatchNotAllowed()",
      "error ForceBatchTimeoutNotExpired()",
      "error ForceBatchesAlreadyActive()",
      "error ForceBatchesDecentralized()",
      "error ForceBatchesNotAllowedOnEmergencyState()",
      "error ForceBatchesOverflow()",
      "error ForcedDataDoesNotMatch()",
      "error GasTokenNetworkMustBeZeroOnEther()",
      "error GlobalExitRootNotExist()",
      "error HaltTimeoutNotExpired()",
      "error HaltTimeoutNotExpiredAfterEmergencyState()",
      "error HugeTokenMetadataNotSupported()",
      "error InitNumBatchAboveLastVerifiedBatch()",
      "error InitNumBatchDoesNotMatchPendingState()",
      "error InitSequencedBatchDoesNotMatch()",
      "error InvalidInitializeTransaction()",
      "error InvalidProof()",
      "error InvalidRangeBatchTimeTarget()",
      "error InvalidRangeForceBatchTimeout()",
      "error InvalidRangeMultiplierBatchFee()",
      "error L1InfoTreeLeafCountInvalid()",
      "error MaxTimestampSequenceInvalid()",
      "error NewAccInputHashDoesNotExist()",
      "error NewPendingStateTimeoutMustBeLower()",
      "error NewStateRootNotInsidePrime()",
      "error NewTrustedAggregatorTimeoutMustBeLower()",
      "error NotEnoughMaticAmount()",
      "error NotEnoughPOLAmount()",
      "error OldAccInputHashDoesNotExist()",
      "error OldStateRootDoesNotExist()",
      "error OnlyAdmin()",
      "error OnlyPendingAdmin()",
      "error OnlyRollupManager()",
      "error OnlyTrustedAggregator()",
      "error OnlyTrustedSequencer()",
      "error PendingStateDoesNotExist()",
      "error PendingStateInvalid()",
      "error PendingStateNotConsolidable()",
      "error PendingStateTimeoutExceedHaltAggregationTimeout()",
      "error SequenceWithDataAvailabilityNotAllowed()",
      "error SequenceZeroBatches()",
      "error SequencedTimestampBelowForcedTimestamp()",
      "error SequencedTimestampInvalid()",
      "error StoredRootMustBeDifferentThanNewRoot()",
      "error SwitchToSameValue()",
      "error TransactionsLengthAboveMax()",
      "error TrustedAggregatorTimeoutExceedHaltAggregationTimeout()",
      "error TrustedAggregatorTimeoutNotExpired()",
      "event AcceptAdminRole(address newAdmin)",
      "event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)",
      "event InitialSequenceBatches(bytes transactions, bytes32 lastGlobalExitRoot, address sequencer)",
      "event Initialized(uint8 version)",
      "event RollbackBatches(uint64 indexed targetBatch, bytes32 accInputHashToRollback)",
      "event SequenceBatches(uint64 indexed numBatch, bytes32 l1InfoRoot)",
      "event SequenceForceBatches(uint64 indexed numBatch)",
      "event SetDataAvailabilityProtocol(address newDataAvailabilityProtocol)",
      "event SetForceBatchAddress(address newForceBatchAddress)",
      "event SetForceBatchTimeout(uint64 newforceBatchTimeout)",
      "event SetTrustedSequencer(address newTrustedSequencer)",
      "event SetTrustedSequencerURL(string newTrustedSequencerURL)",
      "event SwitchSequenceWithDataAvailability()",
      "event TransferAdminRole(address newPendingAdmin)",
      "event VerifyBatches(uint64 indexed numBatch, bytes32 stateRoot, address indexed aggregator)",
      "function GLOBAL_EXIT_ROOT_MANAGER_L2() view returns (address)",
      "function INITIALIZE_TX_BRIDGE_LIST_LEN_LEN() view returns (uint8)",
      "function INITIALIZE_TX_BRIDGE_PARAMS() view returns (bytes)",
      "function INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS() view returns (bytes)",
      "function INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA() view returns (bytes)",
      "function INITIALIZE_TX_CONSTANT_BYTES() view returns (uint16)",
      "function INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA() view returns (uint16)",
      "function INITIALIZE_TX_DATA_LEN_EMPTY_METADATA() view returns (uint8)",
      "function INITIALIZE_TX_EFFECTIVE_PERCENTAGE() view returns (bytes1)",
      "function SIGNATURE_INITIALIZE_TX_R() view returns (bytes32)",
      "function SIGNATURE_INITIALIZE_TX_S() view returns (bytes32)",
      "function SIGNATURE_INITIALIZE_TX_V() view returns (uint8)",
      "function TIMESTAMP_RANGE() view returns (uint256)",
      "function acceptAdminRole()",
      "function admin() view returns (address)",
      "function bridgeAddress() view returns (address)",
      "function calculatePolPerForceBatch() view returns (uint256)",
      "function dataAvailabilityProtocol() view returns (address)",
      "function forceBatch(bytes transactions, uint256 polAmount)",
      "function forceBatchAddress() view returns (address)",
      "function forceBatchTimeout() view returns (uint64)",
      "function forcedBatches(uint64) view returns (bytes32)",
      "function gasTokenAddress() view returns (address)",
      "function gasTokenNetwork() view returns (uint32)",
      "function generateInitializeTransaction(uint32 networkID, address _gasTokenAddress, uint32 _gasTokenNetwork, bytes _gasTokenMetadata) view returns (bytes)",
      "function globalExitRootManager() view returns (address)",
      "function initialize(address _admin, address sequencer, uint32 networkID, address _gasTokenAddress, string sequencerURL, string _networkName)",
      "function isSequenceWithDataAvailabilityAllowed() view returns (bool)",
      "function lastAccInputHash() view returns (bytes32)",
      "function lastForceBatch() view returns (uint64)",
      "function lastForceBatchSequenced() view returns (uint64)",
      "function networkName() view returns (string)",
      "function onVerifyBatches(uint64 lastVerifiedBatch, bytes32 newStateRoot, address aggregator)",
      "function pendingAdmin() view returns (address)",
      "function pol() view returns (address)",
      "function rollbackBatches(uint64 targetBatch, bytes32 accInputHashToRollback)",
      "function rollupManager() view returns (address)",
      "function sequenceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, uint32 l1InfoTreeLeafCount, uint64 maxSequenceTimestamp, bytes32 expectedFinalAccInputHash, address l2Coinbase)",
      "function sequenceBatchesValidium(tuple(bytes32 transactionsHash, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, uint32 l1InfoTreeLeafCount, uint64 maxSequenceTimestamp, bytes32 expectedFinalAccInputHash, address l2Coinbase, bytes dataAvailabilityMessage)",
      "function sequenceForceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches)",
      "function setDataAvailabilityProtocol(address newDataAvailabilityProtocol)",
      "function setForceBatchAddress(address newForceBatchAddress)",
      "function setForceBatchTimeout(uint64 newforceBatchTimeout)",
      "function setTrustedSequencer(address newTrustedSequencer)",
      "function setTrustedSequencerURL(string newTrustedSequencerURL)",
      "function switchSequenceWithDataAvailability(bool newIsSequenceWithDataAvailabilityAllowed)",
      "function transferAdminRole(address newPendingAdmin)",
      "function trustedSequencer() view returns (address)",
      "function trustedSequencerURL() view returns (string)"
    ],
    "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6": [
      "constructor(address migration, address emissionManager, address protocolCouncil, address emergencyCouncil)",
      "error InvalidAddress()",
      "error InvalidShortString()",
      "error MaxMintExceeded(uint256 maxMint, uint256 mintRequested)",
      "error StringTooLong(string str)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event EIP712DomainChanged()",
      "event MintCapUpdated(uint256 oldCap, uint256 newCap)",
      "event Permit2AllowanceUpdated(bool enabled)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function CAP_MANAGER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function EMISSION_ROLE() view returns (bytes32)",
      "function PERMIT2() view returns (address)",
      "function PERMIT2_REVOKER_ROLE() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function lastMint() view returns (uint256)",
      "function mint(address to, uint256 amount)",
      "function mintPerSecondCap() view returns (uint256)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function permit2Enabled() view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function updateMintCap(uint256 newCap)",
      "function updatePermit2Allowance(bool enabled)",
      "function version() pure returns (string)"
    ],
    "0x9B9671dB83CfcB4508bF361942488C5cA2b1286D": [
      "function verifyProof(bytes32[24] proof, uint256[1] pubSignals) view returns (bool)"
    ],
    "0xB408a216927d31A27fd96176dbF1B825630f0301": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xE390FB0dd0Ea7684F59210d791D63E7fc28BbF9b": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ]
  },
  "usedTemplates": {
    "global/ProxyAdmin": "0x02855da1dcadbd7374c349e817243f8de621b62b46c5027276c46dd8fabb38ab",
    "polygon-cdk/PolygonDataCommittee": "0x58ce1862c8d49fde644d9f781393f6601777c752dace60d22cb08718cb9bff8a",
    "polygon-cdk/Verifier": "0xa709eded7498005c2553c87ef7c888a674d0f3829a02c2edea787b5c01742371"
  }
}
