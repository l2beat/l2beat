{
  "name": "amarok",
  "chain": "ethereum",
  "blockNumber": 18940674,
  "configHash": "0x101be10048c72edbeb4021f415fd0f7d091b25e9c7997a6e3d78b25d22c367d9",
  "version": 3,
  "contracts": [
    {
      "name": "MainnetSpokeConnector",
      "address": "0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701992807,
      "values": {
        "AMB": "0x0000000000000000000000000000000000000000",
        "delay": 604800,
        "delayBlocks": 120,
        "disputeBlocks": 120,
        "DOMAIN": 6648936,
        "FINALIZED_HASH": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "getLastCompletedSnapshotId": 946918,
        "getSnapshotDuration": 1800,
        "home": "0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc",
        "lastSentBlock": 18825636,
        "localDomain": 6648936,
        "MERKLE": "0x28A9e7bbed277092E2431F186E1aF898962d4E92",
        "minDisputeBlocks": 60,
        "MIRROR_DOMAIN": 6648936,
        "mirrorConnector": "0x0000000000000000000000000000000000000000",
        "optimisticMode": true,
        "outboundRoot": "0x2824813c58a85f7152c40496e6fa48c229e92eee0361dd971f961000a1fa6614",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "paused": false,
        "PROCESS_GAS": 850000,
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedAggregateRootHash": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "proposedTimestamp": 0,
        "rateLimitBlocks": 0,
        "renounced": false,
        "RESERVE_GAS": 15000,
        "ROOT_MANAGER": "0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A",
        "snapshotRoots": [
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "watcherManager": "0x79e6E0242405A66B2dd8B96DEd3b2F0216Fd417d"
      },
      "errors": {
        "snapshotRoots": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "VotingToken",
      "address": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1578581061,
      "values": {
        "decimals": 18,
        "getMember": ["0x7b292034084A41B9D441B71b6E3557Edd0463fa8"],
        "name": "UMA Voting Token v1",
        "symbol": "UMA",
        "totalSupply": "117343636837937684378095334",
        "totalSupplyAt": []
      }
    },
    {
      "name": "Outbox",
      "address": "0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x0eA7372338a589e7f0b00E463a53AA464ef04e17",
        "admin": "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"
      },
      "implementations": ["0x0eA7372338a589e7f0b00E463a53AA464ef04e17"],
      "sinceTimestamp": 1661457944,
      "values": {
        "bridge": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
        "isSpent": [false, false, true, true, true],
        "l2ToL1BatchNum": 0,
        "l2ToL1Block": 0,
        "l2ToL1EthBlock": 0,
        "l2ToL1OutputId": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "l2ToL1Sender": "0x0000000000000000000000000000000000000000",
        "l2ToL1Timestamp": 0,
        "OUTBOX_VERSION": 2,
        "rollup": "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35",
        "spent": [
          "0x7b7cfeefcf9f5edee3fffa21fb9fff6bff7e7ffcbdb9cf5ba00000400023f1bc",
          "0x5bfefedfbffbdfbfefedfffa7fffff7b8def7ffffff95003dbffefdfff7db73d",
          "0x7fffffffd9bfe5fdfaff2f7efffffffed3fbdfffffffffcffafeffbfbfffaffb",
          "0x7bddc75f807f777bfccdbb91f1f96952881001f000001f8aff9fbf3ffffa5671",
          "0x41fffb3e800007ff01801e64000000500000000000000000400000003ceff2eb"
        ]
      },
      "errors": {
        "isSpent": "Too many values. Update configuration to explore fully",
        "spent": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "OptimisticGovernor",
      "address": "0x172fB6b07D6aB708dd67392a09e1c40d16dA0460",
      "upgradeability": {
        "type": "gnosis safe zodiac module",
        "avatar": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "target": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "guard": "0x0000000000000000000000000000000000000000"
      },
      "sinceTimestamp": 1693752671,
      "values": {
        "avatar": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "bondAmount": "5000000000000000000",
        "collateral": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "escalationManager": "0x0000000000000000000000000000000000000000",
        "EXPLANATION_KEY": "0x6578706c616e6174696f6e",
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getGuard": "0x0000000000000000000000000000000000000000",
        "getProposalBond": "5000000000000000000",
        "guard": "0x0000000000000000000000000000000000000000",
        "identifier": "0x4153534552545f54525554480000000000000000000000000000000000000000",
        "liveness": 259200,
        "optimisticOracleV3": "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "PROPOSAL_HASH_KEY": "0x70726f706f73616c48617368",
        "rules": "I assert that this transaction proposal is valid according to the following rules: Proposals approved on Snapshot, as verified at https://snapshot.org/#/dao.connext.eth/, are valid as long as there is a minimum quorum of 1 and a minimum voting period of 24 hours and it does not appear that the Snapshot voting system is being exploited or is otherwise unavailable. The quorum and voting period are minimum requirements for a proposal to be valid. Quorum and voting period values set for a specific proposal in Snapshot should be used if they are more strict than the rules parameter. The explanation included with the on-chain proposal must be the unique IPFS identifier for the specific Snapshot proposal that was approved or a unique identifier for a proposal in an alternative voting system approved by DAO social consensus if Snapshot is being exploited or is otherwise unavailable.",
        "RULES_KEY": "0x72756c6573",
        "target": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625"
      },
      "derivedName": "OptimisticGovernor"
    },
    {
      "name": "SequencerInbox",
      "address": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xD03bFe2CE83632F4E618a97299cc91B1335BB2d9",
        "admin": "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"
      },
      "implementations": ["0xD03bFe2CE83632F4E618a97299cc91B1335BB2d9"],
      "sinceTimestamp": 1661457944,
      "values": {
        "batchCount": 484159,
        "bridge": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
        "DATA_AUTHENTICATED_FLAG": "0x40",
        "HEADER_LENGTH": 40,
        "inboxAccs": [
          "0x9d1a62a4a23fe2222633d5e0a9c9a602a0770fb41cbd721938bcd5a7f323b469",
          "0x64633ac384fabc58cc30e8fe9182f9a5827cdf38eecfb41134c0b5890330ff01",
          "0xcba310d7669b8f3ab5c15376199669dd92a54ee8b4ab4c6791cd464a1c623078",
          "0xd9cc4b103a8fb10305efe2010e0aeceacb114323b7b04feea38fed9c7056d30b",
          "0xdad98858f61779f4f1d5834476489997767d55e8128f85024f3a125ac1124d8d"
        ],
        "maxTimeVariation": [5760, 12, 86400, 3600],
        "rollup": "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35",
        "totalDelayedMessagesRead": 1302938
      },
      "errors": {
        "inboxAccs": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "SystemConfig",
      "address": "0x229047fed2591dbec1eF1118d64F7aF3dB9EB290",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x5efa852e92800D1C982711761e45c3FE39a2b6D8",
        "admin": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04"
      },
      "implementations": ["0x5efa852e92800D1C982711761e45c3FE39a2b6D8"],
      "sinceTimestamp": 1685377403,
      "values": {
        "batcherHash": "0x0000000000000000000000006887246668a3b87f54deb3b94ba47a6f63f32985",
        "gasLimit": 30000000,
        "minimumGasLimit": 21000000,
        "overhead": 188,
        "owner": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
        "resourceConfig": [
          20000000,
          10,
          8,
          1000000000,
          1000000,
          "340282366920938463463374607431768211455"
        ],
        "scalar": 684000,
        "UNSAFE_BLOCK_SIGNER_SLOT": "0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08",
        "unsafeBlockSigner": "0xAAAA45d9549EDA09E70937013520214382Ffc4A2",
        "version": "1.3.0",
        "VERSION": 0
      }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
      "upgradeability": {
        "type": "resolved delegate proxy",
        "addressManager": "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
        "implementationName": "OVM_L1CrossDomainMessenger",
        "implementation": "0x2150Bc3c64cbfDDbaC9815EF615D6AB8671bfe43"
      },
      "implementations": ["0x2150Bc3c64cbfDDbaC9815EF615D6AB8671bfe43"],
      "sinceTimestamp": 1624400997,
      "values": {
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292704092",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "PORTAL": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "version": "1.4.0"
      },
      "errors": {
        "xDomainMessageSender": "Multicall failed"
      }
    },
    {
      "name": "WormholeRelayer",
      "address": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x90995DBd1aae85872451b50A569dE947D34ac4ee",
        "admin": "0x0000000000000000000000000000000000000000"
      },
      "implementations": ["0x90995DBd1aae85872451b50A569dE947D34ac4ee"],
      "sinceTimestamp": 1686938183,
      "values": {
        "getDefaultDeliveryProvider": "0x7A0a53847776f7e94Cc35742971aCb2217b0Db81"
      }
    },
    {
      "name": "UpgradeBeaconProxy",
      "address": "0x28A9e7bbed277092E2431F186E1aF898962d4E92",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1671623183
    },
    {
      "name": "UpgradeExecutor",
      "address": "0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x86f0cf42Ad673B3D666d103E009EC142D1298a17",
        "admin": "0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"
      },
      "implementations": ["0x86f0cf42Ad673B3D666d103E009EC142D1298a17"],
      "sinceTimestamp": 1678968515,
      "values": {
        "ADMIN_ROLE": "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63"
      }
    },
    {
      "name": "Finder",
      "address": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1578580941,
      "values": {
        "isOwner": false,
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0x42F38ec5A75acCEc50054671233dfAC9C0E7A3F6",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": []
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1600956399,
      "values": {
        "domainSeparator": "0x877c70937e5670b3f50eb943a4e9d65fbd9bc8ce060659a7dc0543885a0ca59e",
        "getChainId": 1,
        "getOwners": [
          "0x4b5F5231e2F08Ad49d79Ce5672A8339a63Cfbd43",
          "0xb8173f558f75EE263013fd6294177bf75279a21e",
          "0xDdf2d07267EAF2cE3E13ee4319bE1F34D55ed992",
          "0xAC0622953d25e1a6c4e0f32Ffc1A9C1cE350B60E",
          "0x86Da253817DC599059e3AD5A1F098F7b96aBf34c",
          "0x1685324Bf373670ad5C9c56bd88A1dc1C063b0f9",
          "0x0101016044726994aFd16f4A99f0d960090D35e7",
          "0x5b10cE4DDD27F57d4D432D409A5321219cbA7893",
          "0xc44caeb7F0724A156806664d2361fD6f32a2d2C8",
          "0x839395e20bbB182fa440d08F850E6c7A8f6F0780",
          "0xd945325557f1FB4374fBf10Ae86D385632Df870A",
          "0x10DD75875a2a8a284529Ae7223B1aCE410d606bd",
          "0x80BA18503a1Fa16Ea22F3ef1Af23e2994EaC1d97",
          "0xd26a3F686D43f2A62BA9eaE2ff77e9f516d945B9",
          "0x57B11cC8F93f2cfeC4c1C5B95213f17cAD81332B",
          "0x72Ff26D9517324eEFA89A48B75c5df41132c4f54"
        ],
        "getThreshold": 8,
        "nonce": 81,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "EternalStorageProxy",
      "address": "0x4C36d2919e407f0Cc2Ee3c993ccF8ac26d9CE64e",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1579258532,
      "values": {
        "implementation": "0x82B67a43b69914E611710C62e629dAbB2f7AC6AB",
        "upgradeabilityOwner": "0x42F38ec5A75acCEc50054671233dfAC9C0E7A3F6",
        "version": 5
      }
    },
    {
      "name": "Connext Multisig",
      "address": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": ["0x172fB6b07D6aB708dd67392a09e1c40d16dA0460"]
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1671651491,
      "values": {
        "domainSeparator": "0x60b1292375dabe167590dda781ba4f2d4f046f849a3b9cbcd167e98c3cfd098a",
        "getChainId": 1,
        "getOwners": [
          "0xdFa28361aC40679cC5D8EFa74c0421961397f2Eb",
          "0xc840e73B856f52E5491d6016daf5C7AE5e6beECD",
          "0x450BCD84a040E6975a8092114A09cD37fA140873",
          "0x8D09e20b835009E5320cC11E6a6F00aF451aD669",
          "0x43A257c61e9Ef4750e426eC0770589509469b156",
          "0x6B44Dba00e92DD035976607CBF62bf1CC6320EC5",
          "0xe4d19c67ca0E9E3888158062De24321a0B272e73",
          "0xC832bB8015762B4857459551057EB61c68B93608",
          "0x320CBa820f33251d480Dcb79F7a9b1cc757aC12e",
          "0x1b526192C541DE6E23D73b4Afc4b6B45A75aeAdD",
          "0xf8d8aF083aC452b05b0D2eb4499AD900324b5754",
          "0x9b903Ae440CB1f01c342466D6DB6b57A5BF98C3f"
        ],
        "getThreshold": 8,
        "nonce": 57,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "Inbox",
      "address": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x5aED5f8A1e3607476F1f81c3d8fe126deB0aFE94",
        "admin": "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"
      },
      "implementations": ["0x5aED5f8A1e3607476F1f81c3d8fe126deB0aFE94"],
      "sinceTimestamp": 1622243344,
      "values": {
        "allowListEnabled": false,
        "bridge": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
        "paused": false,
        "sequencerInbox": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6"
      }
    },
    {
      "name": "ProposerV2",
      "address": "0x50efaC9619225d7fB4703C5872da978849B6E7cC",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1677231527,
      "values": {
        "bond": "5000000000000000000000",
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getCurrentTime": 1704452879,
        "governor": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "token": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828"
      },
      "derivedName": "ProposerV2"
    },
    {
      "name": "RootManager",
      "address": "0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701992495,
      "values": {
        "connectors": [
          "0x83096c7455f24E593aaC9A7c73f849d36d3EEb82",
          "0xae6B9cDE6191b710F5A18D82f751Ba52B78a99DA",
          "0xF1c78967584D5E0ffF66dA103b8eb06c82EC020d",
          "0x56Ab287e5c33Ee70158c951f34818bd095446255",
          "0x5c2149869146DeA55cDD1CF2DD828e4e1548bb2A"
        ],
        "connectorsHash": "0xec2e6a01e97f05ecaf76a70e989737bba3d7b1e9b1409ace525f00a0ee16c137",
        "delay": 604800,
        "delayBlocks": 120,
        "DEQUEUE_MAX": 100,
        "disputeBlocks": 120,
        "domains": [1634886255, 6450786, 6778479, 1818848877, 1869640809],
        "domainsHash": "0x0ec41b50acfbc15e98455dadfd2a27a992abe4761262d2e85f69f55a8bf19830",
        "FINALIZED_HASH": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "getPendingInboundRootsCount": 0,
        "getSnapshotDuration": 1800,
        "hubDomain": 6648936,
        "lastSavedAggregateRootTimestamp": 1704451859,
        "MAX_DOMAINS": 500,
        "MERKLE": "0x7D2596D7E44b0990611d390Fbb0Bd24e64845694",
        "minDisputeBlocks": 60,
        "optimisticMode": true,
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "paused": false,
        "pendingInboundRoots": [41, 40],
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedAggregateRootHash": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "proposedTimestamp": 0,
        "renounced": false,
        "validAggregateRoots": [
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "watcherManager": "0x79e6E0242405A66B2dd8B96DEd3b2F0216Fd417d"
      },
      "errors": {
        "connectors": "Too many values. Update configuration to explore fully",
        "domains": "Too many values. Update configuration to explore fully",
        "validAggregateRoots": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1685377355,
      "values": {
        "addressManager": "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
        "isUpgrading": false,
        "owner": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1661457944,
      "values": {
        "owner": "0x3ffFbAdAF827559da092217e474760E2b2c3CeDd"
      }
    },
    {
      "name": "LineaHubConnector",
      "address": "0x56Ab287e5c33Ee70158c951f34818bd095446255",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701993503,
      "values": {
        "AMB": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
        "delay": 604800,
        "DOMAIN": 6648936,
        "MIRROR_DOMAIN": 1818848877,
        "mirrorConnector": "0xA401e30E6b7Eb50e9355a4FA8F29118d28386E33",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      }
    },
    {
      "name": "RollupEventInbox",
      "address": "0x57Bd336d579A51938619271a7Cc137a46D0501B1",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x806421D09cDb253aa9d128a658e60c0B95eFFA01",
        "admin": "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"
      },
      "implementations": ["0x806421D09cDb253aa9d128a658e60c0B95eFFA01"],
      "sinceTimestamp": 1661457944,
      "values": {
        "bridge": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
        "rollup": "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35"
      }
    },
    {
      "name": "OptimismHubConnector",
      "address": "0x5c2149869146DeA55cDD1CF2DD828e4e1548bb2A",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701992831,
      "values": {
        "AMB": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasCap": 850000,
        "MIRROR_DOMAIN": 1869640809,
        "mirrorConnector": "0x432006CEd3BBa818e3D0d8730426B32Bb34a42aB",
        "OPTIMISM_PORTAL": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      }
    },
    {
      "name": "RollupProxy",
      "address": "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35",
      "upgradeability": {
        "type": "Arbitrum proxy",
        "admin": "0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
        "adminImplementation": "0x72f193d0F305F532C87a4B9D0A2F407a3F4f585f",
        "userImplementation": "0xA0Ed0562629D45B88A34a342f20dEb58c46C15ff"
      },
      "implementations": [
        "0x72f193d0F305F532C87a4B9D0A2F407a3F4f585f",
        "0xA0Ed0562629D45B88A34a342f20dEb58c46C15ff"
      ],
      "sinceTimestamp": 1661457944,
      "values": {
        "baseStake": "1000000000000000000",
        "bridge": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
        "chainId": 42161,
        "challengeManager": "0xe5896783a2F463446E1f624e64Aa6836BE4C6f58",
        "confirmPeriodBlocks": 45818,
        "currentRequiredStake": "1000000000000000000",
        "extraChallengeTimeBlocks": 200,
        "firstUnresolvedNode": 10784,
        "inbox": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
        "isERC20Enabled": false,
        "lastStakeBlock": 15447818,
        "latestConfirmed": 10783,
        "latestNodeCreated": 10937,
        "loserStakeEscrow": "0x5b11BDC6eF32cE261A39f58122E301D59FC05677",
        "minimumAssertionPeriod": 75,
        "outbox": "0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840",
        "owner": "0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
        "paused": false,
        "rollupDeploymentBlock": 15411056,
        "rollupEventInbox": "0x57Bd336d579A51938619271a7Cc137a46D0501B1",
        "sequencerInbox": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6",
        "stakerCount": 2,
        "stakeToken": "0x0000000000000000000000000000000000000000",
        "totalWithdrawableFunds": 0,
        "VALIDATOR_AFK_BLOCKS": 45818,
        "validatorUtils": "0x9E40625F52829Cf04bC4839F186D621ee33b0E67",
        "validatorWalletCreator": "0x960953f7c69cd2BC2322Db9223A815C680ccc7ea",
        "validatorWhitelistDisabled": false,
        "wasmModuleRoot": "0x6b94a7fc388fd8ef3def759297828dc311761e88d8179c7ee8d3887dc554f3c3",
        "zombieAddress": [],
        "zombieCount": 0,
        "zombieLatestStakedNode": []
      },
      "errors": {
        "proxiableUUID": "Multicall failed"
      }
    },
    {
      "name": "WatcherManager",
      "address": "0x79e6E0242405A66B2dd8B96DEd3b2F0216Fd417d",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701992231,
      "values": {
        "delay": 604800,
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false
      }
    },
    {
      "name": "DeliveryProviderImplementation",
      "address": "0x7A0a53847776f7e94Cc35742971aCb2217b0Db81",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x0b89ccD6b803CCEC4f0E0fBeFAeE1f7d16e734e2",
        "admin": "0x0000000000000000000000000000000000000000"
      },
      "implementations": ["0x0b89ccD6b803CCEC4f0E0fBeFAeE1f7d16e734e2"],
      "sinceTimestamp": 1686937559,
      "values": {
        "chainId": 2,
        "coreRelayer": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911",
        "getRewardAddress": "0x53207E216540125e322CdA8A693b0b89576DEb46",
        "getSupportedKeys": 2,
        "owner": "0x59278F587D4cFcDCbbc08019060be7231c37ddc2",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "pricingWallet": "0x0000000000000000000000000000000000000000",
        "rewardAddress": "0x53207E216540125e322CdA8A693b0b89576DEb46"
      }
    },
    {
      "name": "GovernorV2",
      "address": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1677230459,
      "values": {
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getMember": [
          "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "0x50efaC9619225d7fB4703C5872da978849B6E7cC",
          "0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748"
        ],
        "numProposals": 198
      },
      "derivedName": "GovernorV2"
    },
    {
      "name": "UpgradeBeaconProxy",
      "address": "0x7D2596D7E44b0990611d390Fbb0Bd24e64845694",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1671622727
    },
    {
      "name": "GnosisSafe",
      "address": "0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": []
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1597806870,
      "values": {
        "domainSeparator": "0xc6747c7ca6899274b3575cd632681f9db9a0788dd1b7c7379382739baa6aa665",
        "getChainId": 1,
        "getOwners": [
          "0x363605C0bdE9F1F5053aDA30618d95dbFc109Bf5",
          "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
          "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
          "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe"
        ],
        "getThreshold": 2,
        "nonce": 520,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "ForeignAMB",
      "address": "0x82B67a43b69914E611710C62e629dAbB2f7AC6AB",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1633265411,
      "values": {
        "allowReentrantRequests": false,
        "decimalShift": 0,
        "deployedAtBlock": 0,
        "destinationChainId": 0,
        "gasPrice": 0,
        "getBridgeInterfacesVersion": [6, 2, 0],
        "getBridgeMode": "0x2544fbb9",
        "isInitialized": false,
        "maxGasPerTx": 0,
        "messageId": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "messageSender": "0x0000000000000000000000000000000000000000",
        "messageSourceChainId": 0,
        "owner": "0x0000000000000000000000000000000000000000",
        "requiredBlockConfirmations": 0,
        "sourceChainId": 0,
        "transactionHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "validatorContract": "0x0000000000000000000000000000000000000000"
      },
      "errors": {
        "requiredSignatures": "Multicall failed"
      }
    },
    {
      "name": "ArbitrumHubConnector",
      "address": "0x83096c7455f24E593aaC9A7c73f849d36d3EEb82",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701993479,
      "values": {
        "AMB": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasPriceCap": 20000000000,
        "maxGasCap": 850000,
        "maxSubmissionCostCap": 2000000000000000,
        "MIRROR_DOMAIN": 1634886255,
        "mirrorConnector": "0x5f0F58c8939565C0C553303849Bc5Bf7c530e816",
        "outbox": "0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "processed": [false, false, false, false, false],
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "rollup": "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35",
        "ROOT_MANAGER": "0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "errors": {
        "processed": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "Bridge",
      "address": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x1066CEcC8880948FE55e427E94F1FF221d626591",
        "admin": "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"
      },
      "implementations": ["0x1066CEcC8880948FE55e427E94F1FF221d626591"],
      "sinceTimestamp": 1661457944,
      "values": {
        "activeOutbox": "0x0000000000000000000000000000000000000000",
        "allowedDelayedInboxList": [
          "0x57Bd336d579A51938619271a7Cc137a46D0501B1",
          "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f"
        ],
        "allowedOutboxList": [
          "0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840",
          "0x667e23ABd27E623c11d4CC00ca3EC4d0bD63337a",
          "0x760723CD2e632826c38Fef8CD438A4CC7E7E1A40"
        ],
        "delayedInboxAccs": [
          "0x21a203b0ba7a8e1b601b53a6c481283331292edfeb8c47367e48983bcabaa8fb",
          "0xd619e87ff0fc31e8c12cd63c9def5dad8bafe050b8f12c21c15bd26e4a5839c0",
          "0x8ff2d35212dc1bdb91a8780ffc4f115fa8abc9185f07e6a7db12a80530913025",
          "0x18a8baf3e19a6c194ddb4f799c8ed7da48c8f508595fb493fac7cb487a13abf2",
          "0x9aeca0ad3e28be01aa4e61222a5db1d4b33e0a7b04009be528f1858e60061b61"
        ],
        "delayedMessageCount": 1302960,
        "rollup": "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35",
        "sequencerInbox": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6",
        "sequencerInboxAccs": [
          "0x9d1a62a4a23fe2222633d5e0a9c9a602a0770fb41cbd721938bcd5a7f323b469",
          "0x64633ac384fabc58cc30e8fe9182f9a5827cdf38eecfb41134c0b5890330ff01",
          "0xcba310d7669b8f3ab5c15376199669dd92a54ee8b4ab4c6791cd464a1c623078",
          "0xd9cc4b103a8fb10305efe2010e0aeceacb114323b7b04feea38fed9c7056d30b",
          "0xdad98858f61779f4f1d5834476489997767d55e8128f85024f3a125ac1124d8d"
        ],
        "sequencerMessageCount": 484159,
        "sequencerReportedSubMessageCount": 145114829
      },
      "errors": {
        "delayedInboxAccs": "Too many values. Update configuration to explore fully",
        "sequencerInboxAccs": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "ConnextBridge",
      "address": "0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6",
      "upgradeability": {
        "type": "EIP2535 diamond proxy",
        "facets": [
          "0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
          "0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
          "0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295",
          "0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
          "0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
          "0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
          "0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
          "0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
          "0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
          "0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
          "0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4",
          "0x3Bcf4185443A339517aD4e580067f178d1B68E1D"
        ]
      },
      "implementations": [
        "0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
        "0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
        "0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295",
        "0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
        "0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
        "0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
        "0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
        "0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
        "0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
        "0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
        "0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4",
        "0x3Bcf4185443A339517aD4e580067f178d1B68E1D"
      ],
      "sinceTimestamp": 1671625595,
      "values": {
        "aavePool": "0x0000000000000000000000000000000000000000",
        "aavePortalFee": 0,
        "delay": 604800,
        "domain": 6648936,
        "facetAddresses": [
          "0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
          "0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
          "0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295",
          "0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
          "0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
          "0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
          "0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
          "0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
          "0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
          "0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
          "0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4",
          "0x3Bcf4185443A339517aD4e580067f178d1B68E1D"
        ],
        "facets": [
          [
            "0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
            [
              "0x1506e463",
              "0x60062091",
              "0x80dc2248",
              "0x9b598519",
              "0x57bd0a32",
              "0xae8bc0de",
              "0x2c1999d0",
              "0xbd8671a7",
              "0x1ecf6f9f",
              "0xad4c7771",
              "0x949de969",
              "0x07a38d7b",
              "0xf1537686",
              "0x5a2164e5",
              "0xa1b19301",
              "0x03e418c2",
              "0xb64a5e07",
              "0xe1cb3958",
              "0xc4058429",
              "0xe9d7bcec"
            ]
          ],
          [
            "0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
            [
              "0x8a336231",
              "0x159e041f",
              "0x2424401f",
              "0xc2fb26a6",
              "0xb49c53a7",
              "0x63e3e7d2",
              "0xcb8058ba",
              "0x54126711",
              "0xaffed0e0",
              "0x121cca31",
              "0x6989ca7c",
              "0x1a8bc0e1",
              "0x41bdc8b5",
              "0xbfd79030",
              "0x3339df96",
              "0x8aac16ba",
              "0x91f5de79",
              "0x59efa162",
              "0x93f18ac5",
              "0x674dc933"
            ]
          ],
          ["0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295", ["0xab2dc3f5"]],
          [
            "0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
            [
              "0xc5b350df",
              "0xbb271a27",
              "0x2ec0c002",
              "0xa9943b1b",
              "0x6a42b8f8",
              "0x8da5cb5b",
              "0x8456cb59",
              "0x5c975abb",
              "0xb1f8100d",
              "0xc56ce358",
              "0xd1851c92",
              "0x3cf52ffb",
              "0xc91cb56a",
              "0x23986f7d",
              "0x80e52e3f",
              "0x6be55785",
              "0x12232937",
              "0x3f4ba83a"
            ]
          ],
          [
            "0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
            [
              "0xa03e4bc3",
              "0xef1eb0c1",
              "0x09d7ba54",
              "0xd1e5f31c",
              "0xb3f62fcb",
              "0x75d32371",
              "0x349f937c",
              "0x3bd30d34"
            ]
          ],
          [
            "0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
            [
              "0xdd39f00d",
              "0x8cba8b6a",
              "0x65bc8582",
              "0x60f0a5ac",
              "0xf01b3e01"
            ]
          ],
          [
            "0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
            [
              "0x4b72c5da",
              "0x0951d6d8",
              "0x09935b8f",
              "0x54064594",
              "0x2d3f9ef6",
              "0xf259cd27",
              "0xda3a892f",
              "0x3b688da6",
              "0x12d57170",
              "0x1407093b",
              "0x8770e682",
              "0xe9160f3e",
              "0xc6bf691d",
              "0xb214c901",
              "0x9bf6d875",
              "0x22a3c007",
              "0xf72c5048",
              "0xfd5bd5fe",
              "0x41258b5c",
              "0x582c78d2",
              "0x82904716",
              "0xffaf3f1a",
              "0x911b8ee2",
              "0x04376ff4"
            ]
          ],
          [
            "0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
            [
              "0x8d365457",
              "0xa02288f4",
              "0x29d99b10",
              "0x8f11d27f",
              "0x76ca2e52",
              "0xd251dc35",
              "0x7652f59d",
              "0x1301caa2",
              "0x8b480b12",
              "0x2d91a515",
              "0xb3a4eab4",
              "0xbb0577eb",
              "0xad94911b",
              "0xf495e807",
              "0x4bbcba8e",
              "0x241ca57a",
              "0xb6618dff",
              "0xff126de9",
              "0x80b297e8",
              "0x74c6b89b"
            ]
          ],
          [
            "0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
            [
              "0xea027c2f",
              "0xe5f6220f",
              "0x4b141bb4",
              "0x2bf63bcc",
              "0x1963e426",
              "0x3e74aea0",
              "0x9c8eab97",
              "0x43be5eaf",
              "0x72a30e08",
              "0x8dc51484",
              "0xa1a23c29"
            ]
          ],
          [
            "0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
            ["0x1f931c1c", "0x56a8ea48", "0xbbf2358e", "0x2c67849c"]
          ],
          ["0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4", ["0x9a7e155e"]],
          [
            "0x3Bcf4185443A339517aD4e580067f178d1B68E1D",
            [
              "0xcdffacc6",
              "0x52ef6b2c",
              "0xadfca15e",
              "0x7a0ed627",
              "0x01ffc9a7"
            ]
          ]
        ],
        "LIQUIDITY_FEE_DENOMINATOR": 10000,
        "LIQUIDITY_FEE_NUMERATOR": 9995,
        "lpTokenTargetAddress": "0xf7DE5aCeEeE6091d1103209C337fA00D0B4b9092",
        "maxRoutersPerTransfer": 5,
        "nonce": 18753,
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "paused": false,
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "relayerFeeVault": "0xf2964cCcB7CDA9e808aaBe8DB0DDDAF7890dd378",
        "RELAYERS": [
          "0x75C6A865c30da54e365Cb5Def728890B3DD8BDC4",
          "0xaBcC9b596420A9E9172FD5938620E265a0f9Df92",
          "0x0ae392879A228B2484D9B1F80A5D0B7080FE79C2",
          "0x43100A190C3FeAE37Cb1f5d880e8fa8d81BE5CB9",
          "0x935AaAe0f5b02007c08512F0629a9d37Af2E1A47",
          "0x9B077C59fDe7de5AdCeF8093Bc38B61d43FC7007",
          "0xE2Fc8F14B6cEb1AD8165623E02953eDB100288bE",
          "0xe8a5eE73f3c8F1Cd55915f6Eb5Fc7df4206f3C78",
          "0x43728A95386D64384C76Afd416Dcc8118869BA6c",
          "0x62B1a88CCc6BC5e6FF91FB2FCD29Ab4F819b35C6",
          "0xcDbF9D438670D19d1Fb3954Abc8a13666b302b28",
          "0x75bA5Af8EFFDCFca32E1e288806d54277D1fde99",
          "0xB4F8D176466f5F544bAd53737bffAaeA17185c05"
        ],
        "routerAllowlistRemoved": false,
        "routerAllowlistTimestamp": 0,
        "ROUTERS": [
          "0xF26c772C0fF3a6036bDdAbDAbA22cf65ECa9F97c",
          "0x97b9dcB1AA34fE5F12b728D9166ae353d1e7f5C4",
          "0x8cb19CE8EEDF740389D428879a876A3B030B9170",
          "0x0e62f9fa1F9b3E49759Dc94494F5bC37a83d1FAD",
          "0x58507fed0Cb11723dFb6848c92C59Cf0BBEB9927",
          "0x7ce49752fFA7055622f444df3c69598748cb2E5f",
          "0x33b2aD85f7DbA818e719FB52095dC768E0eD93ec",
          "0x048a5EcC705C280b2248aefF88fd581AbbEB8587",
          "0x975574980a5Da77f5C90bC92431835D91B73669e",
          "0x6FD84ba95525c4cCd218F2f16F646A08B4b0a598",
          "0x6892d4D1f73A65B03063B7d78174dC6350Fcc406",
          "0x32D63da9F776891843C90787CEC54ADA23ABd4C2",
          "0xFaAB88015477493cFAa5DFAA533099C590876F21",
          "0x63Cda9C42db542bb91a7175E38673cFb00D402b0",
          "0xBE7BC00382a50A711D037eAeCAD799bb8805Dfa8",
          "0x22831e4f21cE65b33EF45df0e212b5bEbF130E5a",
          "0xEca085906cb531bdf1F87eFA85c5bE46aA5C9d2c",
          "0xC4Ae07F276768A3b74AE8c47bc108a2aF0e40eBa",
          "0x9584Eb0356a380b25D7ED2C14c54De58a25f2581",
          "0x6273c0965A1dB4F8A6277d490B4fD48715a42b96",
          "0x49a9E7ec76Bc8fDF658d09557305170d9F01D2fA",
          "0x5d527765252003AceE6545416F6a9C8D15ae8402",
          "0x76CF58cE587bC928fcc5aD895555fd040E06C61a",
          "0x96D38b113b1bC6a21d1137676f2f05DfcAce24e8"
        ],
        "SEQUENCERS": ["0x4fFA5968857a6C8242E4A6Ded2418155D33e82E7"],
        "xAppConnectionManager": "0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc"
      },
      "derivedName": "ConnextDiamond"
    },
    {
      "name": "EmergencyProposer",
      "address": "0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1677231923,
      "values": {
        "emergencyProposals": [],
        "executor": "0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a",
        "governor": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "minimumWaitTime": 864000,
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "quorum": "5000000000000000000000000",
        "token": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828"
      },
      "derivedName": "EmergencyProposer"
    },
    {
      "name": "ValidatorWalletCreator",
      "address": "0x960953f7c69cd2BC2322Db9223A815C680ccc7ea",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1661456194,
      "values": {
        "owner": "0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
        "template": "0x5Bc5FB83950bBbF156E433c5c098bFe533Db4021"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
        "modules": []
      },
      "implementations": ["0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F"],
      "sinceTimestamp": 1610850364,
      "values": {
        "domainSeparator": "0x4e6a6554de0308f5ece8ff736beed8a1b876d16f5c27cac8e466d7de0c703890",
        "getModules": [],
        "getOwners": [
          "0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64",
          "0x3041BA32f451F5850c147805F5521AC206421623",
          "0xE7dEA1306D9F829bA469d1904c50903b46ebd02e",
          "0xBF93D4d727F7Ba1F753E1124C3e532dCb04Ea2c8",
          "0x4D014f3c5F33Aa9Cd1Dc29ce29618d07Ae666d15",
          "0x7cB07FE039a92B3D784f284D919503A381BEC54f",
          "0x9bbFB9919062C29a5eE15aCD93c9D7c3b14d31aa"
        ],
        "getThreshold": 5,
        "NAME": "Gnosis Safe",
        "nonce": 86,
        "VERSION": "1.1.1"
      }
    },
    {
      "name": "ValidatorUtils",
      "address": "0x9E40625F52829Cf04bC4839F186D621ee33b0E67",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1661456147
    },
    {
      "name": "WormholeHubConnector",
      "address": "0xae6B9cDE6191b710F5A18D82f751Ba52B78a99DA",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701993251,
      "values": {
        "AMB": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasCap": 300000,
        "MIRROR_DOMAIN": 6450786,
        "MIRROR_WORMHOLE_ID": 4,
        "mirrorConnector": "0x779D30a8BDD8f8A1cEC0292d7799350a8cCef119",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "refundAddress": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "renounced": false,
        "ROOT_MANAGER": "0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      }
    },
    {
      "name": "OptimismPortal",
      "address": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x28a55488fef40005309e2DA0040DbE9D300a64AB",
        "admin": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04"
      },
      "implementations": ["0x28a55488fef40005309e2DA0040DbE9D300a64AB"],
      "sinceTimestamp": 1685377379,
      "values": {
        "GUARDIAN": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
        "isOutputFinalized": [true, true, true, true, true],
        "L2_ORACLE": "0xdfe97868233d1aa22e815a266982f2cf17685a27",
        "l2Sender": "0x000000000000000000000000000000000000dEaD",
        "params": [1000000000, 490798, 18940660],
        "paused": false,
        "SYSTEM_CONFIG": "0x229047fed2591dbec1eF1118d64F7aF3dB9EB290",
        "version": "1.6.0"
      },
      "errors": {
        "isOutputFinalized": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "ZkEvmV2",
      "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xb32c3D0dDb0063FfB15E8a50b40cC62230D820B3",
        "admin": "0xF5058616517C068C7b8c7EbC69FF636Ade9066d6"
      },
      "implementations": ["0xb32c3D0dDb0063FfB15E8a50b40cC62230D820B3"],
      "sinceTimestamp": 1689159923,
      "values": {
        "currentL2BlockNumber": 1517539,
        "currentPeriodAmountInWei": "11669308670000000000",
        "currentPeriodEnd": 1704523175,
        "currentTimestamp": 1704415380,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "GENERAL_PAUSE_TYPE": "0x06193bb948d6b7a6fcbe51c193ccf2183bb5d979b6ae5d3a6971b8851461d3b0",
        "INBOX_STATUS_RECEIVED": 1,
        "INBOX_STATUS_UNKNOWN": 0,
        "L1_L2_PAUSE_TYPE": "0x9a80e24e463f00a8763c4dcec6a92d07d33272fa5db895d8589be70dccb002df",
        "L2_L1_PAUSE_TYPE": "0x21ea2f4fee4bcb623de15ac222ea5c1464307d884f23394b78ddc07f9c9c7cd8",
        "limitInWei": "18750000000000000000000",
        "nextMessageNumber": 484108,
        "OPERATOR_ROLE": "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
        "OUTBOX_STATUS_RECEIVED": 2,
        "OUTBOX_STATUS_SENT": 1,
        "OUTBOX_STATUS_UNKNOWN": 0,
        "PAUSE_MANAGER_ROLE": "0x356a809dfdea9198dd76fb76bf6d403ecf13ea675eb89e1eda2db2c4a4676a26",
        "periodInSeconds": 86400,
        "PROVING_SYSTEM_PAUSE_TYPE": "0x3a56b1bd788a764cbd923badb6d0719f21f520455285bf6877e636d08708878d",
        "RATE_LIMIT_SETTER_ROLE": "0x1185e52d62bfbbea270e57d3d09733d221b53ab7a18bae82bb3c6c74bab16d82",
        "sender": "0x00000000000000000000000000000000075BCd15",
        "stateRootHashes": [
          "0x15db68f72459ed8a690d41c5a41cb348ecde16a45f4c9d1118bb84a81eab0b89",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "verifiers": [
          "0x1111111111111111111111111111111111111111",
          "0x1111111111111111111111111111111111111111",
          "0x0000000000000000000000000000000000000000",
          "0x1111111111111111111111111111111111111111",
          "0x1111111111111111111111111111111111111111"
        ]
      },
      "errors": {
        "stateRootHashes": "Too many values. Update configuration to explore fully",
        "verifiers": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "Lib_AddressManager",
      "address": "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1624400033,
      "values": {
        "owner": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04"
      }
    },
    {
      "name": "L2OutputOracle",
      "address": "0xdfe97868233d1aa22e815a266982f2cf17685a27",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xd2E67B6a032F0A9B1f569E63ad6C38f7342c2e00",
        "admin": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04"
      },
      "implementations": ["0xd2E67B6a032F0A9B1f569E63ad6C38f7342c2e00"],
      "sinceTimestamp": 1685377367,
      "values": {
        "CHALLENGER": "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A",
        "computeL2Timestamp": [],
        "FINALIZATION_PERIOD_SECONDS": 604800,
        "getL2Output": [
          [
            "0x21438336768f296ddf0fecd74ee1d4e56e66d937b3d9a3e964c9a5bf8eba63c3",
            1686075935,
            105236863
          ],
          [
            "0x051d3a95aef15113b3460d05eab6e4cb6c18d7161fcdcd1fcaa006d6293646f4",
            1686077699,
            105238663
          ],
          [
            "0x0aaae29752019105141408ade45883ea64974024e64a9ee478e50c7a3d95009e",
            1686081167,
            105240463
          ],
          [
            "0x9b5482216a077163ed533a7f5a0379500f720583a07ec25e8deaa62a88aa4956",
            1686084995,
            105242263
          ],
          [
            "0x8c285a64d80ae330af82831cf4e8a2e97bb4515d069ad61ee42e4420a3638a80",
            1686088439,
            105244063
          ]
        ],
        "getL2OutputAfter": [
          [
            "0x21438336768f296ddf0fecd74ee1d4e56e66d937b3d9a3e964c9a5bf8eba63c3",
            1686075935,
            105236863
          ],
          [
            "0x21438336768f296ddf0fecd74ee1d4e56e66d937b3d9a3e964c9a5bf8eba63c3",
            1686075935,
            105236863
          ],
          [
            "0x21438336768f296ddf0fecd74ee1d4e56e66d937b3d9a3e964c9a5bf8eba63c3",
            1686075935,
            105236863
          ],
          [
            "0x21438336768f296ddf0fecd74ee1d4e56e66d937b3d9a3e964c9a5bf8eba63c3",
            1686075935,
            105236863
          ],
          [
            "0x21438336768f296ddf0fecd74ee1d4e56e66d937b3d9a3e964c9a5bf8eba63c3",
            1686075935,
            105236863
          ]
        ],
        "getL2OutputIndexAfter": [0, 0, 0, 0, 0],
        "L2_BLOCK_TIME": 2,
        "latestBlockNumber": 114425863,
        "latestOutputIndex": 5105,
        "nextBlockNumber": 114427663,
        "nextOutputIndex": 5106,
        "PROPOSER": "0x473300df21D047806A082244b417f96b32f13A33",
        "startingBlockNumber": 105235063,
        "startingTimestamp": 1686068903,
        "SUBMISSION_INTERVAL": 1800,
        "version": "1.3.0"
      },
      "errors": {
        "getL2Output": "Too many values. Update configuration to explore fully",
        "getL2OutputAfter": "Too many values. Update configuration to explore fully",
        "getL2OutputIndexAfter": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "ChallengeManager",
      "address": "0xe5896783a2F463446E1f624e64Aa6836BE4C6f58",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x1c78B622961f27Ccc2f9BA65E2ba5d5eB301a445",
        "admin": "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD"
      },
      "implementations": ["0x1c78B622961f27Ccc2f9BA65E2ba5d5eB301a445"],
      "sinceTimestamp": 1661457944,
      "values": {
        "bridge": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
        "challenges": [
          [
            ["0x0000000000000000000000000000000000000000", 0],
            ["0x0000000000000000000000000000000000000000", 0],
            0,
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            ["0x0000000000000000000000000000000000000000", 0],
            ["0x0000000000000000000000000000000000000000", 0],
            0,
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            ["0x0000000000000000000000000000000000000000", 0],
            ["0x0000000000000000000000000000000000000000", 0],
            0,
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            ["0x0000000000000000000000000000000000000000", 0],
            ["0x0000000000000000000000000000000000000000", 0],
            0,
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            0
          ],
          [
            ["0x0000000000000000000000000000000000000000", 0],
            ["0x0000000000000000000000000000000000000000", 0],
            0,
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            0
          ]
        ],
        "osp": "0x3E1f62AA8076000c3218493FE3e0Ae40bcB9A1DF",
        "resultReceiver": "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35",
        "sequencerInbox": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6",
        "totalChallengesCreated": 0
      },
      "errors": {
        "challenges": "Too many values. Update configuration to explore fully"
      }
    },
    {
      "name": "GnosisHubConnector",
      "address": "0xF1c78967584D5E0ffF66dA103b8eb06c82EC020d",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701993275,
      "values": {
        "AMB": "0x4C36d2919e407f0Cc2Ee3c993ccF8ac26d9CE64e",
        "delay": 604800,
        "DOMAIN": 6648936,
        "floor": 100,
        "gasCap": 4000000,
        "MIRROR_CHAIN_ID": 100,
        "MIRROR_DOMAIN": 6778479,
        "mirrorConnector": "0xDF97CadbcCeE9cfdB12A3e9BB7663E6753A71a0C",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      }
    },
    {
      "name": "Connext Multisig 2",
      "address": "0xf2964cCcB7CDA9e808aaBe8DB0DDDAF7890dd378",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": []
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1693608707,
      "values": {
        "domainSeparator": "0xa721cba4d2f32af7fbfd7a202a7c61a16ec27fc0140de338b2f91560251fd997",
        "getChainId": 1,
        "getOwners": [
          "0x9b903Ae440CB1f01c342466D6DB6b57A5BF98C3f",
          "0x7fB1B8D2C4a8186426Fb12a4Ae483f0093ED2315",
          "0x3d7dF98257E5CEe5f032fd06a0aA510F89A19A2e",
          "0x48fda6a16dEe5954bb0989b5B581d0623b48F06A",
          "0xf8d8aF083aC452b05b0D2eb4499AD900324b5754"
        ],
        "getThreshold": 3,
        "nonce": 23,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "ProxyAdmin",
      "address": "0xF5058616517C068C7b8c7EbC69FF636Ade9066d6",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1689158711,
      "values": {
        "owner": "0xd6B95c960779c72B8C6752119849318E5d550574"
      }
    },
    {
      "name": "OptimisticOracleV3",
      "address": "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1676487275,
      "values": {
        "burnedBondPercentage": "500000000000000000",
        "cachedOracle": "0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac",
        "defaultCurrency": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "defaultIdentifier": "0x4153534552545f54525554480000000000000000000000000000000000000000",
        "defaultLiveness": 7200,
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "numericalTrue": "1000000000000000000",
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "derivedName": "OptimisticOracleV3"
    }
  ],
  "eoas": [
    "0x000000000000000000000000000000000000dEaD",
    "0x00000000000000000000000000000000075BCd15",
    "0x048a5EcC705C280b2248aefF88fd581AbbEB8587",
    "0x0e62f9fa1F9b3E49759Dc94494F5bC37a83d1FAD",
    "0x1111111111111111111111111111111111111111",
    "0x1b526192C541DE6E23D73b4Afc4b6B45A75aeAdD",
    "0x22831e4f21cE65b33EF45df0e212b5bEbF130E5a",
    "0x320CBa820f33251d480Dcb79F7a9b1cc757aC12e",
    "0x32D63da9F776891843C90787CEC54ADA23ABd4C2",
    "0x33b2aD85f7DbA818e719FB52095dC768E0eD93ec",
    "0x3d7dF98257E5CEe5f032fd06a0aA510F89A19A2e",
    "0x4200000000000000000000000000000000000007",
    "0x432006CEd3BBa818e3D0d8730426B32Bb34a42aB",
    "0x43A257c61e9Ef4750e426eC0770589509469b156",
    "0x450BCD84a040E6975a8092114A09cD37fA140873",
    "0x473300df21D047806A082244b417f96b32f13A33",
    "0x48fda6a16dEe5954bb0989b5B581d0623b48F06A",
    "0x49a9E7ec76Bc8fDF658d09557305170d9F01D2fA",
    "0x4fFA5968857a6C8242E4A6Ded2418155D33e82E7",
    "0x58507fed0Cb11723dFb6848c92C59Cf0BBEB9927",
    "0x5b11BDC6eF32cE261A39f58122E301D59FC05677",
    "0x5d527765252003AceE6545416F6a9C8D15ae8402",
    "0x5f0F58c8939565C0C553303849Bc5Bf7c530e816",
    "0x6273c0965A1dB4F8A6277d490B4fD48715a42b96",
    "0x63Cda9C42db542bb91a7175E38673cFb00D402b0",
    "0x6892d4D1f73A65B03063B7d78174dC6350Fcc406",
    "0x6B44Dba00e92DD035976607CBF62bf1CC6320EC5",
    "0x6FD84ba95525c4cCd218F2f16F646A08B4b0a598",
    "0x76CF58cE587bC928fcc5aD895555fd040E06C61a",
    "0x779D30a8BDD8f8A1cEC0292d7799350a8cCef119",
    "0x7ce49752fFA7055622f444df3c69598748cb2E5f",
    "0x7fB1B8D2C4a8186426Fb12a4Ae483f0093ED2315",
    "0x8cb19CE8EEDF740389D428879a876A3B030B9170",
    "0x8D09e20b835009E5320cC11E6a6F00aF451aD669",
    "0x9584Eb0356a380b25D7ED2C14c54De58a25f2581",
    "0x96D38b113b1bC6a21d1137676f2f05DfcAce24e8",
    "0x975574980a5Da77f5C90bC92431835D91B73669e",
    "0x97b9dcB1AA34fE5F12b728D9166ae353d1e7f5C4",
    "0x9b903Ae440CB1f01c342466D6DB6b57A5BF98C3f",
    "0xA401e30E6b7Eb50e9355a4FA8F29118d28386E33",
    "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "0xBE7BC00382a50A711D037eAeCAD799bb8805Dfa8",
    "0xC4Ae07F276768A3b74AE8c47bc108a2aF0e40eBa",
    "0xC832bB8015762B4857459551057EB61c68B93608",
    "0xc840e73B856f52E5491d6016daf5C7AE5e6beECD",
    "0xDF97CadbcCeE9cfdB12A3e9BB7663E6753A71a0C",
    "0xdFa28361aC40679cC5D8EFa74c0421961397f2Eb",
    "0xe4d19c67ca0E9E3888158062De24321a0B272e73",
    "0xEca085906cb531bdf1F87eFA85c5bE46aA5C9d2c",
    "0xF26c772C0fF3a6036bDdAbDAbA22cf65ECa9F97c",
    "0xf8d8aF083aC452b05b0D2eb4499AD900324b5754",
    "0xFaAB88015477493cFAa5DFAA533099C590876F21"
  ],
  "abis": {
    "0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc": [
      "constructor(tuple(uint32 domain, uint32 mirrorDomain, address amb, address rootManager, address mirrorConnector, uint256 processGas, uint256 reserveGas, uint256 delayBlocks, address merkle, address watcherManager, uint256 minDisputeBlocks, uint256 disputeBlocks) _baseSpokeParams)",
      "error Connector__processMessage_notUsed()",
      "error MainnetSpokeConnector_finalize__DeprecatedInHubDomain()",
      "error MainnetSpokeConnector_proposeAggregateRoot__DeprecatedInHubDomain()",
      "error MainnetSpokeConnector_saveAggregateRoot__CallerIsNotRootManager()",
      "error MainnetSpokeConnector_saveAggregateRoot__EmptyRoot()",
      "error MainnetSpokeConnector_saveAggregateRoot__OnlyOptimisticMode()",
      "error MainnetSpokeConnector_saveAggregateRoot__RootAlreadyProven()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error RateLimited__rateLimited_messageSendRateExceeded()",
      "error SpokeConnector_activateOptimisticMode__OptimisticModeOn()",
      "error SpokeConnector_constructor__DisputeBlocksLowerThanMin()",
      "error SpokeConnector_finalize__InvalidInputHash()",
      "error SpokeConnector_finalize__ProposeInProgress()",
      "error SpokeConnector_finalize__ProposedHashIsFinalizedHash()",
      "error SpokeConnector_onlyOptimisticMode__SlowModeOn()",
      "error SpokeConnector_onlyProposer__NotAllowlistedProposer()",
      "error SpokeConnector_proposeAggregateRoot__ProposeInProgress()",
      "error SpokeConnector_receiveAggregateRoot__OptimisticModeOn()",
      "error SpokeConnector_setDisputeBlocks__DisputeBlocksLowerThanMin()",
      "error SpokeConnector_setDisputeBlocks__SameDisputeBlocksAsBefore()",
      "error SpokeConnector_setMinDisputeBlocks__SameMinDisputeBlocksAsBefore()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "error TypedMemView__unsafeCopyTo_identityOOG()",
      "error TypedMemView__unsafeCopyTo_invalidPointer()",
      "error TypedMemView__unsafeCopyTo_nullPointer()",
      "event AggregateRootProposed(bytes32 indexed aggregateRoot, uint256 indexed rootTimestamp, uint256 indexed endOfDispute, uint32 domain)",
      "event AggregateRootReceived(bytes32 indexed root)",
      "event AggregateRootRemoved(bytes32 indexed root)",
      "event AggregateRootVerified(bytes32 indexed root)",
      "event DelayBlocksUpdated(uint256 indexed updated, address caller)",
      "event Dispatch(bytes32 indexed leaf, uint256 indexed index, bytes32 indexed root, bytes message)",
      "event DisputeBlocksUpdated(uint256 previous, uint256 updated)",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageProven(bytes32 indexed leaf, bytes32 indexed aggregateRoot, uint256 aggregateIndex)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MinDisputeBlocksUpdated(uint256 previous, uint256 updated)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OptimisticModeActivated()",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event PendingAggregateRootDeleted(bytes32 indexed aggregateRoot)",
      "event Process(bytes32 indexed leaf, bool success, bytes returnData)",
      "event ProposedRootFinalized(bytes32 aggregateRoot)",
      "event ProposerAdded(address indexed proposer)",
      "event ProposerRemoved(address indexed proposer)",
      "event SendRateLimitUpdated(address updater, uint256 newRateLimit)",
      "event SenderAdded(address indexed sender)",
      "event SenderRemoved(address indexed sender)",
      "event SlowModeActivated(address indexed watcher)",
      "event SnapshotRootSaved(uint256 indexed snapshotId, bytes32 indexed root, uint256 indexed count)",
      "event Unpaused(address account)",
      "event WatcherManagerChanged(address watcherManager)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function FINALIZED_HASH() view returns (bytes32)",
      "function MERKLE() view returns (address)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function PROCESS_GAS() view returns (uint256)",
      "function RESERVE_GAS() view returns (uint256)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function activateOptimisticMode()",
      "function activateSlowMode()",
      "function addProposer(address _proposer)",
      "function addSender(address _sender)",
      "function allowlistedProposers(address) view returns (bool)",
      "function allowlistedSenders(address) view returns (bool)",
      "function delay() view returns (uint256)",
      "function delayBlocks() view returns (uint256)",
      "function dispatch(uint32 _destinationDomain, bytes32 _recipientAddress, bytes _messageBody) returns (bytes32, bytes)",
      "function disputeBlocks() view returns (uint256)",
      "function finalize(bytes32 _proposedAggregateRoot, uint256 _rootTimestamp, uint256 _endOfDispute)",
      "function getLastCompletedSnapshotId() view returns (uint256 _lastCompletedSnapshotId)",
      "function getSnapshotDuration() pure returns (uint256 _snapshotDuration)",
      "function home() view returns (address)",
      "function isReplica(address _potentialReplica) view returns (bool)",
      "function lastSentBlock() view returns (uint256)",
      "function localDomain() view returns (uint32)",
      "function minDisputeBlocks() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function optimisticMode() view returns (bool)",
      "function outboundRoot() view returns (bytes32)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingAggregateRoots(bytes32) view returns (uint256)",
      "function processMessage(bytes _data)",
      "function proposeAggregateRoot(bytes32 _aggregateRoot, uint256 _rootTimestamp)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedAggregateRootHash() view returns (bytes32)",
      "function proposedTimestamp() view returns (uint256)",
      "function proveAndProcess(tuple(bytes message, bytes32[32] path, uint256 index)[] _proofs, bytes32 _aggregateRoot, bytes32[32] _aggregatePath, uint256 _aggregateIndex)",
      "function provenAggregateRoots(bytes32) view returns (bool)",
      "function provenMessageRoots(bytes32) view returns (bool)",
      "function rateLimitBlocks() view returns (uint256)",
      "function removePendingAggregateRoot(bytes32 _fraudulentRoot)",
      "function removeProposer(address _proposer)",
      "function removeSender(address _sender)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function saveAggregateRoot(bytes32 _aggregateRoot)",
      "function send(bytes _encodedData) payable",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function sentMessageRoots(bytes32) view returns (bool)",
      "function setDelayBlocks(uint256 _delayBlocks)",
      "function setDisputeBlocks(uint256 _disputeBlocks)",
      "function setMinDisputeBlocks(uint256 _minDisputeBlocks)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function setRateLimitBlocks(uint256 _rateLimit)",
      "function setWatcherManager(address _watcherManager)",
      "function snapshotRoots(uint256) view returns (bytes32)",
      "function unpause()",
      "function verifySender(address _expected) returns (bool)",
      "function watcherManager() view returns (address)",
      "function withdrawFunds(address _to)"
    ],
    "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828": [
      "constructor()",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Snapshot(uint256 id)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function addMember(uint256 roleId, address newMember)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function balanceOfAt(address account, uint256 snapshotId) view returns (uint256)",
      "function burn(uint256 value)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function getMember(uint256 roleId) view returns (address)",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function mint(address recipient, uint256 value) returns (bool)",
      "function name() view returns (string)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function resetMember(uint256 roleId, address newMember)",
      "function snapshot() returns (uint256)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function totalSupplyAt(uint256 snapshotId) view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
    ],
    "0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d": [
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error ProposedOwnableFacet__acceptProposedOwner_noOwnershipChange()",
      "error ProposedOwnableFacet__assignRoleAdmin_invalidInput()",
      "error ProposedOwnableFacet__assignRoleRouter_invalidInput()",
      "error ProposedOwnableFacet__assignRoleWatcher_invalidInput()",
      "error ProposedOwnableFacet__delayElapsed_delayNotElapsed()",
      "error ProposedOwnableFacet__proposeAssetAllowlistRemoval_noOwnershipChange()",
      "error ProposedOwnableFacet__proposeNewOwner_invalidProposal()",
      "error ProposedOwnableFacet__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnableFacet__proposeRouterAllowlistRemoval_noOwnershipChange()",
      "error ProposedOwnableFacet__removeAssetAllowlist_noOwnershipChange()",
      "error ProposedOwnableFacet__removeAssetAllowlist_noProposal()",
      "error ProposedOwnableFacet__removeRouterAllowlist_noOwnershipChange()",
      "error ProposedOwnableFacet__removeRouterAllowlist_noProposal()",
      "error ProposedOwnableFacet__revokeRole_invalidInput()",
      "event AssignRoleAdmin(address admin)",
      "event AssignRoleRouter(address router)",
      "event AssignRoleWatcher(address watcher)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused()",
      "event RevokeRole(address revokedAddress, uint8 revokedRole)",
      "event RouterAllowlistRemovalProposed(uint256 timestamp)",
      "event RouterAllowlistRemoved(bool renounced)",
      "event Unpaused()",
      "function acceptProposedOwner()",
      "function assignRoleAdmin(address _admin)",
      "function assignRoleRouterAdmin(address _router)",
      "function assignRoleWatcher(address _watcher)",
      "function delay() view returns (uint256)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposeRouterAllowlistRemoval()",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function queryRole(address _role) view returns (uint8)",
      "function removeRouterAllowlist()",
      "function revokeRole(address _revoke)",
      "function routerAllowlistRemoved() view returns (bool)",
      "function routerAllowlistTimestamp() view returns (uint256)",
      "function unpause()"
    ],
    "0x0b89ccD6b803CCEC4f0E0fBeFAeE1f7d16e734e2": [
      "error AddressIsZero()",
      "error CallerMustBeOwner()",
      "error CallerMustBeOwnerOrPricingWallet()",
      "error CallerMustBePendingOwner()",
      "error CallerNotApproved(address msgSender)",
      "error ChainIdIsZero()",
      "error ExceedsMaximumBudget(uint16 targetChain, uint256 exceedingValue, uint256 maximumBudget)",
      "error FailedToInitializeImplementation(string reason)",
      "error GasPriceIsZero()",
      "error ImplementationAlreadyInitialized()",
      "error MaxRefundGreaterThanGasLimitCost(uint256 maxRefund, uint256 gasLimitCost)",
      "error MaxRefundGreaterThanGasLimitCostOnSourceChain(uint256 maxRefund, uint256 gasLimitCost)",
      "error NativeCurrencyPriceIsZero()",
      "error Overflow(uint256 value, uint256 max)",
      "error PriceIsZero(uint16 chain)",
      "error UnexpectedExecutionParamsVersion(uint8 version, uint8 expectedVersion)",
      "error UnsupportedExecutionParamsVersion(uint8 version)",
      "error WrongChainId()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event AssetConversionBufferUpdated(uint16 targetChain, uint16 buffer, uint16 bufferDenominator)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ChainSupportUpdated(uint16 targetChain, bool isSupported)",
      "event ContractUpgraded(address indexed oldContract, address indexed newContract)",
      "event DeliverGasOverheadUpdated(uint256 indexed oldGasOverhead, uint256 indexed newGasOverhead)",
      "event OwnershipTransfered(address indexed oldOwner, address indexed newOwner)",
      "event RewardAddressUpdated(address indexed newAddress)",
      "event TargetChainAddressUpdated(uint16 indexed targetChain, bytes32 indexed newAddress)",
      "event Upgraded(address indexed implementation)",
      "event WormholeRelayerUpdated(address coreRelayer)",
      "function assetConversionBuffer(uint16 targetChain) view returns (uint16 buffer, uint16 bufferDenominator)",
      "function chainId() view returns (uint16)",
      "function confirmOwnershipTransferRequest()",
      "function coreRelayer() view returns (address)",
      "function deliverGasOverhead(uint16 targetChain) view returns (uint256)",
      "function gasPrice(uint16 targetChain) view returns (uint256)",
      "function getRewardAddress() view returns (address)",
      "function getSupportedKeys() view returns (uint256 bitmap)",
      "function getTargetChainAddress(uint16 targetChain) view returns (bytes32 deliveryProviderAddress)",
      "function initialize()",
      "function isChainSupported(uint16 targetChain) view returns (bool supported)",
      "function isInitialized(address impl) view returns (bool)",
      "function isMessageKeyTypeSupported(uint8 keyType) view returns (bool supported)",
      "function maximumBudget(uint16 targetChain) view returns (uint256)",
      "function nativeCurrencyPrice(uint16 targetChain) view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function pricingWallet() view returns (address)",
      "function quoteAssetConversion(uint16 targetChain, uint256 currentChainAmount) view returns (uint256 targetChainAmount)",
      "function quoteDeliveryOverhead(uint16 targetChain) view returns (uint256 nativePriceQuote)",
      "function quoteDeliveryPrice(uint16 targetChain, uint256 receiverValue, bytes encodedExecutionParams) view returns (uint256 nativePriceQuote, bytes encodedExecutionInfo)",
      "function quoteEvmDeliveryPrice(uint16 targetChain, uint256 gasLimit, uint256 receiverValue) view returns (uint256 nativePriceQuote, uint256 targetChainRefundPerUnitGasUnused)",
      "function quoteGasCost(uint16 targetChain, uint256 gasAmount) view returns (uint256 totalCost)",
      "function quoteGasPrice(uint16 targetChain) view returns (uint256 price)",
      "function rewardAddress() view returns (address)",
      "function submitOwnershipTransferRequest(uint16 thisRelayerChainId, address newOwner)",
      "function targetChainAddress(uint16 targetChain) view returns (bytes32)",
      "function updateAssetConversionBuffer(uint16 targetChain, uint16 buffer, uint16 bufferDenominator)",
      "function updateAssetConversionBuffers(tuple(uint16 chainId, uint16 buffer, uint16 bufferDenominator)[] updates)",
      "function updateConfig(tuple(bool updateAssetConversionBuffer, bool updateDeliverGasOverhead, bool updatePrice, bool updateTargetChainAddress, bool updateMaximumBudget, bool updateSupportedChain, bool isSupported, uint16 chainId, uint16 buffer, uint16 bufferDenominator, uint256 newGasOverhead, uint256 gasPrice, uint256 nativeCurrencyPrice, bytes32 targetChainAddress, uint256 maximumTotalBudget)[] updates, tuple(bool updateWormholeRelayer, bool updateRewardAddress, bool updateSupportedKeyTypes, address coreRelayer, address rewardAddress, uint256 supportedKeyTypesBitmap) coreConfig)",
      "function updateDeliverGasOverhead(uint16 chainId, uint256 newGasOverhead)",
      "function updateDeliverGasOverheads(tuple(uint16 chainId, uint256 newGasOverhead)[] overheadUpdates)",
      "function updateMaximumBudget(uint16 targetChain, uint256 maximumTotalBudget)",
      "function updateMaximumBudgets(tuple(uint16 chainId, uint256 maximumTotalBudget)[] updates)",
      "function updatePrice(uint16 updateChainId, uint256 updateGasPrice, uint256 updateNativeCurrencyPrice)",
      "function updatePrices(tuple(uint16 chainId, uint256 gasPrice, uint256 nativeCurrencyPrice)[] updates)",
      "function updatePricingWallet(address newPricingWallet)",
      "function updateRewardAddress(address newAddress)",
      "function updateSupportedChain(uint16 targetChain, bool isSupported)",
      "function updateSupportedChains(tuple(uint16 chainId, bool isSupported)[] updates)",
      "function updateSupportedMessageKeyTypes(uint8 keyType, bool supported)",
      "function updateTargetChainAddress(uint16 targetChain, bytes32 newAddress)",
      "function updateTargetChainAddresses(tuple(uint16 chainId, bytes32 targetChainAddress)[] updates)",
      "function updateWormholeRelayer(address newAddress)",
      "function upgrade(uint16 deliveryProviderChainId, address newImplementation)"
    ],
    "0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x0eA7372338a589e7f0b00E463a53AA464ef04e17": [
      "error AlreadyInit()",
      "error AlreadySpent(uint256 index)",
      "error BridgeCallFailed()",
      "error HadZeroInit()",
      "error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength)",
      "error NotRollup(address sender, address rollup)",
      "error PathNotMinimal(uint256 index, uint256 maxIndex)",
      "error ProofTooLong(uint256 proofLength)",
      "error SimulationOnlyEntrypoint()",
      "error UnknownRoot(bytes32 root)",
      "event OutBoxTransactionExecuted(address indexed to, address indexed l2Sender, uint256 indexed zero, uint256 transactionIndex)",
      "event SendRootUpdated(bytes32 indexed blockHash, bytes32 indexed outputRoot)",
      "function OUTBOX_VERSION() view returns (uint128)",
      "function bridge() view returns (address)",
      "function calculateItemHash(address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data) pure returns (bytes32)",
      "function calculateMerkleRoot(bytes32[] proof, uint256 path, bytes32 item) pure returns (bytes32)",
      "function executeTransaction(bytes32[] proof, uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)",
      "function executeTransactionSimulation(uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)",
      "function initialize(address _bridge)",
      "function isSpent(uint256 index) view returns (bool)",
      "function l2ToL1BatchNum() pure returns (uint256)",
      "function l2ToL1Block() view returns (uint256)",
      "function l2ToL1EthBlock() view returns (uint256)",
      "function l2ToL1OutputId() view returns (bytes32)",
      "function l2ToL1Sender() view returns (address)",
      "function l2ToL1Timestamp() view returns (uint256)",
      "function rollup() view returns (address)",
      "function roots(bytes32) view returns (bytes32)",
      "function spent(uint256) view returns (bytes32)",
      "function updateSendRoot(bytes32 root, bytes32 l2BlockHash)"
    ],
    "0x1066CEcC8880948FE55e427E94F1FF221d626591": [
      "error BadSequencerMessageNumber(uint256 stored, uint256 received)",
      "error InvalidOutboxSet(address outbox)",
      "error NotContract(address addr)",
      "error NotDelayedInbox(address sender)",
      "error NotOutbox(address sender)",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error NotSequencerInbox(address sender)",
      "event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)",
      "event InboxToggle(address indexed inbox, bool enabled)",
      "event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)",
      "event OutboxToggle(address indexed outbox, bool enabled)",
      "event SequencerInboxUpdated(address newSequencerInbox)",
      "function acceptFundsFromOldBridge() payable",
      "function activeOutbox() view returns (address)",
      "function allowedDelayedInboxList(uint256) view returns (address)",
      "function allowedDelayedInboxes(address inbox) view returns (bool)",
      "function allowedOutboxList(uint256) view returns (address)",
      "function allowedOutboxes(address outbox) view returns (bool)",
      "function delayedInboxAccs(uint256) view returns (bytes32)",
      "function delayedMessageCount() view returns (uint256)",
      "function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash) payable returns (uint256)",
      "function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns (uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)",
      "function executeCall(address to, uint256 value, bytes data) returns (bool success, bytes returnData)",
      "function initialize(address rollup_)",
      "function rollup() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function sequencerInboxAccs(uint256) view returns (bytes32)",
      "function sequencerMessageCount() view returns (uint256)",
      "function sequencerReportedSubMessageCount() view returns (uint256)",
      "function setDelayedInbox(address inbox, bool enabled)",
      "function setOutbox(address outbox, bool enabled)",
      "function setSequencerInbox(address _sequencerInbox)",
      "function setSequencerReportedSubMessageCount(uint256 newMsgCount)",
      "function submitBatchSpendingReport(address sender, bytes32 messageDataHash) returns (uint256)"
    ],
    "0x172fB6b07D6aB708dd67392a09e1c40d16dA0460": [
      "constructor(address _finder, address _owner, address _collateral, uint256 _bondAmount, string _rules, bytes32 _identifier, uint64 _liveness)",
      "error NotIERC165Compliant(address guard_)",
      "event AvatarSet(address indexed previousAvatar, address indexed newAvatar)",
      "event ChangedGuard(address guard)",
      "event Initialized(uint8 version)",
      "event OptimisticGovernorDeployed(address indexed owner, address indexed avatar, address target)",
      "event OptimisticOracleChanged(address indexed newOptimisticOracleV3)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalDeleted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event ProposalExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event SetCollateralAndBond(address indexed collateral, uint256 indexed bondAmount)",
      "event SetEscalationManager(address indexed escalationManager)",
      "event SetIdentifier(bytes32 indexed identifier)",
      "event SetLiveness(uint64 indexed liveness)",
      "event SetRules(string rules)",
      "event TargetSet(address indexed previousTarget, address indexed newTarget)",
      "event TransactionExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId, uint256 indexed transactionIndex)",
      "event TransactionsProposed(address indexed proposer, uint256 indexed proposalTime, bytes32 indexed assertionId, tuple(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, uint256 requestTime) proposal, bytes32 proposalHash, bytes explanation, string rules, uint256 challengeWindowEnds)",
      "function EXPLANATION_KEY() view returns (bytes)",
      "function PROPOSAL_HASH_KEY() view returns (bytes)",
      "function RULES_KEY() view returns (bytes)",
      "function assertionDisputedCallback(bytes32 assertionId)",
      "function assertionIds(bytes32) view returns (bytes32)",
      "function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully)",
      "function avatar() view returns (address)",
      "function bondAmount() view returns (uint256)",
      "function collateral() view returns (address)",
      "function deleteProposalOnUpgrade(bytes32 proposalHash)",
      "function escalationManager() view returns (address)",
      "function executeProposal(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getGuard() view returns (address _guard)",
      "function getProposalBond() view returns (uint256)",
      "function guard() view returns (address)",
      "function identifier() view returns (bytes32)",
      "function liveness() view returns (uint64)",
      "function optimisticOracleV3() view returns (address)",
      "function owner() view returns (address)",
      "function proposalHashes(bytes32) view returns (bytes32)",
      "function proposeTransactions(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, bytes explanation)",
      "function renounceOwnership()",
      "function rules() view returns (string)",
      "function setAvatar(address _avatar)",
      "function setCollateralAndBond(address _collateral, uint256 _bondAmount)",
      "function setEscalationManager(address _escalationManager)",
      "function setGuard(address _guard)",
      "function setIdentifier(bytes32 _identifier)",
      "function setLiveness(uint64 _liveness)",
      "function setRules(string _rules)",
      "function setTarget(address _target)",
      "function setUp(bytes initializeParams)",
      "function sync()",
      "function target() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x1c78B622961f27Ccc2f9BA65E2ba5d5eB301a445": [
      "event Bisected(uint64 indexed challengeIndex, bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)",
      "event ChallengeEnded(uint64 indexed challengeIndex, uint8 kind)",
      "event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps)",
      "event InitiatedChallenge(uint64 indexed challengeIndex, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) startState, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) endState)",
      "event OneStepProofCompleted(uint64 indexed challengeIndex)",
      "function bisectExecution(uint64 challengeIndex, tuple(uint256 oldSegmentsStart, uint256 oldSegmentsLength, bytes32[] oldSegments, uint256 challengePosition) selection, bytes32[] newSegments)",
      "function bridge() view returns (address)",
      "function challengeExecution(uint64 challengeIndex, tuple(uint256 oldSegmentsStart, uint256 oldSegmentsLength, bytes32[] oldSegments, uint256 challengePosition) selection, uint8[2] machineStatuses, bytes32[2] globalStateHashes, uint256 numSteps)",
      "function challengeInfo(uint64 challengeIndex) view returns (tuple(tuple(address addr, uint256 timeLeft) current, tuple(address addr, uint256 timeLeft) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode))",
      "function challenges(uint256) view returns (tuple(address addr, uint256 timeLeft) current, tuple(address addr, uint256 timeLeft) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode)",
      "function clearChallenge(uint64 challengeIndex)",
      "function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals)[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns (uint64)",
      "function currentResponder(uint64 challengeIndex) view returns (address)",
      "function currentResponderTimeLeft(uint64 challengeIndex) view returns (uint256)",
      "function initialize(address resultReceiver_, address sequencerInbox_, address bridge_, address osp_)",
      "function isTimedOut(uint64 challengeIndex) view returns (bool)",
      "function oneStepProveExecution(uint64 challengeIndex, tuple(uint256 oldSegmentsStart, uint256 oldSegmentsLength, bytes32[] oldSegments, uint256 challengePosition) selection, bytes proof)",
      "function osp() view returns (address)",
      "function resultReceiver() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function timeout(uint64 challengeIndex)",
      "function totalChallengesCreated() view returns (uint64)"
    ],
    "0x2150Bc3c64cbfDDbaC9815EF615D6AB8671bfe43": [
      "constructor(address _portal)",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize()",
      "function messageNonce() view returns (uint256)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x229047fed2591dbec1eF1118d64F7aF3dB9EB290": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1": [
      "constructor(address _libAddressManager, string _implementationName)"
    ],
    "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911": [
      "constructor(address impl)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x28a55488fef40005309e2DA0040DbE9D300a64AB": [
      "constructor(address _l2Oracle, address _guardian, bool _paused, address _config)",
      "event Initialized(uint8 version)",
      "event Paused(address account)",
      "event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)",
      "event Unpaused(address account)",
      "event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)",
      "event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)",
      "function GUARDIAN() view returns (address)",
      "function L2_ORACLE() view returns (address)",
      "function SYSTEM_CONFIG() view returns (address)",
      "function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable",
      "function donateETH() payable",
      "function finalizeWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx)",
      "function finalizedWithdrawals(bytes32) view returns (bool)",
      "function initialize(bool _paused)",
      "function isOutputFinalized(uint256 _l2OutputIndex) view returns (bool)",
      "function l2Sender() view returns (address)",
      "function minimumGasLimit(uint64 _byteCount) pure returns (uint64)",
      "function params() view returns (uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proveWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _l2OutputIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function provenWithdrawals(bytes32) view returns (bytes32 outputRoot, uint128 timestamp, uint128 l2OutputIndex)",
      "function unpause()",
      "function version() view returns (string)"
    ],
    "0x28A9e7bbed277092E2431F186E1aF898962d4E92": [
      "constructor(address _upgradeBeacon, bytes _initializationCalldata) payable"
    ],
    "0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b": [
      "event DiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "event DiamondCutProposed(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata, uint256 deadline)",
      "event DiamondCutRescinded(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function diamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function getAcceptanceTime(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata) view returns (uint256)",
      "function proposeDiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function rescindDiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)"
    ],
    "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedMasterCopy(address masterCopy)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function NAME() view returns (string)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeMasterCopy(address _masterCopy)",
      "function changeThreshold(uint256 _threshold)",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getMessageHash(bytes message) view returns (bytes32)",
      "function getModules() view returns (address[])",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isOwner(address owner) view returns (bool)",
      "function isValidSignature(bytes _data, bytes _signature) returns (bytes4)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signMessage(bytes _data)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2": [
      "error AssetLogic__getConfig_notRegistered()",
      "error AssetLogic__getTokenIndexFromStableSwapPool_notExist()",
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error BridgeFacet__addRemote_invalidDomain()",
      "error BridgeFacet__addRemote_invalidRouter()",
      "error BridgeFacet__addSequencer_alreadyApproved()",
      "error BridgeFacet__addSequencer_invalidSequencer()",
      "error BridgeFacet__bumpTransfer_noRelayerVault()",
      "error BridgeFacet__bumpTransfer_valueIsZero()",
      "error BridgeFacet__excecute_insufficientGas()",
      "error BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn()",
      "error BridgeFacet__execute_badFastLiquidityStatus()",
      "error BridgeFacet__execute_externalCallFailed()",
      "error BridgeFacet__execute_invalidRouterSignature()",
      "error BridgeFacet__execute_invalidSequencerSignature()",
      "error BridgeFacet__execute_maxRoutersExceeded()",
      "error BridgeFacet__execute_notApprovedForPortals()",
      "error BridgeFacet__execute_notReconciled()",
      "error BridgeFacet__execute_notSupportedRouter()",
      "error BridgeFacet__execute_notSupportedSequencer()",
      "error BridgeFacet__execute_unapprovedSender()",
      "error BridgeFacet__execute_wrongDomain()",
      "error BridgeFacet__forceReceiveLocal_notDestination()",
      "error BridgeFacet__forceUpdateSlippage_invalidSlippage()",
      "error BridgeFacet__forceUpdateSlippage_notDestination()",
      "error BridgeFacet__mustHaveRemote_destinationNotSupported()",
      "error BridgeFacet__onlyDelegate_notDelegate()",
      "error BridgeFacet__removeSequencer_notApproved()",
      "error BridgeFacet__setXAppConnectionManager_domainsDontMatch()",
      "error BridgeFacet__xcall_capReached()",
      "error BridgeFacet__xcall_emptyTo()",
      "error BridgeFacet__xcall_invalidSlippage()",
      "error BridgeFacet__xcall_nativeAssetNotSupported()",
      "error BridgeFacet_xcall__emptyLocalAsset()",
      "event AavePortalMintUnbacked(bytes32 indexed transferId, address indexed router, address asset, uint256 amount)",
      "event Executed(bytes32 indexed transferId, address indexed to, address indexed asset, tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) args, address local, uint256 amount, address caller)",
      "event ExternalCalldataExecuted(bytes32 indexed transferId, bool success, bytes returnData)",
      "event ForceReceiveLocal(bytes32 indexed transferId)",
      "event RemoteAdded(uint32 domain, address remote, address caller)",
      "event SequencerAdded(address sequencer, address caller)",
      "event SequencerRemoved(address sequencer, address caller)",
      "event SlippageUpdated(bytes32 indexed transferId, uint256 slippage)",
      "event TransferRelayerFeesIncreased(bytes32 indexed transferId, uint256 increase, address asset, address caller)",
      "event XAppConnectionManagerSet(address updated, address caller)",
      "event XCalled(bytes32 indexed transferId, uint256 indexed nonce, bytes32 indexed messageHash, tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address asset, uint256 amount, address local, bytes messageBody)",
      "function addSequencer(address _sequencer)",
      "function approvedSequencers(address _sequencer) view returns (bool)",
      "function bumpTransfer(bytes32 _transferId) payable",
      "function bumpTransfer(bytes32 _transferId, address _relayerFeeAsset, uint256 _relayerFee)",
      "function domain() view returns (uint32)",
      "function enrollRemoteRouter(uint32 _domain, bytes32 _router)",
      "function execute(tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) _args) returns (bytes32)",
      "function forceReceiveLocal(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params)",
      "function forceUpdateSlippage(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, uint256 _slippage)",
      "function nonce() view returns (uint256)",
      "function remote(uint32 _domain) view returns (address)",
      "function removeSequencer(address _sequencer)",
      "function routedTransfers(bytes32 _transferId) view returns (address[])",
      "function setXAppConnectionManager(address _xAppConnectionManager)",
      "function transferStatus(bytes32 _transferId) view returns (uint8)",
      "function xAppConnectionManager() view returns (address)",
      "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)",
      "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
      "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
      "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)"
    ],
    "0x3Bcf4185443A339517aD4e580067f178d1B68E1D": [
      "function facetAddress(bytes4 _functionSelector) view returns (address facetAddress_)",
      "function facetAddresses() view returns (address[] facetAddresses_)",
      "function facetFunctionSelectors(address _facet) view returns (bytes4[] facetFunctionSelectors_)",
      "function facets() view returns (tuple(address facetAddress, bytes4[] functionSelectors)[] facets_)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)"
    ],
    "0x3ffFbAdAF827559da092217e474760E2b2c3CeDd": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x40f941E48A552bF496B154Af6bf55725f18D77c3": [
      "event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)",
      "function getImplementationAddress(bytes32 interfaceName) view returns (address implementationAddress)",
      "function interfacesImplemented(bytes32) view returns (address)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0x42F38ec5A75acCEc50054671233dfAC9C0E7A3F6": [
      "constructor(address _masterCopy)"
    ],
    "0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4": [
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error DiamondInit__init_alreadyInitialized()",
      "error DiamondInit__init_domainsDontMatch()",
      "function init(uint32 _domain, address _xAppConnectionManager, uint256 _acceptanceDelay, address _lpTokenTargetAddress)"
    ],
    "0x4C36d2919e407f0Cc2Ee3c993ccF8ac26d9CE64e": [
      "function upgradeTo(uint256 version, address implementation)",
      "function version() view returns (uint256)",
      "function implementation() view returns (address)",
      "function upgradeabilityOwner() view returns (address)",
      "function upgradeToAndCall(uint256 version, address implementation, bytes data) payable",
      "function transferProxyOwnership(address newOwner)",
      "event ProxyOwnershipTransferred(address previousOwner, address newOwner)",
      "event Upgraded(uint256 version, address indexed implementation)"
    ],
    "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625": [
      "constructor(address _singleton)"
    ],
    "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x50efaC9619225d7fB4703C5872da978849B6E7cC": [
      "constructor(address _token, uint256 _bond, address _governor, address _finder)",
      "event BondSet(uint256 bond)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalResolved(uint256 indexed id, bool success)",
      "function bond() view returns (uint256)",
      "function bondedProposals(uint256) view returns (address sender, uint64 time, uint256 lockedBond, bytes ancillaryData)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function governor() view returns (address)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function owner() view returns (address)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions, bytes ancillaryData) returns (uint256)",
      "function renounceOwnership()",
      "function resolveProposal(uint256 id)",
      "function setBond(uint256 _bond)",
      "function token() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A": [
      "constructor(uint256 _delayBlocks, address _merkle, address _watcherManager, uint256 _minDisputeBlocks, uint256 _disputeBlocks)",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error RootManager__renounceOwnership_prohibited()",
      "error RootManager_activateOptimisticMode__OptimisticModeOn()",
      "error RootManager_aggregate__OptimisticModeOn()",
      "error RootManager_checkDomains__InvalidDomains()",
      "error RootManager_constructor__DisputeBlocksLowerThanMin()",
      "error RootManager_finalize__InvalidAggregateRoot()",
      "error RootManager_finalize__InvalidInputHash()",
      "error RootManager_finalize__ProposeInProgress()",
      "error RootManager_onlyOptimisticMode__SlowModeOn()",
      "error RootManager_onlyProposer__NotWhitelistedProposer(address caller)",
      "error RootManager_propagate__AggregateRootIsZero()",
      "error RootManager_proposeAggregateRoot__InvalidSnapshotId(uint256 snapshotId)",
      "error RootManager_proposeAggregateRoot__ProposeInProgress()",
      "error RootManager_sendRootToHub__NoMessageSent()",
      "error RootManager_setDisputeBlocks__DisputeBlocksLowerThanMin()",
      "error RootManager_setDisputeBlocks__SameDisputeBlocksAsBefore()",
      "error RootManager_setHubDomain__InvalidDomain()",
      "error RootManager_setMinDisputeBlocks__SameMinDisputeBlocksAsBefore()",
      "event AggregateRootPropagated(bytes32 indexed aggregateRoot, bytes32 domainsHash)",
      "event AggregateRootProposed(uint256 indexed snapshotId, uint256 endOfDispute, bytes32 indexed aggregateRoot, bytes32 indexed baseRoot, bytes32[] snapshotsRoots, uint32[] domains)",
      "event AggregateRootSavedOptimistic(bytes32 indexed aggregateRoot, uint256 rootTimestamp)",
      "event AggregateRootSavedSlow(bytes32 indexed aggregateRoot, uint256 leafCount, bytes32[] aggregatedRoots, uint256 rootTimestamp)",
      "event ConnectorAdded(uint32 domain, address connector, uint32[] domains, address[] connectors)",
      "event ConnectorRemoved(uint32 domain, address connector, uint32[] domains, address[] connectors, address caller)",
      "event DelayBlocksUpdated(uint256 previous, uint256 updated)",
      "event DisputeBlocksUpdated(uint256 previous, uint256 updated)",
      "event DomainAdded(uint32 domain, address connector)",
      "event DomainRemoved(uint32 domain)",
      "event HubDomainCleared()",
      "event HubDomainSet(uint32 domain)",
      "event MinDisputeBlocksUpdated(uint256 previous, uint256 updated)",
      "event OptimisticModeActivated()",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event PropagateFailed(uint32 domain, address connector)",
      "event ProposerAdded(address indexed proposer)",
      "event ProposerRemoved(address indexed proposer)",
      "event RootDiscarded(bytes32 fraudulentRoot)",
      "event RootReceived(uint32 domain, bytes32 receivedRoot, uint256 queueIndex)",
      "event SlowModeActivated(address indexed watcher)",
      "event Unpaused(address account)",
      "event WatcherManagerChanged(address watcherManager)",
      "function DEQUEUE_MAX() view returns (uint128)",
      "function FINALIZED_HASH() view returns (bytes32)",
      "function MAX_DOMAINS() view returns (uint256)",
      "function MERKLE() view returns (address)",
      "function acceptProposedOwner()",
      "function activateOptimisticMode()",
      "function activateSlowMode()",
      "function addConnector(uint32 _domain, address _connector)",
      "function addProposer(address _proposer)",
      "function aggregate(uint32 _domain, bytes32 _inbound)",
      "function allowlistedProposers(address) view returns (bool)",
      "function clearHubDomain()",
      "function connectors(uint256) view returns (address)",
      "function connectorsHash() view returns (bytes32)",
      "function delay() view returns (uint256)",
      "function delayBlocks() view returns (uint256)",
      "function dequeue() returns (bytes32, uint256)",
      "function discardRoot(bytes32 _root)",
      "function disputeBlocks() view returns (uint256)",
      "function domains(uint256) view returns (uint32)",
      "function domainsHash() view returns (bytes32)",
      "function finalize(bytes32 _proposedAggregateRoot, uint256 _endOfDispute)",
      "function finalizeAndPropagate(address[] _connectors, uint256[] _fees, bytes[] _encodedData, bytes32 _proposedAggregateRoot, uint256 _endOfDispute) payable",
      "function getConnectorForDomain(uint32 _domain) view returns (address)",
      "function getDomainIndex(uint32 _domain) view returns (uint256)",
      "function getPendingInboundRootsCount() view returns (uint256)",
      "function getSnapshotDuration() pure returns (uint256 _snapshotDuration)",
      "function hubDomain() view returns (uint32)",
      "function isDomainSupported(uint32 _domain) view returns (bool)",
      "function lastPropagatedRoot(uint32) view returns (bytes32)",
      "function lastSavedAggregateRootTimestamp() view returns (uint256)",
      "function minDisputeBlocks() view returns (uint256)",
      "function optimisticMode() view returns (bool)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingInboundRoots() view returns (uint128 first, uint128 last)",
      "function propagate(address[] _connectors, uint256[] _fees, bytes[] _encodedData) payable",
      "function proposeAggregateRoot(uint256 _snapshotId, bytes32 _aggregateRoot, bytes32[] _snapshotsRoots, uint32[] _domains)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedAggregateRootHash() view returns (bytes32)",
      "function proposedTimestamp() view returns (uint256)",
      "function removeConnector(uint32 _domain)",
      "function removeProposer(address _proposer)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendRootToHubSpoke()",
      "function setDelayBlocks(uint256 _delayBlocks)",
      "function setDisputeBlocks(uint256 _disputeBlocks)",
      "function setHubDomain(uint32 _domain)",
      "function setMinDisputeBlocks(uint256 _minDisputeBlocks)",
      "function setWatcherManager(address _watcherManager)",
      "function unpause()",
      "function validAggregateRoots(uint256) view returns (bytes32)",
      "function validateConnectors(address[] _connectors) view",
      "function validateDomains(uint32[] _domains, address[] _connectors) view",
      "function watcherManager() view returns (address)"
    ],
    "0x543bA4AADBAb8f9025686Bd03993043599c6fB04": [
      "constructor(address _owner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function addressManager() view returns (address)",
      "function changeProxyAdmin(address _proxy, address _newAdmin)",
      "function getProxyAdmin(address _proxy) view returns (address)",
      "function getProxyImplementation(address _proxy) view returns (address)",
      "function implementationName(address) view returns (string)",
      "function isUpgrading() view returns (bool)",
      "function owner() view returns (address)",
      "function proxyType(address) view returns (uint8)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function setAddressManager(address _address)",
      "function setImplementationName(address _address, string _name)",
      "function setProxyType(address _address, uint8 _type)",
      "function setUpgrading(bool _upgrading)",
      "function transferOwnership(address newOwner)",
      "function upgrade(address _proxy, address _implementation)",
      "function upgradeAndCall(address _proxy, address _implementation, bytes _data) payable"
    ],
    "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x56Ab287e5c33Ee70158c951f34818bd095446255": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function claimMessage(bytes _calldata, uint256 _nonce)",
      "function delay() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "0x57Bd336d579A51938619271a7Cc137a46D0501B1": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x5aED5f8A1e3607476F1f81c3d8fe126deB0aFE94": [
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error GasLimitTooLarge()",
      "error InsufficientSubmissionCost(uint256 expected, uint256 actual)",
      "error InsufficientValue(uint256 expected, uint256 actual)",
      "error L1Forked()",
      "error NotAllowedOrigin(address origin)",
      "error NotForked()",
      "error NotOrigin()",
      "error NotOwner(address sender, address owner)",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error RetryableData(address from, address to, uint256 l2CallValue, uint256 deposit, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data)",
      "event AllowListAddressSet(address indexed user, bool val)",
      "event AllowListEnabledUpdated(bool isEnabled)",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "function allowListEnabled() view returns (bool)",
      "function bridge() view returns (address)",
      "function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee) view returns (uint256)",
      "function createRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)",
      "function createRetryableTicketNoRefundAliasRewrite(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)",
      "function depositEth(uint256) payable returns (uint256)",
      "function depositEth() payable returns (uint256)",
      "function initialize(address _bridge, address _sequencerInbox)",
      "function isAllowed(address) view returns (bool)",
      "function pause()",
      "function paused() view returns (bool)",
      "function postUpgradeInit(address)",
      "function sendContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, uint256 value, bytes data) returns (uint256)",
      "function sendL1FundedContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, bytes data) payable returns (uint256)",
      "function sendL1FundedUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, bytes data) payable returns (uint256)",
      "function sendL1FundedUnsignedTransactionToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, bytes data) payable returns (uint256)",
      "function sendL2Message(bytes messageData) returns (uint256)",
      "function sendL2MessageFromOrigin(bytes messageData) returns (uint256)",
      "function sendUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sendUnsignedTransactionToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sendWithdrawEthToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, uint256 value, address withdrawTo) returns (uint256)",
      "function sequencerInbox() view returns (address)",
      "function setAllowList(address[] user, bool[] val)",
      "function setAllowListEnabled(bool _allowListEnabled)",
      "function uniswapCreateRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)",
      "function unpause()",
      "function unsafeCreateRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)"
    ],
    "0x5c2149869146DeA55cDD1CF2DD828e4e1548bb2A": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _optimismPortal, uint256 _gasCap)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function OPTIMISM_PORTAL() view returns (address)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _l2OutputIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function processed(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295": [
      "error AssetLogic__getConfig_notRegistered()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error InboxFacet__handle_notTransfer()",
      "error InboxFacet__onlyRemoteRouter_notRemote()",
      "error InboxFacet__onlyReplica_notReplica()",
      "error InboxFacet__reconcile_alreadyReconciled()",
      "error InboxFacet__reconcile_noPortalRouter()",
      "error TypedMemView__assertType_typeAssertionFailed(uint256 actual, uint256 expected)",
      "error TypedMemView__assertValid_validityAssertionFailed()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "event Receive(uint64 indexed originAndNonce, address indexed token, address indexed recipient, address liquidityProvider, uint256 amount)",
      "event Reconciled(bytes32 indexed transferId, uint32 indexed originDomain, address indexed local, address[] routers, uint256 amount, address caller)",
      "function handle(uint32 _origin, uint32 _nonce, bytes32 _sender, bytes _message)"
    ],
    "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35": [
      "constructor(tuple(uint64 confirmPeriodBlocks, uint64 extraChallengeTimeBlocks, address stakeToken, uint256 baseStake, bytes32 wasmModuleRoot, address owner, address loserStakeEscrow, uint256 chainId, uint64 genesisBlockNum, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) sequencerInboxMaxTimeVariation) config, tuple(address bridge, address sequencerInbox, address inbox, address outbox, address rollupEventInbox, address challengeManager, address rollupAdminLogic, address rollupUserLogic, address validatorUtils, address validatorWalletCreator) connectedContracts)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)"
    ],
    "0x5efa852e92800D1C982711761e45c3FE39a2b6D8": [
      "constructor(address _owner, uint256 _overhead, uint256 _scalar, bytes32 _batcherHash, uint64 _gasLimit, address _unsafeBlockSigner, tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee) _config)",
      "event ConfigUpdate(uint256 indexed version, uint8 indexed updateType, bytes data)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function UNSAFE_BLOCK_SIGNER_SLOT() view returns (bytes32)",
      "function VERSION() view returns (uint256)",
      "function batcherHash() view returns (bytes32)",
      "function gasLimit() view returns (uint64)",
      "function initialize(address _owner, uint256 _overhead, uint256 _scalar, bytes32 _batcherHash, uint64 _gasLimit, address _unsafeBlockSigner, tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee) _config)",
      "function minimumGasLimit() view returns (uint64)",
      "function overhead() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function resourceConfig() view returns (tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee))",
      "function scalar() view returns (uint256)",
      "function setBatcherHash(bytes32 _batcherHash)",
      "function setGasConfig(uint256 _overhead, uint256 _scalar)",
      "function setGasLimit(uint64 _gasLimit)",
      "function setResourceConfig(tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee) _config)",
      "function setUnsafeBlockSigner(address _unsafeBlockSigner)",
      "function transferOwnership(address newOwner)",
      "function unsafeBlockSigner() view returns (address)",
      "function version() view returns (string)"
    ],
    "0x6369F971fd1f1f230B8584151Ed7747FF710Cc68": [
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error SwapAdminFacet__disableSwap_alreadyDisabled()",
      "error SwapAdminFacet__disableSwap_notInitialized()",
      "error SwapAdminFacet__initializeSwap_aExceedMax()",
      "error SwapAdminFacet__initializeSwap_adminFeeExceedMax()",
      "error SwapAdminFacet__initializeSwap_alreadyInitialized()",
      "error SwapAdminFacet__initializeSwap_decimalsMismatch()",
      "error SwapAdminFacet__initializeSwap_duplicateTokens()",
      "error SwapAdminFacet__initializeSwap_failedInitLpTokenClone()",
      "error SwapAdminFacet__initializeSwap_feeExceedMax()",
      "error SwapAdminFacet__initializeSwap_invalidPooledTokens()",
      "error SwapAdminFacet__initializeSwap_tokenDecimalsExceedMax()",
      "error SwapAdminFacet__initializeSwap_zeroTokenAddress()",
      "error SwapAdminFacet__removeSwap_delayNotElapsed()",
      "error SwapAdminFacet__removeSwap_notDisabledPool()",
      "error SwapAdminFacet__removeSwap_notInitialized()",
      "error SwapAdminFacet__updateLpTokenTarget_invalidNewAddress()",
      "event AdminFeesSet(bytes32 indexed key, uint256 newAdminFee, address caller)",
      "event AdminFeesWithdrawn(bytes32 indexed key, address caller)",
      "event LPTokenTargetUpdated(address oldAddress, address newAddress, address caller)",
      "event RampAStarted(bytes32 indexed key, uint256 futureA, uint256 futureTime, address caller)",
      "event RampAStopped(bytes32 indexed key, address caller)",
      "event SwapDisabled(bytes32 indexed key, address caller)",
      "event SwapFeesSet(bytes32 indexed key, uint256 newSwapFee, address caller)",
      "event SwapInitialized(bytes32 indexed key, tuple(bytes32 key, uint256 initialA, uint256 futureA, uint256 initialATime, uint256 futureATime, uint256 swapFee, uint256 adminFee, address lpToken, address[] pooledTokens, uint256[] tokenPrecisionMultipliers, uint256[] balances, uint256[] adminFees, bool disabled, uint256 removeTime) swap, address caller)",
      "event SwapRemoved(bytes32 indexed key, address caller)",
      "function disableSwap(bytes32 _key)",
      "function initializeSwap(bytes32 _key, address[] _pooledTokens, uint8[] decimals, string lpTokenName, string lpTokenSymbol, uint256 _a, uint256 _fee, uint256 _adminFee)",
      "function isDisabled(bytes32 key) view returns (bool)",
      "function lpTokenTargetAddress() view returns (address)",
      "function rampA(bytes32 key, uint256 futureA, uint256 futureTime)",
      "function removeSwap(bytes32 _key)",
      "function setSwapAdminFee(bytes32 key, uint256 newAdminFee)",
      "function setSwapFee(bytes32 key, uint256 newSwapFee)",
      "function stopRampA(bytes32 key)",
      "function updateLpTokenTarget(address newAddress)",
      "function withdrawSwapAdminFees(bytes32 key)"
    ],
    "0x72f193d0F305F532C87a4B9D0A2F407a3F4f585f": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)",
      "event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)",
      "event NodeRejected(uint64 indexed nodeNum)",
      "event OwnerFunctionCalled(uint256 indexed id)",
      "event Paused(address account)",
      "event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)",
      "event RollupInitialized(bytes32 machineHash, uint256 chainId)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "function _stakerMap(address) view returns (uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)",
      "function amountStaked(address staker) view returns (uint256)",
      "function baseStake() view returns (uint256)",
      "function bridge() view returns (address)",
      "function chainId() view returns (uint256)",
      "function challengeManager() view returns (address)",
      "function confirmPeriodBlocks() view returns (uint64)",
      "function createNitroMigrationGenesis(tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion)",
      "function currentChallenge(address staker) view returns (uint64)",
      "function extraChallengeTimeBlocks() view returns (uint64)",
      "function firstUnresolvedNode() view returns (uint64)",
      "function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot)",
      "function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 expectedNodeHash)",
      "function forceRefundStaker(address[] staker)",
      "function forceResolveChallenge(address[] stakerA, address[] stakerB)",
      "function getNode(uint64 nodeNum) view returns (tuple(bytes32 stateHash, bytes32 challengeHash, bytes32 confirmData, uint64 prevNum, uint64 deadlineBlock, uint64 noChildConfirmedBeforeBlock, uint64 stakerCount, uint64 childStakerCount, uint64 firstChildBlock, uint64 latestChildNumber, uint64 createdAtBlock, bytes32 nodeHash))",
      "function getStaker(address staker) view returns (tuple(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked))",
      "function getStakerAddress(uint64 stakerNum) view returns (address)",
      "function inbox() view returns (address)",
      "function initialize(tuple(uint64 confirmPeriodBlocks, uint64 extraChallengeTimeBlocks, address stakeToken, uint256 baseStake, bytes32 wasmModuleRoot, address owner, address loserStakeEscrow, uint256 chainId, uint64 genesisBlockNum, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) sequencerInboxMaxTimeVariation) config, tuple(address bridge, address sequencerInbox, address inbox, address outbox, address rollupEventInbox, address challengeManager, address rollupAdminLogic, address rollupUserLogic, address validatorUtils, address validatorWalletCreator) connectedContracts)",
      "function isStaked(address staker) view returns (bool)",
      "function isStakedOnLatestConfirmed(address staker) view returns (bool)",
      "function isValidator(address) view returns (bool)",
      "function isZombie(address staker) view returns (bool)",
      "function lastStakeBlock() view returns (uint64)",
      "function latestConfirmed() view returns (uint64)",
      "function latestNodeCreated() view returns (uint64)",
      "function latestStakedNode(address staker) view returns (uint64)",
      "function loserStakeEscrow() view returns (address)",
      "function minimumAssertionPeriod() view returns (uint256)",
      "function nodeHasStaker(uint64 nodeNum, address staker) view returns (bool)",
      "function outbox() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function removeOldOutbox(address _outbox)",
      "function resume()",
      "function rollupDeploymentBlock() view returns (uint256)",
      "function rollupEventInbox() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function setBaseStake(uint256 newBaseStake)",
      "function setConfirmPeriodBlocks(uint64 newConfirmPeriod)",
      "function setDelayedInbox(address _inbox, bool _enabled)",
      "function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks)",
      "function setInbox(address newInbox)",
      "function setLoserStakeEscrow(address newLoserStakerEscrow)",
      "function setMinimumAssertionPeriod(uint256 newPeriod)",
      "function setOutbox(address _outbox)",
      "function setOwner(address newOwner)",
      "function setSequencerInbox(address _sequencerInbox)",
      "function setStakeToken(address newStakeToken)",
      "function setValidator(address[] _validator, bool[] _val)",
      "function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled)",
      "function setWasmModuleRoot(bytes32 newWasmModuleRoot)",
      "function stakeToken() view returns (address)",
      "function stakerCount() view returns (uint64)",
      "function totalWithdrawableFunds() view returns (uint256)",
      "function upgradeBeacon(address beacon, address newImplementation)",
      "function upgradeSecondaryTo(address newImplementation)",
      "function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function validatorUtils() view returns (address)",
      "function validatorWalletCreator() view returns (address)",
      "function validatorWhitelistDisabled() view returns (bool)",
      "function wasmModuleRoot() view returns (bytes32)",
      "function withdrawableFunds(address user) view returns (uint256)",
      "function zombieAddress(uint256 zombieNum) view returns (address)",
      "function zombieCount() view returns (uint256)",
      "function zombieLatestStakedNode(uint256 zombieNum) view returns (uint64)"
    ],
    "0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352": [
      "error AssetLogic__getConfig_notRegistered()",
      "error AssetLogic__getTokenIndexFromStableSwapPool_notExist()",
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error PortalFacet__repayAavePortalFor_invalidAsset()",
      "error PortalFacet__repayAavePortalFor_zeroAmount()",
      "error PortalFacet__repayAavePortal_assetNotApproved()",
      "error PortalFacet__repayAavePortal_insufficientFunds()",
      "error PortalFacet__setAavePortalFee_invalidFee()",
      "event AavePoolUpdated(address updated, address caller)",
      "event AavePortalFeeUpdated(uint256 updated, address caller)",
      "event AavePortalRepayment(bytes32 indexed transferId, address asset, uint256 amount, uint256 fee, address caller)",
      "function aavePool() view returns (address)",
      "function aavePortalFee() view returns (uint256)",
      "function getAavePortalDebt(bytes32 _transferId) view returns (uint256)",
      "function getAavePortalFeeDebt(bytes32 _transferId) view returns (uint256)",
      "function repayAavePortal(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, uint256 _backingAmount, uint256 _feeAmount, uint256 _maxIn)",
      "function repayAavePortalFor(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, address _portalAsset, uint256 _backingAmount, uint256 _feeAmount) payable",
      "function setAavePool(address _aavePool)",
      "function setAavePortalFee(uint256 _aavePortalFeeNumerator)"
    ],
    "0x79e6E0242405A66B2dd8B96DEd3b2F0216Fd417d": [
      "constructor()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event WatcherAdded(address watcher)",
      "event WatcherRemoved(address watcher)",
      "function acceptProposedOwner()",
      "function addWatcher(address _watcher)",
      "function delay() view returns (uint256)",
      "function isWatcher(address) view returns (bool)",
      "function owner() view returns (address)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function removeWatcher(address _watcher)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)"
    ],
    "0x7A0a53847776f7e94Cc35742971aCb2217b0Db81": [
      "constructor(address implementation, bytes initData)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x7b292034084A41B9D441B71b6E3557Edd0463fa8": [
      "constructor(address _finderAddress, uint256 _startingId)",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event EmergencyExecution(address indexed to, uint256 value, bytes data)",
      "event NewProposal(uint256 indexed id, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event ProposalExecuted(uint256 indexed id, uint256 transactionIndex)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function addMember(uint256 roleId, address newMember)",
      "function emergencyExecute(tuple(address to, uint256 value, bytes data) transaction) payable",
      "function executeProposal(uint256 id, uint256 transactionIndex) payable",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getMember(uint256 roleId) view returns (address)",
      "function getProposal(uint256 id) view returns (tuple(tuple(address to, uint256 value, bytes data)[] transactions, uint256 requestTime, bytes ancillaryData))",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numProposals() view returns (uint256)",
      "function proposals(uint256) view returns (uint256 requestTime, bytes ancillaryData)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions, bytes ancillaryData)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)"
    ],
    "0x7D2596D7E44b0990611d390Fbb0Bd24e64845694": [
      "constructor(address _upgradeBeacon, bytes _initializationCalldata) payable"
    ],
    "0x806421D09cDb253aa9d128a658e60c0B95eFFA01": [
      "error AlreadyInit()",
      "error HadZeroInit()",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "function bridge() view returns (address)",
      "function initialize(address _bridge)",
      "function rollup() view returns (address)",
      "function rollupInitialized(uint256 chainId)"
    ],
    "0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a": [
      "constructor(address _masterCopy)"
    ],
    "0x82B67a43b69914E611710C62e629dAbB2f7AC6AB": [
      "function transactionHash() view returns (bytes32)",
      "function sourceChainId() view returns (uint256)",
      "function relayedMessages(bytes32 _txHash) view returns (bool)",
      "function safeExecuteSignaturesWithAutoGasLimit(bytes _data, bytes _signatures)",
      "function initialize(uint256 _sourceChainId, uint256 _destinationChainId, address _validatorContract, uint256 _maxGasPerTx, uint256 _gasPrice, uint256 _requiredBlockConfirmations, address _owner) returns (bool)",
      "function isInitialized() view returns (bool)",
      "function requiredBlockConfirmations() view returns (uint256)",
      "function executeSignatures(bytes _data, bytes _signatures)",
      "function failedMessageReceiver(bytes32 _messageId) view returns (address)",
      "function getBridgeMode() pure returns (bytes4 _data)",
      "function setChainIds(uint256 _sourceChainId, uint256 _destinationChainId)",
      "function failedMessageSender(bytes32 _messageId) view returns (address)",
      "function allowReentrantRequests() view returns (bool)",
      "function messageId() view returns (bytes32 id)",
      "function claimTokens(address _token, address _to)",
      "function setMaxGasPerTx(uint256 _maxGasPerTx)",
      "function requiredSignatures() view returns (uint256)",
      "function owner() view returns (address)",
      "function validatorContract() view returns (address)",
      "function deployedAtBlock() view returns (uint256)",
      "function getBridgeInterfacesVersion() pure returns (uint64 major, uint64 minor, uint64 patch)",
      "function messageSourceChainId() view returns (uint256 id)",
      "function setRequiredBlockConfirmations(uint256 _blockConfirmations)",
      "function destinationChainId() view returns (uint256)",
      "function setGasPrice(uint256 _gasPrice)",
      "function setAllowReentrantRequests(bool _enable)",
      "function messageCallStatus(bytes32 _messageId) view returns (bool)",
      "function messageSender() view returns (address sender)",
      "function decimalShift() view returns (int256)",
      "function requireToPassMessage(address _contract, bytes _data, uint256 _gas) returns (bytes32)",
      "function failedMessageDataHash(bytes32 _messageId) view returns (bytes32)",
      "function maxGasPerTx() view returns (uint256)",
      "function safeExecuteSignaturesWithGasLimit(bytes _data, bytes _signatures, uint32 _gas)",
      "function safeExecuteSignatures(bytes _data, bytes _signatures)",
      "function transferOwnership(address newOwner)",
      "function gasPrice() view returns (uint256)",
      "event UserRequestForAffirmation(bytes32 indexed messageId, bytes encodedData)",
      "event RelayedMessage(address indexed sender, address indexed executor, bytes32 indexed messageId, bool status)",
      "event GasPriceChanged(uint256 gasPrice)",
      "event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations)",
      "event OwnershipTransferred(address previousOwner, address newOwner)"
    ],
    "0x83096c7455f24E593aaC9A7c73f849d36d3EEb82": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _outbox, uint256 _maxSubmissionCostCap, uint256 _maxGasCap, uint256 _gasPriceCap)",
      "error Connector__processMessage_notUsed()",
      "error NotCrossChainCall()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasPriceCapUpdated(uint256 _previous, uint256 _updated)",
      "event MaxGasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MaxSubmissionCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RetryableTicketCreated(uint256 indexed ticketId)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasPriceCap() view returns (uint256)",
      "function maxGasCap() view returns (uint256)",
      "function maxSubmissionCostCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function outbox() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(uint64 _nodeNum, bytes32 _sendRoot, bytes32 _blockHash, bytes32[] _proof, uint256 _index, tuple(address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes callData) _message)",
      "function processed(uint256) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function rollup() view returns (address)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasPriceCap(uint256 _updated)",
      "function setMaxGasCap(uint256 _updated)",
      "function setMaxSubmissionCostCap(uint256 _updated)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x86f0cf42Ad673B3D666d103E009EC142D1298a17": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UpgradeExecuted(address indexed upgrade, uint256 value, bytes data)",
      "function ADMIN_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function execute(address upgrade, bytes upgradeCallData) payable",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address[] executors)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6": [
      "constructor(address _contractOwner, tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, tuple(address initContract, bytes initData)[] _initializations) payable"
    ],
    "0x90995DBd1aae85872451b50A569dE947D34ac4ee": [
      "constructor(address wormhole)",
      "error ChainAlreadyRegistered(uint16 chainId, bytes32 registeredWormholeRelayerContract)",
      "error ContractUpgradeFailed(bytes failure)",
      "error DeliveryProviderCannotReceivePayment()",
      "error DeliveryProviderDoesNotSupportMessageKeyType(uint8 keyType)",
      "error DeliveryProviderDoesNotSupportTargetChain(address relayer, uint16 chainId)",
      "error GovernanceActionAlreadyConsumed(bytes32 hash)",
      "error InsufficientRelayerFunds(uint256 msgValue, uint256 minimum)",
      "error InvalidDefaultDeliveryProvider(bytes32 defaultDeliveryProvider)",
      "error InvalidDeliveryVaa(string reason)",
      "error InvalidEmitter(bytes32 emitter, bytes32 registered, uint16 chainId)",
      "error InvalidFork()",
      "error InvalidGovernanceChainId(uint16 parsed, uint16 expected)",
      "error InvalidGovernanceContract(bytes32 parsed, bytes32 expected)",
      "error InvalidGovernanceVM(string reason)",
      "error InvalidMsgValue(uint256 msgValue, uint256 totalFee)",
      "error InvalidOverrideGasLimit()",
      "error InvalidOverrideReceiverValue()",
      "error InvalidPayloadAction(uint8 parsed, uint8 expected)",
      "error InvalidPayloadChainId(uint16 parsed, uint16 expected)",
      "error InvalidPayloadId(uint8 parsed, uint8 expected)",
      "error InvalidPayloadLength(uint256 received, uint256 expected)",
      "error InvalidPayloadModule(bytes32 parsed, bytes32 expected)",
      "error MessageKeysLengthDoesNotMatchMessagesLength(uint256 keys, uint256 vaas)",
      "error NotAnEvmAddress(bytes32)",
      "error ReentrantDelivery(address msgSender, address lockedBy)",
      "error TargetChainIsNotThisChain(uint16 targetChain)",
      "error TooManyMessageKeys(uint256 numMessageKeys)",
      "error UnexpectedExecutionInfoVersion(uint8 version, uint8 expectedVersion)",
      "error VaaKeysDoNotMatchVaas(uint8 index)",
      "error VersionMismatchOverride(uint8 instructionVersion, uint8 overrideVersion)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ContractUpgraded(address indexed oldContract, address indexed newContract)",
      "event Delivery(address indexed recipientContract, uint16 indexed sourceChain, uint64 indexed sequence, bytes32 deliveryVaaHash, uint8 status, uint256 gasUsed, uint8 refundStatus, bytes additionalStatusInfo, bytes overridesInfo)",
      "event SendEvent(uint64 indexed sequence, uint256 deliveryQuote, uint256 paymentForExtraReceiverValue)",
      "event Upgraded(address indexed implementation)",
      "function checkAndExecuteUpgradeMigration()",
      "function deliver(bytes[] encodedVMs, bytes encodedDeliveryVAA, address relayerRefundAddress, bytes deliveryOverrides) payable",
      "function deliveryAttempted(bytes32 deliveryHash) view returns (bool attempted)",
      "function deliveryFailureBlock(bytes32 deliveryHash) view returns (uint256 blockNumber)",
      "function deliverySuccessBlock(bytes32 deliveryHash) view returns (uint256 blockNumber)",
      "function forward(uint16 targetChain, bytes32 targetAddress, bytes payload, uint256 receiverValue, uint256, bytes encodedExecutionParameters, uint16 refundChain, bytes32 refundAddress, address deliveryProviderAddress, tuple(uint16 chainId, bytes32 emitterAddress, uint64 sequence)[] vaaKeys, uint8 consistencyLevel) payable",
      "function forwardPayloadToEvm(uint16 targetChain, address targetAddress, bytes payload, uint256 receiverValue, uint256 gasLimit) payable",
      "function forwardToEvm(uint16 targetChain, address targetAddress, bytes payload, uint256 receiverValue, uint256 paymentForExtraReceiverValue, uint256 gasLimit, uint16 refundChain, address refundAddress, address deliveryProviderAddress, tuple(uint16 chainId, bytes32 emitterAddress, uint64 sequence)[] vaaKeys, uint8 consistencyLevel) payable",
      "function forwardVaasToEvm(uint16 targetChain, address targetAddress, bytes payload, uint256 receiverValue, uint256 gasLimit, tuple(uint16 chainId, bytes32 emitterAddress, uint64 sequence)[] vaaKeys) payable",
      "function getDefaultDeliveryProvider() view returns (address deliveryProvider)",
      "function getRegisteredWormholeRelayerContract(uint16 chainId) view returns (bytes32)",
      "function initialize(address defaultDeliveryProvider)",
      "function quoteDeliveryPrice(uint16 targetChain, uint256 receiverValue, bytes encodedExecutionParameters, address deliveryProviderAddress) view returns (uint256 nativePriceQuote, bytes encodedExecutionInfo)",
      "function quoteEVMDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit, address deliveryProviderAddress) view returns (uint256 nativePriceQuote, uint256 targetChainRefundPerGasUnused)",
      "function quoteEVMDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 nativePriceQuote, uint256 targetChainRefundPerGasUnused)",
      "function quoteNativeForChain(uint16 targetChain, uint256 currentChainAmount, address deliveryProviderAddress) view returns (uint256 targetChainAmount)",
      "function registerWormholeRelayerContract(bytes encodedVm)",
      "function resend(tuple(uint16 chainId, bytes32 emitterAddress, uint64 sequence) deliveryVaaKey, uint16 targetChain, uint256 newReceiverValue, bytes newEncodedExecutionParameters, address newDeliveryProviderAddress) payable returns (uint64 sequence)",
      "function resendToEvm(tuple(uint16 chainId, bytes32 emitterAddress, uint64 sequence) deliveryVaaKey, uint16 targetChain, uint256 newReceiverValue, uint256 newGasLimit, address newDeliveryProviderAddress) payable returns (uint64 sequence)",
      "function send(uint16 targetChain, bytes32 targetAddress, bytes payload, uint256 receiverValue, uint256 paymentForExtraReceiverValue, bytes encodedExecutionParameters, uint16 refundChain, bytes32 refundAddress, address deliveryProviderAddress, tuple(uint16 chainId, bytes32 emitterAddress, uint64 sequence)[] vaaKeys, uint8 consistencyLevel) payable returns (uint64 sequence)",
      "function send(uint16 targetChain, bytes32 targetAddress, bytes payload, uint256 receiverValue, uint256 paymentForExtraReceiverValue, bytes encodedExecutionParameters, uint16 refundChain, bytes32 refundAddress, address deliveryProviderAddress, tuple(uint8 keyType, bytes encodedKey)[] messageKeys, uint8 consistencyLevel) payable returns (uint64 sequence)",
      "function sendPayloadToEvm(uint16 targetChain, address targetAddress, bytes payload, uint256 receiverValue, uint256 gasLimit, uint16 refundChain, address refundAddress) payable returns (uint64 sequence)",
      "function sendPayloadToEvm(uint16 targetChain, address targetAddress, bytes payload, uint256 receiverValue, uint256 gasLimit) payable returns (uint64 sequence)",
      "function sendToEvm(uint16 targetChain, address targetAddress, bytes payload, uint256 receiverValue, uint256 paymentForExtraReceiverValue, uint256 gasLimit, uint16 refundChain, address refundAddress, address deliveryProviderAddress, tuple(uint16 chainId, bytes32 emitterAddress, uint64 sequence)[] vaaKeys, uint8 consistencyLevel) payable returns (uint64 sequence)",
      "function sendToEvm(uint16 targetChain, address targetAddress, bytes payload, uint256 receiverValue, uint256 paymentForExtraReceiverValue, uint256 gasLimit, uint16 refundChain, address refundAddress, address deliveryProviderAddress, tuple(uint8 keyType, bytes encodedKey)[] messageKeys, uint8 consistencyLevel) payable returns (uint64 sequence)",
      "function sendVaasToEvm(uint16 targetChain, address targetAddress, bytes payload, uint256 receiverValue, uint256 gasLimit, tuple(uint16 chainId, bytes32 emitterAddress, uint64 sequence)[] vaaKeys) payable returns (uint64 sequence)",
      "function sendVaasToEvm(uint16 targetChain, address targetAddress, bytes payload, uint256 receiverValue, uint256 gasLimit, tuple(uint16 chainId, bytes32 emitterAddress, uint64 sequence)[] vaaKeys, uint16 refundChain, address refundAddress) payable returns (uint64 sequence)",
      "function setDefaultDeliveryProvider(bytes encodedVm)",
      "function submitContractUpgrade(bytes encodedVm)"
    ],
    "0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748": [
      "constructor(address _token, uint256 _quorum, address _governor, address _executor, uint64 _minimumWaitTime)",
      "event EmergencyProposalExecuted(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event EmergencyProposalRemoved(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event EmergencyProposalSlashed(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event EmergencyTransactionsProposed(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event ExecutorSet(address executor)",
      "event MinimumWaitTimeSet(uint256 minimumWaitTime)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QuorumSet(uint256 quorum)",
      "function emergencyProposals(uint256) view returns (address sender, uint64 expiryTime, uint256 lockedTokens)",
      "function emergencyPropose(tuple(address to, uint256 value, bytes data)[] transactions) returns (uint256)",
      "function executeEmergencyProposal(uint256 id) payable",
      "function executor() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function governor() view returns (address)",
      "function minimumWaitTime() view returns (uint64)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function owner() view returns (address)",
      "function quorum() view returns (uint256)",
      "function removeProposal(uint256 id)",
      "function renounceOwnership()",
      "function setExecutor(address newExecutor)",
      "function setMinimumWaitTime(uint64 newMinimumWaitTime)",
      "function setQuorum(uint256 newQuorum)",
      "function slashProposal(uint256 id)",
      "function token() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x960953f7c69cd2BC2322Db9223A815C680ccc7ea": [
      "constructor()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event TemplateUpdated()",
      "event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)",
      "function createWallet(address[] initialExecutorAllowedDests) returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setTemplate(address _template)",
      "function template() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686": [
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error StableSwapFacet__deadlineCheck_deadlineNotMet()",
      "error StableSwapFacet__getSwapTokenBalance_indexOutOfRange()",
      "error StableSwapFacet__getSwapTokenIndex_notExist()",
      "error StableSwapFacet__getSwapToken_outOfRange()",
      "event AddLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
      "event NewAdminFee(bytes32 indexed key, uint256 newAdminFee)",
      "event NewSwapFee(bytes32 indexed key, uint256 newSwapFee)",
      "event RemoveLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply)",
      "event RemoveLiquidityImbalance(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
      "event RemoveLiquidityOne(bytes32 indexed key, address indexed provider, uint256 lpTokenAmount, uint256 lpTokenSupply, uint256 boughtId, uint256 tokensBought)",
      "event TokenSwap(bytes32 indexed key, address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId)",
      "function addSwapLiquidity(bytes32 key, uint256[] amounts, uint256 minToMint, uint256 deadline) returns (uint256)",
      "function calculateRemoveSwapLiquidity(bytes32 key, uint256 amount) view returns (uint256[])",
      "function calculateRemoveSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex) view returns (uint256 availableTokenAmount)",
      "function calculateSwap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) view returns (uint256)",
      "function calculateSwapTokenAmount(bytes32 key, uint256[] amounts, bool deposit) view returns (uint256)",
      "function getSwapA(bytes32 key) view returns (uint256)",
      "function getSwapAPrecise(bytes32 key) view returns (uint256)",
      "function getSwapAdminBalance(bytes32 key, uint256 index) view returns (uint256)",
      "function getSwapLPToken(bytes32 key) view returns (address)",
      "function getSwapStorage(bytes32 key) view returns (tuple(bytes32 key, uint256 initialA, uint256 futureA, uint256 initialATime, uint256 futureATime, uint256 swapFee, uint256 adminFee, address lpToken, address[] pooledTokens, uint256[] tokenPrecisionMultipliers, uint256[] balances, uint256[] adminFees, bool disabled, uint256 removeTime))",
      "function getSwapToken(bytes32 key, uint8 index) view returns (address)",
      "function getSwapTokenBalance(bytes32 key, uint8 index) view returns (uint256)",
      "function getSwapTokenIndex(bytes32 key, address tokenAddress) view returns (uint8)",
      "function getSwapVirtualPrice(bytes32 key) view returns (uint256)",
      "function removeSwapLiquidity(bytes32 key, uint256 amount, uint256[] minAmounts, uint256 deadline) returns (uint256[])",
      "function removeSwapLiquidityImbalance(bytes32 key, uint256[] amounts, uint256 maxBurnAmount, uint256 deadline) returns (uint256)",
      "function removeSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex, uint256 minAmount, uint256 deadline) returns (uint256)",
      "function swap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) returns (uint256)",
      "function swapExact(bytes32 key, uint256 amountIn, address assetIn, address assetOut, uint256 minAmountOut, uint256 deadline) returns (uint256)",
      "function swapExactOut(bytes32 key, uint256 amountOut, address assetIn, address assetOut, uint256 maxAmountIn, uint256 deadline) returns (uint256)"
    ],
    "0x9BA6e03D8B90dE867373Db8cF1A58d2F7F006b3A": [
      "constructor(address _masterCopy)"
    ],
    "0x9E40625F52829Cf04bC4839F186D621ee33b0E67": [
      "function areUnresolvedNodesLinear(address rollup) view returns (bool)",
      "function checkDecidableNextNode(address rollup) view returns (uint8)",
      "function findNodeConflict(address rollup, uint64 node1, uint64 node2, uint256 maxDepth) view returns (tuple(uint8 ty, uint64 node1, uint64 node2))",
      "function findStakerConflict(address rollup, address staker1, address staker2, uint256 maxDepth) view returns (tuple(uint8 ty, uint64 node1, uint64 node2))",
      "function getStakers(address rollup, uint64 startIndex, uint64 max) view returns (address[], bool hasMore)",
      "function latestStaked(address rollup, address staker) view returns (uint64, tuple(bytes32 stateHash, bytes32 challengeHash, bytes32 confirmData, uint64 prevNum, uint64 deadlineBlock, uint64 noChildConfirmedBeforeBlock, uint64 stakerCount, uint64 childStakerCount, uint64 firstChildBlock, uint64 latestChildNumber, uint64 createdAtBlock, bytes32 nodeHash))",
      "function refundableStakers(address rollup) view returns (address[])",
      "function requireConfirmable(address rollup) view",
      "function requireRejectable(address rollup) view",
      "function stakedNodes(address rollup, address staker) view returns (uint64[])",
      "function timedOutChallenges(address rollup, uint64 startIndex, uint64 max) view returns (uint64[], bool hasMore)"
    ],
    "0xA0Ed0562629D45B88A34a342f20dEb58c46C15ff": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)",
      "event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)",
      "event NodeRejected(uint64 indexed nodeNum)",
      "event Paused(address account)",
      "event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)",
      "event RollupInitialized(bytes32 machineHash, uint256 chainId)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "function VALIDATOR_AFK_BLOCKS() view returns (uint256)",
      "function _stakerMap(address) view returns (uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)",
      "function addToDeposit(address stakerAddress) payable",
      "function amountStaked(address staker) view returns (uint256)",
      "function baseStake() view returns (uint256)",
      "function bridge() view returns (address)",
      "function chainId() view returns (uint256)",
      "function challengeManager() view returns (address)",
      "function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker)",
      "function confirmNextNode(bytes32 blockHash, bytes32 sendRoot)",
      "function confirmPeriodBlocks() view returns (uint64)",
      "function countStakedZombies(uint64 nodeNum) view returns (uint256)",
      "function countZombiesStakedOnChildren(uint64 nodeNum) view returns (uint256)",
      "function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals)[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots)",
      "function currentChallenge(address staker) view returns (uint64)",
      "function currentRequiredStake() view returns (uint256)",
      "function extraChallengeTimeBlocks() view returns (uint64)",
      "function firstUnresolvedNode() view returns (uint64)",
      "function getNode(uint64 nodeNum) view returns (tuple(bytes32 stateHash, bytes32 challengeHash, bytes32 confirmData, uint64 prevNum, uint64 deadlineBlock, uint64 noChildConfirmedBeforeBlock, uint64 stakerCount, uint64 childStakerCount, uint64 firstChildBlock, uint64 latestChildNumber, uint64 createdAtBlock, bytes32 nodeHash))",
      "function getStaker(address staker) view returns (tuple(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked))",
      "function getStakerAddress(uint64 stakerNum) view returns (address)",
      "function inbox() view returns (address)",
      "function initialize(address _stakeToken) view",
      "function isERC20Enabled() view returns (bool)",
      "function isStaked(address staker) view returns (bool)",
      "function isStakedOnLatestConfirmed(address staker) view returns (bool)",
      "function isValidator(address) view returns (bool)",
      "function isZombie(address staker) view returns (bool)",
      "function lastStakeBlock() view returns (uint64)",
      "function latestConfirmed() view returns (uint64)",
      "function latestNodeCreated() view returns (uint64)",
      "function latestStakedNode(address staker) view returns (uint64)",
      "function loserStakeEscrow() view returns (address)",
      "function minimumAssertionPeriod() view returns (uint256)",
      "function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable",
      "function newStakeOnNewNode(tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable",
      "function nodeHasStaker(uint64 nodeNum, address staker) view returns (bool)",
      "function outbox() view returns (address)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function reduceDeposit(uint256 target)",
      "function rejectNextNode(address stakerAddress)",
      "function removeOldZombies(uint256 startIndex)",
      "function removeWhitelistAfterFork()",
      "function removeWhitelistAfterValidatorAfk()",
      "function removeZombie(uint256 zombieNum, uint256 maxNodes)",
      "function requireUnresolved(uint256 nodeNum) view",
      "function requireUnresolvedExists() view",
      "function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns (uint256)",
      "function returnOldDeposit(address stakerAddress)",
      "function rollupDeploymentBlock() view returns (uint256)",
      "function rollupEventInbox() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash)",
      "function stakeOnNewNode(tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount)",
      "function stakeToken() view returns (address)",
      "function stakerCount() view returns (uint64)",
      "function totalWithdrawableFunds() view returns (uint256)",
      "function validatorUtils() view returns (address)",
      "function validatorWalletCreator() view returns (address)",
      "function validatorWhitelistDisabled() view returns (bool)",
      "function wasmModuleRoot() view returns (bytes32)",
      "function withdrawStakerFunds() returns (uint256)",
      "function withdrawableFunds(address user) view returns (uint256)",
      "function zombieAddress(uint256 zombieNum) view returns (address)",
      "function zombieCount() view returns (uint256)",
      "function zombieLatestStakedNode(uint256 zombieNum) view returns (uint64)"
    ],
    "0xae6B9cDE6191b710F5A18D82f751Ba52B78a99DA": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint256 _gasCap, uint16 _mirrorWormholeChainId)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RefundAddressUpdated(address indexed previous, address indexed updated)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function MIRROR_WORMHOLE_ID() view returns (uint16)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processedWhMessages(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function quoteEVMDeliveryPrice(uint256 _gasLimit, address _amb) view returns (uint256 _cost)",
      "function receiveWormholeMessages(bytes _payload, bytes[], bytes32 _sourceAddress, uint16 _sourceChain, bytes32 _deliveryHash) payable",
      "function refundAddress() view returns (address)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function setRefundAddress(address _updated)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "0xb32c3D0dDb0063FfB15E8a50b40cC62230D820B3": [
      "constructor()",
      "error BlockTimestampError()",
      "error EmptyBlock()",
      "error EmptyBlockDataArray()",
      "error FeePaymentFailed(address recipient)",
      "error FeeTooLow()",
      "error InvalidProof()",
      "error InvalidProofType()",
      "error IsNotPaused(bytes32 pauseType)",
      "error IsPaused(bytes32 pauseType)",
      "error L1L2MessageNotSent(bytes32 messageHash)",
      "error LimitIsZero()",
      "error MemoryOutOfBounds(uint256 inde)",
      "error MessageAlreadyReceived(bytes32 messageHash)",
      "error MessageAlreadySent()",
      "error MessageDoesNotExistOrHasAlreadyBeenClaimed()",
      "error MessageSendingFailed(address destination)",
      "error NotList()",
      "error PeriodIsZero()",
      "error ProofIsEmpty()",
      "error RateLimitExceeded()",
      "error StartingRootHashDoesNotMatch()",
      "error TransactionShort()",
      "error UnknownTransactionType()",
      "error ValueSentTooLow()",
      "error ValueShouldBeGreaterThanFee()",
      "error WrongBytesLength()",
      "error ZeroAddressNotAllowed()",
      "event AmountUsedInPeriodReset(address indexed resettingAddress)",
      "event BlockFinalized(uint256 indexed blockNumber, bytes32 indexed stateRootHash)",
      "event BlocksVerificationDone(uint256 indexed lastBlockFinalized, bytes32 startingRootHash, bytes32 finalRootHash)",
      "event Initialized(uint8 version)",
      "event L1L2MessagesReceivedOnL2(bytes32[] messageHashes)",
      "event L2L1MessageHashAddedToInbox(bytes32 indexed messageHash)",
      "event LimitAmountChanged(address indexed amountChangeBy, uint256 amount, bool amountUsedLoweredToLimit, bool usedAmountResetToZero)",
      "event MessageClaimed(bytes32 indexed _messageHash)",
      "event MessageSent(address indexed _from, address indexed _to, uint256 _fee, uint256 _value, uint256 _nonce, bytes _calldata, bytes32 indexed _messageHash)",
      "event Paused(address messageSender, bytes32 pauseType)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UnPaused(address messageSender, bytes32 pauseType)",
      "event VerifierAddressChanged(address indexed verifierAddress, uint256 indexed proofType, address indexed verifierSetBy)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function GENERAL_PAUSE_TYPE() view returns (bytes32)",
      "function INBOX_STATUS_RECEIVED() view returns (uint8)",
      "function INBOX_STATUS_UNKNOWN() view returns (uint8)",
      "function L1_L2_PAUSE_TYPE() view returns (bytes32)",
      "function L2_L1_PAUSE_TYPE() view returns (bytes32)",
      "function OPERATOR_ROLE() view returns (bytes32)",
      "function OUTBOX_STATUS_RECEIVED() view returns (uint8)",
      "function OUTBOX_STATUS_SENT() view returns (uint8)",
      "function OUTBOX_STATUS_UNKNOWN() view returns (uint8)",
      "function PAUSE_MANAGER_ROLE() view returns (bytes32)",
      "function PROVING_SYSTEM_PAUSE_TYPE() view returns (bytes32)",
      "function RATE_LIMIT_SETTER_ROLE() view returns (bytes32)",
      "function claimMessage(address _from, address _to, uint256 _fee, uint256 _value, address _feeRecipient, bytes _calldata, uint256 _nonce)",
      "function currentL2BlockNumber() view returns (uint256)",
      "function currentPeriodAmountInWei() view returns (uint256)",
      "function currentPeriodEnd() view returns (uint256)",
      "function currentTimestamp() view returns (uint256)",
      "function finalizeBlocks(tuple(bytes32 blockRootHash, uint32 l2BlockTimestamp, bytes[] transactions, bytes32[] l2ToL1MsgHashes, bytes fromAddresses, uint16[] batchReceptionIndices)[] _blocksData, bytes _proof, uint256 _proofType, bytes32 _parentStateRootHash)",
      "function finalizeBlocksWithoutProof(tuple(bytes32 blockRootHash, uint32 l2BlockTimestamp, bytes[] transactions, bytes32[] l2ToL1MsgHashes, bytes fromAddresses, uint16[] batchReceptionIndices)[] _blocksData)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function inboxL2L1MessageStatus(bytes32) view returns (uint256)",
      "function initialize(bytes32 _initialStateRootHash, uint256 _initialL2BlockNumber, address _defaultVerifier, address _securityCouncil, address[] _operators, uint256 _rateLimitPeriodInSeconds, uint256 _rateLimitAmountInWei)",
      "function limitInWei() view returns (uint256)",
      "function nextMessageNumber() view returns (uint256)",
      "function outboxL1L2MessageStatus(bytes32) view returns (uint256)",
      "function pauseByType(bytes32 _pauseType)",
      "function pauseTypeStatuses(bytes32) view returns (bool)",
      "function periodInSeconds() view returns (uint256)",
      "function renounceRole(bytes32 role, address account)",
      "function resetAmountUsedInPeriod()",
      "function resetRateLimitAmount(uint256 _amount)",
      "function revokeRole(bytes32 role, address account)",
      "function sendMessage(address _to, uint256 _fee, bytes _calldata) payable",
      "function sender() view returns (address)",
      "function setVerifierAddress(address _newVerifierAddress, uint256 _proofType)",
      "function stateRootHashes(uint256) view returns (bytes32)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unPauseByType(bytes32 _pauseType)",
      "function verifiers(uint256) view returns (address)"
    ],
    "0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D": [
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error RoutersFacet__acceptProposedRouterOwner_badCaller()",
      "error RoutersFacet__acceptProposedRouterOwner_notElapsed()",
      "error RoutersFacet__addLiquidityForRouter_amountIsZero()",
      "error RoutersFacet__addLiquidityForRouter_badRouter()",
      "error RoutersFacet__addLiquidityForRouter_capReached()",
      "error RoutersFacet__addLiquidityForRouter_routerEmpty()",
      "error RoutersFacet__approveRouterForPortal_alreadyApproved()",
      "error RoutersFacet__approveRouterForPortal_notAdded()",
      "error RoutersFacet__approveRouter_alreadyAdded()",
      "error RoutersFacet__approveRouter_routerEmpty()",
      "error RoutersFacet__initializeRouter_configNotEmpty()",
      "error RoutersFacet__onlyRouterOwner_notRouterOwner()",
      "error RoutersFacet__proposeRouterOwner_badRouter()",
      "error RoutersFacet__proposeRouterOwner_notNewOwner()",
      "error RoutersFacet__removeRouterLiquidityFor_notOwner()",
      "error RoutersFacet__removeRouterLiquidity_amountIsZero()",
      "error RoutersFacet__removeRouterLiquidity_insufficientFunds()",
      "error RoutersFacet__removeRouterLiquidity_recipientEmpty()",
      "error RoutersFacet__setLiquidityFeeNumerator_tooLarge()",
      "error RoutersFacet__setLiquidityFeeNumerator_tooSmall()",
      "error RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer()",
      "error RoutersFacet__setRouterOwner_noChange()",
      "error RoutersFacet__setRouterRecipient_notNewRecipient()",
      "error RoutersFacet__unapproveRouterForPortal_notApproved()",
      "error RoutersFacet__unapproveRouter_notAdded()",
      "error RoutersFacet__unapproveRouter_routerEmpty()",
      "event LiquidityFeeNumeratorUpdated(uint256 liquidityFeeNumerator, address caller)",
      "event MaxRoutersPerTransferUpdated(uint256 maxRoutersPerTransfer, address caller)",
      "event RouterAdded(address indexed router, address caller)",
      "event RouterApprovedForPortal(address router, address caller)",
      "event RouterInitialized(address indexed router)",
      "event RouterLiquidityAdded(address indexed router, address local, bytes32 key, uint256 amount, address caller)",
      "event RouterLiquidityRemoved(address indexed router, address to, address local, bytes32 key, uint256 amount, address caller)",
      "event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner)",
      "event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed)",
      "event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient)",
      "event RouterRemoved(address indexed router, address caller)",
      "event RouterUnapprovedForPortal(address router, address caller)",
      "function LIQUIDITY_FEE_DENOMINATOR() pure returns (uint256)",
      "function LIQUIDITY_FEE_NUMERATOR() view returns (uint256)",
      "function acceptProposedRouterOwner(address _router)",
      "function addRouterLiquidity(uint256 _amount, address _local) payable",
      "function addRouterLiquidityFor(uint256 _amount, address _local, address _router) payable",
      "function approveRouter(address _router)",
      "function approveRouterForPortal(address _router)",
      "function getProposedRouterOwner(address _router) view returns (address)",
      "function getProposedRouterOwnerTimestamp(address _router) view returns (uint256)",
      "function getRouterApproval(address _router) view returns (bool)",
      "function getRouterApprovalForPortal(address _router) view returns (bool)",
      "function getRouterOwner(address _router) view returns (address)",
      "function getRouterRecipient(address _router) view returns (address)",
      "function initializeRouter(address _owner, address _recipient)",
      "function maxRoutersPerTransfer() view returns (uint256)",
      "function proposeRouterOwner(address _router, address _proposed)",
      "function removeRouterLiquidity(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to)",
      "function removeRouterLiquidityFor(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to, address _router)",
      "function routerBalances(address _router, address _asset) view returns (uint256)",
      "function setLiquidityFeeNumerator(uint256 _numerator)",
      "function setMaxRoutersPerTransfer(uint256 _newMaxRouters)",
      "function setRouterRecipient(address _router, address _recipient)",
      "function unapproveRouter(address _router)",
      "function unapproveRouterForPortal(address _router)"
    ],
    "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769": [
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error RelayerFacet__addRelayer_alreadyApproved()",
      "error RelayerFacet__removeRelayer_notApproved()",
      "error RelayerFacet__setRelayerFeeVault_invalidRelayerFeeVault()",
      "event RelayerAdded(address relayer, address caller)",
      "event RelayerFeeVaultUpdated(address oldVault, address newVault, address caller)",
      "event RelayerRemoved(address relayer, address caller)",
      "function addRelayer(address _relayer)",
      "function approvedRelayers(address _relayer) view returns (bool)",
      "function relayerFeeVault() view returns (address)",
      "function removeRelayer(address _relayer)",
      "function setRelayerFeeVault(address _relayerFeeVault)"
    ],
    "0xD03bFe2CE83632F4E618a97299cc91B1335BB2d9": [
      "error AlreadyInit()",
      "error AlreadyValidDASKeyset(bytes32)",
      "error BadSequencerNumber(uint256 stored, uint256 received)",
      "error DataNotAuthenticated()",
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error DelayedBackwards()",
      "error DelayedTooFar()",
      "error ForceIncludeBlockTooSoon()",
      "error ForceIncludeTimeTooSoon()",
      "error HadZeroInit()",
      "error IncorrectMessagePreimage()",
      "error NoSuchKeyset(bytes32)",
      "error NotBatchPoster()",
      "error NotForked()",
      "error NotOrigin()",
      "error NotOwner(address sender, address owner)",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event InvalidateKeyset(bytes32 indexed keysetHash)",
      "event OwnerFunctionCalled(uint256 indexed id)",
      "event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data)",
      "event SequencerBatchDelivered(uint256 indexed batchSequenceNumber, bytes32 indexed beforeAcc, bytes32 indexed afterAcc, bytes32 delayedAcc, uint256 afterDelayedMessagesRead, tuple(uint64 minTimestamp, uint64 maxTimestamp, uint64 minBlockNumber, uint64 maxBlockNumber) timeBounds, uint8 dataLocation)",
      "event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes)",
      "function DATA_AUTHENTICATED_FLAG() view returns (bytes1)",
      "function HEADER_LENGTH() view returns (uint256)",
      "function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount)",
      "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder)",
      "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount)",
      "function batchCount() view returns (uint256)",
      "function bridge() view returns (address)",
      "function dasKeySetInfo(bytes32) view returns (bool isValidKeyset, uint64 creationBlock)",
      "function forceInclusion(uint256 _totalDelayedMessagesRead, uint8 kind, uint64[2] l1BlockAndTime, uint256 baseFeeL1, address sender, bytes32 messageDataHash)",
      "function getKeysetCreationBlock(bytes32 ksHash) view returns (uint256)",
      "function inboxAccs(uint256 index) view returns (bytes32)",
      "function initialize(address bridge_, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation_)",
      "function invalidateKeysetHash(bytes32 ksHash)",
      "function isBatchPoster(address) view returns (bool)",
      "function isValidKeysetHash(bytes32 ksHash) view returns (bool)",
      "function maxTimeVariation() view returns (uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds)",
      "function removeDelayAfterFork()",
      "function rollup() view returns (address)",
      "function setIsBatchPoster(address addr, bool isBatchPoster_)",
      "function setMaxTimeVariation(tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation_)",
      "function setValidKeyset(bytes keysetBytes)",
      "function totalDelayedMessagesRead() view returns (uint256)"
    ],
    "0xd19d4B5d358258f05D7B411E21A1460D11B0876F": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xd2E67B6a032F0A9B1f569E63ad6C38f7342c2e00": [
      "constructor(uint256 _submissionInterval, uint256 _l2BlockTime, uint256 _startingBlockNumber, uint256 _startingTimestamp, address _proposer, address _challenger, uint256 _finalizationPeriodSeconds)",
      "event Initialized(uint8 version)",
      "event OutputProposed(bytes32 indexed outputRoot, uint256 indexed l2OutputIndex, uint256 indexed l2BlockNumber, uint256 l1Timestamp)",
      "event OutputsDeleted(uint256 indexed prevNextOutputIndex, uint256 indexed newNextOutputIndex)",
      "function CHALLENGER() view returns (address)",
      "function FINALIZATION_PERIOD_SECONDS() view returns (uint256)",
      "function L2_BLOCK_TIME() view returns (uint256)",
      "function PROPOSER() view returns (address)",
      "function SUBMISSION_INTERVAL() view returns (uint256)",
      "function computeL2Timestamp(uint256 _l2BlockNumber) view returns (uint256)",
      "function deleteL2Outputs(uint256 _l2OutputIndex)",
      "function getL2Output(uint256 _l2OutputIndex) view returns (tuple(bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber))",
      "function getL2OutputAfter(uint256 _l2BlockNumber) view returns (tuple(bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber))",
      "function getL2OutputIndexAfter(uint256 _l2BlockNumber) view returns (uint256)",
      "function initialize(uint256 _startingBlockNumber, uint256 _startingTimestamp)",
      "function latestBlockNumber() view returns (uint256)",
      "function latestOutputIndex() view returns (uint256)",
      "function nextBlockNumber() view returns (uint256)",
      "function nextOutputIndex() view returns (uint256)",
      "function proposeL2Output(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes32 _l1BlockHash, uint256 _l1BlockNumber) payable",
      "function startingBlockNumber() view returns (uint256)",
      "function startingTimestamp() view returns (uint256)",
      "function version() view returns (string)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F": [
      "event AddressSet(string indexed _name, address _newAddress, address _oldAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getAddress(string _name) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function transferOwnership(address newOwner)"
    ],
    "0xdfe97868233d1aa22e815a266982f2cf17685a27": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81": [
      "error AssetLogic__getConfig_notRegistered()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error TokenFacet__addAssetId_alreadyAdded()",
      "error TokenFacet__addAssetId_badBurn()",
      "error TokenFacet__addAssetId_badMint()",
      "error TokenFacet__enrollAdoptedAndLocalAssets_emptyCanonical()",
      "error TokenFacet__removeAssetId_invalidParams()",
      "error TokenFacet__removeAssetId_notAdded()",
      "error TokenFacet__removeAssetId_remainsCustodied()",
      "error TokenFacet__setLiquidityCap_notCanonicalDomain()",
      "error TokenFacet__setupAssetWithDeployedRepresentation_invalidRepresentation()",
      "error TokenFacet__setupAssetWithDeployedRepresentation_onCanonicalDomain()",
      "error TokenFacet__setupAsset_invalidCanonicalConfiguration()",
      "error TokenFacet__setupAsset_representationListed()",
      "error TokenFacet__updateDetails_localNotFound()",
      "error TokenFacet__updateDetails_notApproved()",
      "error TokenFacet__updateDetails_onlyRemote()",
      "event AssetAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address adoptedAsset, address localAsset, address caller)",
      "event AssetRemoved(bytes32 indexed key, address caller)",
      "event LiquidityCapUpdated(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, uint256 cap, address caller)",
      "event StableSwapAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address swapPool, address caller)",
      "event TokenDeployed(uint32 indexed domain, bytes32 indexed id, address indexed representation)",
      "function addStableSwapPool(tuple(uint32 domain, bytes32 id) _canonical, address _stableSwapPool)",
      "function adoptedToCanonical(address _adopted) view returns (tuple(uint32 domain, bytes32 id))",
      "function adoptedToLocalExternalPools(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
      "function adoptedToLocalExternalPools(bytes32 _key) view returns (address)",
      "function approvedAssets(bytes32 _key) view returns (bool)",
      "function approvedAssets(tuple(uint32 domain, bytes32 id) _canonical) view returns (bool)",
      "function canonicalToAdopted(bytes32 _key) view returns (address)",
      "function canonicalToAdopted(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
      "function canonicalToRepresentation(bytes32 _key) view returns (address)",
      "function canonicalToRepresentation(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
      "function getCustodiedAmount(bytes32 _key) view returns (uint256)",
      "function getLocalAndAdoptedToken(bytes32 _id, uint32 _domain) view returns (address, address)",
      "function getTokenId(address _candidate) view returns (tuple(uint32 domain, bytes32 id))",
      "function removeAssetId(tuple(uint32 domain, bytes32 id) _canonical, address _adoptedAssetId, address _representation)",
      "function removeAssetId(bytes32 _key, address _adoptedAssetId, address _representation)",
      "function representationToCanonical(address _representation) view returns (tuple(uint32 domain, bytes32 id))",
      "function setupAsset(tuple(uint32 domain, bytes32 id) _canonical, uint8 _canonicalDecimals, string _representationName, string _representationSymbol, address _adoptedAssetId, address _stableSwapPool, uint256 _cap) returns (address _local)",
      "function setupAssetWithDeployedRepresentation(tuple(uint32 domain, bytes32 id) _canonical, address _representation, address _adoptedAssetId, address _stableSwapPool) returns (address)",
      "function updateDetails(tuple(uint32 domain, bytes32 id) _canonical, string _name, string _symbol)",
      "function updateLiquidityCap(tuple(uint32 domain, bytes32 id) _canonical, uint256 _updated)"
    ],
    "0xe5896783a2F463446E1f624e64Aa6836BE4C6f58": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xF1c78967584D5E0ffF66dA103b8eb06c82EC020d": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint256 _gasCap, uint256 _mirrorChainId)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event GasFloorUpdated(uint256 previous, uint256 updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_CHAIN_ID() view returns (uint256)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function executeSignatures(bytes _data, bytes _signatures)",
      "function floor() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setGasFloor(uint256 _floor)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "0xf2964cCcB7CDA9e808aaBe8DB0DDDAF7890dd378": [
      "constructor(address _singleton)"
    ],
    "0xF5058616517C068C7b8c7EbC69FF636Ade9066d6": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE": [
      "constructor(address _finder, address _defaultCurrency, uint64 _defaultLiveness)",
      "event AdminPropertiesSet(address defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage)",
      "event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer)",
      "event AssertionMade(bytes32 indexed assertionId, bytes32 domainId, bytes claim, address indexed asserter, address callbackRecipient, address escalationManager, address caller, uint64 expirationTime, address currency, uint256 bond, bytes32 indexed identifier)",
      "event AssertionSettled(bytes32 indexed assertionId, address indexed bondRecipient, bool disputed, bool settlementResolution, address settleCaller)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function assertTruth(bytes claim, address asserter, address callbackRecipient, address escalationManager, uint64 liveness, address currency, uint256 bond, bytes32 identifier, bytes32 domainId) returns (bytes32 assertionId)",
      "function assertTruthWithDefaults(bytes claim, address asserter) returns (bytes32)",
      "function assertions(bytes32) view returns (tuple(bool arbitrateViaEscalationManager, bool discardOracle, bool validateDisputers, address assertingCaller, address escalationManager) escalationManagerSettings, address asserter, uint64 assertionTime, bool settled, address currency, uint64 expirationTime, bool settlementResolution, bytes32 domainId, bytes32 identifier, uint256 bond, address callbackRecipient, address disputer)",
      "function burnedBondPercentage() view returns (uint256)",
      "function cachedCurrencies(address) view returns (bool isWhitelisted, uint256 finalFee)",
      "function cachedIdentifiers(bytes32) view returns (bool)",
      "function cachedOracle() view returns (address)",
      "function defaultCurrency() view returns (address)",
      "function defaultIdentifier() view returns (bytes32)",
      "function defaultLiveness() view returns (uint64)",
      "function disputeAssertion(bytes32 assertionId, address disputer)",
      "function finder() view returns (address)",
      "function getAssertion(bytes32 assertionId) view returns (tuple(tuple(bool arbitrateViaEscalationManager, bool discardOracle, bool validateDisputers, address assertingCaller, address escalationManager) escalationManagerSettings, address asserter, uint64 assertionTime, bool settled, address currency, uint64 expirationTime, bool settlementResolution, bytes32 domainId, bytes32 identifier, uint256 bond, address callbackRecipient, address disputer))",
      "function getAssertionResult(bytes32 assertionId) view returns (bool)",
      "function getCurrentTime() view returns (uint256)",
      "function getMinimumBond(address currency) view returns (uint256)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numericalTrue() view returns (int256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAdminProperties(address _defaultCurrency, uint64 _defaultLiveness, uint256 _burnedBondPercentage)",
      "function settleAndGetAssertionResult(bytes32 assertionId) returns (bool)",
      "function settleAssertion(bytes32 assertionId)",
      "function stampAssertion(bytes32 assertionId) view returns (bytes)",
      "function syncUmaParams(bytes32 identifier, address currency)",
      "function transferOwnership(address newOwner)"
    ]
  }
}
