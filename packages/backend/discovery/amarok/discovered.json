{
  "name": "amarok",
  "blockNumber": 17761185,
  "configHash": "0x2dcefb3de1daedddc43a33fa7df85593535d0ddb152e622a9efd4b101d74b95d",
  "version": 1,
  "contracts": [
    {
      "name": "GnosisHubConnector",
      "address": "0x245F757d660C3ec65416168690431076d58d6413",
      "code": "https://etherscan.deth.net/address/0x245F757d660C3ec65416168690431076d58d6413",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "AMB": "0x4C36d2919e407f0Cc2Ee3c993ccF8ac26d9CE64e",
        "delay": 604800,
        "DOMAIN": 6648936,
        "MIRROR_CHAIN_ID": 100,
        "MIRROR_DOMAIN": 6778479,
        "mirrorConnector": "0x771B2c910D76ecf84B100559CF3Ec4cB2e8D4aC5",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1"
      },
      "derivedName": "GnosisHubConnector"
    },
    {
      "name": "UpgradeBeaconProxy",
      "address": "0x28A9e7bbed277092E2431F186E1aF898962d4E92",
      "code": "https://etherscan.deth.net/address/0x28A9e7bbed277092E2431F186E1aF898962d4E92",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "Connext Multisig",
      "address": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
      "code": "https://etherscan.deth.net/address/0x4d50a469fc788a3c0CdC8Fd67868877dCb246625,0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"
      },
      "values": {
        "domainSeparator": "0x60b1292375dabe167590dda781ba4f2d4f046f849a3b9cbcd167e98c3cfd098a",
        "getChainId": 1,
        "getOwners": [
          "0xf8d8aF083aC452b05b0D2eb4499AD900324b5754",
          "0x48fda6a16dEe5954bb0989b5B581d0623b48F06A",
          "0xA08f80dc1759b12fdC40A4dc64562b322C418E1f"
        ],
        "getThreshold": 3,
        "nonce": 22,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "OptimismHubConnector",
      "address": "0x66a425f09cfd613d40A986B3ef800AA7604C8eeE",
      "code": "https://etherscan.deth.net/address/0x66a425f09cfd613d40A986B3ef800AA7604C8eeE",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "AMB": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "delay": 604800,
        "DOMAIN": 6648936,
        "MIRROR_DOMAIN": 1869640809,
        "mirrorConnector": "0x32155C9d39084F040Ba17890fE8134dbE2a0453f",
        "OPTIMISM_PORTAL": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
        "owner": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1"
      },
      "derivedName": "OptimismHubConnector"
    },
    {
      "name": "WormholeHubConnector",
      "address": "0x69009c6f567590d8B469dbF4C8808e8ee32b8a45",
      "code": "https://etherscan.deth.net/address/0x69009c6f567590d8B469dbF4C8808e8ee32b8a45",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "AMB": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911",
        "delay": 604800,
        "DOMAIN": 6648936,
        "MIRROR_DOMAIN": 6450786,
        "MIRROR_WORMHOLE_ID": 4,
        "mirrorConnector": "0xC667DE991c8B40C969f6996b4F6167851527c9f6",
        "owner": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposedTimestamp": 1689103331,
        "refundAddress": "0x9435Ba7C661a0Fd477deED640491de8c100325A7",
        "renounced": false,
        "ROOT_MANAGER": "0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1"
      },
      "derivedName": "WormholeHubConnector"
    },
    {
      "name": "WatcherManager",
      "address": "0x6a595E41893a5ACBA9dBf8288B92eb71106Ba7A6",
      "code": "https://etherscan.deth.net/address/0x6a595E41893a5ACBA9dBf8288B92eb71106Ba7A6",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "delay": 604800,
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "WATCHERS": [
          "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
          "0x9c77788d761ee0347Ab550883237CeD274a0F248",
          "0x43DB577bB3DD02989Dc3DC8e65E61a27d6914386"
        ]
      },
      "derivedName": "WatcherManager"
    },
    {
      "name": "UpgradeBeaconProxy",
      "address": "0x7D2596D7E44b0990611d390Fbb0Bd24e64845694",
      "code": "https://etherscan.deth.net/address/0x7D2596D7E44b0990611d390Fbb0Bd24e64845694",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "ConnextBridge",
      "address": "0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6",
      "code": "https://etherscan.deth.net/address/0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6,0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81,0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2,0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295,0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d,0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352,0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769,0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D,0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686,0x6369F971fd1f1f230B8584151Ed7747FF710Cc68,0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b,0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4,0x3Bcf4185443A339517aD4e580067f178d1B68E1D",
      "upgradeability": {
        "type": "EIP2535 diamond proxy",
        "facets": [
          "0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
          "0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
          "0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295",
          "0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
          "0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
          "0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
          "0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
          "0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
          "0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
          "0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
          "0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4",
          "0x3Bcf4185443A339517aD4e580067f178d1B68E1D"
        ]
      },
      "values": {
        "aavePool": "0x0000000000000000000000000000000000000000",
        "aavePortalFee": 0,
        "delay": 604800,
        "domain": 6648936,
        "facetAddresses": [
          "0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
          "0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
          "0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295",
          "0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
          "0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
          "0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
          "0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
          "0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
          "0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
          "0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
          "0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4",
          "0x3Bcf4185443A339517aD4e580067f178d1B68E1D"
        ],
        "facets": [
          [
            "0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
            [
              "0x1506e463",
              "0x60062091",
              "0x80dc2248",
              "0x9b598519",
              "0x57bd0a32",
              "0xae8bc0de",
              "0x2c1999d0",
              "0xbd8671a7",
              "0x1ecf6f9f",
              "0xad4c7771",
              "0x949de969",
              "0x07a38d7b",
              "0xf1537686",
              "0x5a2164e5",
              "0xa1b19301",
              "0x03e418c2",
              "0xb64a5e07",
              "0xe1cb3958",
              "0xc4058429",
              "0xe9d7bcec"
            ]
          ],
          [
            "0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
            [
              "0x8a336231",
              "0x159e041f",
              "0x2424401f",
              "0xc2fb26a6",
              "0xb49c53a7",
              "0x63e3e7d2",
              "0xcb8058ba",
              "0x54126711",
              "0xaffed0e0",
              "0x121cca31",
              "0x6989ca7c",
              "0x1a8bc0e1",
              "0x41bdc8b5",
              "0xbfd79030",
              "0x3339df96",
              "0x8aac16ba",
              "0x91f5de79",
              "0x59efa162",
              "0x93f18ac5",
              "0x674dc933"
            ]
          ],
          ["0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295", ["0xab2dc3f5"]],
          [
            "0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
            [
              "0xc5b350df",
              "0xbb271a27",
              "0x2ec0c002",
              "0xa9943b1b",
              "0x6a42b8f8",
              "0x8da5cb5b",
              "0x8456cb59",
              "0x5c975abb",
              "0xb1f8100d",
              "0xc56ce358",
              "0xd1851c92",
              "0x3cf52ffb",
              "0xc91cb56a",
              "0x23986f7d",
              "0x80e52e3f",
              "0x6be55785",
              "0x12232937",
              "0x3f4ba83a"
            ]
          ],
          [
            "0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
            [
              "0xa03e4bc3",
              "0xef1eb0c1",
              "0x09d7ba54",
              "0xd1e5f31c",
              "0xb3f62fcb",
              "0x75d32371",
              "0x349f937c",
              "0x3bd30d34"
            ]
          ],
          [
            "0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
            [
              "0xdd39f00d",
              "0x8cba8b6a",
              "0x65bc8582",
              "0x60f0a5ac",
              "0xf01b3e01"
            ]
          ],
          [
            "0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
            [
              "0x4b72c5da",
              "0x0951d6d8",
              "0x09935b8f",
              "0x54064594",
              "0x2d3f9ef6",
              "0xf259cd27",
              "0xda3a892f",
              "0x3b688da6",
              "0x12d57170",
              "0x1407093b",
              "0x8770e682",
              "0xe9160f3e",
              "0xc6bf691d",
              "0xb214c901",
              "0x9bf6d875",
              "0x22a3c007",
              "0xf72c5048",
              "0xfd5bd5fe",
              "0x41258b5c",
              "0x582c78d2",
              "0x82904716",
              "0xffaf3f1a",
              "0x911b8ee2",
              "0x04376ff4"
            ]
          ],
          [
            "0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
            [
              "0x8d365457",
              "0xa02288f4",
              "0x29d99b10",
              "0x8f11d27f",
              "0x76ca2e52",
              "0xd251dc35",
              "0x7652f59d",
              "0x1301caa2",
              "0x8b480b12",
              "0x2d91a515",
              "0xb3a4eab4",
              "0xbb0577eb",
              "0xad94911b",
              "0xf495e807",
              "0x4bbcba8e",
              "0x241ca57a",
              "0xb6618dff",
              "0xff126de9",
              "0x80b297e8",
              "0x74c6b89b"
            ]
          ],
          [
            "0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
            [
              "0xea027c2f",
              "0xe5f6220f",
              "0x4b141bb4",
              "0x2bf63bcc",
              "0x1963e426",
              "0x3e74aea0",
              "0x9c8eab97",
              "0x43be5eaf",
              "0x72a30e08",
              "0x8dc51484",
              "0xa1a23c29"
            ]
          ],
          [
            "0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
            ["0x1f931c1c", "0x56a8ea48", "0xbbf2358e", "0x2c67849c"]
          ],
          ["0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4", ["0x9a7e155e"]],
          [
            "0x3Bcf4185443A339517aD4e580067f178d1B68E1D",
            [
              "0xcdffacc6",
              "0x52ef6b2c",
              "0xadfca15e",
              "0x7a0ed627",
              "0x01ffc9a7"
            ]
          ]
        ],
        "LIQUIDITY_FEE_DENOMINATOR": 10000,
        "LIQUIDITY_FEE_NUMERATOR": 9995,
        "lpTokenTargetAddress": "0xf7DE5aCeEeE6091d1103209C337fA00D0B4b9092",
        "maxRoutersPerTransfer": 5,
        "nonce": 6659,
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "paused": false,
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "relayerFeeVault": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "RELAYERS": [
          "0x75C6A865c30da54e365Cb5Def728890B3DD8BDC4",
          "0xaBcC9b596420A9E9172FD5938620E265a0f9Df92",
          "0x0ae392879A228B2484D9B1F80A5D0B7080FE79C2",
          "0x43100A190C3FeAE37Cb1f5d880e8fa8d81BE5CB9",
          "0x935AaAe0f5b02007c08512F0629a9d37Af2E1A47",
          "0x9B077C59fDe7de5AdCeF8093Bc38B61d43FC7007",
          "0xE2Fc8F14B6cEb1AD8165623E02953eDB100288bE",
          "0xe8a5eE73f3c8F1Cd55915f6Eb5Fc7df4206f3C78",
          "0x43728A95386D64384C76Afd416Dcc8118869BA6c",
          "0x62B1a88CCc6BC5e6FF91FB2FCD29Ab4F819b35C6",
          "0xcDbF9D438670D19d1Fb3954Abc8a13666b302b28",
          "0x75bA5Af8EFFDCFca32E1e288806d54277D1fde99"
        ],
        "routerAllowlistRemoved": false,
        "routerAllowlistTimestamp": 0,
        "ROUTERS": [
          "0xF26c772C0fF3a6036bDdAbDAbA22cf65ECa9F97c",
          "0x97b9dcB1AA34fE5F12b728D9166ae353d1e7f5C4",
          "0x8cb19CE8EEDF740389D428879a876A3B030B9170",
          "0x0e62f9fa1F9b3E49759Dc94494F5bC37a83d1FAD",
          "0x58507fed0Cb11723dFb6848c92C59Cf0BBEB9927",
          "0x7ce49752fFA7055622f444df3c69598748cb2E5f",
          "0x33b2aD85f7DbA818e719FB52095dC768E0eD93ec",
          "0x048a5EcC705C280b2248aefF88fd581AbbEB8587",
          "0x975574980a5Da77f5C90bC92431835D91B73669e",
          "0x6FD84ba95525c4cCd218F2f16F646A08B4b0a598",
          "0x6892d4D1f73A65B03063B7d78174dC6350Fcc406",
          "0x32D63da9F776891843C90787CEC54ADA23ABd4C2",
          "0xFaAB88015477493cFAa5DFAA533099C590876F21",
          "0x63Cda9C42db542bb91a7175E38673cFb00D402b0",
          "0xBE7BC00382a50A711D037eAeCAD799bb8805Dfa8",
          "0x22831e4f21cE65b33EF45df0e212b5bEbF130E5a",
          "0xEca085906cb531bdf1F87eFA85c5bE46aA5C9d2c",
          "0xC4Ae07F276768A3b74AE8c47bc108a2aF0e40eBa",
          "0x9584Eb0356a380b25D7ED2C14c54De58a25f2581",
          "0x6273c0965A1dB4F8A6277d490B4fD48715a42b96"
        ],
        "SEQUENCERS": ["0x4fFA5968857a6C8242E4A6Ded2418155D33e82E7"],
        "xAppConnectionManager": "0xF7c4d7dcEc2c09A15f2Db5831d6d25eAEf0a296c"
      },
      "derivedName": "ConnextDiamond"
    },
    {
      "name": "PolygonHubConnector",
      "address": "0xB01BC38909413f5dbb8F18a9b5787A62ce1282aE",
      "code": "https://etherscan.deth.net/address/0xB01BC38909413f5dbb8F18a9b5787A62ce1282aE",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "AMB": "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
        "checkpointManager": "0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287",
        "delay": 604800,
        "DOMAIN": 6648936,
        "fxChildTunnel": "0x96fDDc1A6FBDb232e9adA1fFc1026799F85128e9",
        "fxRoot": "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
        "MIRROR_DOMAIN": 1886350457,
        "mirrorConnector": "0x96fDDc1A6FBDb232e9adA1fFc1026799F85128e9",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1",
        "SEND_MESSAGE_EVENT_SIG": "0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036"
      },
      "derivedName": "PolygonHubConnector"
    },
    {
      "name": "ArbitrumHubConnector",
      "address": "0xd151C9ef49cE2d30B829a98A07767E3280F70961",
      "code": "https://etherscan.deth.net/address/0xd151C9ef49cE2d30B829a98A07767E3280F70961",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "AMB": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasPriceCap": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "maxGasCap": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "maxSubmissionCostCap": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "MIRROR_DOMAIN": 1634886255,
        "mirrorConnector": "0xFD81392229b6252cF761459d370C239Be3aFc54F",
        "outbox": "0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "rollup": "0x5eF0D09d1E6204141B4d37530808eD19f60FBa35",
        "ROOT_MANAGER": "0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1"
      },
      "derivedName": "ArbitrumHubConnector"
    },
    {
      "name": "RootManager",
      "address": "0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1",
      "code": "https://etherscan.deth.net/address/0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "connectors": [
          "0x66a425f09cfd613d40A986B3ef800AA7604C8eeE",
          "0x245F757d660C3ec65416168690431076d58d6413",
          "0xd151C9ef49cE2d30B829a98A07767E3280F70961",
          "0xB01BC38909413f5dbb8F18a9b5787A62ce1282aE",
          "0xF7c4d7dcEc2c09A15f2Db5831d6d25eAEf0a296c",
          "0x69009c6f567590d8B469dbF4C8808e8ee32b8a45"
        ],
        "connectorsHash": "0x1ab775b9545e9c3175b57958dc75c2a1cf76c3d166d0527bbf7d51fe434efa00",
        "delay": 604800,
        "delayBlocks": 100,
        "DEQUEUE_MAX": 100,
        "domains": [
          1869640809, 6778479, 1634886255, 1886350457, 6648936, 6450786
        ],
        "domainsHash": "0x678c65c2f3bd9522214f90322ceebb12cfa8f0ac9f0437dbf31a0939b2dc5a10",
        "getPendingInboundRootsCount": 0,
        "lastPropagatedRoot": "0x5d47f397574eba319b68ba8e7fcd96e99e60ff31e897a64e84e4288df473a677",
        "MAX_DOMAINS": 500,
        "MERKLE": "0x7D2596D7E44b0990611d390Fbb0Bd24e64845694",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "paused": false,
        "pendingInboundRoots": [31835, 31834],
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "watcherManager": "0x6a595E41893a5ACBA9dBf8288B92eb71106Ba7A6"
      },
      "derivedName": "RootManager"
    },
    {
      "name": "MainnetSpokeConnector",
      "address": "0xF7c4d7dcEc2c09A15f2Db5831d6d25eAEf0a296c",
      "code": "https://etherscan.deth.net/address/0xF7c4d7dcEc2c09A15f2Db5831d6d25eAEf0a296c",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "AMB": "0x0000000000000000000000000000000000000000",
        "delay": 604800,
        "delayBlocks": 0,
        "DOMAIN": 6648936,
        "home": "0xF7c4d7dcEc2c09A15f2Db5831d6d25eAEf0a296c",
        "lastSentBlock": 17760879,
        "localDomain": 6648936,
        "MERKLE": "0x28A9e7bbed277092E2431F186E1aF898962d4E92",
        "MIRROR_DOMAIN": 6648936,
        "mirrorConnector": "0x0000000000000000000000000000000000000000",
        "outboundRoot": "0xd7f2f281ce6df35a05a7f49900b3dc62a2958b0467843c5d10f0436f5bebd9e0",
        "owner": "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "paused": false,
        "PROCESS_GAS": 850000,
        "proposed": "0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "rateLimitBlocks": 0,
        "renounced": false,
        "RESERVE_GAS": 15000,
        "ROOT_MANAGER": "0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1",
        "watcherManager": "0x6a595E41893a5ACBA9dBf8288B92eb71106Ba7A6"
      },
      "derivedName": "MainnetSpokeConnector"
    }
  ],
  "eoas": [
    "0x048a5EcC705C280b2248aefF88fd581AbbEB8587",
    "0x0e62f9fa1F9b3E49759Dc94494F5bC37a83d1FAD",
    "0x22831e4f21cE65b33EF45df0e212b5bEbF130E5a",
    "0x32D63da9F776891843C90787CEC54ADA23ABd4C2",
    "0x33b2aD85f7DbA818e719FB52095dC768E0eD93ec",
    "0x43DB577bB3DD02989Dc3DC8e65E61a27d6914386",
    "0x48fda6a16dEe5954bb0989b5B581d0623b48F06A",
    "0x4fFA5968857a6C8242E4A6Ded2418155D33e82E7",
    "0x58507fed0Cb11723dFb6848c92C59Cf0BBEB9927",
    "0x6273c0965A1dB4F8A6277d490B4fD48715a42b96",
    "0x63Cda9C42db542bb91a7175E38673cFb00D402b0",
    "0x6892d4D1f73A65B03063B7d78174dC6350Fcc406",
    "0x6FD84ba95525c4cCd218F2f16F646A08B4b0a598",
    "0x7ce49752fFA7055622f444df3c69598748cb2E5f",
    "0x8cb19CE8EEDF740389D428879a876A3B030B9170",
    "0x9435Ba7C661a0Fd477deED640491de8c100325A7",
    "0x9584Eb0356a380b25D7ED2C14c54De58a25f2581",
    "0x975574980a5Da77f5C90bC92431835D91B73669e",
    "0x97b9dcB1AA34fE5F12b728D9166ae353d1e7f5C4",
    "0x9c77788d761ee0347Ab550883237CeD274a0F248",
    "0xA08f80dc1759b12fdC40A4dc64562b322C418E1f",
    "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "0xBE7BC00382a50A711D037eAeCAD799bb8805Dfa8",
    "0xC4Ae07F276768A3b74AE8c47bc108a2aF0e40eBa",
    "0xEca085906cb531bdf1F87eFA85c5bE46aA5C9d2c",
    "0xF26c772C0fF3a6036bDdAbDAbA22cf65ECa9F97c",
    "0xf8d8aF083aC452b05b0D2eb4499AD900324b5754",
    "0xFaAB88015477493cFAa5DFAA533099C590876F21"
  ],
  "abis": {
    "0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d": [
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error ProposedOwnableFacet__acceptProposedOwner_noOwnershipChange()",
      "error ProposedOwnableFacet__assignRoleAdmin_invalidInput()",
      "error ProposedOwnableFacet__assignRoleRouter_invalidInput()",
      "error ProposedOwnableFacet__assignRoleWatcher_invalidInput()",
      "error ProposedOwnableFacet__delayElapsed_delayNotElapsed()",
      "error ProposedOwnableFacet__proposeAssetAllowlistRemoval_noOwnershipChange()",
      "error ProposedOwnableFacet__proposeNewOwner_invalidProposal()",
      "error ProposedOwnableFacet__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnableFacet__proposeRouterAllowlistRemoval_noOwnershipChange()",
      "error ProposedOwnableFacet__removeAssetAllowlist_noOwnershipChange()",
      "error ProposedOwnableFacet__removeAssetAllowlist_noProposal()",
      "error ProposedOwnableFacet__removeRouterAllowlist_noOwnershipChange()",
      "error ProposedOwnableFacet__removeRouterAllowlist_noProposal()",
      "error ProposedOwnableFacet__revokeRole_invalidInput()",
      "event AssignRoleAdmin(address admin)",
      "event AssignRoleRouter(address router)",
      "event AssignRoleWatcher(address watcher)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused()",
      "event RevokeRole(address revokedAddress, uint8 revokedRole)",
      "event RouterAllowlistRemovalProposed(uint256 timestamp)",
      "event RouterAllowlistRemoved(bool renounced)",
      "event Unpaused()",
      "function acceptProposedOwner()",
      "function assignRoleAdmin(address _admin)",
      "function assignRoleRouterAdmin(address _router)",
      "function assignRoleWatcher(address _watcher)",
      "function delay() view returns (uint256)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposeRouterAllowlistRemoval()",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function queryRole(address _role) view returns (uint8)",
      "function removeRouterAllowlist()",
      "function revokeRole(address _revoke)",
      "function routerAllowlistRemoved() view returns (bool)",
      "function routerAllowlistTimestamp() view returns (uint256)",
      "function unpause()"
    ],
    "0x245F757d660C3ec65416168690431076d58d6413": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint256 _gasCap, uint256 _mirrorChainId)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_CHAIN_ID() view returns (uint256)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function executeSignatures(bytes _data, bytes _signatures)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)"
    ],
    "0x28A9e7bbed277092E2431F186E1aF898962d4E92": [
      "constructor(address _upgradeBeacon, bytes _initializationCalldata) payable"
    ],
    "0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b": [
      "event DiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "event DiamondCutProposed(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata, uint256 deadline)",
      "event DiamondCutRescinded(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function diamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function getAcceptanceTime(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata) view returns (uint256)",
      "function proposeDiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function rescindDiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)"
    ],
    "0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2": [
      "error AssetLogic__getConfig_notRegistered()",
      "error AssetLogic__getTokenIndexFromStableSwapPool_notExist()",
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error BridgeFacet__addRemote_invalidDomain()",
      "error BridgeFacet__addRemote_invalidRouter()",
      "error BridgeFacet__addSequencer_alreadyApproved()",
      "error BridgeFacet__addSequencer_invalidSequencer()",
      "error BridgeFacet__bumpTransfer_noRelayerVault()",
      "error BridgeFacet__bumpTransfer_valueIsZero()",
      "error BridgeFacet__excecute_insufficientGas()",
      "error BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn()",
      "error BridgeFacet__execute_badFastLiquidityStatus()",
      "error BridgeFacet__execute_externalCallFailed()",
      "error BridgeFacet__execute_invalidRouterSignature()",
      "error BridgeFacet__execute_invalidSequencerSignature()",
      "error BridgeFacet__execute_maxRoutersExceeded()",
      "error BridgeFacet__execute_notApprovedForPortals()",
      "error BridgeFacet__execute_notReconciled()",
      "error BridgeFacet__execute_notSupportedRouter()",
      "error BridgeFacet__execute_notSupportedSequencer()",
      "error BridgeFacet__execute_unapprovedSender()",
      "error BridgeFacet__execute_wrongDomain()",
      "error BridgeFacet__forceReceiveLocal_notDestination()",
      "error BridgeFacet__forceUpdateSlippage_invalidSlippage()",
      "error BridgeFacet__forceUpdateSlippage_notDestination()",
      "error BridgeFacet__mustHaveRemote_destinationNotSupported()",
      "error BridgeFacet__onlyDelegate_notDelegate()",
      "error BridgeFacet__removeSequencer_notApproved()",
      "error BridgeFacet__setXAppConnectionManager_domainsDontMatch()",
      "error BridgeFacet__xcall_capReached()",
      "error BridgeFacet__xcall_emptyTo()",
      "error BridgeFacet__xcall_invalidSlippage()",
      "error BridgeFacet__xcall_nativeAssetNotSupported()",
      "error BridgeFacet_xcall__emptyLocalAsset()",
      "event AavePortalMintUnbacked(bytes32 indexed transferId, address indexed router, address asset, uint256 amount)",
      "event Executed(bytes32 indexed transferId, address indexed to, address indexed asset, tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) args, address local, uint256 amount, address caller)",
      "event ExternalCalldataExecuted(bytes32 indexed transferId, bool success, bytes returnData)",
      "event ForceReceiveLocal(bytes32 indexed transferId)",
      "event RemoteAdded(uint32 domain, address remote, address caller)",
      "event SequencerAdded(address sequencer, address caller)",
      "event SequencerRemoved(address sequencer, address caller)",
      "event SlippageUpdated(bytes32 indexed transferId, uint256 slippage)",
      "event TransferRelayerFeesIncreased(bytes32 indexed transferId, uint256 increase, address asset, address caller)",
      "event XAppConnectionManagerSet(address updated, address caller)",
      "event XCalled(bytes32 indexed transferId, uint256 indexed nonce, bytes32 indexed messageHash, tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address asset, uint256 amount, address local, bytes messageBody)",
      "function addSequencer(address _sequencer)",
      "function approvedSequencers(address _sequencer) view returns (bool)",
      "function bumpTransfer(bytes32 _transferId) payable",
      "function bumpTransfer(bytes32 _transferId, address _relayerFeeAsset, uint256 _relayerFee)",
      "function domain() view returns (uint32)",
      "function enrollRemoteRouter(uint32 _domain, bytes32 _router)",
      "function execute(tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) _args) returns (bytes32)",
      "function forceReceiveLocal(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params)",
      "function forceUpdateSlippage(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, uint256 _slippage)",
      "function nonce() view returns (uint256)",
      "function remote(uint32 _domain) view returns (address)",
      "function removeSequencer(address _sequencer)",
      "function routedTransfers(bytes32 _transferId) view returns (address[])",
      "function setXAppConnectionManager(address _xAppConnectionManager)",
      "function transferStatus(bytes32 _transferId) view returns (uint8)",
      "function xAppConnectionManager() view returns (address)",
      "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)",
      "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
      "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
      "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)"
    ],
    "0x3Bcf4185443A339517aD4e580067f178d1B68E1D": [
      "function facetAddress(bytes4 _functionSelector) view returns (address facetAddress_)",
      "function facetAddresses() view returns (address[] facetAddresses_)",
      "function facetFunctionSelectors(address _facet) view returns (bytes4[] facetFunctionSelectors_)",
      "function facets() view returns (tuple(address facetAddress, bytes4[] functionSelectors)[] facets_)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)"
    ],
    "0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4": [
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error DiamondInit__init_alreadyInitialized()",
      "error DiamondInit__init_domainsDontMatch()",
      "function init(uint32 _domain, address _xAppConnectionManager, uint256 _acceptanceDelay, address _lpTokenTargetAddress)"
    ],
    "0x4d50a469fc788a3c0CdC8Fd67868877dCb246625": [
      "constructor(address _singleton)"
    ],
    "0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295": [
      "error AssetLogic__getConfig_notRegistered()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error InboxFacet__handle_notTransfer()",
      "error InboxFacet__onlyRemoteRouter_notRemote()",
      "error InboxFacet__onlyReplica_notReplica()",
      "error InboxFacet__reconcile_alreadyReconciled()",
      "error InboxFacet__reconcile_noPortalRouter()",
      "error TypedMemView__assertType_typeAssertionFailed(uint256 actual, uint256 expected)",
      "error TypedMemView__assertValid_validityAssertionFailed()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "event Receive(uint64 indexed originAndNonce, address indexed token, address indexed recipient, address liquidityProvider, uint256 amount)",
      "event Reconciled(bytes32 indexed transferId, uint32 indexed originDomain, address indexed local, address[] routers, uint256 amount, address caller)",
      "function handle(uint32 _origin, uint32 _nonce, bytes32 _sender, bytes _message)"
    ],
    "0x6369F971fd1f1f230B8584151Ed7747FF710Cc68": [
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error SwapAdminFacet__disableSwap_alreadyDisabled()",
      "error SwapAdminFacet__disableSwap_notInitialized()",
      "error SwapAdminFacet__initializeSwap_aExceedMax()",
      "error SwapAdminFacet__initializeSwap_adminFeeExceedMax()",
      "error SwapAdminFacet__initializeSwap_alreadyInitialized()",
      "error SwapAdminFacet__initializeSwap_decimalsMismatch()",
      "error SwapAdminFacet__initializeSwap_duplicateTokens()",
      "error SwapAdminFacet__initializeSwap_failedInitLpTokenClone()",
      "error SwapAdminFacet__initializeSwap_feeExceedMax()",
      "error SwapAdminFacet__initializeSwap_invalidPooledTokens()",
      "error SwapAdminFacet__initializeSwap_tokenDecimalsExceedMax()",
      "error SwapAdminFacet__initializeSwap_zeroTokenAddress()",
      "error SwapAdminFacet__removeSwap_delayNotElapsed()",
      "error SwapAdminFacet__removeSwap_notDisabledPool()",
      "error SwapAdminFacet__removeSwap_notInitialized()",
      "error SwapAdminFacet__updateLpTokenTarget_invalidNewAddress()",
      "event AdminFeesSet(bytes32 indexed key, uint256 newAdminFee, address caller)",
      "event AdminFeesWithdrawn(bytes32 indexed key, address caller)",
      "event LPTokenTargetUpdated(address oldAddress, address newAddress, address caller)",
      "event RampAStarted(bytes32 indexed key, uint256 futureA, uint256 futureTime, address caller)",
      "event RampAStopped(bytes32 indexed key, address caller)",
      "event SwapDisabled(bytes32 indexed key, address caller)",
      "event SwapFeesSet(bytes32 indexed key, uint256 newSwapFee, address caller)",
      "event SwapInitialized(bytes32 indexed key, tuple(bytes32 key, uint256 initialA, uint256 futureA, uint256 initialATime, uint256 futureATime, uint256 swapFee, uint256 adminFee, address lpToken, address[] pooledTokens, uint256[] tokenPrecisionMultipliers, uint256[] balances, uint256[] adminFees, bool disabled, uint256 removeTime) swap, address caller)",
      "event SwapRemoved(bytes32 indexed key, address caller)",
      "function disableSwap(bytes32 _key)",
      "function initializeSwap(bytes32 _key, address[] _pooledTokens, uint8[] decimals, string lpTokenName, string lpTokenSymbol, uint256 _a, uint256 _fee, uint256 _adminFee)",
      "function isDisabled(bytes32 key) view returns (bool)",
      "function lpTokenTargetAddress() view returns (address)",
      "function rampA(bytes32 key, uint256 futureA, uint256 futureTime)",
      "function removeSwap(bytes32 _key)",
      "function setSwapAdminFee(bytes32 key, uint256 newAdminFee)",
      "function setSwapFee(bytes32 key, uint256 newSwapFee)",
      "function stopRampA(bytes32 key)",
      "function updateLpTokenTarget(address newAddress)",
      "function withdrawSwapAdminFees(bytes32 key)"
    ],
    "0x66a425f09cfd613d40A986B3ef800AA7604C8eeE": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _optimismPortal, uint256 _gasCap)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function OPTIMISM_PORTAL() view returns (address)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _l2OutputIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function processed(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)"
    ],
    "0x69009c6f567590d8B469dbF4C8808e8ee32b8a45": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint256 _gasCap, uint16 _mirrorWormholeChainId)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RefundAddressUpdated(address indexed previous, address indexed updated)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function MIRROR_WORMHOLE_ID() view returns (uint16)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processedWhMessages(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function quoteEVMDeliveryPrice(uint256 _gasLimit, address _amb) view returns (uint256 _cost)",
      "function receiveWormholeMessages(bytes _payload, bytes[], bytes32 _sourceAddress, uint16 _sourceChain, bytes32 _deliveryHash) payable",
      "function refundAddress() view returns (address)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function setRefundAddress(address _updated)",
      "function verifySender(address _expected) returns (bool)"
    ],
    "0x6a595E41893a5ACBA9dBf8288B92eb71106Ba7A6": [
      "constructor()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event WatcherAdded(address watcher)",
      "event WatcherRemoved(address watcher)",
      "function acceptProposedOwner()",
      "function addWatcher(address _watcher)",
      "function delay() view returns (uint256)",
      "function isWatcher(address) view returns (bool)",
      "function owner() view returns (address)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function removeWatcher(address _watcher)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)"
    ],
    "0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352": [
      "error AssetLogic__getConfig_notRegistered()",
      "error AssetLogic__getTokenIndexFromStableSwapPool_notExist()",
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error PortalFacet__repayAavePortalFor_invalidAsset()",
      "error PortalFacet__repayAavePortalFor_zeroAmount()",
      "error PortalFacet__repayAavePortal_assetNotApproved()",
      "error PortalFacet__repayAavePortal_insufficientFunds()",
      "error PortalFacet__setAavePortalFee_invalidFee()",
      "event AavePoolUpdated(address updated, address caller)",
      "event AavePortalFeeUpdated(uint256 updated, address caller)",
      "event AavePortalRepayment(bytes32 indexed transferId, address asset, uint256 amount, uint256 fee, address caller)",
      "function aavePool() view returns (address)",
      "function aavePortalFee() view returns (uint256)",
      "function getAavePortalDebt(bytes32 _transferId) view returns (uint256)",
      "function getAavePortalFeeDebt(bytes32 _transferId) view returns (uint256)",
      "function repayAavePortal(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, uint256 _backingAmount, uint256 _feeAmount, uint256 _maxIn)",
      "function repayAavePortalFor(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, address _portalAsset, uint256 _backingAmount, uint256 _feeAmount) payable",
      "function setAavePool(address _aavePool)",
      "function setAavePortalFee(uint256 _aavePortalFeeNumerator)"
    ],
    "0x7D2596D7E44b0990611d390Fbb0Bd24e64845694": [
      "constructor(address _upgradeBeacon, bytes _initializationCalldata) payable"
    ],
    "0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6": [
      "constructor(address _contractOwner, tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, tuple(address initContract, bytes initData)[] _initializations) payable"
    ],
    "0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686": [
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error StableSwapFacet__deadlineCheck_deadlineNotMet()",
      "error StableSwapFacet__getSwapTokenBalance_indexOutOfRange()",
      "error StableSwapFacet__getSwapTokenIndex_notExist()",
      "error StableSwapFacet__getSwapToken_outOfRange()",
      "event AddLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
      "event NewAdminFee(bytes32 indexed key, uint256 newAdminFee)",
      "event NewSwapFee(bytes32 indexed key, uint256 newSwapFee)",
      "event RemoveLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply)",
      "event RemoveLiquidityImbalance(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
      "event RemoveLiquidityOne(bytes32 indexed key, address indexed provider, uint256 lpTokenAmount, uint256 lpTokenSupply, uint256 boughtId, uint256 tokensBought)",
      "event TokenSwap(bytes32 indexed key, address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId)",
      "function addSwapLiquidity(bytes32 key, uint256[] amounts, uint256 minToMint, uint256 deadline) returns (uint256)",
      "function calculateRemoveSwapLiquidity(bytes32 key, uint256 amount) view returns (uint256[])",
      "function calculateRemoveSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex) view returns (uint256 availableTokenAmount)",
      "function calculateSwap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) view returns (uint256)",
      "function calculateSwapTokenAmount(bytes32 key, uint256[] amounts, bool deposit) view returns (uint256)",
      "function getSwapA(bytes32 key) view returns (uint256)",
      "function getSwapAPrecise(bytes32 key) view returns (uint256)",
      "function getSwapAdminBalance(bytes32 key, uint256 index) view returns (uint256)",
      "function getSwapLPToken(bytes32 key) view returns (address)",
      "function getSwapStorage(bytes32 key) view returns (tuple(bytes32 key, uint256 initialA, uint256 futureA, uint256 initialATime, uint256 futureATime, uint256 swapFee, uint256 adminFee, address lpToken, address[] pooledTokens, uint256[] tokenPrecisionMultipliers, uint256[] balances, uint256[] adminFees, bool disabled, uint256 removeTime))",
      "function getSwapToken(bytes32 key, uint8 index) view returns (address)",
      "function getSwapTokenBalance(bytes32 key, uint8 index) view returns (uint256)",
      "function getSwapTokenIndex(bytes32 key, address tokenAddress) view returns (uint8)",
      "function getSwapVirtualPrice(bytes32 key) view returns (uint256)",
      "function removeSwapLiquidity(bytes32 key, uint256 amount, uint256[] minAmounts, uint256 deadline) returns (uint256[])",
      "function removeSwapLiquidityImbalance(bytes32 key, uint256[] amounts, uint256 maxBurnAmount, uint256 deadline) returns (uint256)",
      "function removeSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex, uint256 minAmount, uint256 deadline) returns (uint256)",
      "function swap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) returns (uint256)",
      "function swapExact(bytes32 key, uint256 amountIn, address assetIn, address assetOut, uint256 minAmountOut, uint256 deadline) returns (uint256)",
      "function swapExactOut(bytes32 key, uint256 amountOut, address assetIn, address assetOut, uint256 maxAmountIn, uint256 deadline) returns (uint256)"
    ],
    "0xB01BC38909413f5dbb8F18a9b5787A62ce1282aE": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _checkPointManager)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function SEND_MESSAGE_EVENT_SIG() view returns (bytes32)",
      "function acceptProposedOwner()",
      "function checkpointManager() view returns (address)",
      "function delay() view returns (uint256)",
      "function fxChildTunnel() view returns (address)",
      "function fxRoot() view returns (address)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processedExits(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function receiveMessage(bytes inputData)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)"
    ],
    "0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D": [
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error RoutersFacet__acceptProposedRouterOwner_badCaller()",
      "error RoutersFacet__acceptProposedRouterOwner_notElapsed()",
      "error RoutersFacet__addLiquidityForRouter_amountIsZero()",
      "error RoutersFacet__addLiquidityForRouter_badRouter()",
      "error RoutersFacet__addLiquidityForRouter_capReached()",
      "error RoutersFacet__addLiquidityForRouter_routerEmpty()",
      "error RoutersFacet__approveRouterForPortal_alreadyApproved()",
      "error RoutersFacet__approveRouterForPortal_notAdded()",
      "error RoutersFacet__approveRouter_alreadyAdded()",
      "error RoutersFacet__approveRouter_routerEmpty()",
      "error RoutersFacet__initializeRouter_configNotEmpty()",
      "error RoutersFacet__onlyRouterOwner_notRouterOwner()",
      "error RoutersFacet__proposeRouterOwner_badRouter()",
      "error RoutersFacet__proposeRouterOwner_notNewOwner()",
      "error RoutersFacet__removeRouterLiquidityFor_notOwner()",
      "error RoutersFacet__removeRouterLiquidity_amountIsZero()",
      "error RoutersFacet__removeRouterLiquidity_insufficientFunds()",
      "error RoutersFacet__removeRouterLiquidity_recipientEmpty()",
      "error RoutersFacet__setLiquidityFeeNumerator_tooLarge()",
      "error RoutersFacet__setLiquidityFeeNumerator_tooSmall()",
      "error RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer()",
      "error RoutersFacet__setRouterOwner_noChange()",
      "error RoutersFacet__setRouterRecipient_notNewRecipient()",
      "error RoutersFacet__unapproveRouterForPortal_notApproved()",
      "error RoutersFacet__unapproveRouter_notAdded()",
      "error RoutersFacet__unapproveRouter_routerEmpty()",
      "event LiquidityFeeNumeratorUpdated(uint256 liquidityFeeNumerator, address caller)",
      "event MaxRoutersPerTransferUpdated(uint256 maxRoutersPerTransfer, address caller)",
      "event RouterAdded(address indexed router, address caller)",
      "event RouterApprovedForPortal(address router, address caller)",
      "event RouterInitialized(address indexed router)",
      "event RouterLiquidityAdded(address indexed router, address local, bytes32 key, uint256 amount, address caller)",
      "event RouterLiquidityRemoved(address indexed router, address to, address local, bytes32 key, uint256 amount, address caller)",
      "event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner)",
      "event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed)",
      "event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient)",
      "event RouterRemoved(address indexed router, address caller)",
      "event RouterUnapprovedForPortal(address router, address caller)",
      "function LIQUIDITY_FEE_DENOMINATOR() pure returns (uint256)",
      "function LIQUIDITY_FEE_NUMERATOR() view returns (uint256)",
      "function acceptProposedRouterOwner(address _router)",
      "function addRouterLiquidity(uint256 _amount, address _local) payable",
      "function addRouterLiquidityFor(uint256 _amount, address _local, address _router) payable",
      "function approveRouter(address _router)",
      "function approveRouterForPortal(address _router)",
      "function getProposedRouterOwner(address _router) view returns (address)",
      "function getProposedRouterOwnerTimestamp(address _router) view returns (uint256)",
      "function getRouterApproval(address _router) view returns (bool)",
      "function getRouterApprovalForPortal(address _router) view returns (bool)",
      "function getRouterOwner(address _router) view returns (address)",
      "function getRouterRecipient(address _router) view returns (address)",
      "function initializeRouter(address _owner, address _recipient)",
      "function maxRoutersPerTransfer() view returns (uint256)",
      "function proposeRouterOwner(address _router, address _proposed)",
      "function removeRouterLiquidity(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to)",
      "function removeRouterLiquidityFor(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to, address _router)",
      "function routerBalances(address _router, address _asset) view returns (uint256)",
      "function setLiquidityFeeNumerator(uint256 _numerator)",
      "function setMaxRoutersPerTransfer(uint256 _newMaxRouters)",
      "function setRouterRecipient(address _router, address _recipient)",
      "function unapproveRouter(address _router)",
      "function unapproveRouterForPortal(address _router)"
    ],
    "0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769": [
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error RelayerFacet__addRelayer_alreadyApproved()",
      "error RelayerFacet__removeRelayer_notApproved()",
      "error RelayerFacet__setRelayerFeeVault_invalidRelayerFeeVault()",
      "event RelayerAdded(address relayer, address caller)",
      "event RelayerFeeVaultUpdated(address oldVault, address newVault, address caller)",
      "event RelayerRemoved(address relayer, address caller)",
      "function addRelayer(address _relayer)",
      "function approvedRelayers(address _relayer) view returns (bool)",
      "function relayerFeeVault() view returns (address)",
      "function removeRelayer(address _relayer)",
      "function setRelayerFeeVault(address _relayerFeeVault)"
    ],
    "0xd151C9ef49cE2d30B829a98A07767E3280F70961": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _outbox, uint256 _maxSubmissionCostCap, uint256 _maxGasCap, uint256 _gasPriceCap)",
      "error Connector__processMessage_notUsed()",
      "error NotCrossChainCall()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "event GasPriceCapUpdated(uint256 _previous, uint256 _updated)",
      "event MaxGasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MaxSubmissionCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RetryableTicketCreated(uint256 indexed ticketId)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasPriceCap() view returns (uint256)",
      "function maxGasCap() view returns (uint256)",
      "function maxSubmissionCostCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function outbox() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(uint64 _nodeNum, bytes32 _sendRoot, bytes32 _blockHash, bytes32[] _proof, uint256 _index, tuple(address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes callData) _message)",
      "function processed(uint256) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function rollup() view returns (address)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasPriceCap(uint256 _updated)",
      "function setMaxGasCap(uint256 _updated)",
      "function setMaxSubmissionCostCap(uint256 _updated)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)"
    ],
    "0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1": [
      "constructor(uint256 _delayBlocks, address _merkle, address _watcherManager)",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event ConnectorAdded(uint32 domain, address connector, uint32[] domains, address[] connectors)",
      "event ConnectorRemoved(uint32 domain, address connector, uint32[] domains, address[] connectors, address caller)",
      "event DelayBlocksUpdated(uint256 previous, uint256 updated)",
      "event DomainAdded(uint32 domain, address connector)",
      "event DomainRemoved(uint32 domain)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event PropagateFailed(uint32 domain, address connector)",
      "event RootDiscarded(bytes32 fraudulentRoot)",
      "event RootPropagated(bytes32 aggregateRoot, uint256 count, bytes32 domainsHash)",
      "event RootReceived(uint32 domain, bytes32 receivedRoot, uint256 queueIndex)",
      "event RootsAggregated(bytes32 aggregateRoot, uint256 count, bytes32[] aggregatedMessageRoots)",
      "event Unpaused(address account)",
      "event WatcherManagerChanged(address watcherManager)",
      "function DEQUEUE_MAX() view returns (uint128)",
      "function MAX_DOMAINS() view returns (uint256)",
      "function MERKLE() view returns (address)",
      "function acceptProposedOwner()",
      "function addConnector(uint32 _domain, address _connector)",
      "function aggregate(uint32 _domain, bytes32 _inbound)",
      "function connectors(uint256) view returns (address)",
      "function connectorsHash() view returns (bytes32)",
      "function delay() view returns (uint256)",
      "function delayBlocks() view returns (uint256)",
      "function dequeue() returns (bytes32, uint256)",
      "function discardRoot(bytes32 _root)",
      "function domains(uint256) view returns (uint32)",
      "function domainsHash() view returns (bytes32)",
      "function getConnectorForDomain(uint32 _domain) view returns (address)",
      "function getDomainIndex(uint32 _domain) view returns (uint256)",
      "function getPendingInboundRootsCount() view returns (uint256)",
      "function isDomainSupported(uint32 _domain) view returns (bool)",
      "function lastPropagatedRoot() view returns (bytes32)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingInboundRoots() view returns (uint128 first, uint128 last)",
      "function propagate(address[] _connectors, uint256[] _fees, bytes[] _encodedData) payable",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function removeConnector(uint32 _domain)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function setDelayBlocks(uint256 _delayBlocks)",
      "function setWatcherManager(address _watcherManager)",
      "function unpause()",
      "function validateConnectors(address[] _connectors) view",
      "function validateDomains(uint32[] _domains, address[] _connectors) view",
      "function watcherManager() view returns (address)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81": [
      "error AssetLogic__getConfig_notRegistered()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error TokenFacet__addAssetId_alreadyAdded()",
      "error TokenFacet__addAssetId_badBurn()",
      "error TokenFacet__addAssetId_badMint()",
      "error TokenFacet__enrollAdoptedAndLocalAssets_emptyCanonical()",
      "error TokenFacet__removeAssetId_invalidParams()",
      "error TokenFacet__removeAssetId_notAdded()",
      "error TokenFacet__removeAssetId_remainsCustodied()",
      "error TokenFacet__setLiquidityCap_notCanonicalDomain()",
      "error TokenFacet__setupAssetWithDeployedRepresentation_invalidRepresentation()",
      "error TokenFacet__setupAssetWithDeployedRepresentation_onCanonicalDomain()",
      "error TokenFacet__setupAsset_invalidCanonicalConfiguration()",
      "error TokenFacet__setupAsset_representationListed()",
      "error TokenFacet__updateDetails_localNotFound()",
      "error TokenFacet__updateDetails_notApproved()",
      "error TokenFacet__updateDetails_onlyRemote()",
      "event AssetAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address adoptedAsset, address localAsset, address caller)",
      "event AssetRemoved(bytes32 indexed key, address caller)",
      "event LiquidityCapUpdated(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, uint256 cap, address caller)",
      "event StableSwapAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address swapPool, address caller)",
      "event TokenDeployed(uint32 indexed domain, bytes32 indexed id, address indexed representation)",
      "function addStableSwapPool(tuple(uint32 domain, bytes32 id) _canonical, address _stableSwapPool)",
      "function adoptedToCanonical(address _adopted) view returns (tuple(uint32 domain, bytes32 id))",
      "function adoptedToLocalExternalPools(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
      "function adoptedToLocalExternalPools(bytes32 _key) view returns (address)",
      "function approvedAssets(bytes32 _key) view returns (bool)",
      "function approvedAssets(tuple(uint32 domain, bytes32 id) _canonical) view returns (bool)",
      "function canonicalToAdopted(bytes32 _key) view returns (address)",
      "function canonicalToAdopted(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
      "function canonicalToRepresentation(bytes32 _key) view returns (address)",
      "function canonicalToRepresentation(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
      "function getCustodiedAmount(bytes32 _key) view returns (uint256)",
      "function getLocalAndAdoptedToken(bytes32 _id, uint32 _domain) view returns (address, address)",
      "function getTokenId(address _candidate) view returns (tuple(uint32 domain, bytes32 id))",
      "function removeAssetId(tuple(uint32 domain, bytes32 id) _canonical, address _adoptedAssetId, address _representation)",
      "function removeAssetId(bytes32 _key, address _adoptedAssetId, address _representation)",
      "function representationToCanonical(address _representation) view returns (tuple(uint32 domain, bytes32 id))",
      "function setupAsset(tuple(uint32 domain, bytes32 id) _canonical, uint8 _canonicalDecimals, string _representationName, string _representationSymbol, address _adoptedAssetId, address _stableSwapPool, uint256 _cap) returns (address _local)",
      "function setupAssetWithDeployedRepresentation(tuple(uint32 domain, bytes32 id) _canonical, address _representation, address _adoptedAssetId, address _stableSwapPool) returns (address)",
      "function updateDetails(tuple(uint32 domain, bytes32 id) _canonical, string _name, string _symbol)",
      "function updateLiquidityCap(tuple(uint32 domain, bytes32 id) _canonical, uint256 _updated)"
    ],
    "0xF7c4d7dcEc2c09A15f2Db5831d6d25eAEf0a296c": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint256 _processGas, uint256 _reserveGas, uint256 _delayBlocks, address _merkle, address _watcherManager)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error RateLimited__rateLimited_messageSendRateExceeded()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "error TypedMemView__unsafeCopyTo_identityOOG()",
      "error TypedMemView__unsafeCopyTo_invalidPointer()",
      "error TypedMemView__unsafeCopyTo_nullPointer()",
      "event AggregateRootReceived(bytes32 root)",
      "event AggregateRootRemoved(bytes32 root)",
      "event AggregateRootVerified(bytes32 indexed root)",
      "event DelayBlocksUpdated(uint256 indexed updated, address caller)",
      "event Dispatch(bytes32 leaf, uint256 index, bytes32 root, bytes message)",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageProven(bytes32 indexed leaf, bytes32 indexed aggregateRoot, uint256 aggregateIndex)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event Process(bytes32 leaf, bool success, bytes returnData)",
      "event SendRateLimitUpdated(address updater, uint256 newRateLimit)",
      "event SenderAdded(address sender)",
      "event SenderRemoved(address sender)",
      "event Unpaused(address account)",
      "event WatcherManagerChanged(address watcherManager)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MERKLE() view returns (address)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function PROCESS_GAS() view returns (uint256)",
      "function RESERVE_GAS() view returns (uint256)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function addSender(address _sender)",
      "function allowlistedSenders(address) view returns (bool)",
      "function delay() view returns (uint256)",
      "function delayBlocks() view returns (uint256)",
      "function dispatch(uint32 _destinationDomain, bytes32 _recipientAddress, bytes _messageBody) returns (bytes32, bytes)",
      "function home() view returns (address)",
      "function isReplica(address _potentialReplica) view returns (bool)",
      "function lastSentBlock() view returns (uint256)",
      "function localDomain() view returns (uint32)",
      "function messages(bytes32) view returns (uint8)",
      "function mirrorConnector() view returns (address)",
      "function nonces(uint32) view returns (uint32)",
      "function outboundRoot() view returns (bytes32)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingAggregateRoots(bytes32) view returns (uint256)",
      "function processMessage(bytes _data)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function proveAndProcess(tuple(bytes message, bytes32[32] path, uint256 index)[] _proofs, bytes32 _aggregateRoot, bytes32[32] _aggregatePath, uint256 _aggregateIndex)",
      "function provenAggregateRoots(bytes32) view returns (bool)",
      "function provenMessageRoots(bytes32) view returns (bool)",
      "function rateLimitBlocks() view returns (uint256)",
      "function removePendingAggregateRoot(bytes32 _fraudulentRoot)",
      "function removeSender(address _sender)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function send(bytes _encodedData) payable",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function sentMessageRoots(bytes32) view returns (bool)",
      "function setDelayBlocks(uint256 _delayBlocks)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function setRateLimitBlocks(uint256 _rateLimit)",
      "function setWatcherManager(address _watcherManager)",
      "function unpause()",
      "function verifySender(address _expected) returns (bool)",
      "function watcherManager() view returns (address)",
      "function withdrawFunds(address _to)"
    ]
  }
}
