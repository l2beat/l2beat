{
  "name": "nebraupa",
  "chain": "ethereum",
  "blockNumber": 20756756,
  "configHash": "0x4bbd4c33e95701f84a8a0db0888706ee07343788ddd5bfe2a40540c3f7a18360",
  "version": 14,
  "contracts": [
    {
      "name": "UpaVerifier",
      "address": "0x3B946743DEB7B6C97F05B7a31B23562448047E3E",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xb463603469Bf31f189E3F6625baf8378880Df14e",
          "via": []
        }
      ],
      "ignoreInWatchMode": [
        "claimableFees",
        "nextSubmissionIdxToVerify",
        "nextProofIdx",
        "getNextSubmissionIdx",
        "lastVerifiedSubmissionHeight"
      ],
      "sinceTimestamp": 1723653167,
      "values": {
        "$admin": "0xb463603469Bf31f189E3F6625baf8378880Df14e",
        "$implementation": "0xB6cD7eD75c008d0033ED241872639a1D8a35020a",
        "$upgradeCount": 1,
        "aggregatorCollateral": "10000000000000000",
        "claimableFees": "22910344681620000",
        "DUMMY_PROOF_ID": "0x84636c7b9793a9833ef7ca3e1c118d7d21dadb97ef7bf1fbfd549c10bca3553f",
        "feeAllocated": 0,
        "feeRecipient": "0x0188485989e211eDde9e5ba5794a3c6a3429BDb4",
        "fixedGasFeePerProof": 30000,
        "getCircuitIds": [
          "0x1e9db3d963302f5f365388325c3d4f45ee02ae52725f9b81d17fc57d0d288b5c",
          "0x20040b0a9eb54f6cdbc68333ada4803cb9d09a0a51c43ac891ebd5c797f2a868",
          "0x20dca5aeaaa412308a341546b48893f6c4c8f3b5b2774ccbd46e95a9bde9f03b"
        ],
        "getNextSubmissionIdx": 61,
        "lastVerifiedSubmissionHeight": 20756355,
        "MAX_DUPLICATE_SUBMISSIONS": 256,
        "MAX_NUM_PROOFS_PER_SUBMISSION": 32,
        "MAX_SUBMISSION_MERKLE_DEPTH": 5,
        "maxNumPublicInputs": 16,
        "nextProofIdx": 209,
        "nextSubmissionIdxToVerify": 59,
        "outerVerifier": "0xE990F8e3505391d2b42C80683d403A8371Ee88B9",
        "owner": "0xb463603469Bf31f189E3F6625baf8378880Df14e",
        "paused": false,
        "UPGRADE_INTERFACE_VERSION": "5.0.0",
        "verifiedSubmissionIdxForAllocatedFee": 0,
        "version": 10201,
        "worker": "0x7545b173780F07BF9EFA7e1561bb35B52907974D"
      },
      "derivedName": "UpaVerifier"
    },
    {
      "name": "NebraOwner",
      "address": "0xb463603469Bf31f189E3F6625baf8378880Df14e",
      "template": "GnosisSafe",
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x3B946743DEB7B6C97F05B7a31B23562448047E3E"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1722891191,
      "values": {
        "$immutable": false,
        "$implementation": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "$members": [
          "0xE3ac80DAe2a6e100A74bB179aBB65383e1B21B3D",
          "0x937094ae4Cc930DBF387CA55d80e03586435E002",
          "0xBb9A51256d4ae71dE356e83058C69bc9a33e4324",
          "0xbB1de72013286C40c3a7E8468a5eAe2aE36EE10e",
          "0xCA5C66933149d95fbA1050AAF7046b08A7F28AE5",
          "0x4Aa1D1B45F30725DF5Ba9d99DDa4c27f8dac6dd7",
          "0x36105564a3e70f3FB525Cd825d42393F9aD64AA3"
        ],
        "$threshold": 2,
        "domainSeparator": "0x800b74261e61d7aa73fd0eb1d5b8f10ca6280de49fda7c56f92ab9553c69e249",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 7 (29%)",
        "nonce": 4,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafeL2"
    },
    {
      "name": "",
      "address": "0xE990F8e3505391d2b42C80683d403A8371Ee88B9",
      "unverified": true,
      "sinceTimestamp": 1723652291,
      "values": { "$immutable": true }
    }
  ],
  "eoas": [
    { "address": "0x0188485989e211eDde9e5ba5794a3c6a3429BDb4" },
    { "address": "0x36105564a3e70f3FB525Cd825d42393F9aD64AA3" },
    { "address": "0x4Aa1D1B45F30725DF5Ba9d99DDa4c27f8dac6dd7" },
    { "address": "0x7545b173780F07BF9EFA7e1561bb35B52907974D" },
    { "address": "0x937094ae4Cc930DBF387CA55d80e03586435E002" },
    { "address": "0xbB1de72013286C40c3a7E8468a5eAe2aE36EE10e" },
    { "address": "0xBb9A51256d4ae71dE356e83058C69bc9a33e4324" },
    { "address": "0xCA5C66933149d95fbA1050AAF7046b08A7F28AE5" },
    { "address": "0xE3ac80DAe2a6e100A74bB179aBB65383e1B21B3D" }
  ],
  "abis": {
    "0x3B946743DEB7B6C97F05B7a31B23562448047E3E": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0xb463603469Bf31f189E3F6625baf8378880Df14e": [
      "constructor(address _singleton)"
    ],
    "0xB6cD7eD75c008d0033ED241872639a1D8a35020a": [
      "constructor()",
      "error AddressEmptyCode(address target)",
      "error AlreadyRegisteredVK()",
      "error AssertNoSubmissionProofs()",
      "error DummyProofIdInChallenge()",
      "error DummyProofInSubmission()",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error EnforcedPause()",
      "error ExpectedPause()",
      "error FailedInnerCall()",
      "error FailedToSendEther()",
      "error FeeRecipientAddressIsZero()",
      "error FinalDigestHDoesNotMatch()",
      "error FinalDigestLDoesNotMatch()",
      "error FixedReimbursementTooHigh()",
      "error Groth16VerifierAddressIsZero()",
      "error InconsistentPedersenVK()",
      "error InsufficientBalance()",
      "error InsufficientFee()",
      "error IntervalProofTooShortA()",
      "error IntervalProofTooShortB()",
      "error InvalidInitialization()",
      "error InvalidMerkleIntervalProof()",
      "error InvalidMerkleProofForProofId()",
      "error InvalidOffset()",
      "error InvalidProof()",
      "error InvalidProofDataDigest()",
      "error InvalidVK()",
      "error LastSubmittedSubmissionIdxTooLow()",
      "error MaxNumPublicInputsTooLow()",
      "error MissingSubmissionProof()",
      "error NonPowerOfTwoLeaves()",
      "error NotEnoughCollateral()",
      "error NotEnoughProofsVerified()",
      "error NotInitializing()",
      "error NotOnCurve(uint8 point)",
      "error OuterVerifierAddressIsZero()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error OwnerAddressIsZero()",
      "error PendingProofs()",
      "error ProofAlreadyVerified()",
      "error SubmissionAlreadyVerified()",
      "error SubmissionOutOfOrder()",
      "error SubmissionWasNotSkipped()",
      "error TooManyCommitmentPoints()",
      "error TooManyProofIds()",
      "error TooManyProofs()",
      "error TooManyPublicInputs()",
      "error TooManySubmissionsForId()",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "error UnauthorizedFeeRecipientAccount()",
      "error UnauthorizedWorkerAccount()",
      "error UnequalNumberOfCircuitIdsAndProofs()",
      "error UnequalNumberOfCircuitIdsAndPublicInputs()",
      "error UnregisteredVK()",
      "error UnsuccessfulChallenge()",
      "error WorkerAddressIsZero()",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event ProofSubmitted(bytes32 indexed proofId, uint64 submissionIdx, uint64 proofIdx, uint64 dupSubmissionIdx)",
      "event SubmissionVerified(bytes32 indexed submissionId)",
      "event Unpaused(address account)",
      "event UpgradeOuterVerifier(address)",
      "event Upgraded(address indexed implementation)",
      "event VKRegistered(bytes32 indexed circuitId, tuple(uint256[2] alpha, uint256[2][2] beta, uint256[2][2] gamma, uint256[2][2] delta, uint256[2][] s, uint256[2][2][] h1, uint256[2][2][] h2) vk)",
      "function DUMMY_PROOF_ID() view returns (bytes32)",
      "function MAX_DUPLICATE_SUBMISSIONS() view returns (uint16)",
      "function MAX_NUM_PROOFS_PER_SUBMISSION() view returns (uint16)",
      "function MAX_SUBMISSION_MERKLE_DEPTH() view returns (uint16)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function __upaFeeBase_init(address _owner, uint256 _aggregatorCollateral)",
      "function __upaFixedGasFee_init(address _owner, uint256 _fixedGasFeePerProof, uint256 _aggregatorCollateral)",
      "function __upaProofReceiver_init(address _owner, uint256 _fixedGasFeePerProof, uint256 _aggregatorCollateral, uint8 _maxNumPublicInputs)",
      "function aggregatorCollateral() view returns (uint256)",
      "function allocateAggregatorFee()",
      "function challenge(bytes32 circuitId, tuple(uint256[2] pA, uint256[2][2] pB, uint256[2] pC, uint256[2][] m, uint256[2][] pok) proof, uint256[] publicInputs, bytes32 submissionId, uint8 dupSubmissionIdx, bytes32[] proofIdMerkleProof, bytes32[] proofDataMerkleProof) returns (bool challengeSuccessful)",
      "function changeGasFee(uint256 newGasFee)",
      "function claimAggregatorFee()",
      "function claimableFees() view returns (uint256)",
      "function estimateFee(uint16 numProofs) view returns (uint256 feeWei)",
      "function feeAllocated() view returns (uint256)",
      "function feeRecipient() view returns (address)",
      "function fixedGasFeePerProof() view returns (uint256)",
      "function getCircuitIds() view returns (bytes32[])",
      "function getNextSubmissionIdx() view returns (uint64)",
      "function getNumVerifiedForSubmissionIdx(uint64 submissionIdx) view returns (uint16)",
      "function getSubmissionIdx(bytes32 submissionId, uint8 dupSubmissionIdx) view returns (uint64 submissionIdx)",
      "function getSubmissionIdxAndHeight(bytes32 submissionId, uint8 dupSubmissionIdx) view returns (uint64 submissionIdx, uint64 submissionBlockNumber)",
      "function getSubmissionIdxAndNumProofs(bytes32 submissionId, uint8 dupSubmissionIdx) view returns (uint64 submissionIdx, uint16 numProofs)",
      "function getSubmissionIdxHeightNumProofs(bytes32 submissionId, uint8 dupSubmissionIdx) view returns (uint64 submissionIdx, uint64 height, uint16 numProofs)",
      "function getVK(bytes32 circuitId) view returns (tuple(uint256[2] alpha, uint256[2][2] beta, uint256[2][2] gamma, uint256[2][2] delta, uint256[2][] s, uint256[2][2][] h1, uint256[2][2][] h2))",
      "function initialize(address _owner, address _worker, address _feeRecipient, address _outerVerifier, address _groth16Verifier, uint256 _fixedReimbursement, uint256 _fixedFeePerProof, uint256 _aggregatorCollateral, uint8 _maxNumPublicInputs, uint32 _version)",
      "function isProofVerified(bytes32 circuitId, uint256[] publicInputs, tuple(bytes32 submissionId, bytes32[] merkleProof, uint16 location) proofReference) view returns (bool)",
      "function isProofVerified(bytes32 proofId) view returns (bool)",
      "function isProofVerified(bytes32 proofId, tuple(bytes32 submissionId, bytes32[] merkleProof, uint16 location) proofReference) view returns (bool)",
      "function isProofVerified(bytes32 circuitId, uint256[] publicInputs) view returns (bool)",
      "function isSubmissionVerified(bytes32 submissionId) view returns (bool)",
      "function isSubmissionVerified(bytes32[] circuitIds, uint256[][] publicInputsArray) view returns (bool)",
      "function isSubmissionVerified(bytes32 circuitId, uint256[][] publicInputsArray) view returns (bool)",
      "function lastVerifiedSubmissionHeight() view returns (uint64)",
      "function maxNumPublicInputs() view returns (uint8)",
      "function nextProofIdx() view returns (uint64)",
      "function nextSubmissionIdxToVerify() view returns (uint64)",
      "function outerVerifier() view returns (address)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function registerVK(tuple(uint256[2] alpha, uint256[2][2] beta, uint256[2][2] gamma, uint256[2][2] delta, uint256[2][] s, uint256[2][2][] h1, uint256[2][2][] h2) vk) returns (bytes32 circuitId)",
      "function renounceOwnership()",
      "function setCensorshipReimbursements(uint256 _fixedReimbursement)",
      "function setFeeRecipient(address _feeRecipient)",
      "function setOuterVerifier(address _outerVerifier, uint8 _maxNumPublicInputs)",
      "function setVersion(uint32 newVersion)",
      "function setWorker(address _worker)",
      "function submit(bytes32[] circuitIds, tuple(uint256 pA, uint256[2] pB, uint256 pC, uint256[] m, uint256[] pok)[] proofs, uint256[][] publicInputs) payable returns (bytes32 submissionId)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function verifiedSubmissionIdxForAllocatedFee() view returns (uint256)",
      "function verifyAggregatedProof(bytes proof, bytes32[] proofIds, uint16 numOnchainProofs, tuple(bytes32 submissionId, bytes32[] proof)[] submissionProofs, uint256 offChainSubmissionMarkers, uint256 duplicateSubmissionIndices)",
      "function verifyProofForIDs(bytes32[] proofIDs, bytes proof)",
      "function version() view returns (uint32)",
      "function withdrawAggregatorBalance()",
      "function worker() view returns (address)"
    ],
    "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA": [
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)",
      "event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0x55dd1039f19d840b39ef504eac8a631b912d707343588aed9ac96bd4e874f837"
  },
  "shapeFilesHash": "0xd03139725da7a90ddc934f324db29bfdcf99b30f55f1e1e28ed09af948c5cf67"
}
