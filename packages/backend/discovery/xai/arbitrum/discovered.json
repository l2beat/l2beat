{
  "name": "xai",
  "chain": "arbitrum",
  "blockNumber": 224114463,
  "configHash": "0xa7caf7dd35429b17066adafac238d7e9b3f20b723033f9c95adb6817565d4dab",
  "version": 7,
  "contracts": [
    {
      "name": "GnosisSafeAdminMember",
      "address": "0x000d8C5A70B8805DF02f409F2715d05B9A63E871",
      "template": "GnosisSafe",
      "ignoreInWatchMode": ["nonce"],
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "modules": [],
        "threshold": "1 of 3 (33%)"
      },
      "implementations": ["0x3E5c63644E683549055b9Be8653de26E0B4CD36E"],
      "sinceTimestamp": 1704399729,
      "values": {
        "domainSeparator": "0x68a609f0af4258398297b1edc4d762e009f2ed2c53dd0154752ebad6f0d88f68",
        "getChainId": 42161,
        "getOwners": [
          "0xc7185e37A4aB4Af0E77bC08249CD2590AE3E1b51",
          "0x2B95cdD1adD34461Fe737800c0D5A68d556B51b4",
          "0x7f910C718bAF6698FBF9b56e047ECd52d157bAD6"
        ],
        "getThreshold": 1,
        "nonce": 10,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafeL2"
    },
    {
      "name": "ProxyAdmin",
      "address": "0x041F85dD87c46B941dc9b15c6628B19ee5358485",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1704309371,
      "values": {
        "owner": "0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F"
      }
    },
    {
      "name": "UpgradeExecutor",
      "address": "0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1",
        "admin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485"
      },
      "implementations": ["0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1"],
      "sinceTimestamp": 1704309371,
      "values": {
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "ADMIN_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F"]
          },
          "EXECUTOR_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0x4972A8EF186Ee42A14Cdd3c47f52ec06a6dc495E"]
          }
        },
        "ADMIN_ROLE": "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63"
      },
      "derivedName": "UpgradeExecutor"
    },
    {
      "name": "OneStepProver0",
      "address": "0x1135265fE014D3FA32B3507E325642B92aFFeAEb",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700037168
    },
    {
      "name": "BucketTracker",
      "address": "0x1582e73D95F33E39B421F9224D9e7daF4508408E",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712865928,
      "values": {
        "_totalDividendsDistributed": 0,
        "decimals": 0,
        "esXaiAddress": "0x0000000000000000000000000000000000000000",
        "name": "",
        "owner": "0x0000000000000000000000000000000000000000",
        "symbol": "",
        "totalDividendsDistributed": 0,
        "totalSupply": 0,
        "trackerOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "Outbox",
      "address": "0x1E400568AD4840dbE50FB32f306B842e9ddeF726",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x302275067251F5FcdB9359Bda735fD8f7A4A54c0",
        "admin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485"
      },
      "implementations": ["0x302275067251F5FcdB9359Bda735fD8f7A4A54c0"],
      "sinceTimestamp": 1704309371,
      "values": {
        "bridge": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
        "l2ToL1BatchNum": 0,
        "l2ToL1Block": 0,
        "l2ToL1EthBlock": 0,
        "l2ToL1OutputId": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "l2ToL1Sender": "0x0000000000000000000000000000000000000000",
        "l2ToL1Timestamp": 0,
        "l2ToL1WithdrawalAmount": 0,
        "OUTBOX_VERSION": 2,
        "rollup": "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336"
      },
      "derivedName": "ERC20Outbox"
    },
    {
      "name": "L1GatewayRouter",
      "address": "0x22CCA5Dc96a4Ac1EC32c9c7C5ad4D66254a24C35",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xd106EC93D2c1adaA65C4B17ffc7bB166Ce30DDAe",
        "admin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485"
      },
      "implementations": ["0xd106EC93D2c1adaA65C4B17ffc7bB166Ce30DDAe"],
      "sinceTimestamp": 1704476020,
      "values": {
        "counterpartGateway": "0xd096e8dE90D34de758B0E0bA4a796eA2e1e272cF",
        "defaultGateway": "0xb591cE747CF19cF30e11d656EB94134F523A9e77",
        "inbox": "0xaE21fDA3de92dE2FDAF606233b2863782Ba046F9",
        "owner": "0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F",
        "router": "0x0000000000000000000000000000000000000000",
        "whitelist": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "L1OrbitGatewayRouter"
    },
    {
      "name": "ValidatorWalletCreator",
      "address": "0x2b0E04Dc90e3fA58165CB41E2834B44A56E766aF",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700037517,
      "values": {
        "owner": "0x7A9D9dAdDd745897c06e8664E1DC2702B6E6f341",
        "template": "0x82709E8564ce17707a7C8420c9e48e9a8A88bfc1"
      }
    },
    {
      "name": "ERC20RollupEventInbox",
      "address": "0x36aDe24988E4C47602e38BD9a0Bd89031eF807a8",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x18FD37A4FB9E1F06d9383958aFd236771F15A8cb",
        "admin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485"
      },
      "implementations": ["0x18FD37A4FB9E1F06d9383958aFd236771F15A8cb"],
      "sinceTimestamp": 1704309371,
      "values": {
        "bridge": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
        "rollup": "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336"
      }
    },
    {
      "name": "ChallengeManager",
      "address": "0x3a3f62034a42a35eA1686B199bB73006aa525eE4",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x09824fe72BFF474d16D9c2774432E381BBD60662",
        "admin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485"
      },
      "implementations": ["0x09824fe72BFF474d16D9c2774432E381BBD60662"],
      "sinceTimestamp": 1704309371,
      "values": {
        "bridge": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
        "osp": "0x99a2A31300816C1FA3f40818AC9280fe7271F878",
        "resultReceiver": "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336",
        "sequencerInbox": "0x995a9d3ca121D48d21087eDE20bc8acb2398c8B1",
        "totalChallengesCreated": 0
      },
      "derivedName": "ChallengeManager"
    },
    {
      "name": "OneStepProverMath",
      "address": "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700037242
    },
    {
      "name": "ExecutorMultisig",
      "address": "0x4972A8EF186Ee42A14Cdd3c47f52ec06a6dc495E",
      "template": "GnosisSafe",
      "ignoreInWatchMode": ["nonce"],
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "modules": [],
        "threshold": "3 of 5 (60%)"
      },
      "implementations": ["0x3E5c63644E683549055b9Be8653de26E0B4CD36E"],
      "sinceTimestamp": 1704757616,
      "values": {
        "domainSeparator": "0x27b1e0d86993064a41fc8bc771acd33688b725aa2b3dee2fc78dfecabf3bda44",
        "getChainId": 42161,
        "getOwners": [
          "0x000d8C5A70B8805DF02f409F2715d05B9A63E871",
          "0xa2E7768789921a36eCFe8c239dBd8213120fFF83",
          "0xD766Abf27CEc67393FF475f7fE969902f5D0A80A",
          "0x08a361fE449b1371cC21b286d88F69eF6d205809",
          "0xd4318D959B46d555143f56E03077028aB94D85d2"
        ],
        "getThreshold": 3,
        "nonce": 4,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafeL2"
    },
    {
      "name": "StakingPool",
      "address": "0x599C8489256Fb17b66d499d907F30b8022a29443",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712865925,
      "values": {
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "delegateOwner": "0x0000000000000000000000000000000000000000",
        "description": "",
        "esXaiAddress": "0x0000000000000000000000000000000000000000",
        "esXaiStakeBucket": "0x0000000000000000000000000000000000000000",
        "getDelegateOwner": "0x0000000000000000000000000000000000000000",
        "getPoolOwner": "0x0000000000000000000000000000000000000000",
        "getStakedKeys": [],
        "keyBucket": "0x0000000000000000000000000000000000000000",
        "keyBucketShare": 0,
        "logo": "",
        "name": "",
        "ownerShare": 0,
        "POOL_ADMIN": "0x12ad05bde78c5ab75238ce885307f96ecd482bb402ef831f99e7018a0f169b7b",
        "poolOwner": "0x0000000000000000000000000000000000000000",
        "poolOwnerClaimableRewards": 0,
        "refereeAddress": "0x0000000000000000000000000000000000000000",
        "socials": [],
        "stakedBucketShare": 0,
        "stakedKeys": []
      },
      "derivedName": "StakingPool"
    },
    {
      "name": "PoolBeacon",
      "address": "0x5f9D168d3435747335b1B3dC7e4d42e3510087C7",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712865929,
      "values": {
        "implementation": "0x599C8489256Fb17b66d499d907F30b8022a29443",
        "owner": "0x7C94E07bbf73518B0E25D1Be200a5b58F46F9dC7"
      }
    },
    {
      "name": "PoolProxyDeployer",
      "address": "0x68D78D1E81379EfD9C61f8E9131D52CE571AF4fD",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xb6773d5bF5b908B58ff5B7Bd36A7F06Da2EeeEc7",
        "admin": "0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723"
      },
      "implementations": ["0xb6773d5bF5b908B58ff5B7Bd36A7F06Da2EeeEc7"],
      "sinceTimestamp": 1712865943,
      "values": {
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "esXaiBeacon": "0x6Bc4e6B2c13Ba42e933b23AFAb8a58bbbBa5D02B",
        "keyBucketBeacon": "0xfB93c2e5E41BD0ffd2E99A88e6d2A8D4F542d39a",
        "poolBeacon": "0x5f9D168d3435747335b1B3dC7e4d42e3510087C7"
      }
    },
    {
      "name": "PoolBeacon",
      "address": "0x6Bc4e6B2c13Ba42e933b23AFAb8a58bbbBa5D02B",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712865932,
      "values": {
        "implementation": "0x1582e73D95F33E39B421F9224D9e7daF4508408E",
        "owner": "0x7C94E07bbf73518B0E25D1Be200a5b58F46F9dC7"
      }
    },
    {
      "name": "ValidatorUtils",
      "address": "0x6c21303F5986180B1394d2C89f3e883890E2867b",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700037477
    },
    {
      "name": "Bridge",
      "address": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
      "ignoreInWatchMode": [
        "delayedMessageCount",
        "sequencerMessageCount",
        "sequencerReportedSubMessageCount"
      ],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC",
        "admin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485"
      },
      "implementations": ["0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC"],
      "sinceTimestamp": 1704309371,
      "values": {
        "activeOutbox": "0x0000000000000000000000000000000000000000",
        "allowedDelayedInboxList": [
          "0xaE21fDA3de92dE2FDAF606233b2863782Ba046F9",
          "0x36aDe24988E4C47602e38BD9a0Bd89031eF807a8"
        ],
        "allowedOutboxList": ["0x1E400568AD4840dbE50FB32f306B842e9ddeF726"],
        "delayedMessageCount": 31234,
        "nativeToken": "0x4Cb9a7AE498CEDcBb5EAe9f25736aE7d428C9D66",
        "rollup": "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336",
        "sequencerInbox": "0x995a9d3ca121D48d21087eDE20bc8acb2398c8B1",
        "sequencerMessageCount": 20361,
        "sequencerReportedSubMessageCount": 10899060
      },
      "derivedName": "ERC20Bridge"
    },
    {
      "name": "",
      "address": "0x82709E8564ce17707a7C8420c9e48e9a8A88bfc1",
      "unverified": true,
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700037517
    },
    {
      "name": "OneStepProverHostIo",
      "address": "0x89AF7C4C2198c426cFe6E86de0680A0850503e06",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700037277
    },
    {
      "name": "GasSubsidy",
      "address": "0x94F4aBC83eae00b693286B6eDCa09e1D76183C97",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xF208798482F0b12c8767Bc03cC0F145D18BeCe6A",
        "admin": "0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723"
      },
      "implementations": ["0xF208798482F0b12c8767Bc03cC0F145D18BeCe6A"],
      "sinceTimestamp": 1701801219,
      "values": {
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "TRANSFER_ROLE": "0x8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c"
      }
    },
    {
      "name": "SequencerInbox",
      "address": "0x995a9d3ca121D48d21087eDE20bc8acb2398c8B1",
      "template": "orbitstack/SequencerInbox",
      "descriptions": ["State batches / commitments get posted here."],
      "ignoreInWatchMode": ["batchCount", "totalDelayedMessagesRead"],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F",
        "admin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485"
      },
      "implementations": ["0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F"],
      "sinceTimestamp": 1704309371,
      "values": {
        "batchCount": 20361,
        "batchPosters": ["0x7F68dba68E72a250004812fe04F1123Fca89aBa9"],
        "bridge": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
        "dacKeyset": {
          "requiredSignatures": 5,
          "membersCount": 6
        },
        "DATA_AUTHENTICATED_FLAG": "0x40",
        "HEADER_LENGTH": 40,
        "keySetUpdates": 4,
        "maxDataSize": 104857,
        "maxTimeVariation": {
          "delayBlocks": 5760,
          "futureBlocks": 96,
          "delaySeconds": 86400,
          "futureSeconds": 3600
        },
        "rollup": "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336",
        "sequencerVersion": "0x88",
        "setIsBatchPosterCount": 1,
        "totalDelayedMessagesRead": 31233
      },
      "derivedName": "SequencerInbox"
    },
    {
      "name": "OneStepProofEntry",
      "address": "0x99a2A31300816C1FA3f40818AC9280fe7271F878",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700037315,
      "values": {
        "prover0": "0x1135265fE014D3FA32B3507E325642B92aFFeAEb",
        "proverHostIo": "0x89AF7C4C2198c426cFe6E86de0680A0850503e06",
        "proverMath": "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1",
        "proverMem": "0xDf94F0474F205D086dbc2e66D69a856FCf520622"
      }
    },
    {
      "name": "BucketTracker",
      "address": "0xa83825Dc4D94513d1C907b319EE8224FA63A29B2",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712865927,
      "values": {
        "_totalDividendsDistributed": 0,
        "decimals": 0,
        "esXaiAddress": "0x0000000000000000000000000000000000000000",
        "name": "",
        "owner": "0x0000000000000000000000000000000000000000",
        "symbol": "",
        "totalDividendsDistributed": 0,
        "totalSupply": 0,
        "trackerOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "Inbox",
      "address": "0xaE21fDA3de92dE2FDAF606233b2863782Ba046F9",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab",
        "admin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485"
      },
      "implementations": ["0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab"],
      "sinceTimestamp": 1704309371,
      "values": {
        "allowListEnabled": false,
        "bridge": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
        "getProxyAdmin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485",
        "maxDataSize": 104857,
        "paused": false,
        "sequencerInbox": "0x995a9d3ca121D48d21087eDE20bc8acb2398c8B1"
      },
      "derivedName": "ERC20Inbox"
    },
    {
      "name": "L1ERC20Gateway",
      "address": "0xb591cE747CF19cF30e11d656EB94134F523A9e77",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f",
        "admin": "0x041F85dD87c46B941dc9b15c6628B19ee5358485"
      },
      "implementations": ["0x8b73Ef238ADaB31EBC7c05423d243c345241a22f"],
      "sinceTimestamp": 1704476020,
      "values": {
        "cloneableProxyHash": "0xce61ab08155a3a368bfd165ba9e1151d023608a155fce1ec0d87bba89a59cb4d",
        "counterpartGateway": "0x0c71417917D24F4A6A6A55559B98c5cCEcb33F7a",
        "inbox": "0xaE21fDA3de92dE2FDAF606233b2863782Ba046F9",
        "l2BeaconProxyFactory": "0xC65de812db42Bfa8bd4E0fCf6ffcad8fe3072D44",
        "router": "0x22CCA5Dc96a4Ac1EC32c9c7C5ad4D66254a24C35",
        "whitelist": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "L1OrbitERC20Gateway"
    },
    {
      "name": "NodeLicenseRegistry",
      "address": "0xbc14d8563b248B79689ECbc43bBa53290e0b6b66",
      "ignoreInWatchMode": ["totalSupply"],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xfD6Bb931D2Ee134E70568ca36584c043cB278734",
        "admin": "0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723"
      },
      "implementations": ["0xfD6Bb931D2Ee134E70568ca36584c043cB278734"],
      "sinceTimestamp": 1701801243,
      "values": {
        "claimable": true,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "fundsReceiver": "0xFCF7248C495d6fd3641eE43F861c48Ebe402c878",
        "getPricingTiersLength": 40,
        "maxSupply": 50000,
        "name": "Sentry Node License",
        "referralDiscountPercentage": 5,
        "referralRewardPercentage": 15,
        "symbol": "SNL",
        "totalSupply": 35174
      },
      "derivedName": "NodeLicense5"
    },
    {
      "name": "RollupProxy",
      "address": "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336",
      "template": "orbitstack/RollupProxy",
      "descriptions": [
        "Manages rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs."
      ],
      "ignoreInWatchMode": [
        "firstUnresolvedNode",
        "latestConfirmed",
        "latestNodeCreated"
      ],
      "upgradeability": {
        "type": "Arbitrum proxy",
        "admin": "0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F",
        "adminImplementation": "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754",
        "userImplementation": "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A"
      },
      "implementations": [
        "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754",
        "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A"
      ],
      "sinceTimestamp": 1704309371,
      "values": {
        "baseStake": "100000000000000000",
        "bridge": "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f",
        "chainId": 660279,
        "challengeManager": "0x3a3f62034a42a35eA1686B199bB73006aa525eE4",
        "challenges": [],
        "confirmPeriodBlocks": 45818,
        "currentRequiredStake": "100000000000000000",
        "extraChallengeTimeBlocks": 0,
        "firstUnresolvedNode": 3770,
        "inbox": "0xaE21fDA3de92dE2FDAF606233b2863782Ba046F9",
        "isERC20Enabled": false,
        "lastStakeBlock": 18944658,
        "latestConfirmed": 3769,
        "latestNodeCreated": 3922,
        "loserStakeEscrow": "0x0000000000000000000000000000000000000000",
        "minimumAssertionPeriod": 75,
        "outbox": "0x1E400568AD4840dbE50FB32f306B842e9ddeF726",
        "owner": "0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F",
        "paused": false,
        "rollupDeploymentBlock": 18928845,
        "rollupEventInbox": "0x36aDe24988E4C47602e38BD9a0Bd89031eF807a8",
        "sequencerInbox": "0x995a9d3ca121D48d21087eDE20bc8acb2398c8B1",
        "setValidatorCount": 1,
        "stakerCount": 1,
        "stakeToken": "0x0000000000000000000000000000000000000000",
        "totalWithdrawableFunds": 0,
        "VALIDATOR_AFK_BLOCKS": 45818,
        "validators": ["0x25EA41f0bDa921a0eBf48291961B1F10b59BC6b8"],
        "validatorUtils": "0x6c21303F5986180B1394d2C89f3e883890E2867b",
        "validatorWalletCreator": "0x2b0E04Dc90e3fA58165CB41E2834B44A56E766aF",
        "validatorWhitelistDisabled": false,
        "wasmModuleRoot": "0x68e4fe5023f792d4ef584796c84d710303a5e12ea02d6e37e2b5e9c4332507c4",
        "zombieAddress": [],
        "zombieCount": 0,
        "zombieLatestStakedNode": []
      },
      "derivedName": "RollupProxy"
    },
    {
      "name": "StakingProxyAdmin",
      "address": "0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1701801208,
      "values": {
        "owner": "0x7C94E07bbf73518B0E25D1Be200a5b58F46F9dC7"
      },
      "derivedName": "ProxyAdmin"
    },
    {
      "name": "OneStepProverMemory",
      "address": "0xDf94F0474F205D086dbc2e66D69a856FCf520622",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1700037203
    },
    {
      "name": "PoolFactory",
      "address": "0xF9E08660223E2dbb1c0b28c82942aB6B5E38b8E5",
      "ignoreInWatchMode": ["getPoolsCount"],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x21EEC6626f15d02A8896ebB7EDD68ff3CB61e89E",
        "admin": "0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723"
      },
      "implementations": ["0x21EEC6626f15d02A8896ebB7EDD68ff3CB61e89E"],
      "sinceTimestamp": 1712865940,
      "values": {
        "bucketshareMaxValues": [100000, 950000, 850000],
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "deployerAddress": "0x68D78D1E81379EfD9C61f8E9131D52CE571AF4fD",
        "esXaiAddress": "0x4C749d097832DE2FEcc989ce18fDc5f1BD76700c",
        "getPoolsCount": 227,
        "nodeLicenseAddress": "0xbc14d8563b248B79689ECbc43bBa53290e0b6b66",
        "refereeAddress": "0xfD41041180571C5D371BEA3D9550E55653671198",
        "stakingEnabled": true,
        "unstakeEsXaiDelayPeriod": 604800,
        "unstakeGenesisKeyDelayPeriod": 5184000,
        "unstakeKeysDelayPeriod": 604800,
        "updateRewardBreakdownDelayPeriod": 1209600
      },
      "derivedName": "PoolFactory"
    },
    {
      "name": "PoolBeacon",
      "address": "0xfB93c2e5E41BD0ffd2E99A88e6d2A8D4F542d39a",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1712865934,
      "values": {
        "implementation": "0xa83825Dc4D94513d1C907b319EE8224FA63A29B2",
        "owner": "0x7C94E07bbf73518B0E25D1Be200a5b58F46F9dC7"
      }
    },
    {
      "name": "FundsReiceiverMultisig",
      "address": "0xFCF7248C495d6fd3641eE43F861c48Ebe402c878",
      "template": "GnosisSafe",
      "descriptions": [
        "The designated fundsReceiver in the NodeLicenseRegistry. Receives all ETH from 'Sentry Node License' mints."
      ],
      "ignoreInWatchMode": ["nonce"],
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "modules": [],
        "threshold": "3 of 6 (50%)"
      },
      "implementations": ["0x3E5c63644E683549055b9Be8653de26E0B4CD36E"],
      "sinceTimestamp": 1701577782,
      "values": {
        "domainSeparator": "0x0f84f5102dd9fea36a3e0099c9a4da5d3e2def631c0fe4cd8fd30ae7c261b379",
        "getChainId": 42161,
        "getOwners": [
          "0xd427165292B2E39cdac102eD963B14fFBACc964a",
          "0x1f097F3f928415cD28e1B2cC6f0F3960f4fCa6fc",
          "0xbBE90F6748C82623F130A4486722a436c5a72440",
          "0xE529a3271f9CC84B1FE9107ab4764a8dF177782a",
          "0x807daF80b03Fd3C2709FFe0AeBEED617BC0a347c",
          "0xfc6F0d26f817Bd31AeD0e8922575d1fb8bD7A894"
        ],
        "getThreshold": 3,
        "nonce": 52,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafeL2"
    },
    {
      "name": "SentryReferee",
      "address": "0xfD41041180571C5D371BEA3D9550E55653671198",
      "ignoreInWatchMode": [
        "challengeCounter",
        "getKycWalletCount",
        "calculateChallengeEmissionAndTier"
      ],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x609152cb742916E0F7FBC4391Be750C458b049fe",
        "admin": "0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723"
      },
      "implementations": ["0x609152cb742916E0F7FBC4391Be750C458b049fe"],
      "sinceTimestamp": 1701801226,
      "values": {
        "calculateChallengeEmissionAndTier": [
          "35673515981735159817351",
          "625000000000000000000000000"
        ],
        "challengeCounter": 4662,
        "CHALLENGER_ROLE": "0xe752add323323eb13e36c71ee508dfd16d74e9e4c4fd78786ba97989e5e13818",
        "challengerPublicKey": "0x977f9fe1d570ba7e48ea76566718023b260ed56eba368ff20dca06e99e650804126663c1a5febdb065ef139a0156a9ad",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "esXaiAddress": "0x4C749d097832DE2FEcc989ce18fDc5f1BD76700c",
        "gasSubsidyRecipient": "0x94F4aBC83eae00b693286B6eDCa09e1D76183C97",
        "getKycWalletCount": 6519,
        "isCheckingAssertions": true,
        "KYC_ADMIN_ROLE": "0x811427a0fa4932aef534bba16bc34e9b7b2d7d2a79c475fca1765f6cc1faebea",
        "maxKeysPerPool": 1000,
        "maxStakeAmountPerLicense": "20000000000000000000000",
        "nodeLicenseAddress": "0xbc14d8563b248B79689ECbc43bBa53290e0b6b66",
        "poolFactoryAddress": "0xF9E08660223E2dbb1c0b28c82942aB6B5E38b8E5",
        "rollupAddress": "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336",
        "stakeAmountBoostFactors": [150, 200, 300, 700],
        "stakeAmountTierThresholds": [
          "30000000000000000000000",
          "2000000000000000000000000",
          "4000000000000000000000000",
          "8000000000000000000000000"
        ],
        "stakingEnabled": true,
        "xaiAddress": "0x4Cb9a7AE498CEDcBb5EAe9f25736aE7d428C9D66"
      },
      "derivedName": "Referee8"
    }
  ],
  "eoas": [
    "0x0000000000000000000000000000000000000000",
    "0x08a361fE449b1371cC21b286d88F69eF6d205809",
    "0x0c71417917D24F4A6A6A55559B98c5cCEcb33F7a",
    "0x1f097F3f928415cD28e1B2cC6f0F3960f4fCa6fc",
    "0x25EA41f0bDa921a0eBf48291961B1F10b59BC6b8",
    "0x2B95cdD1adD34461Fe737800c0D5A68d556B51b4",
    "0x7A9D9dAdDd745897c06e8664E1DC2702B6E6f341",
    "0x7C94E07bbf73518B0E25D1Be200a5b58F46F9dC7",
    "0x7F68dba68E72a250004812fe04F1123Fca89aBa9",
    "0x7f910C718bAF6698FBF9b56e047ECd52d157bAD6",
    "0x807daF80b03Fd3C2709FFe0AeBEED617BC0a347c",
    "0xa2E7768789921a36eCFe8c239dBd8213120fFF83",
    "0xbBE90F6748C82623F130A4486722a436c5a72440",
    "0xC65de812db42Bfa8bd4E0fCf6ffcad8fe3072D44",
    "0xc7185e37A4aB4Af0E77bC08249CD2590AE3E1b51",
    "0xd096e8dE90D34de758B0E0bA4a796eA2e1e272cF",
    "0xd427165292B2E39cdac102eD963B14fFBACc964a",
    "0xd4318D959B46d555143f56E03077028aB94D85d2",
    "0xD766Abf27CEc67393FF475f7fE969902f5D0A80A",
    "0xE529a3271f9CC84B1FE9107ab4764a8dF177782a",
    "0xfc6F0d26f817Bd31AeD0e8922575d1fb8bD7A894"
  ],
  "abis": {
    "0x000d8C5A70B8805DF02f409F2715d05B9A63E871": [
      "constructor(address _singleton)"
    ],
    "0x041F85dD87c46B941dc9b15c6628B19ee5358485": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x09824fe72BFF474d16D9c2774432E381BBD60662": [
      "event Bisected(uint64 indexed challengeIndex, bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)",
      "event ChallengeEnded(uint64 indexed challengeIndex, uint8 kind)",
      "event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps)",
      "event InitiatedChallenge(uint64 indexed challengeIndex, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) startState, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) endState)",
      "event OneStepProofCompleted(uint64 indexed challengeIndex)",
      "function bisectExecution(uint64 challengeIndex, tuple(uint256 oldSegmentsStart, uint256 oldSegmentsLength, bytes32[] oldSegments, uint256 challengePosition) selection, bytes32[] newSegments)",
      "function bridge() view returns (address)",
      "function challengeExecution(uint64 challengeIndex, tuple(uint256 oldSegmentsStart, uint256 oldSegmentsLength, bytes32[] oldSegments, uint256 challengePosition) selection, uint8[2] machineStatuses, bytes32[2] globalStateHashes, uint256 numSteps)",
      "function challengeInfo(uint64 challengeIndex) view returns (tuple(tuple(address addr, uint256 timeLeft) current, tuple(address addr, uint256 timeLeft) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode))",
      "function challenges(uint256) view returns (tuple(address addr, uint256 timeLeft) current, tuple(address addr, uint256 timeLeft) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode)",
      "function clearChallenge(uint64 challengeIndex)",
      "function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals)[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns (uint64)",
      "function currentResponder(uint64 challengeIndex) view returns (address)",
      "function initialize(address resultReceiver_, address sequencerInbox_, address bridge_, address osp_)",
      "function isTimedOut(uint64 challengeIndex) view returns (bool)",
      "function oneStepProveExecution(uint64 challengeIndex, tuple(uint256 oldSegmentsStart, uint256 oldSegmentsLength, bytes32[] oldSegments, uint256 challengePosition) selection, bytes proof)",
      "function osp() view returns (address)",
      "function resultReceiver() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function timeout(uint64 challengeIndex)",
      "function totalChallengesCreated() view returns (uint64)"
    ],
    "0x0aE4dD666748bF0F6dB5c149Eab1D8aD27820A6A": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)",
      "event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)",
      "event NodeRejected(uint64 indexed nodeNum)",
      "event Paused(address account)",
      "event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)",
      "event RollupInitialized(bytes32 machineHash, uint256 chainId)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "function VALIDATOR_AFK_BLOCKS() view returns (uint256)",
      "function _stakerMap(address) view returns (uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)",
      "function addToDeposit(address stakerAddress) payable",
      "function amountStaked(address staker) view returns (uint256)",
      "function baseStake() view returns (uint256)",
      "function bridge() view returns (address)",
      "function chainId() view returns (uint256)",
      "function challengeManager() view returns (address)",
      "function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker)",
      "function confirmNextNode(bytes32 blockHash, bytes32 sendRoot)",
      "function confirmPeriodBlocks() view returns (uint64)",
      "function countStakedZombies(uint64 nodeNum) view returns (uint256)",
      "function countZombiesStakedOnChildren(uint64 nodeNum) view returns (uint256)",
      "function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals)[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots)",
      "function currentChallenge(address staker) view returns (uint64)",
      "function currentRequiredStake() view returns (uint256)",
      "function extraChallengeTimeBlocks() view returns (uint64)",
      "function firstUnresolvedNode() view returns (uint64)",
      "function getNode(uint64 nodeNum) view returns (tuple(bytes32 stateHash, bytes32 challengeHash, bytes32 confirmData, uint64 prevNum, uint64 deadlineBlock, uint64 noChildConfirmedBeforeBlock, uint64 stakerCount, uint64 childStakerCount, uint64 firstChildBlock, uint64 latestChildNumber, uint64 createdAtBlock, bytes32 nodeHash))",
      "function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns (uint256)",
      "function getStaker(address staker) view returns (tuple(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked))",
      "function getStakerAddress(uint64 stakerNum) view returns (address)",
      "function inbox() view returns (address)",
      "function initialize(address _stakeToken) view",
      "function isERC20Enabled() view returns (bool)",
      "function isStaked(address staker) view returns (bool)",
      "function isStakedOnLatestConfirmed(address staker) view returns (bool)",
      "function isValidator(address) view returns (bool)",
      "function isZombie(address staker) view returns (bool)",
      "function lastStakeBlock() view returns (uint64)",
      "function latestConfirmed() view returns (uint64)",
      "function latestNodeCreated() view returns (uint64)",
      "function latestStakedNode(address staker) view returns (uint64)",
      "function loserStakeEscrow() view returns (address)",
      "function minimumAssertionPeriod() view returns (uint256)",
      "function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable",
      "function newStakeOnNewNode(tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable",
      "function nodeHasStaker(uint64 nodeNum, address staker) view returns (bool)",
      "function outbox() view returns (address)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function reduceDeposit(uint256 target)",
      "function rejectNextNode(address stakerAddress)",
      "function removeOldZombies(uint256 startIndex)",
      "function removeWhitelistAfterFork()",
      "function removeWhitelistAfterValidatorAfk()",
      "function removeZombie(uint256 zombieNum, uint256 maxNodes)",
      "function requireUnresolved(uint256 nodeNum) view",
      "function requireUnresolvedExists() view",
      "function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns (uint256)",
      "function returnOldDeposit(address stakerAddress)",
      "function rollupDeploymentBlock() view returns (uint256)",
      "function rollupEventInbox() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash)",
      "function stakeOnNewNode(tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount)",
      "function stakeToken() view returns (address)",
      "function stakerCount() view returns (uint64)",
      "function totalWithdrawableFunds() view returns (uint256)",
      "function validatorUtils() view returns (address)",
      "function validatorWalletCreator() view returns (address)",
      "function validatorWhitelistDisabled() view returns (bool)",
      "function wasmModuleRoot() view returns (bytes32)",
      "function withdrawStakerFunds() returns (uint256)",
      "function withdrawableFunds(address user) view returns (uint256)",
      "function zombieAddress(uint256 zombieNum) view returns (address)",
      "function zombieCount() view returns (uint256)",
      "function zombieLatestStakedNode(uint256 zombieNum) view returns (uint64)"
    ],
    "0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x1135265fE014D3FA32B3507E325642B92aFFeAEb": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge), tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) pure returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, uint32 internalsOffset) mod)"
    ],
    "0x1582e73D95F33E39B421F9224D9e7daF4508408E": [
      "event Claim(address indexed account, uint256 amount)",
      "event DividendWithdrawn(address indexed to, uint256 weiAmount)",
      "event DividendsDistributed(address indexed from, uint256 weiAmount)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function _totalDividendsDistributed() view returns (uint256)",
      "function accumulativeDividendOf(address _owner) view returns (uint256)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint256)",
      "function distributeDividends(uint256 amount)",
      "function esXaiAddress() view returns (address)",
      "function getAccount(address _account) view returns (address account, uint256 withdrawableDividends, uint256 totalDividends, uint256 lastClaimTime)",
      "function initialize(address _trackerOwner, address _esXaiAddress, string __name, string __symbol, uint256 __decimals)",
      "function lastClaimTimes(address) view returns (uint256)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function processAccount(address account) returns (bool)",
      "function setBalance(address account, uint256 newBalance)",
      "function symbol() view returns (string)",
      "function totalDividendsDistributed() view returns (uint256)",
      "function totalSupply() view returns (uint256)",
      "function trackerOwner() view returns (address)",
      "function withdrawableDividendOf(address _owner) view returns (uint256)",
      "function withdrawnDividendOf(address _owner) view returns (uint256)"
    ],
    "0x18FD37A4FB9E1F06d9383958aFd236771F15A8cb": [
      "constructor()",
      "error AlreadyInit()",
      "error HadZeroInit()",
      "error NotOwner(address sender, address owner)",
      "error RollupNotChanged()",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "function bridge() view returns (address)",
      "function initialize(address _bridge)",
      "function rollup() view returns (address)",
      "function rollupInitialized(uint256 chainId, string chainConfig)",
      "function updateRollupAddress()"
    ],
    "0x1c6ACCd9d66f3B993928E7439c9A2d67b94a445F": [
      "constructor(uint256 _maxDataSize)",
      "error AlreadyInit()",
      "error AlreadyValidDASKeyset(bytes32)",
      "error BadSequencerNumber(uint256 stored, uint256 received)",
      "error DataNotAuthenticated()",
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error DelayedBackwards()",
      "error DelayedTooFar()",
      "error ForceIncludeBlockTooSoon()",
      "error ForceIncludeTimeTooSoon()",
      "error HadZeroInit()",
      "error IncorrectMessagePreimage()",
      "error NoSuchKeyset(bytes32)",
      "error NotBatchPoster()",
      "error NotForked()",
      "error NotOrigin()",
      "error NotOwner(address sender, address owner)",
      "error RollupNotChanged()",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event InvalidateKeyset(bytes32 indexed keysetHash)",
      "event OwnerFunctionCalled(uint256 indexed id)",
      "event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data)",
      "event SequencerBatchDelivered(uint256 indexed batchSequenceNumber, bytes32 indexed beforeAcc, bytes32 indexed afterAcc, bytes32 delayedAcc, uint256 afterDelayedMessagesRead, tuple(uint64 minTimestamp, uint64 maxTimestamp, uint64 minBlockNumber, uint64 maxBlockNumber) timeBounds, uint8 dataLocation)",
      "event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes)",
      "function DATA_AUTHENTICATED_FLAG() view returns (bytes1)",
      "function HEADER_LENGTH() view returns (uint256)",
      "function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount)",
      "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder)",
      "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount)",
      "function batchCount() view returns (uint256)",
      "function bridge() view returns (address)",
      "function dasKeySetInfo(bytes32) view returns (bool isValidKeyset, uint64 creationBlock)",
      "function forceInclusion(uint256 _totalDelayedMessagesRead, uint8 kind, uint64[2] l1BlockAndTime, uint256 baseFeeL1, address sender, bytes32 messageDataHash)",
      "function getKeysetCreationBlock(bytes32 ksHash) view returns (uint256)",
      "function inboxAccs(uint256 index) view returns (bytes32)",
      "function initialize(address bridge_, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation_)",
      "function invalidateKeysetHash(bytes32 ksHash)",
      "function isBatchPoster(address) view returns (bool)",
      "function isSequencer(address) view returns (bool)",
      "function isValidKeysetHash(bytes32 ksHash) view returns (bool)",
      "function maxDataSize() view returns (uint256)",
      "function maxTimeVariation() view returns (uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds)",
      "function removeDelayAfterFork()",
      "function rollup() view returns (address)",
      "function setIsBatchPoster(address addr, bool isBatchPoster_)",
      "function setIsSequencer(address addr, bool isSequencer_)",
      "function setMaxTimeVariation(tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation_)",
      "function setValidKeyset(bytes keysetBytes)",
      "function totalDelayedMessagesRead() view returns (uint256)",
      "function updateRollupAddress()"
    ],
    "0x1E400568AD4840dbE50FB32f306B842e9ddeF726": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x21EEC6626f15d02A8896ebB7EDD68ff3CB61e89E": [
      "event ClaimFromPool(address indexed user, address indexed pool)",
      "event Initialized(uint8 version)",
      "event PoolCreated(uint256 indexed poolIndex, address indexed poolAddress, address indexed poolOwner, uint256 stakedKeyCount)",
      "event PoolProxyDeployerUpdated(address oldDeployer, address newDeployer)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StakeEsXai(address indexed user, address indexed pool, uint256 amount, uint256 totalUserEsXaiStaked, uint256 totalEsXaiStaked)",
      "event StakeKeys(address indexed user, address indexed pool, uint256 amount, uint256 totalUserKeysStaked, uint256 totalKeysStaked)",
      "event StakingEnabled()",
      "event UnstakeEsXai(address indexed user, address indexed pool, uint256 amount, uint256 totalUserEsXaiStaked, uint256 totalEsXaiStaked)",
      "event UnstakeKeys(address indexed user, address indexed pool, uint256 amount, uint256 totalUserKeysStaked, uint256 totalKeysStaked)",
      "event UnstakeRequestStarted(address indexed user, address indexed pool, uint256 indexed index, uint256 amount, bool isKey)",
      "event UpdateDelayPeriods()",
      "event UpdateMetadata(address indexed pool)",
      "event UpdatePoolDelegate(address indexed delegate, address indexed pool)",
      "event UpdateShares(address indexed pool)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function bucketshareMaxValues(uint256) view returns (uint32)",
      "function checkKeysAreStaked(uint256[] keyIds) view returns (bool[] isStaked)",
      "function claimFromPools(address[] pools)",
      "function createPool(address _delegateOwner, uint256[] _keyIds, uint32[3] _shareConfig, string[3] _poolMetadata, string[] _poolSocials, string[2][2] trackerDetails)",
      "function createUnstakeEsXaiRequest(address pool, uint256 amount)",
      "function createUnstakeKeyRequest(address pool, uint256 keyAmount)",
      "function createUnstakeOwnerLastKeyRequest(address pool)",
      "function deployerAddress() view returns (address)",
      "function enableStaking()",
      "function esXaiAddress() view returns (address)",
      "function getDelegatePools(address delegate) view returns (address[])",
      "function getPoolAddress(uint256 poolIndex) view returns (address)",
      "function getPoolAddressOfUser(address user, uint256 index) view returns (address)",
      "function getPoolIndicesOfUser(address user) view returns (address[])",
      "function getPoolsCount() view returns (uint256)",
      "function getPoolsOfUserCount(address user) view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getUnstakedKeyIdsFromUser(address user, uint16 offset, uint16 pageLimit) view returns (uint256[] unstakedKeyIds)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _refereeAddress, address _esXaiAddress, address _nodeLicenseAddress)",
      "function interactedPoolsOfUser(address, uint256) view returns (address)",
      "function isDelegateOfPoolOrOwner(address delegate, address pool) view returns (bool)",
      "function nodeLicenseAddress() view returns (address)",
      "function poolsCreatedViaFactory(address) view returns (bool)",
      "function poolsOfDelegate(address, uint256) view returns (address)",
      "function poolsOfDelegateIndices(address) view returns (uint256)",
      "function refereeAddress() view returns (address)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function stakeEsXai(address pool, uint256 amount)",
      "function stakeKeys(address pool, uint256[] keyIds)",
      "function stakingEnabled() view returns (bool)",
      "function stakingPools(uint256) view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unstakeEsXai(address pool, uint256 unstakeRequestIndex, uint256 amount)",
      "function unstakeEsXaiDelayPeriod() view returns (uint256)",
      "function unstakeGenesisKeyDelayPeriod() view returns (uint256)",
      "function unstakeKeys(address pool, uint256 unstakeRequestIndex, uint256[] keyIds)",
      "function unstakeKeysDelayPeriod() view returns (uint256)",
      "function updateDelayPeriods(uint256 _unstakeKeysDelayPeriod, uint256 _unstakeGenesisKeyDelayPeriod, uint256 _unstakeEsXaiDelayPeriod, uint256 _updateRewardBreakdownDelayPeriod)",
      "function updateDelegateOwner(address pool, address delegate)",
      "function updatePoolMetadata(address pool, string[3] _poolMetadata, string[] _poolSocials)",
      "function updatePoolProxyDeployer(address newDeployer)",
      "function updateRewardBreakdownDelayPeriod() view returns (uint256)",
      "function updateShares(address pool, uint32[3] _shareConfig)",
      "function userToInteractedPoolIds(address, address) view returns (uint256)"
    ],
    "0x22CCA5Dc96a4Ac1EC32c9c7C5ad4D66254a24C35": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x2a6DD4433ffa96dc1755814FC0d9cc83A5F68DeC": [
      "error BadSequencerMessageNumber(uint256 stored, uint256 received)",
      "error CallNotAllowed()",
      "error CallTargetNotAllowed(address target)",
      "error InvalidOutboxSet(address outbox)",
      "error InvalidTokenSet(address token)",
      "error NotContract(address addr)",
      "error NotDelayedInbox(address sender)",
      "error NotOutbox(address sender)",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error NotSequencerInbox(address sender)",
      "event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)",
      "event InboxToggle(address indexed inbox, bool enabled)",
      "event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)",
      "event OutboxToggle(address indexed outbox, bool enabled)",
      "event RollupUpdated(address rollup)",
      "event SequencerInboxUpdated(address newSequencerInbox)",
      "function acceptFundsFromOldBridge() payable",
      "function activeOutbox() view returns (address)",
      "function allowedDelayedInboxList(uint256) view returns (address)",
      "function allowedDelayedInboxes(address inbox) view returns (bool)",
      "function allowedOutboxList(uint256) view returns (address)",
      "function allowedOutboxes(address outbox) view returns (bool)",
      "function delayedInboxAccs(uint256) view returns (bytes32)",
      "function delayedMessageCount() view returns (uint256)",
      "function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash, uint256 tokenFeeAmount) returns (uint256)",
      "function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns (uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)",
      "function executeCall(address to, uint256 value, bytes data) returns (bool success, bytes returnData)",
      "function initialize(address rollup_, address nativeToken_)",
      "function nativeToken() view returns (address)",
      "function rollup() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function sequencerInboxAccs(uint256) view returns (bytes32)",
      "function sequencerMessageCount() view returns (uint256)",
      "function sequencerReportedSubMessageCount() view returns (uint256)",
      "function setDelayedInbox(address inbox, bool enabled)",
      "function setOutbox(address outbox, bool enabled)",
      "function setSequencerInbox(address _sequencerInbox)",
      "function setSequencerReportedSubMessageCount(uint256 newMsgCount)",
      "function submitBatchSpendingReport(address sender, bytes32 messageDataHash) returns (uint256)",
      "function updateRollupAddress(address _rollup)"
    ],
    "0x2b0E04Dc90e3fA58165CB41E2834B44A56E766aF": [
      "constructor()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event TemplateUpdated()",
      "event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)",
      "function createWallet(address[] initialExecutorAllowedDests) returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setTemplate(address _template)",
      "function template() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x302275067251F5FcdB9359Bda735fD8f7A4A54c0": [
      "error AlreadyInit()",
      "error AlreadySpent(uint256 index)",
      "error BadPostUpgradeInit()",
      "error BridgeCallFailed()",
      "error HadZeroInit()",
      "error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength)",
      "error NotOwner(address sender, address owner)",
      "error NotRollup(address sender, address rollup)",
      "error PathNotMinimal(uint256 index, uint256 maxIndex)",
      "error ProofTooLong(uint256 proofLength)",
      "error RollupNotChanged()",
      "error SimulationOnlyEntrypoint()",
      "error UnknownRoot(bytes32 root)",
      "event OutBoxTransactionExecuted(address indexed to, address indexed l2Sender, uint256 indexed zero, uint256 transactionIndex)",
      "event SendRootUpdated(bytes32 indexed outputRoot, bytes32 indexed l2BlockHash)",
      "function OUTBOX_VERSION() view returns (uint128)",
      "function bridge() view returns (address)",
      "function calculateItemHash(address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data) pure returns (bytes32)",
      "function calculateMerkleRoot(bytes32[] proof, uint256 path, bytes32 item) pure returns (bytes32)",
      "function executeTransaction(bytes32[] proof, uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)",
      "function executeTransactionSimulation(uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)",
      "function initialize(address _bridge)",
      "function isSpent(uint256 index) view returns (bool)",
      "function l2ToL1BatchNum() pure returns (uint256)",
      "function l2ToL1Block() view returns (uint256)",
      "function l2ToL1EthBlock() view returns (uint256)",
      "function l2ToL1OutputId() view returns (bytes32)",
      "function l2ToL1Sender() view returns (address)",
      "function l2ToL1Timestamp() view returns (uint256)",
      "function l2ToL1WithdrawalAmount() view returns (uint256)",
      "function postUpgradeInit()",
      "function rollup() view returns (address)",
      "function roots(bytes32) view returns (bytes32)",
      "function spent(uint256) view returns (bytes32)",
      "function updateRollupAddress()",
      "function updateSendRoot(bytes32 root, bytes32 l2BlockHash)"
    ],
    "0x36aDe24988E4C47602e38BD9a0Bd89031eF807a8": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x3a3f62034a42a35eA1686B199bB73006aa525eE4": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x3E5c63644E683549055b9Be8653de26E0B4CD36E": [
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)",
      "event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge), tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) pure returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, uint32 internalsOffset) mod)"
    ],
    "0x4972A8EF186Ee42A14Cdd3c47f52ec06a6dc495E": [
      "constructor(address _singleton)"
    ],
    "0x599C8489256Fb17b66d499d907F30b8022a29443": [
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function POOL_ADMIN() view returns (bytes32)",
      "function claimRewards(address user)",
      "function createUnstakeEsXaiRequest(address user, uint256 amount, uint256 period)",
      "function createUnstakeKeyRequest(address user, uint256 keyAmount, uint256 period)",
      "function createUnstakeOwnerLastKeyRequest(address owner, uint256 period)",
      "function delegateOwner() view returns (address)",
      "function description() view returns (string)",
      "function esXaiAddress() view returns (address)",
      "function esXaiStakeBucket() view returns (address)",
      "function getDelegateOwner() view returns (address)",
      "function getPoolInfo() view returns (tuple(address poolAddress, address owner, address keyBucketTracker, address esXaiBucketTracker, uint256 keyCount, uint256 totalStakedAmount, uint256 updateSharesTimestamp, uint32 ownerShare, uint32 keyBucketShare, uint32 stakedBucketShare) baseInfo, string _name, string _description, string _logo, string[] _socials, uint32[] _pendingShares, uint256 _ownerStakedKeys, uint256 _ownerRequestedUnstakeKeyAmount, uint256 _ownerLatestUnstakeRequestLockTime)",
      "function getPoolOwner() view returns (address)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getStakedAmounts(address user) view returns (uint256)",
      "function getStakedKeys() view returns (uint256[])",
      "function getStakedKeysCount() view returns (uint256)",
      "function getStakedKeysCountForUser(address user) view returns (uint256)",
      "function getUndistributedClaimAmount(address user) view returns (uint256 claimAmountFromKeys, uint256 claimAmountFromEsXai, uint256 claimAmount, uint256 ownerAmount)",
      "function getUnstakeRequest(address account, uint256 index) view returns (tuple(bool open, bool isKeyRequest, uint256 amount, uint256 lockTime, uint256 completeTime, uint256[5] __gap))",
      "function getUnstakeRequestCount(address account) view returns (uint256)",
      "function getUserPoolData(address user) view returns (uint256 userStakedEsXaiAmount, uint256 userClaimAmount, uint256[] userStakedKeyIds, uint256 unstakeRequestkeyAmount, uint256 unstakeRequestesXaiAmount)",
      "function getUserRequestedUnstakeAmounts(address user) view returns (uint256 keyAmount, uint256 esXaiAmount)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initShares(uint32 _ownerShare, uint32 _keyBucketShare, uint32 _stakedBucketShare)",
      "function initialize(address _refereeAddress, address _esXaiAddress, address _owner, address _delegateOwner, address _keyBucket, address _esXaiStakeBucket)",
      "function isUserEngagedWithPool(address user) view returns (bool)",
      "function keyBucket() view returns (address)",
      "function keyBucketShare() view returns (uint32)",
      "function keyIdIndex(uint256) view returns (uint256)",
      "function logo() view returns (string)",
      "function name() view returns (string)",
      "function ownerShare() view returns (uint32)",
      "function poolOwner() view returns (address)",
      "function poolOwnerClaimableRewards() view returns (uint256)",
      "function refereeAddress() view returns (address)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function socials(uint256) view returns (string)",
      "function stakeEsXai(address owner, uint256 amount)",
      "function stakeKeys(address owner, uint256[] keyIds)",
      "function stakedAmounts(address) view returns (uint256)",
      "function stakedBucketShare() view returns (uint32)",
      "function stakedKeys(uint256) view returns (uint256)",
      "function stakedKeysIndices(uint256) view returns (uint256)",
      "function stakedKeysOfOwner(address, uint256) view returns (uint256)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unstakeEsXai(address owner, uint256 unstakeRequestIndex, uint256 amount)",
      "function unstakeKeys(address owner, uint256 unstakeRequestIndex, uint256[] keyIds)",
      "function updateDelegateOwner(address delegate)",
      "function updateMetadata(string[3] _metaData, string[] _socials)",
      "function updateShares(uint32 _ownerShare, uint32 _keyBucketShare, uint32 _stakedBucketShare, uint256 period)"
    ],
    "0x5f9D168d3435747335b1B3dC7e4d42e3510087C7": [
      "constructor(address _implementation)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function implementation() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function update(address _implementation)"
    ],
    "0x609152cb742916E0F7FBC4391Be750C458b049fe": [
      "event Approval(address indexed owner, address indexed operator, bool approved)",
      "event AssertionCheckingToggled(bool newState)",
      "event AssertionSubmitted(uint256 indexed challengeId, uint256 indexed nodeLicenseId)",
      "event BatchRewardsClaimed(uint256 indexed challengeId, uint256 totalReward, uint256 keysLength)",
      "event ChallengeClosed(uint256 indexed challengeNumber)",
      "event ChallengeExpired(uint256 indexed challengeId)",
      "event ChallengeSubmitted(uint256 indexed challengeNumber)",
      "event ChallengerPublicKeyChanged(bytes newChallengerPublicKey)",
      "event Initialized(uint8 version)",
      "event InvalidBatchSubmission(uint256 indexed challengeId, address operator, uint256 keysLength)",
      "event InvalidSubmission(uint256 indexed challengeId, uint256 nodeLicenseId)",
      "event KycStatusChanged(address indexed wallet, bool isKycApproved)",
      "event NodeLicenseAddressChanged(address newNodeLicenseAddress)",
      "event RewardsClaimed(uint256 indexed challengeId, uint256 amount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RollupAddressChanged(address newRollupAddress)",
      "event StakedV1(address indexed user, uint256 amount, uint256 totalStaked)",
      "event StakingEnabled()",
      "event UnstakeV1(address indexed user, uint256 amount, uint256 totalStaked)",
      "event UpdateMaxKeysPerPool(uint256 prevAmount, uint256 newAmount)",
      "event UpdateMaxStakeAmount(uint256 prevAmount, uint256 newAmount)",
      "function CHALLENGER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function KYC_ADMIN_ROLE() view returns (bytes32)",
      "function addKycWallet(address wallet)",
      "function addStakingTier(uint256 newThreshold, uint256 newBoostFactor)",
      "function assignedKeyToPool(uint256) view returns (address)",
      "function assignedKeysOfUserCount(address) view returns (uint256)",
      "function assignedKeysToPoolCount(address) view returns (uint256)",
      "function calculateChallengeEmissionAndTier() view returns (uint256, uint256)",
      "function challengeCounter() view returns (uint256)",
      "function challengerPublicKey() view returns (bytes)",
      "function challenges(uint256) view returns (bool openForSubmissions, bool expiredForRewarding, uint64 assertionId, bytes32 assertionStateRootOrConfirmData, uint64 assertionTimestamp, bytes challengerSignedHash, bytes activeChallengerPublicKey, address rollupUsed, uint256 createdTimestamp, uint256 totalSupplyOfNodesAtChallengeStart, uint256 rewardAmountForClaimers, uint256 amountForGasSubsidy, uint256 numberOfEligibleClaimers, uint256 amountClaimedByClaimers)",
      "function claimMultipleRewards(uint256[] _nodeLicenseIds, uint256 _challengeId, address claimForAddressInBatch)",
      "function claimReward(uint256 _nodeLicenseId, uint256 _challengeId)",
      "function createAssertionHashAndCheckPayout(uint256 _nodeLicenseId, uint256 _challengeId, uint256 _boostFactor, bytes _confirmData, bytes _challengerSignedHash) pure returns (bool, bytes32)",
      "function esXaiAddress() view returns (address)",
      "function expireChallengeRewards(uint256 _challengeId)",
      "function gasSubsidyRecipient() view returns (address)",
      "function getBoostFactorForStaker(address staker) view returns (uint256)",
      "function getChallenge(uint256 _challengeId) view returns (tuple(bool openForSubmissions, bool expiredForRewarding, uint64 assertionId, bytes32 assertionStateRootOrConfirmData, uint64 assertionTimestamp, bytes challengerSignedHash, bytes activeChallengerPublicKey, address rollupUsed, uint256 createdTimestamp, uint256 totalSupplyOfNodesAtChallengeStart, uint256 rewardAmountForClaimers, uint256 amountForGasSubsidy, uint256 numberOfEligibleClaimers, uint256 amountClaimedByClaimers))",
      "function getCombinedTotalSupply() view returns (uint256)",
      "function getKycWalletAtIndex(uint256 index) view returns (address)",
      "function getKycWalletCount() view returns (uint256)",
      "function getOperatorAtIndex(address owner, uint256 index) view returns (address)",
      "function getOperatorCount(address owner) view returns (uint256)",
      "function getOwnerCountForOperator(address operator) view returns (uint256)",
      "function getOwnerForOperatorAtIndex(address operator, uint256 index) view returns (address)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getSubmissionsForChallenges(uint256[] _challengeIds, uint256 _nodeLicenseId) view returns (tuple(bool submitted, bool claimed, bool eligibleForPayout, uint256 nodeLicenseId, bytes assertionStateRootOrConfirmData)[])",
      "function getTotalClaims(address owner) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize()",
      "function isApprovedForOperator(address owner, address operator) view returns (bool)",
      "function isCheckingAssertions() view returns (bool)",
      "function isKycApproved(address wallet) view returns (bool)",
      "function maxKeysPerPool() view returns (uint256)",
      "function maxStakeAmountPerLicense() view returns (uint256)",
      "function nodeLicenseAddress() view returns (address)",
      "function poolFactoryAddress() view returns (address)",
      "function removeKycWallet(address wallet)",
      "function removeStakingTier(uint256 index)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function rollupAddress() view returns (address)",
      "function rollupAssertionTracker(bytes32) view returns (bool)",
      "function setApprovalForOperator(address operator, bool approved)",
      "function setChallengerPublicKey(bytes _challengerPublicKey)",
      "function setNodeLicenseAddress(address _nodeLicenseAddress)",
      "function setRollupAddress(address _rollupAddress)",
      "function stakeAmountBoostFactors(uint256) view returns (uint256)",
      "function stakeAmountTierThresholds(uint256) view returns (uint256)",
      "function stakeEsXai(address pool, uint256 amount)",
      "function stakeKeys(address pool, address staker, uint256[] keyIds)",
      "function stakedAmounts(address) view returns (uint256)",
      "function stakingEnabled() view returns (bool)",
      "function submissions(uint256, uint256) view returns (bool submitted, bool claimed, bool eligibleForPayout, uint256 nodeLicenseId, bytes assertionStateRootOrConfirmData)",
      "function submitAssertionToChallenge(uint256 _nodeLicenseId, uint256 _challengeId, bytes _confirmData)",
      "function submitChallenge(uint64 _assertionId, uint64 _predecessorAssertionId, bytes32 _confirmData, uint64 _assertionTimestamp, bytes _challengerSignedHash)",
      "function submitMultipleAssertions(uint256[] _nodeLicenseIds, uint256 _challengeId, bytes _confirmData)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function toggleAssertionChecking()",
      "function unstake(uint256 amount)",
      "function unstakeEsXai(address pool, uint256 amount)",
      "function unstakeKeys(address pool, address staker, uint256[] keyIds)",
      "function updateMaxKeysPerPool(uint256 newAmount)",
      "function updateMaxStakePerLicense(uint256 newAmount)",
      "function updateStakingTier(uint256 index, uint256 newThreshold, uint256 newBoostFactor)",
      "function xaiAddress() view returns (address)"
    ],
    "0x660ea1675F7323dC3Ba0c8dDFB593225Eb01E3C1": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TargetCallExecuted(address indexed target, uint256 value, bytes data)",
      "event UpgradeExecuted(address indexed upgrade, uint256 value, bytes data)",
      "function ADMIN_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function execute(address upgrade, bytes upgradeCallData) payable",
      "function executeCall(address target, bytes targetCallData) payable",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address[] executors)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0x68D78D1E81379EfD9C61f8E9131D52CE571AF4fD": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x6Bc4e6B2c13Ba42e933b23AFAb8a58bbbBa5D02B": [
      "constructor(address _implementation)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function implementation() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function update(address _implementation)"
    ],
    "0x6c21303F5986180B1394d2C89f3e883890E2867b": [
      "function areUnresolvedNodesLinear(address rollup) view returns (bool)",
      "function checkDecidableNextNode(address rollup) view returns (uint8)",
      "function findNodeConflict(address rollup, uint64 node1, uint64 node2, uint256 maxDepth) view returns (tuple(uint8 ty, uint64 node1, uint64 node2))",
      "function findStakerConflict(address rollup, address staker1, address staker2, uint256 maxDepth) view returns (tuple(uint8 ty, uint64 node1, uint64 node2))",
      "function getStakers(address rollup, uint64 startIndex, uint64 max) view returns (address[], bool hasMore)",
      "function latestStaked(address rollup, address staker) view returns (uint64, tuple(bytes32 stateHash, bytes32 challengeHash, bytes32 confirmData, uint64 prevNum, uint64 deadlineBlock, uint64 noChildConfirmedBeforeBlock, uint64 stakerCount, uint64 childStakerCount, uint64 firstChildBlock, uint64 latestChildNumber, uint64 createdAtBlock, bytes32 nodeHash))",
      "function refundableStakers(address rollup) view returns (address[])",
      "function requireConfirmable(address rollup) view",
      "function requireRejectable(address rollup) view",
      "function stakedNodes(address rollup, address staker) view returns (uint64[])",
      "function timedOutChallenges(address rollup, uint64 startIndex, uint64 max) view returns (uint64[], bool hasMore)"
    ],
    "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x7EfcB76D0e2E776A298aAa603d433336e5F8b6ab": [
      "constructor(uint256 _maxDataSize)",
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error GasLimitTooLarge()",
      "error InsufficientSubmissionCost(uint256 expected, uint256 actual)",
      "error InsufficientValue(uint256 expected, uint256 actual)",
      "error L1Forked()",
      "error NotAllowedOrigin(address origin)",
      "error NotOrigin()",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error RetryableData(address from, address to, uint256 l2CallValue, uint256 deposit, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data)",
      "event AllowListAddressSet(address indexed user, bool val)",
      "event AllowListEnabledUpdated(bool isEnabled)",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "function allowListEnabled() view returns (bool)",
      "function bridge() view returns (address)",
      "function calculateRetryableSubmissionFee(uint256, uint256) pure returns (uint256)",
      "function createRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, uint256 tokenTotalFeeAmount, bytes data) returns (uint256)",
      "function depositERC20(uint256 amount) returns (uint256)",
      "function getProxyAdmin() view returns (address)",
      "function initialize(address _bridge, address _sequencerInbox)",
      "function isAllowed(address) view returns (bool)",
      "function maxDataSize() view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function sendContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, uint256 value, bytes data) returns (uint256)",
      "function sendL2Message(bytes messageData) returns (uint256)",
      "function sendL2MessageFromOrigin(bytes messageData) returns (uint256)",
      "function sendUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sequencerInbox() view returns (address)",
      "function setAllowList(address[] user, bool[] val)",
      "function setAllowListEnabled(bool _allowListEnabled)",
      "function unpause()",
      "function unsafeCreateRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, uint256 tokenTotalFeeAmount, bytes data) returns (uint256)"
    ],
    "0x89AF7C4C2198c426cFe6E86de0680A0850503e06": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge) execCtx, tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) view returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, uint32 internalsOffset) mod)"
    ],
    "0x8b73Ef238ADaB31EBC7c05423d243c345241a22f": [
      "event DepositInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _sequenceNumber, uint256 _amount)",
      "event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)",
      "event WithdrawRedirected(address indexed from, address indexed to, uint256 indexed exitNum, bytes newData, bytes data, bool madeExternalCall)",
      "event WithdrawalFinalized(address l1Token, address indexed _from, address indexed _to, uint256 indexed _exitNum, uint256 _amount)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function cloneableProxyHash() view returns (bytes32)",
      "function counterpartGateway() view returns (address)",
      "function encodeWithdrawal(uint256 _exitNum, address _initialDestination) pure returns (bytes32)",
      "function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable",
      "function getExternalCall(uint256 _exitNum, address _initialDestination, bytes _initialData) view returns (address target, bytes data)",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes outboundCalldata)",
      "function inbox() view returns (address)",
      "function initialize(address _l2Counterpart, address _router, address _inbox, bytes32 _cloneableProxyHash, address _l2BeaconProxyFactory)",
      "function l2BeaconProxyFactory() view returns (address)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes res)",
      "function outboundTransferCustomRefund(address _l1Token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes res)",
      "function postUpgradeInit()",
      "function redirectedExits(bytes32) view returns (bool isExit, address _newTo, bytes _newData)",
      "function router() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferExitAndCall(uint256 _exitNum, address _initialDestination, address _newDestination, bytes _newData, bytes _data)",
      "function whitelist() view returns (address)"
    ],
    "0x94F4aBC83eae00b693286B6eDCa09e1D76183C97": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x995a9d3ca121D48d21087eDE20bc8acb2398c8B1": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x99a2A31300816C1FA3f40818AC9280fe7271F878": [
      "constructor(address prover0_, address proverMem_, address proverMath_, address proverHostIo_)",
      "function proveOneStep(tuple(uint256 maxInboxMessagesRead, address bridge) execCtx, uint256 machineStep, bytes32 beforeHash, bytes proof) view returns (bytes32 afterHash)",
      "function prover0() view returns (address)",
      "function proverHostIo() view returns (address)",
      "function proverMath() view returns (address)",
      "function proverMem() view returns (address)"
    ],
    "0xa83825Dc4D94513d1C907b319EE8224FA63A29B2": [
      "event Claim(address indexed account, uint256 amount)",
      "event DividendWithdrawn(address indexed to, uint256 weiAmount)",
      "event DividendsDistributed(address indexed from, uint256 weiAmount)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function _totalDividendsDistributed() view returns (uint256)",
      "function accumulativeDividendOf(address _owner) view returns (uint256)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint256)",
      "function distributeDividends(uint256 amount)",
      "function esXaiAddress() view returns (address)",
      "function getAccount(address _account) view returns (address account, uint256 withdrawableDividends, uint256 totalDividends, uint256 lastClaimTime)",
      "function initialize(address _trackerOwner, address _esXaiAddress, string __name, string __symbol, uint256 __decimals)",
      "function lastClaimTimes(address) view returns (uint256)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function processAccount(address account) returns (bool)",
      "function setBalance(address account, uint256 newBalance)",
      "function symbol() view returns (string)",
      "function totalDividendsDistributed() view returns (uint256)",
      "function totalSupply() view returns (uint256)",
      "function trackerOwner() view returns (address)",
      "function withdrawableDividendOf(address _owner) view returns (uint256)",
      "function withdrawnDividendOf(address _owner) view returns (uint256)"
    ],
    "0xaE21fDA3de92dE2FDAF606233b2863782Ba046F9": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xb591cE747CF19cF30e11d656EB94134F523A9e77": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xb6773d5bF5b908B58ff5B7Bd36A7F06Da2EeeEc7": [
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function createPool() returns (address poolProxy, address keyBucketProxy, address esXaiBucketProxy)",
      "function esXaiBeacon() view returns (address)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address poolFactoryAddress, address _poolBeacon, address _keyBucketBeacon, address _esXaiBeacon)",
      "function keyBucketBeacon() view returns (address)",
      "function poolBeacon() view returns (address)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0xbc14d8563b248B79689ECbc43bBa53290e0b6b66": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "function initializeProxy(tuple(uint64 confirmPeriodBlocks, uint64 extraChallengeTimeBlocks, address stakeToken, uint256 baseStake, bytes32 wasmModuleRoot, address owner, address loserStakeEscrow, uint256 chainId, string chainConfig, uint64 genesisBlockNum, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) sequencerInboxMaxTimeVariation) config, tuple(address bridge, address sequencerInbox, address inbox, address outbox, address rollupEventInbox, address challengeManager, address rollupAdminLogic, address rollupUserLogic, address validatorUtils, address validatorWalletCreator) connectedContracts)"
    ],
    "0xd106EC93D2c1adaA65C4B17ffc7bB166Ce30DDAe": [
      "event DefaultGatewayUpdated(address newDefaultGateway)",
      "event GatewaySet(address indexed l1Token, address indexed gateway)",
      "event TransferRouted(address indexed token, address indexed _userFrom, address indexed _userTo, address gateway)",
      "event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)",
      "event WhitelistSourceUpdated(address newSource)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function counterpartGateway() view returns (address)",
      "function defaultGateway() view returns (address)",
      "function finalizeInboundTransfer(address, address, address, uint256, bytes) payable",
      "function getGateway(address _token) view returns (address gateway)",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes)",
      "function inbox() view returns (address)",
      "function initialize(address _owner, address _defaultGateway, address, address _counterpartGateway, address _inbox)",
      "function l1TokenToGateway(address) view returns (address)",
      "function outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes)",
      "function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes)",
      "function owner() view returns (address)",
      "function postUpgradeInit()",
      "function router() view returns (address)",
      "function setDefaultGateway(address, uint256, uint256, uint256) payable returns (uint256)",
      "function setDefaultGateway(address newL1DefaultGateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns (uint256)",
      "function setGateway(address, uint256, uint256, uint256, address) payable returns (uint256)",
      "function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress, uint256 _feeAmount) returns (uint256)",
      "function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns (uint256)",
      "function setGateway(address, uint256, uint256, uint256) payable returns (uint256)",
      "function setGateways(address[] _token, address[] _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns (uint256)",
      "function setGateways(address[], address[], uint256, uint256, uint256) payable returns (uint256)",
      "function setOwner(address newOwner)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateWhitelistSource(address newSource)",
      "function whitelist() view returns (address)"
    ],
    "0xD88c8E0aE21beA6adE41A41130Bb4cd43e6b1723": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0xDf94F0474F205D086dbc2e66D69a856FCf520622": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge), tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) pure returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, uint32 internalsOffset) mod)"
    ],
    "0xEe9E5546A11Cb5b4A86e92DA05f2ef75C26E4754": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)",
      "event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)",
      "event NodeRejected(uint64 indexed nodeNum)",
      "event OwnerFunctionCalled(uint256 indexed id)",
      "event Paused(address account)",
      "event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)",
      "event RollupInitialized(bytes32 machineHash, uint256 chainId)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "function _stakerMap(address) view returns (uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)",
      "function amountStaked(address staker) view returns (uint256)",
      "function baseStake() view returns (uint256)",
      "function bridge() view returns (address)",
      "function chainId() view returns (uint256)",
      "function challengeManager() view returns (address)",
      "function confirmPeriodBlocks() view returns (uint64)",
      "function createNitroMigrationGenesis(tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion)",
      "function currentChallenge(address staker) view returns (uint64)",
      "function extraChallengeTimeBlocks() view returns (uint64)",
      "function firstUnresolvedNode() view returns (uint64)",
      "function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot)",
      "function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 expectedNodeHash)",
      "function forceRefundStaker(address[] staker)",
      "function forceResolveChallenge(address[] stakerA, address[] stakerB)",
      "function getNode(uint64 nodeNum) view returns (tuple(bytes32 stateHash, bytes32 challengeHash, bytes32 confirmData, uint64 prevNum, uint64 deadlineBlock, uint64 noChildConfirmedBeforeBlock, uint64 stakerCount, uint64 childStakerCount, uint64 firstChildBlock, uint64 latestChildNumber, uint64 createdAtBlock, bytes32 nodeHash))",
      "function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns (uint256)",
      "function getStaker(address staker) view returns (tuple(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked))",
      "function getStakerAddress(uint64 stakerNum) view returns (address)",
      "function inbox() view returns (address)",
      "function initialize(tuple(uint64 confirmPeriodBlocks, uint64 extraChallengeTimeBlocks, address stakeToken, uint256 baseStake, bytes32 wasmModuleRoot, address owner, address loserStakeEscrow, uint256 chainId, string chainConfig, uint64 genesisBlockNum, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) sequencerInboxMaxTimeVariation) config, tuple(address bridge, address sequencerInbox, address inbox, address outbox, address rollupEventInbox, address challengeManager, address rollupAdminLogic, address rollupUserLogic, address validatorUtils, address validatorWalletCreator) connectedContracts)",
      "function isStaked(address staker) view returns (bool)",
      "function isStakedOnLatestConfirmed(address staker) view returns (bool)",
      "function isValidator(address) view returns (bool)",
      "function isZombie(address staker) view returns (bool)",
      "function lastStakeBlock() view returns (uint64)",
      "function latestConfirmed() view returns (uint64)",
      "function latestNodeCreated() view returns (uint64)",
      "function latestStakedNode(address staker) view returns (uint64)",
      "function loserStakeEscrow() view returns (address)",
      "function minimumAssertionPeriod() view returns (uint256)",
      "function nodeHasStaker(uint64 nodeNum, address staker) view returns (bool)",
      "function outbox() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function removeOldOutbox(address _outbox)",
      "function resume()",
      "function rollupDeploymentBlock() view returns (uint256)",
      "function rollupEventInbox() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function setBaseStake(uint256 newBaseStake)",
      "function setConfirmPeriodBlocks(uint64 newConfirmPeriod)",
      "function setDelayedInbox(address _inbox, bool _enabled)",
      "function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks)",
      "function setInbox(address newInbox)",
      "function setLoserStakeEscrow(address newLoserStakerEscrow)",
      "function setMinimumAssertionPeriod(uint256 newPeriod)",
      "function setOutbox(address _outbox)",
      "function setOwner(address newOwner)",
      "function setSequencerInbox(address _sequencerInbox)",
      "function setStakeToken(address newStakeToken)",
      "function setValidator(address[] _validator, bool[] _val)",
      "function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled)",
      "function setWasmModuleRoot(bytes32 newWasmModuleRoot)",
      "function stakeToken() view returns (address)",
      "function stakerCount() view returns (uint64)",
      "function totalWithdrawableFunds() view returns (uint256)",
      "function upgradeBeacon(address beacon, address newImplementation)",
      "function upgradeSecondaryTo(address newImplementation)",
      "function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function validatorUtils() view returns (address)",
      "function validatorWalletCreator() view returns (address)",
      "function validatorWhitelistDisabled() view returns (bool)",
      "function wasmModuleRoot() view returns (bytes32)",
      "function withdrawableFunds(address user) view returns (uint256)",
      "function zombieAddress(uint256 zombieNum) view returns (address)",
      "function zombieCount() view returns (uint256)",
      "function zombieLatestStakedNode(uint256 zombieNum) view returns (uint64)"
    ],
    "0xF208798482F0b12c8767Bc03cC0F145D18BeCe6A": [
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function TRANSFER_ROLE() view returns (bytes32)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize()",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferTokens(address token, address recipient, uint256 amount)"
    ],
    "0xF9E08660223E2dbb1c0b28c82942aB6B5E38b8E5": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xfB93c2e5E41BD0ffd2E99A88e6d2A8D4F542d39a": [
      "constructor(address _implementation)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function implementation() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function update(address _implementation)"
    ],
    "0xFCF7248C495d6fd3641eE43F861c48Ebe402c878": [
      "constructor(address _singleton)"
    ],
    "0xfD41041180571C5D371BEA3D9550E55653671198": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xfD6Bb931D2Ee134E70568ca36584c043cB278734": [
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event ClaimableChanged(address indexed admin, bool newClaimableState)",
      "event FundsReceiverChanged(address indexed admin, address newFundsReceiver)",
      "event FundsWithdrawn(address indexed admin, uint256 amount)",
      "event Initialized(uint8 version)",
      "event PricingTierSetOrAdded(uint256 index, uint256 price, uint256 quantity)",
      "event PromoCodeCreated(string promoCode, address recipient)",
      "event PromoCodeRemoved(string promoCode)",
      "event ReferralReward(address indexed buyer, address indexed referralAddress, uint256 amount)",
      "event ReferralRewardPercentagesChanged(uint256 referralDiscountPercentage, uint256 referralRewardPercentage)",
      "event RefundOccurred(address indexed refundee, uint256 amount)",
      "event RewardClaimed(address indexed claimer, uint256 amount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "event WhitelistAmountRedeemed(address indexed redeemer, uint16 newAmount)",
      "event WhitelistAmountUpdatedByAdmin(address indexed redeemer, uint16 newAmount)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function approve(address to, uint256 tokenId)",
      "function balanceOf(address owner) view returns (uint256)",
      "function claimReferralReward()",
      "function claimable() view returns (bool)",
      "function createPromoCode(string _promoCode, address _recipient)",
      "function fundsReceiver() view returns (address)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function getAverageCost(uint256 _tokenId) view returns (uint256)",
      "function getMintTimestamp(uint256 _tokenId) view returns (uint256)",
      "function getPricingTier(uint256 _index) view returns (tuple(uint256 price, uint256 quantity))",
      "function getPricingTiersLength() view returns (uint256)",
      "function getPromoCode(string _promoCode) view returns (tuple(address recipient, bool active, uint256 receivedLifetime))",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function maxSupply() view returns (uint256)",
      "function mint(uint256 _amount, string _promoCode) payable",
      "function name() view returns (string)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function price(uint256 _amount, string _promoCode) view returns (uint256)",
      "function redeemFromWhitelist()",
      "function referralDiscountPercentage() view returns (uint256)",
      "function referralRewardPercentage() view returns (uint256)",
      "function refundNodeLicense(uint256 _tokenId) payable",
      "function removePromoCode(string _promoCode)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
      "function setApprovalForAll(address operator, bool approved)",
      "function setClaimable(bool _claimable)",
      "function setFundsReceiver(address _newFundsReceiver)",
      "function setOrAddPricingTier(uint256 _index, uint256 _price, uint256 _quantity)",
      "function setReferralPercentages(uint256 _referralDiscountPercentage, uint256 _referralRewardPercentage)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function tokenByIndex(uint256 index) view returns (uint256)",
      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
      "function tokenURI(uint256 _tokenId) view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 tokenId)",
      "function updateWhitelistAmounts(address[] _toWhitelist, uint16[] _amounts)",
      "function whitelistAmounts(address) view returns (uint16)",
      "function withdrawFunds()"
    ]
  }
}
