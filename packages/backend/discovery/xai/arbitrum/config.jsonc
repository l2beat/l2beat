{
  "$schema": "../../config.schema.json",
  "chain": "arbitrum",
  "name": "xai",
  "initialAddresses": ["0xaE21fDA3de92dE2FDAF606233b2863782Ba046F9"],
  "names": {
    "0xaE21fDA3de92dE2FDAF606233b2863782Ba046F9": "Inbox",
    "0xC47DacFbAa80Bd9D8112F4e8069482c2A3221336": "RollupProxy",
    "0x7dd8A76bdAeBE3BBBaCD7Aa87f1D4FDa1E60f94f": "Bridge",
    "0x3a3f62034a42a35eA1686B199bB73006aa525eE4": "ChallengeManager",
    "0x1E400568AD4840dbE50FB32f306B842e9ddeF726": "Outbox",
    "0x995a9d3ca121D48d21087eDE20bc8acb2398c8B1": "SequencerInbox",
    "0x0EE7AD3Cc291343C9952fFd8844e86d294fa513F": "UpgradeExecutor"
  },
  "overrides": {
    "ChallengeManager": {
      "ignoreMethods": ["challenges"]
    },
    "RollupProxy": {
      "ignoreMethods": [
        // Execution reverted
        "proxiableUUID"
      ],
      "ignoreInWatchMode": [
        "firstUnresolvedNode",
        "latestConfirmed",
        "latestNodeCreated"
      ],
      "fields": {
        // when this changes, it means the validators have changed
        "setValidatorCount": {
          "type": "eventCount",
          "topics": [
            // event OwnerFunctionCalled(uint256 indexed id);
            "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
            // id == 6 is emitted inside setValidator()
            "0x0000000000000000000000000000000000000000000000000000000000000006"
          ]
        },
        "challenges": {
          "type": "stateFromEvent",
          "event": "RollupChallengeStarted",
          "returnParams": [
            "challengeIndex",
            "asserter",
            "challenger",
            "challengedNode"
          ]
        },
        "validators": {
          "type": "arbitrumActors",
          "actorType": "validator"
        }
      }
    },
    "Outbox": {
      "ignoreMethods": ["spent", "isSpent"]
    },
    "Bridge": {
      "ignoreMethods": ["sequencerInboxAccs", "delayedInboxAccs"],
      "ignoreInWatchMode": [
        "delayedMessageCount",
        "sequencerMessageCount",
        "sequencerReportedSubMessageCount"
      ]
    },
    "SequencerInbox": {
      "ignoreMethods": ["inboxAccs"],
      "ignoreInWatchMode": ["batchCount", "totalDelayedMessagesRead"],
      "fields": {
        // getting sequencers from the contract is too complex at the moment
        // so we hardcode it in config .ts
        // this field will notify us in case of changes
        "IS_HARDCODED_SEQUENCER_BATCH_POSTER": {
          "type": "call",
          "method": "function isBatchPoster(address) external view returns (bool)",
          "args": ["0x02c903F5c76F3f00c1F659702Bd76DF30470bBEE"]
        },
        // when this changes, it means the sequencers have changed
        "setIsBatchPosterCount": {
          "type": "eventCount",
          "topics": [
            // event OwnerFunctionCalled(uint256 indexed id);
            "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
            // id == 6 is emitted inside setValidator()
            "0x0000000000000000000000000000000000000000000000000000000000000001"
          ]
        },
        "batchPosters": {
          "type": "arbitrumActors",
          "actorType": "batchPoster"
        }
      }
    },
    "UpgradeExecutor": {
      "fields": {
        "accessControl": {
          "type": "accessControl"
        }
      }
    }
  }
}
