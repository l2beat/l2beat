{
  "name": "apex",
  "chain": "ethereum",
  "blockNumber": 18685523,
  "configHash": "0x0d3e86b7502d0c3d45b9d17b7acfc99b7fcec53a8f5c4121175149b491cfb667",
  "version": 3,
  "contracts": [
    {
      "name": "AggregationRouterV4",
      "address": "0x1111111254fb6c44bAC0beD2854e76F90643097d",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1636107489,
      "values": {
        "DOMAIN_SEPARATOR": "0x39821575e26f6b451072044840d9a68b6718f7a7770887d2b17a3b48f7147ca3",
        "LIMIT_ORDER_RFQ_TYPEHASH": "0x74ab4f0cde46aaf927859983f7d04002116dd057d4c4941f6dbfb775c3e31f45",
        "owner": "0x5E89f8d81C74E311458277EA1Be3d3247c7cd7D1"
      }
    },
    {
      "name": "CommitteeUSDC",
      "address": "0x23Cab3CF1aa7B929Df5e9f3712aCA3A6Fb9494E4",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1671630143,
      "values": {
        "constructorArgs": [
          [
            "0x696cC7615A50CF12d1d1B38bF18A5606e9708296",
            "0x81165b6504520416487E5b4935865b4D3eeaa6e5",
            "0xA6d068DE0da2Dc1BeCaB509B118CB88723f72b6A",
            "0x0cbb676d12745948f75aF3A172cb7E4A4f8546e8",
            "0xB0d71Ff040A941bB9CA8453044634EebCE5A053D",
            "0x8f3310cc6951AC11F2B125fC8AC2dfA133A9498c"
          ],
          "3"
        ],
        "hasRegisteredFact": true,
        "identify": "StarkWare_Committee_2022_2",
        "signaturesRequired": 3
      },
      "derivedName": "Committee"
    },
    {
      "name": "MultiSigPoolUSDT",
      "address": "0x379c15156B527D6E693bED60d1FBb44CE46046b8",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698822623,
      "values": {
        "AGGREGATION_ROUTER_V4_ADDRESS": "0x1111111254fb6c44bAC0beD2854e76F90643097d",
        "ASSET_TYPE": "1269275113502683198091459784363068703822460788394621599952252545182480283333",
        "FACT_ADDRESS": "0xBE9a129909EbCb954bC065536D2bfAfBd170d27A",
        "signers": [
          "0x04b4B6f7a61B121Cb4913871e3aB52Ce77589128",
          "0x467c78EF773C91836ccFdafd8Ed0be12a64476d3",
          "0x22c89137525b593Dd2A18434348b550ffA5984Fe"
        ],
        "STARKEX_ADDRESS": "0xe53A6eD882Eb3f90cCe0390DDB04c876C5482E6b",
        "USDC_ADDRESS": "0xdAC17F958D2ee523a2206206994597C13D831ec7"
      },
      "derivedName": "MultiSigPool"
    },
    {
      "name": "FinalizableGpsFactAdapterUSDT",
      "address": "0x40e1e5Ece49A878062fA9F87eA6dc81281098B22",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697631587,
      "values": {
        "gpsContract": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
        "hasRegisteredFact": true,
        "identify": "StarkWare_FinalizableGpsFactAdapter_2022_1",
        "isFinalized": false,
        "programHash": "770346231394331402493200980986217737662224545740427952627288191358999988146"
      },
      "derivedName": "FinalizableGpsFactAdapter"
    },
    {
      "name": "AggregationRouterV4Owner",
      "address": "0x5E89f8d81C74E311458277EA1Be3d3247c7cd7D1",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": []
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1608623778,
      "values": {
        "domainSeparator": "0xb2a122829c88bf9bb3f25990d266e007c3961f0f8e7b7808ee3c3ae2c98f4c33",
        "getChainId": 1,
        "getOwners": [
          "0xB1A308e7F02798377b7acF685E997E3D774c5863",
          "0x3A6ED6885608Ead8174789a81Eb2B05600ca89F8",
          "0x2BB718a3986C36c6E02D8d15cdA4370820D08169"
        ],
        "getThreshold": 2,
        "nonce": 446,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "CommitteeUSDT",
      "address": "0x7249082BfAFE9BCA502d38a686Ef3df37A0cf800",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697631587,
      "values": {
        "constructorArgs": [
          [
            "0x17094A7Cc09686787E0dF95604fd1F9da94B9501",
            "0x8f3310cc6951AC11F2B125fC8AC2dfA133A9498c",
            "0xb557219DC53Af7Da9777540426DEe9c196842420",
            "0x4F753A937318A64b2867b16a55f5aea83A4C44dB",
            "0x81165b6504520416487E5b4935865b4D3eeaa6e5"
          ],
          "3"
        ],
        "hasRegisteredFact": true,
        "identify": "StarkWare_Committee_2022_2",
        "signaturesRequired": 3
      },
      "derivedName": "Committee"
    },
    {
      "name": "StarkExchangeUSDC",
      "address": "0xA1D5443F2FB80A5A55ac804C948B45ce4C52DCbb",
      "upgradeability": {
        "type": "StarkWare diamond",
        "implementation": "0xdD813397b79f8df581eEb0c4B8aB72304c528396",
        "upgradeDelay": 1209600,
        "isFinal": false,
        "facets": {
          "StarkWare_AllVerifiers_2022_2": "0x533a7f4bE5453513049EB94A2b115F2CcE161dce",
          "StarkWare_PerpetualTokensAndRamping_2022_2": "0x564EA75a26Dc0Bb5c5033B4752f88953A25AD058",
          "StarkWare_PerpetualState_2022_3": "0xdD5f42B087C1D2F73a2b443249b7D3DbE148a859",
          "StarkWare_PerpetualForcedActions_2022_2": "0x34E7cfedF99995A47B3e3D0AB88ba67072B55035"
        },
        "proxyGovernance": [
          "0xef75e1199B0599BA823b7770AcE8eb34864a1D55",
          "0xC532d2976209A56DdF4a99B844130f7c0daCa7B6"
        ]
      },
      "implementations": [
        "0xdD813397b79f8df581eEb0c4B8aB72304c528396",
        "0x533a7f4bE5453513049EB94A2b115F2CcE161dce",
        "0x564EA75a26Dc0Bb5c5033B4752f88953A25AD058",
        "0xdD5f42B087C1D2F73a2b443249b7D3DbE148a859",
        "0x34E7cfedF99995A47B3e3D0AB88ba67072B55035"
      ],
      "sinceTimestamp": 1660252039,
      "values": {
        "configurationDelay": 0,
        "DEPOSIT_CANCEL_DELAY": 172800,
        "escapeVerifier": "0xaadFdB9CAc145c65f2284fBe24600d07fb37F7BD",
        "FREEZE_GRACE_PERIOD": 604800,
        "getGlobalConfigCode": 0,
        "getLastBatchId": 5851,
        "getOrderRoot": "3531663064398379414392103051782416009365270089329406087415787723190509217307",
        "getOrderTreeHeight": 64,
        "getRegisteredAvailabilityVerifiers": [
          "0x23Cab3CF1aa7B929Df5e9f3712aCA3A6Fb9494E4"
        ],
        "getRegisteredVerifiers": [
          "0xE741e26573782ae3C0ea9EC710FA99Fcd27fB953"
        ],
        "getRollupTreeHeight": 64,
        "getRollupVaultRoot": "2342595862804194058781558162417993093531983529298102817989527487868713080358",
        "getSequenceNumber": 5731,
        "getSystemAssetType": "1147032829293317481173155891309375254605214077236177772270270553197624560221",
        "getUpgradeActivationDelay": 1209600,
        "getValidiumTreeHeight": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "getValidiumVaultRoot": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "globalConfigurationHash": "0x01897348c8e7a04145727a7d369a76c01711a828d58afeca4c3e7d86596b85ba",
        "implementation": "0xdD813397b79f8df581eEb0c4B8aB72304c528396",
        "initializerSize": 0,
        "isFrozen": false,
        "isNotFinalized": true,
        "MAIN_GOVERNANCE_INFO_TAG": "StarkEx.Main.2019.GovernorsInformation",
        "MAX_FORCED_ACTIONS_REQS_PER_BLOCK": 10,
        "MAX_VERIFIER_COUNT": 64,
        "OPERATORS": [
          "0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
          "0x78e802d42Bbc1834f962A11B54e0F8e07f52d4Fb"
        ],
        "PROXY_GOVERNANCE_TAG": "StarkEx.Proxy.2019.GovernorsInformation",
        "PROXY_VERSION": "3.0.1",
        "UNFREEZE_DELAY": 31536000,
        "UPGRADE_DELAY_SLOT": "0xc21dbb3089fcb2c4f4c6a67854ab4db2b0f233ea4b21b21f912d52d18fc5db1f",
        "VERIFIER_REMOVAL_DELAY": 2419200,
        "VERSION": "3.1.0"
      },
      "derivedName": "Proxy"
    },
    {
      "name": "PerpetualEscapeVerifier",
      "address": "0xaadFdB9CAc145c65f2284fBe24600d07fb37F7BD",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1660252035,
      "values": {
        "hasRegisteredFact": false,
        "identify": "StarkWare_PerpetualEscapeVerifier_2021_2"
      }
    },
    {
      "name": "TransferRegistry",
      "address": "0xBE9a129909EbCb954bC065536D2bfAfBd170d27A",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1613903192,
      "values": {
        "hasRegisteredFact": true,
        "identify": "StarkWare_TransferRegistry_2020_1"
      }
    },
    {
      "name": "PerpetualGovernanceMultisig",
      "address": "0xC532d2976209A56DdF4a99B844130f7c0daCa7B6",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": []
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1672216439,
      "values": {
        "domainSeparator": "0x297308a751114e4f0f8a219d1ff2f770e6c333f1f2698b3adf7b531e33f22e03",
        "getChainId": 1,
        "getOwners": [
          "0x22c89137525b593Dd2A18434348b550ffA5984Fe",
          "0xef75e1199B0599BA823b7770AcE8eb34864a1D55"
        ],
        "getThreshold": 2,
        "nonce": 6,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "StarkExchangeUSDT",
      "address": "0xe53A6eD882Eb3f90cCe0390DDB04c876C5482E6b",
      "upgradeability": {
        "type": "StarkWare diamond",
        "implementation": "0x3167617e913BF59afb90e5ec1A7B32D4Ea03eae4",
        "upgradeDelay": 1209600,
        "isFinal": false,
        "facets": {
          "StarkWare_AllVerifiers_2022_2": "0x5a50e280883B1FB39Aa04Eb263BCA47630D17D8E",
          "StarkWare_PerpetualTokensAndRamping_2022_2": "0x3F3A131caB7eb5b4EAE9497Bebb9E06bE80F2809",
          "StarkWare_PerpetualState_2023_4": "0x5BfbE850d18b73ed98FB830e0A5E9F4970Bb93dA",
          "StarkWare_PerpetualForcedActions_2022_2": "0x229BbdF97eBc4993efe1433c0ae4A0bE79A4fe21"
        },
        "proxyGovernance": ["0x53c6Ec9640761c669B800088F097E01A8207Ac8b"]
      },
      "implementations": [
        "0x3167617e913BF59afb90e5ec1A7B32D4Ea03eae4",
        "0x5a50e280883B1FB39Aa04Eb263BCA47630D17D8E",
        "0x3F3A131caB7eb5b4EAE9497Bebb9E06bE80F2809",
        "0x5BfbE850d18b73ed98FB830e0A5E9F4970Bb93dA",
        "0x229BbdF97eBc4993efe1433c0ae4A0bE79A4fe21"
      ],
      "sinceTimestamp": 1697631539,
      "values": {
        "configurationDelay": 0,
        "DEPOSIT_CANCEL_DELAY": 172800,
        "escapeVerifier": "0xaadFdB9CAc145c65f2284fBe24600d07fb37F7BD",
        "FREEZE_GRACE_PERIOD": 604800,
        "getGlobalConfigCode": 0,
        "getLastBatchId": 246,
        "getOrderRoot": "3531663064398379414392103051782416009365270089329406087415787723190509217307",
        "getOrderTreeHeight": 64,
        "getRegisteredAvailabilityVerifiers": [
          "0x7249082BfAFE9BCA502d38a686Ef3df37A0cf800"
        ],
        "getRegisteredVerifiers": [
          "0x40e1e5Ece49A878062fA9F87eA6dc81281098B22"
        ],
        "getRollupTreeHeight": 64,
        "getRollupVaultRoot": "2342595862804194058781558162417993093531983529298102817989527487868713080358",
        "getSequenceNumber": 246,
        "getSystemAssetType": "1269275113502683198091459784363068703822460788394621599952252545182480283333",
        "getUpgradeActivationDelay": 1209600,
        "getValidiumTreeHeight": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "getValidiumVaultRoot": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "globalConfigurationHash": "0x03a73bcbba682119cdc8ac304a31e3d7747892561ddeffafda276056eed9b4e7",
        "implementation": "0x3167617e913BF59afb90e5ec1A7B32D4Ea03eae4",
        "initializerSize": 0,
        "isFrozen": false,
        "isNotFinalized": true,
        "MAIN_GOVERNANCE_INFO_TAG": "StarkEx.Main.2019.GovernorsInformation",
        "MAX_FORCED_ACTIONS_REQS_PER_BLOCK": 10,
        "MAX_UPGRADE_DELAY": 15552000,
        "MAX_VERIFIER_COUNT": 64,
        "OPERATORS": [
          "0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
          "0x552aA2EBA4B0c5b9B8b4b22507189a7af4198169"
        ],
        "PROXY_GOVERNANCE_TAG": "StarkEx.Proxy.2019.GovernorsInformation",
        "PROXY_VERSION": "3.0.2",
        "UNFREEZE_DELAY": 31536000,
        "UPGRADE_DELAY_SLOT": "0xc21dbb3089fcb2c4f4c6a67854ab4db2b0f233ea4b21b21f912d52d18fc5db1f",
        "VERIFIER_REMOVAL_DELAY": 2419200,
        "VERSION": "3.2.0"
      },
      "derivedName": "Proxy"
    },
    {
      "name": "FinalizableGpsFactAdapterUSDC",
      "address": "0xE741e26573782ae3C0ea9EC710FA99Fcd27fB953",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1661254231,
      "values": {
        "gpsContract": "0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
        "hasRegisteredFact": true,
        "identify": "StarkWare_FinalizableGpsFactAdapter_2022_1",
        "isFinalized": false,
        "programHash": "3114724292040200590153042023978438629733352741898912919152162079752811928849"
      },
      "derivedName": "FinalizableGpsFactAdapter"
    },
    {
      "name": "MultiSigPoolUSDC",
      "address": "0xe95b3Dc78c0881dEa17A69BaFC6cFeB8d891e9DE",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1661502844,
      "values": {
        "AGGREGATION_ROUTER_V4_ADDRESS": "0x1111111254fb6c44bAC0beD2854e76F90643097d",
        "ASSET_TYPE": "1147032829293317481173155891309375254605214077236177772270270553197624560221",
        "FACT_ADDRESS": "0xBE9a129909EbCb954bC065536D2bfAfBd170d27A",
        "signers": [
          "0x015155D9f7bb601FbF25084C106531c759c05379",
          "0x321072F3Ce95EDa4cc87F42FA483a5822a8A7A92",
          "0xfA85BEA9B0F2D9540040118BeacbaD7258f45d81"
        ],
        "STARKEX_ADDRESS": "0xA1D5443F2FB80A5A55ac804C948B45ce4C52DCbb",
        "USDC_ADDRESS": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "derivedName": "MultiSigPool"
    }
  ],
  "eoas": [
    "0x015155D9f7bb601FbF25084C106531c759c05379",
    "0x04b4B6f7a61B121Cb4913871e3aB52Ce77589128",
    "0x0cbb676d12745948f75aF3A172cb7E4A4f8546e8",
    "0x17094A7Cc09686787E0dF95604fd1F9da94B9501",
    "0x22c89137525b593Dd2A18434348b550ffA5984Fe",
    "0x2BB718a3986C36c6E02D8d15cdA4370820D08169",
    "0x321072F3Ce95EDa4cc87F42FA483a5822a8A7A92",
    "0x3A6ED6885608Ead8174789a81Eb2B05600ca89F8",
    "0x467c78EF773C91836ccFdafd8Ed0be12a64476d3",
    "0x4F753A937318A64b2867b16a55f5aea83A4C44dB",
    "0x53c6Ec9640761c669B800088F097E01A8207Ac8b",
    "0x552aA2EBA4B0c5b9B8b4b22507189a7af4198169",
    "0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
    "0x696cC7615A50CF12d1d1B38bF18A5606e9708296",
    "0x78e802d42Bbc1834f962A11B54e0F8e07f52d4Fb",
    "0x81165b6504520416487E5b4935865b4D3eeaa6e5",
    "0x8f3310cc6951AC11F2B125fC8AC2dfA133A9498c",
    "0xA6d068DE0da2Dc1BeCaB509B118CB88723f72b6A",
    "0xB0d71Ff040A941bB9CA8453044634EebCE5A053D",
    "0xB1A308e7F02798377b7acF685E997E3D774c5863",
    "0xb557219DC53Af7Da9777540426DEe9c196842420",
    "0xef75e1199B0599BA823b7770AcE8eb34864a1D55",
    "0xfA85BEA9B0F2D9540040118BeacbaD7258f45d81"
  ],
  "abis": {
    "0x1111111254fb6c44bAC0beD2854e76F90643097d": [
      "constructor(address weth, address _clipperExchange)",
      "event OrderFilledRFQ(bytes32 orderHash, uint256 makingAmount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function LIMIT_ORDER_RFQ_TYPEHASH() view returns (bytes32)",
      "function cancelOrderRFQ(uint256 orderInfo)",
      "function clipperSwap(address srcToken, address dstToken, uint256 amount, uint256 minReturn) payable returns (uint256 returnAmount)",
      "function clipperSwapTo(address recipient, address srcToken, address dstToken, uint256 amount, uint256 minReturn) payable returns (uint256 returnAmount)",
      "function clipperSwapToWithPermit(address recipient, address srcToken, address dstToken, uint256 amount, uint256 minReturn, bytes permit) returns (uint256 returnAmount)",
      "function destroy()",
      "function fillOrderRFQ(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 makingAmount, uint256 takingAmount) payable returns (uint256, uint256)",
      "function fillOrderRFQTo(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 makingAmount, uint256 takingAmount, address target) payable returns (uint256, uint256)",
      "function fillOrderRFQToWithPermit(tuple(uint256 info, address makerAsset, address takerAsset, address maker, address allowedSender, uint256 makingAmount, uint256 takingAmount) order, bytes signature, uint256 makingAmount, uint256 takingAmount, address target, bytes permit) returns (uint256, uint256)",
      "function invalidatorForOrderRFQ(address maker, uint256 slot) view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function rescueFunds(address token, uint256 amount)",
      "function swap(address caller, tuple(address srcToken, address dstToken, address srcReceiver, address dstReceiver, uint256 amount, uint256 minReturnAmount, uint256 flags, bytes permit) desc, bytes data) payable returns (uint256 returnAmount, uint256 spentAmount, uint256 gasLeft)",
      "function transferOwnership(address newOwner)",
      "function uniswapV3Swap(uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes)",
      "function uniswapV3SwapTo(address recipient, uint256 amount, uint256 minReturn, uint256[] pools) payable returns (uint256 returnAmount)",
      "function uniswapV3SwapToWithPermit(address recipient, address srcToken, uint256 amount, uint256 minReturn, uint256[] pools, bytes permit) returns (uint256 returnAmount)",
      "function unoswap(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools) payable returns (uint256 returnAmount)",
      "function unoswapWithPermit(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools, bytes permit) returns (uint256 returnAmount)"
    ],
    "0x229BbdF97eBc4993efe1433c0ae4A0bE79A4fe21": [
      "event LogForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce)",
      "event LogForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "event LogUserRegistered(address ethKey, uint256 starkKey, address sender)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function forcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 submissionExpirationTime, uint256 nonce, bytes signature, bool premiumCost)",
      "function forcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount, bool premiumCost)",
      "function freezeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce)",
      "function freezeRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getEthKey(uint256 ownerKey) view returns (address)",
      "function getForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce) view returns (uint256)",
      "function getForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount) view returns (uint256)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address user) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerEthAddress(address ethKey, uint256 starkKey, bytes starkSignature)",
      "function registerSender(uint256 starkKey, bytes starkSignature)",
      "function unFreeze()",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ],
    "0x23Cab3CF1aa7B929Df5e9f3712aCA3A6Fb9494E4": [
      "constructor(address[] committeeMembers, uint256 numSignaturesRequired)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isMember(address) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function signaturesRequired() view returns (uint256)",
      "function verifyAvailabilityProof(bytes32 claimHash, bytes availabilityProofs)"
    ],
    "0x3167617e913BF59afb90e5ec1A7B32D4Ea03eae4": [
      "function VERSION() view returns (string)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function getSubContract(bytes4 selector) view returns (address)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function handlingContractId(bytes4 selector) pure returns (string id)",
      "function initialize(bytes data)"
    ],
    "0x34E7cfedF99995A47B3e3D0AB88ba67072B55035": [
      "event LogForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce)",
      "event LogForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "event LogUserRegistered(address ethKey, uint256 starkKey, address sender)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function forcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 submissionExpirationTime, uint256 nonce, bytes signature, bool premiumCost)",
      "function forcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount, bool premiumCost)",
      "function freezeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce)",
      "function freezeRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getEthKey(uint256 ownerKey) view returns (address)",
      "function getForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce) view returns (uint256)",
      "function getForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount) view returns (uint256)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address user) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerEthAddress(address ethKey, uint256 starkKey, bytes starkSignature)",
      "function registerSender(uint256 starkKey, bytes starkSignature)",
      "function unFreeze()",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ],
    "0x379c15156B527D6E693bED60d1FBb44CE46046b8": [
      "constructor(address[] allowedSigners, address usdc, address aggregationRouterV4, address starkex, address fact, uint256 assetType)",
      "event Deposit(address from, address token, uint256 spentAmount, uint256 swapReturnAmount, uint256 starkKey, uint256 positionId)",
      "event WithdrawERC20(uint256 orderId, address token, address to, uint256 amount)",
      "event WithdrawETH(uint256 orderId, address to, uint256 amount)",
      "function AGGREGATION_ROUTER_V4_ADDRESS() view returns (address)",
      "function ASSET_TYPE() view returns (uint256)",
      "function FACT_ADDRESS() view returns (address)",
      "function STARKEX_ADDRESS() view returns (address)",
      "function USDC_ADDRESS() view returns (address)",
      "function calcSigHash(address to, uint256 amount, address token, uint256 expireTime, uint256 orderId, bool isFact, uint256 salt) view returns (bytes32)",
      "function deposit(address token, uint256 amount, uint256 starkKey, uint256 positionId, bytes exchangeData) payable returns (uint256)",
      "function factTransferErc20(address to, address token, uint256 amount, uint256 salt, uint256 expireTime, uint256 orderId, address[] allSigners, bytes[] signatures)",
      "function isAllowedSigner(address signer) view returns (bool)",
      "function signers(uint256) view returns (address)",
      "function withdrawETH(address to, uint256 amount, uint256 expireTime, uint256 orderId, address[] allSigners, bytes[] signatures)",
      "function withdrawErc20(address to, uint256 amount, address token, uint256 expireTime, uint256 orderId, address[] allSigners, bytes[] signatures)"
    ],
    "0x3F3A131caB7eb5b4EAE9497Bebb9E06bE80F2809": [
      "event LogAssetWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositCancel(uint256 starkKey, uint256 vaultId, uint256 assetId)",
      "event LogDepositCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositNftCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogDepositWithTokenId(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositWithTokenIdCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogMintWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, uint256 assetId)",
      "event LogMintableWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogNftWithdrawalAllowed(uint256 ownerKey, uint256 assetId)",
      "event LogNftWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 tokenId, uint256 assetId, address recipient)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogSystemAssetType(uint256 assetType)",
      "event LogTokenAdminAdded(address tokenAdmin)",
      "event LogTokenAdminRemoved(address tokenAdmin)",
      "event LogTokenRegistered(uint256 assetType, bytes assetInfo, uint256 quantum)",
      "event LogUnFrozen()",
      "event LogWithdrawalAllowed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, address recipient)",
      "event LogWithdrawalWithTokenIdPerformed(uint256 ownerKey, uint256 assetType, uint256 tokenId, uint256 assetId, uint256 nonQuantizedAmount, uint256 quantizedAmount, address recipient)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function calculateAssetIdWithTokenId(uint256 assetType, uint256 tokenId) view returns (uint256)",
      "function calculateMintableAssetId(uint256 assetType, bytes mintingBlob) view returns (uint256)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositCancel(uint256 starkKey, uint256 assetId, uint256 vaultId)",
      "function depositERC1155(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 vaultId, uint256 quantizedAmount)",
      "function depositERC20(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositEth(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function depositNft(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositNftReclaim(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositReclaim(uint256 starkKey, uint256 assetType, uint256 vaultId)",
      "function depositWithTokenId(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 vaultId, uint256 quantizedAmount)",
      "function depositWithTokenIdReclaim(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 vaultId)",
      "function getAssetInfo(uint256 assetType) view returns (bytes assetInfo)",
      "function getCancellationRequest(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 request)",
      "function getDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getEthKey(uint256 ownerKey) view returns (address)",
      "function getQuantizedDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getSystemAssetType() view returns (uint256)",
      "function getWithdrawalBalance(uint256 ownerKey, uint256 assetId) view returns (uint256)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAssetRegistered(uint256 assetType) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isTokenAdmin(address testedAdmin) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address user) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function onERC721Received(address operator, address, uint256, bytes) returns (bytes4)",
      "function registerSystemAssetType(uint256 assetType, bytes assetInfo)",
      "function registerToken(uint256, bytes)",
      "function registerToken(uint256, bytes, uint256)",
      "function registerTokenAdmin(address newAdmin)",
      "function unFreeze()",
      "function unregisterTokenAdmin(address oldAdmin)",
      "function validatedSelectors() pure returns (bytes4[] selectors)",
      "function withdraw(uint256 ownerKey, uint256 assetType)",
      "function withdrawAndMint(uint256 ownerKey, uint256 assetType, bytes mintingBlob)",
      "function withdrawNft(uint256 ownerKey, uint256 assetType, uint256 tokenId)",
      "function withdrawWithTokenId(uint256 ownerKey, uint256 assetType, uint256 tokenId)"
    ],
    "0x40e1e5Ece49A878062fA9F87eA6dc81281098B22": [
      "constructor(address gpsStatementContract, uint256 programHash_)",
      "event Finalized()",
      "function acceptOwnership()",
      "function finalize()",
      "function gpsContract() view returns (address)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isAdmin(address testedAddress) view returns (bool)",
      "function isFinalized() view returns (bool)",
      "function isOwner(address testedAddress) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function nominateNewOwner(address newOwner)",
      "function programHash() view returns (uint256)",
      "function registerAdmin(address newAdmin)",
      "function removeAdmin(address removedAdmin)",
      "function setProgramHash(uint256 newProgramHash)"
    ],
    "0x533a7f4bE5453513049EB94A2b115F2CcE161dce": [
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRegistered(address entry, string entryId)",
      "event LogRemovalIntent(address entry, string entryId)",
      "event LogRemoved(address entry, string entryId)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function announceAvailabilityVerifierRemovalIntent(address verifier)",
      "function announceVerifierRemovalIntent(address verifier)",
      "function getRegisteredAvailabilityVerifiers() view returns (address[] _verifers)",
      "function getRegisteredVerifiers() view returns (address[] _verifers)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAvailabilityVerifier(address verifierAddress) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isVerifier(address verifierAddress) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address user) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAvailabilityVerifier(address verifier, string identifier)",
      "function registerVerifier(address verifier, string identifier)",
      "function removeAvailabilityVerifier(address verifier)",
      "function removeVerifier(address verifier)",
      "function unFreeze()",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ],
    "0x564EA75a26Dc0Bb5c5033B4752f88953A25AD058": [
      "event LogAssetWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositCancel(uint256 starkKey, uint256 vaultId, uint256 assetId)",
      "event LogDepositCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositNftCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogDepositWithTokenId(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositWithTokenIdCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogMintWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, uint256 assetId)",
      "event LogMintableWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogNftWithdrawalAllowed(uint256 ownerKey, uint256 assetId)",
      "event LogNftWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 tokenId, uint256 assetId, address recipient)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogSystemAssetType(uint256 assetType)",
      "event LogTokenAdminAdded(address tokenAdmin)",
      "event LogTokenAdminRemoved(address tokenAdmin)",
      "event LogTokenRegistered(uint256 assetType, bytes assetInfo, uint256 quantum)",
      "event LogUnFrozen()",
      "event LogWithdrawalAllowed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, address recipient)",
      "event LogWithdrawalWithTokenIdPerformed(uint256 ownerKey, uint256 assetType, uint256 tokenId, uint256 assetId, uint256 nonQuantizedAmount, uint256 quantizedAmount, address recipient)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function calculateAssetIdWithTokenId(uint256 assetType, uint256 tokenId) view returns (uint256)",
      "function calculateMintableAssetId(uint256 assetType, bytes mintingBlob) pure returns (uint256 assetId)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositCancel(uint256 starkKey, uint256 assetId, uint256 vaultId)",
      "function depositERC1155(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 vaultId, uint256 quantizedAmount)",
      "function depositERC20(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositEth(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function depositNft(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositNftReclaim(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositReclaim(uint256 starkKey, uint256 assetType, uint256 vaultId)",
      "function depositWithTokenId(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 vaultId, uint256 quantizedAmount)",
      "function depositWithTokenIdReclaim(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 vaultId)",
      "function getAssetInfo(uint256 assetType) view returns (bytes assetInfo)",
      "function getCancellationRequest(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 request)",
      "function getDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getEthKey(uint256 ownerKey) view returns (address)",
      "function getQuantizedDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getSystemAssetType() view returns (uint256)",
      "function getWithdrawalBalance(uint256 ownerKey, uint256 assetId) view returns (uint256)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAssetRegistered(uint256 assetType) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isTokenAdmin(address testedAdmin) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address user) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function onERC721Received(address operator, address, uint256, bytes) returns (bytes4)",
      "function registerSystemAssetType(uint256 assetType, bytes assetInfo)",
      "function registerToken(uint256, bytes)",
      "function registerToken(uint256, bytes, uint256)",
      "function registerTokenAdmin(address newAdmin)",
      "function unFreeze()",
      "function unregisterTokenAdmin(address oldAdmin)",
      "function validatedSelectors() pure returns (bytes4[] selectors)",
      "function withdraw(uint256 ownerKey, uint256 assetType)",
      "function withdrawAndMint(uint256 ownerKey, uint256 assetType, bytes mintingBlob)",
      "function withdrawNft(uint256 ownerKey, uint256 assetType, uint256 tokenId)",
      "function withdrawWithTokenId(uint256 ownerKey, uint256 assetType, uint256 tokenId)"
    ],
    "0x5a50e280883B1FB39Aa04Eb263BCA47630D17D8E": [
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRegistered(address entry, string entryId)",
      "event LogRemovalIntent(address entry, string entryId)",
      "event LogRemoved(address entry, string entryId)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function announceAvailabilityVerifierRemovalIntent(address verifier)",
      "function announceVerifierRemovalIntent(address verifier)",
      "function getRegisteredAvailabilityVerifiers() view returns (address[] _verifers)",
      "function getRegisteredVerifiers() view returns (address[] _verifers)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAvailabilityVerifier(address verifierAddress) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isVerifier(address verifierAddress) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address user) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAvailabilityVerifier(address verifier, string identifier)",
      "function registerVerifier(address verifier, string identifier)",
      "function removeAvailabilityVerifier(address verifier)",
      "function removeVerifier(address verifier)",
      "function unFreeze()",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ],
    "0x5BfbE850d18b73ed98FB830e0A5E9F4970Bb93dA": [
      "event LogAssetConfigurationApplied(uint256 assetId, bytes32 configHash)",
      "event LogAssetConfigurationRegistered(uint256 assetId, bytes32 configHash)",
      "event LogAssetConfigurationRemoved(uint256 assetId, bytes32 configHash)",
      "event LogAssetWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogGlobalConfigurationApplied(bytes32 configHash)",
      "event LogGlobalConfigurationRegistered(bytes32 configHash)",
      "event LogGlobalConfigurationRemoved(bytes32 configHash)",
      "event LogMintableWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftWithdrawalAllowed(uint256 ownerKey, uint256 assetId)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogOperatorAdded(address operator)",
      "event LogOperatorRemoved(address operator)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogStateTransitionFact(bytes32 stateTransitionFact)",
      "event LogUnFrozen()",
      "event LogUpdateState(uint256 sequenceNumber, uint256 batchId)",
      "event LogWithdrawalAllowed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function applyAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function applyGlobalConfigurationChange(bytes32 configHash)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function escape(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce) view returns (uint256)",
      "function getForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount) view returns (uint256)",
      "function getGlobalConfigCode() view returns (uint256)",
      "function getLastBatchId() view returns (uint256)",
      "function getOrderRoot() view returns (uint256)",
      "function getOrderTreeHeight() view returns (uint256)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getRollupTreeHeight() view returns (uint256)",
      "function getRollupVaultRoot() view returns (uint256)",
      "function getSequenceNumber() view returns (uint256)",
      "function getValidiumTreeHeight() view returns (uint256)",
      "function getValidiumVaultRoot() view returns (uint256)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes data)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function isOperator(address user) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address user) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function registerGlobalConfigurationChange(bytes32 configHash)",
      "function registerOperator(address newOperator)",
      "function removeAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function removeGlobalConfigurationChange(bytes32 configHash)",
      "function unFreeze()",
      "function unregisterOperator(address removedOperator)",
      "function updateState(uint256[] programOutput, uint256[] applicationData)",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ],
    "0x5E89f8d81C74E311458277EA1Be3d3247c7cd7D1": [
      "constructor(address _masterCopy)"
    ],
    "0x7249082BfAFE9BCA502d38a686Ef3df37A0cf800": [
      "constructor(address[] committeeMembers, uint256 numSignaturesRequired)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isMember(address) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function signaturesRequired() view returns (uint256)",
      "function verifyAvailabilityProof(bytes32 claimHash, bytes availabilityProofs)"
    ],
    "0xA1D5443F2FB80A5A55ac804C948B45ce4C52DCbb": [
      "constructor(uint256 upgradeActivationDelay)",
      "event FinalizedImplementation(address indexed implementation)",
      "event ImplementationAdded(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationRemoved(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationUpgraded(address indexed implementation, bytes initializer)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "function PROXY_GOVERNANCE_TAG() view returns (string)",
      "function PROXY_VERSION() view returns (string)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function addImplementation(address newImplementation, bytes data, bool finalize)",
      "function getUpgradeActivationDelay() view returns (uint256 delay)",
      "function implementation() view returns (address _implementation)",
      "function initialize(bytes) pure",
      "function isNotFinalized() view returns (bool notFinal)",
      "function proxyAcceptGovernance()",
      "function proxyCancelNomination()",
      "function proxyIsGovernor(address user) view returns (bool)",
      "function proxyNominateNewGovernor(address newGovernor)",
      "function proxyRemoveGovernor(address governorForRemoval)",
      "function removeImplementation(address removedImplementation, bytes data, bool finalize)",
      "function upgradeTo(address newImplementation, bytes data, bool finalize) payable"
    ],
    "0xaadFdB9CAc145c65f2284fBe24600d07fb37F7BD": [
      "constructor(address[63] tables)",
      "event LogEscapeVerified(uint256 publicKey, int256 withdrawalAmount, bytes32 sharedStateHash, uint256 positionId)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function verifyEscape(uint256[] merkleProof, uint256 nAssets, uint256[] sharedState)"
    ],
    "0xBE9a129909EbCb954bC065536D2bfAfBd170d27A": [
      "event LogRegisteredTransfer(address recipient, address token, uint256 amount, uint256 salt)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function transfer(address recipient, uint256 salt) payable",
      "function transferERC20(address recipient, address erc20, uint256 amount, uint256 salt)"
    ],
    "0xC532d2976209A56DdF4a99B844130f7c0daCa7B6": [
      "constructor(address _singleton)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xdD5f42B087C1D2F73a2b443249b7D3DbE148a859": [
      "event LogAssetConfigurationApplied(uint256 assetId, bytes32 configHash)",
      "event LogAssetConfigurationRegistered(uint256 assetId, bytes32 configHash)",
      "event LogAssetConfigurationRemoved(uint256 assetId, bytes32 configHash)",
      "event LogAssetWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogGlobalConfigurationApplied(bytes32 configHash)",
      "event LogGlobalConfigurationRegistered(bytes32 configHash)",
      "event LogGlobalConfigurationRemoved(bytes32 configHash)",
      "event LogMintableWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftWithdrawalAllowed(uint256 ownerKey, uint256 assetId)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogOperatorAdded(address operator)",
      "event LogOperatorRemoved(address operator)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogStateTransitionFact(bytes32 stateTransitionFact)",
      "event LogUnFrozen()",
      "event LogUpdateState(uint256 sequenceNumber, uint256 batchId)",
      "event LogWithdrawalAllowed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function applyAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function applyGlobalConfigurationChange(bytes32 configHash)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function escape(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce) view returns (uint256)",
      "function getForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount) view returns (uint256)",
      "function getGlobalConfigCode() view returns (uint256)",
      "function getLastBatchId() view returns (uint256)",
      "function getOrderRoot() view returns (uint256)",
      "function getOrderTreeHeight() view returns (uint256)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getRollupTreeHeight() view returns (uint256)",
      "function getRollupVaultRoot() view returns (uint256)",
      "function getSequenceNumber() view returns (uint256)",
      "function getValidiumTreeHeight() view returns (uint256)",
      "function getValidiumVaultRoot() view returns (uint256)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes data)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function isOperator(address user) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address user) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function registerGlobalConfigurationChange(bytes32 configHash)",
      "function registerOperator(address newOperator)",
      "function removeAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function removeGlobalConfigurationChange(bytes32 configHash)",
      "function unFreeze()",
      "function unregisterOperator(address removedOperator)",
      "function updateState(uint256[] programOutput, uint256[] applicationData)",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ],
    "0xdD813397b79f8df581eEb0c4B8aB72304c528396": [
      "function VERSION() view returns (string)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function getSubContract(bytes4 selector) view returns (address)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function handlingContractId(bytes4 selector) pure returns (string id)",
      "function initialize(bytes data)"
    ],
    "0xe53A6eD882Eb3f90cCe0390DDB04c876C5482E6b": [
      "constructor(uint256 upgradeActivationDelay)",
      "event FinalizedImplementation(address indexed implementation)",
      "event ImplementationAdded(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationRemoved(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationUpgraded(address indexed implementation, bytes initializer)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "function MAX_UPGRADE_DELAY() view returns (uint256)",
      "function PROXY_GOVERNANCE_TAG() view returns (string)",
      "function PROXY_VERSION() view returns (string)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function addImplementation(address newImplementation, bytes data, bool finalize)",
      "function getUpgradeActivationDelay() view returns (uint256 delay)",
      "function implementation() view returns (address _implementation)",
      "function initialize(bytes) pure",
      "function isNotFinalized() view returns (bool notFinal)",
      "function proxyAcceptGovernance()",
      "function proxyCancelNomination()",
      "function proxyIsGovernor(address user) view returns (bool)",
      "function proxyNominateNewGovernor(address newGovernor)",
      "function proxyRemoveGovernor(address governorForRemoval)",
      "function removeImplementation(address removedImplementation, bytes data, bool finalize)",
      "function upgradeTo(address newImplementation, bytes data, bool finalize) payable"
    ],
    "0xE741e26573782ae3C0ea9EC710FA99Fcd27fB953": [
      "constructor(address gpsStatementContract, uint256 programHash_)",
      "event Finalized()",
      "function acceptOwnership()",
      "function finalize()",
      "function gpsContract() view returns (address)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isAdmin(address testedAddress) view returns (bool)",
      "function isFinalized() view returns (bool)",
      "function isOwner(address testedAddress) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function nominateNewOwner(address newOwner)",
      "function programHash() view returns (uint256)",
      "function registerAdmin(address newAdmin)",
      "function removeAdmin(address removedAdmin)",
      "function setProgramHash(uint256 newProgramHash)"
    ],
    "0xe95b3Dc78c0881dEa17A69BaFC6cFeB8d891e9DE": [
      "constructor(address[] allowedSigners, address usdc, address aggregationRouterV4, address starkex, address fact, uint256 assetType)",
      "event Deposit(address from, address token, uint256 spentAmount, uint256 swapReturnAmount, uint256 starkKey, uint256 positionId)",
      "event WithdrawERC20(uint256 orderId, address token, address to, uint256 amount)",
      "event WithdrawETH(uint256 orderId, address to, uint256 amount)",
      "function AGGREGATION_ROUTER_V4_ADDRESS() view returns (address)",
      "function ASSET_TYPE() view returns (uint256)",
      "function FACT_ADDRESS() view returns (address)",
      "function STARKEX_ADDRESS() view returns (address)",
      "function USDC_ADDRESS() view returns (address)",
      "function calcSigHash(address to, uint256 amount, address token, uint256 expireTime, uint256 orderId, bool isFact, uint256 salt) view returns (bytes32)",
      "function deposit(address token, uint256 amount, uint256 starkKey, uint256 positionId, bytes exchangeData) payable returns (uint256)",
      "function factTransferErc20(address to, address token, uint256 amount, uint256 salt, uint256 expireTime, uint256 orderId, address[] allSigners, bytes[] signatures)",
      "function isAllowedSigner(address signer) view returns (bool)",
      "function signers(uint256) view returns (address)",
      "function withdrawETH(address to, uint256 amount, uint256 expireTime, uint256 orderId, address[] allSigners, bytes[] signatures)",
      "function withdrawErc20(address to, uint256 amount, address token, uint256 expireTime, uint256 orderId, address[] allSigners, bytes[] signatures)"
    ]
  }
}
