{
  "name": "lightlink",
  "chain": "ethereum",
  "blockNumber": 20685269,
  "configHash": "0x9a66427562794a30a6aa5c7fea9cfa3c286ee6604bafec5787a0916023a73215",
  "version": 15,
  "contracts": [
    {
      "name": "Challenge",
      "address": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "sinceTimestamp": 1717522343,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0x4Fc6a6A2e3864709ae6AdCf29280dA01c95Aa10B",
        "$pastUpgrades": [
          [
            "2024-06-04T17:32:23.000Z",
            ["0x2785D4Af59bf299C1f2DBC5132E72B2eE015B3aC"]
          ],
          [
            "2024-09-05T13:35:35.000Z",
            ["0x4Fc6a6A2e3864709ae6AdCf29280dA01c95Aa10B"]
          ]
        ],
        "$upgradeCount": 2,
        "chain": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
        "chainOracle": "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04",
        "challengeFee": "1500000000000000000",
        "challengePeriod": 172800,
        "challengeReward": "200000000000000000",
        "challengeWindow": 259200,
        "daNamespace": {
          "version": "0x00",
          "id": "0x00000000000000000000000000000000000000000000000000000000"
        },
        "daOracle": "0x0000000000000000000000000000000000000000",
        "defender": "0x514F8211B64f0620349659DeaDB5911a9896E7EC",
        "finalizationSeconds": 432000,
        "isDAChallengeEnabled": false,
        "isHeaderChallengeEnabled": true,
        "isL2HeaderChallengeEnabled": false,
        "maxBundleSize": 42000,
        "owner": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "proxiableUUID": "EXPECT_REVERT",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "Challenge"
    },
    {
      "name": "ChainOracle",
      "address": "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "sinceTimestamp": 1717522307,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0x79B3E839333a74137e78b0DaF84FC12512a8c704",
        "$pastUpgrades": [
          [
            "2024-06-04T17:31:47.000Z",
            ["0x79B3E839333a74137e78b0DaF84FC12512a8c704"]
          ]
        ],
        "$upgradeCount": 1,
        "canonicalStateChain": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
        "daOracle": "0x0000000000000000000000000000000000000000",
        "owner": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "proxiableUUID": "EXPECT_REVERT",
        "rlpReader": "0xEe055Dddc462e35521005e1b00FcEFd78E1fc9E2",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "ChainOracle"
    },
    {
      "name": "LightLinkMultisig",
      "address": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x3ca373F5ecB92ac762f9876f6e773082A4589995"
        },
        {
          "permission": "upgrade",
          "target": "0x624631881655a310adcF0d1336658Cc977609b72"
        },
        {
          "permission": "upgrade",
          "target": "0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9"
        }
      ],
      "sinceTimestamp": 1692154319,
      "values": {
        "$immutable": true,
        "getMemberByIndex": [
          "0xdE2552948aacb82dCa7a04AffbcB1B8e3C97D590",
          "0x67Ad58C203cEB0f39026270D920cc0f29eB4eE91"
        ],
        "getMembers": [
          "0xdE2552948aacb82dCa7a04AffbcB1B8e3C97D590",
          "0x67Ad58C203cEB0f39026270D920cc0f29eB4eE91"
        ],
        "getTransactionCount": 20,
        "multisig": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8"
      },
      "derivedName": "Multisig"
    },
    {
      "name": "LightLinkBridge",
      "address": "0x3ca373F5ecB92ac762f9876f6e773082A4589995",
      "proxyType": "LightLink proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
          "via": []
        }
      ],
      "sinceTimestamp": 1692155207,
      "values": {
        "$admin": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "$implementation": "0x468b89D930ca7974196D7195033600B658011756",
        "$pastUpgrades": [
          [
            "2023-08-16T03:06:47.000Z",
            ["0x468b89D930ca7974196D7195033600B658011756"]
          ]
        ],
        "$upgradeCount": 1,
        "bridgeRegistry": "0x624631881655a310adcF0d1336658Cc977609b72",
        "isPaused": false,
        "l2Predicate": "0x7F17A74942c5b22b340688f099c99A79426447e1",
        "l2TokenBytecodeHash": "0xb9ae7ba14d826de669be54f7c79008181b430f21bd3ff90dac8cce1e60ae88a9",
        "proxiableUUID": "EXPECT_REVERT"
      },
      "derivedName": "L1NativeTokenPredicate"
    },
    {
      "name": "L1BridgeRegistry",
      "address": "0x624631881655a310adcF0d1336658Cc977609b72",
      "proxyType": "LightLink proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
          "via": []
        }
      ],
      "sinceTimestamp": 1692154667,
      "values": {
        "$admin": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "$implementation": "0xC48F0e7C3c4E385ae84B4f678A0482E00208cf3E",
        "$pastUpgrades": [
          [
            "2023-08-16T02:57:47.000Z",
            ["0xC48F0e7C3c4E385ae84B4f678A0482E00208cf3E"]
          ]
        ],
        "$upgradeCount": 1,
        "consensusPowerThreshold": 80,
        "getMultisig": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "getSystemVerifier": "0x0000000000000000000000000000000000000000",
        "getValidators": [
          { "addr": "0x12eCE4AA73ee8ea958bE327daE41Dd785c997118", "power": 40 },
          { "addr": "0x6f933814903561F79137099587737DFB24c6E86D", "power": 20 },
          { "addr": "0xB44C32Dd1ec374224eED43FD827EBE64db16b0df", "power": 20 },
          { "addr": "0xaB0DDC4B1Fc1F24D4F7F67ab87B5dD8e5e0c5AC9", "power": 40 },
          { "addr": "0xc8225cA10F570d4d7aD6cdb6F0bfEb683dc7C938", "power": 40 }
        ],
        "multisig": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "proxiableUUID": "EXPECT_REVERT",
        "systemVerifier": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "L1BridgeRegistry"
    },
    {
      "name": "LightLinkERC20Bridge",
      "address": "0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9",
      "proxyType": "LightLink proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
          "via": []
        }
      ],
      "sinceTimestamp": 1692155531,
      "values": {
        "$admin": "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8",
        "$implementation": "0xa8372d6FF00d48A25BaA1AF16d6a86C936708f4E",
        "$pastUpgrades": [
          [
            "2023-08-16T03:12:11.000Z",
            ["0xa8372d6FF00d48A25BaA1AF16d6a86C936708f4E"]
          ]
        ],
        "$upgradeCount": 1,
        "bridgeRegistry": "0x624631881655a310adcF0d1336658Cc977609b72",
        "isPaused": false,
        "l2Predicate": "0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9",
        "l2TokenBytecodeHash": "0xb9ae7ba14d826de669be54f7c79008181b430f21bd3ff90dac8cce1e60ae88a9",
        "proxiableUUID": "EXPECT_REVERT"
      },
      "derivedName": "L1ERC20Predicate"
    },
    {
      "name": "CanonicalStateChain",
      "address": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["chainHead", "getHead"],
      "sinceTimestamp": 1717522271,
      "values": {
        "$admin": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "$implementation": "0xeFE38Bd58ADDf23eFab1FFa16312030384929289",
        "$pastUpgrades": [
          [
            "2024-06-04T17:31:11.000Z",
            ["0xd8C81A0CB0044fC45B51531A8dcc48Ed385937B5"]
          ],
          [
            "2024-09-05T13:31:35.000Z",
            ["0xeFE38Bd58ADDf23eFab1FFa16312030384929289"]
          ]
        ],
        "$upgradeCount": 2,
        "chainHead": 406,
        "challenge": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd",
        "getHead": {
          "epoch": 20684672,
          "l2Height": 100829311,
          "prevHash": "0x746df606d5eec19cefcb82296e4238ea7f334bb0f7d2f5e02f3ce6ac16f512fd",
          "outputRoot": "0x0ed48e37810867d0d3281ee52bac5432e37b939539df6864d6abc0d84603f779",
          "celestiaPointers": [
            { "height": 2276465, "shareStart": 256, "shareLen": 3664 },
            { "height": 2276469, "shareStart": 128, "shareLen": 3664 },
            { "height": 2276473, "shareStart": 384, "shareLen": 3596 },
            { "height": 2276476, "shareStart": 128, "shareLen": 3665 },
            { "height": 2276479, "shareStart": 192, "shareLen": 3665 },
            { "height": 2276483, "shareStart": 192, "shareLen": 3664 },
            { "height": 2276486, "shareStart": 320, "shareLen": 3661 },
            { "height": 2276489, "shareStart": 128, "shareLen": 3664 },
            { "height": 2276492, "shareStart": 384, "shareLen": 3664 },
            { "height": 2276495, "shareStart": 384, "shareLen": 3662 },
            { "height": 2276498, "shareStart": 128, "shareLen": 3665 },
            { "height": 2276502, "shareStart": 64, "shareLen": 3664 },
            { "height": 2276506, "shareStart": 64, "shareLen": 3665 },
            { "height": 2276510, "shareStart": 128, "shareLen": 3665 },
            { "height": 2276513, "shareStart": 192, "shareLen": 3654 },
            { "height": 2276517, "shareStart": 384, "shareLen": 3551 },
            { "height": 2276520, "shareStart": 128, "shareLen": 3664 },
            { "height": 2276523, "shareStart": 448, "shareLen": 3344 },
            { "height": 2276526, "shareStart": 320, "shareLen": 3664 },
            { "height": 2276529, "shareStart": 384, "shareLen": 3649 },
            { "height": 2276532, "shareStart": 64, "shareLen": 3663 }
          ]
        },
        "maxPointers": 21,
        "owner": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
        "proxiableUUID": "EXPECT_REVERT",
        "publisher": "0x514F8211B64f0620349659DeaDB5911a9896E7EC",
        "startingTimestamp": 1717522271,
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "CanonicalStateChain"
    },
    {
      "name": "RLPReader",
      "address": "0xEe055Dddc462e35521005e1b00FcEFd78E1fc9E2",
      "sinceTimestamp": 1717522283,
      "values": { "$immutable": true }
    }
  ],
  "eoas": [
    { "address": "0x0000000000000000000000000000000000000000" },
    { "address": "0x12eCE4AA73ee8ea958bE327daE41Dd785c997118" },
    { "address": "0x514F8211B64f0620349659DeaDB5911a9896E7EC" },
    { "address": "0x67Ad58C203cEB0f39026270D920cc0f29eB4eE91" },
    { "address": "0x6f933814903561F79137099587737DFB24c6E86D" },
    { "address": "0x7F17A74942c5b22b340688f099c99A79426447e1" },
    { "address": "0xaB0DDC4B1Fc1F24D4F7F67ab87B5dD8e5e0c5AC9" },
    { "address": "0xB44C32Dd1ec374224eED43FD827EBE64db16b0df" },
    { "address": "0xc8225cA10F570d4d7aD6cdb6F0bfEb683dc7C938" },
    {
      "address": "0xcc90c738acfc1695D19336Bc3E392a46234112BF",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd"
        },
        {
          "permission": "upgrade",
          "target": "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04"
        },
        {
          "permission": "upgrade",
          "target": "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE"
        }
      ]
    },
    { "address": "0xdE2552948aacb82dCa7a04AffbcB1B8e3C97D590" }
  ],
  "abis": {
    "0x1c1271bEE8556918092dA9238FcC77ee8be4b5Cd": [
      "constructor(address _logic, bytes _data)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x2fbD45A4B57379492450c3D5a8fdcaD68336DB04": [
      "constructor(address _logic, bytes _data)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x3345702FeA1669Efa1e085610A62F89d159Bc0c8": [
      "constructor()",
      "event ConfirmTransaction(uint256 indexed txIndex, address indexed owner)",
      "event ExecuteTransaction(uint256 indexed txIndex, address indexed owner)",
      "event RevokeConfirmation(uint256 indexed txIndex, address indexed owner)",
      "event SubmitTransaction(uint256 indexed txIndex, address indexed account, uint256 value, bytes data)",
      "function addMember(address _account)",
      "function confirmTransaction(uint256 _txIndex)",
      "function executeTransaction(uint256 _txIndex)",
      "function getMemberByIndex(uint256 _index) view returns (address)",
      "function getMembers() view returns (address[])",
      "function getSelector(string _func) pure returns (bytes4)",
      "function getTransaction(uint256 _idx) view returns (tuple(bool executed, address target, bytes data, uint256 value, uint256 numConfirmations), bytes4 funcSelector)",
      "function getTransactionCount() view returns (uint256)",
      "function isConfirmed(uint256, address) view returns (bool)",
      "function isOwner(address _account) view returns (bool)",
      "function modifyMultisig(address _multisig)",
      "function multisig() view returns (address)",
      "function removeMember(address _account)",
      "function revokeConfirmation(uint256 _txIndex)",
      "function submitTransaction(address _target, uint256 _value, bytes _data)",
      "function transactions(uint256) view returns (bool executed, address target, bytes data, uint256 value, uint256 numConfirmations)"
    ],
    "0x3ca373F5ecB92ac762f9876f6e773082A4589995": [
      "constructor(address _logic, bytes _data)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x468b89D930ca7974196D7195033600B658011756": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event DepositToken(bytes message)",
      "event Initialized(uint8 version)",
      "event TokenMapped(bytes message)",
      "event Upgraded(address indexed implementation)",
      "event WithdrawToken(bytes32 messageHash)",
      "function bridgeRegistry() view returns (address)",
      "function counter(address) view returns (uint256)",
      "function deposit(address _l1Token) payable",
      "function depositTo(address _l1Token, address _to) payable",
      "function initialize(address _registry, address _l2Predicate)",
      "function isConfirmed(address, uint256, address) view returns (bool)",
      "function isPaused() view returns (bool)",
      "function l1ToL2Gateway(address) view returns (address)",
      "function l2Predicate() view returns (address)",
      "function l2TokenBytecodeHash() view returns (bytes32)",
      "function mapToken(address _l1Token)",
      "function modifyL2Predicate(address _l2Predicate)",
      "function modifyL2TokenBytecodeHash(bytes32 _l2TokenBytecodeHash)",
      "function orderExecuted(address, uint256) view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function recovery(address _to)",
      "function syncWithdraw(address[] _currentValidators, bytes[] _signatures, bytes _data)",
      "function toggleIsPaused(bool _status)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x4Fc6a6A2e3864709ae6AdCf29280dA01c95Aa10B": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ReentrancyGuardReentrantCall()",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event ChallengeDAUpdate(bytes32 indexed _blockHash, uint256 indexed _pointerIndex, uint32 _shareIndex, uint256 _blockIndex, uint256 _expiry, uint8 indexed _status)",
      "event Initialized(uint64 version)",
      "event InvalidHeader(uint256 indexed _blockIndex, bytes32 indexed _hash, uint8 indexed _reason)",
      "event L2HeaderChallengeUpdate(bytes32 indexed challengeHash, uint256 indexed l2Number, bytes32 rblock, uint256 expiry, uint8 indexed status)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function chain() view returns (address)",
      "function chainOracle() view returns (address)",
      "function challengeDataRootInclusion(uint256 _blockIndex, uint8 _pointerIndex, uint32 _shareIndex) payable returns (uint256)",
      "function challengeFee() view returns (uint256)",
      "function challengeL2Header(uint256 _rblockNum, uint256 _l2Num) payable returns (bytes32)",
      "function challengePeriod() view returns (uint256)",
      "function challengeReward() view returns (uint256)",
      "function challengeWindow() view returns (uint256)",
      "function claimDAChallengeReward(bytes32 _challengeKey)",
      "function claimL2HeaderChallengeReward(bytes32 _challengeKey)",
      "function daChallenges(bytes32) view returns (bytes32 blockHash, uint256 blockIndex, uint8 pointerIndex, uint32 shareIndex, address challenger, uint256 expiry, uint8 status, bool claimed)",
      "function daNamespace() view returns (bytes1 version, bytes28 id)",
      "function daOracle() view returns (address)",
      "function dataRootInclusionChallengeKey(bytes32 _blockHash, uint8 _pointerIndex, uint32 _shareIndex) pure returns (bytes32)",
      "function defendDataRootInclusion(bytes32 _challengeKey, tuple(bytes[] data, tuple(uint256 beginKey, uint256 endKey, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] sideNodes)[] shareProofs, tuple(bytes1 version, bytes28 id) namespace, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] rowRoots, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves)[] rowProofs, tuple(uint256 tupleRootNonce, tuple(uint256 height, bytes32 dataRoot) tuple, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves) proof) attestationProof) _proof)",
      "function defendL2Header(bytes32 _challengeHash, bytes32 _headerHash, bytes32 _headerPrevHash)",
      "function defender() view returns (address)",
      "function finalizationSeconds() view returns (uint256)",
      "function initialize(address _chain, address _daOracle, address _chainOracle)",
      "function invalidateHeader(uint256 _blockIndex)",
      "function isDAChallengeEnabled() view returns (bool)",
      "function isHeaderChallengeEnabled() view returns (bool)",
      "function isL2HeaderChallengeEnabled() view returns (bool)",
      "function l2HeaderChallengeHash(bytes32 _rblockHash, uint256 _l2Num) pure returns (bytes32)",
      "function l2HeaderChallenges(bytes32) view returns (uint256 blockNum, tuple(bytes32 rblock, uint256 number) header, tuple(bytes32 rblock, uint256 number) prevHeader, uint256 challengeEnd, address challenger, uint8 status, bool claimed)",
      "function maxBundleSize() view returns (uint256)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function setChallengeFee(uint256 _challengeFee)",
      "function setChallengePeriod(uint256 _challengePeriod)",
      "function setChallengeReward(uint256 _challengeReward)",
      "function setChallengeWindow(uint256 _challengeWindow)",
      "function setDANamespace(tuple(bytes1 version, bytes28 id) _namespace)",
      "function setDAOracle(address _daOracle)",
      "function setDefender(address _defender)",
      "function setMaxBundleSize(uint256 _maxBundleSize)",
      "function settleDataRootInclusion(bytes32 _challengeKey)",
      "function settleL2HeaderChallenge(bytes32 _challengeHash)",
      "function toggleDAChallenge(bool _status)",
      "function toggleHeaderChallenge(bool _status)",
      "function toggleL2HeaderChallenge(bool _status)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x624631881655a310adcF0d1336658Cc977609b72": [
      "constructor(address _logic, bytes _data)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x63105ee97BfB22Dfe23033b3b14A4F8FED121ee9": [
      "constructor(address _logic, bytes _data)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x65E325A22c0F519041db69F5693EbAc3b4AE71bE": [
      "constructor(address _logic, bytes _data)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x79B3E839333a74137e78b0DaF84FC12512a8c704": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function ShareKey(bytes32 _rblock, bytes[] _shareData) pure returns (bytes32)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function canonicalStateChain() view returns (address)",
      "function daOracle() view returns (address)",
      "function decodeDepositTx(bytes _data) view returns (tuple(uint256 chainId, uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v))",
      "function decodeLegacyTx(bytes _data) view returns (tuple(uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v))",
      "function decodeRLPHeader(bytes _data) view returns (tuple(bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce))",
      "function extractData(bytes[] raw, tuple(uint256 start, uint256 end)[] ranges) pure returns (bytes)",
      "function getHeader(bytes32 _headerHash) view returns (tuple(bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce))",
      "function getTransaction(bytes32 _txHash) view returns (tuple(uint256 chainId, uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v))",
      "function hashHeader(tuple(bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce) _header) pure returns (bytes32)",
      "function headerToRblock(bytes32) view returns (bytes32)",
      "function headers(bytes32) view returns (bytes32 parentHash, bytes32 uncleHash, address beneficiary, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, bytes logsBloom, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, bytes extraData, bytes32 mixHash, uint256 nonce)",
      "function initialize(address _canonicalStateChain, address _daOracle, address _rlpReader)",
      "function owner() view returns (address)",
      "function provideHeader(bytes32 _shareKey, tuple(uint256 start, uint256 end)[] _range) returns (bytes32)",
      "function provideLegacyTx(bytes32 _shareKey, tuple(uint256 start, uint256 end)[] _range) returns (bytes32)",
      "function provideShares(bytes32 _rblock, uint8 _pointer, tuple(bytes[] data, tuple(uint256 beginKey, uint256 endKey, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] sideNodes)[] shareProofs, tuple(bytes1 version, bytes28 id) namespace, tuple(tuple(bytes1 version, bytes28 id) min, tuple(bytes1 version, bytes28 id) max, bytes32 digest)[] rowRoots, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves)[] rowProofs, tuple(uint256 tupleRootNonce, tuple(uint256 height, bytes32 dataRoot) tuple, tuple(bytes32[] sideNodes, uint256 key, uint256 numLeaves) proof) attestationProof) _proof) returns (bytes32)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function rlpReader() view returns (address)",
      "function setDAOracle(address _daOracle)",
      "function setRLPReader(address _rlpReader)",
      "function shares(bytes32, uint256) view returns (bytes)",
      "function transactions(bytes32) view returns (uint256 chainId, uint64 nonce, uint256 gasPrice, uint64 gas, address to, uint256 value, bytes data, uint256 r, uint256 s, uint256 v)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xa8372d6FF00d48A25BaA1AF16d6a86C936708f4E": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event DepositToken(bytes message)",
      "event Initialized(uint8 version)",
      "event TokenMapped(bytes message)",
      "event Upgraded(address indexed implementation)",
      "event WithdrawToken(bytes32 messageHash)",
      "function bridgeRegistry() view returns (address)",
      "function counter(address) view returns (uint256)",
      "function deposit(address _l1Token, uint256 _amount)",
      "function depositTo(address _l1Token, address _to, uint256 _amount)",
      "function initialize(address _registry, address _l2Predicate)",
      "function isConfirmed(address, uint256, address) view returns (bool)",
      "function isPaused() view returns (bool)",
      "function l1ToL2Gateway(address) view returns (address)",
      "function l2Predicate() view returns (address)",
      "function l2TokenBytecodeHash() view returns (bytes32)",
      "function mapToken(address _l1Token)",
      "function modifyL2Predicate(address _l2Predicate)",
      "function modifyL2TokenBytecodeHash(bytes32 _l2TokenBytecodeHash)",
      "function orderExecuted(address, uint256) view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function recovery(address[] _tokens, address _to)",
      "function syncWithdraw(address[] _currentValidators, bytes[] _signatures, bytes _data)",
      "function toggleIsPaused(bool _status)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xC48F0e7C3c4E385ae84B4f678A0482E00208cf3E": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ConsensusPowerThresholdModified(uint256 _amount)",
      "event Initialized(uint8 version)",
      "event MutisigModified(address _multisig)",
      "event SystemVerifierModified(address _systemVerifier)",
      "event Upgraded(address indexed implementation)",
      "event ValidatorsModifed(address[] _accounts, uint256[] _powers)",
      "event ValidatorsRemoved(address[] _accounts)",
      "function consensusPowerThreshold() view returns (uint256)",
      "function getMultisig() view returns (address)",
      "function getPower(address _validator) view returns (uint256)",
      "function getSystemVerifier() view returns (address)",
      "function getValidators() view returns (tuple(address addr, uint256 power)[])",
      "function initialize(address _multisig)",
      "function modifyConsensusPowerThreshold(uint256 _amount)",
      "function modifyMultisig(address _multisig)",
      "function modifySystemVerifier(address _systemVerifier)",
      "function modifyValidators(address[] _validators, uint256[] _powers)",
      "function multisig() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function removeValidators(address[] _accounts)",
      "function systemVerifier() view returns (address)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function validValidator(address _validator) view returns (bool)"
    ],
    "0xEe055Dddc462e35521005e1b00FcEFd78E1fc9E2": [
      "function toBlockHeader(bytes rlpHeader) pure returns (bytes32 parentHash, bytes32 sha3Uncles, address coinbase, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, uint256 difficulty, uint256 number, uint256 gasLimit, uint256 gasUsed, uint256 timestamp, uint256 nonce)",
      "function toDepositTx(bytes rlpTx) pure returns (uint256 chainId, uint256 nonce, uint256 gasPrice, uint256 gasLimit, address to, uint256 value, bytes data, uint256 v, uint256 r, uint256 s)",
      "function toLegacyTx(bytes rlpTx) pure returns (uint256 nonce, uint256 gasPrice, uint256 gasLimit, address to, uint256 value, bytes data, uint256 v, uint256 r, uint256 s)"
    ],
    "0xeFE38Bd58ADDf23eFab1FFa16312030384929289": [
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event BlockAdded(uint256 indexed blockNumber)",
      "event ChallengeChanged(address indexed challenge)",
      "event Initialized(uint64 version)",
      "event OutputProposed(bytes32 indexed outputRoot, uint256 indexed l2OutputIndex, uint256 indexed l2BlockNumber, uint256 l1Timestamp)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PublisherChanged(address indexed publisher)",
      "event RolledBack(uint256 indexed blockNumber)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function calculateHeaderHash(tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers) _header) pure returns (bytes32)",
      "function chain(uint256) view returns (bytes32)",
      "function chainHead() view returns (uint256)",
      "function challenge() view returns (address)",
      "function getHead() view returns (tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers))",
      "function getHeaderByHash(bytes32 _hash) view returns (tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers))",
      "function getHeaderByNum(uint256 _index) view returns (tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers))",
      "function getL2Output(uint256 _index) view returns (tuple(bytes32 outputRoot, uint64 timestamp))",
      "function headerMetadata(bytes32) view returns (uint64 timestamp, address publisher)",
      "function initialize(address _publisher, tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers) _header)",
      "function maxPointers() view returns (uint8)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function publisher() view returns (address)",
      "function pushBlock(tuple(uint64 epoch, uint64 l2Height, bytes32 prevHash, bytes32 outputRoot, tuple(uint64 height, uint24 shareStart, uint16 shareLen)[] celestiaPointers) _header)",
      "function renounceOwnership()",
      "function rollback(uint256 _blockNumber, bytes32 _blockHash)",
      "function setChallengeContract(address _challenge)",
      "function setMaxPointers(uint8 _maxPointers)",
      "function setPublisher(address _publisher)",
      "function startingTimestamp() view returns (uint64)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ]
  },
  "usedTemplates": {},
  "shapeFilesHash": "0x1b71e6de9b37e27fa623d351c775f0b1129ddf53c2082f7042461e94e2b52e34"
}
