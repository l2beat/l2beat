{
  "name": "satellite",
  "chain": "ethereum",
  "blockNumber": 19019950,
  "configHash": "0xc1ef7146beddebb7d6cf732f930dbd41dcca723bc46b819d2aaf9834bfe62337",
  "version": 3,
  "contracts": [
    {
      "name": "Gateway",
      "address": "0x4F4495243837681061C4743b74B3eEdf548D56A5",
      "upgradeability": {
        "type": "Axelar proxy",
        "admins": [
          "0x3f5876a2b06E54949aB106651Ab6694d0289b2b4",
          "0x9256Fd872118ed3a97754B0fB42c15015d17E0CC",
          "0x5C8EF9ca7b43c93Ac4a146BeF77FAFbc7D3e69B7",
          "0x1486157d505C7F7E546aD00E3E2Eee25BF665C9b",
          "0x2eC991B5c0B742AbD9d2ea31fe6c14a85e91C821",
          "0xf505462A29E36E26f25Ef0175Ca1eCBa09CC118f",
          "0x027c1882B975E2cd771AE068b0389FA38B9dda73",
          "0x30932Ac1f0477Fbd63E4c5Be1928f367A58A45A1"
        ],
        "adminThreshold": 4,
        "owners": [
          "0x7bA22cfDB59894820493F8EC57484Db89C0b057B",
          "0x4ABaE21be1D9EBD967D1dd893eE666FC0A9D13B6",
          "0x61f69E03f06F84Ca45335Cb0f992b9bd2E926DcB",
          "0x3F15a3f850c59fd11D3c4C6C4221A6B02B0711dF",
          "0x791e747F4B1c5f372974bb670169394FD5ECa723",
          "0x177759c81b00dD947e483dDc39e1cbB59813c940",
          "0xE175791B883694AE8f73457CAa164731d1376E14",
          "0x3bEa258bf7f8255F3Be21cA40aE650C554AC5Eb7",
          "0x33DeB07f1D7F02C2BE00d2589299a72AC712785E",
          "0x1A86378627Dfc7bCfcDF946f8cC4296593b66a99",
          "0x33d5b2f2cf50caa81D71E56AA1c621e41621eE1D",
          "0xbf1D2A9fB0775038B4390a0Bc039E5Fa6a512DB5",
          "0x57d9b10F6316D419fdA4740cE2268C23D0d29cE0",
          "0x25e0412b52b6108E9C564257D6C7e10a3764D249",
          "0xB3567695cCD073A2095347137BA4A0Eda6788C22",
          "0x7272d9D6f391410b2153905E1E505820E3338378"
        ],
        "ownerThreshold": 9,
        "operators": [
          "0xee983Ce6Ad7bB166770A66A7af600fD552ee6f3D",
          "0x2cC704bc8aDE53B051e771a46BFCA558d7396dF3",
          "0x4438260D2351523166cb8777097f13750BE31969",
          "0x787Bf0802521d073275b44987bfbBC29eC792Ca1",
          "0x62f66CcEb5A295C9f59fb43D93Ec8b603c51479e",
          "0x31174208ECc9CadA535E6d0AF9bB790b9fADdaaF",
          "0x1Bdb0C8626B31498190f854e6890F9E3b0c677C5",
          "0x9075d14C284A01FEFC78910765d2abeFB906ff81",
          "0x9C112ef47b506cf3706a16DE1902722cC413Af82",
          "0xf93B5526d81Ea90fa3261F8F5105E4d0EB8B017B",
          "0x5a54e2e42599074212dF39190Fa3e50DB378d18e",
          "0x27c7333EbaE53dcfDC893D4322B7ab1E69c96Ce0",
          "0x368a5F50b2F03948779417bd25270Fbe37F4b517",
          "0x1e1e4860a4D66670F55F09A18183D211f68B0D9f",
          "0x75746864cd9c5619b59dD7A7082Bb9F383D74A68",
          "0xa60463481f85354fDb5409d6575438c52E272Bca",
          "0xAAebB2845A300c3a9570A388843208e4dBaaafAd",
          "0x76af8c4d9C678181781c43E536b358ffAED79829",
          "0xf4462493709F32E01F1bC555D9a27b4790826e32",
          "0x1bc6dba6229c3Ac1Faa0A7d9CDCC1ca4728061f5"
        ],
        "operatorThreshold": 11,
        "implementation": "0x99B5FA03a5ea4315725c43346e55a6A6fbd94098"
      },
      "implementations": ["0x99B5FA03a5ea4315725c43346e55a6A6fbd94098"],
      "sinceTimestamp": 1640210870,
      "values": {
        "allTokensFrozen": false,
        "authModule": "0xE3B83f79Fbf01B25659f8A814945aB82186A8AD0",
        "contractId": "0xad2ae48b4d93c587cd1f0f8f269b84f57dbe98bbe5c61c4b6d324e6a667b3625",
        "governance": "0xfDF36A30070ea0241d69052ea85ff44Ad0476a66",
        "implementation": "0x99B5FA03a5ea4315725c43346e55a6A6fbd94098",
        "mintLimiter": "0xCC940AE49C78F20E3F13F3cF37e996b98Ac3EC68",
        "tokenDeployer": "0xb28478319B64f8D47e19A120209A211D902F8b8f"
      },
      "derivedName": "AxelarGateway"
    },
    {
      "name": "TokenDeployer",
      "address": "0xb28478319B64f8D47e19A120209A211D902F8b8f",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697785883
    },
    {
      "name": "Multisig",
      "address": "0xCC940AE49C78F20E3F13F3cF37e996b98Ac3EC68",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697769227,
      "values": {
        "signerAccounts": [
          "0x3f5876a2b06E54949aB106651Ab6694d0289b2b4",
          "0x9256Fd872118ed3a97754B0fB42c15015d17E0CC",
          "0x1486157d505C7F7E546aD00E3E2Eee25BF665C9b",
          "0x2eC991B5c0B742AbD9d2ea31fe6c14a85e91C821",
          "0xf505462A29E36E26f25Ef0175Ca1eCBa09CC118f",
          "0x027c1882B975E2cd771AE068b0389FA38B9dda73"
        ],
        "signerEpoch": 1,
        "signers": 3,
        "signerThreshold": 3
      }
    },
    {
      "name": "AxelarAuthWeighted",
      "address": "0xE3B83f79Fbf01B25659f8A814945aB82186A8AD0",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697785871,
      "values": {
        "currentEpoch": 84,
        "owner": "0x4F4495243837681061C4743b74B3eEdf548D56A5",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "AxelarAuthWeighted"
    },
    {
      "name": "InterchainGovernance",
      "address": "0xfDF36A30070ea0241d69052ea85ff44Ad0476a66",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1697842379,
      "values": {
        "gateway": "0x4F4495243837681061C4743b74B3eEdf548D56A5",
        "governanceAddress": "axelar10d07y265gmmuvt4z0w9aw880jnsr700j7v9daj",
        "governanceAddressHash": "0x63aecca002108196491c5b0d3641258c2095abd3d368bdf85c54c2bbadf980a1",
        "governanceChain": "Axelarnet",
        "governanceChainHash": "0x9d38b77bdc2e9ef511420f947b5e8145291232b74f3f3a9e327433ff8f5acb66",
        "minimumTimeLockDelay": 604800
      }
    }
  ],
  "eoas": [
    "0x027c1882B975E2cd771AE068b0389FA38B9dda73",
    "0x1486157d505C7F7E546aD00E3E2Eee25BF665C9b",
    "0x2eC991B5c0B742AbD9d2ea31fe6c14a85e91C821",
    "0x3f5876a2b06E54949aB106651Ab6694d0289b2b4",
    "0x9256Fd872118ed3a97754B0fB42c15015d17E0CC",
    "0xf505462A29E36E26f25Ef0175Ca1eCBa09CC118f"
  ],
  "abis": {
    "0x4F4495243837681061C4743b74B3eEdf548D56A5": [
      "constructor(bytes params)",
      "function getAddress(bytes32 key) view returns (address)",
      "function getBool(bytes32 key) view returns (bool)",
      "function getBytes(bytes32 key) view returns (bytes)",
      "function getInt(bytes32 key) view returns (int256)",
      "function getString(bytes32 key) view returns (string)",
      "function getUint(bytes32 key) view returns (uint256)",
      "function setup(bytes params)"
    ],
    "0x99B5FA03a5ea4315725c43346e55a6A6fbd94098": [
      "constructor(address authModule_, address tokenDeployer_)",
      "error BurnFailed(string symbol)",
      "error ExceedMintLimit(string symbol)",
      "error InvalidAmount()",
      "error InvalidAuthModule()",
      "error InvalidChainId()",
      "error InvalidCodeHash()",
      "error InvalidCommands()",
      "error InvalidGovernance()",
      "error InvalidImplementation()",
      "error InvalidMintLimiter()",
      "error InvalidSetMintLimitsParams()",
      "error InvalidTokenDeployer()",
      "error MintFailed(string symbol)",
      "error NotGovernance()",
      "error NotMintLimiter()",
      "error NotProxy()",
      "error NotSelf()",
      "error SetupFailed()",
      "error TokenAlreadyExists(string symbol)",
      "error TokenContractDoesNotExist(address token)",
      "error TokenDeployFailed(string symbol)",
      "error TokenDoesNotExist(string symbol)",
      "error TokenTransferFailed()",
      "event ContractCall(address indexed sender, string destinationChain, string destinationContractAddress, bytes32 indexed payloadHash, bytes payload)",
      "event ContractCallApproved(bytes32 indexed commandId, string sourceChain, string sourceAddress, address indexed contractAddress, bytes32 indexed payloadHash, bytes32 sourceTxHash, uint256 sourceEventIndex)",
      "event ContractCallApprovedWithMint(bytes32 indexed commandId, string sourceChain, string sourceAddress, address indexed contractAddress, bytes32 indexed payloadHash, string symbol, uint256 amount, bytes32 sourceTxHash, uint256 sourceEventIndex)",
      "event ContractCallExecuted(bytes32 indexed commandId)",
      "event ContractCallWithToken(address indexed sender, string destinationChain, string destinationContractAddress, bytes32 indexed payloadHash, bytes payload, string symbol, uint256 amount)",
      "event Executed(bytes32 indexed commandId)",
      "event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance)",
      "event MintLimiterTransferred(address indexed previousGovernance, address indexed newGovernance)",
      "event OperatorshipTransferred(bytes newOperatorsData)",
      "event TokenDeployed(string symbol, address tokenAddresses)",
      "event TokenMintLimitUpdated(string symbol, uint256 limit)",
      "event TokenSent(address indexed sender, string destinationChain, string destinationAddress, string symbol, uint256 amount)",
      "event Upgraded(address indexed implementation)",
      "function allTokensFrozen() pure returns (bool)",
      "function approveContractCall(bytes params, bytes32 commandId)",
      "function approveContractCallWithMint(bytes params, bytes32 commandId)",
      "function authModule() view returns (address)",
      "function burnToken(bytes params, bytes32)",
      "function callContract(string destinationChain, string destinationContractAddress, bytes payload)",
      "function callContractWithToken(string destinationChain, string destinationContractAddress, bytes payload, string symbol, uint256 amount)",
      "function contractId() pure returns (bytes32)",
      "function deployToken(bytes params, bytes32)",
      "function execute(bytes input)",
      "function getAddress(bytes32 key) view returns (address)",
      "function getBool(bytes32 key) view returns (bool)",
      "function getBytes(bytes32 key) view returns (bytes)",
      "function getInt(bytes32 key) view returns (int256)",
      "function getString(bytes32 key) view returns (string)",
      "function getUint(bytes32 key) view returns (uint256)",
      "function governance() view returns (address)",
      "function implementation() view returns (address)",
      "function isCommandExecuted(bytes32 commandId) view returns (bool)",
      "function isContractCallAndMintApproved(bytes32 commandId, string sourceChain, string sourceAddress, address contractAddress, bytes32 payloadHash, string symbol, uint256 amount) view returns (bool)",
      "function isContractCallApproved(bytes32 commandId, string sourceChain, string sourceAddress, address contractAddress, bytes32 payloadHash) view returns (bool)",
      "function mintLimiter() view returns (address)",
      "function mintToken(bytes params, bytes32)",
      "function sendToken(string destinationChain, string destinationAddress, string symbol, uint256 amount)",
      "function setTokenMintLimits(string[] symbols, uint256[] limits)",
      "function setup(bytes params)",
      "function tokenAddresses(string symbol) view returns (address)",
      "function tokenDeployer() view returns (address)",
      "function tokenFrozen(string) pure returns (bool)",
      "function tokenMintAmount(string symbol) view returns (uint256)",
      "function tokenMintLimit(string symbol) view returns (uint256)",
      "function transferGovernance(address newGovernance)",
      "function transferMintLimiter(address newMintLimiter)",
      "function transferOperatorship(bytes newOperatorsData, bytes32)",
      "function upgrade(address newImplementation, bytes32 newImplementationCodeHash, bytes setupParams)",
      "function validateContractCall(bytes32 commandId, string sourceChain, string sourceAddress, bytes32 payloadHash) returns (bool valid)",
      "function validateContractCallAndMint(bytes32 commandId, string sourceChain, string sourceAddress, bytes32 payloadHash, string symbol, uint256 amount) returns (bool valid)"
    ],
    "0xb28478319B64f8D47e19A120209A211D902F8b8f": [
      "function deployToken(string name, string symbol, uint8 decimals, uint256 cap, bytes32 salt) returns (address tokenAddress)"
    ],
    "0xCC940AE49C78F20E3F13F3cF37e996b98Ac3EC68": [
      "constructor(address[] accounts, uint256 threshold)",
      "error AlreadyVoted()",
      "error DuplicateSigner(address account)",
      "error ExecutionFailed()",
      "error InsufficientBalance()",
      "error InvalidContract(address target)",
      "error InvalidSignerThreshold()",
      "error InvalidSigners()",
      "error NativeTransferFailed()",
      "error NotSigner()",
      "event MultisigOperationExecuted(bytes32 indexed topic, uint256 indexed signerEpoch, address indexed voter, uint256 threshold)",
      "event MultisigVoted(bytes32 indexed topic, uint256 indexed signerEpoch, address indexed voter, uint256 voteCount, uint256 threshold)",
      "event SignersRotated(address[] newAccounts, uint256 newThreshold)",
      "function executeContract(address target, bytes callData, uint256 nativeValue) payable returns (bytes)",
      "function getSignerVotesCount(bytes32 topic) view returns (uint256)",
      "function hasSignerVoted(address account, bytes32 topic) view returns (bool)",
      "function isSigner(address account) view returns (bool)",
      "function rotateSigners(address[] newAccounts, uint256 newThreshold)",
      "function signerAccounts() view returns (address[])",
      "function signerEpoch() view returns (uint256)",
      "function signerThreshold() view returns (uint256)",
      "function signers() view returns (uint256 threshold)",
      "function votingPerTopic(uint256, bytes32) view returns (uint256 voteCount)",
      "function withdraw(address recipient, uint256 amount)"
    ],
    "0xE3B83f79Fbf01B25659f8A814945aB82186A8AD0": [
      "constructor(bytes[] recentOperators)",
      "error DuplicateOperators()",
      "error InvalidOperators()",
      "error InvalidOwner()",
      "error InvalidOwnerAddress()",
      "error InvalidS()",
      "error InvalidSignature()",
      "error InvalidSignatureLength()",
      "error InvalidThreshold()",
      "error InvalidV()",
      "error InvalidWeights()",
      "error LowSignaturesWeight()",
      "error MalformedSigners()",
      "error NotOwner()",
      "event OperatorshipTransferred(address[] newOperators, uint256[] newWeights, uint256 newThreshold)",
      "event OwnershipTransferStarted(address indexed newOwner)",
      "event OwnershipTransferred(address indexed newOwner)",
      "function acceptOwnership()",
      "function currentEpoch() view returns (uint256)",
      "function epochForHash(bytes32) view returns (uint256)",
      "function hashForEpoch(uint256) view returns (bytes32)",
      "function owner() view returns (address owner_)",
      "function pendingOwner() view returns (address owner_)",
      "function proposeOwnership(address newOwner)",
      "function transferOperatorship(bytes params)",
      "function transferOwnership(address newOwner)",
      "function validateProof(bytes32 messageHash, bytes proof) view returns (bool)"
    ],
    "0xfDF36A30070ea0241d69052ea85ff44Ad0476a66": [
      "constructor(address gateway_, string governanceChain_, string governanceAddress_, uint256 minimumTimeDelay)",
      "error ExecutionFailed()",
      "error InsufficientBalance()",
      "error InvalidAddress()",
      "error InvalidCommand()",
      "error InvalidContract(address target)",
      "error InvalidTarget()",
      "error InvalidTimeLockHash()",
      "error NativeTransferFailed()",
      "error NotApprovedByGateway()",
      "error NotGovernance()",
      "error NotSelf()",
      "error TimeLockAlreadyScheduled()",
      "error TimeLockNotReady()",
      "error TokenNotSupported()",
      "event ProposalCancelled(bytes32 indexed proposalHash, address indexed target, bytes callData, uint256 value, uint256 indexed eta)",
      "event ProposalExecuted(bytes32 indexed proposalHash, address indexed target, bytes callData, uint256 value, uint256 indexed timestamp)",
      "event ProposalScheduled(bytes32 indexed proposalHash, address indexed target, bytes callData, uint256 value, uint256 indexed eta)",
      "function execute(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload)",
      "function executeProposal(address target, bytes callData, uint256 nativeValue) payable",
      "function executeWithToken(bytes32 commandId, string sourceChain, string sourceAddress, bytes payload, string tokenSymbol, uint256 amount)",
      "function gateway() view returns (address)",
      "function getProposalEta(address target, bytes callData, uint256 nativeValue) view returns (uint256)",
      "function getTimeLock(bytes32 hash) view returns (uint256)",
      "function governanceAddress() view returns (string)",
      "function governanceAddressHash() view returns (bytes32)",
      "function governanceChain() view returns (string)",
      "function governanceChainHash() view returns (bytes32)",
      "function minimumTimeLockDelay() view returns (uint256)",
      "function withdraw(address recipient, uint256 amount)"
    ]
  }
}
