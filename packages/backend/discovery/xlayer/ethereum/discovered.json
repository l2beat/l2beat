{
  "name": "xlayer",
  "chain": "ethereum",
  "blockNumber": 20832964,
  "configHash": "0x44089e74887a0b7cff4d60e42ec30908ccc4bbda5a190d87b0b495495d3902ab",
  "version": 14,
  "contracts": [
    {
      "name": "XLayerValidiumDAC",
      "address": "0x05652Ec92366F3C2255991a265c499E01Ba58e6a",
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x1e37EA18e9515db29b3E94A00eD31484A3130204",
          "via": []
        }
      ],
      "sinceTimestamp": 1711787327,
      "values": {
        "$admin": "0x1e37EA18e9515db29b3E94A00eD31484A3130204",
        "$implementation": "0xd620Ca1ad5c3888e4521c3374cE4088Cb78079b8",
        "$upgradeCount": 1,
        "committeeHash": "0xfa0cdb192e4e3d5bda14ab176fe857843eda35d462548ac406f8e2be43d29ec7",
        "getAmountOfMembers": 2,
        "getProcotolName": "DataAvailabilityCommittee",
        "members": [
          [
            "http://okx-defi-xlayer-dac1-pro:8444",
            "0x19A81baC80f9cE3A45095f3df3a7cF69ef18fC08"
          ],
          [
            "http://okx-defi-xlayer-dac2-pro:8444",
            "0xE94Ac3cBc1C7EFFEACca68e3Bfe5D81E26A659B5"
          ]
        ],
        "owner": "0x491619874b866c3cDB7C8553877da223525ead01",
        "requiredAmountOfSignatures": 2
      },
      "derivedName": "PolygonDataCommittee"
    },
    {
      "name": "XLayerVerifier",
      "address": "0x0775e11309d75aA6b0967917fB0213C5673eDf81",
      "sinceTimestamp": 1711291211,
      "values": { "$immutable": true },
      "derivedName": "FflonkVerifier"
    },
    {
      "name": "ProxyAdmin",
      "address": "0x1e37EA18e9515db29b3E94A00eD31484A3130204",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x05652Ec92366F3C2255991a265c499E01Ba58e6a"
        }
      ],
      "sinceTimestamp": 1711787315,
      "values": {
        "$immutable": true,
        "owner": "0xE4c5BFaddbf21a1F35AE66F180F78822078FBfDE"
      }
    },
    {
      "name": "XLayerValidium",
      "address": "0x2B0ee28D4D51bC9aDde5E58E295873F61F4a0507",
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["lastAccInputHash"],
      "sinceTimestamp": 1711785755,
      "values": {
        "$admin": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
        "$implementation": "0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C",
        "$upgradeCount": 1,
        "admin": "0x491619874b866c3cDB7C8553877da223525ead01",
        "bridgeAddress": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "calculatePolPerForceBatch": 0,
        "dataAvailabilityProtocol": "0x05652Ec92366F3C2255991a265c499E01Ba58e6a",
        "forceBatchAddress": "0x491619874b866c3cDB7C8553877da223525ead01",
        "forceBatchTimeout": 432000,
        "gasTokenAddress": "0x75231F58b43240C9718Dd58B4967c5114342a86c",
        "gasTokenNetwork": 0,
        "GLOBAL_EXIT_ROOT_MANAGER_L2": "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA",
        "globalExitRootManager": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
        "INITIALIZE_TX_BRIDGE_LIST_LEN_LEN": 249,
        "INITIALIZE_TX_BRIDGE_PARAMS": "0x80808401c9c38094",
        "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS": "0x80b9",
        "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA": "0x80b8",
        "INITIALIZE_TX_CONSTANT_BYTES": 32,
        "INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA": 31,
        "INITIALIZE_TX_DATA_LEN_EMPTY_METADATA": 228,
        "INITIALIZE_TX_EFFECTIVE_PERCENTAGE": "0xff",
        "isSequenceWithDataAvailabilityAllowed": false,
        "lastAccInputHash": "0x840f76b0a9670a3a164fdb1dd7c3604b272176d7f9fb60bc1dc10169e7804853",
        "lastForceBatch": 0,
        "lastForceBatchSequenced": 0,
        "networkName": "X Layer",
        "pendingAdmin": "0x0000000000000000000000000000000000000000",
        "pol": "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
        "rollupManager": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
        "SIGNATURE_INITIALIZE_TX_R": "0x00000000000000000000000000000000000000000000000000000005ca1ab1e0",
        "SIGNATURE_INITIALIZE_TX_S": "0x000000000000000000000000000000000000000000000000000000005ca1ab1e",
        "SIGNATURE_INITIALIZE_TX_V": 27,
        "TIMESTAMP_RANGE": 36,
        "trustedSequencer": "0xAF9d27ffe4d51eD54AC8eEc78f2785D7E11E5ab1",
        "trustedSequencerURL": "https://rpc.xlayer.tech"
      },
      "derivedName": "PolygonValidiumStorageMigration"
    }
  ],
  "eoas": [
    { "address": "0x0000000000000000000000000000000000000000" },
    { "address": "0x19A81baC80f9cE3A45095f3df3a7cF69ef18fC08" },
    { "address": "0x491619874b866c3cDB7C8553877da223525ead01" },
    { "address": "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA" },
    { "address": "0xAF9d27ffe4d51eD54AC8eEc78f2785D7E11E5ab1" },
    { "address": "0xE4c5BFaddbf21a1F35AE66F180F78822078FBfDE" },
    { "address": "0xE94Ac3cBc1C7EFFEACca68e3Bfe5D81E26A659B5" }
  ],
  "abis": {
    "0x05652Ec92366F3C2255991a265c499E01Ba58e6a": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x0775e11309d75aA6b0967917fB0213C5673eDf81": [
      "function verifyProof(bytes32[24] proof, uint256[1] pubSignals) view returns (bool)"
    ],
    "0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C": [
      "constructor(address _globalExitRootManager, address _pol, address _bridgeAddress, address _rollupManager)",
      "error BatchAlreadyVerified()",
      "error BatchNotSequencedOrNotSequenceEnd()",
      "error ExceedMaxVerifyBatches()",
      "error FinalNumBatchBelowLastVerifiedBatch()",
      "error FinalNumBatchDoesNotMatchPendingState()",
      "error FinalPendingStateNumInvalid()",
      "error ForceBatchNotAllowed()",
      "error ForceBatchTimeoutNotExpired()",
      "error ForceBatchesAlreadyActive()",
      "error ForceBatchesDecentralized()",
      "error ForceBatchesNotAllowedOnEmergencyState()",
      "error ForceBatchesOverflow()",
      "error ForcedDataDoesNotMatch()",
      "error GasTokenNetworkMustBeZeroOnEther()",
      "error GlobalExitRootNotExist()",
      "error HaltTimeoutNotExpired()",
      "error HaltTimeoutNotExpiredAfterEmergencyState()",
      "error HugeTokenMetadataNotSupported()",
      "error InitNumBatchAboveLastVerifiedBatch()",
      "error InitNumBatchDoesNotMatchPendingState()",
      "error InitSequencedBatchDoesNotMatch()",
      "error InvalidInitializeTransaction()",
      "error InvalidProof()",
      "error InvalidRangeBatchTimeTarget()",
      "error InvalidRangeForceBatchTimeout()",
      "error InvalidRangeMultiplierBatchFee()",
      "error MaxTimestampSequenceInvalid()",
      "error NewAccInputHashDoesNotExist()",
      "error NewPendingStateTimeoutMustBeLower()",
      "error NewStateRootNotInsidePrime()",
      "error NewTrustedAggregatorTimeoutMustBeLower()",
      "error NotEnoughMaticAmount()",
      "error NotEnoughPOLAmount()",
      "error OldAccInputHashDoesNotExist()",
      "error OldStateRootDoesNotExist()",
      "error OnlyAdmin()",
      "error OnlyPendingAdmin()",
      "error OnlyRollupManager()",
      "error OnlyTrustedAggregator()",
      "error OnlyTrustedSequencer()",
      "error PendingStateDoesNotExist()",
      "error PendingStateInvalid()",
      "error PendingStateNotConsolidable()",
      "error PendingStateTimeoutExceedHaltAggregationTimeout()",
      "error SequenceWithDataAvailabilityNotAllowed()",
      "error SequenceZeroBatches()",
      "error SequencedTimestampBelowForcedTimestamp()",
      "error SequencedTimestampInvalid()",
      "error StoredRootMustBeDifferentThanNewRoot()",
      "error SwitchToSameValue()",
      "error TransactionsLengthAboveMax()",
      "error TrustedAggregatorTimeoutExceedHaltAggregationTimeout()",
      "error TrustedAggregatorTimeoutNotExpired()",
      "event AcceptAdminRole(address newAdmin)",
      "event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)",
      "event InitialSequenceBatches(bytes transactions, bytes32 lastGlobalExitRoot, address sequencer)",
      "event Initialized(uint8 version)",
      "event SequenceBatches(uint64 indexed numBatch, bytes32 l1InfoRoot)",
      "event SequenceForceBatches(uint64 indexed numBatch)",
      "event SetDataAvailabilityProtocol(address newDataAvailabilityProtocol)",
      "event SetForceBatchAddress(address newForceBatchAddress)",
      "event SetForceBatchTimeout(uint64 newforceBatchTimeout)",
      "event SetTrustedSequencer(address newTrustedSequencer)",
      "event SetTrustedSequencerURL(string newTrustedSequencerURL)",
      "event SwitchSequenceWithDataAvailability()",
      "event TransferAdminRole(address newPendingAdmin)",
      "event VerifyBatches(uint64 indexed numBatch, bytes32 stateRoot, address indexed aggregator)",
      "function GLOBAL_EXIT_ROOT_MANAGER_L2() view returns (address)",
      "function INITIALIZE_TX_BRIDGE_LIST_LEN_LEN() view returns (uint8)",
      "function INITIALIZE_TX_BRIDGE_PARAMS() view returns (bytes)",
      "function INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS() view returns (bytes)",
      "function INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA() view returns (bytes)",
      "function INITIALIZE_TX_CONSTANT_BYTES() view returns (uint16)",
      "function INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA() view returns (uint16)",
      "function INITIALIZE_TX_DATA_LEN_EMPTY_METADATA() view returns (uint8)",
      "function INITIALIZE_TX_EFFECTIVE_PERCENTAGE() view returns (bytes1)",
      "function SIGNATURE_INITIALIZE_TX_R() view returns (bytes32)",
      "function SIGNATURE_INITIALIZE_TX_S() view returns (bytes32)",
      "function SIGNATURE_INITIALIZE_TX_V() view returns (uint8)",
      "function TIMESTAMP_RANGE() view returns (uint256)",
      "function acceptAdminRole()",
      "function admin() view returns (address)",
      "function bridgeAddress() view returns (address)",
      "function calculatePolPerForceBatch() view returns (uint256)",
      "function dataAvailabilityProtocol() view returns (address)",
      "function forceBatch(bytes transactions, uint256 polAmount)",
      "function forceBatchAddress() view returns (address)",
      "function forceBatchTimeout() view returns (uint64)",
      "function forcedBatches(uint64) view returns (bytes32)",
      "function gasTokenAddress() view returns (address)",
      "function gasTokenNetwork() view returns (uint32)",
      "function generateInitializeTransaction(uint32 networkID, address _gasTokenAddress, uint32 _gasTokenNetwork, bytes _gasTokenMetadata) view returns (bytes)",
      "function globalExitRootManager() view returns (address)",
      "function initialize(address _admin, address sequencer, uint32 networkID, address _gasTokenAddress, string sequencerURL, string _networkName)",
      "function initializeMigration()",
      "function isSequenceWithDataAvailabilityAllowed() view returns (bool)",
      "function lastAccInputHash() view returns (bytes32)",
      "function lastForceBatch() view returns (uint64)",
      "function lastForceBatchSequenced() view returns (uint64)",
      "function networkName() view returns (string)",
      "function onVerifyBatches(uint64 lastVerifiedBatch, bytes32 newStateRoot, address aggregator)",
      "function pendingAdmin() view returns (address)",
      "function pol() view returns (address)",
      "function rollupManager() view returns (address)",
      "function sequenceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, uint64 maxSequenceTimestamp, uint64 initSequencedBatch, address l2Coinbase)",
      "function sequenceBatchesValidium(tuple(bytes32 transactionsHash, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, uint64 maxSequenceTimestamp, uint64 initSequencedBatch, address l2Coinbase, bytes dataAvailabilityMessage)",
      "function sequenceForceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches)",
      "function setDataAvailabilityProtocol(address newDataAvailabilityProtocol)",
      "function setForceBatchAddress(address newForceBatchAddress)",
      "function setForceBatchTimeout(uint64 newforceBatchTimeout)",
      "function setTrustedSequencer(address newTrustedSequencer)",
      "function setTrustedSequencerURL(string newTrustedSequencerURL)",
      "function switchSequenceWithDataAvailability(bool newIsSequenceWithDataAvailabilityAllowed)",
      "function transferAdminRole(address newPendingAdmin)",
      "function trustedSequencer() view returns (address)",
      "function trustedSequencerURL() view returns (string)"
    ],
    "0x1e37EA18e9515db29b3E94A00eD31484A3130204": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x2B0ee28D4D51bC9aDde5E58E295873F61F4a0507": [
      "constructor(address _logic, address admin, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xd620Ca1ad5c3888e4521c3374cE4088Cb78079b8": [
      "constructor()",
      "error CommitteeAddressDoesNotExist()",
      "error EmptyURLNotAllowed()",
      "error TooManyRequiredSignatures()",
      "error UnexpectedAddrsAndSignaturesSize()",
      "error UnexpectedAddrsBytesLength()",
      "error UnexpectedCommitteeHash()",
      "error WrongAddrOrder()",
      "event CommitteeUpdated(bytes32 committeeHash)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function committeeHash() view returns (bytes32)",
      "function getAmountOfMembers() view returns (uint256)",
      "function getProcotolName() pure returns (string)",
      "function initialize()",
      "function members(uint256) view returns (string url, address addr)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function requiredAmountOfSignatures() view returns (uint256)",
      "function setupCommittee(uint256 _requiredAmountOfSignatures, string[] urls, bytes addrsBytes)",
      "function transferOwnership(address newOwner)",
      "function verifyMessage(bytes32 signedHash, bytes signaturesAndAddrs) view"
    ]
  },
  "usedTemplates": {},
  "shapeFilesHash": "0xb3e808e6410511e5cdb557ab187aac264a51956c695f8cc327ebaa202f7514fd"
}
