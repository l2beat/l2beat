{
  "name": "across",
  "blockNumber": 16541033,
  "contracts": [
    {
      "name": "HubPool",
      "address": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
      "code": "https://etherscan.deth.net/address/0xc186fA914353c44b2E33eBE05f21846F1048bEda",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "bondAmount": "450000000000000000",
        "bondToken": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "crossChainArbitrum": [
          "0x29528780E29abb8Af95a5e5a125b94766987543F",
          "0xB88690461dDbaB6f04Dfad7df66B7725942FEb9C"
        ],
        "crossChainBoba": [
          "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
          "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58"
        ],
        "crossChainMainnet": [
          "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
          "0x4D9079Bb4165aeb4084c526a32695dCfd2F77381"
        ],
        "crossChainOptimism": [
          "0x22eD83A9eE26236486F57cE8385A247E5bFB71fF",
          "0xa420b2d1c0841415A695b81E5B867BCD07Dff8C9"
        ],
        "crossChainPolygon": [
          "0x3E94e8d4316a1eBfb2245E45E6F0B8724094CE1A",
          "0x69B5c72837769eF1e7C164Abc6515DcFf217F920"
        ],
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "identifier": "0x4143524f53532d56320000000000000000000000000000000000000000000000",
        "liveness": 7200,
        "lpFeeRatePerSecond": 1500000000000,
        "lpTokenFactory": "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "paused": false,
        "protocolFeeCaptureAddress": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
        "protocolFeeCapturePct": 0,
        "rootBundleProposal": [
          "0x1dff127513cd83e0737b80513a1f482b87e4994344afe08d01dac9696be78cad",
          "0x764ed708fdb467a5c10d4a35d4e581f6d52941124b70d34219a7ee99d735f209",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          0,
          "0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c",
          4,
          1675339475
        ],
        "timerAddress": "0x0000000000000000000000000000000000000000",
        "weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0xB524735356985D2f267FA010D681f061DfF03715",
      "code": "https://etherscan.deth.net/address/0xB524735356985D2f267FA010D681f061DfF03715,0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"
      },
      "values": {
        "domainSeparator": "0xbb022dfb1fe065f2a2c6ea647af6240343ff4b980bc3c1183ecd630958c3b59e",
        "getChainId": 1,
        "getOwners": [
          "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
          "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe",
          "0x996267d7d1B7f5046543feDe2c2Db473Ed4f65e9",
          "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
          "0x1f11D8B72fc1B534448436BA60B4B371276DAb33"
        ],
        "getThreshold": 3,
        "nonce": 104,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "LpTokenFactory",
      "address": "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
      "code": "https://etherscan.deth.net/address/0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "Finder",
      "address": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
      "code": "https://etherscan.deth.net/address/0x40f941E48A552bF496B154Af6bf55725f18D77c3",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "isOwner": false,
        "owner": "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc"
      }
    },
    {
      "name": "Governor",
      "address": "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc",
      "code": "https://etherscan.deth.net/address/0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "getCurrentTime": 1675339895,
        "getMember": [
          "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc",
          "0x226726Ac52e6e948D1B7eA9168F9Ff2E27DbcbB5"
        ],
        "numProposals": 189,
        "timerAddress": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "Proposer",
      "address": "0x226726Ac52e6e948D1B7eA9168F9Ff2E27DbcbB5",
      "code": "https://etherscan.deth.net/address/0x226726Ac52e6e948D1B7eA9168F9Ff2E27DbcbB5",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "bond": "5000000000000000000000",
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getCurrentTime": 1675339895,
        "governor": "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc",
        "owner": "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc",
        "timerAddress": "0x0000000000000000000000000000000000000000",
        "token": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828"
      }
    },
    {
      "name": "VotingToken",
      "address": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828",
      "code": "https://etherscan.deth.net/address/0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "decimals": 18,
        "getMember": [
          "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc"
        ],
        "name": "UMA Voting Token v1",
        "symbol": "UMA",
        "totalSupply": "112647923977060371032286408",
        "totalSupplyAt": []
      }
    },
    {
      "name": "Polygon_Adapter",
      "address": "0x3E94e8d4316a1eBfb2245E45E6F0B8724094CE1A",
      "code": "https://etherscan.deth.net/address/0x3E94e8d4316a1eBfb2245E45E6F0B8724094CE1A",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "depositManager": "0x401F6c983eA34274ec46f84D70b31C151321188b",
        "erc20Predicate": "0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf",
        "fxStateSender": "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
        "l1Matic": "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
        "l1Weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "rootChainManager": "0xA0c68C638235ee32657e8f720a23ceC1bFc77C77"
      }
    },
    {
      "name": "Optimism_Adapter",
      "address": "0x22eD83A9eE26236486F57cE8385A247E5bFB71fF",
      "code": "https://etherscan.deth.net/address/0x22eD83A9eE26236486F57cE8385A247E5bFB71fF",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "dai": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "daiOptimismBridge": "0x10E6593CDda8c58a1d0f14C5164B376352a55f2F",
        "l1StandardBridge": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
        "l1Weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "l2GasLimit": 2000000,
        "messenger": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "snx": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
        "snxOptimismBridge": "0xCd9D4988C0AE61887B075bA77f08cbFAd2b65068"
      }
    },
    {
      "name": "Ethereum_SpokePool",
      "address": "0x4D9079Bb4165aeb4084c526a32695dCfd2F77381",
      "code": "https://etherscan.deth.net/address/0x4D9079Bb4165aeb4084c526a32695dCfd2F77381",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "chainId": 1,
        "crossDomainAdmin": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
        "depositQuoteTimeBuffer": 3600,
        "getCurrentTime": 1675339895,
        "hubPool": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "numberOfDeposits": 64528,
        "owner": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "timerAddress": "0x0000000000000000000000000000000000000000",
        "wrappedNativeToken": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "Ethereum_Adapter",
      "address": "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
      "code": "https://etherscan.deth.net/address/0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "CoveredCallFinancialProductLibrary",
      "address": "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58",
      "code": "https://etherscan.deth.net/address/0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "Boba_Adapter",
      "address": "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
      "code": "https://etherscan.deth.net/address/0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "l1StandardBridge": "0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00",
        "l1Weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "l2GasLimit": 2000000,
        "messenger": "0x6D4528d192dB72E282265D6092F4B872f9Dff69e"
      }
    },
    {
      "name": "Arbitrum_Adapter",
      "address": "0x29528780E29abb8Af95a5e5a125b94766987543F",
      "code": "https://etherscan.deth.net/address/0x29528780E29abb8Af95a5e5a125b94766987543F",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "l1ERC20GatewayRouter": "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef",
        "l1Inbox": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
        "l2GasPrice": 5000000000,
        "l2MaxSubmissionCost": "10000000000000000",
        "l2RefundL2Address": "0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010",
        "RELAY_MESSAGE_L2_GAS_LIMIT": 2000000,
        "RELAY_TOKENS_L2_GAS_LIMIT": 300000
      }
    }
  ],
  "eoas": [
    "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
    "0x1f11D8B72fc1B534448436BA60B4B371276DAb33",
    "0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010",
    "0x69B5c72837769eF1e7C164Abc6515DcFf217F920",
    "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe",
    "0x996267d7d1B7f5046543feDe2c2Db473Ed4f65e9",
    "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "0xa420b2d1c0841415A695b81E5B867BCD07Dff8C9",
    "0xB88690461dDbaB6f04Dfad7df66B7725942FEb9C",
    "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
    "0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c"
  ],
  "abis": {
    "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828": [
      "constructor()",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Snapshot(uint256 id)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function addMember(uint256 roleId, address newMember)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function balanceOfAt(address account, uint256 snapshotId) view returns (uint256)",
      "function burn(uint256 value)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function getMember(uint256 roleId) view returns (address)",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function mint(address recipient, uint256 value) returns (bool)",
      "function name() view returns (string)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function resetMember(uint256 roleId, address newMember)",
      "function snapshot() returns (uint256)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function totalSupplyAt(uint256 snapshotId) view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
    ],
    "0x226726Ac52e6e948D1B7eA9168F9Ff2E27DbcbB5": [
      "constructor(address _token, uint256 _bond, address _governor, address _finder, address _timer)",
      "event BondSet(uint256 bond)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalResolved(uint256 indexed id, bool success)",
      "function bond() view returns (uint256)",
      "function bondedProposals(uint256) view returns (address sender, uint64 time, uint256 lockedBond)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function governor() view returns (address)",
      "function owner() view returns (address)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions) returns (uint256 id)",
      "function renounceOwnership()",
      "function resolveProposal(uint256 id)",
      "function setBond(uint256 _bond)",
      "function setCurrentTime(uint256 time)",
      "function timerAddress() view returns (address)",
      "function token() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x22eD83A9eE26236486F57cE8385A247E5bFB71fF": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function dai() view returns (address)",
      "function daiOptimismBridge() view returns (address)",
      "function l1StandardBridge() view returns (address)",
      "function l1Weth() view returns (address)",
      "function l2GasLimit() view returns (uint32)",
      "function messenger() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function snx() view returns (address)",
      "function snxOptimismBridge() view returns (address)"
    ],
    "0x29528780E29abb8Af95a5e5a125b94766987543F": [
      "constructor(address _l1ArbitrumInbox, address _l1ERC20GatewayRouter)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function RELAY_MESSAGE_L2_GAS_LIMIT() view returns (uint32)",
      "function RELAY_TOKENS_L2_GAS_LIMIT() view returns (uint32)",
      "function getL1CallValue(uint32 l2GasLimit) pure returns (uint256)",
      "function l1ERC20GatewayRouter() view returns (address)",
      "function l1Inbox() view returns (address)",
      "function l2GasPrice() view returns (uint256)",
      "function l2MaxSubmissionCost() view returns (uint256)",
      "function l2RefundL2Address() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function l1StandardBridge() view returns (address)",
      "function l1Weth() view returns (address)",
      "function l2GasLimit() view returns (uint32)",
      "function messenger() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x3E94e8d4316a1eBfb2245E45E6F0B8724094CE1A": [
      "constructor(address _rootChainManager, address _fxStateSender, address _depositManager, address _erc20Predicate, address _l1Matic, address _l1Weth)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function depositManager() view returns (address)",
      "function erc20Predicate() view returns (address)",
      "function fxStateSender() view returns (address)",
      "function l1Matic() view returns (address)",
      "function l1Weth() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function rootChainManager() view returns (address)"
    ],
    "0x40f941E48A552bF496B154Af6bf55725f18D77c3": [
      "event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)",
      "function getImplementationAddress(bytes32 interfaceName) view returns (address implementationAddress)",
      "function interfacesImplemented(bytes32) view returns (address)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0x4D9079Bb4165aeb4084c526a32695dCfd2F77381": [
      "constructor(address _hubPool, address _wethAddress, address timerAddress)",
      "event EmergencyDeleteRootBundle(uint256 indexed rootBundleId)",
      "event EnabledDepositRoute(address indexed originToken, uint256 indexed destinationChainId, bool enabled)",
      "event ExecutedRelayerRefundRoot(uint256 amountToReturn, uint256 indexed chainId, uint256[] refundAmounts, uint32 indexed rootBundleId, uint32 indexed leafId, address l2TokenAddress, address[] refundAddresses, address caller)",
      "event FilledRelay(uint256 amount, uint256 totalFilledAmount, uint256 fillAmount, uint256 repaymentChainId, uint256 originChainId, uint256 destinationChainId, uint64 relayerFeePct, uint64 appliedRelayerFeePct, uint64 realizedLpFeePct, uint32 depositId, address destinationToken, address indexed relayer, address indexed depositor, address recipient, bool isSlowRelay)",
      "event FundsDeposited(uint256 amount, uint256 originChainId, uint256 destinationChainId, uint64 relayerFeePct, uint32 indexed depositId, uint32 quoteTimestamp, address indexed originToken, address recipient, address indexed depositor)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RelayedRootBundle(uint32 indexed rootBundleId, bytes32 indexed relayerRefundRoot, bytes32 indexed slowRelayRoot)",
      "event RequestedSpeedUpDeposit(uint64 newRelayerFeePct, uint32 indexed depositId, address indexed depositor, bytes depositorSignature)",
      "event SetDepositQuoteTimeBuffer(uint32 newBuffer)",
      "event SetHubPool(address indexed newHubPool)",
      "event SetXDomainAdmin(address indexed newAdmin)",
      "event TokensBridged(uint256 amountToReturn, uint256 indexed chainId, uint32 indexed leafId, address indexed l2TokenAddress, address caller)",
      "function chainId() view returns (uint256)",
      "function crossDomainAdmin() view returns (address)",
      "function deposit(address recipient, address originToken, uint256 amount, uint256 destinationChainId, uint64 relayerFeePct, uint32 quoteTimestamp) payable",
      "function depositQuoteTimeBuffer() view returns (uint32)",
      "function emergencyDeleteRootBundle(uint256 rootBundleId)",
      "function enabledDepositRoutes(address, uint256) view returns (bool)",
      "function executeRelayerRefundLeaf(uint32 rootBundleId, tuple(uint256 amountToReturn, uint256 chainId, uint256[] refundAmounts, uint32 leafId, address l2TokenAddress, address[] refundAddresses) relayerRefundLeaf, bytes32[] proof)",
      "function executeSlowRelayLeaf(address depositor, address recipient, address destinationToken, uint256 amount, uint256 originChainId, uint64 realizedLpFeePct, uint64 relayerFeePct, uint32 depositId, uint32 rootBundleId, bytes32[] proof)",
      "function fillRelay(address depositor, address recipient, address destinationToken, uint256 amount, uint256 maxTokensToSend, uint256 repaymentChainId, uint256 originChainId, uint64 realizedLpFeePct, uint64 relayerFeePct, uint32 depositId)",
      "function fillRelayWithUpdatedFee(address depositor, address recipient, address destinationToken, uint256 amount, uint256 maxTokensToSend, uint256 repaymentChainId, uint256 originChainId, uint64 realizedLpFeePct, uint64 relayerFeePct, uint64 newRelayerFeePct, uint32 depositId, bytes depositorSignature)",
      "function getCurrentTime() view returns (uint256)",
      "function hubPool() view returns (address)",
      "function multicall(bytes[] data) payable returns (bytes[] results)",
      "function numberOfDeposits() view returns (uint32)",
      "function owner() view returns (address)",
      "function relayFills(bytes32) view returns (uint256)",
      "function relayRootBundle(bytes32 relayerRefundRoot, bytes32 slowRelayRoot)",
      "function renounceOwnership()",
      "function rootBundles(uint256) view returns (bytes32 slowRelayRoot, bytes32 relayerRefundRoot)",
      "function setCrossDomainAdmin(address newCrossDomainAdmin)",
      "function setCurrentTime(uint256 time)",
      "function setDepositQuoteTimeBuffer(uint32 newDepositQuoteTimeBuffer)",
      "function setEnableRoute(address originToken, uint256 destinationChainId, bool enabled)",
      "function setHubPool(address newHubPool)",
      "function speedUpDeposit(address depositor, uint64 newRelayerFeePct, uint32 depositId, bytes depositorSignature)",
      "function timerAddress() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function wrappedNativeToken() view returns (address)"
    ],
    "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084": [
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc": [
      "constructor(address _finderAddress, uint256 _startingId, address _timerAddress)",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event NewProposal(uint256 indexed id, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event ProposalExecuted(uint256 indexed id, uint256 transactionIndex)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function addMember(uint256 roleId, address newMember)",
      "function executeProposal(uint256 id, uint256 transactionIndex) payable",
      "function getCurrentTime() view returns (uint256)",
      "function getMember(uint256 roleId) view returns (address)",
      "function getProposal(uint256 id) view returns (tuple(tuple(address to, uint256 value, bytes data)[] transactions, uint256 requestTime))",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function numProposals() view returns (uint256)",
      "function proposals(uint256) view returns (uint256 requestTime)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)",
      "function setCurrentTime(uint256 time)",
      "function timerAddress() view returns (address)"
    ],
    "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d": [
      "function createLpToken(address l1Token) returns (address)"
    ],
    "0xB524735356985D2f267FA010D681f061DfF03715": [
      "constructor(address _singleton)"
    ],
    "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58": [
      "function getStrikeForFinancialProduct(address financialProduct) view returns (tuple(uint256 rawValue))",
      "function setFinancialProductStrike(address financialProduct, tuple(uint256 rawValue) strikePrice)",
      "function transformCollateralRequirement(tuple(uint256 rawValue) oraclePrice, tuple(uint256 rawValue) collateralRequirement) view returns (tuple(uint256 rawValue))",
      "function transformPrice(tuple(uint256 rawValue) oraclePrice, uint256 requestTime) view returns (tuple(uint256 rawValue))",
      "function transformPriceIdentifier(bytes32 priceIdentifier, uint256 requestTime) view returns (bytes32)"
    ],
    "0xc186fA914353c44b2E33eBE05f21846F1048bEda": [
      "constructor(address _lpTokenFactory, address _finder, address _weth, address _timer)",
      "event BondSet(address indexed newBondToken, uint256 newBondAmount)",
      "event CrossChainContractsSet(uint256 l2ChainId, address adapter, address spokePool)",
      "event EmergencyRootBundleDeleted(bytes32 indexed poolRebalanceRoot, bytes32 indexed relayerRefundRoot, bytes32 slowRelayRoot, address indexed proposer)",
      "event IdentifierSet(bytes32 newIdentifier)",
      "event L1TokenEnabledForLiquidityProvision(address l1Token, address lpToken)",
      "event L2TokenDisabledForLiquidityProvision(address l1Token, address lpToken)",
      "event LiquidityAdded(address indexed l1Token, uint256 amount, uint256 lpTokensMinted, address indexed liquidityProvider)",
      "event LiquidityRemoved(address indexed l1Token, uint256 amount, uint256 lpTokensBurnt, address indexed liquidityProvider)",
      "event LivenessSet(uint256 newLiveness)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(bool indexed isPaused)",
      "event ProposeRootBundle(uint32 challengePeriodEndTimestamp, uint8 poolRebalanceLeafCount, uint256[] bundleEvaluationBlockNumbers, bytes32 indexed poolRebalanceRoot, bytes32 indexed relayerRefundRoot, bytes32 slowRelayRoot, address indexed proposer)",
      "event ProtocolFeeCaptureSet(address indexed newProtocolFeeCaptureAddress, uint256 indexed newProtocolFeeCapturePct)",
      "event ProtocolFeesCapturedClaimed(address indexed l1Token, uint256 indexed accumulatedFees)",
      "event RootBundleCanceled(address indexed disputer, uint256 requestTime)",
      "event RootBundleDisputed(address indexed disputer, uint256 requestTime)",
      "event RootBundleExecuted(uint256 groupIndex, uint256 indexed leafId, uint256 indexed chainId, address[] l1Tokens, uint256[] bundleLpFees, int256[] netSendAmounts, int256[] runningBalances, address indexed caller)",
      "event SetEnableDepositRoute(uint256 indexed originChainId, uint256 indexed destinationChainId, address indexed originToken, bool depositsEnabled)",
      "event SetPoolRebalanceRoute(uint256 indexed destinationChainId, address indexed l1Token, address indexed destinationToken)",
      "event SpokePoolAdminFunctionTriggered(uint256 indexed chainId, bytes message)",
      "function addLiquidity(address l1Token, uint256 l1TokenAmount) payable",
      "function bondAmount() view returns (uint256)",
      "function bondToken() view returns (address)",
      "function claimProtocolFeesCaptured(address l1Token)",
      "function crossChainContracts(uint256) view returns (address adapter, address spokePool)",
      "function disableL1TokenForLiquidityProvision(address l1Token)",
      "function disputeRootBundle()",
      "function emergencyDeleteProposal()",
      "function enableL1TokenForLiquidityProvision(address l1Token)",
      "function exchangeRateCurrent(address l1Token) returns (uint256)",
      "function executeRootBundle(uint256 chainId, uint256 groupIndex, uint256[] bundleLpFees, int256[] netSendAmounts, int256[] runningBalances, uint8 leafId, address[] l1Tokens, bytes32[] proof)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function haircutReserves(address l1Token, int256 haircutAmount)",
      "function identifier() view returns (bytes32)",
      "function liquidityUtilizationCurrent(address l1Token) returns (uint256)",
      "function liquidityUtilizationPostRelay(address l1Token, uint256 relayedAmount) returns (uint256)",
      "function liveness() view returns (uint32)",
      "function loadEthForL2Calls() payable",
      "function lpFeeRatePerSecond() view returns (uint256)",
      "function lpTokenFactory() view returns (address)",
      "function multicall(bytes[] data) payable returns (bytes[] results)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function poolRebalanceRoute(uint256 destinationChainId, address l1Token) view returns (address destinationToken)",
      "function pooledTokens(address) view returns (address lpToken, bool isEnabled, uint32 lastLpFeeUpdate, int256 utilizedReserves, uint256 liquidReserves, uint256 undistributedLpFees)",
      "function proposeRootBundle(uint256[] bundleEvaluationBlockNumbers, uint8 poolRebalanceLeafCount, bytes32 poolRebalanceRoot, bytes32 relayerRefundRoot, bytes32 slowRelayRoot)",
      "function protocolFeeCaptureAddress() view returns (address)",
      "function protocolFeeCapturePct() view returns (uint256)",
      "function relaySpokePoolAdminFunction(uint256 chainId, bytes functionData)",
      "function removeLiquidity(address l1Token, uint256 lpTokenAmount, bool sendEth)",
      "function renounceOwnership()",
      "function rootBundleProposal() view returns (bytes32 poolRebalanceRoot, bytes32 relayerRefundRoot, bytes32 slowRelayRoot, uint256 claimedBitMap, address proposer, uint8 unclaimedPoolRebalanceLeafCount, uint32 challengePeriodEndTimestamp)",
      "function setBond(address newBondToken, uint256 newBondAmount)",
      "function setCrossChainContracts(uint256 l2ChainId, address adapter, address spokePool)",
      "function setCurrentTime(uint256 time)",
      "function setDepositRoute(uint256 originChainId, uint256 destinationChainId, address originToken, bool depositsEnabled)",
      "function setIdentifier(bytes32 newIdentifier)",
      "function setLiveness(uint32 newLiveness)",
      "function setPaused(bool pause)",
      "function setPoolRebalanceRoute(uint256 destinationChainId, address l1Token, address destinationToken)",
      "function setProtocolFeeCapture(address newProtocolFeeCaptureAddress, uint256 newProtocolFeeCapturePct)",
      "function sync(address l1Token)",
      "function timerAddress() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unclaimedAccumulatedProtocolFees(address) view returns (uint256)",
      "function weth() view returns (address)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ]
  }
}