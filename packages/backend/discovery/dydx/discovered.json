{
  "name": "dydx",
  "blockNumber": 16154924,
  "contracts": [
    {
      "name": "Proxy",
      "address": "0xD54f502e184B6B739d7D27a6410a67dc462D69c8",
      "code": "https://etherscan.deth.net/address/0xD54f502e184B6B739d7D27a6410a67dc462D69c8,0x2C0df87E073755139101b35c0A51e065291cc2d3,0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5,0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545,0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0,0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3",
      "upgradeability": {
        "type": "StarkWare diamond",
        "implementation": "0x2C0df87E073755139101b35c0A51e065291cc2d3",
        "upgradeDelay": 0,
        "isFinal": false,
        "facets": {
          "StarkWare_AllVerifiers_2020_1": "0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5",
          "StarkWare_PerpetualTokensAndRamping_2020_1": "0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545",
          "StarkWare_PerpetualState_2020_1": "0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0",
          "StarkWare_PerpetualForcedActions_2020_1": "0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3"
        }
      },
      "values": {
        "configurationDelay": 0,
        "DEPOSIT_CANCEL_DELAY": 604800,
        "FREEZE_GRACE_PERIOD": 1209600,
        "getAssetInfo": [],
        "getEthKey": [],
        "getLastBatchId": 11666,
        "getOrderRoot": "3531663064398379414392103051782416009365270089329406087415787723190509217307",
        "getOrderTreeHeight": 64,
        "getRegisteredAvailabilityVerifiers": [
          "0x8A8E80e0762243f0df39f2847808B7F6D62e2bb1"
        ],
        "getRegisteredVerifiers": [
          "0x8Ab85d3A1816a0d7ECE0F57AF6b27FC3b05532F4"
        ],
        "getSequenceNumber": 11381,
        "getSystemAssetType": "1147032829293317481173155891309375254605214077236177772270270553197624560221",
        "getUpgradeActivationDelay": 0,
        "getVaultRoot": "2342595862804194058781558162417993093531983529298102817989527487868713080358",
        "getVaultTreeHeight": 64,
        "globalConfigurationHash": "0x00b763230e8b7409f7a22c099d0159583b77cf79805449042082598e0acd6d97",
        "identify": "StarkWare_PerpetualTokensAndRamping_2020_1",
        "implementation": "0x2C0df87E073755139101b35c0A51e065291cc2d3",
        "initializerSize": 384,
        "isFrozen": false,
        "isNotFinalized": true,
        "MAIN_DISPATCHER_SAFEGUARD_SLOT": "0xf3afa5472f846c7817e22b15110d7b184f2d3d6417baee645a1e963b8fac7e24",
        "MAIN_GOVERNANCE_INFO_TAG": "StarkEx.Main.2019.GovernorsInformation",
        "MAX_FORCED_ACTIONS_REQS_PER_BLOCK": 10,
        "MAX_VERIFIER_COUNT": 64,
        "PROXY_GOVERNANCE_TAG": "StarkEx.Proxy.2019.GovernorsInformation",
        "UNFREEZE_DELAY": 31536000,
        "UPGRADE_DELAY_SLOT": "0xc21dbb3089fcb2c4f4c6a67854ab4db2b0f233ea4b21b21f912d52d18fc5db1f",
        "VERIFIER_REMOVAL_DELAY": 3024000,
        "VERSION": "1.0.0"
      }
    },
    {
      "name": "FinalizableGpsFactAdapter",
      "address": "0x8Ab85d3A1816a0d7ECE0F57AF6b27FC3b05532F4",
      "code": "https://etherscan.deth.net/address/0x8Ab85d3A1816a0d7ECE0F57AF6b27FC3b05532F4",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "gpsContract": "0xC8c212f11f6ACca77A7afeB7282dEBa5530eb46C",
        "hasRegisteredFact": true,
        "identify": "StarkWare_FinalizableGpsFactAdapterForTesting_2021_1",
        "isFinalized": true,
        "programHash": "3034699314518632418633798167565169540135516579166751375550467178691995202911"
      }
    },
    {
      "name": "CallProxy",
      "address": "0xC8c212f11f6ACca77A7afeB7282dEBa5530eb46C",
      "code": "https://etherscan.deth.net/address/0xC8c212f11f6ACca77A7afeB7282dEBa5530eb46C,0xCC5B2c75cbbD281b2Fc4B58C7d5B080d023C92F2",
      "upgradeability": {
        "type": "StarkWare proxy",
        "implementation": "0xCC5B2c75cbbD281b2Fc4B58C7d5B080d023C92F2",
        "callImplementation": "0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3",
        "upgradeDelay": 0,
        "isFinal": true
      },
      "values": {
        "callProxyImplementation": "0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3",
        "getUpgradeActivationDelay": 0,
        "implementation": "0xCC5B2c75cbbD281b2Fc4B58C7d5B080d023C92F2",
        "isFrozen": false,
        "isNotFinalized": true,
        "MAIN_DISPATCHER_SAFEGUARD_SLOT": "0xf3afa5472f846c7817e22b15110d7b184f2d3d6417baee645a1e963b8fac7e24",
        "PROXY_GOVERNANCE_TAG": "StarkEx.Proxy.2019.GovernorsInformation",
        "UPGRADE_DELAY_SLOT": "0xc21dbb3089fcb2c4f4c6a67854ab4db2b0f233ea4b21b21f912d52d18fc5db1f"
      }
    },
    {
      "name": "GpsStatementVerifier",
      "address": "0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3",
      "code": "https://etherscan.deth.net/address/0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "hasRegisteredFact": true,
        "identify": "StarkWare_GpsStatementVerifier_2020_1"
      }
    },
    {
      "name": "Committee",
      "address": "0x8A8E80e0762243f0df39f2847808B7F6D62e2bb1",
      "code": "https://etherscan.deth.net/address/0x8A8E80e0762243f0df39f2847808B7F6D62e2bb1",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "hasRegisteredFact": false,
        "identify": "StarkWare_Committee_2019_1",
        "signaturesRequired": 1
      }
    }
  ],
  "eoas": [],
  "abis": {
    "0x2C0df87E073755139101b35c0A51e065291cc2d3": [
      "function VERSION() view returns (string)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function initialize(bytes data)"
    ],
    "0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545": [
      "event LogDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositCancel(uint256 starkKey, uint256 vaultId, uint256 assetId)",
      "event LogDepositCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositNftCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogFrozen()",
      "event LogMintWithdrawalPerformed(uint256 starkKey, uint256 tokenId, uint256 nonQuantizedAmount, uint256 quantizedAmount, uint256 assetId)",
      "event LogMintableWithdrawalAllowed(uint256 starkKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogNftWithdrawalAllowed(uint256 starkKey, uint256 assetId)",
      "event LogNftWithdrawalPerformed(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 assetId, address recipient)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogSystemAssetType(uint256 assetType)",
      "event LogTokenAdminAdded(address tokenAdmin)",
      "event LogTokenAdminRemoved(address tokenAdmin)",
      "event LogTokenRegistered(uint256 assetType, bytes assetInfo)",
      "event LogUnFrozen()",
      "event LogUserAdminAdded(address userAdmin)",
      "event LogUserAdminRemoved(address userAdmin)",
      "event LogUserRegistered(address ethKey, uint256 starkKey, address sender)",
      "event LogWithdrawalAllowed(uint256 starkKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogWithdrawalPerformed(uint256 starkKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, address recipient)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositCancel(uint256 starkKey, uint256 assetId, uint256 vaultId)",
      "function depositERC20(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositEth(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function depositNft(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositNftReclaim(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositReclaim(uint256 starkKey, uint256 assetId, uint256 vaultId)",
      "function getAssetInfo(uint256 assetType) view returns (bytes assetInfo)",
      "function getCancellationRequest(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 request)",
      "function getDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 balance)",
      "function getEthKey(uint256 starkKey) view returns (address ethKey)",
      "function getQuantizedDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 balance)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getSystemAssetType() view returns (uint256)",
      "function getWithdrawalBalance(uint256 starkKey, uint256 assetId) view returns (uint256 balance)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAssetRegistered(uint256 assetType) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isTokenAdmin(address testedAdmin) view returns (bool)",
      "function isUserAdmin(address testedAdmin) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function registerAndDepositERC20(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function registerAndDepositEth(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId) payable",
      "function registerSystemAssetType(uint256 assetType, bytes assetInfo)",
      "function registerToken(uint256, bytes)",
      "function registerToken(uint256, bytes, uint256)",
      "function registerTokenAdmin(address newAdmin)",
      "function registerUser(address ethKey, uint256 starkKey, bytes signature)",
      "function registerUserAdmin(address newAdmin)",
      "function unFreeze()",
      "function unregisterTokenAdmin(address oldAdmin)",
      "function unregisterUserAdmin(address oldAdmin)",
      "function withdraw(uint256 starkKey, uint256 assetType)",
      "function withdrawAndMint(uint256 starkKey, uint256 assetType, bytes mintingBlob)",
      "function withdrawNft(uint256 starkKey, uint256 assetType, uint256 tokenId)",
      "function withdrawNftTo(uint256 starkKey, uint256 assetType, uint256 tokenId, address recipient)",
      "function withdrawTo(uint256 starkKey, uint256 assetType, address recipient)"
    ],
    "0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5": [
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRegistered(address entry, string entryId)",
      "event LogRemovalIntent(address entry, string entryId)",
      "event LogRemoved(address entry, string entryId)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function announceAvailabilityVerifierRemovalIntent(address verifier)",
      "function announceVerifierRemovalIntent(address verifier)",
      "function getRegisteredAvailabilityVerifiers() view returns (address[] _verifers)",
      "function getRegisteredVerifiers() view returns (address[] _verifers)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAvailabilityVerifier(address verifierAddress) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isVerifier(address verifierAddress) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAvailabilityVerifier(address verifier, string identifier)",
      "function registerVerifier(address verifier, string identifier)",
      "function removeAvailabilityVerifier(address verifier)",
      "function removeVerifier(address verifier)",
      "function unFreeze()"
    ],
    "0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3": [
      "constructor(address bootloaderProgramContract, address memoryPageFactRegistry_, address[] cairoVerifierContracts)",
      "event LogMemoryPagesHashes(bytes32 factHash, bytes32[] pagesHashes)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function verifyProofAndRegister(uint256[] proofParams, uint256[] proof, uint256[] taskMetadata, uint256[] cairoAuxInput, uint256 cairoVerifierId)"
    ],
    "0x8A8E80e0762243f0df39f2847808B7F6D62e2bb1": [
      "constructor(address[] committeeMembers, uint256 numSignaturesRequired)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isMember(address) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function signaturesRequired() view returns (uint256)",
      "function verifyAvailabilityProof(bytes32 claimHash, bytes availabilityProofs)"
    ],
    "0x8Ab85d3A1816a0d7ECE0F57AF6b27FC3b05532F4": [
      "constructor(address gpsStatementContract, uint256 programHash_)",
      "function acceptOwnership()",
      "function finalize()",
      "function gpsContract() view returns (address)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isAdmin(address testedAddress) view returns (bool)",
      "function isFinalized() view returns (bool)",
      "function isOwner(address testedAddress) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function nominateNewOwner(address newOwner)",
      "function programHash() view returns (uint256)",
      "function registerAdmin(address newAdmin)",
      "function removeAdmin(address removedAdmin)",
      "function setProgramHash(uint256 newProgramHash)"
    ],
    "0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3": [
      "event LogForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce)",
      "event LogForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function forcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 submissionExpirationTime, uint256 nonce, bytes signature, bool premiumCost)",
      "function forcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount, bool premiumCost)",
      "function freezeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce)",
      "function freezeRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "function getEthKey(uint256 starkKey) view returns (address ethKey)",
      "function getForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce) view returns (uint256)",
      "function getForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount) view returns (uint256)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function unFreeze()"
    ],
    "0xC8c212f11f6ACca77A7afeB7282dEBa5530eb46C": [
      "constructor(uint256 upgradeActivationDelay)",
      "event FinalizedImplementation(address indexed implementation)",
      "event ImplementationAdded(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationRemoved(address indexed implementation)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event Upgraded(address indexed implementation)",
      "function MAIN_DISPATCHER_SAFEGUARD_SLOT() view returns (bytes32)",
      "function PROXY_GOVERNANCE_TAG() view returns (string)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function addImplementation(address newImplementation, bytes data, bool finalize)",
      "function getUpgradeActivationDelay() view returns (uint256 delay)",
      "function implementation() view returns (address _implementation)",
      "function initialize(bytes) pure",
      "function isNotFinalized() view returns (bool notFinal)",
      "function proxyAcceptGovernance()",
      "function proxyCancelNomination()",
      "function proxyIsGovernor(address testGovernor) view returns (bool)",
      "function proxyNominateNewGovernor(address newGovernor)",
      "function proxyRemoveGovernor(address governorForRemoval)",
      "function removeImplementation(address newImplementation)",
      "function upgradeTo(address newImplementation, bytes data, bool finalize) payable"
    ],
    "0xCC5B2c75cbbD281b2Fc4B58C7d5B080d023C92F2": [
      "function MAIN_DISPATCHER_SAFEGUARD_SLOT() view returns (bytes32)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function callProxyImplementation() view returns (address _implementation)",
      "function implementation() view returns (address _implementation)",
      "function initialize(bytes data)",
      "function isFrozen() pure returns (bool)"
    ],
    "0xD54f502e184B6B739d7D27a6410a67dc462D69c8": [
      "constructor(uint256 upgradeActivationDelay)",
      "event FinalizedImplementation(address indexed implementation)",
      "event ImplementationAdded(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationRemoved(address indexed implementation)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event Upgraded(address indexed implementation)",
      "function MAIN_DISPATCHER_SAFEGUARD_SLOT() view returns (bytes32)",
      "function PROXY_GOVERNANCE_TAG() view returns (string)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function addImplementation(address newImplementation, bytes data, bool finalize)",
      "function getUpgradeActivationDelay() view returns (uint256 delay)",
      "function implementation() view returns (address _implementation)",
      "function initialize(bytes) pure",
      "function isNotFinalized() view returns (bool notFinal)",
      "function proxyAcceptGovernance()",
      "function proxyCancelNomination()",
      "function proxyIsGovernor(address testGovernor) view returns (bool)",
      "function proxyNominateNewGovernor(address newGovernor)",
      "function proxyRemoveGovernor(address governorForRemoval)",
      "function removeImplementation(address newImplementation)",
      "function upgradeTo(address newImplementation, bytes data, bool finalize) payable"
    ],
    "0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0": [
      "event LogAssetConfigurationApplied(uint256 assetId, bytes32 configHash)",
      "event LogAssetConfigurationRegistered(uint256 assetId, bytes32 configHash)",
      "event LogAssetConfigurationRemoved(uint256 assetId, bytes32 configHash)",
      "event LogFrozen()",
      "event LogGlobalConfigurationApplied(bytes32 configHash)",
      "event LogGlobalConfigurationRegistered(bytes32 configHash)",
      "event LogGlobalConfigurationRemoved(bytes32 configHash)",
      "event LogMintableWithdrawalAllowed(uint256 starkKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftWithdrawalAllowed(uint256 starkKey, uint256 assetId)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogOperatorAdded(address operator)",
      "event LogOperatorRemoved(address operator)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogStateTransitionFact(bytes32 stateTransitionFact)",
      "event LogUnFrozen()",
      "event LogUpdateState(uint256 sequenceNumber, uint256 batchId)",
      "event LogWithdrawalAllowed(uint256 starkKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function applyAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function applyGlobalConfigurationChange(bytes32 configHash)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function escape(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "function getEthKey(uint256 starkKey) view returns (address ethKey)",
      "function getForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce) view returns (uint256)",
      "function getForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount) view returns (uint256)",
      "function getLastBatchId() view returns (uint256 batchId)",
      "function getOrderRoot() view returns (uint256 root)",
      "function getOrderTreeHeight() view returns (uint256 height)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getSequenceNumber() view returns (uint256 seq)",
      "function getVaultRoot() view returns (uint256 root)",
      "function getVaultTreeHeight() view returns (uint256 height)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes data)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function isOperator(address testedOperator) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function registerGlobalConfigurationChange(bytes32 configHash)",
      "function registerOperator(address newOperator)",
      "function removeAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function removeGlobalConfigurationChange(bytes32 configHash)",
      "function unFreeze()",
      "function unregisterOperator(address removedOperator)",
      "function updateState(uint256[] programOutput, uint256[] applicationData)"
    ]
  }
}