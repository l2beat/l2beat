{
  "name": "dydx",
  "blockNumber": 17622125,
  "configHash": "0xe1bdfb7c3675a3cba24a23ce6fd77cb43eb44aeb57c51d49417f18ca0e9dabad",
  "version": 1,
  "contracts": [
    {
      "name": "MerkleDistributor",
      "address": "0x01d3348601968aB85b4bb028979006eac235a588",
      "code": "https://etherscan.deth.net/address/0x01d3348601968aB85b4bb028979006eac235a588,0xFE1d5439625a9524a80F66670733129E80E0C112",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xFE1d5439625a9524a80F66670733129E80E0C112",
        "admin": "0x6C5cd3aD7A16Ae207D221908E6b997d9B0DcD7b0"
      },
      "values": {
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "OWNER_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "CONFIG_UPDATER_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "PAUSER_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0xd98e7A71BacB6F11438A8271dDB2EFd7f9361F52"]
          },
          "UNPAUSER_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "CLAIM_OPERATOR_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x0fd829C3365A225FB9226e75c97c3A114bD3199e"]
          }
        },
        "canUpdateRoot": false,
        "CLAIM_OPERATOR_ROLE": "0x36dc7495d0ae0bc2a620bf292049e4d4e5f800043895b13c08a1977d3a3297f5",
        "CONFIG_UPDATER_ROLE": "0x1ab0187632b3cb5ac848b647a9edd463e705607328ab29602e80fc3fa8001918",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getAreRootUpdatesPaused": false,
        "getCurrentEpoch": 25,
        "getEpochParameters": [2419200, 1628002800],
        "getIpfsEpoch": 25,
        "getIpfsUpdatePeriod": 180,
        "getIpnsName": "rewards-data.dydx.foundation",
        "getRewardsOracle": "0x99B0599952a4FD2d1A1561Fa4C010827EaD30354",
        "getWaitingPeriodEnd": 1686691847,
        "hasPendingRoot": false,
        "OWNER_ROLE": "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
        "PAUSER_ROLE": "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
        "REWARDS_TOKEN": "0x92D6C1e31e14520e676a687F0a93788B716BEff5",
        "REWARDS_TREASURY": "0x639192D54431F8c816368D3FB4107Bc168d0E871",
        "TRADER_SCORE_ALPHA_BASE": "1000000000000000000",
        "UNPAUSER_ROLE": "0x427da25fe773164f88948d3e215c94b6554e2ed5e5f203a821c9f2f6131cf75a",
        "WAITING_PERIOD": 604800
      },
      "derivedName": "MerkleDistributorV1"
    },
    {
      "name": "CpuFrilessVerifier",
      "address": "0x04D4E67F8B6c67D63219Cd088bC45E8e89fE6D73",
      "code": "https://etherscan.deth.net/address/0x04D4E67F8B6c67D63219Cd088bC45E8e89fE6D73",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "CpuOods",
      "address": "0x0c6dEc0B366b1bb4C14597cf1Da8b4af2E7799b5",
      "code": "https://etherscan.deth.net/address/0x0c6dEc0B366b1bb4C14597cf1Da8b4af2E7799b5",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "MerkleStatementContract",
      "address": "0x0d62bac5c346c78DC1b27107CAbC5F4DE057a830",
      "code": "https://etherscan.deth.net/address/0x0d62bac5c346c78DC1b27107CAbC5F4DE057a830",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "hasRegisteredFact": true
      }
    },
    {
      "name": "ClaimsProxy",
      "address": "0x0fd829C3365A225FB9226e75c97c3A114bD3199e",
      "code": "https://etherscan.deth.net/address/0x0fd829C3365A225FB9226e75c97c3A114bD3199e",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "LIQUIDITY_STAKING": "0x5Aa653A076c1dbB47cec8C1B4d152444CAD91941",
        "MERKLE_DISTRIBUTOR": "0x01d3348601968aB85b4bb028979006eac235a588",
        "REWARDS_TREASURY_VESTER": "0xb9431E19B29B952d9358025f680077C3Fd37292f",
        "SAFETY_MODULE": "0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC"
      }
    },
    {
      "name": "PedersenHashPointsYColumn",
      "address": "0x0fED12bD8B1B11c629001c436b90bcd99F4Fec92",
      "code": "https://etherscan.deth.net/address/0x0fED12bD8B1B11c629001c436b90bcd99F4Fec92",
      "upgradeability": {
        "type": "immutable"
      },
      "derivedName": "PedersenHashPointsYColumn"
    },
    {
      "name": "CairoBootloaderProgram",
      "address": "0x1dd8945200f5a09D6Fe0ed68494c2ac41cd02E2D",
      "code": "https://etherscan.deth.net/address/0x1dd8945200f5a09D6Fe0ed68494c2ac41cd02E2D",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "getCompiledProgram": [
          "1226245742482522112",
          181,
          "74168662805676031",
          0,
          "146226256843603965",
          4,
          "5191102238658887680",
          "2345108766317314046",
          "290341444919459839",
          3,
          "4632937381316558848",
          "4612671182992932865",
          "4612671182992998402",
          "146226256843603968",
          4,
          "74168662805676031",
          4,
          "4612671182993063937",
          "4612671182993129474",
          "5198983563776196608",
          1,
          "5198983563776262144",
          1,
          "5200109459388203008",
          "5200109459388268544",
          "5198983563776458752",
          "3618502788666131213697322783095070105623107215331596699973092056135872020480",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020458",
          "2345108766317314046",
          "2345108766317314046",
          "1226245742482522112",
          5,
          "5198420613823102976",
          "3618502788666131213697322783095070105623107215331596699973092056135872020479",
          "2345108766317314046",
          "2345108766317314046",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020474",
          "5198420613823168512",
          "3618502788666131213697322783095070105623107215331596699973092056135872020442",
          "5202361254907052032",
          "2345108766317314046",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020468",
          "5191102234363920384",
          "5191102238658887680",
          "5191102242953854976",
          "5198420613822906368",
          50,
          "5189976364521848832",
          4,
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020433",
          "4623648689905041407",
          "291467327646433279",
          "2345108766317314046",
          "146226256843603965",
          4,
          "5191102230068953088",
          "2345108766317314046",
          "5188850460319711232",
          "5188850460319776768",
          "5201798300658860031",
          "5188850460319842304",
          "5210805504208568318",
          "4612389708016222207",
          "5198983563776196608",
          1,
          "5198983563776262144",
          1,
          "5198983563776327680",
          1,
          "5198983563776393216",
          1,
          "5198983563776458752",
          "3618502788666131213697322783095070105623107215331596699973092056135872020480",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020461",
          "2345108766317314046",
          "5188850460319907840",
          "5202361254907052032",
          "5191102242953854976",
          "5188287510366552064",
          "5188287506071519232",
          "5188287510366486527",
          "4611826762357964797",
          "5198420613822906368",
          "3618502788666131213697322783095070105623107215331596699973092056135872020480",
          "5198420613822906368",
          3,
          "5188287518956224512",
          "4623085744246521853",
          "145944781866893308",
          "3618502788666131213697322783095070105623107215331596699973092056135872020472",
          "2345108766317314046",
          "146226256843603965",
          6,
          "5191102225773985792",
          "5191102238658887680",
          "5191102242953854976",
          "2345108766317314046",
          "290341444919459839",
          16,
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020407",
          "4617174774030761984",
          "4612671182992867338",
          "5189976364521848832",
          0,
          "4612389712311713791",
          "5188850464614547456",
          "5191102264428691456",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020448",
          "4612389712312303615",
          "4622804286450008075",
          4,
          "4612671195878359052",
          "5200109510928859136",
          "5188850468910104576",
          "4625619027626983437",
          "4622804286450597890",
          2,
          "4617174765440827395",
          "4612671191582801924",
          "4612671195877769221",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020384",
          "4612389712311386110",
          "5189976364521848832",
          16,
          "5201798304953696256",
          "4612389708016418815",
          "5191102230068953088",
          "5198983563776655360",
          2,
          "5191102307378364416",
          "5191102311673331712",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020385",
          "1191342896910008320",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020370",
          "4623648758625632255",
          "722405534170316800",
          0,
          "5191102230068953088",
          "5198983563776655360",
          6,
          "5191102307378364416",
          "5191102320263266304",
          "5189976364521848832",
          4,
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020331",
          "4623648754330533887",
          "5191102238658887680",
          "5198983563776655360",
          2,
          "5198983563776655360",
          6,
          "5191102234363920384",
          "5189976364521848832",
          4,
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020373",
          "4623930225012473862",
          "4612671182994046991",
          "5198983563776655360",
          6,
          "5191102230068953088",
          "5191102234363920384",
          "5193354042767540224",
          "5198983563776393216",
          2,
          "5198983563776458752",
          "3618502788666131213697322783095070105623107215331596699973092056135872020480",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020399",
          "2345108766317314046",
          "290341444919459839",
          1,
          "5199265038752907265",
          1,
          "5191383709340631042",
          "5191383735110434819",
          "5191383717930565636",
          "5190257839498559493",
          122550255383924,
          "5190257839498559494",
          "8098989891770344814",
          "5190257839498559495",
          "138277649577220228665140075",
          "5190257839498559496",
          435459224417,
          "5190257839498559497",
          1,
          "5190257839498559498",
          3,
          "5190257839498559499",
          1,
          "5190257839498559500",
          2,
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020307",
          "5198420613823102976",
          1,
          "5198420613823037440",
          5,
          "5198420613822971904",
          9,
          "5191102238658887680",
          "5191102247248822272",
          "5188850460319645696",
          "1226245742482522112",
          "3618502788666131213697322783095070105623107215331596699973092056135872020362",
          "4614641507830300670",
          "5188287510366486528",
          "5188287514661388288",
          "5188287518956290048",
          "5188287523251191808",
          "5193354038472572928",
          "2345108766317314046"
        ]
      }
    },
    {
      "name": "CpuConstraintPoly",
      "address": "0x1F5459AA7857291112A8172ae1328248948d9d13",
      "code": "https://etherscan.deth.net/address/0x1F5459AA7857291112A8172ae1328248948d9d13",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "TreasuryProxyAdmin",
      "address": "0x40D6992cbd03E0DC1c2DE9606D29Cb245E737a5d",
      "code": "https://etherscan.deth.net/address/0x40D6992cbd03E0DC1c2DE9606D29Cb245E737a5d",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "owner": "0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"
      },
      "derivedName": "ProxyAdmin"
    },
    {
      "name": "CpuFrilessVerifier",
      "address": "0x4922f8750DFd040954b44F23980160342e308863",
      "code": "https://etherscan.deth.net/address/0x4922f8750DFd040954b44F23980160342e308863",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "constructorArgs": [
          [
            "0x1F5459AA7857291112A8172ae1328248948d9d13",
            "0x9Bcf13C6b68450B427bfa86698D61901A8a3456D",
            "0x0fED12bD8B1B11c629001c436b90bcd99F4Fec92",
            "0x52c4bb16FbA75f6EBD672568267BC334255Fb3c5",
            "0xD14fd39630Ec941C3bA6C791E3af9E0027013A15"
          ],
          "0x0c6dEc0B366b1bb4C14597cf1Da8b4af2E7799b5",
          "0xEfbCcE4659db72eC6897F46783303708cf9ACef8",
          "0x0d62bac5c346c78DC1b27107CAbC5F4DE057a830",
          "0xf6b83CcaDeee478FC372AF6ca7069b14FBc5E1B1",
          "80",
          "0"
        ]
      },
      "derivedName": "CpuFrilessVerifier"
    },
    {
      "name": "EcdsaPointsXColumn",
      "address": "0x52c4bb16FbA75f6EBD672568267BC334255Fb3c5",
      "code": "https://etherscan.deth.net/address/0x52c4bb16FbA75f6EBD672568267BC334255Fb3c5",
      "upgradeability": {
        "type": "immutable"
      },
      "derivedName": "EcdsaPointsXColumn"
    },
    {
      "name": "LiquidityStaking",
      "address": "0x5Aa653A076c1dbB47cec8C1B4d152444CAD91941",
      "code": "https://etherscan.deth.net/address/0x5Aa653A076c1dbB47cec8C1B4d152444CAD91941,0xBE607a58206180fef691bf1B5aE9670174284388",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xBE607a58206180fef691bf1B5aE9670174284388",
        "admin": "0xAc5D8bCD13da463bea96c75f9085c4e40037F790"
      },
      "values": {
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "OWNER_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "EPOCH_PARAMETERS_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "REWARDS_RATE_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "BORROWER_ADMIN_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "CLAIM_OPERATOR_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x0fd829C3365A225FB9226e75c97c3A114bD3199e"]
          },
          "STAKE_OPERATOR_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": []
          },
          "DEBT_OPERATOR_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": []
          }
        },
        "BORROWER_ADMIN_ROLE": "0x6c2e489c3a95017c97c0bcc47de38933a0bbf2041c9289b8ca34c445b13177af",
        "BORROWERS_LIST": [
          "0x0000000000000000000000000000000000000000",
          "0x0b2B08AC98a1568A34208121c26F4F41a9e0FbB6",
          "0x3e6E9EFb0A677a24F47093a22044dc5451A028cF",
          "0xCB7fa3a2F47b62293Cc2E1a4C7752fC72E49FCe2",
          "0x16BEC2D9A010e7D8b2D576d17893C52Ddbfe4C06",
          "0x531F3BE462F10386D01FBeD7fAD1d20A61Ce7874"
        ],
        "CLAIM_OPERATOR_ROLE": "0x36dc7495d0ae0bc2a620bf292049e4d4e5f800043895b13c08a1977d3a3297f5",
        "DEBT_OPERATOR_ROLE": "0x0428e137352b5b1a834770c71b580c01521c0b3f2442928c650692cd1b3f496c",
        "decimals": 6,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DISTRIBUTION_END": 1785682798,
        "DISTRIBUTION_START": 1628002800,
        "EPOCH_PARAMETERS_ROLE": "0xa69ba352872fe0ee634bc8d48d2a09a61267da1bfb2015e67a11ad05fe21f04b",
        "getBlackoutWindow": 259200,
        "getContractBalanceAvailableToBorrow": 321465035255,
        "getContractBalanceAvailableToWithdraw": 554486212117,
        "getCurrentEpoch": 25,
        "getEpochParameters": [2419200, 1628002800],
        "getRewardsPerSecond": 0,
        "getShortfall": [],
        "getShortfallCount": 0,
        "getTimeRemainingInCurrentEpoch": 2409253,
        "getTotalActiveBalanceCurrentEpoch": 321464039503,
        "getTotalActiveBalanceNextEpoch": 321464039503,
        "getTotalBorrowedBalance": 4248,
        "getTotalBorrowerDebtBalance": 0,
        "getTotalDebtAvailableToWithdraw": 0,
        "getTotalInactiveBalanceCurrentEpoch": 233021176862,
        "getTotalInactiveBalanceNextEpoch": 233021176862,
        "hasEpochZeroStarted": true,
        "inBlackoutWindow": false,
        "name": "dYdX Staked USDC",
        "OWNER_ROLE": "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
        "REWARDS_RATE_ROLE": "0x74ec845281a5bcabeef9a800a79d30928ff9e6f2dc6f69a233fc39a83cb81ed2",
        "REWARDS_TOKEN": "0x92D6C1e31e14520e676a687F0a93788B716BEff5",
        "REWARDS_TREASURY": "0x639192D54431F8c816368D3FB4107Bc168d0E871",
        "STAKE_OPERATOR_ROLE": "0xa6fbd0d4ef0ac50b4de984ab8f303863596293cce6d67dd6111979bcf56abe74",
        "STAKED_TOKEN": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "symbol": "stkUSDC",
        "TOTAL_ALLOCATION": 10000,
        "totalSupply": 554485216365
      },
      "derivedName": "LiquidityStakingV1"
    },
    {
      "name": "PerpetualEscapeVerifier",
      "address": "0x626211C1e9BC633f4D342Af99f4E8bc93f11F3DD",
      "code": "https://etherscan.deth.net/address/0x626211C1e9BC633f4D342Af99f4E8bc93f11F3DD",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "hasRegisteredFact": false,
        "identify": "StarkWare_PerpetualEscapeVerifier_2021_2"
      }
    },
    {
      "name": "Treasury",
      "address": "0x639192D54431F8c816368D3FB4107Bc168d0E871",
      "code": "https://etherscan.deth.net/address/0x639192D54431F8c816368D3FB4107Bc168d0E871,0x0AdA60E07717Ab19E4A466f5f0ac68A66e3995Ce",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x0AdA60E07717Ab19E4A466f5f0ac68A66e3995Ce",
        "admin": "0x40D6992cbd03E0DC1c2DE9606D29Cb245E737a5d"
      },
      "values": {
        "owner": "0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc",
        "REVISION": 1
      }
    },
    {
      "name": "ShortTimelockExecutor",
      "address": "0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc",
      "code": "https://etherscan.deth.net/address/0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "getAdmin": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
        "getDelay": 172800,
        "getPendingAdmin": "0x0000000000000000000000000000000000000000",
        "GRACE_PERIOD": 604800,
        "MAXIMUM_DELAY": 604800,
        "MINIMUM_DELAY": 86400,
        "MINIMUM_QUORUM": 200,
        "ONE_HUNDRED_WITH_PRECISION": 10000,
        "PROPOSITION_THRESHOLD": 50,
        "VOTE_DIFFERENTIAL": 50,
        "VOTING_DURATION": 26280
      },
      "derivedName": "Executor"
    },
    {
      "name": "SafetyModule",
      "address": "0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC",
      "code": "https://etherscan.deth.net/address/0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC,0x31D76F5Db8F40D28886Bf00F3be5F157472Bf77A",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x31D76F5Db8F40D28886Bf00F3be5F157472Bf77A",
        "admin": "0x6aaD0BCfbD91963Cf2c8FB042091fd411FB05b3C"
      },
      "values": {
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "OWNER_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "SLASHER_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "EPOCH_PARAMETERS_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "REWARDS_RATE_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          },
          "CLAIM_OPERATOR_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x0fd829C3365A225FB9226e75c97c3A114bD3199e"]
          },
          "STAKE_OPERATOR_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": []
          }
        },
        "CLAIM_OPERATOR_ROLE": "0x36dc7495d0ae0bc2a620bf292049e4d4e5f800043895b13c08a1977d3a3297f5",
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DELEGATE_BY_TYPE_TYPEHASH": "0x10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e5",
        "DELEGATE_TYPEHASH": "0x9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d",
        "DISTRIBUTION_END": 1793395485,
        "DISTRIBUTION_START": 1631113200,
        "EIP712_DOMAIN_NAME": "dYdX Safety Module",
        "EIP712_DOMAIN_SCHEMA_HASH": "0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
        "EIP712_DOMAIN_VERSION": "1",
        "EPOCH_PARAMETERS_ROLE": "0xa69ba352872fe0ee634bc8d48d2a09a61267da1bfb2015e67a11ad05fe21f04b",
        "EXCHANGE_RATE_BASE": "1000000000000000000",
        "EXCHANGE_RATE_MAY_OVERFLOW": "11579208923731619542357098500868790785326998466564",
        "getBlackoutWindow": 259200,
        "getDomainSeparator": "0x161c3ac8e8b026f7e79318a1342bdf00249c5e5a8a1d5a6cb6757eeeb155939d",
        "getExchangeRate": "1000000000000000000",
        "getExchangeRateSnapshotCount": 0,
        "getRewardsPerSecond": 0,
        "hasEpochZeroStarted": true,
        "inBlackoutWindow": false,
        "MAX_EXCHANGE_RATE": "176684706477838432958329750074291851582748389000000000000000000",
        "MAX_SLASH_DENOMINATOR": 100,
        "MAX_SLASH_NUMERATOR": 95,
        "MAX_UNDERLYING_BALANCE": "10000000000000000000000000000",
        "name": "Staked DYDX",
        "OWNER_ROLE": "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
        "PERMIT_TYPEHASH": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
        "REWARDS_RATE_ROLE": "0x74ec845281a5bcabeef9a800a79d30928ff9e6f2dc6f69a233fc39a83cb81ed2",
        "REWARDS_TOKEN": "0x92D6C1e31e14520e676a687F0a93788B716BEff5",
        "REWARDS_TREASURY": "0x639192D54431F8c816368D3FB4107Bc168d0E871",
        "SLASHER_ROLE": "0x12b42e8a160f6064dc959c6f251e3af0750ad213dbecf573b4710d67d6c28e39",
        "STAKE_AMOUNT_MAY_OVERFLOW": "115792089237316195423570985008687907853269984665640564039457",
        "STAKE_OPERATOR_ROLE": "0xa6fbd0d4ef0ac50b4de984ab8f303863596293cce6d67dd6111979bcf56abe74",
        "STAKED_TOKEN": "0x92D6C1e31e14520e676a687F0a93788B716BEff5",
        "symbol": "stkDYDX",
        "totalSupply": "4158086677339380257322008"
      },
      "derivedName": "SafetyModuleV2"
    },
    {
      "name": "SafetyModuleProxyAdmin",
      "address": "0x6aaD0BCfbD91963Cf2c8FB042091fd411FB05b3C",
      "code": "https://etherscan.deth.net/address/0x6aaD0BCfbD91963Cf2c8FB042091fd411FB05b3C",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "owner": "0xEcaE9BF44A21d00E2350a42127A377Bf5856d84B"
      },
      "derivedName": "ProxyAdmin"
    },
    {
      "name": "MerkleDistributorProxyAdmin",
      "address": "0x6C5cd3aD7A16Ae207D221908E6b997d9B0DcD7b0",
      "code": "https://etherscan.deth.net/address/0x6C5cd3aD7A16Ae207D221908E6b997d9B0DcD7b0",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "owner": "0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"
      },
      "derivedName": "ProxyAdmin"
    },
    {
      "name": "DydxGovernor",
      "address": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
      "code": "https://etherscan.deth.net/address/0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "OWNER_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0xEcaE9BF44A21d00E2350a42127A377Bf5856d84B"]
          },
          "ADD_EXECUTOR_ROLE": {
            "adminRole": "OWNER_ROLE",
            "members": ["0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"]
          }
        },
        "ADD_EXECUTOR_ROLE": "0x6d7de061afba91040b8f2fa055f62976f5be484e30e6b3eb7e3c831c2f411f09",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DOMAIN_TYPEHASH": "0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866",
        "EIP712_DOMAIN_NAME": "dYdX Governance",
        "EXECUTORS": [
          "0xEcaE9BF44A21d00E2350a42127A377Bf5856d84B",
          "0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc",
          "0xd98e7A71BacB6F11438A8271dDB2EFd7f9361F52",
          "0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE"
        ],
        "getGovernanceStrategy": "0x90Dfd35F4a0BB2d30CDf66508085e33C353475D9",
        "getProposalsCount": 14,
        "getVotingDelay": 6570,
        "OWNER_ROLE": "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
        "VOTE_EMITTED_TYPEHASH": "0x4e031542a9553ed1c4e810c54674ab4b984243e335b246aa3de73663bf4c11ee"
      },
      "derivedName": "DydxGovernor"
    },
    {
      "name": "GpsStatementVerifier",
      "address": "0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3",
      "code": "https://etherscan.deth.net/address/0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "constructorArgs": [
          "0x1dd8945200f5a09D6Fe0ed68494c2ac41cd02E2D",
          "0xEfbCcE4659db72eC6897F46783303708cf9ACef8",
          [
            "0x4922f8750DFd040954b44F23980160342e308863",
            "0x04D4E67F8B6c67D63219Cd088bC45E8e89fE6D73",
            "0xeCa5Da0287D407a23f7c0a13a9AAD87c7fBC10A3"
          ]
        ],
        "hasRegisteredFact": true,
        "identify": "StarkWare_GpsStatementVerifier_2020_1"
      },
      "derivedName": "GpsStatementVerifier"
    },
    {
      "name": "Committee",
      "address": "0x8A8E80e0762243f0df39f2847808B7F6D62e2bb1",
      "code": "https://etherscan.deth.net/address/0x8A8E80e0762243f0df39f2847808B7F6D62e2bb1",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "constructorArgs": [
          [
            "0xA7F2a5C4F294365ceCD366060DabF3831F27Ae68",
            "0x823AeefF884905Aae8A5Fc37aa93938d27EbeEa9"
          ],
          "1"
        ],
        "hasRegisteredFact": false,
        "identify": "StarkWare_Committee_2019_1",
        "signaturesRequired": 1
      },
      "derivedName": "Committee"
    },
    {
      "name": "GovernanceStrategy",
      "address": "0x90Dfd35F4a0BB2d30CDf66508085e33C353475D9",
      "code": "https://etherscan.deth.net/address/0x90Dfd35F4a0BB2d30CDf66508085e33C353475D9",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "DYDX_TOKEN": "0x92D6C1e31e14520e676a687F0a93788B716BEff5",
        "STAKED_DYDX_TOKEN": "0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC"
      },
      "derivedName": "GovernanceStrategy"
    },
    {
      "name": "DydxToken",
      "address": "0x92D6C1e31e14520e676a687F0a93788B716BEff5",
      "code": "https://etherscan.deth.net/address/0x92D6C1e31e14520e676a687F0a93788B716BEff5",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "_mintingRestrictedBefore": 1784041200,
        "_totalSupplySnapshotsCount": 1,
        "_transfersRestrictedBefore": 1631113200,
        "decimals": 18,
        "DELEGATE_BY_TYPE_TYPEHASH": "0x10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e5",
        "DELEGATE_TYPEHASH": "0x9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d",
        "DOMAIN_SEPARATOR": "0x17e76dd75f3dfe3e50d31322433cc1405e898404a5724da2d4804cab81e0a88a",
        "EIP712_DOMAIN": "0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
        "EIP712_VERSION": "0x31",
        "INITIAL_SUPPLY": "1000000000000000000000000000",
        "MINT_MAX_PERCENT": 2,
        "MINT_MIN_INTERVAL": 31536000,
        "name": "dYdX",
        "owner": "0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc",
        "PERMIT_TYPEHASH": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
        "symbol": "DYDX",
        "totalSupply": "1000000000000000000000000000",
        "TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN": 1631977200
      },
      "derivedName": "DydxToken"
    },
    {
      "name": "ChainlinkAdapter",
      "address": "0x99B0599952a4FD2d1A1561Fa4C010827EaD30354",
      "code": "https://etherscan.deth.net/address/0x99B0599952a4FD2d1A1561Fa4C010827EaD30354",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "CHAINLINK_TOKEN": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
        "JOB_ID": "0x6365366562393532363736373431666438323462626636643132313163313031",
        "MERKLE_DISTRIBUTOR": "0x01d3348601968aB85b4bb028979006eac235a588",
        "ORACLE_CONTRACT": "0x240BaE5A27233Fd3aC5440B5a598467725F7D1cd",
        "ORACLE_EXTERNAL_ADAPTER": "0xD26d233b5e444117d93CdbC676357b9C7Ff55906"
      },
      "derivedName": "MD1ChainlinkAdapter"
    },
    {
      "name": "PedersenHashPointsXColumn",
      "address": "0x9Bcf13C6b68450B427bfa86698D61901A8a3456D",
      "code": "https://etherscan.deth.net/address/0x9Bcf13C6b68450B427bfa86698D61901A8a3456D",
      "upgradeability": {
        "type": "immutable"
      },
      "derivedName": "PedersenHashPointsXColumn"
    },
    {
      "name": "PriorityExecutor",
      "address": "0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE",
      "code": "https://etherscan.deth.net/address/0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "getAdmin": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
        "getDelay": 777600,
        "getPendingAdmin": "0x0000000000000000000000000000000000000000",
        "getPriorityPeriod": 604800,
        "GRACE_PERIOD": 604800,
        "MAXIMUM_DELAY": 1814400,
        "MINIMUM_DELAY": 345600,
        "MINIMUM_QUORUM": 200,
        "ONE_HUNDRED_WITH_PRECISION": 10000,
        "PRIORITY_CONTROLLERS": ["0xDC7eBbc857Ad2d276c387100dB67c1041dA0B2c0"],
        "PROPOSITION_THRESHOLD": 50,
        "VOTE_DIFFERENTIAL": 50,
        "VOTING_DURATION": 26280
      },
      "derivedName": "PriorityExecutor"
    },
    {
      "name": "LiquidityStakingProxyAdmin",
      "address": "0xAc5D8bCD13da463bea96c75f9085c4e40037F790",
      "code": "https://etherscan.deth.net/address/0xAc5D8bCD13da463bea96c75f9085c4e40037F790",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "owner": "0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc"
      },
      "derivedName": "ProxyAdmin"
    },
    {
      "name": "TreasuryVester",
      "address": "0xb9431E19B29B952d9358025f680077C3Fd37292f",
      "code": "https://etherscan.deth.net/address/0xb9431E19B29B952d9358025f680077C3Fd37292f",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "dydx": "0x92D6C1e31e14520e676a687F0a93788B716BEff5",
        "lastUpdate": 1686803003,
        "recipient": "0x639192D54431F8c816368D3FB4107Bc168d0E871",
        "vestingAmount": "369630137000000000000000000",
        "vestingBegin": 1628002800,
        "vestingCliff": 1628002800,
        "vestingEnd": 1785769200
      },
      "derivedName": "TreasuryVester"
    },
    {
      "name": "EcdsaPointsYColumn",
      "address": "0xD14fd39630Ec941C3bA6C791E3af9E0027013A15",
      "code": "https://etherscan.deth.net/address/0xD14fd39630Ec941C3bA6C791E3af9E0027013A15",
      "upgradeability": {
        "type": "immutable"
      },
      "derivedName": "EcdsaPointsYColumn"
    },
    {
      "name": "StarkPerpetual",
      "address": "0xD54f502e184B6B739d7D27a6410a67dc462D69c8",
      "code": "https://etherscan.deth.net/address/0xD54f502e184B6B739d7D27a6410a67dc462D69c8,0x2C0df87E073755139101b35c0A51e065291cc2d3,0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5,0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545,0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0,0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3",
      "upgradeability": {
        "type": "StarkWare diamond",
        "implementation": "0x2C0df87E073755139101b35c0A51e065291cc2d3",
        "upgradeDelay": 0,
        "isFinal": false,
        "facets": {
          "StarkWare_AllVerifiers_2020_1": "0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5",
          "StarkWare_PerpetualTokensAndRamping_2020_1": "0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545",
          "StarkWare_PerpetualState_2020_1": "0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0",
          "StarkWare_PerpetualForcedActions_2020_1": "0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3"
        },
        "proxyGovernance": [
          "0xFCAac0F14deA11eDe11Afcb875f29130e1ad5ec0",
          "0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE"
        ]
      },
      "values": {
        "configurationDelay": 0,
        "DEPOSIT_CANCEL_DELAY": 604800,
        "escapeVerifier": "0x626211C1e9BC633f4D342Af99f4E8bc93f11F3DD",
        "FREEZE_GRACE_PERIOD": 1209600,
        "getAssetInfo": [],
        "getEthKey": [],
        "getLastBatchId": 17396,
        "getOrderRoot": "3531663064398379414392103051782416009365270089329406087415787723190509217307",
        "getOrderTreeHeight": 64,
        "getRegisteredAvailabilityVerifiers": [
          "0x8A8E80e0762243f0df39f2847808B7F6D62e2bb1"
        ],
        "getRegisteredVerifiers": [
          "0xF23754231BC4cE8C8E92C3bADfB37d922d46053C"
        ],
        "getSequenceNumber": 17103,
        "getSystemAssetType": "1147032829293317481173155891309375254605214077236177772270270553197624560221",
        "getUpgradeActivationDelay": 0,
        "getVaultRoot": "2342595862804194058781558162417993093531983529298102817989527487868713080358",
        "getVaultTreeHeight": 64,
        "globalConfigurationHash": "0x03cbd17769430aed60aa8b9a5867b375c3fdca23e56cbbd83e33290577f50449",
        "identify": "StarkWare_PerpetualTokensAndRamping_2020_1",
        "implementation": "0x2C0df87E073755139101b35c0A51e065291cc2d3",
        "initializerSize": 384,
        "isFrozen": false,
        "isNotFinalized": true,
        "MAIN_DISPATCHER_SAFEGUARD_SLOT": "0xf3afa5472f846c7817e22b15110d7b184f2d3d6417baee645a1e963b8fac7e24",
        "MAIN_GOVERNANCE_INFO_TAG": "StarkEx.Main.2019.GovernorsInformation",
        "MAX_FORCED_ACTIONS_REQS_PER_BLOCK": 10,
        "MAX_VERIFIER_COUNT": 64,
        "OPERATORS": ["0x8129b737912e17212C8693B781928f5D0303390a"],
        "PROXY_GOVERNANCE_TAG": "StarkEx.Proxy.2019.GovernorsInformation",
        "UNFREEZE_DELAY": 31536000,
        "UPGRADE_DELAY_SLOT": "0xc21dbb3089fcb2c4f4c6a67854ab4db2b0f233ea4b21b21f912d52d18fc5db1f",
        "VERIFIER_REMOVAL_DELAY": 3024000,
        "VERSION": "1.0.0"
      },
      "derivedName": "Proxy"
    },
    {
      "name": "MerklePauserExecutor",
      "address": "0xd98e7A71BacB6F11438A8271dDB2EFd7f9361F52",
      "code": "https://etherscan.deth.net/address/0xd98e7A71BacB6F11438A8271dDB2EFd7f9361F52",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "getAdmin": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
        "getDelay": 0,
        "getPendingAdmin": "0x0000000000000000000000000000000000000000",
        "GRACE_PERIOD": 604800,
        "MAXIMUM_DELAY": 86400,
        "MINIMUM_DELAY": 0,
        "MINIMUM_QUORUM": 100,
        "ONE_HUNDRED_WITH_PRECISION": 10000,
        "PROPOSITION_THRESHOLD": 50,
        "VOTE_DIFFERENTIAL": 50,
        "VOTING_DURATION": 13140
      },
      "derivedName": "Executor"
    },
    {
      "name": "CpuFrilessVerifier",
      "address": "0xeCa5Da0287D407a23f7c0a13a9AAD87c7fBC10A3",
      "code": "https://etherscan.deth.net/address/0xeCa5Da0287D407a23f7c0a13a9AAD87c7fBC10A3",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "LongTimelockExecutor",
      "address": "0xEcaE9BF44A21d00E2350a42127A377Bf5856d84B",
      "code": "https://etherscan.deth.net/address/0xEcaE9BF44A21d00E2350a42127A377Bf5856d84B",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "getAdmin": "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2",
        "getDelay": 604800,
        "getPendingAdmin": "0x0000000000000000000000000000000000000000",
        "GRACE_PERIOD": 604800,
        "MAXIMUM_DELAY": 1814400,
        "MINIMUM_DELAY": 432000,
        "MINIMUM_QUORUM": 1000,
        "ONE_HUNDRED_WITH_PRECISION": 10000,
        "PROPOSITION_THRESHOLD": 200,
        "VOTE_DIFFERENTIAL": 1000,
        "VOTING_DURATION": 65700
      },
      "derivedName": "Executor"
    },
    {
      "name": "MemoryPageFactRegistry",
      "address": "0xEfbCcE4659db72eC6897F46783303708cf9ACef8",
      "code": "https://etherscan.deth.net/address/0xEfbCcE4659db72eC6897F46783303708cf9ACef8",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "hasRegisteredFact": true
      }
    },
    {
      "name": "FinalizableGpsFactAdapter",
      "address": "0xF23754231BC4cE8C8E92C3bADfB37d922d46053C",
      "code": "https://etherscan.deth.net/address/0xF23754231BC4cE8C8E92C3bADfB37d922d46053C",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "gpsContract": "0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3",
        "hasRegisteredFact": true,
        "identify": "StarkWare_FinalizableGpsFactAdapter_2022_1",
        "isFinalized": true,
        "programHash": "3022993219738828102988654230098311570191704199468817569337520096526584973032"
      }
    },
    {
      "name": "FriStatementContract",
      "address": "0xf6b83CcaDeee478FC372AF6ca7069b14FBc5E1B1",
      "code": "https://etherscan.deth.net/address/0xf6b83CcaDeee478FC372AF6ca7069b14FBc5E1B1",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "hasRegisteredFact": true
      }
    },
    {
      "name": "StarkExRemoverGovernorV2",
      "address": "0xFCAac0F14deA11eDe11Afcb875f29130e1ad5ec0",
      "code": "https://etherscan.deth.net/address/0xFCAac0F14deA11eDe11Afcb875f29130e1ad5ec0",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "MAIN_GOVERNORS_TO_REMOVE": [
          "0x47FB811bE111F2F0Df7dff81EFFe890da6D74080"
        ],
        "numMainGovernorsToRemove": 1,
        "numProxyGovernorsToRemove": 1,
        "owner": "0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE",
        "PROXY_GOVERNORS_TO_REMOVE": [
          "0xDC7eBbc857Ad2d276c387100dB67c1041dA0B2c0"
        ],
        "STARK_PERPETUAL": "0xD54f502e184B6B739d7D27a6410a67dc462D69c8"
      }
    }
  ],
  "eoas": [
    "0x47FB811bE111F2F0Df7dff81EFFe890da6D74080",
    "0x8129b737912e17212C8693B781928f5D0303390a",
    "0x823AeefF884905Aae8A5Fc37aa93938d27EbeEa9",
    "0xA7F2a5C4F294365ceCD366060DabF3831F27Ae68",
    "0xDC7eBbc857Ad2d276c387100dB67c1041dA0B2c0"
  ],
  "abis": {
    "0x01d3348601968aB85b4bb028979006eac235a588": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address)",
      "function initialize(address _logic, address _admin, bytes _data) payable",
      "function initialize(address _logic, bytes _data) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x04D4E67F8B6c67D63219Cd088bC45E8e89fE6D73": [
      "constructor(address[] auxPolynomials, address oodsContract, address memoryPageFactRegistry_, address merkleStatementContractAddress, address friStatementContractAddress, uint256 numSecurityBits_, uint256 minProofOfWorkBits_)",
      "event LogBool(bool val)",
      "event LogDebug(uint256 val)",
      "event LogGas(string name, uint256 val)",
      "event LogValue(bytes32 val)",
      "event ReadFieldElementEvent(uint256 val)",
      "event ReadHashEvent(bytes32 val)",
      "event SendRandomnessEvent(uint256 val)",
      "function verifyProofExternal(uint256[] proofParams, uint256[] proof, uint256[] publicInput)"
    ],
    "0x0AdA60E07717Ab19E4A466f5f0ac68A66e3995Ce": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function REVISION() view returns (uint256)",
      "function approve(address token, address recipient, uint256 amount)",
      "function initialize()",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transfer(address token, address recipient, uint256 amount)",
      "function transferOwnership(address newOwner)"
    ],
    "0x0d62bac5c346c78DC1b27107CAbC5F4DE057a830": [
      "function hasRegisteredFact() view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function verifyMerkle(uint256[] merkleView, uint256[] initialMerkleQueue, uint256 height, uint256 expectedRoot)"
    ],
    "0x0fd829C3365A225FB9226e75c97c3A114bD3199e": [
      "constructor(address safetyModule, address liquidityStaking, address merkleDistributor, address rewardsTreasuryVester)",
      "function LIQUIDITY_STAKING() view returns (address)",
      "function MERKLE_DISTRIBUTOR() view returns (address)",
      "function REWARDS_TREASURY_VESTER() view returns (address)",
      "function SAFETY_MODULE() view returns (address)",
      "function claimRewards(bool claimSafetyRewards, bool claimLiquidityRewards, uint256 merkleCumulativeAmount, bytes32[] merkleProof, bool vestFromTreasuryVester) returns (uint256)"
    ],
    "0x0fED12bD8B1B11c629001c436b90bcd99F4Fec92": [
      "function compute(uint256 x) pure returns (uint256 result)"
    ],
    "0x1dd8945200f5a09D6Fe0ed68494c2ac41cd02E2D": [
      "function getCompiledProgram() pure returns (uint256[224])"
    ],
    "0x2C0df87E073755139101b35c0A51e065291cc2d3": [
      "function VERSION() view returns (string)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function initialize(bytes data)"
    ],
    "0x31D76F5Db8F40D28886Bf00F3be5F157472Bf77A": [
      "constructor(address stakedToken, address rewardsToken, address rewardsTreasury, uint256 distributionStart, uint256 distributionEnd)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event BlackoutWindowChanged(uint256 blackoutWindow)",
      "event ClaimedRewards(address indexed user, address recipient, uint256 claimedRewards)",
      "event DelegateChanged(address indexed delegator, address indexed delegatee, uint8 delegationType)",
      "event DelegatedPowerChanged(address indexed user, uint256 amount, uint8 delegationType)",
      "event EpochParametersChanged(tuple(uint128 interval, uint128 offset) epochParameters)",
      "event GlobalIndexUpdated(uint256 index)",
      "event OperatorClaimedRewardsFor(address indexed staker, address recipient, uint256 claimedRewards, address operator)",
      "event OperatorStakedFor(address indexed staker, uint256 amount, address operator)",
      "event OperatorWithdrawalRequestedFor(address indexed staker, uint256 amount, address operator)",
      "event OperatorWithdrewStakeFor(address indexed staker, address recipient, uint256 amount, address operator)",
      "event RewardsPerSecondUpdated(uint256 emissionPerSecond)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Slashed(uint256 amount, address recipient, uint256 newExchangeRate)",
      "event Staked(address indexed staker, address spender, uint256 underlyingAmount, uint256 stakeAmount)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event UserIndexUpdated(address indexed user, uint256 index, uint256 unclaimedRewards)",
      "event WithdrawalRequested(address indexed staker, uint256 stakeAmount)",
      "event WithdrewStake(address indexed staker, address recipient, uint256 underlyingAmount, uint256 stakeAmount)",
      "function CLAIM_OPERATOR_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DELEGATE_BY_TYPE_TYPEHASH() view returns (bytes32)",
      "function DELEGATE_TYPEHASH() view returns (bytes32)",
      "function DISTRIBUTION_END() view returns (uint256)",
      "function DISTRIBUTION_START() view returns (uint256)",
      "function EIP712_DOMAIN_NAME() view returns (string)",
      "function EIP712_DOMAIN_SCHEMA_HASH() view returns (bytes32)",
      "function EIP712_DOMAIN_VERSION() view returns (string)",
      "function EPOCH_PARAMETERS_ROLE() view returns (bytes32)",
      "function EXCHANGE_RATE_BASE() view returns (uint256)",
      "function EXCHANGE_RATE_MAY_OVERFLOW() view returns (uint256)",
      "function MAX_EXCHANGE_RATE() view returns (uint256)",
      "function MAX_SLASH_DENOMINATOR() view returns (uint256)",
      "function MAX_SLASH_NUMERATOR() view returns (uint256)",
      "function MAX_UNDERLYING_BALANCE() view returns (uint256)",
      "function OWNER_ROLE() view returns (bytes32)",
      "function PERMIT_TYPEHASH() view returns (bytes32)",
      "function REWARDS_RATE_ROLE() view returns (bytes32)",
      "function REWARDS_TOKEN() view returns (address)",
      "function REWARDS_TREASURY() view returns (address)",
      "function SLASHER_ROLE() view returns (bytes32)",
      "function STAKED_TOKEN() view returns (address)",
      "function STAKE_AMOUNT_MAY_OVERFLOW() view returns (uint256)",
      "function STAKE_OPERATOR_ROLE() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function claimRewards(address recipient) returns (uint256)",
      "function claimRewardsFor(address staker, address recipient) returns (uint256)",
      "function decimals() pure returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function delegate(address delegatee)",
      "function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)",
      "function delegateByType(address delegatee, uint8 delegationType)",
      "function delegateByTypeBySig(address delegatee, uint8 delegationType, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)",
      "function getActiveBalanceCurrentEpoch(address staker) view returns (uint256)",
      "function getActiveBalanceNextEpoch(address staker) view returns (uint256)",
      "function getBlackoutWindow() view returns (uint256)",
      "function getCurrentEpoch() view returns (uint256)",
      "function getDelegateeByType(address delegator, uint8 delegationType) view returns (address)",
      "function getDomainSeparator() view returns (bytes32)",
      "function getEpochParameters() view returns (tuple(uint128 interval, uint128 offset))",
      "function getExchangeRate() view returns (uint256)",
      "function getExchangeRateSnapshot(uint256 index) view returns (tuple(uint256 blockNumber, uint256 value))",
      "function getExchangeRateSnapshotCount() view returns (uint256)",
      "function getInactiveBalanceCurrentEpoch(address staker) view returns (uint256)",
      "function getInactiveBalanceNextEpoch(address staker) view returns (uint256)",
      "function getPowerAtBlock(address user, uint256 blockNumber, uint8 delegationType) view returns (uint256)",
      "function getPowerCurrent(address user, uint8 delegationType) view returns (uint256)",
      "function getRewardsPerSecond() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getStakeAvailableToWithdraw(address staker) view returns (uint256)",
      "function getStartOfEpoch(uint256 epochNumber) view returns (uint256)",
      "function getTimeRemainingInCurrentEpoch() view returns (uint256)",
      "function getTotalActiveBalanceCurrentEpoch() view returns (uint256)",
      "function getTotalActiveBalanceNextEpoch() view returns (uint256)",
      "function getTotalInactiveBalanceCurrentEpoch() view returns (uint256)",
      "function getTotalInactiveBalanceNextEpoch() view returns (uint256)",
      "function getTransferableBalance(address account) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasEpochZeroStarted() view returns (bool)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function inBlackoutWindow() view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function initialize()",
      "function name() pure returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function renounceRole(bytes32 role, address account)",
      "function requestWithdrawal(uint256 stakeAmount)",
      "function requestWithdrawalFor(address staker, uint256 stakeAmount)",
      "function revokeRole(bytes32 role, address account)",
      "function setBlackoutWindow(uint256 blackoutWindow)",
      "function setEpochParameters(uint256 interval, uint256 offset)",
      "function setRewardsPerSecond(uint256 emissionPerSecond)",
      "function slash(uint256 requestedSlashAmount, address recipient) returns (uint256)",
      "function stake(uint256 underlyingAmount)",
      "function stakeFor(address staker, uint256 underlyingAmount)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() pure returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function withdrawMaxStake(address recipient) returns (uint256)",
      "function withdrawStake(address recipient, uint256 stakeAmount)",
      "function withdrawStakeFor(address staker, address recipient, uint256 stakeAmount)"
    ],
    "0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545": [
      "event LogDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositCancel(uint256 starkKey, uint256 vaultId, uint256 assetId)",
      "event LogDepositCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositNftCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogFrozen()",
      "event LogMintWithdrawalPerformed(uint256 starkKey, uint256 tokenId, uint256 nonQuantizedAmount, uint256 quantizedAmount, uint256 assetId)",
      "event LogMintableWithdrawalAllowed(uint256 starkKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogNftWithdrawalAllowed(uint256 starkKey, uint256 assetId)",
      "event LogNftWithdrawalPerformed(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 assetId, address recipient)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogSystemAssetType(uint256 assetType)",
      "event LogTokenAdminAdded(address tokenAdmin)",
      "event LogTokenAdminRemoved(address tokenAdmin)",
      "event LogTokenRegistered(uint256 assetType, bytes assetInfo)",
      "event LogUnFrozen()",
      "event LogUserAdminAdded(address userAdmin)",
      "event LogUserAdminRemoved(address userAdmin)",
      "event LogUserRegistered(address ethKey, uint256 starkKey, address sender)",
      "event LogWithdrawalAllowed(uint256 starkKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogWithdrawalPerformed(uint256 starkKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, address recipient)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositCancel(uint256 starkKey, uint256 assetId, uint256 vaultId)",
      "function depositERC20(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositEth(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function depositNft(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositNftReclaim(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositReclaim(uint256 starkKey, uint256 assetId, uint256 vaultId)",
      "function getAssetInfo(uint256 assetType) view returns (bytes assetInfo)",
      "function getCancellationRequest(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 request)",
      "function getDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 balance)",
      "function getEthKey(uint256 starkKey) view returns (address ethKey)",
      "function getQuantizedDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 balance)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getSystemAssetType() view returns (uint256)",
      "function getWithdrawalBalance(uint256 starkKey, uint256 assetId) view returns (uint256 balance)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAssetRegistered(uint256 assetType) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isTokenAdmin(address testedAdmin) view returns (bool)",
      "function isUserAdmin(address testedAdmin) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function registerAndDepositERC20(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function registerAndDepositEth(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId) payable",
      "function registerSystemAssetType(uint256 assetType, bytes assetInfo)",
      "function registerToken(uint256, bytes)",
      "function registerToken(uint256, bytes, uint256)",
      "function registerTokenAdmin(address newAdmin)",
      "function registerUser(address ethKey, uint256 starkKey, bytes signature)",
      "function registerUserAdmin(address newAdmin)",
      "function unFreeze()",
      "function unregisterTokenAdmin(address oldAdmin)",
      "function unregisterUserAdmin(address oldAdmin)",
      "function withdraw(uint256 starkKey, uint256 assetType)",
      "function withdrawAndMint(uint256 starkKey, uint256 assetType, bytes mintingBlob)",
      "function withdrawNft(uint256 starkKey, uint256 assetType, uint256 tokenId)",
      "function withdrawNftTo(uint256 starkKey, uint256 assetType, uint256 tokenId, address recipient)",
      "function withdrawTo(uint256 starkKey, uint256 assetType, address recipient)"
    ],
    "0x40D6992cbd03E0DC1c2DE9606D29Cb245E737a5d": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x4922f8750DFd040954b44F23980160342e308863": [
      "constructor(address[] auxPolynomials, address oodsContract, address memoryPageFactRegistry_, address merkleStatementContractAddress, address friStatementContractAddress, uint256 numSecurityBits_, uint256 minProofOfWorkBits_)",
      "event LogBool(bool val)",
      "event LogDebug(uint256 val)",
      "event LogGas(string name, uint256 val)",
      "event LogValue(bytes32 val)",
      "event ReadFieldElementEvent(uint256 val)",
      "event ReadHashEvent(bytes32 val)",
      "event SendRandomnessEvent(uint256 val)",
      "function verifyProofExternal(uint256[] proofParams, uint256[] proof, uint256[] publicInput)"
    ],
    "0x52c4bb16FbA75f6EBD672568267BC334255Fb3c5": [
      "function compute(uint256 x) pure returns (uint256 result)"
    ],
    "0x5Aa653A076c1dbB47cec8C1B4d152444CAD91941": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address)",
      "function initialize(address _logic, address _admin, bytes _data) payable",
      "function initialize(address _logic, bytes _data) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5": [
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRegistered(address entry, string entryId)",
      "event LogRemovalIntent(address entry, string entryId)",
      "event LogRemoved(address entry, string entryId)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function announceAvailabilityVerifierRemovalIntent(address verifier)",
      "function announceVerifierRemovalIntent(address verifier)",
      "function getRegisteredAvailabilityVerifiers() view returns (address[] _verifers)",
      "function getRegisteredVerifiers() view returns (address[] _verifers)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAvailabilityVerifier(address verifierAddress) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isVerifier(address verifierAddress) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAvailabilityVerifier(address verifier, string identifier)",
      "function registerVerifier(address verifier, string identifier)",
      "function removeAvailabilityVerifier(address verifier)",
      "function removeVerifier(address verifier)",
      "function unFreeze()"
    ],
    "0x626211C1e9BC633f4D342Af99f4E8bc93f11F3DD": [
      "constructor(address[63] tables)",
      "event LogEscapeVerified(uint256 publicKey, int256 withdrawalAmount, bytes32 sharedStateHash, uint256 positionId)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function verifyEscape(uint256[] merkleProof, uint256 nAssets, uint256[] sharedState)"
    ],
    "0x639192D54431F8c816368D3FB4107Bc168d0E871": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address)",
      "function initialize(address _logic, address _admin, bytes _data) payable",
      "function initialize(address _logic, bytes _data) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x64c7d40c07EFAbec2AafdC243bF59eaF2195c6dc": [
      "constructor(address admin, uint256 delay, uint256 gracePeriod, uint256 minimumDelay, uint256 maximumDelay, uint256 propositionThreshold, uint256 voteDuration, uint256 voteDifferential, uint256 minimumQuorum)",
      "event CancelledAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall)",
      "event ExecutedAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall, bytes resultData)",
      "event NewAdmin(address newAdmin)",
      "event NewDelay(uint256 delay)",
      "event NewPendingAdmin(address newPendingAdmin)",
      "event QueuedAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall)",
      "function GRACE_PERIOD() view returns (uint256)",
      "function MAXIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_QUORUM() view returns (uint256)",
      "function ONE_HUNDRED_WITH_PRECISION() view returns (uint256)",
      "function PROPOSITION_THRESHOLD() view returns (uint256)",
      "function VOTE_DIFFERENTIAL() view returns (uint256)",
      "function VOTING_DURATION() view returns (uint256)",
      "function acceptAdmin()",
      "function cancelTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) returns (bytes32)",
      "function executeTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) payable returns (bytes)",
      "function getAdmin() view returns (address)",
      "function getDelay() view returns (uint256)",
      "function getMinimumPropositionPowerNeeded(address governance, uint256 blockNumber) view returns (uint256)",
      "function getMinimumVotingPowerNeeded(uint256 votingSupply) view returns (uint256)",
      "function getPendingAdmin() view returns (address)",
      "function isActionQueued(bytes32 actionHash) view returns (bool)",
      "function isProposalOverGracePeriod(address governance, uint256 proposalId) view returns (bool)",
      "function isProposalPassed(address governance, uint256 proposalId) view returns (bool)",
      "function isPropositionPowerEnough(address governance, address user, uint256 blockNumber) view returns (bool)",
      "function isQuorumValid(address governance, uint256 proposalId) view returns (bool)",
      "function isVoteDifferentialValid(address governance, uint256 proposalId) view returns (bool)",
      "function queueTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) returns (bytes32)",
      "function setDelay(uint256 delay)",
      "function setPendingAdmin(address newPendingAdmin)",
      "function validateCreatorOfProposal(address governance, address user, uint256 blockNumber) view returns (bool)",
      "function validateProposalCancellation(address governance, address user, uint256 blockNumber) view returns (bool)"
    ],
    "0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address)",
      "function initialize(address _logic, address _admin, bytes _data) payable",
      "function initialize(address _logic, bytes _data) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x6aaD0BCfbD91963Cf2c8FB042091fd411FB05b3C": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x6C5cd3aD7A16Ae207D221908E6b997d9B0DcD7b0": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2": [
      "constructor(address governanceStrategy, uint256 votingDelay, address addExecutorAdmin)",
      "event ExecutorAuthorized(address executor)",
      "event ExecutorUnauthorized(address executor)",
      "event GovernanceStrategyChanged(address indexed newStrategy, address indexed initiatorChange)",
      "event ProposalCanceled(uint256 id)",
      "event ProposalCreated(uint256 id, address indexed creator, address indexed executor, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, bool[] withDelegatecalls, uint256 startBlock, uint256 endBlock, address strategy, bytes32 ipfsHash)",
      "event ProposalExecuted(uint256 id, address indexed initiatorExecution)",
      "event ProposalQueued(uint256 id, uint256 executionTime, address indexed initiatorQueueing)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event VoteEmitted(uint256 id, address indexed voter, bool support, uint256 votingPower)",
      "event VotingDelayChanged(uint256 newVotingDelay, address indexed initiatorChange)",
      "function ADD_EXECUTOR_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DOMAIN_TYPEHASH() view returns (bytes32)",
      "function EIP712_DOMAIN_NAME() view returns (string)",
      "function OWNER_ROLE() view returns (bytes32)",
      "function VOTE_EMITTED_TYPEHASH() view returns (bytes32)",
      "function authorizeExecutors(address[] executors)",
      "function cancel(uint256 proposalId)",
      "function create(address executor, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, bool[] withDelegatecalls, bytes32 ipfsHash) returns (uint256)",
      "function execute(uint256 proposalId) payable",
      "function getGovernanceStrategy() view returns (address)",
      "function getProposalById(uint256 proposalId) view returns (tuple(uint256 id, address creator, address executor, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, bool[] withDelegatecalls, uint256 startBlock, uint256 endBlock, uint256 executionTime, uint256 forVotes, uint256 againstVotes, bool executed, bool canceled, address strategy, bytes32 ipfsHash))",
      "function getProposalState(uint256 proposalId) view returns (uint8)",
      "function getProposalsCount() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getVoteOnProposal(uint256 proposalId, address voter) view returns (tuple(bool support, uint248 votingPower))",
      "function getVotingDelay() view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function isExecutorAuthorized(address executor) view returns (bool)",
      "function queue(uint256 proposalId)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setGovernanceStrategy(address governanceStrategy)",
      "function setVotingDelay(uint256 votingDelay)",
      "function submitVote(uint256 proposalId, bool support)",
      "function submitVoteBySignature(uint256 proposalId, bool support, uint8 v, bytes32 r, bytes32 s)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unauthorizeExecutors(address[] executors)"
    ],
    "0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3": [
      "constructor(address bootloaderProgramContract, address memoryPageFactRegistry_, address[] cairoVerifierContracts)",
      "event LogMemoryPagesHashes(bytes32 factHash, bytes32[] pagesHashes)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function verifyProofAndRegister(uint256[] proofParams, uint256[] proof, uint256[] taskMetadata, uint256[] cairoAuxInput, uint256 cairoVerifierId)"
    ],
    "0x8A8E80e0762243f0df39f2847808B7F6D62e2bb1": [
      "constructor(address[] committeeMembers, uint256 numSignaturesRequired)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isMember(address) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function signaturesRequired() view returns (uint256)",
      "function verifyAvailabilityProof(bytes32 claimHash, bytes availabilityProofs)"
    ],
    "0x90Dfd35F4a0BB2d30CDf66508085e33C353475D9": [
      "constructor(address dydxToken, address stakedDydxToken)",
      "function DYDX_TOKEN() view returns (address)",
      "function STAKED_DYDX_TOKEN() view returns (address)",
      "function getPropositionPowerAt(address user, uint256 blockNumber) view returns (uint256)",
      "function getTotalPropositionSupplyAt(uint256 blockNumber) view returns (uint256)",
      "function getTotalVotingSupplyAt(uint256 blockNumber) view returns (uint256)",
      "function getVotingPowerAt(address user, uint256 blockNumber) view returns (uint256)"
    ],
    "0x92D6C1e31e14520e676a687F0a93788B716BEff5": [
      "constructor(address distributor, uint256 transfersRestrictedBefore, uint256 transferRestrictionLiftedNoLaterThan, uint256 mintingRestrictedBefore, uint256 mintMaxPercent)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event DelegateChanged(address indexed delegator, address indexed delegatee, uint8 delegationType)",
      "event DelegatedPowerChanged(address indexed user, uint256 amount, uint8 delegationType)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event TransferAllowlistUpdated(address account, bool isAllowed)",
      "event TransfersRestrictedBeforeUpdated(uint256 transfersRestrictedBefore)",
      "function DELEGATE_BY_TYPE_TYPEHASH() view returns (bytes32)",
      "function DELEGATE_TYPEHASH() view returns (bytes32)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function EIP712_DOMAIN() view returns (bytes32)",
      "function EIP712_VERSION() view returns (bytes)",
      "function INITIAL_SUPPLY() view returns (uint256)",
      "function MINT_MAX_PERCENT() view returns (uint256)",
      "function MINT_MIN_INTERVAL() view returns (uint256)",
      "function PERMIT_TYPEHASH() view returns (bytes32)",
      "function TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN() view returns (uint256)",
      "function _mintingRestrictedBefore() view returns (uint256)",
      "function _propositionPowerDelegates(address) view returns (address)",
      "function _propositionPowerSnapshots(address, uint256) view returns (uint128 blockNumber, uint128 value)",
      "function _propositionPowerSnapshotsCounts(address) view returns (uint256)",
      "function _tokenTransferAllowlist(address) view returns (bool)",
      "function _totalSupplySnapshots(uint256) view returns (uint128 blockNumber, uint128 value)",
      "function _totalSupplySnapshotsCount() view returns (uint256)",
      "function _transfersRestrictedBefore() view returns (uint256)",
      "function _votingDelegates(address) view returns (address)",
      "function _votingSnapshots(address, uint256) view returns (uint128 blockNumber, uint128 value)",
      "function _votingSnapshotsCounts(address) view returns (uint256)",
      "function addToTokenTransferAllowlist(address[] addressesToAdd)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function delegate(address delegatee)",
      "function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)",
      "function delegateByType(address delegatee, uint8 delegationType)",
      "function delegateByTypeBySig(address delegatee, uint8 delegationType, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)",
      "function getDelegateeByType(address delegator, uint8 delegationType) view returns (address)",
      "function getPowerAtBlock(address user, uint256 blockNumber, uint8 delegationType) view returns (uint256)",
      "function getPowerCurrent(address user, uint8 delegationType) view returns (uint256)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function mint(address recipient, uint256 amount)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function owner() view returns (address)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function removeFromTokenTransferAllowlist(address[] addressesToRemove)",
      "function renounceOwnership()",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function updateTransfersRestrictedBefore(uint256 transfersRestrictedBefore)"
    ],
    "0x99B0599952a4FD2d1A1561Fa4C010827EaD30354": [
      "constructor(address chainlinkToken, address merkleDistributor, address oracleContract, address oracleExternalAdapter, bytes32 jobId)",
      "event ChainlinkCancelled(bytes32 indexed id)",
      "event ChainlinkFulfilled(bytes32 indexed id)",
      "event ChainlinkRequested(bytes32 indexed id)",
      "event OracleRootUpdated(bytes32 merkleRoot, uint256 epoch, bytes ipfsCid)",
      "function CHAINLINK_TOKEN() view returns (address)",
      "function JOB_ID() view returns (bytes32)",
      "function MERKLE_DISTRIBUTOR() view returns (address)",
      "function ORACLE_CONTRACT() view returns (address)",
      "function ORACLE_EXTERNAL_ADAPTER() view returns (address)",
      "function cancelRequest(bytes32 requestId, uint256 payment, bytes4 callbackFunc, uint256 expiration)",
      "function fulfillRequest(bytes32 requestId)",
      "function getOpenRequest(bytes32 requestId) view returns (address)",
      "function read() view returns (bytes32 merkleRoot, uint256 epoch, bytes ipfsCid)",
      "function requestOracleData(uint256 fee)",
      "function transferAndRequestOracleData(uint256 fee)",
      "function writeOracleData(bytes32 merkleRoot, uint256 epoch, bytes ipfsCid)"
    ],
    "0x9Bcf13C6b68450B427bfa86698D61901A8a3456D": [
      "function compute(uint256 x) pure returns (uint256 result)"
    ],
    "0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE": [
      "constructor(address admin, uint256 delay, uint256 gracePeriod, uint256 minimumDelay, uint256 maximumDelay, uint256 priorityPeriod, uint256 propositionThreshold, uint256 voteDuration, uint256 voteDifferential, uint256 minimumQuorum, address priorityExecutor)",
      "event CancelledAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall)",
      "event ExecutedAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall, bytes resultData)",
      "event NewAdmin(address newAdmin)",
      "event NewDelay(uint256 delay)",
      "event NewPendingAdmin(address newPendingAdmin)",
      "event NewPriorityPeriod(uint256 priorityPeriod)",
      "event PriorityControllerUpdated(address account, bool isPriorityController)",
      "event QueuedAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall)",
      "event UpdatedActionPriorityStatus(bytes32 actionHash, bool isUnlockedForExecution)",
      "function GRACE_PERIOD() view returns (uint256)",
      "function MAXIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_QUORUM() view returns (uint256)",
      "function ONE_HUNDRED_WITH_PRECISION() view returns (uint256)",
      "function PROPOSITION_THRESHOLD() view returns (uint256)",
      "function VOTE_DIFFERENTIAL() view returns (uint256)",
      "function VOTING_DURATION() view returns (uint256)",
      "function acceptAdmin()",
      "function cancelTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) returns (bytes32)",
      "function executeTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) payable returns (bytes)",
      "function getAdmin() view returns (address)",
      "function getDelay() view returns (uint256)",
      "function getMinimumPropositionPowerNeeded(address governance, uint256 blockNumber) view returns (uint256)",
      "function getMinimumVotingPowerNeeded(uint256 votingSupply) view returns (uint256)",
      "function getPendingAdmin() view returns (address)",
      "function getPriorityPeriod() view returns (uint256)",
      "function hasPriorityStatus(bytes32 actionHash) view returns (bool)",
      "function isActionQueued(bytes32 actionHash) view returns (bool)",
      "function isPriorityController(address account) view returns (bool)",
      "function isProposalOverGracePeriod(address governance, uint256 proposalId) view returns (bool)",
      "function isProposalPassed(address governance, uint256 proposalId) view returns (bool)",
      "function isPropositionPowerEnough(address governance, address user, uint256 blockNumber) view returns (bool)",
      "function isQuorumValid(address governance, uint256 proposalId) view returns (bool)",
      "function isVoteDifferentialValid(address governance, uint256 proposalId) view returns (bool)",
      "function queueTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) returns (bytes32)",
      "function setDelay(uint256 delay)",
      "function setPendingAdmin(address newPendingAdmin)",
      "function setPriorityPeriod(uint256 priorityPeriod)",
      "function setTransactionPriorityStatus(bytes32 actionHash, bool isUnlockedForExecution)",
      "function updatePriorityController(address account, bool isPriorityController)",
      "function validateCreatorOfProposal(address governance, address user, uint256 blockNumber) view returns (bool)",
      "function validateProposalCancellation(address governance, address user, uint256 blockNumber) view returns (bool)"
    ],
    "0xAc5D8bCD13da463bea96c75f9085c4e40037F790": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0xb9431E19B29B952d9358025f680077C3Fd37292f": [
      "constructor(address dydx_, address recipient_, uint256 vestingAmount_, uint256 vestingBegin_, uint256 vestingCliff_, uint256 vestingEnd_)",
      "function claim()",
      "function dydx() view returns (address)",
      "function lastUpdate() view returns (uint256)",
      "function recipient() view returns (address)",
      "function setRecipient(address recipient_)",
      "function vestingAmount() view returns (uint256)",
      "function vestingBegin() view returns (uint256)",
      "function vestingCliff() view returns (uint256)",
      "function vestingEnd() view returns (uint256)"
    ],
    "0xBE607a58206180fef691bf1B5aE9670174284388": [
      "constructor(address stakedToken, address rewardsToken, address rewardsTreasury, uint256 distributionStart, uint256 distributionEnd)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event BlackoutWindowChanged(uint256 blackoutWindow)",
      "event Borrowed(address indexed borrower, uint256 amount, uint256 newBorrowedBalance)",
      "event BorrowingRestrictionChanged(address indexed borrower, bool isBorrowingRestricted)",
      "event ClaimedRewards(address indexed user, address recipient, uint256 claimedRewards)",
      "event ConvertedInactiveBalancesToDebt(uint256 shortfallAmount, uint256 shortfallIndex, uint256 newInactiveBalance)",
      "event DebtMarked(address indexed borrower, uint256 amount, uint256 newBorrowedBalance, uint256 newDebtBalance)",
      "event EpochParametersChanged(tuple(uint128 interval, uint128 offset) epochParameters)",
      "event GlobalIndexUpdated(uint256 index)",
      "event OperatorClaimedRewardsFor(address indexed staker, address recipient, uint256 claimedRewards, address operator)",
      "event OperatorDecreasedBorrowerDebt(address indexed borrower, uint256 amount, uint256 newDebtBalance, address operator)",
      "event OperatorDecreasedStakerDebt(address indexed staker, uint256 amount, uint256 newDebtBalance, address operator)",
      "event OperatorStakedFor(address indexed staker, uint256 amount, address operator)",
      "event OperatorWithdrawalRequestedFor(address indexed staker, uint256 amount, address operator)",
      "event OperatorWithdrewStakeFor(address indexed staker, address recipient, uint256 amount, address operator)",
      "event ReceivedDebt(address indexed staker, uint256 amount, uint256 newDebtBalance)",
      "event RepaidBorrow(address indexed borrower, address sender, uint256 amount, uint256 newBorrowedBalance)",
      "event RepaidDebt(address indexed borrower, address sender, uint256 amount, uint256 newDebtBalance)",
      "event RewardsPerSecondUpdated(uint256 emissionPerSecond)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event ScheduledBorrowerAllocationChange(address indexed borrower, uint256 oldAllocation, uint256 newAllocation, uint256 epochNumber)",
      "event Staked(address indexed staker, address spender, uint256 amount)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event UserIndexUpdated(address indexed user, uint256 index, uint256 unclaimedRewards)",
      "event WithdrawalRequested(address indexed staker, uint256 amount)",
      "event WithdrewDebt(address indexed staker, address recipient, uint256 amount, uint256 newDebtBalance)",
      "event WithdrewStake(address indexed staker, address recipient, uint256 amount)",
      "function BORROWER_ADMIN_ROLE() view returns (bytes32)",
      "function CLAIM_OPERATOR_ROLE() view returns (bytes32)",
      "function DEBT_OPERATOR_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DISTRIBUTION_END() view returns (uint256)",
      "function DISTRIBUTION_START() view returns (uint256)",
      "function EPOCH_PARAMETERS_ROLE() view returns (bytes32)",
      "function OWNER_ROLE() view returns (bytes32)",
      "function REWARDS_RATE_ROLE() view returns (bytes32)",
      "function REWARDS_TOKEN() view returns (address)",
      "function REWARDS_TREASURY() view returns (address)",
      "function STAKED_TOKEN() view returns (address)",
      "function STAKE_OPERATOR_ROLE() view returns (bytes32)",
      "function TOTAL_ALLOCATION() view returns (uint256)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function borrow(uint256 amount)",
      "function claimRewards(address recipient) returns (uint256)",
      "function claimRewardsFor(address staker, address recipient) returns (uint256)",
      "function decimals() pure returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function decreaseBorrowerDebt(address borrower, uint256 amount) returns (uint256)",
      "function decreaseStakerDebt(address staker, uint256 amount) returns (uint256)",
      "function failsafeDeleteUserInactiveBalance()",
      "function failsafeSettleUserInactiveBalanceToEpoch(uint256 maxEpoch)",
      "function getActiveBalanceCurrentEpoch(address staker) view returns (uint256)",
      "function getActiveBalanceNextEpoch(address staker) view returns (uint256)",
      "function getAllocatedBalanceCurrentEpoch(address borrower) view returns (uint256)",
      "function getAllocatedBalanceNextEpoch(address borrower) view returns (uint256)",
      "function getAllocationFractionCurrentEpoch(address borrower) view returns (uint256)",
      "function getAllocationFractionNextEpoch(address borrower) view returns (uint256)",
      "function getBlackoutWindow() view returns (uint256)",
      "function getBorrowableAmount(address borrower) view returns (uint256)",
      "function getBorrowedBalance(address borrower) view returns (uint256)",
      "function getBorrowerDebtBalance(address borrower) view returns (uint256)",
      "function getContractBalanceAvailableToBorrow() view returns (uint256)",
      "function getContractBalanceAvailableToWithdraw() view returns (uint256)",
      "function getCurrentEpoch() view returns (uint256)",
      "function getDebtAvailableToWithdraw(address staker) view returns (uint256)",
      "function getEpochParameters() view returns (tuple(uint128 interval, uint128 offset))",
      "function getInactiveBalanceCurrentEpoch(address staker) view returns (uint256)",
      "function getInactiveBalanceNextEpoch(address staker) view returns (uint256)",
      "function getRewardsPerSecond() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getShortfall(uint256 shortfallCounter) view returns (tuple(uint16 epoch, uint224 index))",
      "function getShortfallCount() view returns (uint256)",
      "function getStakeAvailableToWithdraw(address staker) view returns (uint256)",
      "function getStakerDebtBalance(address staker) view returns (uint256)",
      "function getStartOfEpoch(uint256 epochNumber) view returns (uint256)",
      "function getTimeRemainingInCurrentEpoch() view returns (uint256)",
      "function getTotalActiveBalanceCurrentEpoch() view returns (uint256)",
      "function getTotalActiveBalanceNextEpoch() view returns (uint256)",
      "function getTotalBorrowedBalance() view returns (uint256)",
      "function getTotalBorrowerDebtBalance() view returns (uint256)",
      "function getTotalDebtAvailableToWithdraw() view returns (uint256)",
      "function getTotalInactiveBalanceCurrentEpoch() view returns (uint256)",
      "function getTotalInactiveBalanceNextEpoch() view returns (uint256)",
      "function getTransferableBalance(address account) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasEpochZeroStarted() view returns (bool)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function inBlackoutWindow() view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function initialize(uint256 interval, uint256 offset, uint256 blackoutWindow)",
      "function isBorrowerOverdue(address borrower) view returns (bool)",
      "function isBorrowingRestrictedForBorrower(address borrower) view returns (bool)",
      "function markDebt(address[] borrowers) returns (uint256)",
      "function name() pure returns (string)",
      "function renounceRole(bytes32 role, address account)",
      "function repayBorrow(address borrower, uint256 amount)",
      "function repayDebt(address borrower, uint256 amount)",
      "function requestWithdrawal(uint256 amount)",
      "function requestWithdrawalFor(address staker, uint256 amount)",
      "function restrictBorrower(address borrower)",
      "function revokeRole(bytes32 role, address account)",
      "function setBlackoutWindow(uint256 blackoutWindow)",
      "function setBorrowerAllocations(address[] borrowers, uint256[] newAllocations)",
      "function setBorrowingRestriction(address borrower, bool isBorrowingRestricted)",
      "function setEpochParameters(uint256 interval, uint256 offset)",
      "function setRewardsPerSecond(uint256 emissionPerSecond)",
      "function stake(uint256 amount)",
      "function stakeFor(address staker, uint256 amount)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() pure returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function withdrawDebt(address recipient, uint256 amount)",
      "function withdrawMaxDebt(address recipient) returns (uint256)",
      "function withdrawMaxStake(address recipient) returns (uint256)",
      "function withdrawStake(address recipient, uint256 amount)",
      "function withdrawStakeFor(address staker, address recipient, uint256 amount)"
    ],
    "0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3": [
      "event LogForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce)",
      "event LogForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function forcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 submissionExpirationTime, uint256 nonce, bytes signature, bool premiumCost)",
      "function forcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount, bool premiumCost)",
      "function freezeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce)",
      "function freezeRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "function getEthKey(uint256 starkKey) view returns (address ethKey)",
      "function getForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce) view returns (uint256)",
      "function getForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount) view returns (uint256)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function unFreeze()"
    ],
    "0xD14fd39630Ec941C3bA6C791E3af9E0027013A15": [
      "function compute(uint256 x) pure returns (uint256 result)"
    ],
    "0xD54f502e184B6B739d7D27a6410a67dc462D69c8": [
      "constructor(uint256 upgradeActivationDelay)",
      "event FinalizedImplementation(address indexed implementation)",
      "event ImplementationAdded(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationRemoved(address indexed implementation)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event Upgraded(address indexed implementation)",
      "function MAIN_DISPATCHER_SAFEGUARD_SLOT() view returns (bytes32)",
      "function PROXY_GOVERNANCE_TAG() view returns (string)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function addImplementation(address newImplementation, bytes data, bool finalize)",
      "function getUpgradeActivationDelay() view returns (uint256 delay)",
      "function implementation() view returns (address _implementation)",
      "function initialize(bytes) pure",
      "function isNotFinalized() view returns (bool notFinal)",
      "function proxyAcceptGovernance()",
      "function proxyCancelNomination()",
      "function proxyIsGovernor(address testGovernor) view returns (bool)",
      "function proxyNominateNewGovernor(address newGovernor)",
      "function proxyRemoveGovernor(address governorForRemoval)",
      "function removeImplementation(address newImplementation)",
      "function upgradeTo(address newImplementation, bytes data, bool finalize) payable"
    ],
    "0xd98e7A71BacB6F11438A8271dDB2EFd7f9361F52": [
      "constructor(address admin, uint256 delay, uint256 gracePeriod, uint256 minimumDelay, uint256 maximumDelay, uint256 propositionThreshold, uint256 voteDuration, uint256 voteDifferential, uint256 minimumQuorum)",
      "event CancelledAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall)",
      "event ExecutedAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall, bytes resultData)",
      "event NewAdmin(address newAdmin)",
      "event NewDelay(uint256 delay)",
      "event NewPendingAdmin(address newPendingAdmin)",
      "event QueuedAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall)",
      "function GRACE_PERIOD() view returns (uint256)",
      "function MAXIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_QUORUM() view returns (uint256)",
      "function ONE_HUNDRED_WITH_PRECISION() view returns (uint256)",
      "function PROPOSITION_THRESHOLD() view returns (uint256)",
      "function VOTE_DIFFERENTIAL() view returns (uint256)",
      "function VOTING_DURATION() view returns (uint256)",
      "function acceptAdmin()",
      "function cancelTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) returns (bytes32)",
      "function executeTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) payable returns (bytes)",
      "function getAdmin() view returns (address)",
      "function getDelay() view returns (uint256)",
      "function getMinimumPropositionPowerNeeded(address governance, uint256 blockNumber) view returns (uint256)",
      "function getMinimumVotingPowerNeeded(uint256 votingSupply) view returns (uint256)",
      "function getPendingAdmin() view returns (address)",
      "function isActionQueued(bytes32 actionHash) view returns (bool)",
      "function isProposalOverGracePeriod(address governance, uint256 proposalId) view returns (bool)",
      "function isProposalPassed(address governance, uint256 proposalId) view returns (bool)",
      "function isPropositionPowerEnough(address governance, address user, uint256 blockNumber) view returns (bool)",
      "function isQuorumValid(address governance, uint256 proposalId) view returns (bool)",
      "function isVoteDifferentialValid(address governance, uint256 proposalId) view returns (bool)",
      "function queueTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) returns (bytes32)",
      "function setDelay(uint256 delay)",
      "function setPendingAdmin(address newPendingAdmin)",
      "function validateCreatorOfProposal(address governance, address user, uint256 blockNumber) view returns (bool)",
      "function validateProposalCancellation(address governance, address user, uint256 blockNumber) view returns (bool)"
    ],
    "0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0": [
      "event LogAssetConfigurationApplied(uint256 assetId, bytes32 configHash)",
      "event LogAssetConfigurationRegistered(uint256 assetId, bytes32 configHash)",
      "event LogAssetConfigurationRemoved(uint256 assetId, bytes32 configHash)",
      "event LogFrozen()",
      "event LogGlobalConfigurationApplied(bytes32 configHash)",
      "event LogGlobalConfigurationRegistered(bytes32 configHash)",
      "event LogGlobalConfigurationRemoved(bytes32 configHash)",
      "event LogMintableWithdrawalAllowed(uint256 starkKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftWithdrawalAllowed(uint256 starkKey, uint256 assetId)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogOperatorAdded(address operator)",
      "event LogOperatorRemoved(address operator)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogStateTransitionFact(bytes32 stateTransitionFact)",
      "event LogUnFrozen()",
      "event LogUpdateState(uint256 sequenceNumber, uint256 batchId)",
      "event LogWithdrawalAllowed(uint256 starkKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function applyAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function applyGlobalConfigurationChange(bytes32 configHash)",
      "function configurationDelay() view returns (uint256)",
      "function configurationHash(uint256) view returns (bytes32)",
      "function escape(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount)",
      "function getEthKey(uint256 starkKey) view returns (address ethKey)",
      "function getForcedTradeRequest(uint256 starkKeyA, uint256 starkKeyB, uint256 vaultIdA, uint256 vaultIdB, uint256 collateralAssetId, uint256 syntheticAssetId, uint256 amountCollateral, uint256 amountSynthetic, bool aIsBuyingSynthetic, uint256 nonce) view returns (uint256)",
      "function getForcedWithdrawalRequest(uint256 starkKey, uint256 vaultId, uint256 quantizedAmount) view returns (uint256)",
      "function getLastBatchId() view returns (uint256 batchId)",
      "function getOrderRoot() view returns (uint256 root)",
      "function getOrderTreeHeight() view returns (uint256 height)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getSequenceNumber() view returns (uint256 seq)",
      "function getVaultRoot() view returns (uint256 root)",
      "function getVaultTreeHeight() view returns (uint256 height)",
      "function globalConfigurationHash() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes data)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function isOperator(address testedOperator) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function registerGlobalConfigurationChange(bytes32 configHash)",
      "function registerOperator(address newOperator)",
      "function removeAssetConfigurationChange(uint256 assetId, bytes32 configHash)",
      "function removeGlobalConfigurationChange(bytes32 configHash)",
      "function unFreeze()",
      "function unregisterOperator(address removedOperator)",
      "function updateState(uint256[] programOutput, uint256[] applicationData)"
    ],
    "0xeCa5Da0287D407a23f7c0a13a9AAD87c7fBC10A3": [
      "constructor(address[] auxPolynomials, address oodsContract, address memoryPageFactRegistry_, address merkleStatementContractAddress, address friStatementContractAddress, uint256 numSecurityBits_, uint256 minProofOfWorkBits_)",
      "event LogBool(bool val)",
      "event LogDebug(uint256 val)",
      "event LogGas(string name, uint256 val)",
      "event LogValue(bytes32 val)",
      "event ReadFieldElementEvent(uint256 val)",
      "event ReadHashEvent(bytes32 val)",
      "event SendRandomnessEvent(uint256 val)",
      "function verifyProofExternal(uint256[] proofParams, uint256[] proof, uint256[] publicInput)"
    ],
    "0xEcaE9BF44A21d00E2350a42127A377Bf5856d84B": [
      "constructor(address admin, uint256 delay, uint256 gracePeriod, uint256 minimumDelay, uint256 maximumDelay, uint256 propositionThreshold, uint256 voteDuration, uint256 voteDifferential, uint256 minimumQuorum)",
      "event CancelledAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall)",
      "event ExecutedAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall, bytes resultData)",
      "event NewAdmin(address newAdmin)",
      "event NewDelay(uint256 delay)",
      "event NewPendingAdmin(address newPendingAdmin)",
      "event QueuedAction(bytes32 actionHash, address indexed target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall)",
      "function GRACE_PERIOD() view returns (uint256)",
      "function MAXIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_QUORUM() view returns (uint256)",
      "function ONE_HUNDRED_WITH_PRECISION() view returns (uint256)",
      "function PROPOSITION_THRESHOLD() view returns (uint256)",
      "function VOTE_DIFFERENTIAL() view returns (uint256)",
      "function VOTING_DURATION() view returns (uint256)",
      "function acceptAdmin()",
      "function cancelTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) returns (bytes32)",
      "function executeTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) payable returns (bytes)",
      "function getAdmin() view returns (address)",
      "function getDelay() view returns (uint256)",
      "function getMinimumPropositionPowerNeeded(address governance, uint256 blockNumber) view returns (uint256)",
      "function getMinimumVotingPowerNeeded(uint256 votingSupply) view returns (uint256)",
      "function getPendingAdmin() view returns (address)",
      "function isActionQueued(bytes32 actionHash) view returns (bool)",
      "function isProposalOverGracePeriod(address governance, uint256 proposalId) view returns (bool)",
      "function isProposalPassed(address governance, uint256 proposalId) view returns (bool)",
      "function isPropositionPowerEnough(address governance, address user, uint256 blockNumber) view returns (bool)",
      "function isQuorumValid(address governance, uint256 proposalId) view returns (bool)",
      "function isVoteDifferentialValid(address governance, uint256 proposalId) view returns (bool)",
      "function queueTransaction(address target, uint256 value, string signature, bytes data, uint256 executionTime, bool withDelegatecall) returns (bytes32)",
      "function setDelay(uint256 delay)",
      "function setPendingAdmin(address newPendingAdmin)",
      "function validateCreatorOfProposal(address governance, address user, uint256 blockNumber) view returns (bool)",
      "function validateProposalCancellation(address governance, address user, uint256 blockNumber) view returns (bool)"
    ],
    "0xEfbCcE4659db72eC6897F46783303708cf9ACef8": [
      "event LogMemoryPageFactContinuous(bytes32 factHash, uint256 memoryHash, uint256 prod)",
      "event LogMemoryPageFactRegular(bytes32 factHash, uint256 memoryHash, uint256 prod)",
      "function hasRegisteredFact() view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function registerContinuousMemoryPage(uint256 startAddr, uint256[] values, uint256 z, uint256 alpha, uint256 prime) returns (bytes32 factHash, uint256 memoryHash, uint256 prod)",
      "function registerRegularMemoryPage(uint256[] memoryPairs, uint256 z, uint256 alpha, uint256 prime) returns (bytes32 factHash, uint256 memoryHash, uint256 prod)"
    ],
    "0xF23754231BC4cE8C8E92C3bADfB37d922d46053C": [
      "constructor(address gpsStatementContract, uint256 programHash_)",
      "event Finalized()",
      "function acceptOwnership()",
      "function finalize()",
      "function gpsContract() view returns (address)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isAdmin(address testedAddress) view returns (bool)",
      "function isFinalized() view returns (bool)",
      "function isOwner(address testedAddress) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function nominateNewOwner(address newOwner)",
      "function programHash() view returns (uint256)",
      "function registerAdmin(address newAdmin)",
      "function removeAdmin(address removedAdmin)",
      "function setProgramHash(uint256 newProgramHash)"
    ],
    "0xf6b83CcaDeee478FC372AF6ca7069b14FBc5E1B1": [
      "event LogGas(string name, uint256 val)",
      "function hasRegisteredFact() view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function verifyFRI(uint256[] proof, uint256[] friQueue, uint256 evaluationPoint, uint256 friStepSize, uint256 expectedRoot)"
    ],
    "0xFCAac0F14deA11eDe11Afcb875f29130e1ad5ec0": [
      "constructor(address starkPerpetual, address[] mainGovernorsToRemove, address[] proxyGovernorsToRemove)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function MAIN_GOVERNORS_TO_REMOVE(uint256) view returns (address)",
      "function PROXY_GOVERNORS_TO_REMOVE(uint256) view returns (address)",
      "function STARK_PERPETUAL() view returns (address)",
      "function mainAcceptGovernance()",
      "function mainRemoveGovernor(uint256 i)",
      "function numMainGovernorsToRemove() view returns (uint256)",
      "function numProxyGovernorsToRemove() view returns (uint256)",
      "function owner() view returns (address)",
      "function proxyAcceptGovernance()",
      "function proxyRemoveGovernor(uint256 i)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0xFE1d5439625a9524a80F66670733129E80E0C112": [
      "constructor(address rewardsToken, address rewardsTreasury)",
      "event AlwaysAllowClaimForUpdated(address user, bool allow)",
      "event EpochScheduleUpdated(tuple(uint128 interval, uint128 offset) epochParameters)",
      "event IpfsUpdatePeriodUpdated(uint256 ipfsUpdatePeriod)",
      "event IpnsNameUpdated(string ipnsName)",
      "event RewardsClaimed(address account, uint256 amount)",
      "event RewardsOracleChanged(address rewardsOracle)",
      "event RewardsParametersUpdated(uint256 marketMakerRewardsAmount, uint256 traderRewardsAmount, uint256 traderScoreAlpha)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RootProposed(bytes32 merkleRoot, uint256 epoch, bytes ipfsCid, uint256 waitingPeriodEnd)",
      "event RootUpdated(bytes32 merkleRoot, uint256 epoch, bytes ipfsCid)",
      "event RootUpdatesPaused()",
      "event RootUpdatesUnpaused()",
      "function CLAIM_OPERATOR_ROLE() view returns (bytes32)",
      "function CONFIG_UPDATER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function OWNER_ROLE() view returns (bytes32)",
      "function PAUSER_ROLE() view returns (bytes32)",
      "function REWARDS_TOKEN() view returns (address)",
      "function REWARDS_TREASURY() view returns (address)",
      "function TRADER_SCORE_ALPHA_BASE() view returns (uint256)",
      "function UNPAUSER_ROLE() view returns (bytes32)",
      "function WAITING_PERIOD() view returns (uint256)",
      "function canUpdateRoot() view returns (bool)",
      "function claimRewards(uint256 cumulativeAmount, bytes32[] merkleProof) returns (uint256)",
      "function claimRewardsFor(address user, uint256 cumulativeAmount, bytes32[] merkleProof) returns (uint256)",
      "function getActiveRoot() view returns (bytes32 merkleRoot, uint256 epoch, bytes ipfsCid)",
      "function getAlwaysAllowClaimsFor(address user) view returns (bool)",
      "function getAreRootUpdatesPaused() view returns (bool)",
      "function getClaimed(address user) view returns (uint256)",
      "function getCurrentEpoch() view returns (uint256)",
      "function getEpochParameters() view returns (tuple(uint128 interval, uint128 offset))",
      "function getIpfsEpoch() view returns (uint256)",
      "function getIpfsUpdatePeriod() view returns (uint256)",
      "function getIpnsName() view returns (string)",
      "function getNextRootEpoch() view returns (uint256)",
      "function getProposedRoot() view returns (bytes32 merkleRoot, uint256 epoch, bytes ipfsCid)",
      "function getRewardsOracle() view returns (address)",
      "function getRewardsParameters() view returns (uint256, uint256, uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getWaitingPeriodEnd() view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasPendingRoot() view returns (bool)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address rewardsOracle, string ipnsName, uint256 ipfsUpdatePeriod, uint256 marketMakerRewardsAmount, uint256 traderRewardsAmount, uint256 traderScoreAlpha, uint256 epochInterval, uint256 epochOffset)",
      "function pauseRootUpdates()",
      "function proposeRoot()",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setAlwaysAllowClaimsFor(bool allow)",
      "function setEpochParameters(uint256 interval, uint256 offset)",
      "function setIpfsUpdatePeriod(uint256 ipfsUpdatePeriod)",
      "function setIpnsName(string ipnsName)",
      "function setRewardsOracle(address rewardsOracle)",
      "function setRewardsParameters(uint256 marketMakerRewardsAmount, uint256 traderRewardsAmount, uint256 traderScoreAlpha)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unpauseRootUpdates()",
      "function updateRoot()"
    ]
  }
}
