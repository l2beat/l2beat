{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "kinto",
  "name": "kinto",
  "initialAddresses": [
    "0x5A2b641b84b0230C8e75F55d5afd27f4Dbd59d5b", // appRegistry
    "0x2e2B1c42E38f5af81771e65D87729E57ABD1337a", // kintoadmin smartwallet
    "0x8d2D899402ed84b6c0510bB1ad34ee436ADDD20d", // bundleBulker
    "0x340487b92808B84c2bd97C87B590EE81267E04a7", // L2GatewayRouter
    "0x1842a4EFf3eFd24c50B63c3CF89cECEe245Fc2bd", // SponsorPaymaster
    "0x8a4720488CA32f1223ccFE5A087e250fE3BC5D75", // KintoWalletFactory
    "0xf369f78E3A0492CC4e96a90dae0728A38498e9c7", // KintoID
    "0x2843C269D2a64eCfA63548E8B3Fc0FD23B7F70cb" // EntryPoint
  ],
  "names": {
    "0x5A2b641b84b0230C8e75F55d5afd27f4Dbd59d5b": "KintoAppRegistry",
    "0xf369f78E3A0492CC4e96a90dae0728A38498e9c7": "KintoID",
    "0x2e2B1c42E38f5af81771e65D87729E57ABD1337a": "KintoAdminMultisig",
    "0x8a4720488CA32f1223ccFE5A087e250fE3BC5D75": "KintoWalletFactory",
    "0x1842a4EFf3eFd24c50B63c3CF89cECEe245Fc2bd": "SponsorPaymaster",
    "0x0719D47A213149E2Ef8d3f5afDaDA8a8E22dfc03": "Faucet",
    "0xD157904639E89df05e89e0DabeEC99aE3d74F9AA": "RewardsDistributor",
    "0x010700808D59d2bb92257fCafACfe8e5bFF7aB87": "BridgedKinto",
    "0x793500709506652Fcc61F0d2D0fDa605638D4293": "Treasury",
    "0x3e9727470C66B1e77034590926CDe0242B5A3dCc": "Socket",
    "0xacC000818e5Bbd911D5d449aA81CB5cA24024739": "AccessManager",
    "0x010600ff5f36C8eF3b6Aaf2A88C2DE85C798594a": "NioGovernor",
    "0x0100005D52Be9ab3ccE0C70Abf6F6FA2C48e91C9": "NioGuardians"
  },
  "types": {
    "RoleName": {
      "typeCaster": "Mapping",
      "arg": {
        "0": "ADMIN_ROLE",
        "18446744073709551615": "PUBLIC_ROLE",
        "1635978423191113331": "NIO_GOVERNOR_ROLE",
        "8663528507529876195": "UPGRADER_ROLE"
      }
    }
  },
  "overrides": {
    "KintoAdminMultisig": {
      "ignoreMethods": ["owners"],
      "ignoreInWatchMode": ["getNonce"]
    },
    "NioGovernor": {
      "description": "Governance contract allowing token- and NFT based voting.",
      "ignoreMethods": [
        "proposalDeadline",
        "proposalEta",
        "proposalExecutionPlan",
        "proposalNeedsQueuing",
        "proposalProposer",
        "proposalSnapshot",
        "proposalVotes",
        "quorum"
      ],
      "ignoreInWatchMode": ["clock"]
    },
    "NioGuardians": {
      "description": "Contract using NFTs as voting tokens to be used by Nio Guardians in the NioGovernor.",
      "ignoreMethods": ["exists", "getPastTotalSupply"],
      "ignoreInWatchMode": ["clock"],
      "fields": {
        "owner": {
          "target": {
            "permissions": [
              {
                "type": "configure",
                "description": "mint Nio Guardian NFTs to any address, inheriting the permissions of the NFT."
              }
            ]
          }
        }
      }
    },
    "AccessManager": {
      // highly custom/manual event-based discovery here, should be automated
      "description": "Standard OpenZeppelin AccessManager: Serves as a proxy contract defining the roles, permissions and delays to call functions in target contracts.",
      "fields": {
        "initialAdminRole": {
          "description": "From the constructor args. Has the ADMIN_ROLE (0).",
          "handler": {
            "type": "hardcoded", // constructorArgs handler fails here
            "value": "0x2e2B1c42E38f5af81771e65D87729E57ABD1337a"
          }
        },
        "RoleGuardianChanged": {
          "description": "The guardian permission allows canceling operations that have been scheduled under the role.",
          "handler": {
            "type": "stateFromEvent",
            "event": "RoleGuardianChanged",
            "returnParams": ["roleId", "guardian"],
            "groupBy": "roleId"
          }
        },
        "RoleAdminChanged": {
          "description": "The RoleAdmin permission is required to grant the role, revoke the role and update the execution delay for the respective role.",
          "handler": {
            "type": "stateFromEvent",
            "event": "RoleAdminChanged",
            "returnParams": ["roleId", "admin"],
            "groupBy": "roleId"
          }
        },
        "RoleGrantDelayChanged": {
          "description": "Grant delay for a given `roleId`.",
          "handler": {
            "type": "stateFromEvent",
            "event": "RoleGrantDelayChanged",
            "returnParams": ["roleId", "delay", "since"],
            "groupBy": "roleId"
          }
        },
        "TargetAdminDelayUpdated": {
          "description": "Delay for changing the AccessManager configuration of a given target contract.",
          "handler": {
            "type": "stateFromEvent",
            "event": "TargetAdminDelayUpdated",
            "returnParams": ["target", "delay", "since"],
            "groupBy": "target"
          }
        },
        "TargetFunctionRoleUpdated": {
          "description": "Target addresses and function selectors accessible from a given role id.",
          "handler": {
            "type": "stateFromEvent",
            "event": "TargetFunctionRoleUpdated",
            "returnParams": ["target", "selector", "roleId"],
            "groupBy": "target"
          }
        },
        "OperationScheduled": {
          "description": "List of scheduled operations.",
          "severity": "HIGH",
          "handler": {
            "type": "stateFromEvent",
            "event": "OperationScheduled",
            "returnParams": [
              "operationId",
              "nonce",
              "schedule",
              "caller",
              "target",
              "data"
            ]
          }
        },
        "AdditionalRoles": {
          "description": "Roles (id : label) added apart from the standard roles PUBLIC_ROLE and ADMIN_ROLE.",
          "handler": {
            "type": "stateFromEvent",
            "event": "RoleLabel",
            "returnParams": ["roleId", "label"]
          }
        },
        "RolesGranted": {
          "description": "List of roles granted to accounts.",
          "handler": {
            "type": "stateFromEvent",
            "event": "RoleGranted",
            "returnParams": [
              "roleId",
              "account",
              "delay",
              "since",
              "newMember"
            ],
            "groupBy": "roleId"
          }
        }
      }
    },
    "Socket": {
      "ignoreInWatchMode": ["globalMessageCount"]
    },
    "Treasury": {
      "description": "Kinto Treasury.",
      "ignoreMethods": ["proxiableUUID"],
      "fields": {
        "owner": {
          "target": {
            "permissions": [
              {
                "type": "configure",
                "description": "send tokens and ETH from the Treasury to any address without delay."
              }
            ]
          }
        }
      }
    },
    "BridgedKinto": {
      "description": "KINTO token contract.",
      "ignoreMethods": ["proxiableUUID", "getPastTotalSupply"],
      "ignoreInWatchMode": ["totalSupply", "clock"]
    },
    "RewardsDistributor": {
      "ignoreMethods": ["proxiableUUID", "getRewards", "rewardsPerQuarter"],
      "ignoreInWatchMode": [
        "getTotalLimit",
        "getUnclaimedLimit",
        "totalClaimed",
        "root"
      ]
    },
    "Faucet": {
      "ignoreMethods": ["proxiableUUID"]
    },
    "SponsorPaymaster": {
      "description": "Paymaster used for user transactions eligible for sponsorship.",
      "ignoreMethods": ["proxiableUUID"],
      "ignoreInWatchMode": ["getDeposit"]
    },
    "KintoWalletFactory": {
      "description": "Deploys new KintoWallet beacon proxies when users create a wallet. Also manages the beacon implementation for all KintoWallets and their recovery logic.",
      "ignoreMethods": ["proxiableUUID"],
      "ignoreInWatchMode": ["totalWallets"],
      "ignoreRelatives": ["beacon"],
      "fields": {
        "owner": {
          "severity": "HIGH",
          "target": {
            "permissions": [
              {
                "type": "configure",
                "description": "update the central KintoWallet implementation of all users on Kinto L2 and approve specific wallets for recovery via the turnkey recoverer."
              }
            ]
          }
        }
      }
    },
    "KintoID": {
      "description": "Manages Kinto's KYC system: The KYC_PROVIDER roles responsible for the KYC status and KYC metadata of user wallets.",
      "ignoreMethods": ["proxiableUUID", "tokenByIndex"],
      "ignoreInWatchMode": ["lastMonitoredAt", "totalSupply"],
      "fields": {
        "accessControl": {
          "handler": {
            "type": "accessControl"
          }
        },
        // extracting single roles here for better descriptions
        "UPGRADERs": {
          "severity": "HIGH",
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "UPGRADER_ROLE"
          },
          "target": {
            "permissions": [{ "type": "upgrade" }]
          }
        },
        "KYC_PROVIDERs": {
          "severity": "MEDIUM",
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "KYC_PROVIDER_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "configure",
                "description": "manage the KYC status of any user (sanction status and KYC metadata) and mint/burn KintoID NFTs."
              }
            ]
          }
        },
        "GOVERNANCErs": {
          "severity": "HIGH",
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "GOVERNANCE_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "configure",
                "description": "permissioned to call `confirmSanction()`, which makes a temporary sanction by a KYC_PROVIDER permanent and does not grant an exit window to the affected wallet."
              }
            ]
          }
        },
        "DEFAULT_ADMINs": {
          "severity": "HIGH",
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "DEFAULT_ADMIN_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "configure",
                "description": "transfer KYC NFTs to a different address."
              }
            ]
          }
        }
      }
    },
    "KintoAppRegistry": {
      "description": "Central system contract defining addresses that are allowed to be called by EOAs. The modified Kinto node reads this configuration and drops all other transactions from EOAs (enforced by a modified state transition function). Accordingly, users can only transact from their smart wallets.",
      "ignoreMethods": [
        "proxiableUUID",
        "reservedContracts",
        "systemContracts",
        "tokenByIndex",
        "tokenIdToApp"
      ],
      "ignoreRelatives": ["getReservedContracts", "getSystemContracts"],
      "fields": {
        "owner": {
          "severity": "HIGH",
          "target": {
            "permissions": [
              {
                "type": "configure",
                "description": "manage addresses that are callable by EOAs and other white-/blacklists that are enforced globally on the Kinto L2."
              }
            ]
          }
        },
        "getSystemContracts": {
          "description": "Contracts that are exempt from the STF-enforced rule that EOAs cannot call contracts.",
          "severity": "HIGH"
        }
      }
    }
  }
}
