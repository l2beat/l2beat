{
  "name": "transporter",
  "chain": "ethereum",
  "blockNumber": 21387870,
  "configHash": "0x14c79194c71d47265a9c65c71355062cbea0a7a60e2cf4d4531350eaba9baf7c",
  "contracts": [
    {
      "name": "CommitStore",
      "address": "0x01346721418045A6c07b71052e452eF8615e9084",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727415695,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 14,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "mode",
          "onRamp": "0x7d2aF78868993a5a86676BA639eC0412709707D9",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041158,
          "configDigest": "0x0001e9a1d95d61f3e80536b39e209d13812644a7017ff4339919bd3df9f4f10f"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x0aB48c500AbD8392620c3C4E4fdD5d7063C44554",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1726555127,
      "values": {
        "$immutable": true,
        "commitStore": ["0x1A3D582d1aB9CF630b44B91C54CBD16Ca7e35a8d"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x1A3D582d1aB9CF630b44B91C54CBD16Ca7e35a8d",
          "chainSelector": "ethereum",
          "sourceChainSelector": "4348158687435793198",
          "onRamp": "0xD2a9F49Aa973fDd42Edbb24E01Baa8163ac3141c",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20943933,
          "configDigest": "0x000122bd9a7715200d5c0a6e4404a1f0a06b343d766334eabb33b475489d53e3"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1701286919,
      "values": {
        "$immutable": true,
        "commitStore": ["0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76",
          "chainSelector": "ethereum",
          "sourceChainSelector": "polygon",
          "onRamp": "0xFd77c53AA4eF0E3C01f5Ac012BF7Cc7A3ECf5168",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 6,
          "blockNumber": 19864195,
          "configDigest": "0x0001e235c578fe09344d3893d6ac91fb7a021473adcdf1bbb74bed76b7f13698"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x0d26BaE784c8986502E072F4e73B6168e2052045",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727416331,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 113,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "1562403441176082196",
          "onRamp": "0xD1B33FAd3fF7a793EE39473f865630e3b6371086",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20989855,
          "configDigest": "0x00017f6dc1253f3b9a2fb67b11996938956196b05169566d1c06cd5200bc524f"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x0f89C7c0586536B618e0469402e1c8234bc52959",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727362391,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 25,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "metis",
          "onRamp": "0xdF5394c57A0570ECe45DE0c0fA2e722A672B9198",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041124,
          "configDigest": "0x0001f76bfd3a0a7ac6caa7da3d2cbb6fad6ac30180d5ff7539c011e57ccb2c80"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "ManyChainMultiSig",
      "address": "0x117ec8aD107976e1dBCc21717ff78407Bc36aADc",
      "template": "transporter/ManyChainMultiSig",
      "sourceHashes": [
        "0x15b33604a10bda5235da68c98629cc8246b96e86c931a23c296ae08f1eb691cb"
      ],
      "ignoreInWatchMode": ["getRootMetadata", "getRoot", "getOpCount"],
      "sinceTimestamp": 1689096839,
      "values": {
        "$immutable": true,
        "getConfig": {
          "signers": [
            {
              "addr": "0x06e5891D9b2Ee77740355A309BAF49caaB672f98",
              "index": 0,
              "group": 8
            },
            {
              "addr": "0x124BA7e2188074335A0e9b12B449AD5781A73D60",
              "index": 1,
              "group": 7
            },
            {
              "addr": "0x146CAe49Dbe1b1D1968fc4652814740706548952",
              "index": 2,
              "group": 1
            },
            {
              "addr": "0x14a8f3B302Bbfa7F2f2AC2F4515548370bc7bAdC",
              "index": 3,
              "group": 8
            },
            {
              "addr": "0x180159135c9b93C59d16eA1A690e465D22c5EB67",
              "index": 4,
              "group": 5
            },
            {
              "addr": "0x1c6460cfe32916196f6977b5442b0F98A826D880",
              "index": 5,
              "group": 11
            },
            {
              "addr": "0x21Ac2a1d6ee437FB11a6F1933C5D1d22c714B922",
              "index": 6,
              "group": 12
            },
            {
              "addr": "0x2b73763722378AB2013CB0877946f69fC3727Fd8",
              "index": 7,
              "group": 4
            },
            {
              "addr": "0x2B88575011C5E11389ddB50D28d31C7d06B352A0",
              "index": 8,
              "group": 1
            },
            {
              "addr": "0x2bbB172cD88dCAD64CBE762dcC53E6f96a17d1D6",
              "index": 9,
              "group": 1
            },
            {
              "addr": "0x2CD36141d4AEFb8e57209770b965043Ed3129D9F",
              "index": 10,
              "group": 8
            },
            {
              "addr": "0x36FdBDA6085d4DFA63Da90839432dDe9373970F0",
              "index": 11,
              "group": 11
            },
            {
              "addr": "0x3C6cE61b611e3b41289c2FAFA5BC4e150dD88dE3",
              "index": 12,
              "group": 3
            },
            {
              "addr": "0x41eAdbc688797a02bfaBE48472995833489ce69D",
              "index": 13,
              "group": 10
            },
            {
              "addr": "0x43640F208956c7D49e04F40FF95dF818643B76aA",
              "index": 14,
              "group": 1
            },
            {
              "addr": "0x480496c0884D61F2f56707Adb11697F8018898c2",
              "index": 15,
              "group": 10
            },
            {
              "addr": "0x48A094F7A354d8faD7263EA2a82391d105DF6628",
              "index": 16,
              "group": 3
            },
            {
              "addr": "0x4e509C60b3e916644dE441298595FeD12C4AC926",
              "index": 17,
              "group": 1
            },
            {
              "addr": "0x56B167deCD5fC4E3Bbc07B3B4e1F30e74534F9dd",
              "index": 18,
              "group": 8
            },
            {
              "addr": "0x570F41d83b1031d382F641B9a532A8D7CBd7a695",
              "index": 19,
              "group": 1
            },
            {
              "addr": "0x5bD3a90E94bB8aA6fE6cCF494e292F5F707B92d6",
              "index": 20,
              "group": 2
            },
            {
              "addr": "0x5C33Bf560f29e04dF8A666493aAD8E47eEa9B1c8",
              "index": 21,
              "group": 2
            },
            {
              "addr": "0x6924E54339C7f28730dBB4B842a7FE86ED01Ecf7",
              "index": 22,
              "group": 1
            },
            {
              "addr": "0x6B0f508B8cbeF970fAF9E8a28b9b4C6F1FD3afae",
              "index": 23,
              "group": 7
            },
            {
              "addr": "0x6bfBf6BC4bc5CD20768dAA6F58f0743bAFf2e5f4",
              "index": 24,
              "group": 8
            },
            {
              "addr": "0x7052cB84079905400ea52B635cAb6a275fDA8823",
              "index": 25,
              "group": 10
            },
            {
              "addr": "0x70C2Ddc97c4fAea760027d45E5de4D1E2ad2b9A5",
              "index": 26,
              "group": 6
            },
            {
              "addr": "0x745B9329ccF53556e3C5f1fD1E4e9D0E91Ad2514",
              "index": 27,
              "group": 11
            },
            {
              "addr": "0x776D5B14ef1D5C58B0d48b53114f2Aa0faccB307",
              "index": 28,
              "group": 11
            },
            {
              "addr": "0x7eFF312905DEdB38Bf8f07BEFaDfF96376154374",
              "index": 29,
              "group": 5
            },
            {
              "addr": "0x9079410666ED02725ee9d148398Cee26397c2A36",
              "index": 30,
              "group": 1
            },
            {
              "addr": "0x925d7Ea0ADe586DBFd56a942bb297286cE428C79",
              "index": 31,
              "group": 1
            },
            {
              "addr": "0x9453E18f03A36E2A2c70598De520bD24434D2d1D",
              "index": 32,
              "group": 6
            },
            {
              "addr": "0x9d0D65cd6e46B86f88fF021d8f5EE58fe8ce2882",
              "index": 33,
              "group": 12
            },
            {
              "addr": "0x9E2FD656eFffF4cbAc9fd45C017D4DD8fBC550E5",
              "index": 34,
              "group": 8
            },
            {
              "addr": "0x9E318D85D42F7e5b8B4fb2fB2d706C4c04D1549e",
              "index": 35,
              "group": 12
            },
            {
              "addr": "0xA3177f64efE98422E782bC17BE7971F01187B7cF",
              "index": 36,
              "group": 1
            },
            {
              "addr": "0xa35B7219521134cAF52DccAD44d604335b64a4fB",
              "index": 37,
              "group": 4
            },
            {
              "addr": "0xa42c8570771240D1e2F3211064a7C7472Cc05b7D",
              "index": 38,
              "group": 8
            },
            {
              "addr": "0xA8030F40032E88552519EDFc448523d677B29661",
              "index": 39,
              "group": 12
            },
            {
              "addr": "0xAe735fd5e74887064DFf99C637f291caE5485A75",
              "index": 40,
              "group": 11
            },
            {
              "addr": "0xC19Beb494BA0bC57e5F967706A24bAFb6Da7BCD7",
              "index": 41,
              "group": 12
            },
            {
              "addr": "0xc90788d9168f83dec518Ab7c0445Ad1Ec53554D7",
              "index": 42,
              "group": 5
            },
            {
              "addr": "0xd3094f770579AFd66711847cE9E9C42D10BA2264",
              "index": 43,
              "group": 4
            },
            {
              "addr": "0xd3E2da792E806556517124f03F12e557045951E7",
              "index": 44,
              "group": 6
            },
            {
              "addr": "0xd844665361adBa29CD1259ebDe9b547ECe2ab0E7",
              "index": 45,
              "group": 12
            },
            {
              "addr": "0xE062e7D123AC8dF480C56147f911144F55C10f88",
              "index": 46,
              "group": 10
            },
            {
              "addr": "0xECDd1737E54530D7b05Ad309B9B365CDc0084FD0",
              "index": 47,
              "group": 12
            }
          ],
          "groupQuorums": [
            3, 3, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ],
          "groupParents": [
            0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ]
        },
        "getOpCount": 49,
        "getRoot": {
          "root": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "validUntil": 0
        },
        "getRootMetadata": {
          "chainId": 1,
          "multiSig": "0x117ec8aD107976e1dBCc21717ff78407Bc36aADc",
          "preOpCount": 49,
          "postOpCount": 49,
          "overridePreviousRoot": true
        },
        "MAX_NUM_SIGNERS": 200,
        "NUM_GROUPS": 32,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "CommitStore",
      "address": "0x118a9389960F86390A4F14ce4C95D6ff076C6bFC",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1710865403,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 42,
        "getLatestPriceEpochAndRound": 463107,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "gnosis",
          "onRamp": "0x0F246651F1c2275B4E14d8ae166D1fd3Af05c405",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 8,
          "blockNumber": 20574583,
          "configDigest": "0x0001e715ca2f468f73992b74aae8b611559b925318324a0228c35fc5ec68fd4a"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x15a9D79d6b3485F70bF82bC49dDD1fcB37A7149c",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727970527,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 161,
        "getNopFeesJuels": "778918781964097968",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "4051577828743386545",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "6069284993557205397",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "polygon"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x1A3D582d1aB9CF630b44B91C54CBD16Ca7e35a8d",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1726555115,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 99,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "4348158687435793198",
          "onRamp": "0xD2a9F49Aa973fDd42Edbb24E01Baa8163ac3141c",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20943935,
          "configDigest": "0x0001b346ea97bd486052531b3e1e64c5b8e8680aaf0615bbf3d90c26ba06e5bf"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x1a904DbbaDdE629a1460e2F6E2E485Ce06Ed7599",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1718230427,
      "values": {
        "$immutable": true,
        "commitStore": ["0x3CB2A81bb8a188C5353CdFa9994ed8666556FC53"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x3CB2A81bb8a188C5353CdFa9994ed8666556FC53",
          "chainSelector": "ethereum",
          "sourceChainSelector": "blast",
          "onRamp": "0xBD9bf9AA79adF083BB7100848Eb15F4e8282E27e",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20129926,
          "configDigest": "0x00013f2a7d2a7d32bd72085eef52fed64f4949e994eb6131aeca1dc17b903226"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x1B960560324c03db5565545B353198fdd07A195d",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1732124627,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 76,
        "getNopFeesJuels": "19277382449556685",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "3849287863852499584",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "7612558325653340534",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "3849287863852499584"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x26a10137A54F4Ea01D20758Ac5AdBf9326340Fc3",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1726223735,
      "values": {
        "$immutable": true,
        "commitStore": ["0x57d6cD9CD44770C807b2763Dbe4CFDA0113dd114"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x57d6cD9CD44770C807b2763Dbe4CFDA0113dd114",
          "chainSelector": "ethereum",
          "sourceChainSelector": "13204309965629103672",
          "onRamp": "0x28cCF73F7982c1786b84e243FFbD47F4fB8ae43d",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20824427,
          "configDigest": "0x0001837397da2a7dfcf029a6ec43236985be452ecee381b5f0c1dce3b4a6cbd3"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1701286199,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 3591,
        "getLatestPriceEpochAndRound": 9466369,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "avalanche",
          "onRamp": "0xD0701FcC7818c31935331B02Eb21e91eC71a1704",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 9,
          "blockNumber": 20561894,
          "configDigest": "0x0001b728806c50675d907f631fb922ee3658492327dfb556b5638ce5ac48a329"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "ManyChainMultiSig",
      "address": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
      "template": "transporter/ManyChainMultiSig",
      "sourceHashes": [
        "0x15b33604a10bda5235da68c98629cc8246b96e86c931a23c296ae08f1eb691cb"
      ],
      "ignoreInWatchMode": ["getRootMetadata", "getRoot", "getOpCount"],
      "sinceTimestamp": 1695826667,
      "values": {
        "$immutable": true,
        "getConfig": {
          "signers": [
            {
              "addr": "0x162A8E51E69D72a4bA462220aE9A2E94e44d753F",
              "index": 0,
              "group": 1
            },
            {
              "addr": "0x1c6460cfe32916196f6977b5442b0F98A826D880",
              "index": 1,
              "group": 1
            },
            {
              "addr": "0x31e16F375531F8d77E027ff935e1114eD62D797b",
              "index": 2,
              "group": 1
            },
            {
              "addr": "0x41eAdbc688797a02bfaBE48472995833489ce69D",
              "index": 3,
              "group": 1
            },
            {
              "addr": "0x5A5A8C7E8448484Cf3458d7f426876E79c529f41",
              "index": 4,
              "group": 1
            },
            {
              "addr": "0x7052cB84079905400ea52B635cAb6a275fDA8823",
              "index": 5,
              "group": 1
            },
            {
              "addr": "0x745B9329ccF53556e3C5f1fD1E4e9D0E91Ad2514",
              "index": 6,
              "group": 1
            },
            {
              "addr": "0xAe735fd5e74887064DFf99C637f291caE5485A75",
              "index": 7,
              "group": 1
            },
            {
              "addr": "0xE062e7D123AC8dF480C56147f911144F55C10f88",
              "index": 8,
              "group": 1
            }
          ],
          "groupQuorums": [
            1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ],
          "groupParents": [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ]
        },
        "getOpCount": 291,
        "getRoot": {
          "root": "0xd9b2a8f556f05e8d43a6b13063ea5497f0fb296de0ed889bc2bbf86cc38fc0ae",
          "validUntil": 1733654497
        },
        "getRootMetadata": {
          "chainId": 1,
          "multiSig": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
          "preOpCount": 272,
          "postOpCount": 291,
          "overridePreviousRoot": false
        },
        "MAX_NUM_SIGNERS": 200,
        "NUM_GROUPS": 32,
        "owner": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "CommitStore1",
      "address": "0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1701802727,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 1780,
        "getLatestPriceEpochAndRound": 469761,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "wemix",
          "onRamp": "0x190bcE84CF2d500B878966F4Cf98a50d78f2675E",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 9,
          "blockNumber": 20574569,
          "configDigest": "0x0001d7dfed79176417f36611718848cc8bab61daa0cf833f837205a32cd982cb"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "derivedName": "CommitStore",
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x330349112e13232131Da51f9f3b153d825f65e61",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727362439,
      "values": {
        "$immutable": true,
        "commitStore": ["0x0f89C7c0586536B618e0469402e1c8234bc52959"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x0f89C7c0586536B618e0469402e1c8234bc52959",
          "chainSelector": "ethereum",
          "sourceChainSelector": "metis",
          "onRamp": "0xdF5394c57A0570ECe45DE0c0fA2e722A672B9198",
          "prevOffRamp": "0xCe6364dBe64D2789D916180131fAda2ABFF702E8",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041120,
          "configDigest": "0x0001ab28f2b3e1cddbcabf19e8adea11813ed585379acc56ae3cfec1826c198c"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x33276152d082120F5190362e6E5F6783bbCb2B26",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727715335,
      "values": {
        "$immutable": true,
        "commitStore": ["0xFa94e57b12b6C45A3aD3CBb9451ba99a997eb210"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xFa94e57b12b6C45A3aD3CBb9451ba99a997eb210",
          "chainSelector": "ethereum",
          "sourceChainSelector": "6422105447186081193",
          "onRamp": "0xc422a9AE3341dDDa7296F55D42C954B2faA03013",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20943953,
          "configDigest": "0x00015e53969cb607688ca0c810b936146ce8859f3e631490af18ffb245be3866"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x33417f13DFBC2FfB9e1B43051c3737370F3691a4",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1726554755,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": true
        },
        "getExpectedNextSequenceNumber": 118,
        "getNopFeesJuels": 12,
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "4348158687435793198",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8667689676942179987",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "4348158687435793198"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x3455D8E039736944e66e19eAc77a42e8077B07bf",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727922491,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 33596,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 6840,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 42,
        "getNopFeesJuels": "221855304990926131",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "3734403246176062136",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "6025757153756508639",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "optimism"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1701286259,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 3055,
        "getNopFeesJuels": 7,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "3442214000781872274",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "polygon"],
        "tokenAddresses": [
          "0xd2a530170D71a9Cfe1651Fb468E2B98F7Ed7456b",
          "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0xa19f5264F7D7Be11c451C093D8f92592820Bea86",
          "0x5F64Ab1544D28732F0A24F4713c2C8ec0dA089f0",
          "0x54Df3076ac0CdC9bC97fA290AB9c5a88E3D23630",
          "0x0AA1e96D2a46Ec6beB2923dE1E61Addf5F5f1dce",
          "0x3e62fED35c97145e6B445704B8CE74B2544776A9",
          "0x45fcf0Ebb7d79E3de9Fc308b6c7cb680A981CB7a",
          "0x5F2F8818002dc64753daeDF4A6CB2CcB757CD220",
          "0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C"
        ],
        "tokenPools": [
          "0x50f6631B377be52E132DF35a2F05eA54fda882ac",
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0xc62c311FE64abf19CF33195e15c188Ca6d1AaD3e",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0xd1b3015ceFCAC84dB3EFCBB18FBdd50BA5aF49DE",
          "0x6dDF2F3f93688dfc9d37DF7078982cE8E6494DB2",
          "0x1580C7d4754f5671626e42f0372D56104B092CFA",
          "0xa17698199466E71bAFC31F226db341B7840701E7",
          "0x7559a84Ae7B75F4B0E0E540312A3Ec912B2128CA",
          "0x80e2dcE0A16c8DB769995129cF6BbFCac8E4cFb8",
          "0x8c6028e38391cfC2A1a28f4359EA5732E9422e56",
          "0x66D40E0D2819a2264B2a61f5DD578573B9dedCEc"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x362A221C3cfd7F992DFE221687323F0BA9BA8187",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1726223915,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": true
        },
        "getExpectedNextSequenceNumber": 32,
        "getNopFeesJuels": 8,
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "13204309965629103672",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "5119465909359307679",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "13204309965629103672"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "OffRamp1",
      "address": "0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1701803111,
      "values": {
        "$immutable": true,
        "commitStore": ["0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB",
          "chainSelector": "ethereum",
          "sourceChainSelector": "wemix",
          "onRamp": "0x190bcE84CF2d500B878966F4Cf98a50d78f2675E",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 6,
          "blockNumber": 19611168,
          "configDigest": "0x0001115f0d55fadf391c077d5d9bdc70ab474e483905389a638dce6740a52618"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOffRamp",
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x3Ac0D8fe5b4e8d0a95C507CCd83F6A8d73A8c6b1",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1732563935,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 59,
        "getNopFeesJuels": "1597772192065732005",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "3993510008929295315",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8402227807934267995",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "3993510008929295315"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x3B45dd27E0cF84F1af98DEaBDc8f96303475ef58",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1733879759,
      "values": {
        "$immutable": true,
        "commitStore": ["0x6C8b9672B4482A876168b9415bF8bBEA574bF4B9"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x6C8b9672B4482A876168b9415bF8bBEA574bF4B9",
          "chainSelector": "ethereum",
          "sourceChainSelector": "7937294810946806131",
          "onRamp": "0x9db257ae83968F10f6A50009587BdA2fCedFDd5A",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21383376,
          "configDigest": "0x0001bd2a241d777836209bc7244a624a57ab9a74683cab33976da69d39a42dd1"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x3c672f0f9E73cB7984A5Ab486C7839f84C8EDC09",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1726554287,
      "values": {
        "$immutable": true,
        "commitStore": ["0xD9d3d90D729F50794741Da7a2d54d8B12dC3Da72"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xD9d3d90D729F50794741Da7a2d54d8B12dC3Da72",
          "chainSelector": "ethereum",
          "sourceChainSelector": "3016212468291539606",
          "onRamp": "0x2Ee6D394a244bc38b8CFfff6b7BC72D68C5f1Bc5",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20943936,
          "configDigest": "0x0001a3ae94891e89bc7b1093756d388a6f862d205a938cc58612146a679ac43d"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x3CB2A81bb8a188C5353CdFa9994ed8666556FC53",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1718230103,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 61,
        "getLatestPriceEpochAndRound": 467714,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "blast",
          "onRamp": "0xBD9bf9AA79adF083BB7100848Eb15F4e8282E27e",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 4,
          "blockNumber": 20574540,
          "configDigest": "0x0001e9a7260f01e6ae5ae4039c10729defc3439209ff2afdbed77c0aa371690d"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x3d8a95adA63D406ee8232562AbD83CEdb0B90466",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1718911199,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 80,
        "getLatestPriceEpochAndRound": 468737,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "metis",
          "onRamp": "0xE43f9eD3146d76E627C2504E5140005027992De6",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 5,
          "blockNumber": 20574531,
          "configDigest": "0x000158ac6ced3257fc9cee81f906d7cffeb8fab05c7f3882b179326ad6dd9755"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x3df8dAe2d123081c4D5E946E655F7c109B9Dd630",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1701286163,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 2563,
        "getNopFeesJuels": 12,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "5533284220220343876",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "avalanche"],
        "tokenAddresses": [
          "0xd2a530170D71a9Cfe1651Fb468E2B98F7Ed7456b",
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0x5F64Ab1544D28732F0A24F4713c2C8ec0dA089f0",
          "0xf2DbAaBd8F8E0993F11DE4CEd470Df1ED1a4491b",
          "0x7A56E1C57C7475CCf742a1832B028F0456652F97",
          "0xd9D920AA40f578ab794426F5C90F6C731D159DEf"
        ],
        "tokenPools": [
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0xc62c311FE64abf19CF33195e15c188Ca6d1AaD3e",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0x6dDF2F3f93688dfc9d37DF7078982cE8E6494DB2",
          "0xBF7cb652A2d5ed3BFc3832Ef8Af33Ffb0cDc0982",
          "0xd8f734c938200BA294d0De5B555E8ff77d66c351",
          "0x80Cc104119901fd66088C9a8219E50D9547dE2d4"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "ARMProxy",
      "address": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
      "sourceHashes": [
        "0x5561ac1c24a1f2bd38ec522cf6fde1f06f5d2eff0d9006035ff445d9e1505a47"
      ],
      "sinceTimestamp": 1688661563,
      "values": {
        "$immutable": true,
        "getARM": "0xdCD48419bD5Cd9d1b097695F2af4Ee125aADF84F",
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "ARMProxy 1.0.0"
      }
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x418dcbCf229897d0CCf1B8B464Db06C23879FBB4",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1726173575,
      "values": {
        "$immutable": true,
        "commitStore": ["0x9f592c28590595F3F78a8881E8Dbb9984ed705cD"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x9f592c28590595F3F78a8881E8Dbb9984ed705cD",
          "chainSelector": "ethereum",
          "sourceChainSelector": "4627098889531055414",
          "onRamp": "0x69AbB6043BBEA2467f41CCD0144d1b3b4ECd20f4",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 1,
          "blockNumber": 20824420,
          "configDigest": "0x000116367c5a7d9677fc2831f48fee235fc0d132b9293d13a4fc32b619afd2f5"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "RBACTimelock",
      "address": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
      "sourceHashes": [
        "0xd5b2b6b0153f0ac33437f0059e864bae869943a68c01d8626d43eb2abebb728d"
      ],
      "sinceTimestamp": 1689097535,
      "values": {
        "$immutable": true,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "ADMIN_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0x44835bBBA9D40DEDa9b64858095EcFB2693c9449"]
          },
          "PROPOSER_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": [
              "0xE53289F32c8E690b7173aA33affE9B6B0CB0012F",
              "0xD6597750bf74DCAEC57e0F9aD2ec998D837005bf"
            ]
          },
          "EXECUTOR_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0x82b8A19497fA25575f250a3DcFfCD2562B575A2e"]
          },
          "CANCELLER_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": [
              "0xE53289F32c8E690b7173aA33affE9B6B0CB0012F",
              "0xAD97C0270a243270136E40278155C12ce7C7F87B",
              "0xD6597750bf74DCAEC57e0F9aD2ec998D837005bf",
              "0xa8D5E1daA6D8B94f11D77B7E09DE846292ef69FF",
              "0x117ec8aD107976e1dBCc21717ff78407Bc36aADc"
            ]
          },
          "BYPASSER_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0x117ec8aD107976e1dBCc21717ff78407Bc36aADc"]
          }
        },
        "ADMIN_ROLE": "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
        "BYPASSER_ROLE": "0xa1b2b8005de234c4b8ce8cd0be058239056e0d54f6097825b5117101469d5a8d",
        "CANCELLER_ROLE": "0xfd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
        "getBlockedFunctionSelectorAt": [],
        "getBlockedFunctionSelectorCount": 0,
        "getMinDelay": 10800,
        "PROPOSER_ROLE": "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1"
      },
      "derivedName": "RBACTimelock"
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x4545F9a17DA50110632C14704a15d893BF9CBD27",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1718230007,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 66,
        "getNopFeesJuels": 5,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "3062195338419324034",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "blast"],
        "tokenAddresses": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "tokenPools": ["0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4"],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x466a078d17e3706a9414ACc48029EE9Bae4C9b65",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1717182935,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 85,
        "getNopFeesJuels": 3,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8652370149156686284",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "mode"],
        "tokenAddresses": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0x83F20F44975D03b1b09e64809B757c47f942BEeA",
          "0xAe770d24ec1580A13392E0B71067571351029203"
        ],
        "tokenPools": [
          "0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4",
          "0xa904B9343632A6ca4f4a1b0C9eFa011cb319d000",
          "0xd72F7010f0Fa621aB0869e61e9bb4e3cC887c66c"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x4af4B497c998007eF83ad130318eB2b925a79dc8",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1701285563,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 2552,
        "getLatestPriceEpochAndRound": 467715,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "optimism",
          "onRamp": "0x55183Db1d2aE0b63e4c92A64bEF2CBfc2032B127",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 9,
          "blockNumber": 20574559,
          "configDigest": "0x00019ecf28229bd3f6e536b5a820a6c81e638b7904b4e3129d59624d5cd44e3d"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x4Cc3D95d9384D3287724B83099f01BC3025702c0",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1728302759,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": true
        },
        "getExpectedNextSequenceNumber": 65,
        "getNopFeesJuels": "2765941632912737962",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "17198166215261833993",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "9001515110652431367",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "17198166215261833993"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x4E4003DAFD00eC3B5F17f05950759054051950d6",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1728339623,
      "values": {
        "$immutable": true,
        "commitStore": ["0xA48269e5c9A234daBfEBE98b82390Be705536d1c"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xA48269e5c9A234daBfEBE98b82390Be705536d1c",
          "chainSelector": "ethereum",
          "sourceChainSelector": "17198166215261833993",
          "onRamp": "0xD3Bd3D50E3593AFE8B5A50C1B3F83c21D64c10d2",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20974338,
          "configDigest": "0x0001b58c7601af6a54a664bbf287a80eeb79f8535fc3d7256cda83142bd047a7"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x4FB5407d6911DaA0B8bde58A754E7D01CB8b05c5",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1733879687,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 8,
        "getNopFeesJuels": "537137076689519053",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "7937294810946806131",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "-537137076689519053",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "7937294810946806131"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x52275dC17f9eD92230C8C4d57fD36d128701f694",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727346815,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 66,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "blast",
          "onRamp": "0xEa8112530cA10945C2aA976f8F615582Af9B70fa",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20989835,
          "configDigest": "0x00014fd29077baad6e78a4c190c5bafab3b24b4033b37ad6d6c3a3822c351d42"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x562a2025E60AA19Aa03Ea41D70ea1FD3286d1D3B",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727922695,
      "values": {
        "$immutable": true,
        "commitStore": ["0x83F3DA5aa2C7534d694B0acde7624573c830250D"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x83F3DA5aa2C7534d694B0acde7624573c830250D",
          "chainSelector": "ethereum",
          "sourceChainSelector": "optimism",
          "onRamp": "0xE4C51Dc01A4E0aB14c7a7a2ed1655E9CF8A3E698",
          "prevOffRamp": "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041168,
          "configDigest": "0x00016dbea26be25fc378ffe19b2de43260774280a3f444559b6ffa8e00abc5ff"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x569940e02D4425eac61A7601632eC00d69f75c17",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1701286211,
      "values": {
        "$immutable": true,
        "commitStore": ["0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE",
          "chainSelector": "ethereum",
          "sourceChainSelector": "avalanche",
          "onRamp": "0xD0701FcC7818c31935331B02Eb21e91eC71a1704",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 6,
          "blockNumber": 19864097,
          "configDigest": "0x0001f5ec01ea1084fb3150e9c0ae4a075107aee34612efc5c190a12232e94b0e"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x57b548C9c213EA2bcf60193E3D7fd2d2b53Fb9b3",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727970599,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 65,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "polygon",
          "onRamp": "0x1DAcBae00c779913e6E9fc1A3323FbA4847ba53C",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041190,
          "configDigest": "0x000185ee1406ab44d5054ed91c9e236bf00a1873f989f9576b20d948ea867fd9"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x57d6cD9CD44770C807b2763Dbe4CFDA0113dd114",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1726223711,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 36,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "13204309965629103672",
          "onRamp": "0x28cCF73F7982c1786b84e243FFbD47F4fB8ae43d",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20824428,
          "configDigest": "0x000180e5c1120995eba2b420c39794e05cf9f8802631999e646d4e02f5074b22"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x5B859E596C4285bf489E1bFa222b97dB431da7eC",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1729099439,
      "values": {
        "$immutable": true,
        "commitStore": ["0xd8F93Aff87dC2AEEe0D0b0dF347baDA861BFf802"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xd8F93Aff87dC2AEEe0D0b0dF347baDA861BFf802",
          "chainSelector": "ethereum",
          "sourceChainSelector": "1556008542357238666",
          "onRamp": "0xa18BC8b64a863DB34199F7e59F3A3d051ABa413d",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 3,
          "blockNumber": 20988641,
          "configDigest": "0x00013be3686bb43714e7d06c89ca98599698c21e9313a815fc8137fe3acc479f"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x5EDa6801dBD2bBdbF0401d34c730fa2C3A97C3F4",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1731971195,
      "values": {
        "$immutable": true,
        "commitStore": ["0x8705F734b7ac1FC0bb2d16F60c6eFac5Ed646159"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x8705F734b7ac1FC0bb2d16F60c6eFac5Ed646159",
          "chainSelector": "ethereum",
          "sourceChainSelector": "2049429975587534727",
          "onRamp": "0x0129211377B414Cad2c624C40c342FAffB3B3F0F",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21246068,
          "configDigest": "0x00012efb90e1fa2212471a6f8f2412acda609f211d1860d9117d7e5409dd4041"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x626189C882A80fF0D036d8D9f6447555e81F78E9",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1726172891,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": true
        },
        "getExpectedNextSequenceNumber": 33,
        "getNopFeesJuels": 8,
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "4627098889531055414",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "5328206254976685675",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "4627098889531055414"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EtherSenderReceiver",
      "address": "0x66598216D8E4d9AFE0F06d525B335b762229842f",
      "sourceHashes": [
        "0x688c9ef9fcf10c32b9b0a4f7e176ccedfc1dbf30a96b45ae691ccd273621d7e8"
      ],
      "sinceTimestamp": 1712581007,
      "values": {
        "$immutable": true,
        "getRouter": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
        "typeAndVersion": "EtherSenderReceiver 1.5.0"
      },
      "derivedName": "EtherSenderReceiver"
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x66d84fedED0e51aeB47ceD1BB2fc0221Ae8D7C12",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727851163,
      "values": {
        "$immutable": true,
        "commitStore": ["0x9B9Ec8E26955c034828bBD78E22ab258d983dCdb"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x9B9Ec8E26955c034828bBD78E22ab258d983dCdb",
          "chainSelector": "ethereum",
          "sourceChainSelector": "bnb",
          "onRamp": "0x35C724666ba31632A56Bad4390eb69f206ab60C7",
          "prevOffRamp": "0x7Afe7088aff57173565F4b034167643AA8b9171c",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041108,
          "configDigest": "0x0001242ffe510447dad835ed5318335c9f0cd2703df5149c3098dafdd32cb7f4"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x6751cA96b769129dFE6eB8E349c310deCEDb4e36",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727346719,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 20,
        "getNopFeesJuels": "104290380352601993",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "4411394078118774322",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x4545F9a17DA50110632C14704a15d893BF9CBD27",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8660900075589950796",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x4545F9a17DA50110632C14704a15d893BF9CBD27",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "blast"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x6868FefbEFDc2B2FB75E6ED216dB1BeC02563D69",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727416343,
      "values": {
        "$immutable": true,
        "commitStore": ["0x0d26BaE784c8986502E072F4e73B6168e2052045"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x0d26BaE784c8986502E072F4e73B6168e2052045",
          "chainSelector": "ethereum",
          "sourceChainSelector": "1562403441176082196",
          "onRamp": "0xD1B33FAd3fF7a793EE39473f865630e3b6371086",
          "prevOffRamp": "0xb368c8946D9fa5A497cDe1Dff7213f9CdfD143Bf",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20989845,
          "configDigest": "0x0001c01257dae4288d30d05644548184a3fb9618b179ae660b448691bac44d72"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x69eCC4E2D8ea56E2d0a05bF57f4Fd6aEE7f2c284",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727977943,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 35648,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 6500,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 451,
        "getNopFeesJuels": "4913740376993810250",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "4949039107694359620",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "9155537919962347042",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "arbitrum"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x6B4B6359Dd5B47Cdb030E5921456D2a0625a9EbD",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727977007,
      "values": {
        "$immutable": true,
        "commitStore": ["0xDaC3A82Cc5e7C137bF28e6EF4F68f29D66205ffe"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xDaC3A82Cc5e7C137bF28e6EF4F68f29D66205ffe",
          "chainSelector": "ethereum",
          "sourceChainSelector": "base",
          "onRamp": "0x56b30A0Dcd8dc87Ec08b80FA09502bAB801fa78e",
          "prevOffRamp": "0xdf85c8381954694E74abD07488f452b4c2Cddfb3",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041130,
          "configDigest": "0x0001187787c7fffb52d41f05c1e87fcdfc074491d0a31a558b2f309a1327daa4"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x6C8b9672B4482A876168b9415bF8bBEA574bF4B9",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1733879723,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 10,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "7937294810946806131",
          "onRamp": "0x9db257ae83968F10f6A50009587BdA2fCedFDd5A",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21383377,
          "configDigest": "0x0001528146c7b7aab54b12c66ed4215e3d4db71ad93f23b98cb6ddca01506119"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x70B2b3430c41bA19E20F57Cae23c3C619CbCA65D",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1729099043,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 108,
        "getNopFeesJuels": "22810791547031109",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "1556008542357238666",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8972427796133023851",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "1556008542357238666"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x70C705ff3eCAA04c8c61d581a59a168a1c49c2ec",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727749091,
      "values": {
        "$immutable": true,
        "commitStore": ["0x9D93D536Ced80871Bf3DA5Bb47bAedE62c794f8A"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x9D93D536Ced80871Bf3DA5Bb47bAedE62c794f8A",
          "chainSelector": "ethereum",
          "sourceChainSelector": "gnosis",
          "onRamp": "0x014ABcfDbCe9F67d0Df34574664a6C0A241Ec03A",
          "prevOffRamp": "0xE93ec2A57e38C8541c893348cCafEAB01F7D47d4",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041191,
          "configDigest": "0x00010af34b92b2b9987c3ee3f80062cc3dacc0a9d600713650786a2d822b004b"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x718672076D6d51E4c76142B37bC99E4945d704a3",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727970623,
      "values": {
        "$immutable": true,
        "commitStore": ["0x57b548C9c213EA2bcf60193E3D7fd2d2b53Fb9b3"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x57b548C9c213EA2bcf60193E3D7fd2d2b53Fb9b3",
          "chainSelector": "ethereum",
          "sourceChainSelector": "polygon",
          "onRamp": "0x1DAcBae00c779913e6E9fc1A3323FbA4847ba53C",
          "prevOffRamp": "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041189,
          "configDigest": "0x00010a951f50c6417bfec8305ad440c889be6834beae8b0abdf2910b7ba69982"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x741599d9a5a1bfC40A22f530fbCd85E2718e9F90",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727343587,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 94,
        "getNopFeesJuels": "104808885280679708",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "1346049177634351622",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0xEd5bE9508ae56531cc0EDe6A3bD588Eb9E2e3cfa",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8627867648284147876",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0xEd5bE9508ae56531cc0EDe6A3bD588Eb9E2e3cfa",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "celo"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x75d536eED32f4c8Bb39F4B0c992163f5BA49B84e",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727362199,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 29,
        "getNopFeesJuels": "106338482579226040",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "8805746078405598895",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0xa5ef33B57dD8B653F9A9EA7114f46376d18264aC",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8478823942722882922",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0xa5ef33B57dD8B653F9A9EA7114f46376d18264aC",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "metis"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1717183043,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 9,
        "getLatestPriceEpochAndRound": 467714,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "mode",
          "onRamp": "0xbD5F9C193a7fEF5D578C55Ddfe4d08d6BCc15648",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 4,
          "blockNumber": 20574549,
          "configDigest": "0x00012da522c4eb868a6396e5a3f26b12e29d3a68935341a418f613954fb6b34e"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x794aE32b63b8a82a6e2Ec5017bbC6bfbddA5ce96",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727343671,
      "values": {
        "$immutable": true,
        "commitStore": ["0x95deB0c4bB9168202d50E874865f9A1842b82D64"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x95deB0c4bB9168202d50E874865f9A1842b82D64",
          "chainSelector": "ethereum",
          "sourceChainSelector": "celo",
          "onRamp": "0xc319484eF6cdA3a7f4D470e660b343FB569e9A1e",
          "prevOffRamp": "0xd5083684eE92dDeA117636ae5E2F1cb7fE4dfd46",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20975350,
          "configDigest": "0x00016a990659dd6eca42192f5d37c014c30aedcdfbf8fb903dc400f88d5f5e33"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x7Afe7088aff57173565F4b034167643AA8b9171c",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1701457427,
      "values": {
        "$immutable": true,
        "commitStore": ["0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75",
          "chainSelector": "ethereum",
          "sourceChainSelector": "bnb",
          "onRamp": "0x0Bf40b034872D0b364f3DCec04C7434a4Da1C8d9",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 6,
          "blockNumber": 19864115,
          "configDigest": "0x00016c527abd568b60ba375f0f53a5d45c115706b7f4d031b23592f88eff4e54"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "Router",
      "address": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
      "template": "transporter/RouterV1_2_0",
      "sourceHashes": [
        "0x56b28474b4daa9a8cbbe1a1ed1135d6881be21c0f343671e361b90eebf0b210d"
      ],
      "sinceTimestamp": 1700593571,
      "values": {
        "$immutable": true,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getWrappedNative": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "MAX_RET_BYTES": 132,
        "offRamps": [
          {
            "sourceChainSelector": "optimism",
            "offRamp": "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7"
          },
          {
            "sourceChainSelector": "polygon",
            "offRamp": "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395"
          },
          {
            "sourceChainSelector": "arbitrum",
            "offRamp": "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d"
          },
          {
            "sourceChainSelector": "avalanche",
            "offRamp": "0x569940e02D4425eac61A7601632eC00d69f75c17"
          },
          {
            "sourceChainSelector": "bnb",
            "offRamp": "0x7Afe7088aff57173565F4b034167643AA8b9171c"
          },
          {
            "sourceChainSelector": "base",
            "offRamp": "0xdf85c8381954694E74abD07488f452b4c2Cddfb3"
          },
          {
            "sourceChainSelector": "wemix",
            "offRamp": "0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5"
          },
          {
            "sourceChainSelector": "gnosis",
            "offRamp": "0xE93ec2A57e38C8541c893348cCafEAB01F7D47d4"
          },
          {
            "sourceChainSelector": "celo",
            "offRamp": "0xd5083684eE92dDeA117636ae5E2F1cb7fE4dfd46"
          },
          {
            "sourceChainSelector": "mode",
            "offRamp": "0xE8af3b68eDfFf65Ce48648009982380701f09B92"
          },
          {
            "sourceChainSelector": "blast",
            "offRamp": "0x1a904DbbaDdE629a1460e2F6E2E485Ce06Ed7599"
          },
          {
            "sourceChainSelector": "metis",
            "offRamp": "0xCe6364dBe64D2789D916180131fAda2ABFF702E8"
          },
          {
            "sourceChainSelector": "1562403441176082196",
            "offRamp": "0xb368c8946D9fa5A497cDe1Dff7213f9CdfD143Bf"
          },
          {
            "sourceChainSelector": "4627098889531055414",
            "offRamp": "0x418dcbCf229897d0CCf1B8B464Db06C23879FBB4"
          },
          {
            "sourceChainSelector": "13204309965629103672",
            "offRamp": "0x26a10137A54F4Ea01D20758Ac5AdBf9326340Fc3"
          },
          {
            "sourceChainSelector": "3016212468291539606",
            "offRamp": "0x3c672f0f9E73cB7984A5Ab486C7839f84C8EDC09"
          },
          {
            "sourceChainSelector": "4348158687435793198",
            "offRamp": "0x0aB48c500AbD8392620c3C4E4fdD5d7063C44554"
          },
          {
            "sourceChainSelector": "6422105447186081193",
            "offRamp": "0x33276152d082120F5190362e6E5F6783bbCb2B26"
          },
          {
            "sourceChainSelector": "17198166215261833993",
            "offRamp": "0x4E4003DAFD00eC3B5F17f05950759054051950d6"
          },
          {
            "sourceChainSelector": "celo",
            "offRamp": "0x794aE32b63b8a82a6e2Ec5017bbC6bfbddA5ce96"
          },
          {
            "sourceChainSelector": "1556008542357238666",
            "offRamp": "0x5B859E596C4285bf489E1bFa222b97dB431da7eC"
          },
          {
            "sourceChainSelector": "1562403441176082196",
            "offRamp": "0x6868FefbEFDc2B2FB75E6ED216dB1BeC02563D69"
          },
          {
            "sourceChainSelector": "blast",
            "offRamp": "0xF4468E56179e6EF59d6f5B133D9355AAD91Ea9ae"
          },
          {
            "sourceChainSelector": "wemix",
            "offRamp": "0xc1EcCE580B2C96f4fd202fB7c2a259ECe19a1bF2"
          },
          {
            "sourceChainSelector": "gnosis",
            "offRamp": "0x70C705ff3eCAA04c8c61d581a59a168a1c49c2ec"
          },
          {
            "sourceChainSelector": "optimism",
            "offRamp": "0x562a2025E60AA19Aa03Ea41D70ea1FD3286d1D3B"
          },
          {
            "sourceChainSelector": "polygon",
            "offRamp": "0x718672076D6d51E4c76142B37bC99E4945d704a3"
          },
          {
            "sourceChainSelector": "arbitrum",
            "offRamp": "0xdf615eF8D4C64d0ED8Fd7824BBEd2f6a10245aC9"
          },
          {
            "sourceChainSelector": "avalanche",
            "offRamp": "0xd98E80C79a15E4dbaF4C40B6cCDF690fe619BFBb"
          },
          {
            "sourceChainSelector": "mode",
            "offRamp": "0xb57D52F7Cb7BBD19a117585bbaf712108E56dd8f"
          },
          {
            "sourceChainSelector": "metis",
            "offRamp": "0x330349112e13232131Da51f9f3b153d825f65e61"
          },
          {
            "sourceChainSelector": "bnb",
            "offRamp": "0x66d84fedED0e51aeB47ceD1BB2fc0221Ae8D7C12"
          },
          {
            "sourceChainSelector": "base",
            "offRamp": "0x6B4B6359Dd5B47Cdb030E5921456D2a0625a9EbD"
          },
          {
            "sourceChainSelector": "6916147374840168594",
            "offRamp": "0x9a3Ed7007809CfD666999e439076B4Ce4120528D"
          },
          {
            "sourceChainSelector": "5406759801798337480",
            "offRamp": "0xF3AC96642F9BA5De3BBc864d609E3F534dD3b7F9"
          },
          {
            "sourceChainSelector": "2049429975587534727",
            "offRamp": "0x5EDa6801dBD2bBdbF0401d34c730fa2C3A97C3F4"
          },
          {
            "sourceChainSelector": "3849287863852499584",
            "offRamp": "0xdE81f1627ef2F6E23A2C0f338623C78c10EA57AC"
          },
          {
            "sourceChainSelector": "3993510008929295315",
            "offRamp": "0x8B3eEed4948684c3ec1bb60967820f40285018B8"
          },
          {
            "sourceChainSelector": "7937294810946806131",
            "offRamp": "0x3B45dd27E0cF84F1af98DEaBDc8f96303475ef58"
          }
        ],
        "onRamps": {
          "3734403246176062136": "0x3455D8E039736944e66e19eAc77a42e8077B07bf",
          "4051577828743386545": "0x15a9D79d6b3485F70bF82bC49dDD1fcB37A7149c",
          "4949039107694359620": "0x69eCC4E2D8ea56E2d0a05bF57f4Fd6aEE7f2c284",
          "6433500567565415381": "0xaFd31C0C78785aDF53E4c185670bfd5376249d8A",
          "11344663589394136015": "0x948306C220Ac325fa9392A6E601042A3CD0b480d",
          "15971525489660198786": "0xb8a882f3B88bd52D1Ff56A873bfDB84b70431937",
          "5142893604156789321": "0xdEFeADd30D5BFD403d86245b43e39a73d76423cC",
          "465200170687744372": "0xf50B9A46C394bD98491ce163d420222d8030F6F0",
          "1346049177634351622": "0x741599d9a5a1bfC40A22f530fbCd85E2718e9F90",
          "7264351850409363825": "0xeA6d4a24B262aB3e61a8A62f018A30beCD086f82",
          "4411394078118774322": "0x6751cA96b769129dFE6eB8E349c310deCEDb4e36",
          "8805746078405598895": "0x75d536eED32f4c8Bb39F4B0c992163f5BA49B84e",
          "1562403441176082196": "0x9B14AE850653dD0E30fBC93ab7f77D0d638a365B",
          "4627098889531055414": "0x626189C882A80fF0D036d8D9f6447555e81F78E9",
          "13204309965629103672": "0x362A221C3cfd7F992DFE221687323F0BA9BA8187",
          "3016212468291539606": "0xBA1Aa22D51692AA0D7746F996cBE657781653332",
          "4348158687435793198": "0x33417f13DFBC2FfB9e1B43051c3737370F3691a4",
          "6422105447186081193": "0xD8E8720709a3d9A18a9B281E6148E94149B2E252",
          "17198166215261833993": "0x4Cc3D95d9384D3287724B83099f01BC3025702c0",
          "1556008542357238666": "0x70B2b3430c41bA19E20F57Cae23c3C619CbCA65D",
          "6916147374840168594": "0xdC5b578ff3AFcC4A4a6E149892b9472390b50844",
          "5406759801798337480": "0xddF4b4aF7A9603869C90189EFa8826683D0D234b",
          "2049429975587534727": "0xdB6ebB3ea15595E516dEf4a9875479573a4F19b6",
          "3849287863852499584": "0x1B960560324c03db5565545B353198fdd07A195d",
          "3993510008929295315": "0x3Ac0D8fe5b4e8d0a95C507CCd83F6A8d73A8c6b1",
          "7937294810946806131": "0x4FB5407d6911DaA0B8bde58A754E7D01CB8b05c5"
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "Router 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CallProxy",
      "address": "0x82b8A19497fA25575f250a3DcFfCD2562B575A2e",
      "sourceHashes": [
        "0x0b5d83431c69340cb7e56f4baac882eed639a835829b4752caefdb78e4b32741"
      ],
      "sinceTimestamp": 1689097595,
      "values": { "$immutable": true }
    },
    {
      "name": "CommitStore",
      "address": "0x831097033C88c82a7F1897b168Aa88cC44540C8f",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1715889587,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 25,
        "getLatestPriceEpochAndRound": 467714,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "celo",
          "onRamp": "0x27C96A8a2f70a8408aD6c620717a3bDaA54bb10b",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 6,
          "blockNumber": 20574530,
          "configDigest": "0x0001163bb8e5e2a1be39c086ff1c53c480b69f5c1fa89bdef5655886551d5eea"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x83F3DA5aa2C7534d694B0acde7624573c830250D",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727922659,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 85,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "optimism",
          "onRamp": "0xE4C51Dc01A4E0aB14c7a7a2ed1655E9CF8A3E698",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041178,
          "configDigest": "0x00011ec48d6f4bb34b172cd56fbab664004b4528496d75718214e43223aa4709"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "OnRamp1",
      "address": "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1701285455,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 33596,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 6840,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 1708,
        "getNopFeesJuels": 8,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "5574763350941150069",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "optimism"],
        "tokenAddresses": [
          "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0xAe770d24ec1580A13392E0B71067571351029203",
          "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
          "0xB60acD2057067DC9ed8c083f5aa227a244044fD6",
          "0x6b5204B0Be36771253Cc38e88012E02B752f0f36",
          "0x8C0D76C9B18779665475F3E212D9Ca1Ed6A1A0e6",
          "0xc2e660C62F72c2ad35AcE6DB78a616215E2F2222",
          "0x20157DBAbb84e3BBFE68C349d0d44E48AE7B5AD2",
          "0x30D20208d987713f46DFD34EF128Bb16C404D10f",
          "0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C",
          "0x08d23468A467d2bb86FaE0e32F247A26C7E2e994"
        ],
        "tokenPools": [
          "0x057152DB365B47851B0A0bd431644b8eE21fE1b4",
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0x8291a8E8dCF429e2FA7d032bF3E583ee959F3B06",
          "0x69c24c970B65e22Ac26864aF10b2295B7d78f93A",
          "0x619ED9fE2E5CfD9FAE364E703b60eA776Bb5924E",
          "0x0C291Ae31730901515e5C46406A6ba2d88c1f4aA",
          "0x6452d693860ab7e18fC5858C05980F63d93F37a6",
          "0xF84Bf7D614F3138D805186C497995d4eD315fA72",
          "0xa96787DCe9Df7BF7bB033E39777bd108E29D349b",
          "0xf5224EfD7Ea9edFa6b6e06964084b92426DCdE99",
          "0xd72F7010f0Fa621aB0869e61e9bb4e3cC887c66c",
          "0x0Bc42675799D0C1efE3CDe64857714ae84f075B4",
          "0x66D40E0D2819a2264B2a61f5DD578573B9dedCEc",
          "0xa35304aA2D659e5E06A768fEc4Af3B443916C215"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "derivedName": "EVM2EVMOnRamp",
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x8705F734b7ac1FC0bb2d16F60c6eFac5Ed646159",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1731971171,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 109,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "2049429975587534727",
          "onRamp": "0x0129211377B414Cad2c624C40c342FAffB3B3F0F",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21246070,
          "configDigest": "0x0001d761bb7b461468cb81eb43eb8edde0c939f2a76b10c5f85c02aa8fb449ed"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1701457415,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 2954,
        "getLatestPriceEpochAndRound": 469761,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "bnb",
          "onRamp": "0x0Bf40b034872D0b364f3DCec04C7434a4Da1C8d9",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 9,
          "blockNumber": 20574522,
          "configDigest": "0x0001e56a75372f894c177787f2df78efd743286c7420d76047d9ef113e36b21f"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x8B3eEed4948684c3ec1bb60967820f40285018B8",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1732563995,
      "values": {
        "$immutable": true,
        "commitStore": ["0xdCF6F209d36d93A26B251D2CFE994bEF02954110"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xdCF6F209d36d93A26B251D2CFE994bEF02954110",
          "chainSelector": "ethereum",
          "sourceChainSelector": "3993510008929295315",
          "onRamp": "0x750BFfccf99D1Ad1C38b5FE4Ad83010bbb82E7DF",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21285936,
          "configDigest": "0x0001d5bb762cadc1c6128dd4d756a0e1949a2ce4aaf5b03aa6f55871716807a9"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "PriceRegistry",
      "address": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
      "template": "transporter/PriceRegistry",
      "sourceHashes": [
        "0xb3ac732170b6c82e6eb8e400fac9618c85fcdce082a404030cee9be7bd700bdf"
      ],
      "sinceTimestamp": 1700593583,
      "values": {
        "$immutable": true,
        "getFeeTokens": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f"
        ],
        "getPriceUpdaters": [
          "0x4af4B497c998007eF83ad130318eB2b925a79dc8",
          "0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE",
          "0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76",
          "0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75",
          "0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749",
          "0x8DC27D621c41a32140e22E2a4dAf1259639BAe04",
          "0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB",
          "0x118a9389960F86390A4F14ce4C95D6ff076C6bFC",
          "0x831097033C88c82a7F1897b168Aa88cC44540C8f",
          "0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e",
          "0x3CB2A81bb8a188C5353CdFa9994ed8666556FC53",
          "0x3d8a95adA63D406ee8232562AbD83CEdb0B90466",
          "0xa4d264470a67D9f6682EE12Bdc9c35Df44e3F194",
          "0x57d6cD9CD44770C807b2763Dbe4CFDA0113dd114",
          "0x9f592c28590595F3F78a8881E8Dbb9984ed705cD",
          "0x1A3D582d1aB9CF630b44B91C54CBD16Ca7e35a8d",
          "0xD9d3d90D729F50794741Da7a2d54d8B12dC3Da72",
          "0xFa94e57b12b6C45A3aD3CBb9451ba99a997eb210",
          "0xA48269e5c9A234daBfEBE98b82390Be705536d1c",
          "0x95deB0c4bB9168202d50E874865f9A1842b82D64",
          "0xd8F93Aff87dC2AEEe0D0b0dF347baDA861BFf802",
          "0x52275dC17f9eD92230C8C4d57fD36d128701f694",
          "0xA4755Cd68CA2092447c8c842659a2931f9110320",
          "0x0d26BaE784c8986502E072F4e73B6168e2052045",
          "0x0f89C7c0586536B618e0469402e1c8234bc52959",
          "0x01346721418045A6c07b71052e452eF8615e9084",
          "0x9D93D536Ced80871Bf3DA5Bb47bAedE62c794f8A",
          "0x9B9Ec8E26955c034828bBD78E22ab258d983dCdb",
          "0x83F3DA5aa2C7534d694B0acde7624573c830250D",
          "0x57b548C9c213EA2bcf60193E3D7fd2d2b53Fb9b3",
          "0xA9f9bF2b643348c0884f2eBA4F712E833DA9a2b8",
          "0xDaC3A82Cc5e7C137bF28e6EF4F68f29D66205ffe",
          "0xf7B343A17445F175f2Dd9f5CB29BAf0a8dE75ed3",
          "0xE41677500B425999cB4133950ca3aB79eA7470a6",
          "0xa58818D1acD8D62ab077a1F79606fCb5CE3741b9",
          "0x8705F734b7ac1FC0bb2d16F60c6eFac5Ed646159",
          "0xd2428F8C62fBfEA4b44a703CF11e02D7B0a6Cd99",
          "0xdCF6F209d36d93A26B251D2CFE994bEF02954110",
          "0x6C8b9672B4482A876168b9415bF8bBEA574bF4B9"
        ],
        "getStalenessThreshold": 90000,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "PriceRegistry 1.2.0"
      }
    },
    {
      "name": "CommitStore",
      "address": "0x8DC27D621c41a32140e22E2a4dAf1259639BAe04",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1701287747,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 5251,
        "getLatestPriceEpochAndRound": 464897,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "base",
          "onRamp": "0xDEA286dc0E01Cb4755650A6CF8d1076b454eA1cb",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 9,
          "blockNumber": 20574539,
          "configDigest": "0x0001aca19ca6472b325da7ddcbfd76c8d2efd743b89fe3e010e38f791194de04"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1701287003,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 3272,
        "getNopFeesJuels": 10,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "7787117620321869576",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "bnb"],
        "tokenAddresses": [
          "0xE46a5E19B19711332e33F33c2DB3eA143e86Bc10",
          "0x5F2F8818002dc64753daeDF4A6CB2CcB757CD220",
          "0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F",
          "0xDBB5Cf12408a3Ac17d668037Ce289f9eA75439D7",
          "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0x54Df3076ac0CdC9bC97fA290AB9c5a88E3D23630",
          "0xa7a0B3Fe94121E366D774d60D075F6386F750884",
          "0x60b9C41d99FE3Eb64Ecc1344baD31D87f1bceD6D",
          "0x01aaC2b594F7bdBeC740F0F1AA22910EbB4B74Ab",
          "0xAe770d24ec1580A13392E0B71067571351029203",
          "0x7A56E1C57C7475CCf742a1832B028F0456652F97",
          "0xd9D920AA40f578ab794426F5C90F6C731D159DEf",
          "0x325DC9EBceC31940C658aCACa45f8293418d811E",
          "0xbDf245957992bfBC62B07e344128a1EEc7b7eE3f"
        ],
        "tokenPools": [
          "0xc43c01026128Aa758A65D12dB6a72CE4DD778dF2",
          "0x9797E886EDe987AEf6A62885dFD6CcA885D828E6",
          "0x619ED9fE2E5CfD9FAE364E703b60eA776Bb5924E",
          "0x6Ff6BF3BF8af2e419DDC7BF038aFa5EB92b6cD7e",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0x1580C7d4754f5671626e42f0372D56104B092CFA",
          "0x44622f4604353E4815A4212d5a3dD137A1C7FF14",
          "0x06f9817a91595E1B595F789Fb91529e8651da9B8",
          "0x4C3aEe10334461F1f33c0A8843424de3F8fb7709",
          "0x8c6028e38391cfC2A1a28f4359EA5732E9422e56",
          "0xd72F7010f0Fa621aB0869e61e9bb4e3cC887c66c",
          "0xd8f734c938200BA294d0De5B555E8ff77d66c351",
          "0x80Cc104119901fd66088C9a8219E50D9547dE2d4",
          "0xBA0E1c1F702D7Ec44a555759517BDBe9f7c824C3",
          "0x45A103142585bdFc49cdb137f2a45D1AE7F84b6b"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1701287339,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 35648,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 6500,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 6045,
        "getNopFeesJuels": 12,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "7790755646165257025",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "arbitrum"],
        "tokenAddresses": [
          "0x72e364F2ABdC788b7E918bc238B21f109Cd634D7",
          "0xCA160D11087E03fd398d40f561cd4768825f4958",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
          "0x5F2F8818002dc64753daeDF4A6CB2CcB757CD220",
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0xA95C5ebB86E0dE73B4fB8c47A45B792CFeA28C23",
          "0x911D86C72155c33993d594B0Ec7E6206B4C803da",
          "0x98C6616F1CC0D3E938A16200830DD55663dd7DD3",
          "0xAe770d24ec1580A13392E0B71067571351029203",
          "0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F",
          "0xDcEe70654261AF21C44c093C300eD3Bb97b78192",
          "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
          "0x32bd822d615A3658A68b6fDD30c2fcb2C996D678",
          "0x49446A0874197839D15395B908328a74ccc96Bc0",
          "0x8a053350ca5F9352a16deD26ab333e2D251DAd7c",
          "0xB60acD2057067DC9ed8c083f5aa227a244044fD6",
          "0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b",
          "0x38C2a4a7330b22788374B8Ff70BBa513C8D848cA",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0xDBB5Cf12408a3Ac17d668037Ce289f9eA75439D7",
          "0x54Df3076ac0CdC9bC97fA290AB9c5a88E3D23630",
          "0xa7a0B3Fe94121E366D774d60D075F6386F750884",
          "0x60b9C41d99FE3Eb64Ecc1344baD31D87f1bceD6D",
          "0xf2DbAaBd8F8E0993F11DE4CEd470Df1ED1a4491b",
          "0x1Cbc4BF664907669CfAB86a3b1aCC3EC8867a25F",
          "0x482dF7483a52496F4C65AB499966dfcdf4DDFDbc",
          "0x20157DBAbb84e3BBFE68C349d0d44E48AE7B5AD2",
          "0x6b5204B0Be36771253Cc38e88012E02B752f0f36",
          "0xc4506022Fb8090774E8A628d5084EED61D9B99Ee",
          "0x341c05c0E9b33C0E38d64de76516b2Ce970bB3BE",
          "0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f",
          "0x18f313Fc6Afc9b5FD6f0908c1b3D476E3feA1DD9",
          "0x8C0D76C9B18779665475F3E212D9Ca1Ed6A1A0e6",
          "0xc2e660C62F72c2ad35AcE6DB78a616215E2F2222",
          "0x7A56E1C57C7475CCf742a1832B028F0456652F97",
          "0xd9D920AA40f578ab794426F5C90F6C731D159DEf",
          "0x30D20208d987713f46DFD34EF128Bb16C404D10f",
          "0x325DC9EBceC31940C658aCACa45f8293418d811E",
          "0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C",
          "0xbDf245957992bfBC62B07e344128a1EEc7b7eE3f",
          "0x08d23468A467d2bb86FaE0e32F247A26C7E2e994"
        ],
        "tokenPools": [
          "0x57D3bb46aF4A9b210FAE046796013090D428475F",
          "0xcd196D3905AfA0eCB4e0e62C2D7d6c52f9C73526",
          "0x2dd317E7e36544C5222818F228d607c209517470",
          "0x123ed44f3B863a684437Ebf18F8a744c250Ee5cA",
          "0x50f6631B377be52E132DF35a2F05eA54fda882ac",
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0x73aEB5ECA03Ad587B8Fdcc2B61f9fb4D2e3D90c1",
          "0x21377fe476Fb8587CbAFd47155093597Fa4df45E",
          "0xeaE89E53B8317CaB04165F5323285252D5669B73",
          "0xc43c01026128Aa758A65D12dB6a72CE4DD778dF2",
          "0xdCa0A2341ed5438E06B9982243808A76B9ADD6d0",
          "0x8291a8E8dCF429e2FA7d032bF3E583ee959F3B06",
          "0x69c24c970B65e22Ac26864aF10b2295B7d78f93A",
          "0x619ED9fE2E5CfD9FAE364E703b60eA776Bb5924E",
          "0x047204D42d93a6471F7c9Ec94292B4B00E8e0786",
          "0xE2F0dad85D504aa046b9F704a426fD6C5493e366",
          "0xa370CEcd451ecf15c2A01ec47762E967dF7574DA",
          "0x0C291Ae31730901515e5C46406A6ba2d88c1f4aA",
          "0x8272dbBA30f14900b22b4bfC8DB4E88B02bA413a",
          "0xb854536206EB6C1013b1642b576196E5EF19D7BA",
          "0x6ce8b799002BbECc7df94c18BF150B3b0E4A28F4",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0x9797E886EDe987AEf6A62885dFD6CcA885D828E6",
          "0x1580C7d4754f5671626e42f0372D56104B092CFA",
          "0x44622f4604353E4815A4212d5a3dD137A1C7FF14",
          "0x06f9817a91595E1B595F789Fb91529e8651da9B8",
          "0xBF7cb652A2d5ed3BFc3832Ef8Af33Ffb0cDc0982",
          "0x8300e89e82A840176eb250EcDA0A7dBDb4a6B12D",
          "0x0DAFed8dAF42040dB2c6227ca2AEB14D9C8B2602",
          "0xf5224EfD7Ea9edFa6b6e06964084b92426DCdE99",
          "0x6452d693860ab7e18fC5858C05980F63d93F37a6",
          "0x0238d2C272f17CF11AEDB08CDE515d56ED25E2E4",
          "0xcd69c117bf91Fc57d5fC237dFAbA5f17B5322733",
          "0x5756880B6a1EAba0175227bf02a7E87c1e02B28C",
          "0x4Ce6f5cacF8Bd393104c12F6151B727eabBf675c",
          "0xF84Bf7D614F3138D805186C497995d4eD315fA72",
          "0xa96787DCe9Df7BF7bB033E39777bd108E29D349b",
          "0xd72F7010f0Fa621aB0869e61e9bb4e3cC887c66c",
          "0x8c6028e38391cfC2A1a28f4359EA5732E9422e56",
          "0xd8f734c938200BA294d0De5B555E8ff77d66c351",
          "0x80Cc104119901fd66088C9a8219E50D9547dE2d4",
          "0x0Bc42675799D0C1efE3CDe64857714ae84f075B4",
          "0xBA0E1c1F702D7Ec44a555759517BDBe9f7c824C3",
          "0x66D40E0D2819a2264B2a61f5DD578573B9dedCEc",
          "0x45A103142585bdFc49cdb137f2a45D1AE7F84b6b",
          "0xa35304aA2D659e5E06A768fEc4Af3B443916C215"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x948306C220Ac325fa9392A6E601042A3CD0b480d",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727851103,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 352,
        "getNopFeesJuels": "7521346945827802096",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "11344663589394136015",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "3152963225854414347",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "bnb"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x95deB0c4bB9168202d50E874865f9A1842b82D64",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727343635,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 88,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "celo",
          "onRamp": "0xc319484eF6cdA3a7f4D470e660b343FB569e9A1e",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20975351,
          "configDigest": "0x0001cdde33980ae64bccd75f3d7662a41ef2a5487a4a911f6ca3a2d32233cf37"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0x9a3Ed7007809CfD666999e439076B4Ce4120528D",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1730712959,
      "values": {
        "$immutable": true,
        "commitStore": ["0xE41677500B425999cB4133950ca3aB79eA7470a6"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xE41677500B425999cB4133950ca3aB79eA7470a6",
          "chainSelector": "ethereum",
          "sourceChainSelector": "6916147374840168594",
          "onRamp": "0x02b60267bceeaFDC45005e0Fa0dd783eFeBc9F1b",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21139956,
          "configDigest": "0x0001013233ecdf199b1b1c30941f56f5c4d7730619edd22bb50815d51b07ef08"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0x9B14AE850653dD0E30fBC93ab7f77D0d638a365B",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727416535,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 975,
          "destGasPerDataAvailabilityByte": 0,
          "destDataAvailabilityMultiplierBps": 10000,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 96,
        "getNopFeesJuels": "151589168521925499",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "1562403441176082196",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0xD54C93A99CBCb8D865E13DA321B540171795A89f",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8530505109565302546",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0xD54C93A99CBCb8D865E13DA321B540171795A89f",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "1562403441176082196"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1701287831,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 4645,
        "getLatestPriceEpochAndRound": 462083,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "arbitrum",
          "onRamp": "0xCe11020D56e5FDbfE46D9FC3021641FfbBB5AdEE",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 9,
          "blockNumber": 20574532,
          "configDigest": "0x0001370e23facc097f2c5f3bca6c9f17d68f1961e5f489ac13d0e7600332c1e1"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x9B9Ec8E26955c034828bBD78E22ab258d983dCdb",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727851151,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 238,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "bnb",
          "onRamp": "0x35C724666ba31632A56Bad4390eb69f206ab60C7",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041118,
          "configDigest": "0x0001216a33ac9fffa885ebb11793c445106902e006c6fabf559254bfca115461"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x9D93D536Ced80871Bf3DA5Bb47bAedE62c794f8A",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727749055,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 32,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "gnosis",
          "onRamp": "0x014ABcfDbCe9F67d0Df34574664a6C0A241Ec03A",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041192,
          "configDigest": "0x000184011a3c3e05eea15760f814fc726f83562f5b4f6a620c3be914b67ce4b7"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0x9f592c28590595F3F78a8881E8Dbb9984ed705cD",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1726173551,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 20,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "4627098889531055414",
          "onRamp": "0x69AbB6043BBEA2467f41CCD0144d1b3b4ECd20f4",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 1,
          "blockNumber": 20824421,
          "configDigest": "0x0001546e1da61190650a8355d476951d9a91ef9b3887ac715b73faa535d6676b"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xA4755Cd68CA2092447c8c842659a2931f9110320",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727350607,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 128,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "wemix",
          "onRamp": "0x6c6Dd4fCa5A7B2F11AA3057AB573DD8878C76C5e",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20989865,
          "configDigest": "0x0001fe7f65f62f62ae6ebfdcd2cc2c7d5123162a751c1af2db670c6972b69f8a"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xA48269e5c9A234daBfEBE98b82390Be705536d1c",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1728307091,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 76,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "17198166215261833993",
          "onRamp": "0xD3Bd3D50E3593AFE8B5A50C1B3F83c21D64c10d2",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20974339,
          "configDigest": "0x00012beea874c2cd6b249268528192caf4407624bb2f1e017a1394110966bed0"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xa4d264470a67D9f6682EE12Bdc9c35Df44e3F194",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1721311463,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 23,
        "getLatestPriceEpochAndRound": 468738,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "1562403441176082196",
          "onRamp": "0x3B80Fe300c9A611abA0496e2543B66Ff7bD4B9e9",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 5,
          "blockNumber": 20574560,
          "configDigest": "0x00018d8d4844a53c3d72bf9c7721684c1f21b6eb6976d0b1b83155181ed84823"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xa58818D1acD8D62ab077a1F79606fCb5CE3741b9",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1731970691,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 111,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "5406759801798337480",
          "onRamp": "0xB1C908A7CF6f5FB1ed18a73aD60ffF9CC8276eC1",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21240427,
          "configDigest": "0x0001f33faf1aaa17a2703a3e36f26d0fd60d73aefb85744ac74e2f853a9be009"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xa5ef33B57dD8B653F9A9EA7114f46376d18264aC",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1718911571,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 62,
        "getNopFeesJuels": 8,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "6721686683798657176",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "metis"],
        "tokenAddresses": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0x911D86C72155c33993d594B0Ec7E6206B4C803da",
          "0xA95C5ebB86E0dE73B4fB8c47A45B792CFeA28C23"
        ],
        "tokenPools": [
          "0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4",
          "0x21377fe476Fb8587CbAFd47155093597Fa4df45E",
          "0x73aEB5ECA03Ad587B8Fdcc2B61f9fb4D2e3D90c1"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "ManyChainMultiSig",
      "address": "0xa8D5E1daA6D8B94f11D77B7E09DE846292ef69FF",
      "template": "transporter/ManyChainMultiSig",
      "sourceHashes": [
        "0x15b33604a10bda5235da68c98629cc8246b96e86c931a23c296ae08f1eb691cb"
      ],
      "ignoreInWatchMode": ["getRootMetadata", "getRoot", "getOpCount"],
      "sinceTimestamp": 1689394931,
      "values": {
        "$immutable": true,
        "getConfig": {
          "signers": [
            {
              "addr": "0x20a446033409CeB9c541A89b2B4F114d79Aa1840",
              "index": 0,
              "group": 1
            },
            {
              "addr": "0x2CD36141d4AEFb8e57209770b965043Ed3129D9F",
              "index": 1,
              "group": 1
            },
            {
              "addr": "0x6bfBf6BC4bc5CD20768dAA6F58f0743bAFf2e5f4",
              "index": 2,
              "group": 1
            },
            {
              "addr": "0x70f498A0AD8a17fC853fcb8eDbE31Fbce71173E6",
              "index": 3,
              "group": 1
            },
            {
              "addr": "0x776D5B14ef1D5C58B0d48b53114f2Aa0faccB307",
              "index": 4,
              "group": 1
            },
            {
              "addr": "0x803CBD1e4d722eCf8247c6c9CDab4fC87DBAf429",
              "index": 5,
              "group": 1
            },
            {
              "addr": "0x9E2FD656eFffF4cbAc9fd45C017D4DD8fBC550E5",
              "index": 6,
              "group": 1
            },
            {
              "addr": "0xAe735fd5e74887064DFf99C637f291caE5485A75",
              "index": 7,
              "group": 1
            },
            {
              "addr": "0xE062e7D123AC8dF480C56147f911144F55C10f88",
              "index": 8,
              "group": 1
            }
          ],
          "groupQuorums": [
            1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ],
          "groupParents": [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ]
        },
        "getOpCount": 0,
        "getRoot": {
          "root": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "validUntil": 0
        },
        "getRootMetadata": {
          "chainId": 1,
          "multiSig": "0xa8D5E1daA6D8B94f11D77B7E09DE846292ef69FF",
          "preOpCount": 0,
          "postOpCount": 0,
          "overridePreviousRoot": true
        },
        "MAX_NUM_SIGNERS": 200,
        "NUM_GROUPS": 32,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "CommitStore",
      "address": "0xA9f9bF2b643348c0884f2eBA4F712E833DA9a2b8",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727975351,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 305,
        "getLatestPriceEpochAndRound": 3973122,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "avalanche",
          "onRamp": "0xe8784c29c583C52FA89144b9e5DD91Df2a1C2587",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041089,
          "configDigest": "0x00014cfad60c6ceb2b1760e8ddf9e4e75cea16df31d41556d7bc697c626f5e8e"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "ManyChainMultiSig",
      "address": "0xAD97C0270a243270136E40278155C12ce7C7F87B",
      "template": "transporter/ManyChainMultiSig",
      "sourceHashes": [
        "0x15b33604a10bda5235da68c98629cc8246b96e86c931a23c296ae08f1eb691cb"
      ],
      "ignoreInWatchMode": ["getRootMetadata", "getRoot", "getOpCount"],
      "sinceTimestamp": 1689096875,
      "values": {
        "$immutable": true,
        "getConfig": {
          "signers": [
            {
              "addr": "0x124BA7e2188074335A0e9b12B449AD5781A73D60",
              "index": 0,
              "group": 7
            },
            {
              "addr": "0x146CAe49Dbe1b1D1968fc4652814740706548952",
              "index": 1,
              "group": 1
            },
            {
              "addr": "0x180159135c9b93C59d16eA1A690e465D22c5EB67",
              "index": 2,
              "group": 5
            },
            {
              "addr": "0x2b73763722378AB2013CB0877946f69fC3727Fd8",
              "index": 3,
              "group": 4
            },
            {
              "addr": "0x2B88575011C5E11389ddB50D28d31C7d06B352A0",
              "index": 4,
              "group": 1
            },
            {
              "addr": "0x2bbB172cD88dCAD64CBE762dcC53E6f96a17d1D6",
              "index": 5,
              "group": 1
            },
            {
              "addr": "0x3C6cE61b611e3b41289c2FAFA5BC4e150dD88dE3",
              "index": 6,
              "group": 3
            },
            {
              "addr": "0x43640F208956c7D49e04F40FF95dF818643B76aA",
              "index": 7,
              "group": 1
            },
            {
              "addr": "0x48A094F7A354d8faD7263EA2a82391d105DF6628",
              "index": 8,
              "group": 3
            },
            {
              "addr": "0x4e509C60b3e916644dE441298595FeD12C4AC926",
              "index": 9,
              "group": 1
            },
            {
              "addr": "0x570F41d83b1031d382F641B9a532A8D7CBd7a695",
              "index": 10,
              "group": 1
            },
            {
              "addr": "0x5bD3a90E94bB8aA6fE6cCF494e292F5F707B92d6",
              "index": 11,
              "group": 2
            },
            {
              "addr": "0x5C33Bf560f29e04dF8A666493aAD8E47eEa9B1c8",
              "index": 12,
              "group": 2
            },
            {
              "addr": "0x6924E54339C7f28730dBB4B842a7FE86ED01Ecf7",
              "index": 13,
              "group": 1
            },
            {
              "addr": "0x6B0f508B8cbeF970fAF9E8a28b9b4C6F1FD3afae",
              "index": 14,
              "group": 7
            },
            {
              "addr": "0x70C2Ddc97c4fAea760027d45E5de4D1E2ad2b9A5",
              "index": 15,
              "group": 6
            },
            {
              "addr": "0x7eFF312905DEdB38Bf8f07BEFaDfF96376154374",
              "index": 16,
              "group": 5
            },
            {
              "addr": "0x9079410666ED02725ee9d148398Cee26397c2A36",
              "index": 17,
              "group": 1
            },
            {
              "addr": "0x925d7Ea0ADe586DBFd56a942bb297286cE428C79",
              "index": 18,
              "group": 1
            },
            {
              "addr": "0x9453E18f03A36E2A2c70598De520bD24434D2d1D",
              "index": 19,
              "group": 6
            },
            {
              "addr": "0xA3177f64efE98422E782bC17BE7971F01187B7cF",
              "index": 20,
              "group": 1
            },
            {
              "addr": "0xa35B7219521134cAF52DccAD44d604335b64a4fB",
              "index": 21,
              "group": 4
            },
            {
              "addr": "0xc90788d9168f83dec518Ab7c0445Ad1Ec53554D7",
              "index": 22,
              "group": 5
            },
            {
              "addr": "0xd3094f770579AFd66711847cE9E9C42D10BA2264",
              "index": 23,
              "group": 4
            },
            {
              "addr": "0xd3E2da792E806556517124f03F12e557045951E7",
              "index": 24,
              "group": 6
            }
          ],
          "groupQuorums": [
            1, 6, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ],
          "groupParents": [
            0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ]
        },
        "getOpCount": 0,
        "getRoot": {
          "root": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "validUntil": 0
        },
        "getRootMetadata": {
          "chainId": 1,
          "multiSig": "0xAD97C0270a243270136E40278155C12ce7C7F87B",
          "preOpCount": 0,
          "postOpCount": 0,
          "overridePreviousRoot": true
        },
        "MAX_NUM_SIGNERS": 200,
        "NUM_GROUPS": 32,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xaFd31C0C78785aDF53E4c185670bfd5376249d8A",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727975303,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 223,
        "getNopFeesJuels": "1941673391040117212",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "6433500567565415381",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x3df8dAe2d123081c4D5E946E655F7c109B9Dd630",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "7313876024673996332",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x3df8dAe2d123081c4D5E946E655F7c109B9Dd630",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "avalanche"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1701285983,
      "values": {
        "$immutable": true,
        "commitStore": ["0x4af4B497c998007eF83ad130318eB2b925a79dc8"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x4af4B497c998007eF83ad130318eB2b925a79dc8",
          "chainSelector": "ethereum",
          "sourceChainSelector": "optimism",
          "onRamp": "0x55183Db1d2aE0b63e4c92A64bEF2CBfc2032B127",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 6,
          "blockNumber": 19864178,
          "configDigest": "0x0001c3cd527c6c9dc67c9b6f4a9905a8e35fb30bb1337a60b7c66b2a204eff3e"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "TokenAdminRegistry",
      "address": "0xb22764f98dD05c789929716D677382Df22C05Cb6",
      "sourceHashes": [
        "0x85182d3d77430870c56e6951818542e80e1313ec76f723c2c554ac02d7344adf"
      ],
      "sinceTimestamp": 1726156727,
      "values": {
        "$immutable": true,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "TokenAdminRegistry 1.5.0"
      }
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xb368c8946D9fa5A497cDe1Dff7213f9CdfD143Bf",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1721311487,
      "values": {
        "$immutable": true,
        "commitStore": ["0xa4d264470a67D9f6682EE12Bdc9c35Df44e3F194"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0xa4d264470a67D9f6682EE12Bdc9c35Df44e3F194",
          "chainSelector": "ethereum",
          "sourceChainSelector": "1562403441176082196",
          "onRamp": "0x3B80Fe300c9A611abA0496e2543B66Ff7bD4B9e9",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 3,
          "blockNumber": 20393768,
          "configDigest": "0x000182242b10ef1f775476ef241435c45ad30669be481e39882194b7b2e07f25"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xb57D52F7Cb7BBD19a117585bbaf712108E56dd8f",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727415731,
      "values": {
        "$immutable": true,
        "commitStore": ["0x01346721418045A6c07b71052e452eF8615e9084"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x01346721418045A6c07b71052e452eF8615e9084",
          "chainSelector": "ethereum",
          "sourceChainSelector": "mode",
          "onRamp": "0x7d2aF78868993a5a86676BA639eC0412709707D9",
          "prevOffRamp": "0xE8af3b68eDfFf65Ce48648009982380701f09B92",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041148,
          "configDigest": "0x00012fac27df849071c019b00451434770762f2a315206acc884c10eb232df89"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xb8a882f3B88bd52D1Ff56A873bfDB84b70431937",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727976899,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 33596,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 6840,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 761,
        "getNopFeesJuels": "8156806213963265355",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "15971525489660198786",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "5907514206169247750",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "base"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xBA1Aa22D51692AA0D7746F996cBE657781653332",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1726554203,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": true
        },
        "getExpectedNextSequenceNumber": 30,
        "getNopFeesJuels": 8,
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "3016212468291539606",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "4528799954045174320",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "3016212468291539606"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xc1EcCE580B2C96f4fd202fB7c2a259ECe19a1bF2",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727350619,
      "values": {
        "$immutable": true,
        "commitStore": ["0xA4755Cd68CA2092447c8c842659a2931f9110320"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xA4755Cd68CA2092447c8c842659a2931f9110320",
          "chainSelector": "ethereum",
          "sourceChainSelector": "wemix",
          "onRamp": "0x6c6Dd4fCa5A7B2F11AA3057AB573DD8878C76C5e",
          "prevOffRamp": "0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20989856,
          "configDigest": "0x0001a1ee456bae1dbe25e34e3b54bf14bc6b9bbc43e5360244ee17cbba1654b9"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1701802691,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 1918,
        "getNopFeesJuels": 5,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "9387240620851702847",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "wemix"],
        "tokenAddresses": [
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0x66cC3FD40612F9c591F977ce026Ef1C79520C472",
          "0x2624Bd0094f474713AC9c634b37A5ebef4e0b1FE"
        ],
        "tokenPools": [
          "0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4",
          "0x1175E4CFd6a73A4c1F1f2c1400a08D88554FA62e",
          "0x78196436aF11b948c7036424B1ceA711fAdAd288"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xCe6364dBe64D2789D916180131fAda2ABFF702E8",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1718911247,
      "values": {
        "$immutable": true,
        "commitStore": ["0x3d8a95adA63D406ee8232562AbD83CEdb0B90466"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x3d8a95adA63D406ee8232562AbD83CEdb0B90466",
          "chainSelector": "ethereum",
          "sourceChainSelector": "metis",
          "onRamp": "0xE43f9eD3146d76E627C2504E5140005027992De6",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 3,
          "blockNumber": 20285516,
          "configDigest": "0x0001db9981fe29627870cc37a0dc5dac7f0ac2bbe4fb1b14786d39a008fc3d0a"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xd2428F8C62fBfEA4b44a703CF11e02D7B0a6Cd99",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1732123727,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 114,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "3849287863852499584",
          "onRamp": "0x00E64619Bb29f7E1d4E1CC9f21ecEA05189fd8ab",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21275961,
          "configDigest": "0x0001f5f18a1485efe4f29c794e262fc9309933e88a41a91b5891ef7e0e8d8656"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0xd025e395362545e27f2685927e4952ec45f7414e89a22f0db36aa587b3741d69"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1701286319,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 1449,
        "getLatestPriceEpochAndRound": 466435,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "polygon",
          "onRamp": "0xFd77c53AA4eF0E3C01f5Ac012BF7Cc7A3ECf5168",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isARMHealthy": true,
        "isUnpausedAndARMHealthy": true,
        "latestConfigDetails": {
          "configCount": 8,
          "blockNumber": 20574561,
          "configDigest": "0x0001032f669d09a05e36d873e547a3009a05d8b30db4c0bca70564474fa7bf94"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xd5083684eE92dDeA117636ae5E2F1cb7fE4dfd46",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1715889599,
      "values": {
        "$immutable": true,
        "commitStore": ["0x831097033C88c82a7F1897b168Aa88cC44540C8f"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x831097033C88c82a7F1897b168Aa88cC44540C8f",
          "chainSelector": "ethereum",
          "sourceChainSelector": "celo",
          "onRamp": "0x27C96A8a2f70a8408aD6c620717a3bDaA54bb10b",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 19920841,
          "configDigest": "0x00019d184dccae0889b12b4eb0a1aaf1cb6c080ce97e404050f84bdf30f692af"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xD54C93A99CBCb8D865E13DA321B540171795A89f",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1721330867,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 975,
          "destGasPerDataAvailabilityByte": 0,
          "destDataAvailabilityMultiplierBps": 10000,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 30,
        "getNopFeesJuels": 7,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "7849691023360194947",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "1562403441176082196"],
        "tokenAddresses": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "tokenPools": ["0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4"],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "GnosisSafe",
      "address": "0xD6597750bf74DCAEC57e0F9aD2ec998D837005bf",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd5e39124d6a5dcf27e7b56bfbb24569e89837dea5e334ef533c239e1497f1fee"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1689260771,
      "values": {
        "$immutable": false,
        "$implementation": "0x2ED1A552C03f843a2Db7DE10AD390d24bb66CEE0",
        "$members": [
          "0x326377a6B92eC69AcbbFe2De1eB1d7c9008E4C89",
          "0x7052cB84079905400ea52B635cAb6a275fDA8823",
          "0xE062e7D123AC8dF480C56147f911144F55C10f88",
          "0x41eAdbc688797a02bfaBE48472995833489ce69D",
          "0x1c6460cfe32916196f6977b5442b0F98A826D880",
          "0x745B9329ccF53556e3C5f1fD1E4e9D0E91Ad2514",
          "0xAe735fd5e74887064DFf99C637f291caE5485A75",
          "0x14a8f3B302Bbfa7F2f2AC2F4515548370bc7bAdC",
          "0x6bfBf6BC4bc5CD20768dAA6F58f0743bAFf2e5f4",
          "0x56B167deCD5fC4E3Bbc07B3B4e1F30e74534F9dd",
          "0x06e5891D9b2Ee77740355A309BAF49caaB672f98",
          "0xa42c8570771240D1e2F3211064a7C7472Cc05b7D"
        ],
        "$threshold": 6,
        "domainSeparator": "0x4b48316c8545b9cd2ebf3323a3bb90dbc01a898080a791d95fd4f02d8b0660c5",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "6 of 12 (50%)",
        "nonce": 0,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xD8E8720709a3d9A18a9B281E6148E94149B2E252",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727715131,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 23,
        "getNopFeesJuels": 11,
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "6422105447186081193",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8673070954851735184",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "6422105447186081193"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xd8F93Aff87dC2AEEe0D0b0dF347baDA861BFf802",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1729099415,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 107,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "1556008542357238666",
          "onRamp": "0xa18BC8b64a863DB34199F7e59F3A3d051ABa413d",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 3,
          "blockNumber": 20988650,
          "configDigest": "0x0001763a2991b9f0ec958d0c612dbbc775aa7d57498626b1c9369f579d3cde5f"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xd98E80C79a15E4dbaF4C40B6cCDF690fe619BFBb",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727975375,
      "values": {
        "$immutable": true,
        "commitStore": ["0xA9f9bF2b643348c0884f2eBA4F712E833DA9a2b8"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xA9f9bF2b643348c0884f2eBA4F712E833DA9a2b8",
          "chainSelector": "ethereum",
          "sourceChainSelector": "avalanche",
          "onRamp": "0xe8784c29c583C52FA89144b9e5DD91Df2a1C2587",
          "prevOffRamp": "0x569940e02D4425eac61A7601632eC00d69f75c17",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041088,
          "configDigest": "0x0001c672e2068dcfd156b719ed5c7640e7b434efb7d31fcc0d6dc5b01033d53c"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xD9d3d90D729F50794741Da7a2d54d8B12dC3Da72",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1726554263,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 26,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "3016212468291539606",
          "onRamp": "0x2Ee6D394a244bc38b8CFfff6b7BC72D68C5f1Bc5",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20943942,
          "configDigest": "0x0001fbbc9303453f94fa9dae22a5ffed58775a5c610d068cbf7a3fd26372ec2e"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xDaC3A82Cc5e7C137bF28e6EF4F68f29D66205ffe",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727976923,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 480,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "base",
          "onRamp": "0x56b30A0Dcd8dc87Ec08b80FA09502bAB801fa78e",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041138,
          "configDigest": "0x0001e7d414c133ec584df83a6db021fac7ee42b58e7ec80f646f0658744034f4"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xdB6ebB3ea15595E516dEf4a9875479573a4F19b6",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1731971135,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 110,
        "getNopFeesJuels": 0,
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "2049429975587534727",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "6851250836236890743",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "2049429975587534727"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xdC5b578ff3AFcC4A4a6E149892b9472390b50844",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1730713007,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 41,
        "getNopFeesJuels": "22142750739068384",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "6916147374840168594",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8979579730937917132",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "6916147374840168594"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "RMN",
      "address": "0xdCD48419bD5Cd9d1b097695F2af4Ee125aADF84F",
      "sourceHashes": [
        "0x38e330756b6f0c7e8ff458b8eb57f55c8a4942b33493a95238d164664fe054c9"
      ],
      "sinceTimestamp": 1724945447,
      "values": {
        "$immutable": true,
        "getConfigDetails": {
          "version": 1,
          "blockNumber": 20635146,
          "config": {
            "voters": [
              {
                "blessVoteAddr": "0x23ccf5a7309A9bA850F877313CFF35B690360944",
                "curseVoteAddr": "0x0B59Fa90337B8c1DfcF83A60be93Df36d3022bf2",
                "blessWeight": 1,
                "curseWeight": 1
              },
              {
                "blessVoteAddr": "0xeAA2691fE9C8CEF93CcBc1b4B1E4F3ce02678942",
                "curseVoteAddr": "0x0cb702A32e380e6bBE578d73928db35F27Dfd0d1",
                "blessWeight": 1,
                "curseWeight": 1
              },
              {
                "blessVoteAddr": "0xF5d5840ce35ED1E408B26df1f5Eb74D6641DfAe6",
                "curseVoteAddr": "0x38eA6cEa45D30F9a4Ba1B7fa28CE840135Fe3118",
                "blessWeight": 1,
                "curseWeight": 1
              },
              {
                "blessVoteAddr": "0x9F199d8A106a220D483BD548Ef862b15eCd3BFAc",
                "curseVoteAddr": "0x1DCA94f408BC850524a320988721642D64870B62",
                "blessWeight": 1,
                "curseWeight": 1
              },
              {
                "blessVoteAddr": "0x8749F722d74b2a8d9AF5e4F8011287DA3DC058a1",
                "curseVoteAddr": "0x699E53aba4543726E487771def1781C89Dbd30Cf",
                "blessWeight": 1,
                "curseWeight": 1
              },
              {
                "blessVoteAddr": "0x0bc0fb2faa891D3C48e494BfFd3B0BCD53B99cE5",
                "curseVoteAddr": "0x12119A85235939C6d28182f198AdD16e9C1d7B11",
                "blessWeight": 1,
                "curseWeight": 1
              },
              {
                "blessVoteAddr": "0xd6c690713DC1B3995C200E600D3A00b30299Ae08",
                "curseVoteAddr": "0xC5f450a270DceFdcb990851A280a8A2A3d9403Df",
                "blessWeight": 1,
                "curseWeight": 1
              }
            ],
            "blessWeightThreshold": 2,
            "curseWeightThreshold": 2
          }
        },
        "getCursedSubjectsCount": 0,
        "getPermaBlessedCommitStores": [
          "0xA48269e5c9A234daBfEBE98b82390Be705536d1c",
          "0xd8F93Aff87dC2AEEe0D0b0dF347baDA861BFf802",
          "0xa58818D1acD8D62ab077a1F79606fCb5CE3741b9",
          "0x8705F734b7ac1FC0bb2d16F60c6eFac5Ed646159",
          "0xd2428F8C62fBfEA4b44a703CF11e02D7B0a6Cd99",
          "0xdCF6F209d36d93A26B251D2CFE994bEF02954110",
          "0x6C8b9672B4482A876168b9415bF8bBEA574bF4B9"
        ],
        "getRecordedCurseRelatedOpsCount": 1,
        "isCursed": false,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "RMN 1.5.0"
      }
    },
    {
      "name": "CommitStore",
      "address": "0xdCF6F209d36d93A26B251D2CFE994bEF02954110",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1732563971,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 58,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "3993510008929295315",
          "onRamp": "0x750BFfccf99D1Ad1C38b5FE4Ad83010bbb82E7DF",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21285938,
          "configDigest": "0x00018120eb2325adcd859ef46cf338ffaed7ade794f3997ae31d31531a094ca5"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xddF4b4aF7A9603869C90189EFa8826683D0D234b",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1731970775,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 108,
        "getNopFeesJuels": 0,
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "5406759801798337480",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "6895317321399404724",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "5406759801798337480"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xdE81f1627ef2F6E23A2C0f338623C78c10EA57AC",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1732124543,
      "values": {
        "$immutable": true,
        "commitStore": ["0xd2428F8C62fBfEA4b44a703CF11e02D7B0a6Cd99"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xd2428F8C62fBfEA4b44a703CF11e02D7B0a6Cd99",
          "chainSelector": "ethereum",
          "sourceChainSelector": "3849287863852499584",
          "onRamp": "0x00E64619Bb29f7E1d4E1CC9f21ecEA05189fd8ab",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21275959,
          "configDigest": "0x0001b154de4adb86447eba637ca844238af97eaf588f6a23435f7d6c9b38b476"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xdEFeADd30D5BFD403d86245b43e39a73d76423cC",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727350583,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 97,
        "getNopFeesJuels": "109795821696959347",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "5142893604156789321",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8511794098972569593",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "wemix"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xdf615eF8D4C64d0ED8Fd7824BBEd2f6a10245aC9",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727978015,
      "values": {
        "$immutable": true,
        "commitStore": ["0xf7B343A17445F175f2Dd9f5CB29BAf0a8dE75ed3"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xf7B343A17445F175f2Dd9f5CB29BAf0a8dE75ed3",
          "chainSelector": "ethereum",
          "sourceChainSelector": "arbitrum",
          "onRamp": "0x67761742ac8A21Ec4D76CA18cbd701e5A6F3Bef3",
          "prevOffRamp": "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041128,
          "configDigest": "0x0001cfd9647292ba5bf8cfef5c5845fbcbd7ce277638cde79e09b8a370aae0f2"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xdf85c8381954694E74abD07488f452b4c2Cddfb3",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1701287759,
      "values": {
        "$immutable": true,
        "commitStore": ["0x8DC27D621c41a32140e22E2a4dAf1259639BAe04"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x8DC27D621c41a32140e22E2a4dAf1259639BAe04",
          "chainSelector": "ethereum",
          "sourceChainSelector": "base",
          "onRamp": "0xDEA286dc0E01Cb4755650A6CF8d1076b454eA1cb",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 6,
          "blockNumber": 19864163,
          "configDigest": "0x00012962740daef02da7285c238225a40cb978cc657486d178d0248ff43f2f0a"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1701287375,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 33596,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 6840,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 8475,
        "getNopFeesJuels": 10,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "6048353126226522899",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "base"],
        "tokenAddresses": [
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0xCA160D11087E03fd398d40f561cd4768825f4958",
          "0x8BF591Eae535f93a242D5A954d3Cde648b48A5A8",
          "0x1c22531AA9747d76fFF8F0A43b37954ca67d28e0",
          "0xe85411C030fB32A9D8b14Bbbc6CB19417391F711",
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0xc719d010B63E5bbF2C0551872CD5316ED26AcD83",
          "0xB60acD2057067DC9ed8c083f5aa227a244044fD6",
          "0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b",
          "0x38C2a4a7330b22788374B8Ff70BBa513C8D848cA",
          "0x72e364F2ABdC788b7E918bc238B21f109Cd634D7",
          "0x94025780a1aB58868D9B2dBBB775f44b32e8E6e5",
          "0xDBB5Cf12408a3Ac17d668037Ce289f9eA75439D7",
          "0xDcEe70654261AF21C44c093C300eD3Bb97b78192",
          "0x8Fe815417913a93Ea99049FC0718ee1647A2a07c",
          "0x01aaC2b594F7bdBeC740F0F1AA22910EbB4B74Ab",
          "0x482dF7483a52496F4C65AB499966dfcdf4DDFDbc",
          "0x6b5204B0Be36771253Cc38e88012E02B752f0f36",
          "0xc4506022Fb8090774E8A628d5084EED61D9B99Ee",
          "0x341c05c0E9b33C0E38d64de76516b2Ce970bB3BE",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "0x98C6616F1CC0D3E938A16200830DD55663dd7DD3",
          "0x8C0D76C9B18779665475F3E212D9Ca1Ed6A1A0e6",
          "0xc2e660C62F72c2ad35AcE6DB78a616215E2F2222",
          "0x20157DBAbb84e3BBFE68C349d0d44E48AE7B5AD2",
          "0xA544b3F0c46c15F0B2b00ba3D67b56C250287905",
          "0x547213367cfB08ab418E7b54d7883b2C2AA27Fd7",
          "0xAe770d24ec1580A13392E0B71067571351029203",
          "0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C",
          "0x7A56E1C57C7475CCf742a1832B028F0456652F97",
          "0xd9D920AA40f578ab794426F5C90F6C731D159DEf",
          "0x54EE8A49155F701F0d5Ff088CD36fbBF1a5B9f44",
          "0x08d23468A467d2bb86FaE0e32F247A26C7E2e994"
        ],
        "tokenPools": [
          "0x57D3bb46aF4A9b210FAE046796013090D428475F",
          "0xcd196D3905AfA0eCB4e0e62C2D7d6c52f9C73526",
          "0x2dd317E7e36544C5222818F228d607c209517470",
          "0x123ed44f3B863a684437Ebf18F8a744c250Ee5cA",
          "0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4",
          "0xA81f4AB595dE5C14759245DE5ce9899D380FeFda",
          "0xA82A87a9b6550e89dd8a7C8a1E3e421974eaf858",
          "0x0C291Ae31730901515e5C46406A6ba2d88c1f4aA",
          "0x8272dbBA30f14900b22b4bfC8DB4E88B02bA413a",
          "0xb854536206EB6C1013b1642b576196E5EF19D7BA",
          "0x6ce8b799002BbECc7df94c18BF150B3b0E4A28F4",
          "0x8BcD7e48Dd2104ed83eb1CE0c6E7610604AE9062",
          "0x9797E886EDe987AEf6A62885dFD6CcA885D828E6",
          "0xdCa0A2341ed5438E06B9982243808A76B9ADD6d0",
          "0x2764910B500689BbC9DB16c7AD61c6DD32FDE73B",
          "0x4C3aEe10334461F1f33c0A8843424de3F8fb7709",
          "0x0DAFed8dAF42040dB2c6227ca2AEB14D9C8B2602",
          "0x6452d693860ab7e18fC5858C05980F63d93F37a6",
          "0x0238d2C272f17CF11AEDB08CDE515d56ED25E2E4",
          "0xcd69c117bf91Fc57d5fC237dFAbA5f17B5322733",
          "0x69c24c970B65e22Ac26864aF10b2295B7d78f93A",
          "0xeaE89E53B8317CaB04165F5323285252D5669B73",
          "0xF84Bf7D614F3138D805186C497995d4eD315fA72",
          "0xa96787DCe9Df7BF7bB033E39777bd108E29D349b",
          "0xf5224EfD7Ea9edFa6b6e06964084b92426DCdE99",
          "0xC456EaE992e4f2925E3F75Ac4809dF387756CD29",
          "0x82Df5c453e854CFaD64EA3f16497B5c5b9DB012B",
          "0xd72F7010f0Fa621aB0869e61e9bb4e3cC887c66c",
          "0x66D40E0D2819a2264B2a61f5DD578573B9dedCEc",
          "0xd8f734c938200BA294d0De5B555E8ff77d66c351",
          "0x80Cc104119901fd66088C9a8219E50D9547dE2d4",
          "0x2c5C39F515277E64D96C28f3fc49Ad1d6a25B5B4",
          "0xa35304aA2D659e5E06A768fEc4Af3B443916C215"
        ],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xE41677500B425999cB4133950ca3aB79eA7470a6",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1730712935,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 31,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "6916147374840168594",
          "onRamp": "0x02b60267bceeaFDC45005e0Fa0dd783eFeBc9F1b",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21139957,
          "configDigest": "0x0001594fe2fe534bd31f6ee4ecaa9450eba6f0c182f1705f4c3d0919931d7c22"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "ManyChainMultiSig",
      "address": "0xE53289F32c8E690b7173aA33affE9B6B0CB0012F",
      "template": "transporter/ManyChainMultiSig",
      "sourceHashes": [
        "0x15b33604a10bda5235da68c98629cc8246b96e86c931a23c296ae08f1eb691cb"
      ],
      "ignoreInWatchMode": ["getRootMetadata", "getRoot", "getOpCount"],
      "sinceTimestamp": 1689096911,
      "values": {
        "$immutable": true,
        "getConfig": {
          "signers": [
            {
              "addr": "0x06e5891D9b2Ee77740355A309BAF49caaB672f98",
              "index": 0,
              "group": 4
            },
            {
              "addr": "0x14a8f3B302Bbfa7F2f2AC2F4515548370bc7bAdC",
              "index": 1,
              "group": 4
            },
            {
              "addr": "0x1c6460cfe32916196f6977b5442b0F98A826D880",
              "index": 2,
              "group": 2
            },
            {
              "addr": "0x20a446033409CeB9c541A89b2B4F114d79Aa1840",
              "index": 3,
              "group": 3
            },
            {
              "addr": "0x36FdBDA6085d4DFA63Da90839432dDe9373970F0",
              "index": 4,
              "group": 2
            },
            {
              "addr": "0x41eAdbc688797a02bfaBE48472995833489ce69D",
              "index": 5,
              "group": 1
            },
            {
              "addr": "0x480496c0884D61F2f56707Adb11697F8018898c2",
              "index": 6,
              "group": 1
            },
            {
              "addr": "0x56B167deCD5fC4E3Bbc07B3B4e1F30e74534F9dd",
              "index": 7,
              "group": 4
            },
            {
              "addr": "0x6bfBf6BC4bc5CD20768dAA6F58f0743bAFf2e5f4",
              "index": 8,
              "group": 4
            },
            {
              "addr": "0x7052cB84079905400ea52B635cAb6a275fDA8823",
              "index": 9,
              "group": 1
            },
            {
              "addr": "0x70f498A0AD8a17fC853fcb8eDbE31Fbce71173E6",
              "index": 10,
              "group": 3
            },
            {
              "addr": "0x745B9329ccF53556e3C5f1fD1E4e9D0E91Ad2514",
              "index": 11,
              "group": 2
            },
            {
              "addr": "0x776D5B14ef1D5C58B0d48b53114f2Aa0faccB307",
              "index": 12,
              "group": 2
            },
            {
              "addr": "0x803CBD1e4d722eCf8247c6c9CDab4fC87DBAf429",
              "index": 13,
              "group": 3
            },
            {
              "addr": "0xa42c8570771240D1e2F3211064a7C7472Cc05b7D",
              "index": 14,
              "group": 4
            },
            {
              "addr": "0xAe735fd5e74887064DFf99C637f291caE5485A75",
              "index": 15,
              "group": 2
            },
            {
              "addr": "0xE062e7D123AC8dF480C56147f911144F55C10f88",
              "index": 16,
              "group": 3
            }
          ],
          "groupQuorums": [
            3, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ],
          "groupParents": [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0
          ]
        },
        "getOpCount": 1634,
        "getRoot": {
          "root": "0x1436f41821f52f6fe546734d343d2ec53c85bf89634d588bc3ffa0820cb7746e",
          "validUntil": 1734235210
        },
        "getRootMetadata": {
          "chainId": 1,
          "multiSig": "0xE53289F32c8E690b7173aA33affE9B6B0CB0012F",
          "preOpCount": 1633,
          "postOpCount": 1634,
          "overridePreviousRoot": false
        },
        "MAX_NUM_SIGNERS": 200,
        "NUM_GROUPS": 32,
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "RouterOld",
      "address": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
      "template": "transporter/RouterV1_0_0",
      "sourceHashes": [
        "0xa94cfe197937dba7daa80daaa739c4f88fbd91f326e45ade5b3b3c0f23cdc9d5"
      ],
      "sinceTimestamp": 1688661659,
      "values": {
        "$immutable": true,
        "getArmProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
        "getWrappedNative": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "MAX_RET_BYTES": 132,
        "offRamps": [],
        "onRamps": {
          "3734403246176062136": "0x0000000000000000000000000000000000000000",
          "6433500567565415381": "0x0000000000000000000000000000000000000000",
          "4051577828743386545": "0x0000000000000000000000000000000000000000",
          "4949039107694359620": "0x0000000000000000000000000000000000000000",
          "11344663589394136015": "0x0000000000000000000000000000000000000000",
          "15971525489660198786": "0x0000000000000000000000000000000000000000"
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "Router 1.0.0"
      },
      "derivedName": "Router"
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xE8af3b68eDfFf65Ce48648009982380701f09B92",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1717183115,
      "values": {
        "$immutable": true,
        "commitStore": ["0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e",
          "chainSelector": "ethereum",
          "sourceChainSelector": "mode",
          "onRamp": "0xbD5F9C193a7fEF5D578C55Ddfe4d08d6BCc15648",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20020991,
          "configDigest": "0x000199913a98f9c77db76d84154ab452ea930b5006aa347605a27d79012f8d56"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xE93ec2A57e38C8541c893348cCafEAB01F7D47d4",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1710866867,
      "values": {
        "$immutable": true,
        "commitStore": ["0x118a9389960F86390A4F14ce4C95D6ff076C6bFC"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x118a9389960F86390A4F14ce4C95D6ff076C6bFC",
          "chainSelector": "ethereum",
          "sourceChainSelector": "gnosis",
          "onRamp": "0x0F246651F1c2275B4E14d8ae166D1fd3Af05c405",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 4,
          "blockNumber": 19611170,
          "configDigest": "0x00015a84bd4c293e0aeabc615f14bd7aadf65332baf9ddf83f7d5a1826d3da77"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xeA6d4a24B262aB3e61a8A62f018A30beCD086f82",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727415563,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 8,
        "getNopFeesJuels": 3,
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "7264351850409363825",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0x466a078d17e3706a9414ACc48029EE9Bae4C9b65",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8975874544082727209",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x466a078d17e3706a9414ACc48029EE9Bae4C9b65",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "mode"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xEd5bE9508ae56531cc0EDe6A3bD588Eb9E2e3cfa",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1715889491,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 43,
        "getNopFeesJuels": 6,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8473851210096107215",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "celo"],
        "tokenAddresses": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "tokenPools": ["0xC2291992A08eBFDfedfE248F2CCD34Da63570DF4"],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d",
      "template": "transporter/OffRampV1",
      "sourceHashes": [
        "0x3338bd5c98f2d0c2daccf1d67f82534a0b6d6ffd4c6f9badb508924d8df24f09"
      ],
      "sinceTimestamp": 1701287843,
      "values": {
        "$immutable": true,
        "commitStore": ["0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749"],
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 28800,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxNumberOfTokensPerMsg": 1,
          "maxDataBytes": 30000,
          "maxPoolReleaseOrMintGas": 200000
        },
        "getStaticConfig": {
          "commitStore": "0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749",
          "chainSelector": "ethereum",
          "sourceChainSelector": "arbitrum",
          "onRamp": "0xCe11020D56e5FDbfE46D9FC3021641FfbBB5AdEE",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 6,
          "blockNumber": 19864128,
          "configDigest": "0x0001e7ed5d54a80493d22c17c148d7c20f6b349cf00ab4a5effec54aebdb7084"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xF3AC96642F9BA5De3BBc864d609E3F534dD3b7F9",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1731970715,
      "values": {
        "$immutable": true,
        "commitStore": ["0xa58818D1acD8D62ab077a1F79606fCb5CE3741b9"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0xa58818D1acD8D62ab077a1F79606fCb5CE3741b9",
          "chainSelector": "ethereum",
          "sourceChainSelector": "5406759801798337480",
          "onRamp": "0xB1C908A7CF6f5FB1ed18a73aD60ffF9CC8276eC1",
          "prevOffRamp": "0x0000000000000000000000000000000000000000",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21240426,
          "configDigest": "0x0001873ea9c4c2a6f9733e602a0ad97633627af21b1682bbc6419d3731d9f75c"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOffRamp",
      "address": "0xF4468E56179e6EF59d6f5B133D9355AAD91Ea9ae",
      "template": "transporter/OfframpV2",
      "sourceHashes": [
        "0x698458a99b1fa622eec8cacbecdd3e68d5473c71a13a76cc881f1a9040ffa890"
      ],
      "sinceTimestamp": 1727346827,
      "values": {
        "$immutable": true,
        "commitStore": ["0x52275dC17f9eD92230C8C4d57fD36d128701f694"],
        "getAllRateLimitTokens": { "sourceTokens": [], "destTokens": [] },
        "getDynamicConfig": {
          "permissionLessExecutionThresholdSeconds": 3600,
          "maxDataBytes": 30000,
          "maxNumberOfTokensPerMsg": 1,
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getStaticConfig": {
          "commitStore": "0x52275dC17f9eD92230C8C4d57fD36d128701f694",
          "chainSelector": "ethereum",
          "sourceChainSelector": "blast",
          "onRamp": "0xEa8112530cA10945C2aA976f8F615582Af9B70fa",
          "prevOffRamp": "0x1a904DbbaDdE629a1460e2F6E2E485Ce06Ed7599",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x0000000000000000000000000000000000000000",
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20989829,
          "configDigest": "0x0001ba53fa669eea6f0e44ac46625cbdb8ccd0a960c98b3584974a499f2d898d"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "typeAndVersion": "EVM2EVMOffRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xf50B9A46C394bD98491ce163d420222d8030F6F0",
      "template": "transporter/OnRampV3",
      "sourceHashes": [
        "0x0ae770c7c5e476e676ed2fed06f93f96e0b4ed9b58b6a627483af05a17f92157"
      ],
      "ignoreInWatchMode": [
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools",
        "getExpectedNextSequenceNumber"
      ],
      "sinceTimestamp": 1727748911,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 300000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000,
          "defaultTokenFeeUSDCents": 50,
          "defaultTokenDestGasOverhead": 90000,
          "enforceOutOfOrder": false
        },
        "getExpectedNextSequenceNumber": 27,
        "getNopFeesJuels": "126058583245307176",
        "getStaticConfig": {
          "linkToken": "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "chainSelector": "5009297550715157269",
          "destChainSelector": "465200170687744372",
          "defaultTxGasLimit": 200000,
          "maxNopFeesJuels": "20000000000000000000000",
          "prevOnRamp": "0xF538dA6c673A30338269655f4e019B71ba58CFd4",
          "rmnProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81",
          "tokenAdminRegistry": "0xb22764f98dD05c789929716D677382Df22C05Cb6"
        },
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "8541954876373105184",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0xF538dA6c673A30338269655f4e019B71ba58CFd4",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "gnosis"],
        "tokenPools": [],
        "typeAndVersion": "EVM2EVMOnRamp 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "EVM2EVMOnRamp",
      "address": "0xF538dA6c673A30338269655f4e019B71ba58CFd4",
      "template": "transporter/OnRampV1",
      "sourceHashes": [
        "0xe8da6f84753c543cd6eb5135d9c0d9e57ed67e74118a8e019b80ff156bd6ead1"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getNopFeesJuels",
        "linkAvailableForPayment",
        "tokenAddresses",
        "tokenPools"
      ],
      "sinceTimestamp": 1710865355,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "router": "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
          "maxNumberOfTokensPerMsg": 1,
          "destGasOverhead": 350000,
          "destGasPerPayloadByte": 16,
          "destDataAvailabilityOverheadGas": 0,
          "destGasPerDataAvailabilityByte": 16,
          "destDataAvailabilityMultiplierBps": 0,
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad",
          "maxDataBytes": 30000,
          "maxPerMsgGasLimit": 3000000
        },
        "getExpectedNextSequenceNumber": 45,
        "getNopFeesJuels": 8,
        "getTokenLimitAdmin": "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B",
        "linkAvailableForPayment": "7239507343604429084",
        "linkToken": ["0x514910771AF9Ca656af840dff83E8264EcF986CA"],
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "staticConfigAddresses": [
          "0x0000000000000000000000000000000000000000",
          "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        ],
        "staticConfigChains": ["ethereum", "gnosis"],
        "tokenAddresses": ["0x0AA1e96D2a46Ec6beB2923dE1E61Addf5F5f1dce"],
        "tokenPools": ["0xa17698199466E71bAFC31F226db341B7840701E7"],
        "typeAndVersion": "EVM2EVMOnRamp 1.2.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xf7B343A17445F175f2Dd9f5CB29BAf0a8dE75ed3",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727977991,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 412,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "arbitrum",
          "onRamp": "0x67761742ac8A21Ec4D76CA18cbd701e5A6F3Bef3",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 21041129,
          "configDigest": "0x0001cc4f112c65988d9a3dcfc6d8c7d0c3833bd1e6ea452c5cc7ee7ef9af5280"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    },
    {
      "name": "CommitStore",
      "address": "0xFa94e57b12b6C45A3aD3CBb9451ba99a997eb210",
      "template": "transporter/CommitStoreV1",
      "sourceHashes": [
        "0x1187294715ed2abab47b9649c53548ef616fede9edb55b7fc7e25915524623a5"
      ],
      "ignoreInWatchMode": [
        "getExpectedNextSequenceNumber",
        "getLatestPriceEpochAndRound"
      ],
      "sinceTimestamp": 1727715311,
      "values": {
        "$immutable": true,
        "getDynamicConfig": {
          "priceRegistry": "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"
        },
        "getExpectedNextSequenceNumber": 34,
        "getLatestPriceEpochAndRound": 0,
        "getStaticConfig": {
          "chainSelector": "ethereum",
          "sourceChainSelector": "6422105447186081193",
          "onRamp": "0xc422a9AE3341dDDa7296F55D42C954B2faA03013",
          "armProxy": "0x411dE17f12D1A34ecC7F45f49844626267c75e81"
        },
        "isUnpausedAndNotCursed": true,
        "latestConfigDetails": {
          "configCount": 2,
          "blockNumber": 20943954,
          "configDigest": "0x0001a8dc51b9e54e02ca930cf0b443788bc071598eeef5acba62c033cb0018c6"
        },
        "latestConfigDigestAndEpoch": {
          "scanLogs": true,
          "configDigest": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "epoch": 0
        },
        "owner": "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449",
        "paused": false,
        "priceRegistry": ["0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad"],
        "typeAndVersion": "CommitStore 1.5.0"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "465200170687744372": "gnosis",
            "5009297550715157269": "ethereum",
            "3734403246176062136": "optimism",
            "4949039107694359620": "arbitrum",
            "4051577828743386545": "polygon",
            "6433500567565415381": "avalanche",
            "5142893604156789321": "wemix",
            "3719320017875267166": "kroma",
            "1346049177634351622": "celo",
            "7264351850409363825": "mode",
            "11344663589394136015": "bnb",
            "15971525489660198786": "base",
            "4411394078118774322": "blast",
            "8805746078405598895": "metis"
          }
        }
      ]
    }
  ],
  "eoas": [
    { "address": "0x0000000000000000000000000000000000000000" },
    { "address": "0x00E64619Bb29f7E1d4E1CC9f21ecEA05189fd8ab" },
    { "address": "0x0129211377B414Cad2c624C40c342FAffB3B3F0F" },
    { "address": "0x014ABcfDbCe9F67d0Df34574664a6C0A241Ec03A" },
    { "address": "0x02b60267bceeaFDC45005e0Fa0dd783eFeBc9F1b" },
    { "address": "0x06e5891D9b2Ee77740355A309BAF49caaB672f98" },
    { "address": "0x0B59Fa90337B8c1DfcF83A60be93Df36d3022bf2" },
    { "address": "0x0bc0fb2faa891D3C48e494BfFd3B0BCD53B99cE5" },
    { "address": "0x0Bf40b034872D0b364f3DCec04C7434a4Da1C8d9" },
    { "address": "0x0cb702A32e380e6bBE578d73928db35F27Dfd0d1" },
    { "address": "0x0F246651F1c2275B4E14d8ae166D1fd3Af05c405" },
    { "address": "0x12119A85235939C6d28182f198AdD16e9C1d7B11" },
    { "address": "0x124BA7e2188074335A0e9b12B449AD5781A73D60" },
    { "address": "0x146CAe49Dbe1b1D1968fc4652814740706548952" },
    { "address": "0x14a8f3B302Bbfa7F2f2AC2F4515548370bc7bAdC" },
    { "address": "0x162A8E51E69D72a4bA462220aE9A2E94e44d753F" },
    { "address": "0x180159135c9b93C59d16eA1A690e465D22c5EB67" },
    { "address": "0x190bcE84CF2d500B878966F4Cf98a50d78f2675E" },
    { "address": "0x1c6460cfe32916196f6977b5442b0F98A826D880" },
    { "address": "0x1DAcBae00c779913e6E9fc1A3323FbA4847ba53C" },
    { "address": "0x1DCA94f408BC850524a320988721642D64870B62" },
    { "address": "0x20a446033409CeB9c541A89b2B4F114d79Aa1840" },
    { "address": "0x21Ac2a1d6ee437FB11a6F1933C5D1d22c714B922" },
    { "address": "0x23ccf5a7309A9bA850F877313CFF35B690360944" },
    { "address": "0x27C96A8a2f70a8408aD6c620717a3bDaA54bb10b" },
    { "address": "0x28cCF73F7982c1786b84e243FFbD47F4fB8ae43d" },
    { "address": "0x2b73763722378AB2013CB0877946f69fC3727Fd8" },
    { "address": "0x2B88575011C5E11389ddB50D28d31C7d06B352A0" },
    { "address": "0x2bbB172cD88dCAD64CBE762dcC53E6f96a17d1D6" },
    { "address": "0x2CD36141d4AEFb8e57209770b965043Ed3129D9F" },
    { "address": "0x2Ee6D394a244bc38b8CFfff6b7BC72D68C5f1Bc5" },
    { "address": "0x31e16F375531F8d77E027ff935e1114eD62D797b" },
    { "address": "0x326377a6B92eC69AcbbFe2De1eB1d7c9008E4C89" },
    { "address": "0x35C724666ba31632A56Bad4390eb69f206ab60C7" },
    { "address": "0x36FdBDA6085d4DFA63Da90839432dDe9373970F0" },
    { "address": "0x38eA6cEa45D30F9a4Ba1B7fa28CE840135Fe3118" },
    { "address": "0x3B80Fe300c9A611abA0496e2543B66Ff7bD4B9e9" },
    { "address": "0x3C6cE61b611e3b41289c2FAFA5BC4e150dD88dE3" },
    { "address": "0x41eAdbc688797a02bfaBE48472995833489ce69D" },
    { "address": "0x43640F208956c7D49e04F40FF95dF818643B76aA" },
    { "address": "0x480496c0884D61F2f56707Adb11697F8018898c2" },
    { "address": "0x48A094F7A354d8faD7263EA2a82391d105DF6628" },
    { "address": "0x4e509C60b3e916644dE441298595FeD12C4AC926" },
    { "address": "0x55183Db1d2aE0b63e4c92A64bEF2CBfc2032B127" },
    { "address": "0x56B167deCD5fC4E3Bbc07B3B4e1F30e74534F9dd" },
    { "address": "0x56b30A0Dcd8dc87Ec08b80FA09502bAB801fa78e" },
    { "address": "0x570F41d83b1031d382F641B9a532A8D7CBd7a695" },
    { "address": "0x5A5A8C7E8448484Cf3458d7f426876E79c529f41" },
    { "address": "0x5bD3a90E94bB8aA6fE6cCF494e292F5F707B92d6" },
    { "address": "0x5C33Bf560f29e04dF8A666493aAD8E47eEa9B1c8" },
    { "address": "0x67761742ac8A21Ec4D76CA18cbd701e5A6F3Bef3" },
    { "address": "0x6924E54339C7f28730dBB4B842a7FE86ED01Ecf7" },
    { "address": "0x699E53aba4543726E487771def1781C89Dbd30Cf" },
    { "address": "0x69AbB6043BBEA2467f41CCD0144d1b3b4ECd20f4" },
    { "address": "0x6B0f508B8cbeF970fAF9E8a28b9b4C6F1FD3afae" },
    { "address": "0x6bfBf6BC4bc5CD20768dAA6F58f0743bAFf2e5f4" },
    { "address": "0x6c6Dd4fCa5A7B2F11AA3057AB573DD8878C76C5e" },
    { "address": "0x7052cB84079905400ea52B635cAb6a275fDA8823" },
    { "address": "0x70C2Ddc97c4fAea760027d45E5de4D1E2ad2b9A5" },
    { "address": "0x70f498A0AD8a17fC853fcb8eDbE31Fbce71173E6" },
    { "address": "0x745B9329ccF53556e3C5f1fD1E4e9D0E91Ad2514" },
    { "address": "0x750BFfccf99D1Ad1C38b5FE4Ad83010bbb82E7DF" },
    { "address": "0x776D5B14ef1D5C58B0d48b53114f2Aa0faccB307" },
    { "address": "0x7d2aF78868993a5a86676BA639eC0412709707D9" },
    { "address": "0x7eFF312905DEdB38Bf8f07BEFaDfF96376154374" },
    { "address": "0x803CBD1e4d722eCf8247c6c9CDab4fC87DBAf429" },
    { "address": "0x8749F722d74b2a8d9AF5e4F8011287DA3DC058a1" },
    { "address": "0x9079410666ED02725ee9d148398Cee26397c2A36" },
    { "address": "0x925d7Ea0ADe586DBFd56a942bb297286cE428C79" },
    { "address": "0x9453E18f03A36E2A2c70598De520bD24434D2d1D" },
    { "address": "0x9d0D65cd6e46B86f88fF021d8f5EE58fe8ce2882" },
    { "address": "0x9db257ae83968F10f6A50009587BdA2fCedFDd5A" },
    { "address": "0x9E2FD656eFffF4cbAc9fd45C017D4DD8fBC550E5" },
    { "address": "0x9E318D85D42F7e5b8B4fb2fB2d706C4c04D1549e" },
    { "address": "0x9F199d8A106a220D483BD548Ef862b15eCd3BFAc" },
    { "address": "0xa18BC8b64a863DB34199F7e59F3A3d051ABa413d" },
    { "address": "0xA3177f64efE98422E782bC17BE7971F01187B7cF" },
    { "address": "0xa35B7219521134cAF52DccAD44d604335b64a4fB" },
    { "address": "0xa42c8570771240D1e2F3211064a7C7472Cc05b7D" },
    { "address": "0xA8030F40032E88552519EDFc448523d677B29661" },
    { "address": "0xAe735fd5e74887064DFf99C637f291caE5485A75" },
    { "address": "0xB1C908A7CF6f5FB1ed18a73aD60ffF9CC8276eC1" },
    { "address": "0xbD5F9C193a7fEF5D578C55Ddfe4d08d6BCc15648" },
    { "address": "0xBD9bf9AA79adF083BB7100848Eb15F4e8282E27e" },
    { "address": "0xC19Beb494BA0bC57e5F967706A24bAFb6Da7BCD7" },
    { "address": "0xc319484eF6cdA3a7f4D470e660b343FB569e9A1e" },
    { "address": "0xc422a9AE3341dDDa7296F55D42C954B2faA03013" },
    { "address": "0xC5f450a270DceFdcb990851A280a8A2A3d9403Df" },
    { "address": "0xc90788d9168f83dec518Ab7c0445Ad1Ec53554D7" },
    { "address": "0xCe11020D56e5FDbfE46D9FC3021641FfbBB5AdEE" },
    { "address": "0xD0701FcC7818c31935331B02Eb21e91eC71a1704" },
    { "address": "0xD1B33FAd3fF7a793EE39473f865630e3b6371086" },
    { "address": "0xD2a9F49Aa973fDd42Edbb24E01Baa8163ac3141c" },
    { "address": "0xd3094f770579AFd66711847cE9E9C42D10BA2264" },
    { "address": "0xD3Bd3D50E3593AFE8B5A50C1B3F83c21D64c10d2" },
    { "address": "0xd3E2da792E806556517124f03F12e557045951E7" },
    { "address": "0xd6c690713DC1B3995C200E600D3A00b30299Ae08" },
    { "address": "0xd844665361adBa29CD1259ebDe9b547ECe2ab0E7" },
    { "address": "0xDEA286dc0E01Cb4755650A6CF8d1076b454eA1cb" },
    { "address": "0xdF5394c57A0570ECe45DE0c0fA2e722A672B9198" },
    { "address": "0xE062e7D123AC8dF480C56147f911144F55C10f88" },
    { "address": "0xE43f9eD3146d76E627C2504E5140005027992De6" },
    { "address": "0xE4C51Dc01A4E0aB14c7a7a2ed1655E9CF8A3E698" },
    { "address": "0xe8784c29c583C52FA89144b9e5DD91Df2a1C2587" },
    { "address": "0xEa8112530cA10945C2aA976f8F615582Af9B70fa" },
    { "address": "0xeAA2691fE9C8CEF93CcBc1b4B1E4F3ce02678942" },
    { "address": "0xECDd1737E54530D7b05Ad309B9B365CDc0084FD0" },
    { "address": "0xF5d5840ce35ED1E408B26df1f5Eb74D6641DfAe6" },
    { "address": "0xFd77c53AA4eF0E3C01f5Ac012BF7Cc7A3ECf5168" }
  ],
  "abis": {
    "0x01346721418045A6c07b71052e452eF8615e9084": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x0aB48c500AbD8392620c3C4E4fdD5d7063C44554": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x0af338F0E314c7551bcE0EF516d46d855b0Ee395": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x0d26BaE784c8986502E072F4e73B6168e2052045": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x0f89C7c0586536B618e0469402e1c8234bc52959": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x117ec8aD107976e1dBCc21717ff78407Bc36aADc": [
      "error CallReverted(bytes error)",
      "error GroupTreeNotWellFormed()",
      "error InsufficientSigners()",
      "error InvalidSigner()",
      "error MissingConfig()",
      "error OutOfBoundsGroup()",
      "error OutOfBoundsGroupQuorum()",
      "error OutOfBoundsNumOfSigners()",
      "error PendingOps()",
      "error PostOpCountReached()",
      "error ProofCannotBeVerified()",
      "error RootExpired()",
      "error SignedHashAlreadySeen()",
      "error SignerGroupsLengthMismatch()",
      "error SignerInDisabledGroup()",
      "error SignersAddressesMustBeStrictlyIncreasing()",
      "error ValidUntilHasAlreadyPassed()",
      "error WrongChainId()",
      "error WrongMultiSig()",
      "error WrongNonce()",
      "error WrongPostOpCount()",
      "error WrongPreOpCount()",
      "event ConfigSet(tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents) config, bool isRootCleared)",
      "event NewRoot(bytes32 indexed root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata)",
      "event OpExecuted(uint40 indexed nonce, address to, bytes data, uint256 value)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function MAX_NUM_SIGNERS() view returns (uint8)",
      "function NUM_GROUPS() view returns (uint8)",
      "function acceptOwnership()",
      "function execute(tuple(uint256 chainId, address multiSig, uint40 nonce, address to, uint256 value, bytes data) op, bytes32[] proof)",
      "function getConfig() view returns (tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents))",
      "function getOpCount() view returns (uint40)",
      "function getRoot() view returns (bytes32 root, uint32 validUntil)",
      "function getRootMetadata() view returns (tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot))",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setConfig(address[] signerAddresses, uint8[] signerGroups, uint8[32] groupQuorums, uint8[32] groupParents, bool clearRoot)",
      "function setRoot(bytes32 root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata, bytes32[] metadataProof, tuple(uint8 v, bytes32 r, bytes32 s)[] signatures)",
      "function transferOwnership(address newOwner)"
    ],
    "0x118a9389960F86390A4F14ce4C95D6ff076C6bFC": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x15a9D79d6b3485F70bF82bC49dDD1fcB37A7149c": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x1A3D582d1aB9CF630b44B91C54CBD16Ca7e35a8d": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x1a904DbbaDdE629a1460e2F6E2E485Ce06Ed7599": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x1B960560324c03db5565545B353198fdd07A195d": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x26a10137A54F4Ea01D20758Ac5AdBf9326340Fc3": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x2aa101BF99CaeF7fc1355D4c493a1fe187A007cE": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x2ED1A552C03f843a2Db7DE10AD390d24bb66CEE0": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x2F2A3e36CE5Fb0924C414BEB1D98B531Cdf17e0B": [
      "error CallReverted(bytes error)",
      "error GroupTreeNotWellFormed()",
      "error InsufficientSigners()",
      "error InvalidSigner()",
      "error MissingConfig()",
      "error OutOfBoundsGroup()",
      "error OutOfBoundsGroupQuorum()",
      "error OutOfBoundsNumOfSigners()",
      "error PendingOps()",
      "error PostOpCountReached()",
      "error ProofCannotBeVerified()",
      "error RootExpired()",
      "error SignedHashAlreadySeen()",
      "error SignerGroupsLengthMismatch()",
      "error SignerInDisabledGroup()",
      "error SignersAddressesMustBeStrictlyIncreasing()",
      "error ValidUntilHasAlreadyPassed()",
      "error WrongChainId()",
      "error WrongMultiSig()",
      "error WrongNonce()",
      "error WrongPostOpCount()",
      "error WrongPreOpCount()",
      "event ConfigSet(tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents) config, bool isRootCleared)",
      "event NewRoot(bytes32 indexed root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata)",
      "event OpExecuted(uint40 indexed nonce, address to, bytes data, uint256 value)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function MAX_NUM_SIGNERS() view returns (uint8)",
      "function NUM_GROUPS() view returns (uint8)",
      "function acceptOwnership()",
      "function execute(tuple(uint256 chainId, address multiSig, uint40 nonce, address to, uint256 value, bytes data) op, bytes32[] proof)",
      "function getConfig() view returns (tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents))",
      "function getOpCount() view returns (uint40)",
      "function getRoot() view returns (bytes32 root, uint32 validUntil)",
      "function getRootMetadata() view returns (tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot))",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setConfig(address[] signerAddresses, uint8[] signerGroups, uint8[32] groupQuorums, uint8[32] groupParents, bool clearRoot)",
      "function setRoot(bytes32 root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata, bytes32[] metadataProof, tuple(uint8 v, bytes32 r, bytes32 s)[] signatures)",
      "function transferOwnership(address newOwner)"
    ],
    "0x31f6ab382DDeb9A316Ab61C3945a5292a50a89AB": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x330349112e13232131Da51f9f3b153d825f65e61": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x33276152d082120F5190362e6E5F6783bbCb2B26": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x33417f13DFBC2FfB9e1B43051c3737370F3691a4": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x3455D8E039736944e66e19eAc77a42e8077B07bf": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x35F0ca9Be776E4B38659944c257bDd0ba75F1B8B": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x362A221C3cfd7F992DFE221687323F0BA9BA8187": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x3a129e6C18b23d18BA9E6Aa14Dc2e79d1f91c6c5": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x3Ac0D8fe5b4e8d0a95C507CCd83F6A8d73A8c6b1": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x3B45dd27E0cF84F1af98DEaBDc8f96303475ef58": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x3c672f0f9E73cB7984A5Ab486C7839f84C8EDC09": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x3CB2A81bb8a188C5353CdFa9994ed8666556FC53": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x3d8a95adA63D406ee8232562AbD83CEdb0B90466": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x3df8dAe2d123081c4D5E946E655F7c109B9Dd630": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x411dE17f12D1A34ecC7F45f49844626267c75e81": [
      "constructor(address arm)",
      "error ZeroAddressNotAllowed()",
      "event ARMSet(address arm)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function acceptOwnership()",
      "function getARM() view returns (address)",
      "function owner() view returns (address)",
      "function setARM(address arm)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x418dcbCf229897d0CCf1B8B464Db06C23879FBB4": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x44835bBBA9D40DEDa9b64858095EcFB2693c9449": [
      "constructor(uint256 minDelay, address admin, address[] proposers, address[] executors, address[] cancellers, address[] bypassers)",
      "event BypasserCallExecuted(uint256 indexed index, address target, uint256 value, bytes data)",
      "event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data)",
      "event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "event Cancelled(bytes32 indexed id)",
      "event FunctionSelectorBlocked(bytes4 indexed selector)",
      "event FunctionSelectorUnblocked(bytes4 indexed selector)",
      "event MinDelayChange(uint256 oldDuration, uint256 newDuration)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function ADMIN_ROLE() view returns (bytes32)",
      "function BYPASSER_ROLE() view returns (bytes32)",
      "function CANCELLER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function PROPOSER_ROLE() view returns (bytes32)",
      "function blockFunctionSelector(bytes4 selector)",
      "function bypasserExecuteBatch(tuple(address target, uint256 value, bytes data)[] calls) payable",
      "function cancel(bytes32 id)",
      "function executeBatch(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) payable",
      "function getBlockedFunctionSelectorAt(uint256 index) view returns (bytes4)",
      "function getBlockedFunctionSelectorCount() view returns (uint256)",
      "function getMinDelay() view returns (uint256 duration)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getTimestamp(bytes32 id) view returns (uint256 timestamp)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hashOperationBatch(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) pure returns (bytes32 hash)",
      "function isOperation(bytes32 id) view returns (bool registered)",
      "function isOperationDone(bytes32 id) view returns (bool done)",
      "function isOperationPending(bytes32 id) view returns (bool pending)",
      "function isOperationReady(bytes32 id) view returns (bool ready)",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) returns (bytes4)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function scheduleBatch(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unblockFunctionSelector(bytes4 selector)",
      "function updateDelay(uint256 newDelay)"
    ],
    "0x4545F9a17DA50110632C14704a15d893BF9CBD27": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x466a078d17e3706a9414ACc48029EE9Bae4C9b65": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x4af4B497c998007eF83ad130318eB2b925a79dc8": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x4Cc3D95d9384D3287724B83099f01BC3025702c0": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x4E4003DAFD00eC3B5F17f05950759054051950d6": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x4FB5407d6911DaA0B8bde58A754E7D01CB8b05c5": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x52275dC17f9eD92230C8C4d57fD36d128701f694": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x562a2025E60AA19Aa03Ea41D70ea1FD3286d1D3B": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x569940e02D4425eac61A7601632eC00d69f75c17": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x57b548C9c213EA2bcf60193E3D7fd2d2b53Fb9b3": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x57d6cD9CD44770C807b2763Dbe4CFDA0113dd114": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x5B859E596C4285bf489E1bFa222b97dB431da7eC": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x5EDa6801dBD2bBdbF0401d34c730fa2C3A97C3F4": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x626189C882A80fF0D036d8D9f6447555e81F78E9": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x66598216D8E4d9AFE0F06d525B335b762229842f": [
      "constructor(address router)",
      "error GasLimitTooLow(uint256 minLimit, uint256 gotLimit)",
      "error InsufficientFee(uint256 gotFee, uint256 fee)",
      "error InsufficientMsgValue(uint256 gotAmount, uint256 msgValue)",
      "error InvalidRouter(address router)",
      "error InvalidToken(address gotToken, address expectedToken)",
      "error InvalidTokenAmounts(uint256 gotAmounts)",
      "error TokenAmountNotEqualToMsgValue(uint256 gotAmount, uint256 msgValue)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message)",
      "function ccipSend(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) payable returns (bytes32)",
      "function getFee(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 fee)",
      "function getRouter() view returns (address)",
      "function i_weth() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x66d84fedED0e51aeB47ceD1BB2fc0221Ae8D7C12": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x6751cA96b769129dFE6eB8E349c310deCEDb4e36": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x6868FefbEFDc2B2FB75E6ED216dB1BeC02563D69": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x69eCC4E2D8ea56E2d0a05bF57f4Fd6aEE7f2c284": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x6B4B6359Dd5B47Cdb030E5921456D2a0625a9EbD": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x6C8b9672B4482A876168b9415bF8bBEA574bF4B9": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x70B2b3430c41bA19E20F57Cae23c3C619CbCA65D": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x70C705ff3eCAA04c8c61d581a59a168a1c49c2ec": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x718672076D6d51E4c76142B37bC99E4945d704a3": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x741599d9a5a1bfC40A22f530fbCd85E2718e9F90": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x75d536eED32f4c8Bb39F4B0c992163f5BA49B84e": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x76264869a3eBF51a59FCa5ABa84ee2867c7F190e": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x794aE32b63b8a82a6e2Ec5017bbC6bfbddA5ce96": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x7Afe7088aff57173565F4b034167643AA8b9171c": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D": [
      "constructor(address wrappedNative, address armProxy)",
      "error BadARMSignal()",
      "error FailedToSendValue()",
      "error InsufficientFeeTokenAmount()",
      "error InvalidMsgValue()",
      "error InvalidRecipientAddress(address to)",
      "error OffRampMismatch(uint64 chainSelector, address offRamp)",
      "error OnlyOffRamp()",
      "error UnsupportedDestinationChain(uint64 destChainSelector)",
      "event MessageExecuted(bytes32 messageId, uint64 sourceChainSelector, address offRamp, bytes32 calldataHash)",
      "event OffRampAdded(uint64 indexed sourceChainSelector, address offRamp)",
      "event OffRampRemoved(uint64 indexed sourceChainSelector, address offRamp)",
      "event OnRampSet(uint64 indexed destChainSelector, address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function MAX_RET_BYTES() view returns (uint16)",
      "function acceptOwnership()",
      "function applyRampUpdates(tuple(uint64 destChainSelector, address onRamp)[] onRampUpdates, tuple(uint64 sourceChainSelector, address offRamp)[] offRampRemoves, tuple(uint64 sourceChainSelector, address offRamp)[] offRampAdds)",
      "function ccipSend(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) payable returns (bytes32)",
      "function getArmProxy() view returns (address)",
      "function getFee(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 fee)",
      "function getOffRamps() view returns (tuple(uint64 sourceChainSelector, address offRamp)[])",
      "function getOnRamp(uint64 destChainSelector) view returns (address)",
      "function getSupportedTokens(uint64 chainSelector) view returns (address[])",
      "function getWrappedNative() view returns (address)",
      "function isChainSupported(uint64 chainSelector) view returns (bool)",
      "function isOffRamp(uint64 sourceChainSelector, address offRamp) view returns (bool)",
      "function owner() view returns (address)",
      "function recoverTokens(address tokenAddress, address to, uint256 amount)",
      "function routeMessage(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message, uint16 gasForCallExactCheck, uint256 gasLimit, address receiver) returns (bool success, bytes retData, uint256 gasUsed)",
      "function setWrappedNative(address wrappedNative)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0x82b8A19497fA25575f250a3DcFfCD2562B575A2e": [
      "constructor(address target)"
    ],
    "0x831097033C88c82a7F1897b168Aa88cC44540C8f": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x83F3DA5aa2C7534d694B0acde7624573c830250D": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x86B47d8411006874eEf8E4584BdFD7be8e5549d1": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x8705F734b7ac1FC0bb2d16F60c6eFac5Ed646159": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x87c55D48DF6EF7B08153Ab079e76bFEcbb793D75": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x8B3eEed4948684c3ec1bb60967820f40285018B8": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x8c9b2Efb7c64C394119270bfecE7f54763b958Ad": [
      "constructor(address[] priceUpdaters, address[] feeTokens, uint32 stalenessThreshold)",
      "error ChainNotSupported(uint64 chain)",
      "error InvalidStalenessThreshold()",
      "error OnlyCallableByUpdaterOrOwner()",
      "error StaleGasPrice(uint64 destChainSelector, uint256 threshold, uint256 timePassed)",
      "error StaleTokenPrice(address token, uint256 threshold, uint256 timePassed)",
      "error TokenNotSupported(address token)",
      "event FeeTokenAdded(address indexed feeToken)",
      "event FeeTokenRemoved(address indexed feeToken)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PriceUpdaterRemoved(address indexed priceUpdater)",
      "event PriceUpdaterSet(address indexed priceUpdater)",
      "event UsdPerTokenUpdated(address indexed token, uint256 value, uint256 timestamp)",
      "event UsdPerUnitGasUpdated(uint64 indexed destChain, uint256 value, uint256 timestamp)",
      "function acceptOwnership()",
      "function applyFeeTokensUpdates(address[] feeTokensToAdd, address[] feeTokensToRemove)",
      "function applyPriceUpdatersUpdates(address[] priceUpdatersToAdd, address[] priceUpdatersToRemove)",
      "function convertTokenAmount(address fromToken, uint256 fromTokenAmount, address toToken) view returns (uint256)",
      "function getDestinationChainGasPrice(uint64 destChainSelector) view returns (tuple(uint224 value, uint32 timestamp))",
      "function getFeeTokens() view returns (address[])",
      "function getPriceUpdaters() view returns (address[])",
      "function getStalenessThreshold() view returns (uint128)",
      "function getTokenAndGasPrices(address token, uint64 destChainSelector) view returns (uint224 tokenPrice, uint224 gasPriceValue)",
      "function getTokenPrice(address token) view returns (tuple(uint224 value, uint32 timestamp))",
      "function getTokenPrices(address[] tokens) view returns (tuple(uint224 value, uint32 timestamp)[])",
      "function getValidatedTokenPrice(address token) view returns (uint224)",
      "function owner() view returns (address)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function updatePrices(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates)"
    ],
    "0x8DC27D621c41a32140e22E2a4dAf1259639BAe04": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x91D25A56Db77aD5147437d8B83Eb563D46eBFa69": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x925228D7B82d883Dde340A55Fe8e6dA56244A22C": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x948306C220Ac325fa9392A6E601042A3CD0b480d": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x95deB0c4bB9168202d50E874865f9A1842b82D64": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x9a3Ed7007809CfD666999e439076B4Ce4120528D": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0x9B14AE850653dD0E30fBC93ab7f77D0d638a365B": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0x9B2EEd6A1e16cB50Ed4c876D2dD69468B21b7749": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x9B9Ec8E26955c034828bBD78E22ab258d983dCdb": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x9D93D536Ced80871Bf3DA5Bb47bAedE62c794f8A": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0x9f592c28590595F3F78a8881E8Dbb9984ed705cD": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xA4755Cd68CA2092447c8c842659a2931f9110320": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xA48269e5c9A234daBfEBE98b82390Be705536d1c": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xa4d264470a67D9f6682EE12Bdc9c35Df44e3F194": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xa58818D1acD8D62ab077a1F79606fCb5CE3741b9": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xa5ef33B57dD8B653F9A9EA7114f46376d18264aC": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xa8D5E1daA6D8B94f11D77B7E09DE846292ef69FF": [
      "error CallReverted(bytes error)",
      "error GroupTreeNotWellFormed()",
      "error InsufficientSigners()",
      "error InvalidSigner()",
      "error MissingConfig()",
      "error OutOfBoundsGroup()",
      "error OutOfBoundsGroupQuorum()",
      "error OutOfBoundsNumOfSigners()",
      "error PendingOps()",
      "error PostOpCountReached()",
      "error ProofCannotBeVerified()",
      "error RootExpired()",
      "error SignedHashAlreadySeen()",
      "error SignerGroupsLengthMismatch()",
      "error SignerInDisabledGroup()",
      "error SignersAddressesMustBeStrictlyIncreasing()",
      "error ValidUntilHasAlreadyPassed()",
      "error WrongChainId()",
      "error WrongMultiSig()",
      "error WrongNonce()",
      "error WrongPostOpCount()",
      "error WrongPreOpCount()",
      "event ConfigSet(tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents) config, bool isRootCleared)",
      "event NewRoot(bytes32 indexed root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata)",
      "event OpExecuted(uint40 indexed nonce, address to, bytes data, uint256 value)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function MAX_NUM_SIGNERS() view returns (uint8)",
      "function NUM_GROUPS() view returns (uint8)",
      "function acceptOwnership()",
      "function execute(tuple(uint256 chainId, address multiSig, uint40 nonce, address to, uint256 value, bytes data) op, bytes32[] proof)",
      "function getConfig() view returns (tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents))",
      "function getOpCount() view returns (uint40)",
      "function getRoot() view returns (bytes32 root, uint32 validUntil)",
      "function getRootMetadata() view returns (tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot))",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setConfig(address[] signerAddresses, uint8[] signerGroups, uint8[32] groupQuorums, uint8[32] groupParents, bool clearRoot)",
      "function setRoot(bytes32 root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata, bytes32[] metadataProof, tuple(uint8 v, bytes32 r, bytes32 s)[] signatures)",
      "function transferOwnership(address newOwner)"
    ],
    "0xA9f9bF2b643348c0884f2eBA4F712E833DA9a2b8": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xAD97C0270a243270136E40278155C12ce7C7F87B": [
      "error CallReverted(bytes error)",
      "error GroupTreeNotWellFormed()",
      "error InsufficientSigners()",
      "error InvalidSigner()",
      "error MissingConfig()",
      "error OutOfBoundsGroup()",
      "error OutOfBoundsGroupQuorum()",
      "error OutOfBoundsNumOfSigners()",
      "error PendingOps()",
      "error PostOpCountReached()",
      "error ProofCannotBeVerified()",
      "error RootExpired()",
      "error SignedHashAlreadySeen()",
      "error SignerGroupsLengthMismatch()",
      "error SignerInDisabledGroup()",
      "error SignersAddressesMustBeStrictlyIncreasing()",
      "error ValidUntilHasAlreadyPassed()",
      "error WrongChainId()",
      "error WrongMultiSig()",
      "error WrongNonce()",
      "error WrongPostOpCount()",
      "error WrongPreOpCount()",
      "event ConfigSet(tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents) config, bool isRootCleared)",
      "event NewRoot(bytes32 indexed root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata)",
      "event OpExecuted(uint40 indexed nonce, address to, bytes data, uint256 value)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function MAX_NUM_SIGNERS() view returns (uint8)",
      "function NUM_GROUPS() view returns (uint8)",
      "function acceptOwnership()",
      "function execute(tuple(uint256 chainId, address multiSig, uint40 nonce, address to, uint256 value, bytes data) op, bytes32[] proof)",
      "function getConfig() view returns (tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents))",
      "function getOpCount() view returns (uint40)",
      "function getRoot() view returns (bytes32 root, uint32 validUntil)",
      "function getRootMetadata() view returns (tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot))",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setConfig(address[] signerAddresses, uint8[] signerGroups, uint8[32] groupQuorums, uint8[32] groupParents, bool clearRoot)",
      "function setRoot(bytes32 root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata, bytes32[] metadataProof, tuple(uint8 v, bytes32 r, bytes32 s)[] signatures)",
      "function transferOwnership(address newOwner)"
    ],
    "0xaFd31C0C78785aDF53E4c185670bfd5376249d8A": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xB095900fB91db00E6abD247A5A5AD1cee3F20BF7": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xb22764f98dD05c789929716D677382Df22C05Cb6": [
      "error AlreadyRegistered(address token)",
      "error InvalidTokenPoolToken(address token)",
      "error OnlyAdministrator(address sender, address token)",
      "error OnlyPendingAdministrator(address sender, address token)",
      "error OnlyRegistryModuleOrOwner(address sender)",
      "error ZeroAddress()",
      "event AdministratorTransferRequested(address indexed token, address indexed currentAdmin, address indexed newAdmin)",
      "event AdministratorTransferred(address indexed token, address indexed newAdmin)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolSet(address indexed token, address indexed previousPool, address indexed newPool)",
      "event RegistryModuleAdded(address module)",
      "event RegistryModuleRemoved(address indexed module)",
      "function acceptAdminRole(address localToken)",
      "function acceptOwnership()",
      "function addRegistryModule(address module)",
      "function getAllConfiguredTokens(uint64 startIndex, uint64 maxCount) view returns (address[] tokens)",
      "function getPool(address token) view returns (address)",
      "function getPools(address[] tokens) view returns (address[])",
      "function getTokenConfig(address token) view returns (tuple(address administrator, address pendingAdministrator, address tokenPool))",
      "function isAdministrator(address localToken, address administrator) view returns (bool)",
      "function isRegistryModule(address module) view returns (bool)",
      "function owner() view returns (address)",
      "function proposeAdministrator(address localToken, address administrator)",
      "function removeRegistryModule(address module)",
      "function setPool(address localToken, address pool)",
      "function transferAdminRole(address localToken, address newAdmin)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xb368c8946D9fa5A497cDe1Dff7213f9CdfD143Bf": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xb57D52F7Cb7BBD19a117585bbaf712108E56dd8f": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0xb8a882f3B88bd52D1Ff56A873bfDB84b70431937": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xBA1Aa22D51692AA0D7746F996cBE657781653332": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xc1EcCE580B2C96f4fd202fB7c2a259ECe19a1bF2": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0xCbE7e5DA76dC99Ac317adF6d99137005FDA4E2C4": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xCe6364dBe64D2789D916180131fAda2ABFF702E8": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xd2428F8C62fBfEA4b44a703CF11e02D7B0a6Cd99": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xD37a60E8C36E802D2E1a6321832Ee85556Beeb76": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig)",
      "error BadARMSignal()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(string message)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address armProxy))",
      "function getTransmitters() view returns (address[])",
      "function isARMHealthy() view returns (bool)",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndARMHealthy() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xd5083684eE92dDeA117636ae5E2F1cb7fE4dfd46": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xD54C93A99CBCb8D865E13DA321B540171795A89f": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xD6597750bf74DCAEC57e0F9aD2ec998D837005bf": [
      "constructor(address _singleton)"
    ],
    "0xD8E8720709a3d9A18a9B281E6148E94149B2E252": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xd8F93Aff87dC2AEEe0D0b0dF347baDA861BFf802": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xd98E80C79a15E4dbaF4C40B6cCDF690fe619BFBb": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0xD9d3d90D729F50794741Da7a2d54d8B12dC3Da72": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xDaC3A82Cc5e7C137bF28e6EF4F68f29D66205ffe": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xdB6ebB3ea15595E516dEf4a9875479573a4F19b6": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xdC5b578ff3AFcC4A4a6E149892b9472390b50844": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xdCD48419bD5Cd9d1b097695F2af4Ee125aADF84F": [
      "constructor(tuple(tuple(address blessVoteAddr, address curseVoteAddr, uint8 blessWeight, uint8 curseWeight)[] voters, uint16 blessWeightThreshold, uint16 curseWeightThreshold) config)",
      "error InvalidConfig()",
      "error ReusedCurseId(address voter, bytes16 curseId)",
      "error SubjectsMustBeStrictlyIncreasing()",
      "error UnauthorizedVoter(address voter)",
      "error UnvoteToCurseNoop()",
      "error VoteToBlessForbiddenDuringActiveGlobalCurse()",
      "error VoteToBlessNoop()",
      "error VoteToCurseNoop()",
      "event AlreadyBlessed(uint32 indexed configVersion, address indexed voter, tuple(address commitStore, bytes32 root) taggedRoot)",
      "event AlreadyVotedToBless(uint32 indexed configVersion, address indexed voter, tuple(address commitStore, bytes32 root) taggedRoot)",
      "event ConfigSet(uint32 indexed configVersion, tuple(tuple(address blessVoteAddr, address curseVoteAddr, uint8 blessWeight, uint8 curseWeight)[] voters, uint16 blessWeightThreshold, uint16 curseWeightThreshold) config)",
      "event CurseLifted(bytes16 subject)",
      "event Cursed(uint32 indexed configVersion, bytes16 subject, uint64 blockTimestamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PermaBlessedCommitStoreAdded(address commitStore)",
      "event PermaBlessedCommitStoreRemoved(address commitStore)",
      "event SkippedUnvoteToCurse(address indexed voter, bytes16 subject, bytes28 onchainCursesHash, bytes28 cursesHash)",
      "event TaggedRootBlessVotesReset(uint32 indexed configVersion, tuple(address commitStore, bytes32 root) taggedRoot, bool wasBlessed)",
      "event TaggedRootBlessed(uint32 indexed configVersion, tuple(address commitStore, bytes32 root) taggedRoot, uint16 accumulatedWeight)",
      "event UnvotedToCurse(uint32 indexed configVersion, address indexed voter, bytes16 subject, uint8 weight, bytes28 cursesHash, uint16 remainingAccumulatedWeight)",
      "event VotedToBless(uint32 indexed configVersion, address indexed voter, tuple(address commitStore, bytes32 root) taggedRoot, uint8 weight)",
      "event VotedToCurse(uint32 indexed configVersion, address indexed voter, bytes16 subject, bytes16 curseId, uint8 weight, uint64 blockTimestamp, bytes28 cursesHash, uint16 accumulatedWeight)",
      "function acceptOwnership()",
      "function getBlessProgress(tuple(address commitStore, bytes32 root) taggedRoot) view returns (address[] blessVoteAddrs, uint16 accumulatedWeight, bool blessed)",
      "function getConfigDetails() view returns (uint32 version, uint32 blockNumber, tuple(tuple(address blessVoteAddr, address curseVoteAddr, uint8 blessWeight, uint8 curseWeight)[] voters, uint16 blessWeightThreshold, uint16 curseWeightThreshold) config)",
      "function getCurseProgress(bytes16 subject) view returns (address[] curseVoteAddrs, bytes28[] cursesHashes, uint16 accumulatedWeight, bool cursed)",
      "function getCursedSubjectsCount() view returns (uint256)",
      "function getPermaBlessedCommitStores() view returns (address[])",
      "function getRecordedCurseRelatedOps(uint256 offset, uint256 limit) view returns (tuple(uint8 tag, uint64 blockTimestamp, bool cursed, address curseVoteAddr, bytes16 subject, bytes16 curseId)[])",
      "function getRecordedCurseRelatedOpsCount() view returns (uint256)",
      "function isBlessed(tuple(address commitStore, bytes32 root) taggedRoot) view returns (bool)",
      "function isCursed(bytes16 subject) view returns (bool)",
      "function isCursed() view returns (bool)",
      "function owner() view returns (address)",
      "function ownerCurse(bytes16 curseId, bytes16[] subjects)",
      "function ownerRemoveThenAddPermaBlessedCommitStores(address[] removes, address[] adds)",
      "function ownerResetBlessVotes(tuple(address commitStore, bytes32 root)[] taggedRoots)",
      "function ownerUnvoteToCurse(tuple(address curseVoteAddr, tuple(bytes16 subject, bytes28 cursesHash) unit, bool forceUnvote)[] ownerUnvoteToCurseRequests)",
      "function setConfig(tuple(tuple(address blessVoteAddr, address curseVoteAddr, uint8 blessWeight, uint8 curseWeight)[] voters, uint16 blessWeightThreshold, uint16 curseWeightThreshold) config)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function unvoteToCurse(tuple(bytes16 subject, bytes28 cursesHash)[] unvoteToCurseRequests)",
      "function voteToBless(tuple(address commitStore, bytes32 root)[] taggedRoots)",
      "function voteToCurse(bytes16 curseId, bytes16[] subjects)"
    ],
    "0xdCF6F209d36d93A26B251D2CFE994bEF02954110": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xddF4b4aF7A9603869C90189EFa8826683D0D234b": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xdE81f1627ef2F6E23A2C0f338623C78c10EA57AC": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0xdEFeADd30D5BFD403d86245b43e39a73d76423cC": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xdf615eF8D4C64d0ED8Fd7824BBEd2f6a10245aC9": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0xdf85c8381954694E74abD07488f452b4c2Cddfb3": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xe2c2AB221AA0b957805f229d2AA57fBE2f4dADf7": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xE41677500B425999cB4133950ca3aB79eA7470a6": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xE53289F32c8E690b7173aA33affE9B6B0CB0012F": [
      "error CallReverted(bytes error)",
      "error GroupTreeNotWellFormed()",
      "error InsufficientSigners()",
      "error InvalidSigner()",
      "error MissingConfig()",
      "error OutOfBoundsGroup()",
      "error OutOfBoundsGroupQuorum()",
      "error OutOfBoundsNumOfSigners()",
      "error PendingOps()",
      "error PostOpCountReached()",
      "error ProofCannotBeVerified()",
      "error RootExpired()",
      "error SignedHashAlreadySeen()",
      "error SignerGroupsLengthMismatch()",
      "error SignerInDisabledGroup()",
      "error SignersAddressesMustBeStrictlyIncreasing()",
      "error ValidUntilHasAlreadyPassed()",
      "error WrongChainId()",
      "error WrongMultiSig()",
      "error WrongNonce()",
      "error WrongPostOpCount()",
      "error WrongPreOpCount()",
      "event ConfigSet(tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents) config, bool isRootCleared)",
      "event NewRoot(bytes32 indexed root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata)",
      "event OpExecuted(uint40 indexed nonce, address to, bytes data, uint256 value)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function MAX_NUM_SIGNERS() view returns (uint8)",
      "function NUM_GROUPS() view returns (uint8)",
      "function acceptOwnership()",
      "function execute(tuple(uint256 chainId, address multiSig, uint40 nonce, address to, uint256 value, bytes data) op, bytes32[] proof)",
      "function getConfig() view returns (tuple(tuple(address addr, uint8 index, uint8 group)[] signers, uint8[32] groupQuorums, uint8[32] groupParents))",
      "function getOpCount() view returns (uint40)",
      "function getRoot() view returns (bytes32 root, uint32 validUntil)",
      "function getRootMetadata() view returns (tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot))",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setConfig(address[] signerAddresses, uint8[] signerGroups, uint8[32] groupQuorums, uint8[32] groupParents, bool clearRoot)",
      "function setRoot(bytes32 root, uint32 validUntil, tuple(uint256 chainId, address multiSig, uint40 preOpCount, uint40 postOpCount, bool overridePreviousRoot) metadata, bytes32[] metadataProof, tuple(uint8 v, bytes32 r, bytes32 s)[] signatures)",
      "function transferOwnership(address newOwner)"
    ],
    "0xE561d5E02207fb5eB32cca20a699E0d8919a1476": [
      "constructor(address wrappedNative, address armProxy)",
      "error BadARMSignal()",
      "error FailedToSendValue()",
      "error InsufficientFeeTokenAmount()",
      "error InvalidMsgValue()",
      "error InvalidRecipientAddress(address to)",
      "error OffRampMismatch()",
      "error OnlyOffRamp()",
      "error UnsupportedDestinationChain(uint64 destChainSelector)",
      "event MessageExecuted(bytes32 messageId, uint64 sourceChainSelector, address offRamp, bytes32 calldataHash)",
      "event OffRampAdded(uint64 indexed sourceChainSelector, address offRamp)",
      "event OffRampRemoved(uint64 indexed sourceChainSelector, address offRamp)",
      "event OnRampSet(uint64 indexed destChainSelector, address onRamp)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "function MAX_RET_BYTES() view returns (uint16)",
      "function acceptOwnership()",
      "function applyRampUpdates(tuple(uint64 destChainSelector, address onRamp)[] onRampUpdates, tuple(uint64 sourceChainSelector, address offRamp)[] offRampRemoves, tuple(uint64 sourceChainSelector, address offRamp)[] offRampAdds)",
      "function ccipSend(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) payable returns (bytes32)",
      "function getArmProxy() view returns (address)",
      "function getFee(uint64 destinationChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 fee)",
      "function getOffRamps() view returns (tuple(uint64 sourceChainSelector, address offRamp)[])",
      "function getOnRamp(uint64 destChainSelector) view returns (address)",
      "function getSupportedTokens(uint64 chainSelector) view returns (address[])",
      "function getWrappedNative() view returns (address)",
      "function isChainSupported(uint64 chainSelector) view returns (bool)",
      "function isOffRamp(address offRamp) view returns (bool, uint64)",
      "function owner() view returns (address)",
      "function recoverTokens(address tokenAddress, address to, uint256 amount)",
      "function routeMessage(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts) message, uint16 gasForCallExactCheck, uint256 gasLimit, address receiver) returns (bool success, bytes retData)",
      "function setWrappedNative(address wrappedNative)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xE8af3b68eDfFf65Ce48648009982380701f09B92": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xE93ec2A57e38C8541c893348cCafEAB01F7D47d4": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xeA6d4a24B262aB3e61a8A62f018A30beCD086f82": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xEd5bE9508ae56531cc0EDe6A3bD588Eb9E2e3cfa": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xeFC4a18af59398FF23bfe7325F2401aD44286F4d": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, address[] sourceTokens, address[] pools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error AlreadyAttempted(uint64 sequenceNumber)",
      "error AlreadyExecuted(uint64 sequenceNumber)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error EmptyReport()",
      "error ExecutionError(bytes error)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(string message)",
      "error InvalidManualExecutionGasLimit(uint256 index, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenPoolConfig()",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes error)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes error)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error UnsupportedToken(address token)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData)",
      "function getDestinationToken(address sourceToken) view returns (address)",
      "function getDestinationTokens() view returns (address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, address router, address priceRegistry, uint16 maxNumberOfTokensPerMsg, uint32 maxDataBytes, uint32 maxPoolReleaseOrMintGas))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getPoolByDestToken(address destToken) view returns (address)",
      "function getPoolBySourceToken(address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address armProxy))",
      "function getSupportedTokens() view returns (address[] sourceTokens)",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, uint256[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)"
    ],
    "0xF3AC96642F9BA5De3BBc864d609E3F534dD3b7F9": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0xF4468E56179e6EF59d6f5B133D9355AAD91Ea9ae": [
      "constructor(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CanOnlySelfCall()",
      "error CommitStoreAlreadyInUse()",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error DestinationGasAmountCountMismatch(bytes32 messageId, uint64 sequenceNumber)",
      "error EmptyReport()",
      "error ExecutionError(bytes err)",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidDataLength(uint256 expected, uint256 got)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidManualExecutionGasLimit(bytes32 messageId, uint256 oldLimit, uint256 newLimit)",
      "error InvalidMessageId()",
      "error InvalidNewState(uint64 sequenceNumber, uint8 newState)",
      "error InvalidSourceChain(uint64 sourceChainSelector)",
      "error InvalidTokenGasOverride(bytes32 messageId, uint256 tokenIndex, uint256 oldLimit, uint256 tokenGasOverride)",
      "error ManualExecutionGasLimitMismatch()",
      "error ManualExecutionNotYetEnabled()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error NotACompatiblePool(address notPool)",
      "error OnlyCallableByAdminOrOwner()",
      "error OracleCannotBeZeroAddress()",
      "error PriceNotFoundForToken(address token)",
      "error ReceiverError(bytes err)",
      "error ReleaseOrMintBalanceMismatch(uint256 amountReleased, uint256 balancePre, uint256 balancePost)",
      "error RootNotCommitted()",
      "error TokenDataMismatch(uint64 sequenceNumber)",
      "error TokenHandlingError(bytes err)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error UnauthorizedTransmitter()",
      "error UnexpectedTokenData()",
      "error UnsupportedNumberOfTokens(uint64 sequenceNumber)",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error ZeroAddressNotAllowed()",
      "event AdminSet(address newAdmin)",
      "event AlreadyAttempted(uint64 sequenceNumber)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event ConfigSet(tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry) dynamicConfig)",
      "event ExecutionStateChanged(uint64 indexed sequenceNumber, bytes32 indexed messageId, uint8 state, bytes returnData)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event SkippedAlreadyExecutedMessage(uint64 indexed sequenceNumber)",
      "event SkippedIncorrectNonce(uint64 indexed nonce, address indexed sender)",
      "event SkippedSenderWithPreviousRampMessageInflight(uint64 indexed nonce, address indexed sender)",
      "event TokenAggregateRateLimitAdded(address sourceToken, address destToken)",
      "event TokenAggregateRateLimitRemoved(address sourceToken, address destToken)",
      "event TokensConsumed(uint256 tokens)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "function acceptOwnership()",
      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] destTokenAmounts)) pure",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function executeSingleMessage(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message, bytes[] offchainTokenData, uint32[] tokenGasOverrides)",
      "function getAllRateLimitTokens() view returns (address[] sourceTokens, address[] destTokens)",
      "function getDynamicConfig() view returns (tuple(uint32 permissionLessExecutionThresholdSeconds, uint32 maxDataBytes, uint16 maxNumberOfTokensPerMsg, address router, address priceRegistry))",
      "function getExecutionState(uint64 sequenceNumber) view returns (uint8)",
      "function getSenderNonce(address sender) view returns (uint64 nonce)",
      "function getStaticConfig() view returns (tuple(address commitStore, uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address prevOffRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTransmitters() view returns (address[])",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function manuallyExecute(tuple(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId)[] messages, bytes[][] offchainTokenData, bytes32[] proofs, uint256 proofFlagBits) report, tuple(uint256 receiverExecutionGasLimit, uint32[] tokenGasOverrides)[] gasLimitOverrides)",
      "function owner() view returns (address)",
      "function setAdmin(address newAdmin)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32)",
      "function typeAndVersion() view returns (string)",
      "function updateRateLimitTokens(tuple(address sourceToken, address destToken)[] removes, tuple(address sourceToken, address destToken)[] adds)"
    ],
    "0xf50B9A46C394bD98491ce163d420222d8030F6F0": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error CursedByRMN()",
      "error ExtraArgOutOfOrderExecutionMustBeTrue()",
      "error GetSupportedTokensFunctionalityRemovedCheckAdminRegistry()",
      "error InsufficientBalance()",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidDestBytesOverhead(address token, uint32 destBytesOverhead)",
      "error InvalidEVMAddress(bytes encodedAddress)",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigChanged(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event TokenTransferFeeConfigDeleted(address[] tokens)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] transferFeeConfig)",
      "event TokensConsumed(uint256 tokens)",
      "function acceptOwnership()",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address rmnProxy, address tokenAdminRegistry))",
      "function getSupportedTokens(uint64) pure returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled, bool isEnabled) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit, uint16 defaultTokenFeeUSDCents, uint32 defaultTokenDestGasOverhead, bool enforceOutOfOrder) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead, bool aggregateRateLimitEnabled)[] tokenTransferFeeConfigArgs, address[] tokensToUseDefaultFeeConfigs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xF538dA6c673A30338269655f4e019B71ba58CFd4": [
      "constructor(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig, tuple(address token, address pool)[] tokensAndPools, tuple(bool isEnabled, uint128 capacity, uint128 rate) rateLimiterConfig, tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigs, tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested)",
      "error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available)",
      "error BadARMSignal()",
      "error BucketOverfilled()",
      "error CannotSendZeroTokens()",
      "error InsufficientBalance()",
      "error InvalidAddress(bytes encodedAddress)",
      "error InvalidChainSelector(uint64 chainSelector)",
      "error InvalidConfig()",
      "error InvalidExtraArgsTag()",
      "error InvalidNopAddress(address nop)",
      "error InvalidTokenPoolConfig()",
      "error InvalidWithdrawParams()",
      "error LinkBalanceNotSettled()",
      "error MaxFeeBalanceReached()",
      "error MessageGasLimitTooHigh()",
      "error MessageTooLarge(uint256 maxSize, uint256 actualSize)",
      "error MustBeCalledByRouter()",
      "error NoFeesToPay()",
      "error NoNopsToPay()",
      "error NotAFeeToken(address token)",
      "error OnlyCallableByAdminOrOwner()",
      "error OnlyCallableByOwnerOrAdmin()",
      "error OnlyCallableByOwnerOrAdminOrNop()",
      "error PoolAlreadyAdded()",
      "error PoolDoesNotExist(address token)",
      "error PriceNotFoundForToken(address token)",
      "error RouterMustSetOriginalSender()",
      "error SourceTokenDataTooLarge(address token)",
      "error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress)",
      "error TokenPoolMismatch()",
      "error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress)",
      "error TooManyNops()",
      "error UnsupportedNumberOfTokens()",
      "error UnsupportedToken(address token)",
      "event AdminSet(address newAdmin)",
      "event CCIPSendRequested(tuple(uint64 sourceChainSelector, address sender, address receiver, uint64 sequenceNumber, uint256 gasLimit, bool strict, uint64 nonce, address feeToken, uint256 feeTokenAmount, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, bytes[] sourceTokenData, bytes32 messageId) message)",
      "event ConfigSet(tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy) staticConfig, tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "event FeeConfigSet(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeConfig)",
      "event NopPaid(address indexed nop, uint256 amount)",
      "event NopsSet(uint256 nopWeightsTotal, tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event PoolAdded(address token, address pool)",
      "event PoolRemoved(address token, address pool)",
      "event TokenTransferFeeConfigSet(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] transferFeeConfig)",
      "function acceptOwnership()",
      "function applyPoolUpdates(tuple(address token, address pool)[] removes, tuple(address token, address pool)[] adds)",
      "function currentRateLimiterState() view returns (tuple(uint128 tokens, uint32 lastUpdated, bool isEnabled, uint128 capacity, uint128 rate))",
      "function forwardFromRouter(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message, uint256 feeTokenAmount, address originalSender) returns (bytes32)",
      "function getDynamicConfig() view returns (tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getFee(uint64 destChainSelector, tuple(bytes receiver, bytes data, tuple(address token, uint256 amount)[] tokenAmounts, address feeToken, bytes extraArgs) message) view returns (uint256 feeTokenAmount)",
      "function getFeeTokenConfig(address token) view returns (tuple(uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled) feeTokenConfig)",
      "function getNopFeesJuels() view returns (uint96)",
      "function getNops() view returns (tuple(address nop, uint16 weight)[] nopsAndWeights, uint256 weightsTotal)",
      "function getPoolBySourceToken(uint64, address sourceToken) view returns (address)",
      "function getSenderNonce(address sender) view returns (uint64)",
      "function getStaticConfig() view returns (tuple(address linkToken, uint64 chainSelector, uint64 destChainSelector, uint64 defaultTxGasLimit, uint96 maxNopFeesJuels, address prevOnRamp, address armProxy))",
      "function getSupportedTokens(uint64) view returns (address[])",
      "function getTokenLimitAdmin() view returns (address)",
      "function getTokenTransferFeeConfig(address token) view returns (tuple(uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead) tokenTransferFeeConfig)",
      "function linkAvailableForPayment() view returns (int256)",
      "function owner() view returns (address)",
      "function payNops()",
      "function setAdmin(address newAdmin)",
      "function setDynamicConfig(tuple(address router, uint16 maxNumberOfTokensPerMsg, uint32 destGasOverhead, uint16 destGasPerPayloadByte, uint32 destDataAvailabilityOverheadGas, uint16 destGasPerDataAvailabilityByte, uint16 destDataAvailabilityMultiplierBps, address priceRegistry, uint32 maxDataBytes, uint32 maxPerMsgGasLimit) dynamicConfig)",
      "function setFeeTokenConfig(tuple(address token, uint32 networkFeeUSDCents, uint64 gasMultiplierWeiPerEth, uint64 premiumMultiplierWeiPerEth, bool enabled)[] feeTokenConfigArgs)",
      "function setNops(tuple(address nop, uint16 weight)[] nopsAndWeights)",
      "function setRateLimiterConfig(tuple(bool isEnabled, uint128 capacity, uint128 rate) config)",
      "function setTokenTransferFeeConfig(tuple(address token, uint32 minFeeUSDCents, uint32 maxFeeUSDCents, uint16 deciBps, uint32 destGasOverhead, uint32 destBytesOverhead)[] tokenTransferFeeConfigArgs)",
      "function transferOwnership(address to)",
      "function typeAndVersion() view returns (string)",
      "function withdrawNonLinkFees(address feeToken, address to)"
    ],
    "0xf7B343A17445F175f2Dd9f5CB29BAf0a8dE75ed3": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ],
    "0xFa94e57b12b6C45A3aD3CBb9451ba99a997eb210": [
      "constructor(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig)",
      "error ConfigDigestMismatch(bytes32 expected, bytes32 actual)",
      "error CursedByRMN()",
      "error ForkedChain(uint256 expected, uint256 actual)",
      "error InvalidCommitStoreConfig()",
      "error InvalidConfig(uint8 errorType)",
      "error InvalidInterval(tuple(uint64 min, uint64 max) interval)",
      "error InvalidProof()",
      "error InvalidRoot()",
      "error LeavesCannotBeEmpty()",
      "error NonUniqueSignatures()",
      "error OracleCannotBeZeroAddress()",
      "error PausedError()",
      "error RootAlreadyCommitted()",
      "error SignaturesOutOfRegistration()",
      "error StaleReport()",
      "error UnauthorizedSigner()",
      "error UnauthorizedTransmitter()",
      "error WrongMessageLength(uint256 expected, uint256 actual)",
      "error WrongNumberOfSignatures()",
      "event ConfigSet(tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy) staticConfig, tuple(address priceRegistry) dynamicConfig)",
      "event ConfigSet(uint32 previousConfigBlockNumber, bytes32 configDigest, uint64 configCount, address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "event LatestPriceEpochAndRoundSet(uint40 oldEpochAndRound, uint40 newEpochAndRound)",
      "event OwnershipTransferRequested(address indexed from, address indexed to)",
      "event OwnershipTransferred(address indexed from, address indexed to)",
      "event Paused(address account)",
      "event ReportAccepted(tuple(tuple(tuple(address sourceToken, uint224 usdPerToken)[] tokenPriceUpdates, tuple(uint64 destChainSelector, uint224 usdPerUnitGas)[] gasPriceUpdates) priceUpdates, tuple(uint64 min, uint64 max) interval, bytes32 merkleRoot) report)",
      "event RootRemoved(bytes32 root)",
      "event SequenceNumberSet(uint64 oldSeqNum, uint64 newSeqNum)",
      "event Transmitted(bytes32 configDigest, uint32 epoch)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function getDynamicConfig() view returns (tuple(address priceRegistry))",
      "function getExpectedNextSequenceNumber() view returns (uint64)",
      "function getLatestPriceEpochAndRound() view returns (uint64)",
      "function getMerkleRoot(bytes32 root) view returns (uint256)",
      "function getStaticConfig() view returns (tuple(uint64 chainSelector, uint64 sourceChainSelector, address onRamp, address rmnProxy))",
      "function getTransmitters() view returns (address[])",
      "function isBlessed(bytes32 root) view returns (bool)",
      "function isUnpausedAndNotCursed() view returns (bool)",
      "function latestConfigDetails() view returns (uint32 configCount, uint32 blockNumber, bytes32 configDigest)",
      "function latestConfigDigestAndEpoch() view returns (bool scanLogs, bytes32 configDigest, uint32 epoch)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function resetUnblessedRoots(bytes32[] rootToReset)",
      "function setLatestPriceEpochAndRound(uint40 latestPriceEpochAndRound)",
      "function setMinSeqNr(uint64 minSeqNr)",
      "function setOCR2Config(address[] signers, address[] transmitters, uint8 f, bytes onchainConfig, uint64 offchainConfigVersion, bytes offchainConfig)",
      "function transferOwnership(address to)",
      "function transmit(bytes32[3] reportContext, bytes report, bytes32[] rs, bytes32[] ss, bytes32 rawVs)",
      "function typeAndVersion() view returns (string)",
      "function unpause()",
      "function verify(bytes32[] hashedLeaves, bytes32[] proofs, uint256 proofFlagBits) view returns (uint256 timestamp)"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0x18527e82c3800311291da7323caa876f588cde67692c1c84d5ecb5161da61359",
    "transporter/CommitStoreV1": "0xd75293261783840120d33cf40ea7cb9a8391a9544614066e1b109391624facca",
    "transporter/ManyChainMultiSig": "0xd420005fec6c7ed116556a77ecb7d6b4eadeacd367e3bee473ca908e54a1a9b2",
    "transporter/OffRampV1": "0xe5666deffe02d58fdffb9ad4f6d3cfafb6040feaf3e5c43e439e1f209e104bcf",
    "transporter/OfframpV2": "0xd2ee60622bb9c2a40504fdc78927c65d6b083cbe99b080c0eb53dcfe6079d8df",
    "transporter/OnRampV1": "0x061325afbee3a7866fe9adc9413a161053f1b4ff42f993a5ab73cadf607522f8",
    "transporter/OnRampV3": "0x109e8fc34bb9e38ce30d45ce42a4a7aefb4ae881fc39394d2d9bd284e370f94a",
    "transporter/PriceRegistry": "0x9c75f4fc2eef32dfabd4130ed50dc7540945124bd16fa7b71a437b00001eca19",
    "transporter/RouterV1_0_0": "0x6961598c7277a0d3692438de7bad9c08bd511a62599a9c4b27e6a06a599ef823",
    "transporter/RouterV1_2_0": "0x19a2737ac25685728904a70aacb66e3801a02ddb72bfbb28e68984410939eced"
  }
}
