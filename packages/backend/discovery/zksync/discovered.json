{
  "name": "zksync",
  "blockNumber": 17434701,
  "configHash": "0xb2c1b214380e339c53ca4af42343b5755f5b4d33a6b99f2559cd8939be64d37c",
  "version": 1,
  "contracts": [
    {
      "name": "Multisig 1",
      "address": "0x002A5dc50bbB8d5808e418Aeeb9F060a2Ca17346",
      "code": "https://etherscan.deth.net/address/0x002A5dc50bbB8d5808e418Aeeb9F060a2Ca17346,0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F"
      },
      "values": {
        "domainSeparator": "0xb6ece672e8e44cdf87193dcee0001432734caf5c8dd0d2b5ee44e98b5dbbc0f5",
        "getModules": [],
        "getOwners": [
          "0x4326E446013908fBEEE4ce7b6935219c01854B21",
          "0x4F0eB7DBcF5410C7bA0Ad8D131956f0194Ea803B",
          "0x117Ab3A5D9eaF4F7105e30a757F150504733C3d8",
          "0xA0171d83E3C5F215491FcE4C0884E91674B3C8A3"
        ],
        "getThreshold": 2,
        "NAME": "Gnosis Safe",
        "nonce": 21,
        "VERSION": "1.1.1"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "Multisig 2",
      "address": "0x19eD6cc20D44e5cF4Bb4894F50162F72402d8567",
      "code": "https://etherscan.deth.net/address/0x19eD6cc20D44e5cF4Bb4894F50162F72402d8567,0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F"
      },
      "values": {
        "domainSeparator": "0x0612918ac0a704543b30ac33fe529b71be8e02810fe3dff217f7d9f5448442bc",
        "getModules": [],
        "getOwners": [
          "0xa81cF4389f493Fee9FC0fA69510b48D3E2Bfd3ce",
          "0xB0c9C5B5211dE3a75b61BB798887b76AcCD64193",
          "0x106fc088aBA908130fBC343F2F6d212Ff36150D1",
          "0xCE990b1f86e954746AD3a57F5Aa6CFa9CC0c3348",
          "0xE7A4F2b1772603170111BC633cbCF1AcEbD60BCe",
          "0xf6dcD4d7141E06B916987C3C46220f6241278a30"
        ],
        "getThreshold": 2,
        "NAME": "Gnosis Safe",
        "nonce": 11,
        "VERSION": "1.1.1"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "Multisig 3",
      "address": "0x225d3822De44E58eE935440E0c0B829C4232086e",
      "code": "https://etherscan.deth.net/address/0x225d3822De44E58eE935440E0c0B829C4232086e,0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"
      },
      "values": {
        "domainSeparator": "0x8c5e6abcda42210fa2b28fcb8c59671ec835bf9c06954d07036009a0c6646557",
        "getChainId": 1,
        "getOwners": [
          "0xB1A308e7F02798377b7acF685E997E3D774c5863",
          "0x0d4E989c7620C8749c9417d2BF218896C767B606",
          "0x18B7ff0370456dB6b7710714D9DCC25a0A3b3016"
        ],
        "getThreshold": 2,
        "nonce": 267,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "Governance",
      "address": "0x34460C0EB5074C29A9F6FE13b8e7E23A0D08aF01",
      "code": "https://etherscan.deth.net/address/0x34460C0EB5074C29A9F6FE13b8e7E23A0D08aF01,0x3FBc7C6c2437dE24F91b2Ca61Fc7AD3D2D62F4c8",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x3FBc7C6c2437dE24F91b2Ca61Fc7AD3D2D62F4c8",
        "admin": "0x38A43F4330f24fe920F943409709fc9A6084C939"
      },
      "values": {
        "defaultFactory": "0x7C770595a2Be9A87CF49B35eA9bC534f1a59552D",
        "networkGovernor": "0xE24f4870Ab85DE8E356C5fC56138587206c70d99",
        "tokenGovernance": "0x35cc31f63deef017c38d51B038891bAE7d614e86",
        "totalTokens": 183,
        "validators": ["0x01c3A1a6890A146aC187A019F9863B3Ab2BfF91e"]
      },
      "derivedName": "Governance"
    },
    {
      "name": "TokenGovernance",
      "address": "0x35cc31f63deef017c38d51B038891bAE7d614e86",
      "code": "https://etherscan.deth.net/address/0x35cc31f63deef017c38d51B038891bAE7d614e86",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "governance": "0x34460C0EB5074C29A9F6FE13b8e7E23A0D08aF01",
        "listingCap": 64000,
        "listingFee": "500000000000000000000",
        "listingFeeToken": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "tokenListers": ["0xE24f4870Ab85DE8E356C5fC56138587206c70d99"],
        "treasury": "0x2A0a81e257a2f5D6eD4F07b81DbDa09F107bd027"
      },
      "derivedName": "TokenGovernance"
    },
    {
      "name": "UpgradeGatekeeper",
      "address": "0x38A43F4330f24fe920F943409709fc9A6084C939",
      "code": "https://etherscan.deth.net/address/0x38A43F4330f24fe920F943409709fc9A6084C939",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "getMaster": "0xE24f4870Ab85DE8E356C5fC56138587206c70d99",
        "mainContract": "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF",
        "managedContracts": [
          "0x34460C0EB5074C29A9F6FE13b8e7E23A0D08aF01",
          "0x5290E9582B4FB706EaDf87BB1c129e897e04d06D",
          "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF"
        ],
        "nextTargets": [],
        "noticePeriodFinishTimestamp": 0,
        "upgradeStatus": 0,
        "versionId": 10
      },
      "derivedName": "UpgradeGatekeeper"
    },
    {
      "name": "Verifier",
      "address": "0x5290E9582B4FB706EaDf87BB1c129e897e04d06D",
      "code": "https://etherscan.deth.net/address/0x5290E9582B4FB706EaDf87BB1c129e897e04d06D,0xf7Bd436a05678B647D74a88ffcf4445Efc43BDfC",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xf7Bd436a05678B647D74a88ffcf4445Efc43BDfC",
        "admin": "0x38A43F4330f24fe920F943409709fc9A6084C939"
      },
      "derivedName": "Verifier"
    },
    {
      "name": "NftFactory",
      "address": "0x7C770595a2Be9A87CF49B35eA9bC534f1a59552D",
      "code": "https://etherscan.deth.net/address/0x7C770595a2Be9A87CF49B35eA9bC534f1a59552D",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "baseURI": "",
        "name": "zkSync NFT Factory Contract",
        "symbol": "ZKNFT",
        "totalSupply": 15437
      },
      "derivedName": "ZkSyncNFTFactory"
    },
    {
      "name": "ZkSync",
      "address": "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF",
      "code": "https://etherscan.deth.net/address/0xaBEA9132b05A70803a4E85094fD0e1800777fBEF,0x8e972b354E6933275513C355Ee14D44A832aD2d9,0x2eaa1377e0fC95dE998B9fA7611E9D67ebA534fD",
      "upgradeability": {
        "type": "zkSync Lite proxy",
        "admin": "0x38A43F4330f24fe920F943409709fc9A6084C939",
        "implementation": "0x8e972b354E6933275513C355Ee14D44A832aD2d9",
        "additional": "0x2eaa1377e0fC95dE998B9fA7611E9D67ebA534fD"
      },
      "values": {
        "approvedUpgradeNoticePeriod": 1814400,
        "exodusMode": false,
        "getNoticePeriod": 0,
        "governance": "0x34460C0EB5074C29A9F6FE13b8e7E23A0D08aF01",
        "isReadyForUpgrade": true,
        "securityCouncilMembers": [
          "0xa2602ea835E03fb39CeD30B43d6b6EAf6aDe1769",
          "0x9D5d6D4BaCCEDf6ECE1883456AA785dc996df607",
          "0x002A5dc50bbB8d5808e418Aeeb9F060a2Ca17346",
          "0x71E805aB236c945165b9Cd0bf95B9f2F0A0488c3",
          "0x76C6cE74EAb57254E785d1DcC3f812D274bCcB11",
          "0xFBfF3FF69D65A9103Bf4fdBf988f5271D12B3190",
          "0xAfC2F2D803479A2AF3A72022D54cc0901a0ec0d6",
          "0x4d1E3089042Ab3A93E03CA88B566b99Bd22438C6",
          "0x19eD6cc20D44e5cF4Bb4894F50162F72402d8567",
          "0x39415255619783A2E71fcF7d8f708A951d92e1b6",
          "0x399a6a13D298CF3F41a562966C1a450136Ea52C2",
          "0xee8AE1F1B4B1E1956C8Bda27eeBCE54Cf0bb5eaB",
          "0xe7CCD4F3feA7df88Cf9B59B30f738ec1E049231f",
          "0xA093284c707e207C36E3FEf9e0B6325fd9d0e33B",
          "0x225d3822De44E58eE935440E0c0B829C4232086e"
        ],
        "securityCouncilThreshold": 9,
        "UPGRADE_NOTICE_PERIOD": 1814400,
        "upgradePreparationActivationTime": 0,
        "upgradePreparationActive": 0,
        "upgradeStartTimestamp": 0,
        "verifier": "0x5290E9582B4FB706EaDf87BB1c129e897e04d06D"
      },
      "derivedName": "Proxy"
    },
    {
      "name": "Proxy",
      "address": "0xAfC2F2D803479A2AF3A72022D54cc0901a0ec0d6",
      "code": "https://etherscan.deth.net/address/0xAfC2F2D803479A2AF3A72022D54cc0901a0ec0d6",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "ZkSync Multisig",
      "address": "0xE24f4870Ab85DE8E356C5fC56138587206c70d99",
      "code": "https://etherscan.deth.net/address/0xE24f4870Ab85DE8E356C5fC56138587206c70d99,0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F"
      },
      "values": {
        "domainSeparator": "0xcd86f82218dc46b5501da06e0b96a9cf73cd8f35153e9da3a481f79b6be5ff63",
        "getModules": [],
        "getOwners": [
          "0x1567AC0764142e91aB0A9C65C568f0DbE9E168BF",
          "0xd7aF418d98C0F8EDbaa407fc30ad10382286F36F",
          "0x84298D79ad2CD4eC0d9Ca1959F9d9f40Bc07152f",
          "0x702caCafA54B88e9c54449563Fb2e496e85c78b7",
          "0x9dF8bc0918F357c766A5697E031fF5237c05747A",
          "0x3068415e0F857A5eEd03302A1F7E44f67468d2Bc",
          "0xa265146cA40F52cfC439888D0b4291b5440e6769"
        ],
        "getThreshold": 4,
        "NAME": "Gnosis Safe",
        "nonce": 108,
        "VERSION": "1.1.1"
      },
      "derivedName": "GnosisSafe"
    }
  ],
  "eoas": [
    "0x01c3A1a6890A146aC187A019F9863B3Ab2BfF91e",
    "0x0d4E989c7620C8749c9417d2BF218896C767B606",
    "0x106fc088aBA908130fBC343F2F6d212Ff36150D1",
    "0x117Ab3A5D9eaF4F7105e30a757F150504733C3d8",
    "0x1567AC0764142e91aB0A9C65C568f0DbE9E168BF",
    "0x18B7ff0370456dB6b7710714D9DCC25a0A3b3016",
    "0x2A0a81e257a2f5D6eD4F07b81DbDa09F107bd027",
    "0x3068415e0F857A5eEd03302A1F7E44f67468d2Bc",
    "0x39415255619783A2E71fcF7d8f708A951d92e1b6",
    "0x399a6a13D298CF3F41a562966C1a450136Ea52C2",
    "0x4326E446013908fBEEE4ce7b6935219c01854B21",
    "0x4d1E3089042Ab3A93E03CA88B566b99Bd22438C6",
    "0x4F0eB7DBcF5410C7bA0Ad8D131956f0194Ea803B",
    "0x702caCafA54B88e9c54449563Fb2e496e85c78b7",
    "0x71E805aB236c945165b9Cd0bf95B9f2F0A0488c3",
    "0x76C6cE74EAb57254E785d1DcC3f812D274bCcB11",
    "0x84298D79ad2CD4eC0d9Ca1959F9d9f40Bc07152f",
    "0x9D5d6D4BaCCEDf6ECE1883456AA785dc996df607",
    "0x9dF8bc0918F357c766A5697E031fF5237c05747A",
    "0xA0171d83E3C5F215491FcE4C0884E91674B3C8A3",
    "0xA093284c707e207C36E3FEf9e0B6325fd9d0e33B",
    "0xa2602ea835E03fb39CeD30B43d6b6EAf6aDe1769",
    "0xa265146cA40F52cfC439888D0b4291b5440e6769",
    "0xa81cF4389f493Fee9FC0fA69510b48D3E2Bfd3ce",
    "0xB0c9C5B5211dE3a75b61BB798887b76AcCD64193",
    "0xB1A308e7F02798377b7acF685E997E3D774c5863",
    "0xCE990b1f86e954746AD3a57F5Aa6CFa9CC0c3348",
    "0xd7aF418d98C0F8EDbaa407fc30ad10382286F36F",
    "0xE7A4F2b1772603170111BC633cbCF1AcEbD60BCe",
    "0xe7CCD4F3feA7df88Cf9B59B30f738ec1E049231f",
    "0xee8AE1F1B4B1E1956C8Bda27eeBCE54Cf0bb5eaB",
    "0xf6dcD4d7141E06B916987C3C46220f6241278a30",
    "0xFBfF3FF69D65A9103Bf4fdBf988f5271D12B3190"
  ],
  "abis": {
    "0x002A5dc50bbB8d5808e418Aeeb9F060a2Ca17346": [
      "constructor(address _masterCopy)"
    ],
    "0x19eD6cc20D44e5cF4Bb4894F50162F72402d8567": [
      "constructor(address _masterCopy)"
    ],
    "0x225d3822De44E58eE935440E0c0B829C4232086e": [
      "constructor(address _masterCopy)"
    ],
    "0x2eaa1377e0fC95dE998B9fA7611E9D67ebA534fD": [
      "event ApproveCutUpgradeNoticePeriod(address indexed addr)",
      "event BlockCommit(uint32 indexed blockNumber)",
      "event BlockVerification(uint32 indexed blockNumber)",
      "event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)",
      "event Deposit(uint16 indexed tokenId, uint128 amount)",
      "event DepositCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)",
      "event ExodusMode()",
      "event FactAuth(address indexed sender, uint32 nonce, bytes fact)",
      "event FullExitCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)",
      "event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)",
      "event NoticePeriodChange(uint256 newNoticePeriod)",
      "event Withdrawal(address indexed owner, uint16 indexed tokenId, uint128 amount)",
      "event WithdrawalNFT(uint32 indexed tokenId)",
      "event WithdrawalNFTPending(uint32 indexed tokenId)",
      "event WithdrawalPending(uint16 indexed tokenId, address indexed recipient, uint128 amount, uint8 withdrawalType)",
      "function authFacts(address, uint32) view returns (bytes32)",
      "function authFactsResetTimer(address, uint32) view returns (uint256)",
      "function cancelOutstandingDepositsForExodusMode(uint64 _n, bytes[] _depositsPubdata)",
      "function cutUpgradeNoticePeriod(bytes32 targetsHash)",
      "function cutUpgradeNoticePeriodBySignature(bytes[] signatures)",
      "function exodusMode() view returns (bool)",
      "function firstPriorityRequestId() view returns (uint64)",
      "function performExodus(tuple(uint32 blockNumber, uint64 priorityOperations, bytes32 pendingOnchainOperationsHash, uint256 timestamp, bytes32 stateHash, bytes32 commitment) _storedBlockInfo, address _owner, uint32 _accountId, uint32 _tokenId, uint128 _amount, uint32 _nftCreatorAccountId, address _nftCreatorAddress, uint32 _nftSerialId, bytes32 _nftContentHash, uint256[] _proof)",
      "function revertBlocks(tuple(uint32 blockNumber, uint64 priorityOperations, bytes32 pendingOnchainOperationsHash, uint256 timestamp, bytes32 stateHash, bytes32 commitment)[] _blocksToRevert)",
      "function setAuthPubkeyHash(bytes _pubkeyHash, uint32 _nonce)",
      "function storedBlockHashes(uint32) view returns (bytes32)",
      "function totalBlocksCommitted() view returns (uint32)",
      "function totalBlocksExecuted() view returns (uint32)",
      "function totalBlocksProven() view returns (uint32)",
      "function totalOpenPriorityRequests() view returns (uint64)"
    ],
    "0x34460C0EB5074C29A9F6FE13b8e7E23A0D08aF01": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getNoticePeriod() returns (uint256)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function isReadyForUpgrade() returns (bool)",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationStarted()",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "0x34CfAC646f301356fAa8B21e94227e3583Fe3F5F": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedMasterCopy(address masterCopy)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function NAME() view returns (string)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeMasterCopy(address _masterCopy)",
      "function changeThreshold(uint256 _threshold)",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getMessageHash(bytes message) view returns (bytes32)",
      "function getModules() view returns (address[])",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isOwner(address owner) view returns (bool)",
      "function isValidSignature(bytes _data, bytes _signature) returns (bytes4)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signMessage(bytes _data)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x35cc31f63deef017c38d51B038891bAE7d614e86": [
      "constructor(address _governance, address _listingFeeToken, uint256 _listingFee, uint16 _listingCap, address _treasury)",
      "event ListingCapUpdate(uint16 newListingCap)",
      "event ListingFeeTokenUpdate(address indexed newListingFeeToken, uint256 newListingFee)",
      "event ListingFeeUpdate(uint256 newListingFee)",
      "event TokenListerUpdate(address indexed tokenLister, bool isActive)",
      "event TreasuryUpdate(address newTreasury)",
      "function addToken(address _token)",
      "function governance() view returns (address)",
      "function listingCap() view returns (uint16)",
      "function listingFee() view returns (uint256)",
      "function listingFeeToken() view returns (address)",
      "function setLister(address _listerAddress, bool _active)",
      "function setListingCap(uint16 _newListingCap)",
      "function setListingFee(uint256 _newListingFee)",
      "function setListingFeeToken(address _newListingFeeToken, uint256 _newListingFee)",
      "function setTreasury(address _newTreasury)",
      "function tokenLister(address) view returns (bool)",
      "function treasury() view returns (address)"
    ],
    "0x38A43F4330f24fe920F943409709fc9A6084C939": [
      "constructor(address _mainContract)",
      "event NewUpgradable(uint256 indexed versionId, address indexed upgradeable)",
      "event NoticePeriodStart(uint256 indexed versionId, address[] newTargets, uint256 noticePeriod)",
      "event PreparationStart(uint256 indexed versionId)",
      "event UpgradeCancel(uint256 indexed versionId)",
      "event UpgradeComplete(uint256 indexed versionId, address[] newTargets)",
      "function addUpgradeable(address addr)",
      "function cancelUpgrade()",
      "function finishUpgrade(bytes[] targetsUpgradeParameters)",
      "function getMaster() view returns (address master)",
      "function mainContract() view returns (address)",
      "function managedContracts(uint256) view returns (address)",
      "function nextTargets(uint256) view returns (address)",
      "function noticePeriodFinishTimestamp() view returns (uint256)",
      "function startPreparation() returns (bool)",
      "function startUpgrade(address[] newTargets)",
      "function transferMastership(address _newMaster)",
      "function upgradeStatus() view returns (uint8)",
      "function versionId() view returns (uint256)"
    ],
    "0x3FBc7C6c2437dE24F91b2Ca61Fc7AD3D2D62F4c8": [
      "event NFTFactoryRegisteredCreator(uint32 indexed creatorAccountId, address indexed creatorAddress, address factoryAddress)",
      "event NewGovernor(address newGovernor)",
      "event NewToken(address indexed token, uint16 indexed tokenId)",
      "event NewTokenGovernance(address newTokenGovernance)",
      "event SetDefaultNFTFactory(address indexed factory)",
      "event TokenPausedUpdate(address indexed token, bool paused)",
      "event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive)",
      "function addToken(address _token)",
      "function changeGovernor(address _newGovernor)",
      "function changeTokenGovernance(address _newTokenGovernance)",
      "function defaultFactory() view returns (address)",
      "function getNFTFactory(uint32 _creatorAccountId, address _creatorAddress) view returns (address)",
      "function initialize(bytes initializationParameters)",
      "function isValidTokenId(uint16 _tokenId) view returns (bool)",
      "function networkGovernor() view returns (address)",
      "function nftFactories(uint32, address) view returns (address)",
      "function pausedTokens(uint16) view returns (bool)",
      "function registerNFTFactoryCreator(uint32 _creatorAccountId, address _creatorAddress, bytes _signature)",
      "function requireActiveValidator(address _address) view",
      "function requireGovernor(address _address) view",
      "function setDefaultNFTFactory(address _factory)",
      "function setTokenPaused(address _tokenAddr, bool _tokenPaused)",
      "function setValidator(address _validator, bool _active)",
      "function tokenAddresses(uint16) view returns (address)",
      "function tokenGovernance() view returns (address)",
      "function tokenIds(address) view returns (uint16)",
      "function totalTokens() view returns (uint16)",
      "function upgrade(bytes upgradeParameters)",
      "function validateTokenAddress(address _tokenAddr) view returns (uint16)",
      "function validators(address) view returns (bool)"
    ],
    "0x5290E9582B4FB706EaDf87BB1c129e897e04d06D": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getNoticePeriod() returns (uint256)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function isReadyForUpgrade() returns (bool)",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationStarted()",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "0x7C770595a2Be9A87CF49B35eA9bC534f1a59552D": [
      "constructor(string name, string symbol, address zkSyncAddress)",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event MintNFTFromZkSync(address indexed creator, address indexed recipient, uint32 creatorAccountId, uint32 serialId, bytes32 contentHash, uint256 tokenId)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "function approve(address to, uint256 tokenId)",
      "function balanceOf(address owner) view returns (uint256)",
      "function baseURI() view returns (string)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function getContentHash(uint256 _tokenId) view returns (bytes32)",
      "function getCreatorAccountId(uint256 tokenId) view returns (uint32)",
      "function getCreatorAddress(uint256 tokenId) view returns (address)",
      "function getCreatorFingerprint(uint256 _tokenId) view returns (uint256)",
      "function getSerialId(uint256 tokenId) view returns (uint32)",
      "function ipfsCID(bytes32 source) pure returns (string)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function mintNFTFromZkSync(address creator, address recipient, uint32 creatorAccountId, uint32 serialId, bytes32 contentHash, uint256 tokenId)",
      "function name() view returns (string)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)",
      "function setApprovalForAll(address operator, bool approved)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function tokenByIndex(uint256 index) view returns (uint256)",
      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
      "function tokenURI(uint256 tokenId) view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 tokenId)"
    ],
    "0x8e972b354E6933275513C355Ee14D44A832aD2d9": [
      "constructor()",
      "event ApproveCutUpgradeNoticePeriod(address indexed addr)",
      "event BlockCommit(uint32 indexed blockNumber)",
      "event BlockVerification(uint32 indexed blockNumber)",
      "event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted)",
      "event Deposit(uint16 indexed tokenId, uint128 amount)",
      "event DepositCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)",
      "event ExodusMode()",
      "event FactAuth(address indexed sender, uint32 nonce, bytes fact)",
      "event FullExitCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)",
      "event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, uint256 expirationBlock)",
      "event NoticePeriodChange(uint256 newNoticePeriod)",
      "event Withdrawal(address indexed owner, uint16 indexed tokenId, uint128 amount)",
      "event WithdrawalNFT(uint32 indexed tokenId)",
      "event WithdrawalNFTPending(uint32 indexed tokenId)",
      "event WithdrawalPending(uint16 indexed tokenId, address indexed recipient, uint128 amount, uint8 withdrawalType)",
      "function activateExodusMode() returns (bool)",
      "function authFacts(address, uint32) view returns (bytes32)",
      "function authFactsResetTimer(address, uint32) view returns (uint256)",
      "function cancelOutstandingDepositsForExodusMode(uint64 _n, bytes[] _depositsPubdata)",
      "function commitBlocks(tuple(uint32 blockNumber, uint64 priorityOperations, bytes32 pendingOnchainOperationsHash, uint256 timestamp, bytes32 stateHash, bytes32 commitment) _lastCommittedBlockData, tuple(bytes32 newStateHash, bytes publicData, uint256 timestamp, tuple(bytes ethWitness, uint32 publicDataOffset)[] onchainOperations, uint32 blockNumber, uint32 feeAccount)[] _newBlocksData)",
      "function cutUpgradeNoticePeriod(bytes32 targetsHash)",
      "function cutUpgradeNoticePeriodBySignature(bytes[] signatures)",
      "function depositERC20(address _token, uint104 _amount, address _zkSyncAddress)",
      "function depositETH(address _zkSyncAddress) payable",
      "function executeBlocks(tuple(tuple(uint32 blockNumber, uint64 priorityOperations, bytes32 pendingOnchainOperationsHash, uint256 timestamp, bytes32 stateHash, bytes32 commitment) storedBlock, bytes[] pendingOnchainOpsPubdata)[] _blocksData)",
      "function exodusMode() view returns (bool)",
      "function firstPriorityRequestId() view returns (uint64)",
      "function getNoticePeriod() pure returns (uint256)",
      "function getPendingBalance(address _address, address _token) view returns (uint128)",
      "function initialize(bytes initializationParameters)",
      "function isReadyForUpgrade() pure returns (bool)",
      "function performExodus(tuple(uint32 blockNumber, uint64 priorityOperations, bytes32 pendingOnchainOperationsHash, uint256 timestamp, bytes32 stateHash, bytes32 commitment) _storedBlockInfo, address _owner, uint32 _accountId, uint32 _tokenId, uint128 _amount, uint32 _nftCreatorAccountId, address _nftCreatorAddress, uint32 _nftSerialId, bytes32 _nftContentHash, uint256[] _proof)",
      "function proveBlocks(tuple(uint32 blockNumber, uint64 priorityOperations, bytes32 pendingOnchainOperationsHash, uint256 timestamp, bytes32 stateHash, bytes32 commitment)[] _committedBlocks, tuple(uint256[] recursiveInput, uint256[] proof, uint256[] commitments, uint8[] vkIndexes, uint256[16] subproofsLimbs) _proof)",
      "function requestFullExit(uint32 _accountId, address _token)",
      "function requestFullExitNFT(uint32 _accountId, uint32 _tokenId)",
      "function revertBlocks(tuple(uint32 blockNumber, uint64 priorityOperations, bytes32 pendingOnchainOperationsHash, uint256 timestamp, bytes32 stateHash, bytes32 commitment)[] _blocksToRevert)",
      "function setAuthPubkeyHash(bytes _pubkeyHash, uint32 _nonce)",
      "function storedBlockHashes(uint32) view returns (bytes32)",
      "function totalBlocksCommitted() view returns (uint32)",
      "function totalBlocksExecuted() view returns (uint32)",
      "function totalBlocksProven() view returns (uint32)",
      "function totalOpenPriorityRequests() view returns (uint64)",
      "function transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns (uint128 withdrawnAmount)",
      "function upgrade(bytes upgradeParameters)",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationStarted()",
      "function withdrawPendingBalance(address _owner, address _token, uint128 _amount)",
      "function withdrawPendingNFTBalance(uint32 _tokenId)"
    ],
    "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getNoticePeriod() returns (uint256)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function isReadyForUpgrade() returns (bool)",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationStarted()",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "0xAfC2F2D803479A2AF3A72022D54cc0901a0ec0d6": [
      "constructor(address _masterCopy)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xE24f4870Ab85DE8E356C5fC56138587206c70d99": [
      "constructor(address _masterCopy)"
    ],
    "0xf7Bd436a05678B647D74a88ffcf4445Efc43BDfC": [
      "function initialize(bytes)",
      "function upgrade(bytes upgradeParameters)",
      "function verifyAggregatedBlockProof(uint256[] _recursiveInput, uint256[] _proof, uint8[] _vkIndexes, uint256[] _individualVksInputs, uint256[16] _subproofsLimbs) view returns (bool)",
      "function verifyExitProof(bytes32 _rootHash, uint32 _accountId, address _owner, uint32 _tokenId, uint128 _amount, uint32 _nftCreatorAccountId, address _nftCreatorAddress, uint32 _nftSerialId, bytes32 _nftContentHash, uint256[] _proof) view returns (bool)",
      "function verify_serialized_proof(uint256[] public_inputs, uint256[] serialized_proof, tuple(uint256 domain_size, uint256 num_inputs, tuple(uint256 value) omega, tuple(uint256 X, uint256 Y)[7] gate_setup_commitments, tuple(uint256 X, uint256 Y)[2] gate_selector_commitments, tuple(uint256 X, uint256 Y)[4] copy_permutation_commitments, tuple(uint256 value)[3] copy_permutation_non_residues, tuple(uint256[2] X, uint256[2] Y) g2_x) vk) view returns (bool)",
      "function verify_serialized_proof_with_recursion(uint256[] public_inputs, uint256[] serialized_proof, uint256 recursive_vks_root, uint8 max_valid_index, uint8[] recursive_vks_indexes, uint256[] individual_vks_inputs, uint256[16] subproofs_limbs, tuple(uint256 domain_size, uint256 num_inputs, tuple(uint256 value) omega, tuple(uint256 X, uint256 Y)[7] gate_setup_commitments, tuple(uint256 X, uint256 Y)[2] gate_selector_commitments, tuple(uint256 X, uint256 Y)[4] copy_permutation_commitments, tuple(uint256 value)[3] copy_permutation_non_residues, tuple(uint256[2] X, uint256[2] Y) g2_x) vk) view returns (bool)"
    ]
  }
}
