{
  "name": "sonicgateway",
  "chain": "ethereum",
  "blockNumber": 21766633,
  "configHash": "0xef5bfd8375fbcac1983e84dfb9428030bc566acdcccdd798e77db2aeadfa86c8",
  "contracts": [
    {
      "name": "ValidatorsRegistry",
      "address": "0x72965045A6691E5A74299D1e878f303264D4D910",
      "sourceHashes": [
        "0xcc25aa0a3dfaee567102dda1bbc3cac11de3d99aedbb1be6b059dc6230d61f8c"
      ],
      "description": "Registry of the current validator set. Validators can have different weights and be changed on each state update (signed by the current validators).",
      "issuedPermissions": [
        {
          "permission": "validateBridge",
          "to": "0x2534ED5d1303F035fa7e5d6a52199e59328B3F72",
          "via": []
        },
        {
          "permission": "validateBridge",
          "to": "0x32744b98cC03A76C0559e905a31E8474a31729c1",
          "via": []
        },
        {
          "permission": "validateBridge",
          "to": "0x34F01d6B8ad8eB46D2A7bEcCc8611EED04ef5d65",
          "via": []
        },
        {
          "permission": "validateBridge",
          "to": "0x3Dd6C793AbA45738e531639977a292A3A8E32C9D",
          "via": []
        },
        {
          "permission": "validateBridge",
          "to": "0x551a7DAD9a14EfD0289c8ed3e52cf8352dc52011",
          "via": []
        },
        {
          "permission": "validateBridge",
          "to": "0x8406de45bfAca854d08377ca1436C6b4785b4D79",
          "via": []
        },
        {
          "permission": "validateBridge",
          "to": "0x92E33222A1389aAf89C0794643fBBC7E679a6Dad",
          "via": []
        },
        {
          "permission": "validateBridge",
          "to": "0xb8B86aAa072B3aa26d0D02A81642d00Bf58f6572",
          "via": []
        }
      ],
      "sinceTimestamp": 1734690491,
      "values": {
        "$immutable": true,
        "getQuorum": 533,
        "lastValidatorId": 8,
        "owner": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4",
        "stateOracle": "0xB7e8CC3F5FeA12443136f0cc13D81F109B2dEd7f",
        "totalWeight": 800,
        "validator1Weight": 100,
        "validator2Weight": 100,
        "validator3Weight": 100,
        "validator4Weight": 100,
        "validator5Weight": 100,
        "validator6Weight": 100,
        "validator7Weight": 100,
        "validator8Weight": 100,
        "validatorAddress": [
          "0x0000000000000000000000000000000000000000",
          "0x92E33222A1389aAf89C0794643fBBC7E679a6Dad",
          "0xb8B86aAa072B3aa26d0D02A81642d00Bf58f6572",
          "0x32744b98cC03A76C0559e905a31E8474a31729c1",
          "0x551a7DAD9a14EfD0289c8ed3e52cf8352dc52011",
          "0x34F01d6B8ad8eB46D2A7bEcCc8611EED04ef5d65",
          "0x8406de45bfAca854d08377ca1436C6b4785b4D79",
          "0x3Dd6C793AbA45738e531639977a292A3A8E32C9D",
          "0x2534ED5d1303F035fa7e5d6a52199e59328B3F72"
        ]
      },
      "derivedName": "ValidatorsRegistry"
    },
    {
      "name": "DirectExitAdministrator",
      "address": "0x7390251Bf35AA7eA7C196fc4750bd5d6c5918329",
      "sourceHashes": [
        "0x8098841579ecf27111655e2469db7694f23f693dcd7bc781864783f8c03ea4df"
      ],
      "severity": "HIGH",
      "receivedPermissions": [
        {
          "permission": "configure",
          "from": "0xa1E2481a9CD0Cb0447EeB1cbc26F1b3fff3bec20",
          "description": "call `withdrawWhileDead()` to withdraw escrowed tokens when the bridge liveness self-check has failed."
        }
      ],
      "sinceTimestamp": 1734690695,
      "values": {
        "$immutable": true,
        "deposit": "0xa1E2481a9CD0Cb0447EeB1cbc26F1b3fff3bec20"
      }
    },
    {
      "name": "SonicGatewayOpsMultisig",
      "address": "0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "configure",
          "from": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4",
          "description": "set permissioned relayers."
        },
        {
          "permission": "configure",
          "from": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4",
          "description": "set the fast lane fee."
        },
        {
          "permission": "configure",
          "from": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4",
          "description": "set the number of blocks (Sonic L1 blocks) at which periodic state root updates to Ethereum are expected (heartbeat)."
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1734794243,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "0xfa2A05E6b505C3fCe3d8676149Ec6a4fBF1231cB",
          "0x597Fa3ad161B16f450e257eD71bE8404BDEFCdC9",
          "0x80957D62C7Cc252E5dd2f8691a9afB3087f88Fa1"
        ],
        "$threshold": 2,
        "domainSeparator": "0x40b7a1abeebce8f111e2609021710f9678f6feb89449097ec25fe19a4e26132f",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 3 (67%)",
        "nonce": 13,
        "VERSION": "1.4.1"
      },
      "derivedName": "Safe"
    },
    {
      "name": "MPTProofVerifier",
      "address": "0x921B147a90Ef738BBb7c2c89D88ea9d8Af3e9306",
      "sourceHashes": [
        "0xfca61099dca9ccc6f9eb4019b9ca13d0b1cbe6e68f74766cb39e25550441701e"
      ],
      "description": "Verifier contract for merkle proofs.",
      "sinceTimestamp": 1734690407,
      "values": { "$immutable": true },
      "derivedName": "MPTProofVerifier"
    },
    {
      "name": "SonicGatewayMultisig",
      "address": "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "configure",
          "from": "0xa1E2481a9CD0Cb0447EeB1cbc26F1b3fff3bec20",
          "description": "set the proof verifier and the exit administrator."
        },
        {
          "permission": "configure",
          "from": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4",
          "description": "manage all access control roles."
        },
        {
          "permission": "configure",
          "from": "0xf2b1510c2709072C88C5b14db90Ec3b6297193e4",
          "description": "add tokens to the whitelist."
        },
        {
          "permission": "configure",
          "from": "0xf2b1510c2709072C88C5b14db90Ec3b6297193e4",
          "description": "manage access control roles."
        },
        {
          "permission": "configure",
          "from": "0xf2b1510c2709072C88C5b14db90Ec3b6297193e4",
          "description": "remove tokens from the whitelist."
        },
        {
          "permission": "upgrade",
          "from": "0xa1E2481a9CD0Cb0447EeB1cbc26F1b3fff3bec20"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1733407067,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "0x80957D62C7Cc252E5dd2f8691a9afB3087f88Fa1",
          "0x6E9f215876d210E5c8A197DF598db2d8FE09F6C5",
          "0xA7bC226C9586DcD93FF1b0B038C04e89b37C8fa7",
          "0x2D407dDb06311396fE14D4b49da5F0471447d45C"
        ],
        "$threshold": 3,
        "domainSeparator": "0xb58116801c9725bab8724b2382a814662ec4c17ffcc756efb488be203816e707",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 4 (75%)",
        "nonce": 24,
        "VERSION": "1.4.1"
      },
      "derivedName": "Safe"
    },
    {
      "name": "TokenDeposit",
      "address": "0xa1E2481a9CD0Cb0447EeB1cbc26F1b3fff3bec20",
      "sourceHashes": [
        "0x29faf4889af43049c742ca34aeff493c079c023986c7f794a3dbfe3b1c642d09",
        "0xa91b55bb0cd39f657105bf6422bd209274305ae3556f2f802a822a891fabfa0e"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Escrows the tokens that are bridged to Sonic. Users call this contract to deposit when bridging to Sonic, and to withdraw when bridging back to Ethereum. Since this contract escrows all tokens and defines the oracle and verification contracts, an upgrade of this contract can overwrite the logic of the whole bridge and potentially steal all funds.",
      "issuedPermissions": [
        {
          "permission": "configure",
          "to": "0x7390251Bf35AA7eA7C196fc4750bd5d6c5918329",
          "description": "call `withdrawWhileDead()` to withdraw escrowed tokens when the bridge liveness self-check has failed.",
          "via": []
        },
        {
          "permission": "configure",
          "to": "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0",
          "description": "set the proof verifier and the exit administrator.",
          "via": []
        },
        {
          "permission": "upgrade",
          "to": "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0",
          "via": []
        }
      ],
      "sinceTimestamp": 1734690647,
      "values": {
        "$admin": "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0",
        "$implementation": "0x4cbd824685F1E21B119F230B54d65C5a7D2a5330",
        "$pastUpgrades": [
          [
            "2024-12-20T10:30:47.000Z",
            "0x5879a36c903422bd6ce93ddc176c999c831a926cd751ceb9753490b32353e08d",
            ["0xd8a7d475931193C84b57663fb33a1738df83Ce6f"]
          ],
          [
            "2024-12-23T17:54:23.000Z",
            "0x8186d6acbf5d0d33ccb6a7054e1e9f61649873e7c85bdf7cd11825a266db5983",
            ["0x4cbd824685F1E21B119F230B54d65C5a7D2a5330"]
          ]
        ],
        "$upgradeCount": 2,
        "bridge": "0x9Ef7629F9B930168b76283AdD7120777b3c895b3",
        "deadState": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EURC_BURN_PREPARER_ROLE": "0xea9b585a6ebd9633ce15a00ac59a64be294805b254faeed18790c2161e44e71a",
        "exitAdministrator": "0x7390251Bf35AA7eA7C196fc4750bd5d6c5918329",
        "owner": "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0",
        "proofVerifier": "0x921B147a90Ef738BBb7c2c89D88ea9d8Af3e9306",
        "stateOracle": "0xB7e8CC3F5FeA12443136f0cc13D81F109B2dEd7f",
        "TimeUntilDead": "200d",
        "tokenPairs": "0xf2b1510c2709072C88C5b14db90Ec3b6297193e4",
        "UPGRADE_INTERFACE_VERSION": "5.0.0",
        "USDC_BURN_PREPARER_ROLE": "0x366e34e4dd9cacc5f69a0ea920636c292b34b8951987dd08682365f7701b86f6",
        "USDT_BURN_PREPARER_ROLE": "0xcc83783a336c5977a84d3445de8848e96ef07372a420bac3d7f276ab3bcb0b40"
      },
      "fieldMeta": {
        "exitAdministrator": { "severity": "HIGH" },
        "proofVerifier": { "severity": "HIGH" },
        "stateOracle": { "severity": "HIGH" },
        "deadState": { "severity": "HIGH" }
      },
      "derivedName": "TokenDeposit"
    },
    {
      "name": "UpdateManager",
      "address": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4",
      "sourceHashes": [
        "0x29faf4889af43049c742ca34aeff493c079c023986c7f794a3dbfe3b1c642d09",
        "0xfecbe59e70f38272cb616319820802e07cc538b07b4eb586855b0ca363db6ce9"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Entry point for state (oracle) updates.",
      "issuedPermissions": [
        {
          "permission": "configure",
          "to": "0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B",
          "description": "set permissioned relayers.",
          "via": []
        },
        {
          "permission": "configure",
          "to": "0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B",
          "description": "set the fast lane fee.",
          "via": []
        },
        {
          "permission": "configure",
          "to": "0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B",
          "description": "set the number of blocks (Sonic L1 blocks) at which periodic state root updates to Ethereum are expected (heartbeat).",
          "via": []
        },
        {
          "permission": "configure",
          "to": "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0",
          "description": "manage all access control roles.",
          "via": []
        },
        {
          "permission": "relay",
          "to": "0x11b0E7Bef4046dD43b09489926F30514584B1161",
          "via": []
        },
        {
          "permission": "relay",
          "to": "0xa55e557Ab2Cc2DFa84Cd199e1fA1CB6E37326C4D",
          "via": []
        }
      ],
      "receivedPermissions": [
        {
          "permission": "configure",
          "from": "0xB7e8CC3F5FeA12443136f0cc13D81F109B2dEd7f",
          "description": "update the state root."
        }
      ],
      "ignoreInWatchMode": ["lastBlockNum"],
      "sinceTimestamp": 1734690815,
      "values": {
        "$admin": "0x0000000000000000000000000000000000000000",
        "$implementation": "0x50c42dEAcD8Fc9773493ED674b675bE577f2634b",
        "$pastUpgrades": [
          [
            "2024-12-20T10:33:35.000Z",
            "0x33fa52748a5e6fa91b32346f5cadb3e562bae7721858bed27ef640cc255b68d7",
            ["0x13bd43A6BE5795D4A4E3Efc4baC21Cd36Ae9e68A"]
          ],
          [
            "2025-01-17T21:24:23.000Z",
            "0xbac9b4af00eafd37875f3079cb05af1fe27ec8d09814cdb5695424550d54ed7a",
            ["0x50c42dEAcD8Fc9773493ED674b675bE577f2634b"]
          ]
        ],
        "$upgradeCount": 2,
        "acAdmin": ["0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0"],
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0"]
          },
          "FEE_SETTER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B"]
          },
          "HEARTBEAT_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B"]
          },
          "RELAY_ROLE": {
            "adminRole": "RELAY_ADMIN_ROLE",
            "members": [
              "0x11b0E7Bef4046dD43b09489926F30514584B1161",
              "0xa55e557Ab2Cc2DFa84Cd199e1fA1CB6E37326C4D"
            ]
          },
          "RELAY_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B"]
          }
        },
        "acFeeSetter": ["0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B"],
        "acHeartbeat": ["0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B"],
        "acRelay": [
          "0x11b0E7Bef4046dD43b09489926F30514584B1161",
          "0xa55e557Ab2Cc2DFa84Cd199e1fA1CB6E37326C4D"
        ],
        "acRelayAdmin": ["0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B"],
        "activityMonitor": "0x0000000000000000000000000000000000000000",
        "chainId": 146,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "fastLaneFee": 6500000000000000,
        "fastLaneInUse": false,
        "fastLanePadding": 100,
        "FEE_SETTER_ROLE": "0xe6ad9a47fbda1dc18de1eb5eeb7d935e5e81b4748f3cfc61e233e64f88182060",
        "heartbeat": 6300,
        "HEARTBEAT_ROLE": "0x263f662867aed1ef0af950501cca3a06ac1a44f50df3b69605c41b638ae96976",
        "lastBlockNum": 6407100,
        "MONITOR_SETTER_ROLE": "0xa6ff0d617d2470b6d2096e183aa717d0ec41683b3ff292b2c29f38eecfd14c5c",
        "proofVerifier": "0x921B147a90Ef738BBb7c2c89D88ea9d8Af3e9306",
        "provingContract": "0xa1E2481a9CD0Cb0447EeB1cbc26F1b3fff3bec20",
        "RELAY_ADMIN_ROLE": "0xf332bf0a3b0e0c7961f2ab179184e8d3d849d12d0319ce7cf34b95605336f897",
        "RELAY_ROLE": "0x077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7",
        "stateOracle": "0xB7e8CC3F5FeA12443136f0cc13D81F109B2dEd7f",
        "updateVerifier": "0x72965045A6691E5A74299D1e878f303264D4D910",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "UpdateManager"
    },
    {
      "name": "StateOracle",
      "address": "0xB7e8CC3F5FeA12443136f0cc13D81F109B2dEd7f",
      "sourceHashes": [
        "0x32d9b287383d91a40dcf024a5f38e044b104c231806ecf21aa5867f45f895eb0"
      ],
      "description": "Simple contract that saves the latest state root.",
      "issuedPermissions": [
        {
          "permission": "configure",
          "to": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4",
          "description": "update the state root.",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["lastBlockNum", "lastState", "lastUpdateTime"],
      "sinceTimestamp": 1734690443,
      "values": {
        "$immutable": true,
        "chainId": 146,
        "lastBlockNum": 6407100,
        "lastState": "0x1e4dd2c7434e8393889f81a784a5baaf0930e50c8e620e5c4c774ef53eaf3c29",
        "lastUpdateTime": 1738593395,
        "owner": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4"
      },
      "derivedName": "StateOracle"
    },
    {
      "name": "TokenPairs",
      "address": "0xf2b1510c2709072C88C5b14db90Ec3b6297193e4",
      "sourceHashes": [
        "0x29faf4889af43049c742ca34aeff493c079c023986c7f794a3dbfe3b1c642d09",
        "0x2527d117bfcdd69b3e49a08514f4e5090307308646ebf2f019e382e7c4968fb3"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Token pairs are whitelisted in this contract for bridging through the Sonc Gateway.",
      "issuedPermissions": [
        {
          "permission": "configure",
          "to": "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0",
          "description": "add tokens to the whitelist.",
          "via": []
        },
        {
          "permission": "configure",
          "to": "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0",
          "description": "manage access control roles.",
          "via": []
        },
        {
          "permission": "configure",
          "to": "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0",
          "description": "remove tokens from the whitelist.",
          "via": []
        }
      ],
      "sinceTimestamp": 1734690539,
      "values": {
        "$admin": "0x0000000000000000000000000000000000000000",
        "$implementation": "0x0c40Ae1c82401EA741953D3f026ADc07BE9e7943",
        "$pastUpgrades": [
          [
            "2024-12-20T10:28:59.000Z",
            "0xc793a201858182f97a65c563295dc14c1bb63902b6af4afc6c367eafe9edcc1b",
            ["0x0c40Ae1c82401EA741953D3f026ADc07BE9e7943"]
          ]
        ],
        "$upgradeCount": 1,
        "acAdmin": ["0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0"],
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0"]
          },
          "REGISTER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0"]
          },
          "UNREGISTER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0"]
          }
        },
        "acRegister": ["0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0"],
        "acUnregister": ["0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0"],
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "REGISTER_ROLE": "0xd1f21ec03a6eb050fba156f5316dad461735df521fb446dd42c5a4728e9c70fe",
        "TERMINATOR_ROLE": "0x26aab3fbd9c7d505a96c193ccd3127894549d6ee75e38e08a6cef48fbab511e8",
        "UNREGISTER_ROLE": "0x822120e1e3a621ffae2121fc52e9eb301eb26b031334bbf3018f0954c7360700",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "TokenPairs"
    }
  ],
  "eoas": [
    {
      "address": "0x0000000000000000000000000000000000000000",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4"
        },
        {
          "permission": "upgrade",
          "from": "0xf2b1510c2709072C88C5b14db90Ec3b6297193e4"
        },
        {
          "permission": "validateBridge",
          "from": "0x72965045A6691E5A74299D1e878f303264D4D910"
        }
      ]
    },
    {
      "address": "0x11b0E7Bef4046dD43b09489926F30514584B1161",
      "receivedPermissions": [
        {
          "permission": "relay",
          "from": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4"
        }
      ]
    },
    {
      "address": "0x2534ED5d1303F035fa7e5d6a52199e59328B3F72",
      "receivedPermissions": [
        {
          "permission": "validateBridge",
          "from": "0x72965045A6691E5A74299D1e878f303264D4D910"
        }
      ]
    },
    { "address": "0x2D407dDb06311396fE14D4b49da5F0471447d45C" },
    {
      "address": "0x32744b98cC03A76C0559e905a31E8474a31729c1",
      "receivedPermissions": [
        {
          "permission": "validateBridge",
          "from": "0x72965045A6691E5A74299D1e878f303264D4D910"
        }
      ]
    },
    {
      "address": "0x34F01d6B8ad8eB46D2A7bEcCc8611EED04ef5d65",
      "receivedPermissions": [
        {
          "permission": "validateBridge",
          "from": "0x72965045A6691E5A74299D1e878f303264D4D910"
        }
      ]
    },
    {
      "address": "0x3Dd6C793AbA45738e531639977a292A3A8E32C9D",
      "receivedPermissions": [
        {
          "permission": "validateBridge",
          "from": "0x72965045A6691E5A74299D1e878f303264D4D910"
        }
      ]
    },
    {
      "address": "0x551a7DAD9a14EfD0289c8ed3e52cf8352dc52011",
      "receivedPermissions": [
        {
          "permission": "validateBridge",
          "from": "0x72965045A6691E5A74299D1e878f303264D4D910"
        }
      ]
    },
    { "address": "0x597Fa3ad161B16f450e257eD71bE8404BDEFCdC9" },
    { "address": "0x6E9f215876d210E5c8A197DF598db2d8FE09F6C5" },
    { "address": "0x80957D62C7Cc252E5dd2f8691a9afB3087f88Fa1" },
    {
      "address": "0x8406de45bfAca854d08377ca1436C6b4785b4D79",
      "receivedPermissions": [
        {
          "permission": "validateBridge",
          "from": "0x72965045A6691E5A74299D1e878f303264D4D910"
        }
      ]
    },
    {
      "address": "0x92E33222A1389aAf89C0794643fBBC7E679a6Dad",
      "receivedPermissions": [
        {
          "permission": "validateBridge",
          "from": "0x72965045A6691E5A74299D1e878f303264D4D910"
        }
      ]
    },
    {
      "address": "0xa55e557Ab2Cc2DFa84Cd199e1fA1CB6E37326C4D",
      "receivedPermissions": [
        {
          "permission": "relay",
          "from": "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4"
        }
      ]
    },
    { "address": "0xA7bC226C9586DcD93FF1b0B038C04e89b37C8fa7" },
    {
      "address": "0xb8B86aAa072B3aa26d0D02A81642d00Bf58f6572",
      "receivedPermissions": [
        {
          "permission": "validateBridge",
          "from": "0x72965045A6691E5A74299D1e878f303264D4D910"
        }
      ]
    },
    { "address": "0xfa2A05E6b505C3fCe3d8676149Ec6a4fBF1231cB" }
  ],
  "abis": {
    "0x0c40Ae1c82401EA741953D3f026ADc07BE9e7943": [
      "constructor()",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event Initialized(uint64 version)",
      "event Registered(address indexed original, address indexed minted)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Terminated(address indexed original, address indexed minted)",
      "event Unregistered(address indexed original, address indexed minted)",
      "event Upgraded(address indexed implementation)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function REGISTER_ROLE() view returns (bytes32)",
      "function TERMINATOR_ROLE() view returns (bytes32)",
      "function UNREGISTER_ROLE() view returns (bytes32)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin)",
      "function mintedToOriginal(address minted) view returns (address original)",
      "function originalToMinted(address original) view returns (address minted)",
      "function originalToMintedTerminable(address original) view returns (address minted)",
      "function proxiableUUID() view returns (bytes32)",
      "function register(address original, address minted)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function terminateEURC()",
      "function terminateUSDC()",
      "function terminateUSDT()",
      "function unregister(address original, address minted)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x41675C099F32341bf84BFc5382aF534df5C7461a": [
      "constructor()",
      "event AddedOwner(address indexed owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address indexed handler)",
      "event ChangedGuard(address indexed guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address indexed module)",
      "event EnabledModule(address indexed module)",
      "event ExecutionFailure(bytes32 indexed txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 indexed txHash, uint256 payment)",
      "event RemovedOwner(address indexed owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x4cbd824685F1E21B119F230B54d65C5a7D2a5330": [
      "constructor(address _bridge, address _tokenPairs, address _stateOracle)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ReentrancyGuardReentrantCall()",
      "error SafeERC20FailedOperation(address token)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event BridgeDied()",
      "event BurningEurcPrepared(address burner, uint256 amount)",
      "event BurningUsdcPrepared(address burner, uint256 amount)",
      "event BurningUsdtPrepared(address burner, uint256 amount)",
      "event CancelledWhileDead(uint256 id, address indexed owner, address token, uint256 amount)",
      "event Claim(uint256 id, address indexed owner, address token, uint256 amount)",
      "event Deposit(uint256 indexed id, address indexed owner, address token, uint256 amount)",
      "event ExitAdministratorSet(address _exitAdministrator)",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProofVerifierSet(address proofVerifier)",
      "event Upgraded(address indexed implementation)",
      "event WithdrawnWhileDead(address indexed owner, address token, uint256 amount)",
      "function EURC_BURN_PREPARER_ROLE() view returns (bytes32)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function USDC_BURN_PREPARER_ROLE() view returns (bytes32)",
      "function USDT_BURN_PREPARER_ROLE() view returns (bytes32)",
      "function bridge() view returns (address)",
      "function burnLockedEURC()",
      "function burnLockedUSDC()",
      "function burnLockedUSDT()",
      "function cancelDepositWhileDead(uint256 id, address token, uint256 amount, bytes proof)",
      "function claim(uint256 id, address token, uint256 amount, bytes proof)",
      "function claims(uint256 withdrawalId) view returns (bool isClaimed)",
      "function deadState() view returns (bytes32)",
      "function deposit(uint96 uid, address token, uint256 amount)",
      "function deposits(uint256 depositId) view returns (bytes32 senderTokenAmount)",
      "function exitAdministrator() view returns (address)",
      "function fetchDeadStatus() returns (bool)",
      "function getClaimSlotIndex(uint256 id) pure returns (bytes32)",
      "function getWithdrawalSlotIndex(uint256 id) pure returns (bytes32)",
      "function hash(address sender, address token, uint256 amount) pure returns (bytes32)",
      "function initialize(address _proofVerifier, address _owner, address _exitAdministrator)",
      "function owner() view returns (address)",
      "function prepareBurningEURC(address burner, uint256 amount)",
      "function prepareBurningUSDC(address burner, uint256 amount)",
      "function prepareBurningUSDT(address burner, uint256 amount)",
      "function proofVerifier() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function setExitAdministrator(address _exitAdministrator)",
      "function setProofVerifier(address _proofVerifier)",
      "function stateOracle() view returns (address)",
      "function tokenPairs() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function userOperationId(address sender, uint96 uid) pure returns (uint256)",
      "function withdrawWhileDead(address recipient, address token, uint256 amount)"
    ],
    "0x50c42dEAcD8Fc9773493ED674b675bE577f2634b": [
      "constructor(address _stateOracle, address _provingContract)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event ActivityMonitorSet(address activityMonitor)",
      "event FastLaneFeeSet(uint256 fee)",
      "event FastLanePaddingSet(uint256 padding)",
      "event FastLaneRequest(uint256 blockNum)",
      "event HeartbeatSet(uint256 heartbeat)",
      "event Initialized(uint64 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UpdateVerifierSet(address updateVerifier)",
      "event Upgraded(address indexed implementation)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function FEE_SETTER_ROLE() view returns (bytes32)",
      "function HEARTBEAT_ROLE() view returns (bytes32)",
      "function MONITOR_SETTER_ROLE() view returns (bytes32)",
      "function RELAY_ADMIN_ROLE() view returns (bytes32)",
      "function RELAY_ROLE() view returns (bytes32)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function activityMonitor() view returns (address)",
      "function chainId() view returns (uint256)",
      "function fastLaneFee() view returns (uint256)",
      "function fastLaneInUse() view returns (bool)",
      "function fastLanePadding() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function heartbeat() view returns (uint256)",
      "function initialize(address admin, address _updateVerifier, uint256 _heartbeat)",
      "function initializeRelayRole()",
      "function lastBlockNum() view returns (uint256)",
      "function payFastLane(uint256 blockNum) payable",
      "function proofVerifier() view returns (address)",
      "function provingContract() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function setActivityMonitor(address _monitor)",
      "function setFastLaneFee(uint256 _fee)",
      "function setFastLanePadding(uint256 _padding)",
      "function setHeartbeat(uint256 _heartbeat)",
      "function stateOracle() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function update(uint256 blockNum, bytes32 stateRoot, bytes newValidators, address _proofVerifier, address _updateVerifier, address _exitAdmin, bytes[] signatures)",
      "function updateVerifier() view returns (address)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x72965045A6691E5A74299D1e878f303264D4D910": [
      "constructor(address _stateOracle, address _ownedBy)",
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getQuorum() view returns (uint256)",
      "function lastValidatorId() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setValidators(bytes newValidatorsBytes)",
      "function stateOracle() view returns (address)",
      "function totalWeight() view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function validatorAddress(uint256) view returns (address)",
      "function validatorId(address validatorAddr) view returns (uint256 validatorId)",
      "function validatorWeight(address validatorId) view returns (uint256 weight)",
      "function verifyUpdate(uint256 blockNum, bytes32 stateRoot, uint256 chainId, bytes newValidators, address proofVerifier, address updateVerifier, address exitAdmin, bytes[] signatures) view returns (uint256[])"
    ],
    "0x7390251Bf35AA7eA7C196fc4750bd5d6c5918329": [
      "constructor(address _deposit)",
      "function deposit() view returns (address)",
      "function getBalanceSlotIndex(address account) pure returns (bytes32)",
      "function tokenWithdrawn(bytes32 senderToken) view returns (bool isWithdrawn)",
      "function withdraw(address token, uint256 amount, bytes proof)"
    ],
    "0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B": [
      "constructor(address _singleton)"
    ],
    "0x921B147a90Ef738BBb7c2c89D88ea9d8Af3e9306": [
      "function verifyProof(address contractAddress, bytes32 slotIndex, bytes32 expectedValue, bytes32 stateRoot, bytes proof) pure"
    ],
    "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0": [
      "constructor(address _singleton)"
    ],
    "0xa1E2481a9CD0Cb0447EeB1cbc26F1b3fff3bec20": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0xB7e8CC3F5FeA12443136f0cc13D81F109B2dEd7f": [
      "constructor(address _ownedBy, uint256 _chainId)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function chainId() view returns (uint256)",
      "function lastBlockNum() view returns (uint256)",
      "function lastState() view returns (bytes32)",
      "function lastUpdateTime() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function update(uint256 blockNum, bytes32 stateRoot)"
    ],
    "0xf2b1510c2709072C88C5b14db90Ec3b6297193e4": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "event Upgraded(address indexed implementation)"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0x354d36e57cbd86810e3718a66aba98e45bf3c7b96661ab24975e59c0dff79ad2"
  }
}
