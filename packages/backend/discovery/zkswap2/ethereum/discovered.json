{
  "name": "zkswap2",
  "blockNumber": 16767881,
  "configHash": "0x7f3ccda277a8017e016b8cd920cfddf0bd30352c6a3b27313083173d96866b8d",
  "contracts": [
    {
      "name": "UpgradeGatekeeper",
      "address": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7",
      "unverified": true,
      "code": "https://etherscan.deth.net/address/0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "getMaster": "0x9D7397204F32e0Ee919Ea3475630cdf131086255",
        "mainContract": "0x6dE5bDC580f55Bc9dAcaFCB67b91674040A247e3",
        "managedContracts": [
          "0x86E527BC3C43E6Ba3eFf3A8CAd54A7Ed09cD8E8B",
          "0xD2cbDcd7C6b3152BdFf6549C208052E4DBcd575D",
          "0x42F15EFE22993C88441EF3467f2E6Fa8FFA9ADef",
          "0xb56878d21F6b101f48bb55f1AA9D3F624f04E513",
          "0x6dE5bDC580f55Bc9dAcaFCB67b91674040A247e3"
        ]
      },
      "derivedName": ""
    },
    {
      "name": "Verifier",
      "address": "0x42F15EFE22993C88441EF3467f2E6Fa8FFA9ADef",
      "code": "https://etherscan.deth.net/address/0x42F15EFE22993C88441EF3467f2E6Fa8FFA9ADef,0x94b9401945a9bc06CE5B69e6dB3c6B671aABc829",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x94b9401945a9bc06CE5B69e6dB3c6B671aABc829",
        "admin": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"
      },
      "values": {
        "getMaster": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7",
        "getTarget": "0x94b9401945a9bc06CE5B69e6dB3c6B671aABc829"
      }
    },
    {
      "name": "ZkSync",
      "address": "0x6dE5bDC580f55Bc9dAcaFCB67b91674040A247e3",
      "code": "https://etherscan.deth.net/address/0x6dE5bDC580f55Bc9dAcaFCB67b91674040A247e3,0xf2c351f22b148A9fF583a0F81701471a74E7338e",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xf2c351f22b148A9fF583a0F81701471a74E7338e",
        "admin": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"
      },
      "values": {
        "EMPTY_STRING_KECCAK": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
        "exodusMode": false,
        "firstPendingWithdrawalIndex": 1770,
        "firstPriorityRequestId": 1811,
        "getMaster": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7",
        "getTarget": "0xf2c351f22b148A9fF583a0F81701471a74E7338e",
        "governance": "0x86E527BC3C43E6Ba3eFf3A8CAd54A7Ed09cD8E8B",
        "maxDepositAmount": "39614081257132168796771975168",
        "numberOfPendingWithdrawals": 0,
        "pairManager": "0xD2cbDcd7C6b3152BdFf6549C208052E4DBcd575D",
        "totalBlocksChecked": 32245,
        "totalBlocksCommitted": 32245,
        "totalBlocksVerified": 32245,
        "totalCommittedPriorityRequests": 0,
        "totalOpenPriorityRequests": 0,
        "totalPairTokens": 72,
        "upgradePreparationActivationTime": 0,
        "upgradePreparationActive": false,
        "verifier": "0x42F15EFE22993C88441EF3467f2E6Fa8FFA9ADef",
        "verifierExit": "0xb56878d21F6b101f48bb55f1AA9D3F624f04E513",
        "withdrawGasLimit": 350000,
        "zkSyncCommitBlockAddress": "0xE26Ebb18144CD2d8DCB14cE87fdCfbEb81baCAD4",
        "zkSyncExitAddress": "0xC0221a4Dfb792AA71CE84C2687b1D2b1E7D3eea0"
      }
    },
    {
      "name": "Governance",
      "address": "0x86E527BC3C43E6Ba3eFf3A8CAd54A7Ed09cD8E8B",
      "code": "https://etherscan.deth.net/address/0x86E527BC3C43E6Ba3eFf3A8CAd54A7Ed09cD8E8B,0x95269f9E76540459c797089034dc74b48dF780a2",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x95269f9E76540459c797089034dc74b48dF780a2",
        "admin": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"
      },
      "values": {
        "getMaster": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7",
        "getTarget": "0x95269f9E76540459c797089034dc74b48dF780a2",
        "networkGovernor": "0x9D7397204F32e0Ee919Ea3475630cdf131086255",
        "tokenLister": "0xb3BFC153d60f51Fb10E69B04f5f7D2735fA0619E",
        "totalFeeTokens": 10,
        "totalUserTokens": 45,
        "validators": ["0x38101ae98196C8BCf7dF1835Bf3983B384272ae4"]
      }
    },
    {
      "name": "ZkSwapListing",
      "address": "0xb3BFC153d60f51Fb10E69B04f5f7D2735fA0619E",
      "code": "https://etherscan.deth.net/address/0xb3BFC153d60f51Fb10E69B04f5f7D2735fA0619E",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "listingCap": 1000,
        "listingCount": 72,
        "listingFeeAmount": 0,
        "listingFeeReceiver": "0x961B513dfD3e363c238E0f98219eE02552A847BD",
        "listingFeeToken": "0xe4815AE53B124e7263F08dcDBBB757d41Ed658c6",
        "owner": "0x961B513dfD3e363c238E0f98219eE02552A847BD",
        "paused": false,
        "tokenDecimalsLimit": 32,
        "tokenNameLimit": 64,
        "tokenSymbolLimit": 64
      }
    },
    {
      "name": "VerifierExit",
      "address": "0xb56878d21F6b101f48bb55f1AA9D3F624f04E513",
      "unverified": true,
      "code": "https://etherscan.deth.net/address/0xb56878d21F6b101f48bb55f1AA9D3F624f04E513,0x17e51B3659884d70a306906B5BDD73D1c64a3892",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x17e51B3659884d70a306906B5BDD73D1c64a3892",
        "admin": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"
      },
      "values": {
        "getMaster": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7",
        "getTarget": "0x17e51B3659884d70a306906B5BDD73D1c64a3892"
      },
      "derivedName": ""
    },
    {
      "name": "ZkSyncExit",
      "address": "0xC0221a4Dfb792AA71CE84C2687b1D2b1E7D3eea0",
      "unverified": true,
      "code": "https://etherscan.deth.net/address/0xC0221a4Dfb792AA71CE84C2687b1D2b1E7D3eea0",
      "upgradeability": {
        "type": "immutable"
      },
      "derivedName": ""
    },
    {
      "name": "UniswapV2Factory",
      "address": "0xD2cbDcd7C6b3152BdFf6549C208052E4DBcd575D",
      "code": "https://etherscan.deth.net/address/0xD2cbDcd7C6b3152BdFf6549C208052E4DBcd575D,0xB2639bA16c7A5b0C55cA22D77CdA3D7ED88A5c89",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xB2639bA16c7A5b0C55cA22D77CdA3D7ED88A5c89",
        "admin": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7"
      },
      "values": {
        "allPairsLength": 72,
        "getMaster": "0x0DCCe462ddEA102D3ecf84A991d3ecFC251e02C7",
        "getTarget": "0xB2639bA16c7A5b0C55cA22D77CdA3D7ED88A5c89",
        "zkSyncAddress": "0x6dE5bDC580f55Bc9dAcaFCB67b91674040A247e3"
      }
    },
    {
      "name": "ZkSyncCommitBlock",
      "address": "0xE26Ebb18144CD2d8DCB14cE87fdCfbEb81baCAD4",
      "code": "https://etherscan.deth.net/address/0xE26Ebb18144CD2d8DCB14cE87fdCfbEb81baCAD4",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "EMPTY_STRING_KECCAK": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
        "exodusMode": false,
        "firstPendingWithdrawalIndex": 0,
        "firstPriorityRequestId": 0,
        "maxDepositAmount": 0,
        "numberOfPendingWithdrawals": 0,
        "totalBlocksChecked": 0,
        "totalBlocksCommitted": 0,
        "totalBlocksVerified": 0,
        "totalCommittedPriorityRequests": 0,
        "totalOpenPriorityRequests": 0,
        "totalPairTokens": 0,
        "upgradePreparationActivationTime": 0,
        "upgradePreparationActive": false,
        "withdrawGasLimit": 0,
        "zkSyncCommitBlockAddress": "0x0000000000000000000000000000000000000000",
        "zkSyncExitAddress": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "ZksToken",
      "address": "0xe4815AE53B124e7263F08dcDBBB757d41Ed658c6",
      "code": "https://etherscan.deth.net/address/0xe4815AE53B124e7263F08dcDBBB757d41Ed658c6",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "decimals": 18,
        "name": "Zks",
        "symbol": "ZKS",
        "totalSupply": "1000000000000000000000000000"
      }
    }
  ],
  "eoas": [
    "0x38101ae98196C8BCf7dF1835Bf3983B384272ae4",
    "0x961B513dfD3e363c238E0f98219eE02552A847BD",
    "0x9D7397204F32e0Ee919Ea3475630cdf131086255"
  ],
  "abis": {
    "0x42F15EFE22993C88441EF3467f2E6Fa8FFA9ADef": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getNoticePeriod() returns (uint256)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function isReadyForUpgrade() returns (bool)",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationStarted()",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "0x6dE5bDC580f55Bc9dAcaFCB67b91674040A247e3": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getNoticePeriod() returns (uint256)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function isReadyForUpgrade() returns (bool)",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationStarted()",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "0x86E527BC3C43E6Ba3eFf3A8CAd54A7Ed09cD8E8B": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getNoticePeriod() returns (uint256)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function isReadyForUpgrade() returns (bool)",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationStarted()",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "0x94b9401945a9bc06CE5B69e6dB3c6B671aABc829": [
      "function initialize(bytes)",
      "function isBlockSizeSupported(uint32 _size) pure returns (bool)",
      "function upgrade(bytes upgradeParameters)",
      "function verifyMultiblockProof(uint256[] _recursiveInput, uint256[] _proof, uint32[] _block_sizes, uint256[] _individual_vks_inputs, uint256[] _subproofs_limbs) view returns (bool)",
      "function verify_serialized_proof(uint256[] public_inputs, uint256[] serialized_proof, tuple(uint256 domain_size, uint256 num_inputs, tuple(uint256 value) omega, tuple(uint256 X, uint256 Y)[7] gate_setup_commitments, tuple(uint256 X, uint256 Y)[2] gate_selector_commitments, tuple(uint256 X, uint256 Y)[4] copy_permutation_commitments, tuple(uint256 value)[3] copy_permutation_non_residues, tuple(uint256[2] X, uint256[2] Y) g2_x) vk) view returns (bool)",
      "function verify_serialized_proof_with_recursion(uint256[] public_inputs, uint256[] serialized_proof, uint256 recursive_vks_root, uint8 max_valid_index, uint8[] recursive_vks_indexes, uint256[] individual_vks_inputs, uint256[] subproofs_limbs, tuple(uint256 domain_size, uint256 num_inputs, tuple(uint256 value) omega, tuple(uint256 X, uint256 Y)[7] gate_setup_commitments, tuple(uint256 X, uint256 Y)[2] gate_selector_commitments, tuple(uint256 X, uint256 Y)[4] copy_permutation_commitments, tuple(uint256 value)[3] copy_permutation_non_residues, tuple(uint256[2] X, uint256[2] Y) g2_x) vk) view returns (bool)"
    ],
    "0x95269f9E76540459c797089034dc74b48dF780a2": [
      "constructor()",
      "event NewGovernor(address newGovernor)",
      "event NewToken(address indexed token, uint16 indexed tokenId)",
      "event NewTokenLister(address newTokenLister)",
      "event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive)",
      "function addFeeToken(address _token)",
      "function addToken(address _token)",
      "function changeGovernor(address _newGovernor)",
      "function changeTokenLister(address _newTokenLister)",
      "function getTokenAddress(uint16 _tokenId) view returns (address)",
      "function initialize(bytes initializationParameters)",
      "function isValidTokenId(uint16 _tokenId) view returns (bool)",
      "function networkGovernor() view returns (address)",
      "function requireActiveValidator(address _address) view",
      "function requireGovernor(address _address) view",
      "function requireTokenLister(address _address) view",
      "function setValidator(address _validator, bool _active)",
      "function tokenAddresses(uint16) view returns (address)",
      "function tokenIds(address) view returns (uint16)",
      "function tokenLister() view returns (address)",
      "function totalFeeTokens() view returns (uint16)",
      "function totalUserTokens() view returns (uint16)",
      "function upgrade(bytes upgradeParameters)",
      "function validateTokenAddress(address _tokenAddr) view returns (uint16)",
      "function validators(address) view returns (bool)"
    ],
    "0xB2639bA16c7A5b0C55cA22D77CdA3D7ED88A5c89": [
      "constructor()",
      "event PairCreated(address indexed token0, address indexed token1, address pair, uint256)",
      "function allPairs(uint256) view returns (address)",
      "function allPairsLength() view returns (uint256)",
      "function burn(address pair, address to, uint256 amount)",
      "function createPair(address tokenA, address tokenB) returns (address pair)",
      "function getPair(address, address) view returns (address)",
      "function initialize(bytes data)",
      "function mint(address pair, address to, uint256 amount)",
      "function setZkSyncAddress(address _zksyncAddress)",
      "function upgrade(bytes upgradeParameters)",
      "function zkSyncAddress() view returns (address)"
    ],
    "0xb3BFC153d60f51Fb10E69B04f5f7D2735fA0619E": [
      "constructor(uint256 _listingCap, address _listingFeeReceiver, address _listingFeeToken, uint256 _listingFeeAmount, address _zkswapAddress, address _governanceAddress, uint256 _tokenNameLimit, uint256 _tokenSymbolLimit, uint8 _tokenDecimalsLimit)",
      "event ETHPairListed(address user, address tradeToken)",
      "event ListingCapUpdated(address sender, uint256 newListingCap)",
      "event ListingFeeReceiverUpdated(address sender, address newListingFeeReceiver)",
      "event ListingFeeTokenUpdated(address sender, address newListingFeeTokenAddress, uint256 newListingFeeAmount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event QuoteTokenDisabled(address sender, address[] quoteTokenAddresses)",
      "event QuoteTokenEnabled(address sender, address[] quoteTokenAddresses)",
      "event TokenPairListed(address user, address quoteToken, address tradeToken)",
      "event Unpaused(address account)",
      "function disableQuoteToken(address[] _quoteTokenAddresses)",
      "function enableQuoteToken(address[] _quoteTokenAddresses)",
      "function listingCap() view returns (uint256)",
      "function listingCount() view returns (uint256)",
      "function listingFeeAmount() view returns (uint256)",
      "function listingFeeReceiver() view returns (address)",
      "function listingFeeToken() view returns (address)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function quoteTokenList(address) view returns (bool)",
      "function renounceOwnership()",
      "function requestListing(address quoteToken, address tradeToken)",
      "function requestListingETH(address tradeToken)",
      "function setListingCap(uint256 _listingCap)",
      "function setListingFeeReceiver(address _listingFeeReceiver)",
      "function setListingFeeToken(address _listingFeeToken, uint256 _listingFeeAmount)",
      "function setTokenDecimalsLimit(uint8 newLimit)",
      "function setTokenNameLimit(uint256 newLimit)",
      "function setTokenSymbolLimit(uint256 newLimit)",
      "function tokenDecimalsLimit() view returns (uint8)",
      "function tokenNameLimit() view returns (uint256)",
      "function tokenSymbolLimit() view returns (uint256)",
      "function transferOwnership(address newOwner)"
    ],
    "0xb56878d21F6b101f48bb55f1AA9D3F624f04E513": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getNoticePeriod() returns (uint256)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function isReadyForUpgrade() returns (bool)",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationStarted()",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "0xD2cbDcd7C6b3152BdFf6549C208052E4DBcd575D": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getNoticePeriod() returns (uint256)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function isReadyForUpgrade() returns (bool)",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationStarted()",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "0xE26Ebb18144CD2d8DCB14cE87fdCfbEb81baCAD4": [
      "event BlockCommit(uint32 indexed blockNumber)",
      "event BlockVerification(uint32 indexed blockNumber)",
      "event BlocksRevert(uint32 indexed totalBlocksVerified, uint32 indexed totalBlocksCommitted)",
      "event CreatePairCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, uint16 tokenAId, uint16 tokenBId, uint16 indexed tokenPairId, address pair)",
      "event DepositCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)",
      "event ExodusMode()",
      "event FactAuth(address indexed sender, uint32 nonce, bytes fact)",
      "event FullExitCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)",
      "event MultiblockVerification(uint32 indexed blockNumberFrom, uint32 indexed blockNumberTo)",
      "event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, bytes userData, uint256 expirationBlock)",
      "event NewToken(address indexed token, uint16 indexed tokenId)",
      "event OnchainCreatePair(uint16 indexed tokenAId, uint16 indexed tokenBId, uint16 indexed pairId, address pair)",
      "event OnchainDeposit(address indexed sender, uint16 indexed tokenId, uint128 amount, address indexed owner)",
      "event OnchainWithdrawal(address indexed owner, uint16 indexed tokenId, uint128 amount)",
      "event PendingWithdrawalsAdd(uint32 queueStartIndex, uint32 queueEndIndex)",
      "event PendingWithdrawalsComplete(uint32 queueStartIndex, uint32 queueEndIndex)",
      "function EMPTY_STRING_KECCAK() view returns (bytes32)",
      "function authFacts(address, uint32) view returns (bytes32)",
      "function balancesToWithdraw(bytes22) view returns (uint128 balanceToWithdraw, uint8 gasReserveValue)",
      "function blocks(uint32) view returns (uint32 committedAtBlock, uint64 priorityOperations, uint32 chunks, bytes32 withdrawalsDataHash, bytes32 commitment, bytes32 stateRoot)",
      "function checkWithdrawals(uint32 _blockNumberFrom, uint32 _blockNumberTo, bytes[] _withdrawalsData)",
      "function commitBlock(uint32 _blockNumber, uint32 _feeAccount, bytes32[] _newBlockInfo, bytes _publicData, bytes _ethWitness, uint32[] _ethWitnessSizes)",
      "function commitMultiBlock(uint32[] _blockInfo, bytes32[] _newRootAndCommitment, bytes[] _publicDatas, uint32[] _ethWitnessSizes)",
      "function exited(uint32, uint16) view returns (bool)",
      "function exodusMode() view returns (bool)",
      "function firstPendingWithdrawalIndex() view returns (uint32)",
      "function firstPriorityRequestId() view returns (uint64)",
      "function getBalanceToWithdraw(address _address, uint16 _tokenId) view returns (uint128)",
      "function maxDepositAmount() view returns (uint128)",
      "function numberOfPendingWithdrawals() view returns (uint32)",
      "function pendingWithdrawals(uint32) view returns (address to, uint16 tokenId)",
      "function priorityRequests(uint64) view returns (uint8 opType, bytes pubData, uint256 expirationBlock)",
      "function revertBlocks(uint32 _maxBlocksToRevert)",
      "function setAuthPubkeyHash(bytes _pubkey_hash, uint32 _nonce)",
      "function swap_exited(uint32, uint32) view returns (bool)",
      "function tokenAddresses(uint16) view returns (address)",
      "function tokenIds(address) view returns (uint16)",
      "function totalBlocksChecked() view returns (uint32)",
      "function totalBlocksCommitted() view returns (uint32)",
      "function totalBlocksVerified() view returns (uint32)",
      "function totalCommittedPriorityRequests() view returns (uint64)",
      "function totalOpenPriorityRequests() view returns (uint64)",
      "function totalPairTokens() view returns (uint16)",
      "function triggerExodusIfNeeded() returns (bool)",
      "function upgradePreparationActivationTime() view returns (uint256)",
      "function upgradePreparationActive() view returns (bool)",
      "function validatePairTokenAddress(address _tokenAddr) view returns (uint16)",
      "function verifyBlock(uint32 _blockNumber, uint256[] _proof, bytes _withdrawalsData)",
      "function verifyBlocks(uint32 _blockNumberFrom, uint32 _blockNumberTo, uint256[] _recursiveInput, uint256[] _proof, uint256[] _subProofLimbs)",
      "function withdrawGasLimit() view returns (uint256)",
      "function zkSyncCommitBlockAddress() view returns (address)",
      "function zkSyncExitAddress() view returns (address)"
    ],
    "0xe4815AE53B124e7263F08dcDBBB757d41Ed658c6": [
      "constructor()",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function name() view returns (string)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
    ],
    "0xf2c351f22b148A9fF583a0F81701471a74E7338e": [
      "constructor()",
      "event BlockCommit(uint32 indexed blockNumber)",
      "event BlockVerification(uint32 indexed blockNumber)",
      "event BlocksRevert(uint32 indexed totalBlocksVerified, uint32 indexed totalBlocksCommitted)",
      "event CreatePairCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, uint16 tokenAId, uint16 tokenBId, uint16 indexed tokenPairId, address pair)",
      "event DepositCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)",
      "event ExodusMode()",
      "event FactAuth(address indexed sender, uint32 nonce, bytes fact)",
      "event FullExitCommit(uint32 indexed zkSyncBlockId, uint32 indexed accountId, address owner, uint16 indexed tokenId, uint128 amount)",
      "event MultiblockVerification(uint32 indexed blockNumberFrom, uint32 indexed blockNumberTo)",
      "event NewPriorityRequest(address sender, uint64 serialId, uint8 opType, bytes pubData, bytes userData, uint256 expirationBlock)",
      "event NewToken(address indexed token, uint16 indexed tokenId)",
      "event OnchainCreatePair(uint16 indexed tokenAId, uint16 indexed tokenBId, uint16 indexed pairId, address pair)",
      "event OnchainDeposit(address indexed sender, uint16 indexed tokenId, uint128 amount, address indexed owner)",
      "event OnchainWithdrawal(address indexed owner, uint16 indexed tokenId, uint128 amount)",
      "event PendingWithdrawalsAdd(uint32 queueStartIndex, uint32 queueEndIndex)",
      "event PendingWithdrawalsComplete(uint32 queueStartIndex, uint32 queueEndIndex)",
      "function EMPTY_STRING_KECCAK() view returns (bytes32)",
      "function authFacts(address, uint32) view returns (bytes32)",
      "function balancesToWithdraw(bytes22) view returns (uint128 balanceToWithdraw, uint8 gasReserveValue)",
      "function blocks(uint32) view returns (uint32 committedAtBlock, uint64 priorityOperations, uint32 chunks, bytes32 withdrawalsDataHash, bytes32 commitment, bytes32 stateRoot)",
      "function cancelOutstandingDepositsForExodusMode(uint64 _n)",
      "function completeWithdrawals(uint32 _n)",
      "function createETHPair(address _tokenERC20)",
      "function createPair(address _tokenA, address _tokenB)",
      "function depositERC20(address _token, uint104 _amount, address _franklinAddr)",
      "function depositETH(address _franklinAddr) payable",
      "function exited(uint32, uint16) view returns (bool)",
      "function exodusMode() view returns (bool)",
      "function firstPendingWithdrawalIndex() view returns (uint32)",
      "function firstPriorityRequestId() view returns (uint64)",
      "function fullExit(uint32 _accountId, address _token)",
      "function getBalanceToWithdraw(address _address, uint16 _tokenId) view returns (uint128)",
      "function getNoticePeriod() returns (uint256)",
      "function initialize(bytes initializationParameters)",
      "function isReadyForUpgrade() returns (bool)",
      "function maxDepositAmount() view returns (uint128)",
      "function numberOfPendingWithdrawals() view returns (uint32)",
      "function pendingWithdrawals(uint32) view returns (address to, uint16 tokenId)",
      "function priorityRequests(uint64) view returns (uint8 opType, bytes pubData, uint256 expirationBlock)",
      "function setGenesisRootAndAddresses(bytes32 _genesisRoot, address _zkSyncCommitBlockAddress, address _zkSyncExitAddress)",
      "function setMaxDepositAmount(uint128 _amount)",
      "function setWithDrawGasLimit(uint256 _gasLimit)",
      "function swap_exited(uint32, uint32) view returns (bool)",
      "function tokenAddresses(uint16) view returns (address)",
      "function tokenIds(address) view returns (uint16)",
      "function totalBlocksChecked() view returns (uint32)",
      "function totalBlocksCommitted() view returns (uint32)",
      "function totalBlocksVerified() view returns (uint32)",
      "function totalCommittedPriorityRequests() view returns (uint64)",
      "function totalOpenPriorityRequests() view returns (uint64)",
      "function totalPairTokens() view returns (uint16)",
      "function upgrade(bytes upgradeParameters)",
      "function upgradeCanceled()",
      "function upgradeFinishes()",
      "function upgradeNoticePeriodStarted()",
      "function upgradePreparationActivationTime() view returns (uint256)",
      "function upgradePreparationActive() view returns (bool)",
      "function upgradePreparationStarted()",
      "function validatePairTokenAddress(address _tokenAddr) view returns (uint16)",
      "function withdrawERC20(address _token, uint128 _amount)",
      "function withdrawERC20Guarded(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns (uint128 withdrawnAmount)",
      "function withdrawERC20WithAddress(address _token, uint128 _amount, address _to)",
      "function withdrawETH(uint128 _amount)",
      "function withdrawETHWithAddress(uint128 _amount, address _to)",
      "function withdrawGasLimit() view returns (uint256)",
      "function zkSyncCommitBlockAddress() view returns (address)",
      "function zkSyncExitAddress() view returns (address)"
    ]
  }
}
