{
  "$schema": "https://raw.githubusercontent.com/l2beat/tools/main/schemas/config.schema.json",
  "chain": "ethereum",
  "name": "reya",
  "initialAddresses": [
    "0x672109752635177ebcb17F2C7e04575A709014BD",
    "0xdFf78A949E47c1e90f3Dd6dd7Fe2Fa72B42a75f7" // socket vault used for reya USDC only: [0xdFf78A949E47c1e90f3Dd6dd7Fe2Fa72B42a75f7](https://github.com/SocketDotTech/socket-plugs/blob/main/deployments/superbridge/prod_reya_addresses.json#L6)
  ],
  // orbit bridge is only used for ETH, no orbit ERC-20 bridge or gateway deployed
  "names": {
    "0x448Bbd134dE1B23976073aB4F2915849b2dcD73A": "RollupProxy",
    "0x383c03c4EfF819E73409DbC690755a9992393814": "Bridge",
    "0x728B406A4809118533D96bB3b5C50712C99d8Fa5": "ChallengeManager",
    "0x3f373b0A7DcEe7b7bCfC16DF85CfAE18388542c9": "Outbox",
    "0x6CA2A628fb690Bd431F4aA608655ce37c66aff9d": "SequencerInbox",
    "0x07390626b8Bc2C04b1D93c7D246A0629198D7868": "UpgradeExecutor",
    "0xdFf78A949E47c1e90f3Dd6dd7Fe2Fa72B42a75f7": "SocketVault_Reya",
    "0x2b0E04Dc90e3fA58165CB41E2834B44A56E766aF": "ValidatorUtils"
  },
  "overrides": {
    "ValidatorUtils": {
        "fields": {
          "REYA_STAKERS": {
            "type": "call",
            "method": "function getStakers(address rollup, uint64 startIndex, uint64 max) view returns (address[], bool hasMore)",
            "args": ["0x448Bbd134dE1B23976073aB4F2915849b2dcD73A", 0, 10] // args are RollupProxy address, startIndex, max no. of stakers returned
          }
        },
        "ignoreRelatives": ["REYA_STAKERS"]
      },
    "SocketVault_Reya": {
      "ignoreMethods": ["hook__", "token"]
    },
    "ChallengeManager": {
      "ignoreMethods": ["challenges"]
    },
    "RollupProxy": {
      "ignoreMethods": [
        // Execution reverted
        "proxiableUUID"
      ],
      "ignoreInWatchMode": [
        "firstUnresolvedNode",
        "latestConfirmed",
        "latestNodeCreated"
      ],
      "fields": {
        // when this changes, it means the validators have changed
        "setValidatorCount": {
          "type": "eventCount",
          "topics": [
            // event OwnerFunctionCalled(uint256 indexed id);
            "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
            // id == 6 is emitted inside setValidator()
            "0x0000000000000000000000000000000000000000000000000000000000000006"
          ]
        },
        "challenges": {
          "type": "stateFromEvent",
          "event": "RollupChallengeStarted",
          "returnParams": [
            "challengeIndex",
            "asserter",
            "challenger",
            "challengedNode"
          ]
        },
        "validators": {
          "type": "arbitrumActors",
          "actorType": "validator"
        }
      }
    },
    "Outbox": {
      "ignoreMethods": ["spent", "isSpent"]
    },
    "Bridge": {
      "ignoreMethods": ["sequencerInboxAccs", "delayedInboxAccs"],
      "ignoreInWatchMode": [
        "delayedMessageCount",
        "sequencerMessageCount",
        "sequencerReportedSubMessageCount"
      ]
    },
    "SequencerInbox": {
      "ignoreMethods": ["inboxAccs"],
      "ignoreInWatchMode": ["batchCount", "totalDelayedMessagesRead"],
      "fields": {
        // getting sequencers from the contract is too complex at the moment
        // so we hardcode it in config .ts
        // this field will notify us in case of changes
        "IS_HARDCODED_SEQUENCER_BATCH_POSTER": {
          "type": "call",
          "method": "function isBatchPoster(address) external view returns (bool)",
          "args": ["0xf5636Df6f86f31668aeAe9bB8a1C4F0ED147926a"]
        },
        "sequencerVersion": {
          "type": "arbitrumSequencerVersion"
        },
        // when this changes, it means the sequencers have changed
        "setIsBatchPosterCount": {
          "type": "eventCount",
          "topics": [
            // event OwnerFunctionCalled(uint256 indexed id);
            "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
            // id == 6 is emitted inside setValidator()
            "0x0000000000000000000000000000000000000000000000000000000000000001"
          ]
        },
        "batchPosters": {
          "type": "arbitrumActors",
          "actorType": "batchPoster"
        },
        "dacKeyset": {
            "type": "arbitrumDACKeyset"
          },
        "keySetUpdates": {
          "type": "eventCount",
          "topics": [
            // SetValidKeyset(bytes32,bytes)
            "0xabca9b7986bc22ad0160eb0cb88ae75411eacfba4052af0b457a9335ef655722"
          ]
        }
      }
    },
    "UpgradeExecutor": {
      "fields": {
        "accessControl": {
          "type": "accessControl"
        }
      }
    }
  }
}
