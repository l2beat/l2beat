{
  "$schema": "../../config.schema.json",
  "chain": "ethereum",
  "name": "parallel",
  "initialAddresses": [
    "0x6594085ca55a2B3a5fAD1C57A270D060eEa99877",
    "0x5a961c7D162195a9Dc5a357Cc168b0694283382E",
    "0x6Eb9240d4add111D5Fc81b10Ff12eECabcf9752d",
    "0xa1c86E2362dba0525075622af6d5f739B1304D45",
    "0x150286BdbE7C8Cd23D41a8e1e64438e0dc04dc3d"
  ],
  "names": {
    "0x6594085ca55a2B3a5fAD1C57A270D060eEa99877": "RollupProxy",
    "0x5a961c7D162195a9Dc5a357Cc168b0694283382E": "Bridge",
    "0x28c32059d7e6147cf5257DFC127f7258beA1cdf4": "ChallengeManager",
    "0xb4795A0edae98d7820C37F06f6b858e7acb51DF8": "SequencerInbox",
    "0xB6e0586616ebE79b2F86dDB32048c500D23b3AC3": "Outbox",
    "0xD368b8dC5cB6fA26A53b7588db9A87E509A72d89": "UpgradeExecutor",
    "0x6Eb9240d4add111D5Fc81b10Ff12eECabcf9752d": "L1ERC20Gateway",
    "0xa1c86E2362dba0525075622af6d5f739B1304D45": "L1CustomGateway",
    "0x150286BdbE7C8Cd23D41a8e1e64438e0dc04dc3d": "L1WETHGateway",
    "0x4811500e0d376Fa8d2EA3CCb7c61E0afB4F5A7f1": "OneStepProverMemory",
    "0x89AF7C4C2198c426cFe6E86de0680A0850503e06": "OneStepProverMath",
    "0x99a2A31300816C1FA3f40818AC9280fe7271F878": "OneStepProverHostIo",
    "0xDf94F0474F205D086dbc2e66D69a856FCf520622": "OneStepProver0",
    "0x6d4bE7c1a618D43bE4a1Bd7F8eC8E079Ff52Fb4d": "ProxyAdmin",
    "0x4a4962275DF8C60a80d3a25faEc5AA7De116A746": "OwnerMultisig"
  },
  "overrides": {
    "ChallengeManager": {
      "ignoreMethods": ["challenges"]
    },
    "RollupProxy": {
      "ignoreMethods": [
        // Execution reverted
        "proxiableUUID"
      ],
      "ignoreInWatchMode": [
        "firstUnresolvedNode",
        "latestConfirmed",
        "latestNodeCreated"
      ],
      "fields": {
        // when this changes, it means the validators have changed
        "setValidatorCount": {
          "type": "eventCount",
          "topics": [
            // event OwnerFunctionCalled(uint256 indexed id);
            "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
            // id == 6 is emitted inside setValidator()
            "0x0000000000000000000000000000000000000000000000000000000000000006"
          ]
        },
        "challenges": {
          "type": "stateFromEvent",
          "event": "RollupChallengeStarted",
          "returnParams": [
            "challengeIndex",
            "asserter",
            "challenger",
            "challengedNode"
          ]
        },
        "validators": {
          "type": "arbitrumActors",
          "actorType": "validator"
        }
      }
    },
    "Outbox": {
      "ignoreMethods": ["spent", "isSpent"]
    },
    "Bridge": {
      "ignoreMethods": ["sequencerInboxAccs", "delayedInboxAccs"],
      "ignoreInWatchMode": [
        "delayedMessageCount",
        "sequencerMessageCount",
        "sequencerReportedSubMessageCount"
      ]
    },
    "SequencerInbox": {
      "ignoreMethods": ["inboxAccs"],
      "ignoreInWatchMode": ["batchCount", "totalDelayedMessagesRead"],
      "fields": {
        // getting sequencers from the contract is too complex at the moment
        // so we hardcode it in config .ts
        // this field will notify us in case of changes
        "IS_HARDCODED_SEQUENCER_BATCH_POSTER": {
          "type": "call",
          "method": "function isBatchPoster(address) external view returns (bool)",
          "args": ["0x5eAD389b57d533A94a0eacd570Dc1CC59C25F2D4"]
        },
        "sequencerVersion": {
          "type": "arbitrumSequencerVersion"
        },
        // when this changes, it means the sequencers have changed
        "setIsBatchPosterCount": {
          "type": "eventCount",
          "topics": [
            // event OwnerFunctionCalled(uint256 indexed id);
            "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
            // id == 6 is emitted inside setValidator()
            "0x0000000000000000000000000000000000000000000000000000000000000001"
          ]
        },
        "batchPosters": {
          "type": "arbitrumActors",
          "actorType": "batchPoster"
        },
        "keySetUpdates": {
          "type": "eventCount",
          "topics": [
            // SetValidKeyset(bytes32,bytes)
            "0xabca9b7986bc22ad0160eb0cb88ae75411eacfba4052af0b457a9335ef655722"
          ]
        }
      }
    },
    "UpgradeExecutor": {
      "fields": {
        "accessControl": {
          "type": "accessControl"
        }
      }
    },
    "L1WETHGateway": {
      "ignoreMethods": ["l1Weth"]
    },
    "OwnerMultisig": {
      "ignoreMethods": ["nonce"]
    }
  }
}
