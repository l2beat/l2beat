{
  "name": "allbridge",
  "chain": "ethereum",
  "blockNumber": 20776249,
  "configHash": "0x849d1c199ab72e8c4bfcbd944c1df393655ea421b29a431a4d7b3bf1604946d2",
  "version": 14,
  "contracts": [
    {
      "name": "GasOracle",
      "address": "0x0BdF6139F2841A7856Ca154D851182C52F5b96e0",
      "sinceTimestamp": 1685102099,
      "values": {
        "$immutable": true,
        "chainId": 1,
        "owner": "0x349a438CCF81a663661cb74DbE8e3C88Bc12e622"
      },
      "derivedName": "GasOracle"
    },
    {
      "name": "AllbridgeMessenger",
      "address": "0x203e8785b4d4312c4152D0c42Ba3FA8BD79086dA",
      "sinceTimestamp": 1685102279,
      "values": {
        "$immutable": true,
        "chainId": 1,
        "otherChainIds": "0x0000010101010101010101010000000000000000000000000000000000000000",
        "owner": "0x01a494079DCB715f622340301463cE50cd69A4D0"
      },
      "derivedName": "Messenger"
    },
    {
      "name": "OldAllbridgeMessenger",
      "address": "0x366a900eFE79aE7244C4d1d279EE4a702AdBEE50",
      "unverified": true,
      "sinceTimestamp": 1662595853,
      "values": { "$immutable": true },
      "derivedName": ""
    },
    {
      "name": "LPBridge",
      "address": "0x609c690e8F7D68a59885c9132e812eEbDaAf0c9e",
      "sinceTimestamp": 1685102447,
      "values": {
        "$immutable": true,
        "canSwap": 1,
        "chainId": 1,
        "DAI_POOL": "0x0000000000000000000000000000000000000000",
        "owner": "0x01a494079DCB715f622340301463cE50cd69A4D0",
        "USDC_POOL": "0xa7062bbA94c91d565Ae33B893Ab5dFAF1Fc57C4d",
        "USDT_POOL": "0x7DBF07Ad92Ed4e26D5511b4F285508eBF174135D"
      },
      "derivedName": "Bridge"
    },
    {
      "name": "Pool",
      "address": "0x7DBF07Ad92Ed4e26D5511b4F285508eBF174135D",
      "template": "allbridge/pool",
      "ignoreInWatchMode": [
        "accRewardPerShareP",
        "adminFeeAmount",
        "d",
        "getPrice",
        "getY",
        "reserves",
        "tokenBalance",
        "totalSupply",
        "vUsdBalance"
      ],
      "sinceTimestamp": 1694519831,
      "values": {
        "$immutable": true,
        "a": 20,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          }
        },
        "accRewardPerShareP": "894082050833027525",
        "adminFeeAmount": 6702764556,
        "adminFeeShareBP": 2000,
        "balanceRatioMinBP": 1000,
        "canDeposit": 1,
        "canWithdraw": 1,
        "d": 9912865674,
        "decimals": 3,
        "feeShareBP": 15,
        "getPrice": 9998,
        "getY": [
          55177544518883, 39017849611285, 31858839081451, 27591219823803
        ],
        "name": "Allbridge LP",
        "owner": "0x01a494079DCB715f622340301463cE50cd69A4D0",
        "reserves": 9732038247,
        "router": "0x609c690e8F7D68a59885c9132e812eEbDaAf0c9e",
        "symbol": "LP-USDT",
        "token": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "tokenBalance": 4971039815,
        "totalSupply": 9912429721,
        "vUsdBalance": 4941826909
      }
    },
    {
      "name": "WormholeMessenger",
      "address": "0x7f02294f065A605C8D21D9812b8d1De7E5E1da74",
      "sinceTimestamp": 1685102363,
      "values": {
        "$immutable": true,
        "chainId": 1,
        "otherChainIds": "0x0000010001010100010101010000000000000000000000000000000000000000",
        "owner": "0x01a494079DCB715f622340301463cE50cd69A4D0"
      },
      "derivedName": "WormholeMessenger"
    },
    {
      "name": "Validator",
      "address": "0x93746538D4519C809827205Bd1C2c7a0E15bd74b",
      "unverified": true,
      "sinceTimestamp": 1636666899,
      "values": { "$immutable": true },
      "derivedName": ""
    },
    {
      "name": "OldLPBridge",
      "address": "0xA314330482f325D38A83B492EF6B006224a3bea9",
      "sinceTimestamp": 1662596119,
      "values": {
        "$immutable": true,
        "allbridgeMessenger": "0x366a900eFE79aE7244C4d1d279EE4a702AdBEE50",
        "chainId": 1,
        "owner": "0x01a494079DCB715f622340301463cE50cd69A4D0",
        "wormholeMessenger": "0xF4830e4F739c8eB04EFDbf346BAE5c82163da83F"
      },
      "derivedName": "Bridge"
    },
    {
      "name": "Pool",
      "address": "0xa7062bbA94c91d565Ae33B893Ab5dFAF1Fc57C4d",
      "template": "allbridge/pool",
      "ignoreInWatchMode": [
        "accRewardPerShareP",
        "adminFeeAmount",
        "d",
        "getPrice",
        "getY",
        "reserves",
        "tokenBalance",
        "totalSupply",
        "vUsdBalance"
      ],
      "sinceTimestamp": 1685102651,
      "values": {
        "$immutable": true,
        "a": 20,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          }
        },
        "accRewardPerShareP": "1121658356464754366",
        "adminFeeAmount": 3008661069,
        "adminFeeShareBP": 2000,
        "balanceRatioMinBP": 1000,
        "canDeposit": 1,
        "canWithdraw": 1,
        "d": 5917417564,
        "decimals": 3,
        "feeShareBP": 15,
        "getPrice": 9992,
        "getY": [
          25449145284395, 17996119078021, 14694305940526, 12726033756260
        ],
        "name": "Allbridge LP",
        "owner": "0x01a494079DCB715f622340301463cE50cd69A4D0",
        "reserves": 5727760716,
        "router": "0x609c690e8F7D68a59885c9132e812eEbDaAf0c9e",
        "symbol": "LP-USDC",
        "token": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "tokenBalance": 3002052189,
        "totalSupply": 5916568965,
        "vUsdBalance": 2915380860
      }
    },
    {
      "name": "FeeOracle",
      "address": "0xba6d8dE08f13A3D22FCEC54752812Dd4dcf2E1f6",
      "unverified": true,
      "sinceTimestamp": 1636634854,
      "values": {
        "$immutable": true,
        "owner": "0x83f53C078bF81F6d8B79E01e2eD36c473A960c5E"
      },
      "derivedName": ""
    },
    {
      "name": "TokenBridge",
      "address": "0xBBbD1BbB4f9b936C3604906D7592A644071dE884",
      "sinceTimestamp": 1636635220,
      "values": {
        "$immutable": true,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "0x4BE5ef97B7cfD37F536324c7F18A2FfdE5892074",
              "0xF62e459Aa6a959c4224A7315F85e4703f462918A"
            ]
          },
          "BRIDGE_MANAGER": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x4BE5ef97B7cfD37F536324c7F18A2FfdE5892074"]
          },
          "TOKEN_MANAGER": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "0x4BE5ef97B7cfD37F536324c7F18A2FfdE5892074",
              "0x83f53C078bF81F6d8B79E01e2eD36c473A960c5E"
            ]
          },
          "STOP_MANAGER": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x83f53C078bF81F6d8B79E01e2eD36c473A960c5E"]
          }
        },
        "feeCollector": "0x83f53C078bF81F6d8B79E01e2eD36c473A960c5E",
        "feeOracle": "0xba6d8dE08f13A3D22FCEC54752812Dd4dcf2E1f6",
        "unlockSigner": "0x83f53C078bF81F6d8B79E01e2eD36c473A960c5E",
        "validator": "0x93746538D4519C809827205Bd1C2c7a0E15bd74b"
      },
      "derivedName": "Bridge"
    },
    {
      "name": "CctpBridge",
      "address": "0xC51397b75B783E31469bFaADE79913F3f82210d6",
      "sinceTimestamp": 1711380611,
      "values": {
        "$immutable": true,
        "adminFeeShareBP": 10,
        "chainId": 1,
        "getDomainByChainId": [5],
        "owner": "0x01a494079DCB715f622340301463cE50cd69A4D0"
      },
      "derivedName": "CctpBridge"
    },
    {
      "name": "OldWormholeMessenger",
      "address": "0xF4830e4F739c8eB04EFDbf346BAE5c82163da83F",
      "unverified": true,
      "sinceTimestamp": 1662998060,
      "values": { "$immutable": true },
      "derivedName": ""
    }
  ],
  "eoas": [
    { "address": "0x0000000000000000000000000000000000000000" },
    { "address": "0x01a494079DCB715f622340301463cE50cd69A4D0" },
    { "address": "0x349a438CCF81a663661cb74DbE8e3C88Bc12e622" },
    { "address": "0x4BE5ef97B7cfD37F536324c7F18A2FfdE5892074" },
    { "address": "0x83f53C078bF81F6d8B79E01e2eD36c473A960c5E" },
    { "address": "0xF62e459Aa6a959c4224A7315F85e4703f462918A" }
  ],
  "abis": {
    "0x0BdF6139F2841A7856Ca154D851182C52F5b96e0": [
      "constructor(uint256 chainId_, uint256 chainPrecision)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function chainData(uint256 chainId) view returns (uint128 price, uint128 gasPrice)",
      "function chainId() view returns (uint256)",
      "function crossRate(uint256 otherChainId) view returns (uint256)",
      "function getTransactionGasCostInNativeToken(uint256 otherChainId, uint256 gasAmount) view returns (uint256)",
      "function getTransactionGasCostInUSD(uint256 otherChainId, uint256 gasAmount) view returns (uint256)",
      "function owner() view returns (address)",
      "function price(uint256 chainId_) view returns (uint256)",
      "function renounceOwnership()",
      "function setChainData(uint256 chainId_, uint128 price_, uint128 gasPrice)",
      "function setGasPrice(uint256 chainId_, uint128 gasPrice)",
      "function setPrice(uint256 chainId_, uint128 price_)",
      "function transferOwnership(address newOwner)"
    ],
    "0x203e8785b4d4312c4152D0c42Ba3FA8BD79086dA": [
      "constructor(uint256 chainId_, bytes32 otherChainIds_, address gasOracle_, address primaryValidator_, address[] validators)",
      "event MessageReceived(bytes32 indexed message)",
      "event MessageSent(bytes32 indexed message)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Received(address, uint256)",
      "event SecondaryValidatorsSet(address[] oldValidators, address[] newValidators)",
      "function chainId() view returns (uint256)",
      "function gasUsage(uint256 chainId) view returns (uint256 amount)",
      "function getTransactionCost(uint256 chainId) view returns (uint256)",
      "function otherChainIds() view returns (bytes32)",
      "function owner() view returns (address)",
      "function receiveMessage(bytes32 message, uint256 v1v2, bytes32 r1, bytes32 s1, bytes32 r2, bytes32 s2)",
      "function receivedMessages(bytes32 messageHash) view returns (uint256 isReceived)",
      "function renounceOwnership()",
      "function sendMessage(bytes32 message) payable",
      "function sentMessagesBlock(bytes32 messageHash) view returns (uint256 blockNumber)",
      "function setGasOracle(address gasOracle_)",
      "function setGasUsage(uint256 chainId, uint256 gasAmount)",
      "function setOtherChainIds(bytes32 value)",
      "function setPrimaryValidator(address value)",
      "function setSecondaryValidators(address[] oldValidators, address[] newValidators)",
      "function transferOwnership(address newOwner)",
      "function withdrawGasTokens(uint256 amount)"
    ],
    "0x609c690e8F7D68a59885c9132e812eEbDaAf0c9e": [
      "constructor(uint256 chainId_, uint256 chainPrecision_, address allbridgeMessenger_, address wormholeMessenger_, address gasOracle_)",
      "event BridgingFeeFromTokens(uint256 gas)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ReceiveFee(uint256 bridgeTransactionCost, uint256 messageTransactionCost)",
      "event Received(address sender, uint256 amount)",
      "event Swapped(address sender, address recipient, bytes32 sendToken, bytes32 receiveToken, uint256 sendAmount, uint256 receiveAmount)",
      "event TokensReceived(uint256 amount, bytes32 recipient, uint256 nonce, uint8 messenger, bytes32 message)",
      "event TokensSent(uint256 amount, bytes32 recipient, uint256 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger)",
      "function addBridgeToken(uint256 chainId_, bytes32 tokenAddress)",
      "function addPool(address pool, bytes32 token)",
      "function canSwap() view returns (uint8)",
      "function chainId() view returns (uint256)",
      "function gasUsage(uint256 chainId) view returns (uint256 amount)",
      "function getBridgingCostInTokens(uint256 destinationChainId, uint8 messenger, address tokenAddress) view returns (uint256)",
      "function getMessageCost(uint256 chainId, uint8 protocol) view returns (uint256)",
      "function getMessageGasUsage(uint256 chainId, uint8 protocol) view returns (uint256)",
      "function getTransactionCost(uint256 chainId) view returns (uint256)",
      "function hasReceivedMessage(bytes32 message, uint8 protocol) view returns (bool)",
      "function hasSentMessage(bytes32 message) view returns (bool)",
      "function hashMessage(uint256 amount, bytes32 recipient, uint256 sourceChainId, uint256 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger) pure returns (bytes32)",
      "function otherBridgeTokens(uint256 chainId, bytes32 tokenAddress) view returns (bool isSupported)",
      "function otherBridges(uint256 chainId) view returns (bytes32 bridgeAddress)",
      "function owner() view returns (address)",
      "function pools(bytes32 tokenId) view returns (address)",
      "function processedMessages(bytes32 messageHash) view returns (uint256 isProcessed)",
      "function receiveTokens(uint256 amount, bytes32 recipient, uint256 sourceChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger, uint256 receiveAmountMin) payable",
      "function registerBridge(uint256 chainId_, bytes32 bridgeAddress)",
      "function removeBridgeToken(uint256 chainId_, bytes32 tokenAddress)",
      "function renounceOwnership()",
      "function sentMessages(bytes32 messageHash) view returns (uint256 isSent)",
      "function setAllbridgeMessenger(address allbridgeMessenger_)",
      "function setGasOracle(address gasOracle_)",
      "function setGasUsage(uint256 chainId, uint256 gasAmount)",
      "function setRebalancer(address rebalancer_)",
      "function setStopAuthority(address stopAuthority_)",
      "function setWormholeMessenger(address wormholeMessenger_)",
      "function startSwap()",
      "function stopSwap()",
      "function swap(uint256 amount, bytes32 token, bytes32 receiveToken, address recipient, uint256 receiveAmountMin)",
      "function swapAndBridge(bytes32 token, uint256 amount, bytes32 recipient, uint256 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger, uint256 feeTokenAmount) payable",
      "function transferOwnership(address newOwner)",
      "function withdrawBridgingFeeInTokens(address token)",
      "function withdrawGasTokens(uint256 amount)"
    ],
    "0x7DBF07Ad92Ed4e26D5511b4F285508eBF174135D": [
      "constructor(address router_, uint256 a_, address token_, uint16 feeShareBP_, uint256 balanceRatioMinBP_, string lpName, string lpSymbol)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Deposit(address indexed user, uint256 amount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RewardsClaimed(address indexed user, uint256 amount)",
      "event SwappedFromVUsd(address recipient, address token, uint256 vUsdAmount, uint256 amount, uint256 fee)",
      "event SwappedToVUsd(address sender, address token, uint256 amount, uint256 vUsdAmount, uint256 fee)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Withdraw(address indexed user, uint256 amount)",
      "function a() view returns (uint256)",
      "function accRewardPerShareP() view returns (uint256)",
      "function adjustTotalLpAmount()",
      "function adminFeeAmount() view returns (uint256)",
      "function adminFeeShareBP() view returns (uint256)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function balanceRatioMinBP() view returns (uint256)",
      "function canDeposit() view returns (uint256)",
      "function canWithdraw() view returns (uint256)",
      "function claimAdminFee()",
      "function claimRewards()",
      "function d() view returns (uint256)",
      "function decimals() pure returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function deposit(uint256 amount)",
      "function feeShareBP() view returns (uint16)",
      "function getPrice() view returns (uint256)",
      "function getY(uint256 x) view returns (uint256)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function pendingReward(address user) view returns (uint256)",
      "function renounceOwnership()",
      "function reserves() view returns (uint256)",
      "function router() view returns (address)",
      "function setAdminFeeShare(uint256 adminFeeShareBP_)",
      "function setBalanceRatioMinBP(uint256 balanceRatioMinBP_)",
      "function setFeeShare(uint16 feeShareBP_)",
      "function setRouter(address router_)",
      "function setStopAuthority(address stopAuthority_)",
      "function startDeposit()",
      "function startWithdraw()",
      "function stopDeposit()",
      "function stopWithdraw()",
      "function swapFromVUsd(address user, uint256 amount, uint256 receiveAmountMin, bool zeroFee) returns (uint256)",
      "function swapToVUsd(address user, uint256 amount, bool zeroFee) returns (uint256)",
      "function symbol() view returns (string)",
      "function token() view returns (address)",
      "function tokenBalance() view returns (uint256)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function userRewardDebt(address user) view returns (uint256 amount)",
      "function vUsdBalance() view returns (uint256)",
      "function withdraw(uint256 amountLp)"
    ],
    "0x7f02294f065A605C8D21D9812b8d1De7E5E1da74": [
      "constructor(uint256 chainId_, bytes32 otherChainIds_, address wormhole_, uint8 commitmentLevel_, address gasOracle_)",
      "event MessageReceived(bytes32 indexed message, uint64 sequence)",
      "event MessageSent(bytes32 indexed message, uint64 sequence)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Received(address, uint256)",
      "function chainId() view returns (uint256)",
      "function gasUsage(uint256 chainId) view returns (uint256 amount)",
      "function getTransactionCost(uint256 chainId) view returns (uint256)",
      "function otherChainIds() view returns (bytes32)",
      "function owner() view returns (address)",
      "function receiveMessage(bytes encodedMsg)",
      "function receivedMessages(bytes32 messageHash) view returns (uint256 isReceived)",
      "function registerWormholeMessenger(uint16 chainId_, bytes32 address_)",
      "function renounceOwnership()",
      "function sendMessage(bytes32 message) payable",
      "function sentMessages(bytes32 messageHash) view returns (uint256 isSent)",
      "function setCommitmentLevel(uint8 value)",
      "function setGasOracle(address gasOracle_)",
      "function setGasUsage(uint256 chainId, uint256 gasAmount)",
      "function setOtherChainIds(bytes32 value)",
      "function transferOwnership(address newOwner)",
      "function withdrawGasTokens(uint256 amount)"
    ],
    "0xA314330482f325D38A83B492EF6B006224a3bea9": [
      "constructor(uint8 _chainId, address _allbridgeMessenger, address _wormholeMessenger, address _gasOracle)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Received(address, uint256)",
      "event TokensSent(uint256 amount, bytes32 recipient, uint8 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger)",
      "function addBridgeToken(uint8 chainId_, bytes32 tokenAddress_)",
      "function addPool(address pool, bytes32 token)",
      "function allbridgeMessenger() view returns (address)",
      "function chainId() view returns (uint8)",
      "function gasUsage(uint8) view returns (uint256)",
      "function getMessageCost(uint8 chainId, uint8 protocol) view returns (uint256)",
      "function getTransactionCost(uint8 chainId_) view returns (uint256)",
      "function hasReceivedMessage(bytes32 message, uint8 protocol) view returns (bool)",
      "function hasSentMessage(bytes32 message) view returns (bool)",
      "function hashMessage(uint256 amount, bytes32 recipient, uint8 sourceChainId, uint8 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger) pure returns (bytes32)",
      "function otherBridgeTokens(uint8, bytes32) view returns (bool)",
      "function otherBridges(uint8) view returns (bytes32)",
      "function owner() view returns (address)",
      "function pools(bytes32) view returns (address)",
      "function processedMessages(bytes32) view returns (bool)",
      "function receiveTokens(uint256 amount, bytes32 recipient, uint8 sourceChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger)",
      "function registerBridge(uint8 chainId_, bytes32 bridgeAddress_)",
      "function removeBridgeToken(uint8 chainId_, bytes32 tokenAddress_)",
      "function renounceOwnership()",
      "function sentMessages(bytes32) view returns (bool)",
      "function setAllbridgeMessenger(address _allbridgeMessenger)",
      "function setGasOracle(address gasOracle_)",
      "function setGasUsage(uint8 chainId_, uint256 gasUsage_)",
      "function setWormholeMessenger(address _wormholeMessenger)",
      "function swap(uint256 amount, bytes32 token, bytes32 receiveToken, address recipient)",
      "function swapAndBridge(bytes32 token, uint256 amount, bytes32 recipient, uint8 destinationChainId, bytes32 receiveToken, uint256 nonce, uint8 messenger) payable",
      "function transferOwnership(address newOwner)",
      "function withdrawGasTokens(uint256 amount)",
      "function wormholeMessenger() view returns (address)"
    ],
    "0xa7062bbA94c91d565Ae33B893Ab5dFAF1Fc57C4d": [
      "constructor(address router_, uint256 a_, address token_, uint16 feeShareBP_, uint256 balanceRatioMinBP_, string lpName, string lpSymbol)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Deposit(address indexed user, uint256 amount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RewardsClaimed(address indexed user, uint256 amount)",
      "event SwappedFromVUsd(address recipient, address token, uint256 vUsdAmount, uint256 amount, uint256 fee)",
      "event SwappedToVUsd(address sender, address token, uint256 amount, uint256 vUsdAmount, uint256 fee)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Withdraw(address indexed user, uint256 amount)",
      "function a() view returns (uint256)",
      "function accRewardPerShareP() view returns (uint256)",
      "function adjustTotalLpAmount()",
      "function adminFeeAmount() view returns (uint256)",
      "function adminFeeShareBP() view returns (uint256)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function balanceRatioMinBP() view returns (uint256)",
      "function canDeposit() view returns (uint256)",
      "function canWithdraw() view returns (uint256)",
      "function claimAdminFee()",
      "function claimRewards()",
      "function d() view returns (uint256)",
      "function decimals() pure returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function deposit(uint256 amount)",
      "function feeShareBP() view returns (uint16)",
      "function getPrice() view returns (uint256)",
      "function getY(uint256 x) view returns (uint256)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function pendingReward(address user) view returns (uint256)",
      "function renounceOwnership()",
      "function reserves() view returns (uint256)",
      "function router() view returns (address)",
      "function setAdminFeeShare(uint256 adminFeeShareBP_)",
      "function setBalanceRatioMinBP(uint256 balanceRatioMinBP_)",
      "function setFeeShare(uint16 feeShareBP_)",
      "function setRouter(address router_)",
      "function setStopAuthority(address stopAuthority_)",
      "function startDeposit()",
      "function startWithdraw()",
      "function stopDeposit()",
      "function stopWithdraw()",
      "function swapFromVUsd(address user, uint256 amount, uint256 receiveAmountMin, bool zeroFee) returns (uint256)",
      "function swapToVUsd(address user, uint256 amount, bool zeroFee) returns (uint256)",
      "function symbol() view returns (string)",
      "function token() view returns (address)",
      "function tokenBalance() view returns (uint256)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function userRewardDebt(address user) view returns (uint256 amount)",
      "function vUsdBalance() view returns (uint256)",
      "function withdraw(uint256 amountLp)"
    ],
    "0xBBbD1BbB4f9b936C3604906D7592A644071dE884": [
      "constructor(address feeCollector_, address admin_, address validator_, address feeOracle_, address unlockSigner_)",
      "event Received(address indexed recipient, address token, uint256 amount, uint128 indexed lockId, bytes4 source)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Sent(bytes4 tokenSource, bytes32 tokenSourceAddress, address sender, bytes32 indexed recipient, uint256 amount, uint128 indexed lockId, bytes4 destination)",
      "function BRIDGE_MANAGER() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function STOP_MANAGER() view returns (bytes32)",
      "function TOKEN_MANAGER() view returns (bytes32)",
      "function addToken(bytes4 tokenSource, bytes32 tokenSourceAddress, address nativeTokenAddress, uint8 tokenType)",
      "function feeCollector() view returns (address)",
      "function feeOracle() view returns (address)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function lock(uint128 lockId, address tokenAddress, bytes32 recipient, bytes4 destination, uint256 amount)",
      "function lockBase(uint128 lockId, address wrappedBaseTokenAddress, bytes32 recipient, bytes4 destination) payable",
      "function removeToken(bytes4 tokenSource, bytes32 tokenSourceAddress, address newAuthority)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setFeeCollector(address _feeCollector)",
      "function setFeeOracle(address _feeOracle)",
      "function setTokenStatus(address tokenAddress, uint8 status)",
      "function setUnlockSigner(address _unlockSigner)",
      "function setValidator(address _validator)",
      "function startBridge()",
      "function stopBridge()",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function tokenInfos(address) view returns (bytes4 tokenSource, bytes32 tokenSourceAddress, uint8 precision, uint8 tokenType, uint8 tokenStatus)",
      "function tokenSourceMap(bytes4, bytes32) view returns (address)",
      "function unlock(uint128 lockId, address recipient, uint256 amount, bytes4 lockSource, bytes4 tokenSource, bytes32 tokenSourceAddress, bytes signature)",
      "function unlockSigner() view returns (address)",
      "function validator() view returns (address)"
    ],
    "0xC51397b75B783E31469bFaADE79913F3f82210d6": [
      "constructor(uint256 chainId_, uint256 chainPrecision_, address tokenAddress, address cctpMessenger_, address cctpTransmitter_, address gasOracle_)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ReceivedExtraGas(address recipient, uint256 amount)",
      "event ReceivedGas(address sender, uint256 amount)",
      "event RecipientReplaced(address sender, uint256 nonce, bytes32 newRecipient)",
      "event TokensSent(uint256 amount, address sender, bytes32 recipient, uint256 destinationChainId, uint256 nonce, uint256 receivedRelayerFeeFromGas, uint256 receivedRelayerFeeFromTokens, uint256 relayerFee, uint256 receivedRelayerFeeTokenAmount, uint256 adminFeeTokenAmount)",
      "event TokensSentExtras(bytes32 recipientWalletAddress)",
      "function adminFeeShareBP() view returns (uint256)",
      "function bridge(uint256 amount, bytes32 recipient, uint256 destinationChainId, uint256 relayerFeeTokenAmount) payable",
      "function bridgeWithWalletAddress(uint256 amount, bytes32 recipient, bytes32 recipientWalletAddress, uint256 destinationChainId, uint256 relayerFeeTokenAmount) payable",
      "function chainId() view returns (uint256)",
      "function changeRecipient(bytes originalMessage, bytes originalAttestation, bytes32 newRecipient)",
      "function gasUsage(uint256 chainId) view returns (uint256 amount)",
      "function getBridgingCostInTokens(uint256 destinationChainId) view returns (uint256)",
      "function getDomainByChainId(uint256 chainId_) view returns (uint32)",
      "function getTransactionCost(uint256 chainId) view returns (uint256)",
      "function isMessageProcessed(uint256 sourceChainId, uint64 nonce) view returns (bool)",
      "function owner() view returns (address)",
      "function receiveTokens(address recipient, bytes message, bytes signature) payable",
      "function registerBridgeDestination(uint256 chainId_, uint32 domain)",
      "function renounceOwnership()",
      "function setAdminFeeShare(uint256 adminFeeShareBP_)",
      "function setGasOracle(address gasOracle_)",
      "function setGasUsage(uint256 chainId, uint256 gasAmount)",
      "function transferOwnership(address newOwner)",
      "function unregisterBridgeDestination(uint256 chainId_)",
      "function withdrawFeeInTokens()",
      "function withdrawGas(uint256 amount)"
    ]
  },
  "usedTemplates": {
    "allbridge/pool": "0xbb30bf6f8a272cfbe6959733a828fa750a29898e627c9a1aa4ef1a5ed4e223f8"
  },
  "shapeFilesHash": "0xbde3658d9829dc6a2b849d26602a57c5fd2a8972a78d434d59fb754595ff1019"
}
