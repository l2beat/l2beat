{
  "name": "astarzkevm",
  "chain": "ethereum",
  "blockNumber": 19567776,
  "configHash": "0x1da2e0da344e861ea9bc0648db20ce61182b47b1ab81092501e429a71aa34240",
  "version": 3,
  "contracts": [
    {
      "name": "Permit2",
      "address": "0x000000000022D473030F116dDEE9F6B43aC78BA3",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1668647879,
      "values": {
        "DOMAIN_SEPARATOR": "0x866a5aba21966af95d6c7ab78eb2b2fc913915c28be3b9aa07cc04ff903e3f28"
      }
    },
    {
      "name": "PolygonDataCommittee",
      "address": "0x05652Ec92366F3C2255991a265c499E01Ba58e6a",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xd620Ca1ad5c3888e4521c3374cE4088Cb78079b8",
        "admin": "0x1e37EA18e9515db29b3E94A00eD31484A3130204"
      },
      "implementations": ["0xd620Ca1ad5c3888e4521c3374cE4088Cb78079b8"],
      "sinceTimestamp": 1711787327,
      "values": {
        "committeeHash": "0xfa0cdb192e4e3d5bda14ab176fe857843eda35d462548ac406f8e2be43d29ec7",
        "getAmountOfMembers": 2,
        "getProcotolName": "DataAvailabilityCommittee",
        "members": [
          [
            "http://okx-defi-xlayer-dac1-pro:8444",
            "0x19A81baC80f9cE3A45095f3df3a7cF69ef18fC08"
          ],
          [
            "http://okx-defi-xlayer-dac2-pro:8444",
            "0xE94Ac3cBc1C7EFFEACca68e3Bfe5D81E26A659B5"
          ]
        ],
        "owner": "0x491619874b866c3cDB7C8553877da223525ead01",
        "requiredAmountOfSignatures": 2
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1679653103,
      "values": {
        "owner": "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "0x1963D7b78e75A5eDfF9e5376E7A07A935Fb3d50d",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1708624547,
      "values": {
        "owner": "0xf98ee8c46baEa2B11e4f0450AD9D01861265F76E"
      }
    },
    {
      "name": "AstarVerifier",
      "address": "0x1C3A3da552b8662CD69538356b1E7c2E9CC1EBD8",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1706364923,
      "derivedName": "FflonkVerifier"
    },
    {
      "name": "AstarValidiumEtrog",
      "address": "0x1E163594e13030244DCAf4cDfC2cd0ba3206DA80",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x9cf80f7eB1C76ec5AE7A88b417e373449b73ac30",
        "admin": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"
      },
      "implementations": ["0x9cf80f7eB1C76ec5AE7A88b417e373449b73ac30"],
      "sinceTimestamp": 1708632059,
      "values": {
        "admin": "0xf98ee8c46baEa2B11e4f0450AD9D01861265F76E",
        "bridgeAddress": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "calculatePolPerForceBatch": 0,
        "dataAvailabilityProtocol": "0x9CCD205052c732Ac1Df2cf7bf8aACC0E371eE0B0",
        "forceBatchAddress": "0xf98ee8c46baEa2B11e4f0450AD9D01861265F76E",
        "forceBatchTimeout": 432000,
        "gasTokenAddress": "0x0000000000000000000000000000000000000000",
        "gasTokenNetwork": 0,
        "GLOBAL_EXIT_ROOT_MANAGER_L2": "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA",
        "globalExitRootManager": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
        "INITIALIZE_TX_BRIDGE_LIST_LEN_LEN": 249,
        "INITIALIZE_TX_BRIDGE_PARAMS": "0x80808401c9c38094",
        "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS": "0x80b9",
        "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA": "0x80b8",
        "INITIALIZE_TX_CONSTANT_BYTES": 32,
        "INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA": 31,
        "INITIALIZE_TX_DATA_LEN_EMPTY_METADATA": 228,
        "INITIALIZE_TX_EFFECTIVE_PERCENTAGE": "0xff",
        "isSequenceWithDataAvailabilityAllowed": false,
        "lastAccInputHash": "0x17836e825f20fdbfc59d3179746bb1c98ab609f5b0e09764c187a0e2ad13b44e",
        "lastForceBatch": 0,
        "lastForceBatchSequenced": 0,
        "networkName": "Astar zkEVM",
        "pendingAdmin": "0x0000000000000000000000000000000000000000",
        "pol": "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
        "rollupManager": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
        "SIGNATURE_INITIALIZE_TX_R": "0x00000000000000000000000000000000000000000000000000000005ca1ab1e0",
        "SIGNATURE_INITIALIZE_TX_S": "0x000000000000000000000000000000000000000000000000000000005ca1ab1e",
        "SIGNATURE_INITIALIZE_TX_V": 27,
        "trustedSequencer": "0xD49CD5f9776A54fAe89B68205F6Af69586F98203",
        "trustedSequencerURL": "https://rpc.astar-zkevm.gelato.digital"
      },
      "derivedName": "PolygonValidiumEtrog"
    },
    {
      "name": "ProxyAdmin",
      "address": "0x1e37EA18e9515db29b3E94A00eD31484A3130204",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1711787315,
      "values": {
        "owner": "0xE4c5BFaddbf21a1F35AE66F180F78822078FBfDE"
      }
    },
    {
      "name": "PolygonValidiumStorageMigration",
      "address": "0x2B0ee28D4D51bC9aDde5E58E295873F61F4a0507",
      "unverified": true,
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C",
        "admin": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"
      },
      "implementations": ["0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C"],
      "sinceTimestamp": 1711785755,
      "values": {
        "admin": "0x491619874b866c3cDB7C8553877da223525ead01",
        "bridgeAddress": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "calculatePolPerForceBatch": 0,
        "dataAvailabilityProtocol": "0x05652Ec92366F3C2255991a265c499E01Ba58e6a",
        "forceBatchAddress": "0x491619874b866c3cDB7C8553877da223525ead01",
        "forceBatchTimeout": 432000,
        "gasTokenAddress": "0x75231F58b43240C9718Dd58B4967c5114342a86c",
        "gasTokenNetwork": 0,
        "GLOBAL_EXIT_ROOT_MANAGER_L2": "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA",
        "globalExitRootManager": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
        "INITIALIZE_TX_BRIDGE_LIST_LEN_LEN": 249,
        "INITIALIZE_TX_BRIDGE_PARAMS": "0x80808401c9c38094",
        "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS": "0x80b9",
        "INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA": "0x80b8",
        "INITIALIZE_TX_CONSTANT_BYTES": 32,
        "INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA": 31,
        "INITIALIZE_TX_DATA_LEN_EMPTY_METADATA": 228,
        "INITIALIZE_TX_EFFECTIVE_PERCENTAGE": "0xff",
        "isSequenceWithDataAvailabilityAllowed": false,
        "lastAccInputHash": "0xb91af35fe1453f255efa25f9fe30898f8899f5052687984981d45b6a5b0b52b4",
        "lastForceBatch": 0,
        "lastForceBatchSequenced": 0,
        "networkName": "X Layer",
        "pendingAdmin": "0x0000000000000000000000000000000000000000",
        "pol": "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
        "rollupManager": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
        "SIGNATURE_INITIALIZE_TX_R": "0x00000000000000000000000000000000000000000000000000000005ca1ab1e0",
        "SIGNATURE_INITIALIZE_TX_S": "0x000000000000000000000000000000000000000000000000000000005ca1ab1e",
        "SIGNATURE_INITIALIZE_TX_V": 27,
        "TIMESTAMP_RANGE": 36,
        "trustedSequencer": "0xAF9d27ffe4d51eD54AC8eEc78f2785D7E11E5ab1",
        "trustedSequencerURL": "https://rpc.xlayer.tech"
      }
    },
    {
      "name": "POL",
      "address": "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1698224783,
      "values": {
        "CAP_MANAGER_ROLE": "0x027f9f680a0c6704fd9796b55c67fe885252243966ecb05a88f3e7873c845d9a",
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DOMAIN_SEPARATOR": "0xb229387d8db422d84103ea5884522a783e8f8b570d17cc1e9bb39959983346f8",
        "eip712Domain": [
          "0x0f",
          "Polygon Ecosystem Token",
          "1",
          1,
          "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          []
        ],
        "EMISSION_ROLE": "0x573321b8a13c75b2702bc4b0ad9afaae98bf6985285411964a564e68bf6da1c9",
        "lastMint": 1711986143,
        "mintPerSecondCap": "13370000000000000000",
        "name": "Polygon Ecosystem Token",
        "PERMIT2": "0x000000000022D473030F116dDEE9F6B43aC78BA3",
        "PERMIT2_REVOKER_ROLE": "0xbd4c1461ef59750b24719a44d7e2a7948c57fd12c98e333541b7ea7b61f07cb7",
        "permit2Enabled": true,
        "symbol": "POL",
        "totalSupply": "10129821158641559310000000000",
        "version": "1.1.0"
      },
      "derivedName": "PolygonEcosystemToken"
    },
    {
      "name": "PolygonRollupManager",
      "address": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x3b82Da772c825283d85d5d6717A77C6Ff582053b",
        "admin": "0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"
      },
      "implementations": ["0x3b82Da772c825283d85d5d6717A77C6Ff582053b"],
      "sinceTimestamp": 1679653163,
      "values": {
        "bridgeAddress": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getBatchFee": "100000000000000000",
        "globalExitRootManager": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
        "isEmergencyState": false,
        "lastDeactivatedEmergencyStateTimestamp": 1711323791,
        "pendingStateTimeout": 432000,
        "pol": "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
        "rollupCount": 3,
        "rollupsData": [
          [
            "0x519E42c24163192Dca44CD3fBDCEBF6be9130987",
            "0x0775e11309d75aA6b0967917fB0213C5673eDf81"
          ],
          [
            "0x1E163594e13030244DCAf4cDfC2cd0ba3206DA80",
            "0x1C3A3da552b8662CD69538356b1E7c2E9CC1EBD8"
          ],
          [
            "0x2B0ee28D4D51bC9aDde5E58E295873F61F4a0507",
            "0x0775e11309d75aA6b0967917fB0213C5673eDf81"
          ]
        ],
        "rollupTypeCount": 4,
        "rollupTypes": [
          [
            "0x9cf80f7eB1C76ec5AE7A88b417e373449b73ac30",
            "0x1C3A3da552b8662CD69538356b1E7c2E9CC1EBD8"
          ],
          [
            "0x2650a9a4fC64f63F573EF0F405064EF54BC46f71",
            "0x4AaBBA26EA9E7A7fbD052d17a167e6aE3F8eC7Be"
          ],
          [
            "0x2650a9a4fC64f63F573EF0F405064EF54BC46f71",
            "0x0775e11309d75aA6b0967917fB0213C5673eDf81"
          ],
          [
            "0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C",
            "0x0775e11309d75aA6b0967917fB0213C5673eDf81"
          ]
        ],
        "trustedAggregatorTimeout": 432000,
        "verifyBatchTimeTarget": 1800
      },
      "derivedName": "PolygonRollupManager"
    },
    {
      "name": "PolygonZkEVMGlobalExitRootV2",
      "address": "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x2E38cD55163137483E30580Cb468C2dFf1d85077",
        "admin": "0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"
      },
      "implementations": ["0x2E38cD55163137483E30580Cb468C2dFf1d85077"],
      "sinceTimestamp": 1679653151,
      "values": {
        "bridgeAddress": "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "depositCount": 6983,
        "getLastGlobalExitRoot": "0xc095e5994a0b9fd52ea40b40a773ef3501d71b6714aaa9f317da893d00a4a232",
        "getRoot": "0xfa45b3fc78774ebaab9c348497cd3179c1b985b3d5acd9f7943ef5249df28026",
        "lastMainnetExitRoot": "0xb660abe75b32c4549f002831954229d9bca2088cbba3e11ed323d658d3405195",
        "lastRollupExitRoot": "0xbe9fd8ca76197d4a5e1a89029ce2a23b17702c9c061ac9e1d5653d6de3cdd87e",
        "rollupManager": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0x6c4876Ecb5de33f76700f44d547C593065806dAC",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "1 of 3 (33%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1708443503,
      "values": {
        "domainSeparator": "0x441d2a12799495cc46b37e56d46fc0f7f724dc7414f16f665f284d32eac972e0",
        "getChainId": 1,
        "getOwners": [
          "0xEc33045FA66cF43E9b5b9F332dc124dbc71c0917",
          "0x33f9b8ac59814E1A0a59e5d1a6125E5E7AF58BA8",
          "0x2b3Aa0Dc0622eFb9426F5A44015aE9151Bd8224C"
        ],
        "getThreshold": 1,
        "nonce": 2,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "OKBImplementation",
      "address": "0x75231F58b43240C9718Dd58B4967c5114342a86c",
      "upgradeability": {
        "type": "ZeppelinOS proxy",
        "implementation": "0x5DbA7dfCDbfb8812D30FDd99d9441F8b7a605621",
        "owner": "0x4A164CA582D169f7caad471250991Dd861ddA981"
      },
      "implementations": ["0x5DbA7dfCDbfb8812D30FDd99d9441F8b7a605621"],
      "sinceTimestamp": 1556264879,
      "values": {
        "decimals": 18,
        "implementation": "0x5DbA7dfCDbfb8812D30FDd99d9441F8b7a605621",
        "lawEnforcementRole": "0x5B27e98516fD2Bd5001D4dfE3f5a2263f702f634",
        "name": "OKB",
        "owner": "0xc3d82e22501f3D836727e335d3cf2151b07947d7",
        "paused": false,
        "proxyOwner": "0x4A164CA582D169f7caad471250991Dd861ddA981",
        "supplyController": "0x4a11078a99b118BbFee78a5c187D98D264360433",
        "symbol": "OKB",
        "totalSupply": "300000000000000000000000000"
      }
    },
    {
      "name": "AstarValidiumDAC",
      "address": "0x9CCD205052c732Ac1Df2cf7bf8aACC0E371eE0B0",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xF4e87685e323818E0aE35dCdFc3B65106002E456",
        "admin": "0x1963D7b78e75A5eDfF9e5376E7A07A935Fb3d50d"
      },
      "implementations": ["0xF4e87685e323818E0aE35dCdFc3B65106002E456"],
      "sinceTimestamp": 1708624559,
      "values": {
        "committeeHash": "0xf3b713b9d34dd6c8f99950e7f622937def5d1044471824b807c8b9dbedf75d2f",
        "getAmountOfMembers": 5,
        "getProcotolName": "DataAvailabilityCommittee",
        "members": [
          [
            "http://cdk-validium-dac-5-prod-6d3f0-port1.cdk-validium-deployment-6d3f0.svc.cluster.local:8444",
            "0x08EbBdFf8cB6d1336515A89641e899bc8ce91F2C"
          ],
          [
            "http://cdk-validium-dac-4-prod-6d3f0-port1.cdk-validium-deployment-6d3f0.svc.cluster.local:8444",
            "0x37f0B74e0Fc72aDAAb1Fd39Ec6d779F596866aB8"
          ],
          [
            "http://cdk-validium-dac-3-prod-6d3f0-port1.cdk-validium-deployment-6d3f0.svc.cluster.local:8444",
            "0x8FB3cb4777EE1c2C35C48aC69a650026d18aFF08"
          ],
          [
            "http://cdk-validium-dac-2-prod-6d3f0-port1.cdk-validium-deployment-6d3f0.svc.cluster.local:8444",
            "0xCFb77B6abb27e04cE0DB347cCCd5544f51A98CBc"
          ],
          [
            "http://cdk-validium-dac-1-prod-6d3f0-port1.cdk-validium-deployment-6d3f0.svc.cluster.local:8444",
            "0xF54b295a221B5d3510D03d9B16E23BA151da012A"
          ]
        ],
        "owner": "0xf98ee8c46baEa2B11e4f0450AD9D01861265F76E",
        "requiredAmountOfSignatures": 3
      },
      "derivedName": "PolygonDataCommittee"
    },
    {
      "name": "PolygonZkEVMTimelock",
      "address": "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1679653187,
      "values": {
        "CANCELLER_ROLE": "0xfd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
        "getMinDelay": 864000,
        "polygonZkEVM": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
        "PROPOSER_ROLE": "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
        "TIMELOCK_ADMIN_ROLE": "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
      }
    },
    {
      "name": "AdminMultisig",
      "address": "0xf98ee8c46baEa2B11e4f0450AD9D01861265F76E",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "modules": [],
        "threshold": "3 of 6 (50%)"
      },
      "implementations": ["0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"],
      "sinceTimestamp": 1708444367,
      "values": {
        "domainSeparator": "0x9eb12473e8e7bb9cf5c92b4b3effda22cbfcab7b4fb961127d7b5c3c54d2c943",
        "getChainId": 1,
        "getOwners": [
          "0xe4D4fBC6e27B3AE9D881BD9400071FB6c62E4dfa",
          "0xEc24369A1269171e3cb0A323DD920F99Cb528Fb0",
          "0x127Bae6Fc751dC92111a359500ae91EB437f3dCb",
          "0x83cC8195856b0463dEd5f052021009b7985FDa2C",
          "0x4324c3960c7B2567D0C13ba17493bb364c407937",
          "0x6c4876Ecb5de33f76700f44d547C593065806dAC"
        ],
        "getThreshold": 3,
        "nonce": 5,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    }
  ],
  "eoas": [
    "0x08EbBdFf8cB6d1336515A89641e899bc8ce91F2C",
    "0x127Bae6Fc751dC92111a359500ae91EB437f3dCb",
    "0x19A81baC80f9cE3A45095f3df3a7cF69ef18fC08",
    "0x2b3Aa0Dc0622eFb9426F5A44015aE9151Bd8224C",
    "0x33f9b8ac59814E1A0a59e5d1a6125E5E7AF58BA8",
    "0x37f0B74e0Fc72aDAAb1Fd39Ec6d779F596866aB8",
    "0x4324c3960c7B2567D0C13ba17493bb364c407937",
    "0x491619874b866c3cDB7C8553877da223525ead01",
    "0x4a11078a99b118BbFee78a5c187D98D264360433",
    "0x4A164CA582D169f7caad471250991Dd861ddA981",
    "0x5B27e98516fD2Bd5001D4dfE3f5a2263f702f634",
    "0x83cC8195856b0463dEd5f052021009b7985FDa2C",
    "0x8FB3cb4777EE1c2C35C48aC69a650026d18aFF08",
    "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA",
    "0xAF9d27ffe4d51eD54AC8eEc78f2785D7E11E5ab1",
    "0xc3d82e22501f3D836727e335d3cf2151b07947d7",
    "0xCFb77B6abb27e04cE0DB347cCCd5544f51A98CBc",
    "0xD49CD5f9776A54fAe89B68205F6Af69586F98203",
    "0xE4c5BFaddbf21a1F35AE66F180F78822078FBfDE",
    "0xe4D4fBC6e27B3AE9D881BD9400071FB6c62E4dfa",
    "0xE94Ac3cBc1C7EFFEACca68e3Bfe5D81E26A659B5",
    "0xEc24369A1269171e3cb0A323DD920F99Cb528Fb0",
    "0xEc33045FA66cF43E9b5b9F332dc124dbc71c0917",
    "0xF54b295a221B5d3510D03d9B16E23BA151da012A"
  ],
  "abis": {
    "0x000000000022D473030F116dDEE9F6B43aC78BA3": [
      "error AllowanceExpired(uint256 deadline)",
      "error ExcessiveInvalidation()",
      "error InsufficientAllowance(uint256 amount)",
      "error InvalidAmount(uint256 maxAmount)",
      "error InvalidContractSignature()",
      "error InvalidNonce()",
      "error InvalidSignature()",
      "error InvalidSignatureLength()",
      "error InvalidSigner()",
      "error LengthMismatch()",
      "error SignatureExpired(uint256 signatureDeadline)",
      "event Approval(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration)",
      "event Lockdown(address indexed owner, address token, address spender)",
      "event NonceInvalidation(address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce)",
      "event Permit(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration, uint48 nonce)",
      "event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address, address, address) view returns (uint160 amount, uint48 expiration, uint48 nonce)",
      "function approve(address token, address spender, uint160 amount, uint48 expiration)",
      "function invalidateNonces(address token, address spender, uint48 newNonce)",
      "function invalidateUnorderedNonces(uint256 wordPos, uint256 mask)",
      "function lockdown(tuple(address token, address spender)[] approvals)",
      "function nonceBitmap(address, uint256) view returns (uint256)",
      "function permit(address owner, tuple(tuple(address token, uint160 amount, uint48 expiration, uint48 nonce)[] details, address spender, uint256 sigDeadline) permitBatch, bytes signature)",
      "function permit(address owner, tuple(tuple(address token, uint160 amount, uint48 expiration, uint48 nonce) details, address spender, uint256 sigDeadline) permitSingle, bytes signature)",
      "function permitTransferFrom(tuple(tuple(address token, uint256 amount) permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount) transferDetails, address owner, bytes signature)",
      "function permitTransferFrom(tuple(tuple(address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount)[] transferDetails, address owner, bytes signature)",
      "function permitWitnessTransferFrom(tuple(tuple(address token, uint256 amount) permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount) transferDetails, address owner, bytes32 witness, string witnessTypeString, bytes signature)",
      "function permitWitnessTransferFrom(tuple(tuple(address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount)[] transferDetails, address owner, bytes32 witness, string witnessTypeString, bytes signature)",
      "function transferFrom(tuple(address from, address to, uint160 amount, address token)[] transferDetails)",
      "function transferFrom(address from, address to, uint160 amount, address token)"
    ],
    "0x05652Ec92366F3C2255991a265c499E01Ba58e6a": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x10D296e8aDd0535be71639E5D1d1c30ae1C6bD4C": [
      "constructor(address _globalExitRootManager, address _pol, address _bridgeAddress, address _rollupManager)",
      "error BatchAlreadyVerified()",
      "error BatchNotSequencedOrNotSequenceEnd()",
      "error ExceedMaxVerifyBatches()",
      "error FinalNumBatchBelowLastVerifiedBatch()",
      "error FinalNumBatchDoesNotMatchPendingState()",
      "error FinalPendingStateNumInvalid()",
      "error ForceBatchNotAllowed()",
      "error ForceBatchTimeoutNotExpired()",
      "error ForceBatchesAlreadyActive()",
      "error ForceBatchesDecentralized()",
      "error ForceBatchesNotAllowedOnEmergencyState()",
      "error ForceBatchesOverflow()",
      "error ForcedDataDoesNotMatch()",
      "error GasTokenNetworkMustBeZeroOnEther()",
      "error GlobalExitRootNotExist()",
      "error HaltTimeoutNotExpired()",
      "error HaltTimeoutNotExpiredAfterEmergencyState()",
      "error HugeTokenMetadataNotSupported()",
      "error InitNumBatchAboveLastVerifiedBatch()",
      "error InitNumBatchDoesNotMatchPendingState()",
      "error InitSequencedBatchDoesNotMatch()",
      "error InvalidInitializeTransaction()",
      "error InvalidProof()",
      "error InvalidRangeBatchTimeTarget()",
      "error InvalidRangeForceBatchTimeout()",
      "error InvalidRangeMultiplierBatchFee()",
      "error MaxTimestampSequenceInvalid()",
      "error NewAccInputHashDoesNotExist()",
      "error NewPendingStateTimeoutMustBeLower()",
      "error NewStateRootNotInsidePrime()",
      "error NewTrustedAggregatorTimeoutMustBeLower()",
      "error NotEnoughMaticAmount()",
      "error NotEnoughPOLAmount()",
      "error OldAccInputHashDoesNotExist()",
      "error OldStateRootDoesNotExist()",
      "error OnlyAdmin()",
      "error OnlyPendingAdmin()",
      "error OnlyRollupManager()",
      "error OnlyTrustedAggregator()",
      "error OnlyTrustedSequencer()",
      "error PendingStateDoesNotExist()",
      "error PendingStateInvalid()",
      "error PendingStateNotConsolidable()",
      "error PendingStateTimeoutExceedHaltAggregationTimeout()",
      "error SequenceWithDataAvailabilityNotAllowed()",
      "error SequenceZeroBatches()",
      "error SequencedTimestampBelowForcedTimestamp()",
      "error SequencedTimestampInvalid()",
      "error StoredRootMustBeDifferentThanNewRoot()",
      "error SwitchToSameValue()",
      "error TransactionsLengthAboveMax()",
      "error TrustedAggregatorTimeoutExceedHaltAggregationTimeout()",
      "error TrustedAggregatorTimeoutNotExpired()",
      "event AcceptAdminRole(address newAdmin)",
      "event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)",
      "event InitialSequenceBatches(bytes transactions, bytes32 lastGlobalExitRoot, address sequencer)",
      "event Initialized(uint8 version)",
      "event SequenceBatches(uint64 indexed numBatch, bytes32 l1InfoRoot)",
      "event SequenceForceBatches(uint64 indexed numBatch)",
      "event SetDataAvailabilityProtocol(address newDataAvailabilityProtocol)",
      "event SetForceBatchAddress(address newForceBatchAddress)",
      "event SetForceBatchTimeout(uint64 newforceBatchTimeout)",
      "event SetTrustedSequencer(address newTrustedSequencer)",
      "event SetTrustedSequencerURL(string newTrustedSequencerURL)",
      "event SwitchSequenceWithDataAvailability()",
      "event TransferAdminRole(address newPendingAdmin)",
      "event VerifyBatches(uint64 indexed numBatch, bytes32 stateRoot, address indexed aggregator)",
      "function GLOBAL_EXIT_ROOT_MANAGER_L2() view returns (address)",
      "function INITIALIZE_TX_BRIDGE_LIST_LEN_LEN() view returns (uint8)",
      "function INITIALIZE_TX_BRIDGE_PARAMS() view returns (bytes)",
      "function INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS() view returns (bytes)",
      "function INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA() view returns (bytes)",
      "function INITIALIZE_TX_CONSTANT_BYTES() view returns (uint16)",
      "function INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA() view returns (uint16)",
      "function INITIALIZE_TX_DATA_LEN_EMPTY_METADATA() view returns (uint8)",
      "function INITIALIZE_TX_EFFECTIVE_PERCENTAGE() view returns (bytes1)",
      "function SIGNATURE_INITIALIZE_TX_R() view returns (bytes32)",
      "function SIGNATURE_INITIALIZE_TX_S() view returns (bytes32)",
      "function SIGNATURE_INITIALIZE_TX_V() view returns (uint8)",
      "function TIMESTAMP_RANGE() view returns (uint256)",
      "function acceptAdminRole()",
      "function admin() view returns (address)",
      "function bridgeAddress() view returns (address)",
      "function calculatePolPerForceBatch() view returns (uint256)",
      "function dataAvailabilityProtocol() view returns (address)",
      "function forceBatch(bytes transactions, uint256 polAmount)",
      "function forceBatchAddress() view returns (address)",
      "function forceBatchTimeout() view returns (uint64)",
      "function forcedBatches(uint64) view returns (bytes32)",
      "function gasTokenAddress() view returns (address)",
      "function gasTokenNetwork() view returns (uint32)",
      "function generateInitializeTransaction(uint32 networkID, address _gasTokenAddress, uint32 _gasTokenNetwork, bytes _gasTokenMetadata) view returns (bytes)",
      "function globalExitRootManager() view returns (address)",
      "function initialize(address _admin, address sequencer, uint32 networkID, address _gasTokenAddress, string sequencerURL, string _networkName)",
      "function initializeMigration()",
      "function isSequenceWithDataAvailabilityAllowed() view returns (bool)",
      "function lastAccInputHash() view returns (bytes32)",
      "function lastForceBatch() view returns (uint64)",
      "function lastForceBatchSequenced() view returns (uint64)",
      "function networkName() view returns (string)",
      "function onVerifyBatches(uint64 lastVerifiedBatch, bytes32 newStateRoot, address aggregator)",
      "function pendingAdmin() view returns (address)",
      "function pol() view returns (address)",
      "function rollupManager() view returns (address)",
      "function sequenceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, uint64 maxSequenceTimestamp, uint64 initSequencedBatch, address l2Coinbase)",
      "function sequenceBatchesValidium(tuple(bytes32 transactionsHash, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, uint64 maxSequenceTimestamp, uint64 initSequencedBatch, address l2Coinbase, bytes dataAvailabilityMessage)",
      "function sequenceForceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches)",
      "function setDataAvailabilityProtocol(address newDataAvailabilityProtocol)",
      "function setForceBatchAddress(address newForceBatchAddress)",
      "function setForceBatchTimeout(uint64 newforceBatchTimeout)",
      "function setTrustedSequencer(address newTrustedSequencer)",
      "function setTrustedSequencerURL(string newTrustedSequencerURL)",
      "function switchSequenceWithDataAvailability(bool newIsSequenceWithDataAvailabilityAllowed)",
      "function transferAdminRole(address newPendingAdmin)",
      "function trustedSequencer() view returns (address)",
      "function trustedSequencerURL() view returns (string)"
    ],
    "0x1963D7b78e75A5eDfF9e5376E7A07A935Fb3d50d": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x1C3A3da552b8662CD69538356b1E7c2E9CC1EBD8": [
      "function verifyProof(bytes32[24] proof, uint256[1] pubSignals) view returns (bool)"
    ],
    "0x1E163594e13030244DCAf4cDfC2cd0ba3206DA80": [
      "constructor(address _logic, address admin, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x1e37EA18e9515db29b3E94A00eD31484A3130204": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x2E38cD55163137483E30580Cb468C2dFf1d85077": [
      "constructor(address _rollupManager, address _bridgeAddress)",
      "error MerkleTreeFull()",
      "error OnlyAllowedContracts()",
      "event UpdateL1InfoTree(bytes32 indexed mainnetExitRoot, bytes32 indexed rollupExitRoot)",
      "function bridgeAddress() view returns (address)",
      "function calculateRoot(bytes32 leafHash, bytes32[32] smtProof, uint32 index) pure returns (bytes32)",
      "function depositCount() view returns (uint256)",
      "function getLastGlobalExitRoot() view returns (bytes32)",
      "function getLeafValue(bytes32 newGlobalExitRoot, uint256 lastBlockHash, uint64 timestamp) pure returns (bytes32)",
      "function getRoot() view returns (bytes32)",
      "function globalExitRootMap(bytes32) view returns (uint256)",
      "function lastMainnetExitRoot() view returns (bytes32)",
      "function lastRollupExitRoot() view returns (bytes32)",
      "function rollupManager() view returns (address)",
      "function updateExitRoot(bytes32 newRoot)",
      "function verifyMerkleProof(bytes32 leafHash, bytes32[32] smtProof, uint32 index, bytes32 root) pure returns (bool)"
    ],
    "0x3b82Da772c825283d85d5d6717A77C6Ff582053b": [
      "constructor(address _globalExitRootManager, address _pol, address _bridgeAddress)",
      "error AccessControlOnlyCanRenounceRolesForSelf()",
      "error AddressDoNotHaveRequiredRole()",
      "error AllzkEVMSequencedBatchesMustBeVerified()",
      "error BatchFeeOutOfRange()",
      "error ChainIDAlreadyExist()",
      "error ExceedMaxVerifyBatches()",
      "error FinalNumBatchBelowLastVerifiedBatch()",
      "error FinalNumBatchDoesNotMatchPendingState()",
      "error FinalPendingStateNumInvalid()",
      "error HaltTimeoutNotExpired()",
      "error InitBatchMustMatchCurrentForkID()",
      "error InitNumBatchAboveLastVerifiedBatch()",
      "error InitNumBatchDoesNotMatchPendingState()",
      "error InvalidProof()",
      "error InvalidRangeBatchTimeTarget()",
      "error InvalidRangeMultiplierBatchFee()",
      "error MustSequenceSomeBatch()",
      "error NewAccInputHashDoesNotExist()",
      "error NewPendingStateTimeoutMustBeLower()",
      "error NewStateRootNotInsidePrime()",
      "error NewTrustedAggregatorTimeoutMustBeLower()",
      "error OldAccInputHashDoesNotExist()",
      "error OldStateRootDoesNotExist()",
      "error OnlyEmergencyState()",
      "error OnlyNotEmergencyState()",
      "error PendingStateDoesNotExist()",
      "error PendingStateInvalid()",
      "error PendingStateNotConsolidable()",
      "error RollupAddressAlreadyExist()",
      "error RollupMustExist()",
      "error RollupTypeDoesNotExist()",
      "error RollupTypeObsolete()",
      "error SenderMustBeRollup()",
      "error StoredRootMustBeDifferentThanNewRoot()",
      "error TrustedAggregatorTimeoutNotExpired()",
      "error UpdateNotCompatible()",
      "error UpdateToSameRollupTypeID()",
      "event AddExistingRollup(uint32 indexed rollupID, uint64 forkID, address rollupAddress, uint64 chainID, uint8 rollupCompatibilityID, uint64 lastVerifiedBatchBeforeUpgrade)",
      "event AddNewRollupType(uint32 indexed rollupTypeID, address consensusImplementation, address verifier, uint64 forkID, uint8 rollupCompatibilityID, bytes32 genesis, string description)",
      "event ConsolidatePendingState(uint32 indexed rollupID, uint64 numBatch, bytes32 stateRoot, bytes32 exitRoot, uint64 pendingStateNum)",
      "event CreateNewRollup(uint32 indexed rollupID, uint32 rollupTypeID, address rollupAddress, uint64 chainID, address gasTokenAddress)",
      "event EmergencyStateActivated()",
      "event EmergencyStateDeactivated()",
      "event Initialized(uint8 version)",
      "event ObsoleteRollupType(uint32 indexed rollupTypeID)",
      "event OnSequenceBatches(uint32 indexed rollupID, uint64 lastBatchSequenced)",
      "event OverridePendingState(uint32 indexed rollupID, uint64 numBatch, bytes32 stateRoot, bytes32 exitRoot, address aggregator)",
      "event ProveNonDeterministicPendingState(bytes32 storedStateRoot, bytes32 provedStateRoot)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SetBatchFee(uint256 newBatchFee)",
      "event SetMultiplierBatchFee(uint16 newMultiplierBatchFee)",
      "event SetPendingStateTimeout(uint64 newPendingStateTimeout)",
      "event SetTrustedAggregator(address newTrustedAggregator)",
      "event SetTrustedAggregatorTimeout(uint64 newTrustedAggregatorTimeout)",
      "event SetVerifyBatchTimeTarget(uint64 newVerifyBatchTimeTarget)",
      "event UpdateRollup(uint32 indexed rollupID, uint32 newRollupTypeID, uint64 lastVerifiedBatchBeforeUpgrade)",
      "event VerifyBatches(uint32 indexed rollupID, uint64 numBatch, bytes32 stateRoot, bytes32 exitRoot, address indexed aggregator)",
      "event VerifyBatchesTrustedAggregator(uint32 indexed rollupID, uint64 numBatch, bytes32 stateRoot, bytes32 exitRoot, address indexed aggregator)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function activateEmergencyState()",
      "function addExistingRollup(address rollupAddress, address verifier, uint64 forkID, uint64 chainID, bytes32 genesis, uint8 rollupCompatibilityID)",
      "function addNewRollupType(address consensusImplementation, address verifier, uint64 forkID, uint8 rollupCompatibilityID, bytes32 genesis, string description)",
      "function bridgeAddress() view returns (address)",
      "function calculateRewardPerBatch() view returns (uint256)",
      "function chainIDToRollupID(uint64 chainID) view returns (uint32 rollupID)",
      "function consolidatePendingState(uint32 rollupID, uint64 pendingStateNum)",
      "function createNewRollup(uint32 rollupTypeID, uint64 chainID, address admin, address sequencer, address gasTokenAddress, string sequencerURL, string networkName)",
      "function deactivateEmergencyState()",
      "function getBatchFee() view returns (uint256)",
      "function getForcedBatchFee() view returns (uint256)",
      "function getInputSnarkBytes(uint32 rollupID, uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 oldStateRoot, bytes32 newStateRoot) view returns (bytes)",
      "function getLastVerifiedBatch(uint32 rollupID) view returns (uint64)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRollupBatchNumToStateRoot(uint32 rollupID, uint64 batchNum) view returns (bytes32)",
      "function getRollupExitRoot() view returns (bytes32)",
      "function getRollupPendingStateTransitions(uint32 rollupID, uint64 batchNum) view returns (tuple(uint64 timestamp, uint64 lastVerifiedBatch, bytes32 exitRoot, bytes32 stateRoot))",
      "function getRollupSequencedBatches(uint32 rollupID, uint64 batchNum) view returns (tuple(bytes32 accInputHash, uint64 sequencedTimestamp, uint64 previousLastBatchSequenced))",
      "function globalExitRootManager() view returns (address)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address trustedAggregator, uint64 _pendingStateTimeout, uint64 _trustedAggregatorTimeout, address admin, address timelock, address emergencyCouncil, address polygonZkEVM, address zkEVMVerifier, uint64 zkEVMForkID, uint64 zkEVMChainID)",
      "function isEmergencyState() view returns (bool)",
      "function isPendingStateConsolidable(uint32 rollupID, uint64 pendingStateNum) view returns (bool)",
      "function lastAggregationTimestamp() view returns (uint64)",
      "function lastDeactivatedEmergencyStateTimestamp() view returns (uint64)",
      "function multiplierBatchFee() view returns (uint16)",
      "function obsoleteRollupType(uint32 rollupTypeID)",
      "function onSequenceBatches(uint64 newSequencedBatches, bytes32 newAccInputHash) returns (uint64)",
      "function overridePendingState(uint32 rollupID, uint64 initPendingStateNum, uint64 finalPendingStateNum, uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, bytes32[24] proof)",
      "function pendingStateTimeout() view returns (uint64)",
      "function pol() view returns (address)",
      "function proveNonDeterministicPendingState(uint32 rollupID, uint64 initPendingStateNum, uint64 finalPendingStateNum, uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, bytes32[24] proof)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function rollupAddressToID(address rollupAddress) view returns (uint32 rollupID)",
      "function rollupCount() view returns (uint32)",
      "function rollupIDToRollupData(uint32 rollupID) view returns (address rollupContract, uint64 chainID, address verifier, uint64 forkID, bytes32 lastLocalExitRoot, uint64 lastBatchSequenced, uint64 lastVerifiedBatch, uint64 lastPendingState, uint64 lastPendingStateConsolidated, uint64 lastVerifiedBatchBeforeUpgrade, uint64 rollupTypeID, uint8 rollupCompatibilityID)",
      "function rollupTypeCount() view returns (uint32)",
      "function rollupTypeMap(uint32 rollupTypeID) view returns (address consensusImplementation, address verifier, uint64 forkID, uint8 rollupCompatibilityID, bool obsolete, bytes32 genesis)",
      "function setBatchFee(uint256 newBatchFee)",
      "function setMultiplierBatchFee(uint16 newMultiplierBatchFee)",
      "function setPendingStateTimeout(uint64 newPendingStateTimeout)",
      "function setTrustedAggregatorTimeout(uint64 newTrustedAggregatorTimeout)",
      "function setVerifyBatchTimeTarget(uint64 newVerifyBatchTimeTarget)",
      "function totalSequencedBatches() view returns (uint64)",
      "function totalVerifiedBatches() view returns (uint64)",
      "function trustedAggregatorTimeout() view returns (uint64)",
      "function updateRollup(address rollupContract, uint32 newRollupTypeID, bytes upgradeData)",
      "function verifyBatchTimeTarget() view returns (uint64)",
      "function verifyBatches(uint32 rollupID, uint64 pendingStateNum, uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, address beneficiary, bytes32[24] proof)",
      "function verifyBatchesTrustedAggregator(uint32 rollupID, uint64 pendingStateNum, uint64 initNumBatch, uint64 finalNewBatch, bytes32 newLocalExitRoot, bytes32 newStateRoot, address beneficiary, bytes32[24] proof)"
    ],
    "0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6": [
      "constructor(address migration, address emissionManager, address protocolCouncil, address emergencyCouncil)",
      "error InvalidAddress()",
      "error InvalidShortString()",
      "error MaxMintExceeded(uint256 maxMint, uint256 mintRequested)",
      "error StringTooLong(string str)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event EIP712DomainChanged()",
      "event MintCapUpdated(uint256 oldCap, uint256 newCap)",
      "event Permit2AllowanceUpdated(bool enabled)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function CAP_MANAGER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function EMISSION_ROLE() view returns (bytes32)",
      "function PERMIT2() view returns (address)",
      "function PERMIT2_REVOKER_ROLE() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function lastMint() view returns (uint256)",
      "function mint(address to, uint256 amount)",
      "function mintPerSecondCap() view returns (uint256)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function permit2Enabled() view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function updateMintCap(uint256 newCap)",
      "function updatePermit2Allowance(bool enabled)",
      "function version() pure returns (string)"
    ],
    "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x5DbA7dfCDbfb8812D30FDd99d9441F8b7a605621": [
      "function name() view returns (string)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address _from, address _to, uint256 _value) returns (bool)",
      "function decimals() view returns (uint8)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function setLawEnforcementRole(address _newLawEnforcementRole)",
      "function unpause()",
      "function unfreeze(address _addr)",
      "function setSupplyController(address _newSupplyController)",
      "function paused() view returns (bool)",
      "function balanceOf(address _addr) view returns (uint256)",
      "function initialize()",
      "function pause()",
      "function freeze(address _addr)",
      "function owner() view returns (address)",
      "function symbol() view returns (string)",
      "function decreaseSupply(uint256 _value) returns (bool success)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function lawEnforcementRole() view returns (address)",
      "function transfer(address _to, uint256 _value) returns (bool)",
      "function increaseSupply(uint256 _value) returns (bool success)",
      "function allowance(address _owner, address spender) view returns (uint256)",
      "function wipeFrozenAddress(address _addr)",
      "function isFrozen(address _addr) view returns (bool)",
      "function supplyController() view returns (address)",
      "function transferOwnership(address _newOwner)",
      "constructor()",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event OwnershipTransferred(address indexed oldOwner, address indexed newOwner)",
      "event Pause()",
      "event Unpause()",
      "event AddressFrozen(address indexed addr)",
      "event AddressUnfrozen(address indexed addr)",
      "event FrozenAddressWiped(address indexed addr)",
      "event LawEnforcementRoleSet(address indexed oldLawEnforcementRole, address indexed newLawEnforcementRole)",
      "event SupplyIncreased(address indexed to, uint256 value)",
      "event SupplyDecreased(address indexed from, uint256 value)",
      "event SupplyControllerSet(address indexed oldSupplyController, address indexed newSupplyController)"
    ],
    "0x6c4876Ecb5de33f76700f44d547C593065806dAC": [
      "constructor(address _singleton)"
    ],
    "0x75231F58b43240C9718Dd58B4967c5114342a86c": [
      "function proxyOwner() view returns (address owner)",
      "function upgradeTo(address implementation)",
      "function upgradeToAndCall(address implementation, bytes data) payable",
      "function implementation() view returns (address impl)",
      "function transferProxyOwnership(address newOwner)",
      "constructor()",
      "event ProxyOwnershipTransferred(address previousOwner, address newOwner)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x9CCD205052c732Ac1Df2cf7bf8aACC0E371eE0B0": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x9cf80f7eB1C76ec5AE7A88b417e373449b73ac30": [
      "constructor(address _globalExitRootManager, address _pol, address _bridgeAddress, address _rollupManager)",
      "error BatchAlreadyVerified()",
      "error BatchNotSequencedOrNotSequenceEnd()",
      "error ExceedMaxVerifyBatches()",
      "error FinalNumBatchBelowLastVerifiedBatch()",
      "error FinalNumBatchDoesNotMatchPendingState()",
      "error FinalPendingStateNumInvalid()",
      "error ForceBatchNotAllowed()",
      "error ForceBatchTimeoutNotExpired()",
      "error ForceBatchesAlreadyActive()",
      "error ForceBatchesDecentralized()",
      "error ForceBatchesNotAllowedOnEmergencyState()",
      "error ForceBatchesOverflow()",
      "error ForcedDataDoesNotMatch()",
      "error GasTokenNetworkMustBeZeroOnEther()",
      "error GlobalExitRootNotExist()",
      "error HaltTimeoutNotExpired()",
      "error HaltTimeoutNotExpiredAfterEmergencyState()",
      "error HugeTokenMetadataNotSupported()",
      "error InitNumBatchAboveLastVerifiedBatch()",
      "error InitNumBatchDoesNotMatchPendingState()",
      "error InvalidInitializeTransaction()",
      "error InvalidProof()",
      "error InvalidRangeBatchTimeTarget()",
      "error InvalidRangeForceBatchTimeout()",
      "error InvalidRangeMultiplierBatchFee()",
      "error NewAccInputHashDoesNotExist()",
      "error NewPendingStateTimeoutMustBeLower()",
      "error NewStateRootNotInsidePrime()",
      "error NewTrustedAggregatorTimeoutMustBeLower()",
      "error NotEnoughMaticAmount()",
      "error NotEnoughPOLAmount()",
      "error OldAccInputHashDoesNotExist()",
      "error OldStateRootDoesNotExist()",
      "error OnlyAdmin()",
      "error OnlyPendingAdmin()",
      "error OnlyRollupManager()",
      "error OnlyTrustedAggregator()",
      "error OnlyTrustedSequencer()",
      "error PendingStateDoesNotExist()",
      "error PendingStateInvalid()",
      "error PendingStateNotConsolidable()",
      "error PendingStateTimeoutExceedHaltAggregationTimeout()",
      "error SequenceWithDataAvailabilityNotAllowed()",
      "error SequenceZeroBatches()",
      "error SequencedTimestampBelowForcedTimestamp()",
      "error SequencedTimestampInvalid()",
      "error StoredRootMustBeDifferentThanNewRoot()",
      "error SwitchToSameValue()",
      "error TransactionsLengthAboveMax()",
      "error TrustedAggregatorTimeoutExceedHaltAggregationTimeout()",
      "error TrustedAggregatorTimeoutNotExpired()",
      "event AcceptAdminRole(address newAdmin)",
      "event ForceBatch(uint64 indexed forceBatchNum, bytes32 lastGlobalExitRoot, address sequencer, bytes transactions)",
      "event InitialSequenceBatches(bytes transactions, bytes32 lastGlobalExitRoot, address sequencer)",
      "event Initialized(uint8 version)",
      "event SequenceBatches(uint64 indexed numBatch, bytes32 l1InfoRoot)",
      "event SequenceForceBatches(uint64 indexed numBatch)",
      "event SetDataAvailabilityProtocol(address newDataAvailabilityProtocol)",
      "event SetForceBatchAddress(address newForceBatchAddress)",
      "event SetForceBatchTimeout(uint64 newforceBatchTimeout)",
      "event SetTrustedSequencer(address newTrustedSequencer)",
      "event SetTrustedSequencerURL(string newTrustedSequencerURL)",
      "event SwitchSequenceWithDataAvailability()",
      "event TransferAdminRole(address newPendingAdmin)",
      "event VerifyBatches(uint64 indexed numBatch, bytes32 stateRoot, address indexed aggregator)",
      "function GLOBAL_EXIT_ROOT_MANAGER_L2() view returns (address)",
      "function INITIALIZE_TX_BRIDGE_LIST_LEN_LEN() view returns (uint8)",
      "function INITIALIZE_TX_BRIDGE_PARAMS() view returns (bytes)",
      "function INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS() view returns (bytes)",
      "function INITIALIZE_TX_BRIDGE_PARAMS_AFTER_BRIDGE_ADDRESS_EMPTY_METADATA() view returns (bytes)",
      "function INITIALIZE_TX_CONSTANT_BYTES() view returns (uint16)",
      "function INITIALIZE_TX_CONSTANT_BYTES_EMPTY_METADATA() view returns (uint16)",
      "function INITIALIZE_TX_DATA_LEN_EMPTY_METADATA() view returns (uint8)",
      "function INITIALIZE_TX_EFFECTIVE_PERCENTAGE() view returns (bytes1)",
      "function SIGNATURE_INITIALIZE_TX_R() view returns (bytes32)",
      "function SIGNATURE_INITIALIZE_TX_S() view returns (bytes32)",
      "function SIGNATURE_INITIALIZE_TX_V() view returns (uint8)",
      "function acceptAdminRole()",
      "function admin() view returns (address)",
      "function bridgeAddress() view returns (address)",
      "function calculatePolPerForceBatch() view returns (uint256)",
      "function dataAvailabilityProtocol() view returns (address)",
      "function forceBatch(bytes transactions, uint256 polAmount)",
      "function forceBatchAddress() view returns (address)",
      "function forceBatchTimeout() view returns (uint64)",
      "function forcedBatches(uint64) view returns (bytes32)",
      "function gasTokenAddress() view returns (address)",
      "function gasTokenNetwork() view returns (uint32)",
      "function generateInitializeTransaction(uint32 networkID, address _gasTokenAddress, uint32 _gasTokenNetwork, bytes _gasTokenMetadata) view returns (bytes)",
      "function globalExitRootManager() view returns (address)",
      "function initialize(address _admin, address sequencer, uint32 networkID, address _gasTokenAddress, string sequencerURL, string _networkName)",
      "function isSequenceWithDataAvailabilityAllowed() view returns (bool)",
      "function lastAccInputHash() view returns (bytes32)",
      "function lastForceBatch() view returns (uint64)",
      "function lastForceBatchSequenced() view returns (uint64)",
      "function networkName() view returns (string)",
      "function onVerifyBatches(uint64 lastVerifiedBatch, bytes32 newStateRoot, address aggregator)",
      "function pendingAdmin() view returns (address)",
      "function pol() view returns (address)",
      "function rollupManager() view returns (address)",
      "function sequenceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, address l2Coinbase)",
      "function sequenceBatchesValidium(tuple(bytes32 transactionsHash, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, address l2Coinbase, bytes dataAvailabilityMessage)",
      "function sequenceForceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches)",
      "function setDataAvailabilityProtocol(address newDataAvailabilityProtocol)",
      "function setForceBatchAddress(address newForceBatchAddress)",
      "function setForceBatchTimeout(uint64 newforceBatchTimeout)",
      "function setTrustedSequencer(address newTrustedSequencer)",
      "function setTrustedSequencerURL(string newTrustedSequencerURL)",
      "function switchSequenceWithDataAvailability(bool newIsSequenceWithDataAvailabilityAllowed)",
      "function transferAdminRole(address newPendingAdmin)",
      "function trustedSequencer() view returns (address)",
      "function trustedSequencerURL() view returns (string)"
    ],
    "0xd620Ca1ad5c3888e4521c3374cE4088Cb78079b8": [
      "constructor()",
      "error CommitteeAddressDoesNotExist()",
      "error EmptyURLNotAllowed()",
      "error TooManyRequiredSignatures()",
      "error UnexpectedAddrsAndSignaturesSize()",
      "error UnexpectedAddrsBytesLength()",
      "error UnexpectedCommitteeHash()",
      "error WrongAddrOrder()",
      "event CommitteeUpdated(bytes32 committeeHash)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function committeeHash() view returns (bytes32)",
      "function getAmountOfMembers() view returns (uint256)",
      "function getProcotolName() pure returns (string)",
      "function initialize()",
      "function members(uint256) view returns (string url, address addr)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function requiredAmountOfSignatures() view returns (uint256)",
      "function setupCommittee(uint256 _requiredAmountOfSignatures, string[] urls, bytes addrsBytes)",
      "function transferOwnership(address newOwner)",
      "function verifyMessage(bytes32 signedHash, bytes signaturesAndAddrs) view"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xEf1462451C30Ea7aD8555386226059Fe837CA4EF": [
      "constructor(uint256 minDelay, address[] proposers, address[] executors, address admin, address _polygonZkEVM)",
      "event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data)",
      "event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, uint256 delay)",
      "event Cancelled(bytes32 indexed id)",
      "event MinDelayChange(uint256 oldDuration, uint256 newDuration)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function CANCELLER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function PROPOSER_ROLE() view returns (bytes32)",
      "function TIMELOCK_ADMIN_ROLE() view returns (bytes32)",
      "function cancel(bytes32 id)",
      "function execute(address target, uint256 value, bytes payload, bytes32 predecessor, bytes32 salt) payable",
      "function executeBatch(address[] targets, uint256[] values, bytes[] payloads, bytes32 predecessor, bytes32 salt) payable",
      "function getMinDelay() view returns (uint256 duration)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getTimestamp(bytes32 id) view returns (uint256 timestamp)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hashOperation(address target, uint256 value, bytes data, bytes32 predecessor, bytes32 salt) pure returns (bytes32 hash)",
      "function hashOperationBatch(address[] targets, uint256[] values, bytes[] payloads, bytes32 predecessor, bytes32 salt) pure returns (bytes32 hash)",
      "function isOperation(bytes32 id) view returns (bool registered)",
      "function isOperationDone(bytes32 id) view returns (bool done)",
      "function isOperationPending(bytes32 id) view returns (bool pending)",
      "function isOperationReady(bytes32 id) view returns (bool ready)",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) returns (bytes4)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function polygonZkEVM() view returns (address)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function schedule(address target, uint256 value, bytes data, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "function scheduleBatch(address[] targets, uint256[] values, bytes[] payloads, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateDelay(uint256 newDelay)"
    ],
    "0xF4e87685e323818E0aE35dCdFc3B65106002E456": [
      "constructor()",
      "error CommitteeAddressDoesNotExist()",
      "error EmptyURLNotAllowed()",
      "error TooManyRequiredSignatures()",
      "error UnexpectedAddrsAndSignaturesSize()",
      "error UnexpectedAddrsBytesLength()",
      "error UnexpectedCommitteeHash()",
      "error WrongAddrOrder()",
      "event CommitteeUpdated(bytes32 committeeHash)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function committeeHash() view returns (bytes32)",
      "function getAmountOfMembers() view returns (uint256)",
      "function getProcotolName() pure returns (string)",
      "function initialize()",
      "function members(uint256) view returns (string url, address addr)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function requiredAmountOfSignatures() view returns (uint256)",
      "function setupCommittee(uint256 _requiredAmountOfSignatures, string[] urls, bytes addrsBytes)",
      "function transferOwnership(address newOwner)",
      "function verifyMessage(bytes32 signedHash, bytes signaturesAndAddrs) view"
    ],
    "0xf98ee8c46baEa2B11e4f0450AD9D01861265F76E": [
      "constructor(address _singleton)"
    ]
  }
}
