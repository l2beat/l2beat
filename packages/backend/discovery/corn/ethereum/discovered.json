{
  "name": "corn",
  "chain": "ethereum",
  "blockNumber": 21586482,
  "configHash": "0x7d3cfc21187cd357dfe1d8bb28f9589272420d510f96197bebb02d3d74bc408e",
  "contracts": [
    {
      "name": "wBTC Escrow",
      "address": "0x00943b11764176C3a8323aEFCBd6fE70CFb6272d",
      "sourceHashes": [
        "0x29faf4889af43049c742ca34aeff493c079c023986c7f794a3dbfe3b1c642d09",
        "0x3a89a18c2bfc6a5fca7dba509e0238187da903569c681078143a89826ac69ab4"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1733923955,
      "values": {
        "$admin": "0x0000000000000000000000000000000000000000",
        "$implementation": "0xbE28926dAaD466B27C5Dea3A92797F0823e3737C",
        "$pastUpgrades": [
          [
            "2024-12-11T13:32:35.000Z",
            "0x63d4001fb7cdf2ba7f9f7676aea9faa930386e18f9d2fc3ede0018ec9c2676d8",
            ["0xbE28926dAaD466B27C5Dea3A92797F0823e3737C"]
          ]
        ],
        "$upgradeCount": 1,
        "authority": "0x515C7d8Fcb950f8b030ac08C994b37b4b8F3F7B5",
        "authorityInitialized": true,
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "Vault"
    },
    {
      "name": "EndpointV2",
      "address": "0x1a44076050125825900e736c501f859c50fE728c",
      "sourceHashes": [
        "0x399160e7d36a21fca31097d7875daed8f421f788b77f2a71974d51938c3ea520"
      ],
      "sinceTimestamp": 1706307671,
      "values": {
        "$immutable": true,
        "blockedLibrary": "0x1ccBf0db9C192d969de57E25B3fF09A25bb1D862",
        "eid": 30101,
        "EMPTY_PAYLOAD_HASH": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getRegisteredLibraries": [
          "0x1ccBf0db9C192d969de57E25B3fF09A25bb1D862",
          "0xbB2Ea70C9E858123480642Cf96acbcCE1372dCe1",
          "0xc02Ab410f0734EFa3F14628780e6e695156024C2",
          "0x74F55Bc2a79A27A0bF1D1A35dB5d0Fc36b9FDB9D"
        ],
        "getSendContext": [0, "0x0000000000000000000000000000000000000000"],
        "isSendingMessage": false,
        "lzToken": "0x0000000000000000000000000000000000000000",
        "nativeToken": "0x0000000000000000000000000000000000000000",
        "NIL_PAYLOAD_HASH": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "owner": "0xCDa8e3ADD00c95E5035617F970096118Ca2F4C92"
      }
    },
    {
      "name": "",
      "address": "0x1ccBf0db9C192d969de57E25B3fF09A25bb1D862",
      "unverified": true,
      "sinceTimestamp": 1706307671,
      "values": { "$immutable": true }
    },
    {
      "name": "Bitcorn",
      "address": "0x386E7A3a0c0919c9d53c3b04FF67E73Ff9e45Fb6",
      "sourceHashes": [
        "0xc44a84c18fe7660acbe7750e0a14401b3a0a0ad97d8c81305bd879dca88d873b",
        "0x9e4e67ffc0ca2b20636f2131b971bf25d3c1067ef6c47d36a11a8f72fbe0b0ed"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1731609551,
      "values": {
        "$admin": "0x0000000000000000000000000000000000000000",
        "$implementation": "0xD67C6b5f5A75807478EFa05472c8dfD3F64D0bc7",
        "$pastUpgrades": [
          [
            "2024-11-14T18:39:11.000Z",
            "0x645b565c65e9258a9d8b47c5b95cce3b22681a3deed9870b7de5a6bae56b1f5b",
            ["0x1B8B280cB516aB65a2470A890f1437442EeB518F"]
          ],
          [
            "2024-11-29T15:29:35.000Z",
            "0xd3595129f9b4441b0c04ed9a3ff298c6ea04cef32e5db4a33fee545c0449e771",
            ["0x1C1B3D8EF4E6C72d67Eaca4e688088CA8CFAFF09"]
          ],
          [
            "2024-11-29T15:35:11.000Z",
            "0x26cb99a5d1cda62e6fee788cdcdc29dc98086391bb57707d31c78009574af218",
            ["0xD67C6b5f5A75807478EFa05472c8dfD3F64D0bc7"]
          ]
        ],
        "$upgradeCount": 3,
        "approvalRequired": false,
        "authority": "0x515C7d8Fcb950f8b030ac08C994b37b4b8F3F7B5",
        "authorityInitialized": true,
        "decimalConversionRate": 10000000000,
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0xcbf22cc815b315479376751f0166c3a33d8c4543421124f942ca434ed8bbe6f7",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Bitcorn",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "0x386E7A3a0c0919c9d53c3b04FF67E73Ff9e45Fb6",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "endpoint": "0x1a44076050125825900e736c501f859c50fE728c",
        "msgInspector": "0x0000000000000000000000000000000000000000",
        "name": "Bitcorn",
        "oApp": "0x386E7A3a0c0919c9d53c3b04FF67E73Ff9e45Fb6",
        "oAppVersion": { "senderVersion": 1, "receiverVersion": 2 },
        "oftVersion": { "interfaceId": "0x02e49c2c", "version": 1 },
        "owner": "0x0000000000000000000000000000000000000000",
        "paused": false,
        "preCrime": "0x0000000000000000000000000000000000000000",
        "SEND": 1,
        "SEND_AND_CALL": 2,
        "sharedDecimals": 8,
        "symbol": "BTCN",
        "token": "0x386E7A3a0c0919c9d53c3b04FF67E73Ff9e45Fb6",
        "totalSupply": "21000000453190330000000000"
      },
      "derivedName": "BitcornOFT"
    },
    {
      "name": "Governor",
      "address": "0x515C7d8Fcb950f8b030ac08C994b37b4b8F3F7B5",
      "sourceHashes": [
        "0x711db1185315814f72746f6941889a438b7c9e34d4452eadcd281d38205702a8"
      ],
      "sinceTimestamp": 1731539819,
      "values": {
        "$immutable": true,
        "authority": "0x515C7d8Fcb950f8b030ac08C994b37b4b8F3F7B5",
        "owner": "0xCff1ad9f09b32252171207e8525c90B18D4E2C7D"
      }
    },
    {
      "name": "Treasury",
      "address": "0x5ebB3f2feaA15271101a927869B3A56837e73056",
      "sourceHashes": [
        "0x79f573a9d94def8dc0b4319d44595f806685b0ca5875891eff1ed40a9ff6b6e0"
      ],
      "sinceTimestamp": 1706307779,
      "values": {
        "$immutable": true,
        "lzTokenEnabled": false,
        "lzTokenFee": 0,
        "nativeBP": 0,
        "owner": "0xCDa8e3ADD00c95E5035617F970096118Ca2F4C92"
      }
    },
    {
      "name": "ReadLib1002",
      "address": "0x74F55Bc2a79A27A0bF1D1A35dB5d0Fc36b9FDB9D",
      "sourceHashes": [
        "0xf7800be6fd99520201da1404c35bac8a1ed826bbc2134f0a77547e0d7a74c9c1"
      ],
      "sinceTimestamp": 1730488859,
      "values": {
        "$immutable": true,
        "getTreasuryAndNativeFeeCap": [
          "0x0000000000000000000000000000000000000000",
          450000000000000
        ],
        "messageLibType": 2,
        "owner": "0xCDa8e3ADD00c95E5035617F970096118Ca2F4C92",
        "version": { "major": 10, "minor": 0, "endpointVersion": 2 }
      }
    },
    {
      "name": "cbBTC Escrow",
      "address": "0x957C9DC25DE6B8E46a7Fa0D081bA749DD005B54f",
      "sourceHashes": [
        "0x29faf4889af43049c742ca34aeff493c079c023986c7f794a3dbfe3b1c642d09",
        "0x3a89a18c2bfc6a5fca7dba509e0238187da903569c681078143a89826ac69ab4"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1733924495,
      "values": {
        "$admin": "0x0000000000000000000000000000000000000000",
        "$implementation": "0xbE28926dAaD466B27C5Dea3A92797F0823e3737C",
        "$pastUpgrades": [
          [
            "2024-12-11T13:41:35.000Z",
            "0x9d8d2344c0868f1f5360eab04ddec9836578425008fc49a62bb8bdc90ce0291a",
            ["0xbE28926dAaD466B27C5Dea3A92797F0823e3737C"]
          ]
        ],
        "$upgradeCount": 1,
        "authority": "0x515C7d8Fcb950f8b030ac08C994b37b4b8F3F7B5",
        "authorityInitialized": true,
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "derivedName": "Vault"
    },
    {
      "name": "SendUln302",
      "address": "0xbB2Ea70C9E858123480642Cf96acbcCE1372dCe1",
      "sourceHashes": [
        "0x159d8f84a5100285a7401e1ccb3d40a64fe944d9beb951c81749de40279a5876"
      ],
      "sinceTimestamp": 1706307839,
      "values": {
        "$immutable": true,
        "messageLibType": 0,
        "owner": "0xCDa8e3ADD00c95E5035617F970096118Ca2F4C92",
        "treasury": "0x5ebB3f2feaA15271101a927869B3A56837e73056",
        "version": { "major": 3, "minor": 0, "endpointVersion": 2 }
      }
    },
    {
      "name": "ReceiveUln302",
      "address": "0xc02Ab410f0734EFa3F14628780e6e695156024C2",
      "sourceHashes": [
        "0x3904c78c7b0abf91f9544ebb9f08f2d2bc83028df65c912a7f7a6ca1ca109dde"
      ],
      "sinceTimestamp": 1706307863,
      "values": {
        "$immutable": true,
        "messageLibType": 1,
        "owner": "0xCDa8e3ADD00c95E5035617F970096118Ca2F4C92",
        "version": { "major": 3, "minor": 0, "endpointVersion": 2 }
      }
    },
    {
      "name": "GnosisSafe",
      "address": "0xCDa8e3ADD00c95E5035617F970096118Ca2F4C92",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1648243585,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x9F403140Bc0574D7d36eA472b82DAa1Bbd4eF327",
          "0xBb6633cc267951E938F9B6421E4F54aa5b2c1936",
          "0x73E9c017Ad37e2113e709D8070Cc9E1b28180e1e",
          "0x67FC8c432448f9a8d541C17579EF7a142378d5aD"
        ],
        "$threshold": 2,
        "domainSeparator": "0x567922b7bf591eff89c84c8a0039bbda9499c5f39de9b1c4dde48a8c912f31b9",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 4 (50%)",
        "nonce": 204,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "Safe",
      "address": "0xCff1ad9f09b32252171207e8525c90B18D4E2C7D",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1732712627,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "0x5D2af120aED72585fd24E4176dbB4B484B84e0bE",
          "0xc827B8bd8082E46eA66897E486C4B14A22BE24Db",
          "0x629eAAe0627d2138Aa324A5155BaE29F99Da07df",
          "0x02Fd8F217BeDa435dc043A2E351321FFFd6a4AAC"
        ],
        "$threshold": 2,
        "domainSeparator": "0x2a853ee5a648ef1a0a9187fd4cfa333316003fc8381fbc28a5f108d13aa4ddde",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 4 (50%)",
        "nonce": 5,
        "VERSION": "1.4.1"
      }
    }
  ],
  "eoas": [
    {
      "address": "0x0000000000000000000000000000000000000000",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "target": "0x00943b11764176C3a8323aEFCBd6fE70CFb6272d"
        },
        {
          "permission": "upgrade",
          "target": "0x386E7A3a0c0919c9d53c3b04FF67E73Ff9e45Fb6"
        },
        {
          "permission": "upgrade",
          "target": "0x957C9DC25DE6B8E46a7Fa0D081bA749DD005B54f"
        }
      ]
    },
    { "address": "0x02Fd8F217BeDa435dc043A2E351321FFFd6a4AAC" },
    { "address": "0x5D2af120aED72585fd24E4176dbB4B484B84e0bE" },
    { "address": "0x629eAAe0627d2138Aa324A5155BaE29F99Da07df" },
    { "address": "0x67FC8c432448f9a8d541C17579EF7a142378d5aD" },
    { "address": "0x73E9c017Ad37e2113e709D8070Cc9E1b28180e1e" },
    { "address": "0x9F403140Bc0574D7d36eA472b82DAa1Bbd4eF327" },
    { "address": "0xBb6633cc267951E938F9B6421E4F54aa5b2c1936" },
    { "address": "0xc827B8bd8082E46eA66897E486C4B14A22BE24Db" }
  ],
  "abis": {
    "0x00943b11764176C3a8323aEFCBd6fE70CFb6272d": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x1a44076050125825900e736c501f859c50fE728c": [
      "constructor(uint32 _eid, address _owner)",
      "error LZ_AlreadyRegistered()",
      "error LZ_ComposeExists()",
      "error LZ_ComposeNotFound(bytes32 expected, bytes32 actual)",
      "error LZ_DefaultReceiveLibUnavailable()",
      "error LZ_DefaultSendLibUnavailable()",
      "error LZ_InsufficientFee(uint256 requiredNative, uint256 suppliedNative, uint256 requiredLzToken, uint256 suppliedLzToken)",
      "error LZ_InvalidExpiry()",
      "error LZ_InvalidNonce(uint64 nonce)",
      "error LZ_InvalidPayloadHash()",
      "error LZ_InvalidReceiveLibrary()",
      "error LZ_LzTokenUnavailable()",
      "error LZ_OnlyNonDefaultLib()",
      "error LZ_OnlyReceiveLib()",
      "error LZ_OnlyRegisteredLib()",
      "error LZ_OnlyRegisteredOrDefaultLib()",
      "error LZ_OnlySendLib()",
      "error LZ_PathNotInitializable()",
      "error LZ_PathNotVerifiable()",
      "error LZ_PayloadHashNotFound(bytes32 expected, bytes32 actual)",
      "error LZ_SameValue()",
      "error LZ_SendReentrancy()",
      "error LZ_Unauthorized()",
      "error LZ_UnsupportedEid()",
      "error LZ_UnsupportedInterface()",
      "error LZ_ZeroLzTokenFee()",
      "error Transfer_NativeFailed(address _to, uint256 _value)",
      "error Transfer_ToAddressIsZero()",
      "event ComposeDelivered(address from, address to, bytes32 guid, uint16 index)",
      "event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message)",
      "event DefaultReceiveLibrarySet(uint32 eid, address newLib)",
      "event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry)",
      "event DefaultSendLibrarySet(uint32 eid, address newLib)",
      "event DelegateSet(address sender, address delegate)",
      "event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce)",
      "event LibraryRegistered(address newLib)",
      "event LzComposeAlert(address indexed from, address indexed to, address indexed executor, bytes32 guid, uint16 index, uint256 gas, uint256 value, bytes message, bytes extraData, bytes reason)",
      "event LzReceiveAlert(address indexed receiver, address indexed executor, tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin, bytes32 guid, uint256 gas, uint256 value, bytes message, bytes extraData, bytes reason)",
      "event LzTokenSet(address token)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash)",
      "event PacketDelivered(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin, address receiver)",
      "event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash)",
      "event PacketSent(bytes encodedPayload, bytes options, address sendLibrary)",
      "event PacketVerified(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin, address receiver, bytes32 payloadHash)",
      "event ReceiveLibrarySet(address receiver, uint32 eid, address newLib)",
      "event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout)",
      "event SendLibrarySet(address sender, uint32 eid, address newLib)",
      "function EMPTY_PAYLOAD_HASH() view returns (bytes32)",
      "function NIL_PAYLOAD_HASH() view returns (bytes32)",
      "function blockedLibrary() view returns (address)",
      "function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash)",
      "function clear(address _oapp, tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, bytes32 _guid, bytes _message)",
      "function composeQueue(address from, address to, bytes32 guid, uint16 index) view returns (bytes32 messageHash)",
      "function defaultReceiveLibrary(uint32 srcEid) view returns (address lib)",
      "function defaultReceiveLibraryTimeout(uint32 srcEid) view returns (address lib, uint256 expiry)",
      "function defaultSendLibrary(uint32 dstEid) view returns (address lib)",
      "function delegates(address oapp) view returns (address delegate)",
      "function eid() view returns (uint32)",
      "function getConfig(address _oapp, address _lib, uint32 _eid, uint32 _configType) view returns (bytes config)",
      "function getReceiveLibrary(address _receiver, uint32 _srcEid) view returns (address lib, bool isDefault)",
      "function getRegisteredLibraries() view returns (address[])",
      "function getSendContext() view returns (uint32, address)",
      "function getSendLibrary(address _sender, uint32 _dstEid) view returns (address lib)",
      "function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) view returns (uint64)",
      "function inboundPayloadHash(address receiver, uint32 srcEid, bytes32 sender, uint64 inboundNonce) view returns (bytes32 payloadHash)",
      "function initializable(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver) view returns (bool)",
      "function isDefaultSendLibrary(address _sender, uint32 _dstEid) view returns (bool)",
      "function isRegisteredLibrary(address lib) view returns (bool)",
      "function isSendingMessage() view returns (bool)",
      "function isSupportedEid(uint32 _eid) view returns (bool)",
      "function isValidReceiveLibrary(address _receiver, uint32 _srcEid, address _actualReceiveLib) view returns (bool)",
      "function lazyInboundNonce(address receiver, uint32 srcEid, bytes32 sender) view returns (uint64 nonce)",
      "function lzCompose(address _from, address _to, bytes32 _guid, uint16 _index, bytes _message, bytes _extraData) payable",
      "function lzComposeAlert(address _from, address _to, bytes32 _guid, uint16 _index, uint256 _gas, uint256 _value, bytes _message, bytes _extraData, bytes _reason)",
      "function lzReceive(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver, bytes32 _guid, bytes _message, bytes _extraData) payable",
      "function lzReceiveAlert(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver, bytes32 _guid, uint256 _gas, uint256 _value, bytes _message, bytes _extraData, bytes _reason)",
      "function lzToken() view returns (address)",
      "function nativeToken() view returns (address)",
      "function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) view returns (bytes32)",
      "function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash)",
      "function outboundNonce(address sender, uint32 dstEid, bytes32 receiver) view returns (uint64 nonce)",
      "function owner() view returns (address)",
      "function quote(tuple(uint32 dstEid, bytes32 receiver, bytes message, bytes options, bool payInLzToken) _params, address _sender) view returns (tuple(uint256 nativeFee, uint256 lzTokenFee))",
      "function receiveLibraryTimeout(address receiver, uint32 srcEid) view returns (address lib, uint256 expiry)",
      "function recoverToken(address _token, address _to, uint256 _amount)",
      "function registerLibrary(address _lib)",
      "function renounceOwnership()",
      "function send(tuple(uint32 dstEid, bytes32 receiver, bytes message, bytes options, bool payInLzToken) _params, address _refundAddress) payable returns (tuple(bytes32 guid, uint64 nonce, tuple(uint256 nativeFee, uint256 lzTokenFee) fee))",
      "function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes _message)",
      "function setConfig(address _oapp, address _lib, tuple(uint32 eid, uint32 configType, bytes config)[] _params)",
      "function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod)",
      "function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry)",
      "function setDefaultSendLibrary(uint32 _eid, address _newLib)",
      "function setDelegate(address _delegate)",
      "function setLzToken(address _lzToken)",
      "function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod)",
      "function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry)",
      "function setSendLibrary(address _oapp, uint32 _eid, address _newLib)",
      "function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce)",
      "function transferOwnership(address newOwner)",
      "function verifiable(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver) view returns (bool)",
      "function verify(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver, bytes32 _payloadHash)"
    ],
    "0x386E7A3a0c0919c9d53c3b04FF67E73Ff9e45Fb6": [
      "constructor(address _logic, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x41675C099F32341bf84BFc5382aF534df5C7461a": [
      "constructor()",
      "event AddedOwner(address indexed owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address indexed handler)",
      "event ChangedGuard(address indexed guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address indexed module)",
      "event EnabledModule(address indexed module)",
      "event ExecutionFailure(bytes32 indexed txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 indexed txHash, uint256 payment)",
      "event RemovedOwner(address indexed owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x515C7d8Fcb950f8b030ac08C994b37b4b8F3F7B5": [
      "constructor(address _owner)",
      "event AuthorityUpdated(address indexed user, address indexed newAuthority)",
      "event CapabilityBurned(address indexed target, bytes4 indexed functionSig)",
      "event OwnershipTransferred(address indexed user, address indexed newOwner)",
      "event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled)",
      "event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled)",
      "event RoleNameSet(uint8 indexed role, string indexed name)",
      "event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled)",
      "function authority() view returns (address)",
      "function burnCapability(address target, bytes4 functionSig)",
      "function canCall(address user, address target, bytes4 functionSig) view returns (bool)",
      "function capabilityFlag(address, bytes4) view returns (uint8)",
      "function doesRoleHaveCapability(uint8 role, address target, bytes4 functionSig) view returns (bool)",
      "function doesUserHaveRole(address user, uint8 role) view returns (bool)",
      "function getByteMapFromRoles(uint8[] roleIds) pure returns (bytes32)",
      "function getEnabledFunctionsInTarget(address _target) view returns (bytes4[] _funcs)",
      "function getRoleName(uint8 role) view returns (string roleName)",
      "function getRolesForUser(address user) view returns (uint8[] rolesForUser)",
      "function getRolesFromByteMap(bytes32 byteMap) pure returns (uint8[] roleIds)",
      "function getRolesWithCapability(address, bytes4) view returns (bytes32)",
      "function getUserRoles(address) view returns (bytes32)",
      "function getUsersByRole(uint8 role) view returns (address[] usersWithRole)",
      "function isPublicCapability(address target, bytes4 functionSig) view returns (bool)",
      "function owner() view returns (address)",
      "function setAuthority(address newAuthority)",
      "function setPublicCapability(address target, bytes4 functionSig, bool enabled)",
      "function setRoleCapability(uint8 role, address target, bytes4 functionSig, bool enabled)",
      "function setRoleName(uint8 role, string roleName)",
      "function setUserRole(address user, uint8 role, bool enabled)",
      "function transferOwnership(address newOwner)"
    ],
    "0x5ebB3f2feaA15271101a927869B3A56837e73056": [
      "error LZ_Treasury_LzTokenNotEnabled()",
      "error Transfer_NativeFailed(address _to, uint256 _value)",
      "error Transfer_ToAddressIsZero()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getFee(address, uint32, uint256 _totalFee, bool _payInLzToken) view returns (uint256)",
      "function lzTokenEnabled() view returns (bool)",
      "function lzTokenFee() view returns (uint256)",
      "function nativeBP() view returns (uint256)",
      "function owner() view returns (address)",
      "function payFee(address, uint32, uint256 _totalFee, bool _payInLzToken) payable returns (uint256)",
      "function renounceOwnership()",
      "function setLzTokenEnabled(bool _lzTokenEnabled)",
      "function setLzTokenFee(uint256 _lzTokenFee)",
      "function setNativeFeeBP(uint256 _nativeBP)",
      "function transferOwnership(address newOwner)",
      "function withdrawLzToken(address _messageLib, address _lzToken, address _to, uint256 _amount)",
      "function withdrawNativeFee(address _messageLib, address _to, uint256 _amount)",
      "function withdrawToken(address _token, address _to, uint256 _amount)"
    ],
    "0x74F55Bc2a79A27A0bF1D1A35dB5d0Fc36b9FDB9D": [
      "constructor(address _endpoint, uint256 _treasuryGasLimit, uint256 _treasuryGasForFeeCap)",
      "error DVN_InvalidDVNIdx()",
      "error DVN_InvalidDVNOptions(uint256 cursor)",
      "error LZ_MessageLib_OnlyEndpoint()",
      "error LZ_RL_AtLeastOneDVN()",
      "error LZ_RL_CannotWithdrawAltToken()",
      "error LZ_RL_InvalidAmount(uint256 requested, uint256 available)",
      "error LZ_RL_InvalidCmdHash()",
      "error LZ_RL_InvalidConfigType(uint32 configType)",
      "error LZ_RL_InvalidEid()",
      "error LZ_RL_InvalidExecutor()",
      "error LZ_RL_InvalidOptionalDVNCount()",
      "error LZ_RL_InvalidOptionalDVNThreshold()",
      "error LZ_RL_InvalidPacketHeader()",
      "error LZ_RL_InvalidPacketVersion()",
      "error LZ_RL_InvalidReceiver()",
      "error LZ_RL_InvalidRequiredDVNCount()",
      "error LZ_RL_NotTreasury()",
      "error LZ_RL_Unsorted()",
      "error LZ_RL_UnsupportedEid(uint32 eid)",
      "error LZ_RL_Verifying()",
      "error LZ_ULN_InvalidLegacyType1Option()",
      "error LZ_ULN_InvalidLegacyType2Option()",
      "error LZ_ULN_InvalidWorkerId(uint8 workerId)",
      "error LZ_ULN_InvalidWorkerOptions(uint256 cursor)",
      "error LZ_ULN_UnsupportedOptionType(uint16 optionType)",
      "error Transfer_NativeFailed(address _to, uint256 _value)",
      "error Transfer_ToAddressIsZero()",
      "event DVNFeePaid(address[] requiredDVNs, address[] optionalDVNs, uint256[] fees)",
      "event DefaultReadLibConfigsSet(tuple(uint32 eid, tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] params)",
      "event ExecutorFeePaid(address executor, uint256 fee)",
      "event LzTokenFeeWithdrawn(address lzToken, address receiver, uint256 amount)",
      "event NativeFeeWithdrawn(address worker, address receiver, uint256 amount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PayloadVerified(address dvn, bytes header, bytes32 cmdHash, bytes32 payloadHash)",
      "event ReadLibConfigSet(address oapp, uint32 eid, tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)",
      "event TreasuryNativeFeeCapSet(uint256 newTreasuryNativeFeeCap)",
      "event TreasurySet(address treasury)",
      "function cmdHashLookup(address oapp, uint32 eid, uint64 nonce) view returns (bytes32 cmdHash)",
      "function commitVerification(bytes _packetHeader, bytes32 _cmdHash, bytes32 _payloadHash)",
      "function fees(address worker) view returns (uint256 fee)",
      "function getAppReadLibConfig(address _oapp, uint32 _remoteEid) view returns (tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs))",
      "function getConfig(uint32 _eid, address _oapp, uint32 _configType) view returns (bytes)",
      "function getReadLibConfig(address _oapp, uint32 _remoteEid) view returns (tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) rtnConfig)",
      "function getTreasuryAndNativeFeeCap() view returns (address, uint256)",
      "function hashLookup(bytes32 headerHash, bytes32 cmdHash, address dvn) view returns (bytes32 payloadHash)",
      "function isSupportedEid(uint32 _eid) view returns (bool)",
      "function messageLibType() pure returns (uint8)",
      "function owner() view returns (address)",
      "function quote(tuple(uint64 nonce, uint32 srcEid, address sender, uint32 dstEid, bytes32 receiver, bytes32 guid, bytes message) _packet, bytes _options, bool _payInLzToken) view returns (tuple(uint256 nativeFee, uint256 lzTokenFee))",
      "function renounceOwnership()",
      "function send(tuple(uint64 nonce, uint32 srcEid, address sender, uint32 dstEid, bytes32 receiver, bytes32 guid, bytes message) _packet, bytes _options, bool _payInLzToken) returns (tuple(uint256 nativeFee, uint256 lzTokenFee), bytes)",
      "function setConfig(address _oapp, tuple(uint32 eid, uint32 configType, bytes config)[] _params)",
      "function setDefaultReadLibConfigs(tuple(uint32 eid, tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] _params)",
      "function setTreasury(address _treasury)",
      "function setTreasuryNativeFeeCap(uint256 _newTreasuryNativeFeeCap)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function verifiable(tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) _config, bytes32 _headerHash, bytes32 _cmdHash, bytes32 _payloadHash) view returns (bool)",
      "function verify(bytes _packetHeader, bytes32 _cmdHash, bytes32 _payloadHash)",
      "function version() pure returns (uint64 major, uint8 minor, uint8 endpointVersion)",
      "function withdrawFee(address _to, uint256 _amount)",
      "function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount)"
    ],
    "0x957C9DC25DE6B8E46a7Fa0D081bA749DD005B54f": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0xbB2Ea70C9E858123480642Cf96acbcCE1372dCe1": [
      "constructor(address _endpoint, uint256 _treasuryGasLimit, uint256 _treasuryGasForFeeCap)",
      "error DVN_InvalidDVNIdx()",
      "error DVN_InvalidDVNOptions(uint256 cursor)",
      "error LZ_MessageLib_CannotWithdrawAltToken()",
      "error LZ_MessageLib_InvalidAmount(uint256 requested, uint256 available)",
      "error LZ_MessageLib_InvalidExecutor()",
      "error LZ_MessageLib_InvalidMessageSize(uint256 actual, uint256 max)",
      "error LZ_MessageLib_NotTreasury()",
      "error LZ_MessageLib_OnlyEndpoint()",
      "error LZ_MessageLib_TransferFailed()",
      "error LZ_MessageLib_ZeroMessageSize()",
      "error LZ_ULN_AtLeastOneDVN()",
      "error LZ_ULN_InvalidConfigType(uint32 configType)",
      "error LZ_ULN_InvalidConfirmations()",
      "error LZ_ULN_InvalidLegacyType1Option()",
      "error LZ_ULN_InvalidLegacyType2Option()",
      "error LZ_ULN_InvalidOptionalDVNCount()",
      "error LZ_ULN_InvalidOptionalDVNThreshold()",
      "error LZ_ULN_InvalidRequiredDVNCount()",
      "error LZ_ULN_InvalidWorkerId(uint8 workerId)",
      "error LZ_ULN_InvalidWorkerOptions(uint256 cursor)",
      "error LZ_ULN_Unsorted()",
      "error LZ_ULN_UnsupportedEid(uint32 eid)",
      "error LZ_ULN_UnsupportedOptionType(uint16 optionType)",
      "error Transfer_NativeFailed(address _to, uint256 _value)",
      "error Transfer_ToAddressIsZero()",
      "event DVNFeePaid(address[] requiredDVNs, address[] optionalDVNs, uint256[] fees)",
      "event DefaultExecutorConfigsSet(tuple(uint32 eid, tuple(uint32 maxMessageSize, address executor) config)[] params)",
      "event DefaultUlnConfigsSet(tuple(uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] params)",
      "event ExecutorConfigSet(address oapp, uint32 eid, tuple(uint32 maxMessageSize, address executor) config)",
      "event ExecutorFeePaid(address executor, uint256 fee)",
      "event LzTokenFeeWithdrawn(address lzToken, address receiver, uint256 amount)",
      "event NativeFeeWithdrawn(address worker, address receiver, uint256 amount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event TreasuryNativeFeeCapSet(uint256 newTreasuryNativeFeeCap)",
      "event TreasurySet(address treasury)",
      "event UlnConfigSet(address oapp, uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)",
      "function executorConfigs(address oapp, uint32 eid) view returns (uint32 maxMessageSize, address executor)",
      "function fees(address worker) view returns (uint256)",
      "function getAppUlnConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs))",
      "function getConfig(uint32 _eid, address _oapp, uint32 _configType) view returns (bytes)",
      "function getExecutorConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint32 maxMessageSize, address executor) rtnConfig)",
      "function getUlnConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) rtnConfig)",
      "function isSupportedEid(uint32 _eid) view returns (bool)",
      "function messageLibType() pure returns (uint8)",
      "function owner() view returns (address)",
      "function quote(tuple(uint64 nonce, uint32 srcEid, address sender, uint32 dstEid, bytes32 receiver, bytes32 guid, bytes message) _packet, bytes _options, bool _payInLzToken) view returns (tuple(uint256 nativeFee, uint256 lzTokenFee))",
      "function renounceOwnership()",
      "function send(tuple(uint64 nonce, uint32 srcEid, address sender, uint32 dstEid, bytes32 receiver, bytes32 guid, bytes message) _packet, bytes _options, bool _payInLzToken) returns (tuple(uint256 nativeFee, uint256 lzTokenFee), bytes)",
      "function setConfig(address _oapp, tuple(uint32 eid, uint32 configType, bytes config)[] _params)",
      "function setDefaultExecutorConfigs(tuple(uint32 eid, tuple(uint32 maxMessageSize, address executor) config)[] _params)",
      "function setDefaultUlnConfigs(tuple(uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] _params)",
      "function setTreasury(address _treasury)",
      "function setTreasuryNativeFeeCap(uint256 _newTreasuryNativeFeeCap)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function treasury() view returns (address)",
      "function version() pure returns (uint64 major, uint8 minor, uint8 endpointVersion)",
      "function withdrawFee(address _to, uint256 _amount)",
      "function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount)"
    ],
    "0xbE28926dAaD466B27C5Dea3A92797F0823e3737C": [
      "constructor()",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error SafeERC20FailedOperation(address token)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event AuthorityUpdated(address indexed user, address indexed newAuthority)",
      "event Initialized(uint64 version)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function authority() view returns (address)",
      "function authorityInitialized() view returns (bool)",
      "function initialize(address initialAuthority, address swapFacility, address token)",
      "function proxiableUUID() view returns (bytes32)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xc02Ab410f0734EFa3F14628780e6e695156024C2": [
      "constructor(address _endpoint)",
      "error LZ_MessageLib_OnlyEndpoint()",
      "error LZ_ULN_AtLeastOneDVN()",
      "error LZ_ULN_InvalidConfigType(uint32 configType)",
      "error LZ_ULN_InvalidConfirmations()",
      "error LZ_ULN_InvalidEid()",
      "error LZ_ULN_InvalidOptionalDVNCount()",
      "error LZ_ULN_InvalidOptionalDVNThreshold()",
      "error LZ_ULN_InvalidPacketHeader()",
      "error LZ_ULN_InvalidPacketVersion()",
      "error LZ_ULN_InvalidRequiredDVNCount()",
      "error LZ_ULN_Unsorted()",
      "error LZ_ULN_UnsupportedEid(uint32 eid)",
      "error LZ_ULN_Verifying()",
      "event DefaultUlnConfigsSet(tuple(uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] params)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PayloadVerified(address dvn, bytes header, uint256 confirmations, bytes32 proofHash)",
      "event UlnConfigSet(address oapp, uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)",
      "function assertHeader(bytes _packetHeader, uint32 _localEid) pure",
      "function commitVerification(bytes _packetHeader, bytes32 _payloadHash)",
      "function getAppUlnConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs))",
      "function getConfig(uint32 _eid, address _oapp, uint32 _configType) view returns (bytes)",
      "function getUlnConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) rtnConfig)",
      "function hashLookup(bytes32 headerHash, bytes32 payloadHash, address dvn) view returns (bool submitted, uint64 confirmations)",
      "function isSupportedEid(uint32 _eid) view returns (bool)",
      "function messageLibType() pure returns (uint8)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setConfig(address _oapp, tuple(uint32 eid, uint32 configType, bytes config)[] _params)",
      "function setDefaultUlnConfigs(tuple(uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] _params)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function verifiable(tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) _config, bytes32 _headerHash, bytes32 _payloadHash) view returns (bool)",
      "function verify(bytes _packetHeader, bytes32 _payloadHash, uint64 _confirmations)",
      "function version() pure returns (uint64 major, uint8 minor, uint8 endpointVersion)"
    ],
    "0xCDa8e3ADD00c95E5035617F970096118Ca2F4C92": [
      "constructor(address _singleton)"
    ],
    "0xCff1ad9f09b32252171207e8525c90B18D4E2C7D": [
      "constructor(address _singleton)"
    ],
    "0xD67C6b5f5A75807478EFa05472c8dfD3F64D0bc7": [
      "constructor(address _lzEndpoint)",
      "error InvalidDelegate()",
      "error InvalidEndpointCall()",
      "error InvalidLocalDecimals()",
      "error InvalidOptions(bytes options)",
      "error LzTokenUnavailable()",
      "error NoPeer(uint32 eid)",
      "error NotEnoughNative(uint256 msgValue)",
      "error OnlyEndpoint(address addr)",
      "error OnlyPeer(uint32 eid, bytes32 sender)",
      "error OnlySelf()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error SafeERC20FailedOperation(address token)",
      "error SimulationResult(bytes result)",
      "error SlippageExceeded(uint256 amountLD, uint256 minAmountLD)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event AuthorityUpdated(address indexed user, address indexed newAuthority)",
      "event BeaconUpgraded(address indexed beacon)",
      "event EIP712DomainChanged()",
      "event EnforcedOptionSet(tuple(uint32 eid, uint16 msgType, bytes options)[] _enforcedOptions)",
      "event Initialized(uint8 version)",
      "event MsgInspectorSet(address inspector)",
      "event OFTReceived(bytes32 indexed guid, uint32 srcEid, address indexed toAddress, uint256 amountReceivedLD)",
      "event OFTSent(bytes32 indexed guid, uint32 dstEid, address indexed fromAddress, uint256 amountSentLD, uint256 amountReceivedLD)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event PeerSet(uint32 eid, bytes32 peer)",
      "event PreCrimeSet(address preCrimeAddress)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function SEND() view returns (uint16)",
      "function SEND_AND_CALL() view returns (uint16)",
      "function allowInitializePath(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin) view returns (bool)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approvalRequired() pure returns (bool)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function authority() view returns (address)",
      "function authorityInitialized() view returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(uint256 amount)",
      "function combineOptions(uint32 _eid, uint16 _msgType, bytes _extraOptions) view returns (bytes)",
      "function decimalConversionRate() view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function endpoint() view returns (address)",
      "function enforcedOptions(uint32 eid, uint16 msgType) view returns (bytes enforcedOption)",
      "function flashFee(address token, uint256 amount) view returns (uint256)",
      "function flashLoan(address receiver, address token, uint256 amount, bytes data) returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function initialize(address initialAuthority)",
      "function isComposeMsgSender(tuple(uint32 srcEid, bytes32 sender, uint64 nonce), bytes, address _sender) view returns (bool)",
      "function isPeer(uint32 _eid, bytes32 _peer) view returns (bool)",
      "function lzReceive(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, bytes32 _guid, bytes _message, address _executor, bytes _extraData) payable",
      "function lzReceiveAndRevert(tuple(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin, uint32 dstEid, address receiver, bytes32 guid, uint256 value, address executor, bytes message, bytes extraData)[] _packets) payable",
      "function lzReceiveSimulate(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, bytes32 _guid, bytes _message, address _executor, bytes _extraData) payable",
      "function maxFlashLoan(address token) view returns (uint256)",
      "function mint(uint256 amount)",
      "function mintTo(address to, uint256 amount)",
      "function msgInspector() view returns (address)",
      "function name() view returns (string)",
      "function nextNonce(uint32, bytes32) view returns (uint64 nonce)",
      "function nonces(address owner) view returns (uint256)",
      "function oApp() view returns (address)",
      "function oAppVersion() pure returns (uint64 senderVersion, uint64 receiverVersion)",
      "function oftVersion() pure returns (bytes4 interfaceId, uint64 version)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function peers(uint32 eid) view returns (bytes32 peer)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function preCrime() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function quoteOFT(tuple(uint32 dstEid, bytes32 to, uint256 amountLD, uint256 minAmountLD, bytes extraOptions, bytes composeMsg, bytes oftCmd) _sendParam) view returns (tuple(uint256 minAmountLD, uint256 maxAmountLD) oftLimit, tuple(int256 feeAmountLD, string description)[] oftFeeDetails, tuple(uint256 amountSentLD, uint256 amountReceivedLD) oftReceipt)",
      "function quoteSend(tuple(uint32 dstEid, bytes32 to, uint256 amountLD, uint256 minAmountLD, bytes extraOptions, bytes composeMsg, bytes oftCmd) _sendParam, bool _payInLzToken) view returns (tuple(uint256 nativeFee, uint256 lzTokenFee) msgFee)",
      "function renounceOwnership()",
      "function send(tuple(uint32 dstEid, bytes32 to, uint256 amountLD, uint256 minAmountLD, bytes extraOptions, bytes composeMsg, bytes oftCmd) _sendParam, tuple(uint256 nativeFee, uint256 lzTokenFee) _fee, address _refundAddress) payable returns (tuple(bytes32 guid, uint64 nonce, tuple(uint256 nativeFee, uint256 lzTokenFee) fee) msgReceipt, tuple(uint256 amountSentLD, uint256 amountReceivedLD) oftReceipt)",
      "function setDelegate(address _delegate)",
      "function setEnforcedOptions(tuple(uint32 eid, uint16 msgType, bytes options)[] _enforcedOptions)",
      "function setMsgInspector(address _msgInspector)",
      "function setPeer(uint32 _eid, bytes32 _peer)",
      "function setPreCrime(address _preCrime)",
      "function sharedDecimals() pure returns (uint8)",
      "function symbol() view returns (string)",
      "function token() view returns (address)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0x18527e82c3800311291da7323caa876f588cde67692c1c84d5ecb5161da61359"
  }
}
