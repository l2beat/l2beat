{
  "name": "lambda",
  "chain": "ethereum",
  "blockNumber": 19674259,
  "configHash": "0x7f33ed8ba37e33fbaa95e0c44ac6139973fc737663e186be02ea89d7a0bff89c",
  "version": 5,
  "contracts": [
    {
      "name": "MIPS",
      "address": "0xB8a43E9724bb8a02Afaf5172642D6A1C3617c370",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1713318623,
      "values": {
        "BRK_START": 1713318611,
        "oracle": "0xF0E449aaEE8b2368d911E944B442Bf649980dE45",
        "version": "1.0.1"
      }
    },
    {
      "name": "AnchorStateRegistry",
      "address": "0x1ac6A4eD971f1FC633A1642af5c0C81B1D3B683D",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xCB3401C1f844F78a306C0453c6cA4d685232034C",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": [
        "0xCB3401C1f844F78a306C0453c6cA4d685232034C"
      ],
      "sinceTimestamp": 1713318431,
      "values": {
        "disputeGameFactory": "0x8B8793227d588F11fa062c8C54cA69d62C1b5D81",
        "version": "1.0.0"
      }
    },
    {
      "name": "SystemConfig",
      "address": "0xae809d42f861A6381b0DFCf7216556e95362a7a8",
      "ignoreInWatchMode": [
        "scalar"
      ],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x781dAB53cC9d9870a96A84f4AE3130c084a2fAfD",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": [
        "0x781dAB53cC9d9870a96A84f4AE3130c084a2fAfD"
      ],
      "sinceTimestamp": 1713318335,
      "values": {
        "BATCH_INBOX_SLOT": "0x71ac12829d66ee73d8d95bff50b3589745ce57edae70a3fb111a2342464dc597",
        "batcherHash": "0xDeC273BF31AD79ad00D619c52662f724176A12Fb",
        "batchInbox": "0xff00000000000000000000000000000000056026",
        "DISPUTE_GAME_FACTORY_SLOT": "0x52322a25d9f59ea17656545543306b7aef62bc0cc53a0e65ccfa0c75b97aa906",
        "disputeGameFactory": "0x8B8793227d588F11fa062c8C54cA69d62C1b5D81",
        "gasLimit": 30000000,
        "L1_CROSS_DOMAIN_MESSENGER_SLOT": "0x383f291819e6d54073bc9a648251d97421076bdd101933c0c022219ce9580636",
        "L1_ERC_721_BRIDGE_SLOT": "0x46adcbebc6be8ce551740c29c47c8798210f23f7f4086c41752944352568d5a7",
        "L1_STANDARD_BRIDGE_SLOT": "0x9904ba90dde5696cda05c9e0dab5cbaa0fea005ace4d11218a02ac668dad6376",
        "l1CrossDomainMessenger": "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7",
        "l1ERC721Bridge": "0x8334f9A70294556101527bfB9bdEdeF7EB382D94",
        "l1StandardBridge": "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F",
        "maximumGasLimit": 200000000,
        "minimumGasLimit": 21000000,
        "opStackDA": {
          "isSomeTxsLengthEqualToCelestiaDAExample": false,
          "isSequencerSendingBlobTx": true
        },
        "OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT": "0xa04c5bb938ca6fc46d95553abf0a76345ce3e722a30bf4f74928b8e7d852320c",
        "OPTIMISM_PORTAL_SLOT": "0x4b6c74f9e688cb39801f2112c14a8c57232a3fc5202e1444126d4bce86eb19ac",
        "optimismMintableERC20Factory": "0x5C3D1b1334b6939e6D042BF5E15249cF86A875A4",
        "optimismPortal": "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054",
        "overhead": 0,
        "owner": "0xD5FDcf4ab4b682ab8D4a99fBE1b6Bd08dC83Ea40",
        "resourceConfig": {
          "maxResourceLimit": 20000000,
          "elasticityMultiplier": 10,
          "baseFeeMaxChangeDenominator": 8,
          "minimumBaseFee": 1000000000,
          "systemTxMaxGas": 1000000,
          "maximumBaseFee": "340282366920938463463374607431768211455"
        },
        "scalar": "452312848583266388373324160190187140051835877600158453279134670530344387928",
        "sequencerInbox": "0xff00000000000000000000000000000000056026",
        "START_BLOCK_SLOT": "0xa11ee3ab75b40e88a0105e935d17cd36c8faee0138320d776c411291bdbbb19f",
        "startBlock": 19674259,
        "UNSAFE_BLOCK_SIGNER_SLOT": "0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08",
        "unsafeBlockSigner": "0x4C61Be5626D1Fb101324f0F41542Da30C0aDa4D4",
        "version": "2.2.0",
        "VERSION": 0
      },
      "derivedName": "SystemConfig"
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7",
      "ignoreInWatchMode": [
        "messageNonce"
      ],
      "upgradeability": {
        "type": "resolved delegate proxy",
        "addressManager": "0x624808dc4A34B79B90C3c085942D2100F09A0376",
        "implementationName": "OVM_L1CrossDomainMessenger",
        "implementation": "0x26B5810033fd2380c87F9E22CC20101778b5F584"
      },
      "implementations": [
        "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"
      ],
      "sinceTimestamp": 1713318359,
      "values": {
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292738334",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054",
        "PORTAL": "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "superchainConfig": "0x01Cf2c778E56360dCd5e1396373c0Aa6ae794E2c",
        "version": "2.3.0"
      },
      "derivedName": "L1CrossDomainMessenger"
    },
    {
      "name": "ProxyAdmin",
      "address": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1713318167,
      "values": {
        "addressManager": "0x624808dc4A34B79B90C3c085942D2100F09A0376",
        "isUpgrading": false,
        "owner": "0xD5FDcf4ab4b682ab8D4a99fBE1b6Bd08dC83Ea40"
      }
    },
    {
      "name": "L2OutputOracle",
      "address": "0x2297eB8DC91f532C91c57b3fb33C06b782e9594A",
      "ignoreInWatchMode": [
        "nextBlockNumber",
        "nextOutputIndex",
        "latestBlockNumber",
        "latestOutputIndex"
      ],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x850DFdB4035db757e49eCF997ef051290959167A",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": ["0x850DFdB4035db757e49eCF997ef051290959167A"],
      "sinceTimestamp": 1713318407,
      "values": {
        "CHALLENGER": "0x864A02Ca4a40616f8995709D1B26CDe588709043",
        "deletedOutputs": [
          {
            "prevNextOutputIndex": 1030,
            "newNextOutputIndex": 1027
          },
          {
            "prevNextOutputIndex": 1364,
            "newNextOutputIndex": 1359
          }
        ],
        "FINALIZATION_PERIOD_SECONDS": 604800,
        "L2_BLOCK_TIME": 2,
        "latestBlockNumber": 15609600,
        "latestOutputIndex": 8671,
        "nextBlockNumber": 15611400,
        "nextOutputIndex": 8672,
        "PROPOSER": "0xC16EAEDaB78E033B555c9eF3C326c07B49F21907",
        "startingBlockNumber": 0,
        "startingTimestamp": 1713345623,
        "SUBMISSION_INTERVAL": 1800,
        "version": "1.3.0"
      },
      "derivedName": "L2OutputOracle"
    },
    {
      "name": "L1ERC721Bridge",
      "address": "0x8334f9A70294556101527bfB9bdEdeF7EB382D94",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x5121000767198Ad7D60fe8e47458F556B7B51aa0",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": [
        "0x5121000767198Ad7D60fe8e47458F556B7B51aa0"
      ],
      "sinceTimestamp": 1713318383,
      "values": {
        "messenger": "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7",
        "MESSENGER": "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000014",
        "otherBridge": "0x4200000000000000000000000000000000000014",
        "paused": false,
        "superchainConfig": "0x01Cf2c778E56360dCd5e1396373c0Aa6ae794E2c",
        "version": "2.1.0"
      }
    },
    {
      "name": "OptimismMintableERC20Factory",
      "address": "0x5C3D1b1334b6939e6D042BF5E15249cF86A875A4",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x4CA20D48C87129Df90A3cAd73000568331548316",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": [
        "0x4CA20D48C87129Df90A3cAd73000568331548316"
      ],
      "sinceTimestamp": 1713318371,
      "values": {
        "bridge": "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F",
        "BRIDGE": "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F",
        "version": "1.9.0"
      }
    },
    {
      "name": "SuperchainConfig",
      "address": "0x01Cf2c778E56360dCd5e1396373c0Aa6ae794E2c",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x527021A71d6E76Bb4243A0BabAd4e160245b8aAE",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": [
        "0x527021A71d6E76Bb4243A0BabAd4e160245b8aAE"
      ],
      "sinceTimestamp": 1713318215,
      "values": {
        "GUARDIAN_SLOT": "0xd30e835d3f35624761057ff5b27d558f97bd5be034621e62240e5c0b784abe68",
        "paused": false,
        "PAUSED_SLOT": "0x54176ff9944c4784e5857ec4e5ef560a462c483bf534eda43f91bb01a470b1b6",
        "version": "1.1.0"
      },
      "derivedName": "SuperchainConfig"
    },
    {
      "name": "L1StandardBridge",
      "address": "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x3aF70e7103d29a9466663514DE3C421769b30382",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": [
        "0x3aF70e7103d29a9466663514DE3C421769b30382"
      ],
      "sinceTimestamp": 1713318347,
      "values": {
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7",
        "MESSENGER": "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x01Cf2c778E56360dCd5e1396373c0Aa6ae794E2c",
        "version": "2.1.0"
      },
      "derivedName": "L1StandardBridge"
    },
    {
      "name": "OptimismPortal",
      "address": "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054",
      "ignoreInWatchMode": [
        "params"
      ],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xEc1d6bb5c871fE5ea32e4382C77626DDb8E6dAc1",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": [
        "0xEc1d6bb5c871fE5ea32e4382C77626DDb8E6dAc1"
      ],
      "sinceTimestamp": 1713318323,
      "values": {
        "disputeGameFactory": "0x8B8793227d588F11fa062c8C54cA69d62C1b5D81",
        "disputeGameFinalityDelaySeconds": 302400,
        "l2Sender": "0x000000000000000000000000000000000000dEaD",
        "params": {
          "prevBaseFee": 1000000000,
          "prevBoughtGas": 980060,
          "prevBlockNum": 20069298
        },
        "paused": false,
        "proofMaturityDelaySeconds": 604800,
        "respectedGameType": 0,
        "respectedGameTypeUpdatedAt": 1718037779,
        "superchainConfig": "0x01Cf2c778E56360dCd5e1396373c0Aa6ae794E2c",
        "systemConfig": "0xae809d42f861A6381b0DFCf7216556e95362a7a8",
        "version": "3.10.0"
      },
      "derivedName": "OptimismPortal2"
    },
    {
      "name": "PreimageOracle",
      "address": "0xF0E449aaEE8b2368d911E944B442Bf649980dE45",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1713318611,
      "values": {
        "challengePeriod": 86400,
        "KECCAK_TREE_DEPTH": 16,
        "MAX_LEAF_COUNT": 65535,
        "MIN_BOND_SIZE": "250000000000000000",
        "minProposalSize": 126000,
        "proposalCount": 0,
        "proposals": [],
        "version": "1.0.0"
      },
      "derivedName": "PreimageOracle"
    },
    {
      "name": "AddressManager",
      "address": "0x624808dc4A34B79B90C3c085942D2100F09A0376",
      "upgradeability": {
        "type": "immutable"
      },
      "sinceTimestamp": 1713318155,
      "values": {
        "BondManager": "0x0000000000000000000000000000000000000000",
        "OVM_BondManager": "0x0000000000000000000000000000000000000000",
        "OVM_CanonicalTransactionChain": "0x0000000000000000000000000000000000000000",
        "OVM_ChainStorageContainer_CTC_batches": "0x0000000000000000000000000000000000000000",
        "OVM_ChainStorageContainer_CTC_queue": "0x0000000000000000000000000000000000000000",
        "OVM_ChainStorageContainer_SCC_batches": "0x0000000000000000000000000000000000000000",
        "OVM_DecompressionPrecompileAddress": "0x0000000000000000000000000000000000000000",
        "OVM_ExecutionManager": "0x0000000000000000000000000000000000000000",
        "OVM_FraudVerifier": "0x0000000000000000000000000000000000000000",
        "OVM_L1MultiMessageRelayer": "0x0000000000000000000000000000000000000000",
        "OVM_L2CrossDomainMessenger": "0x0000000000000000000000000000000000000000",
        "OVM_Proposer": "0x0000000000000000000000000000000000000000",
        "OVM_SafetyChecker": "0x0000000000000000000000000000000000000000",
        "OVM_Sequencer": "0x0000000000000000000000000000000000000000",
        "OVM_StateCommitmentChain": "0x0000000000000000000000000000000000000000",
        "OVM_StateManagerFactory": "0x0000000000000000000000000000000000000000",
        "OVM_StateTransitionerFactory": "0x0000000000000000000000000000000000000000",
        "owner": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f",
        "Proxy__OVM_L1CrossDomainMessenger": "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7",
        "Proxy__OVM_L1StandardBridge": "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F"
      },
      "derivedName": "Lib_AddressManager"
    },
    {
      "name": "DelayedWETH",
      "address": "0xF1F48782321A19f0d50F0C777801e38C67a26859",
      "ignoreInWatchMode": [
        "totalSupply"
      ],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xce79088d72902abdF7aff96C58243bC67402D945",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": [
        "0xce79088d72902abdF7aff96C58243bC67402D945"
      ],
      "sinceTimestamp": 1713318419,
      "values": {
        "config": "0x01Cf2c778E56360dCd5e1396373c0Aa6ae794E2c",
        "decimals": 18,
        "delay": 604800,
        "name": "Wrapped Ether",
        "owner": "0xD5FDcf4ab4b682ab8D4a99fBE1b6Bd08dC83Ea40",
        "symbol": "WETH",
        "totalSupply": "2087594000000000000",
        "version": "1.0.0"
      },
      "derivedName": "DelayedWETH"
    },
    {
      "name": "DisputeGameFactory",
      "address": "0x8B8793227d588F11fa062c8C54cA69d62C1b5D81",
      "ignoreInWatchMode": [
        "gameCount"
      ],
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x99229F35F1085a8c5F00bdeCfB462252D4d1f361",
        "admin": "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f"
      },
      "implementations": [
        "0x99229F35F1085a8c5F00bdeCfB462252D4d1f361"
      ],
      "sinceTimestamp": 1713318395,
      "values": {
        "gameCount": 29,
        "gameImpls": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "initBonds": [
          "80000000000000000",
          "80000000000000000",
          0,
          0,
          0
        ],
        "owner": "0xD5FDcf4ab4b682ab8D4a99fBE1b6Bd08dC83Ea40",
        "version": "1.0.0"
      },
      "derivedName": "DisputeGameFactory"
    }
  ],
  "eoas": [
    "0x0000000000000000000000000000000000000000",
    "0x000000000000000000000000000000000000dEaD",
    "0x4200000000000000000000000000000000000007",
    "0x4200000000000000000000000000000000000010",
    "0x4200000000000000000000000000000000000014",
    "0xC16EAEDaB78E033B555c9eF3C326c07B49F21907",
    "0xDeC273BF31AD79ad00D619c52662f724176A12Fb",
    "0x4C61Be5626D1Fb101324f0F41542Da30C0aDa4D4",
    "0xFF00000000000000000000000000000000000010"
  ],
  "abis": {
    "0xB8a43E9724bb8a02Afaf5172642D6A1C3617c370": [
      "constructor(address _oracle)",
      "function BRK_START() view returns (uint32)",
      "function oracle() view returns (address oracle_)",
      "function step(bytes _stateData, bytes _proof, bytes32 _localContext) returns (bytes32)",
      "function version() view returns (string)"
    ],
    "0x1ac6A4eD971f1FC633A1642af5c0C81B1D3B683D": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xae809d42f861A6381b0DFCf7216556e95362a7a8": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7": [
      "constructor(address _libAddressManager, string _implementationName)"
    ],
    "0x527021A71d6E76Bb4243A0BabAd4e160245b8aAE": [
      "constructor()",
      "event ConfigUpdate(uint8 indexed updateType, bytes data)",
      "event Initialized(uint8 version)",
      "event Paused(string identifier)",
      "event Unpaused()",
      "function GUARDIAN_SLOT() view returns (bytes32)",
      "function PAUSED_SLOT() view returns (bytes32)",
      "function guardian() view returns (address guardian_)",
      "function initialize(address _guardian, bool _paused)",
      "function pause(string _identifier)",
      "function paused() view returns (bool paused_)",
      "function unpause()",
      "function version() view returns (string)"
    ],
    "0x04d59CB8f8b2BAcb8cE6912c284D10e263a0EB9f": [
      "constructor(address _owner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function addressManager() view returns (address)",
      "function changeProxyAdmin(address _proxy, address _newAdmin)",
      "function getProxyAdmin(address _proxy) view returns (address)",
      "function getProxyImplementation(address _proxy) view returns (address)",
      "function implementationName(address) view returns (string)",
      "function isUpgrading() view returns (bool)",
      "function owner() view returns (address)",
      "function proxyType(address) view returns (uint8)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function setAddressManager(address _address)",
      "function setImplementationName(address _address, string _name)",
      "function setProxyType(address _address, uint8 _type)",
      "function setUpgrading(bool _upgrading)",
      "function transferOwnership(address newOwner)",
      "function upgrade(address _proxy, address _implementation)",
      "function upgradeAndCall(address _proxy, address _implementation, bytes _data) payable"
    ],
    "0x8334f9A70294556101527bfB9bdEdeF7EB382D94": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x3aF70e7103d29a9466663514DE3C421769b30382": [
      "constructor()",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger, address _superchainConfig)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "0xCB3401C1f844F78a306C0453c6cA4d685232034C": [
      "constructor(address _disputeGameFactory)",
      "event Initialized(uint8 version)",
      "function anchors(uint32) view returns (bytes32 root, uint256 l2BlockNumber)",
      "function disputeGameFactory() view returns (address)",
      "function initialize(tuple(uint32 gameType, tuple(bytes32 root, uint256 l2BlockNumber) outputRoot)[] _startingAnchorRoots)",
      "function tryUpdateAnchorState()",
      "function version() view returns (string)"
    ],
    "0x5C3D1b1334b6939e6D042BF5E15249cF86A875A4": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x01Cf2c778E56360dCd5e1396373c0Aa6ae794E2c": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0xce79088d72902abdF7aff96C58243bC67402D945": [
      "constructor(uint256 _delay)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "event Unwrap(address indexed src, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)",
      "function allowance(address, address) view returns (uint256)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function balanceOf(address) view returns (uint256)",
      "function config() view returns (address)",
      "function decimals() view returns (uint8)",
      "function delay() view returns (uint256)",
      "function deposit() payable",
      "function hold(address _guy, uint256 _wad)",
      "function initialize(address _owner, address _config)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function recover(uint256 _wad)",
      "function renounceOwnership()",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function unlock(address _guy, uint256 _wad)",
      "function version() view returns (string)",
      "function withdraw(uint256 _wad)",
      "function withdraw(address _guy, uint256 _wad)",
      "function withdrawals(address, address) view returns (uint256 amount, uint256 timestamp)"
    ],
    "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x5121000767198Ad7D60fe8e47458F556B7B51aa0": [
      "constructor()",
      "event ERC721BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 tokenId, bytes extraData)",
      "event ERC721BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 tokenId, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC721(address _localToken, address _remoteToken, uint256 _tokenId, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC721To(address _localToken, address _remoteToken, address _to, uint256 _tokenId, uint32 _minGasLimit, bytes _extraData)",
      "function deposits(address, address, uint256) view returns (bool)",
      "function finalizeBridgeERC721(address _localToken, address _remoteToken, address _from, address _to, uint256 _tokenId, bytes _extraData)",
      "function initialize(address _messenger, address _superchainConfig)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x99229F35F1085a8c5F00bdeCfB462252D4d1f361": [
      "constructor()",
      "error GameAlreadyExists(bytes32 uuid)",
      "error IncorrectBondAmount()",
      "error NoImplementation(uint32 gameType)",
      "event DisputeGameCreated(address indexed disputeProxy, uint32 indexed gameType, bytes32 indexed rootClaim)",
      "event ImplementationSet(address indexed impl, uint32 indexed gameType)",
      "event InitBondUpdated(uint32 indexed gameType, uint256 indexed newBond)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function create(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) payable returns (address proxy_)",
      "function findLatestGames(uint32 _gameType, uint256 _start, uint256 _n) view returns (tuple(uint256 index, bytes32 metadata, uint64 timestamp, bytes32 rootClaim, bytes extraData)[] games_)",
      "function gameAtIndex(uint256 _index) view returns (uint32 gameType_, uint64 timestamp_, address proxy_)",
      "function gameCount() view returns (uint256 gameCount_)",
      "function gameImpls(uint32) view returns (address)",
      "function games(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) view returns (address proxy_, uint64 timestamp_)",
      "function getGameUUID(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) pure returns (bytes32 uuid_)",
      "function initBonds(uint32) view returns (uint256)",
      "function initialize(address _owner)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setImplementation(uint32 _gameType, address _impl)",
      "function setInitBond(uint32 _gameType, uint256 _initBond)",
      "function transferOwnership(address newOwner)",
      "function version() view returns (string)"
    ],
    "0xF0E449aaEE8b2368d911E944B442Bf649980dE45": [
      "constructor(uint256 _minProposalSize, uint256 _challengePeriod)",
      "error ActiveProposal()",
      "error AlreadyFinalized()",
      "error BadProposal()",
      "error BondTransferFailed()",
      "error InsufficientBond()",
      "error InvalidInputSize()",
      "error InvalidPreimage()",
      "error InvalidProof()",
      "error NotEOA()",
      "error NotInitialized()",
      "error PartOffsetOOB()",
      "error PostStateMatches()",
      "error StatesNotContiguous()",
      "error TreeSizeOverflow()",
      "error WrongStartingBlock()",
      "function KECCAK_TREE_DEPTH() view returns (uint256)",
      "function MAX_LEAF_COUNT() view returns (uint256)",
      "function MIN_BOND_SIZE() view returns (uint256)",
      "function addLeavesLPP(uint256 _uuid, uint256 _inputStartBlock, bytes _input, bytes32[] _stateCommitments, bool _finalize)",
      "function challengeFirstLPP(address _claimant, uint256 _uuid, tuple(bytes input, uint256 index, bytes32 stateCommitment) _postState, bytes32[] _postStateProof)",
      "function challengeLPP(address _claimant, uint256 _uuid, tuple(uint64[25] state) _stateMatrix, tuple(bytes input, uint256 index, bytes32 stateCommitment) _preState, bytes32[] _preStateProof, tuple(bytes input, uint256 index, bytes32 stateCommitment) _postState, bytes32[] _postStateProof)",
      "function challengePeriod() view returns (uint256 challengePeriod_)",
      "function getTreeRootLPP(address _owner, uint256 _uuid) view returns (bytes32 treeRoot_)",
      "function initLPP(uint256 _uuid, uint32 _partOffset, uint32 _claimedSize) payable",
      "function loadBlobPreimagePart(uint256 _z, uint256 _y, bytes _commitment, bytes _proof, uint256 _partOffset)",
      "function loadKeccak256PreimagePart(uint256 _partOffset, bytes _preimage)",
      "function loadLocalData(uint256 _ident, bytes32 _localContext, bytes32 _word, uint256 _size, uint256 _partOffset) returns (bytes32 key_)",
      "function loadPrecompilePreimagePart(uint256 _partOffset, address _precompile, bytes _input)",
      "function loadSha256PreimagePart(uint256 _partOffset, bytes _preimage)",
      "function minProposalSize() view returns (uint256 minProposalSize_)",
      "function preimageLengths(bytes32) view returns (uint256)",
      "function preimagePartOk(bytes32, uint256) view returns (bool)",
      "function preimageParts(bytes32, uint256) view returns (bytes32)",
      "function proposalBlocks(address, uint256, uint256) view returns (uint64)",
      "function proposalBlocksLen(address _claimant, uint256 _uuid) view returns (uint256 len_)",
      "function proposalBonds(address, uint256) view returns (uint256)",
      "function proposalBranches(address, uint256, uint256) view returns (bytes32)",
      "function proposalCount() view returns (uint256 count_)",
      "function proposalMetadata(address, uint256) view returns (bytes32)",
      "function proposalParts(address, uint256) view returns (bytes32)",
      "function proposals(uint256) view returns (address claimant, uint256 uuid)",
      "function readPreimage(bytes32 _key, uint256 _offset) view returns (bytes32 dat_, uint256 datLen_)",
      "function squeezeLPP(address _claimant, uint256 _uuid, tuple(uint64[25] state) _stateMatrix, tuple(bytes input, uint256 index, bytes32 stateCommitment) _preState, bytes32[] _preStateProof, tuple(bytes input, uint256 index, bytes32 stateCommitment) _postState, bytes32[] _postStateProof)",
      "function version() view returns (string)",
      "function zeroHashes(uint256) view returns (bytes32)"
    ],
    "0x26B5810033fd2380c87F9E22CC20101778b5F584": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _superchainConfig, address _portal)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x624808dc4A34B79B90C3c085942D2100F09A0376": [
      "event AddressSet(string indexed _name, address _newAddress, address _oldAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getAddress(string _name) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x4CA20D48C87129Df90A3cAd73000568331548316": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event OptimismMintableERC20Created(address indexed localToken, address indexed remoteToken, address deployer)",
      "event StandardL2TokenCreated(address indexed remoteToken, address indexed localToken)",
      "function BRIDGE() view returns (address)",
      "function bridge() view returns (address)",
      "function createOptimismMintableERC20(address _remoteToken, string _name, string _symbol) returns (address)",
      "function createOptimismMintableERC20WithDecimals(address _remoteToken, string _name, string _symbol, uint8 _decimals) returns (address)",
      "function createStandardL2Token(address _remoteToken, string _name, string _symbol) returns (address)",
      "function initialize(address _bridge)",
      "function version() view returns (string)"
    ],
    "0xEc1d6bb5c871fE5ea32e4382C77626DDb8E6dAc1": [
      "constructor(uint256 _proofMaturityDelaySeconds, uint256 _disputeGameFinalityDelaySeconds)",
      "error BadTarget()",
      "error CallPaused()",
      "error ContentLengthMismatch()",
      "error EmptyItem()",
      "error GasEstimation()",
      "error InvalidDataRemainder()",
      "error InvalidHeader()",
      "error LargeCalldata()",
      "error OutOfGas()",
      "error SmallGasLimit()",
      "error Unauthorized()",
      "error UnexpectedList()",
      "error UnexpectedString()",
      "event DisputeGameBlacklisted(address indexed disputeGame)",
      "event Initialized(uint8 version)",
      "event RespectedGameTypeSet(uint32 indexed newGameType, uint64 indexed updatedAt)",
      "event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)",
      "event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)",
      "event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)",
      "event WithdrawalProvenExtension1(bytes32 indexed withdrawalHash, address indexed proofSubmitter)",
      "function blacklistDisputeGame(address _disputeGame)",
      "function checkWithdrawal(bytes32 _withdrawalHash, address _proofSubmitter) view",
      "function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable",
      "function disputeGameBlacklist(address) view returns (bool)",
      "function disputeGameFactory() view returns (address)",
      "function disputeGameFinalityDelaySeconds() view returns (uint256)",
      "function donateETH() payable",
      "function finalizeWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx)",
      "function finalizeWithdrawalTransactionExternalProof(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, address _proofSubmitter)",
      "function finalizedWithdrawals(bytes32) view returns (bool)",
      "function guardian() view returns (address)",
      "function initialize(address _disputeGameFactory, address _systemConfig, address _superchainConfig, uint32 _initialRespectedGameType)",
      "function l2Sender() view returns (address)",
      "function minimumGasLimit(uint64 _byteCount) pure returns (uint64)",
      "function numProofSubmitters(bytes32 _withdrawalHash) view returns (uint256)",
      "function params() view returns (uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)",
      "function paused() view returns (bool)",
      "function proofMaturityDelaySeconds() view returns (uint256)",
      "function proofSubmitters(bytes32, uint256) view returns (address)",
      "function proveWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _disputeGameIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function provenWithdrawals(bytes32, address) view returns (address disputeGameProxy, uint64 timestamp)",
      "function respectedGameType() view returns (uint32)",
      "function respectedGameTypeUpdatedAt() view returns (uint64)",
      "function setRespectedGameType(uint32 _gameType)",
      "function superchainConfig() view returns (address)",
      "function systemConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "0xF1F48782321A19f0d50F0C777801e38C67a26859": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x8B8793227d588F11fa062c8C54cA69d62C1b5D81": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x781dAB53cC9d9870a96A84f4AE3130c084a2fAfD": [
      "constructor()",
      "event ConfigUpdate(uint256 indexed version, uint8 indexed updateType, bytes data)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function BATCH_INBOX_SLOT() view returns (bytes32)",
      "function DISPUTE_GAME_FACTORY_SLOT() view returns (bytes32)",
      "function L1_CROSS_DOMAIN_MESSENGER_SLOT() view returns (bytes32)",
      "function L1_ERC_721_BRIDGE_SLOT() view returns (bytes32)",
      "function L1_STANDARD_BRIDGE_SLOT() view returns (bytes32)",
      "function OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT() view returns (bytes32)",
      "function OPTIMISM_PORTAL_SLOT() view returns (bytes32)",
      "function START_BLOCK_SLOT() view returns (bytes32)",
      "function UNSAFE_BLOCK_SIGNER_SLOT() view returns (bytes32)",
      "function VERSION() view returns (uint256)",
      "function batchInbox() view returns (address addr_)",
      "function batcherHash() view returns (bytes32)",
      "function disputeGameFactory() view returns (address addr_)",
      "function gasLimit() view returns (uint64)",
      "function initialize(address _owner, uint256 _overhead, uint256 _scalar, bytes32 _batcherHash, uint64 _gasLimit, address _unsafeBlockSigner, tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee) _config, address _batchInbox, tuple(address l1CrossDomainMessenger, address l1ERC721Bridge, address l1StandardBridge, address disputeGameFactory, address optimismPortal, address optimismMintableERC20Factory) _addresses)",
      "function l1CrossDomainMessenger() view returns (address addr_)",
      "function l1ERC721Bridge() view returns (address addr_)",
      "function l1StandardBridge() view returns (address addr_)",
      "function maximumGasLimit() pure returns (uint64)",
      "function minimumGasLimit() view returns (uint64)",
      "function optimismMintableERC20Factory() view returns (address addr_)",
      "function optimismPortal() view returns (address addr_)",
      "function overhead() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function resourceConfig() view returns (tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee))",
      "function scalar() view returns (uint256)",
      "function setBatcherHash(bytes32 _batcherHash)",
      "function setGasConfig(uint256 _overhead, uint256 _scalar)",
      "function setGasLimit(uint64 _gasLimit)",
      "function setUnsafeBlockSigner(address _unsafeBlockSigner)",
      "function startBlock() view returns (uint256 startBlock_)",
      "function transferOwnership(address newOwner)",
      "function unsafeBlockSigner() view returns (address addr_)",
      "function version() view returns (string)"
    ]
  }
}
