{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "ethereum",
  "name": "lambda",
  "initialAddresses": [
    "0x624808dc4A34B79B90C3c085942D2100F09A0376",
    "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054",
    "0x5C3D1b1334b6939e6D042BF5E15249cF86A875A4",
    "0x8334f9A70294556101527bfB9bdEdeF7EB382D94"
  ],
  "names": {
    "0x624808dc4A34B79B90C3c085942D2100F09A0376": "AddressManager",
    "0x78B5818884929d7A930edADD03a0fCD9Dd068EB7": "L1CrossDomainMessenger",
    "0x2297eB8DC91f532C91c57b3fb33C06b782e9594A": "L2OutputOracle",
    "0x7288e508f56c1b4b52D2e4Fd3688a711c7cE0054": "OptimismPortal",
    "0xae809d42f861A6381b0DFCf7216556e95362a7a8": "SystemConfig",
    "0xD5FDcf4ab4b682ab8D4a99fBE1b6Bd08dC83Ea40": "ProxyAdminOwner",
    "0xEEBd256da18d0BF20c3CEb785a0946D41A7F408F": "L1StandardBridge",
    "0x01Cf2c778E56360dCd5e1396373c0Aa6ae794E2c": "SuperchainConfig",
    "0x8B8793227d588F11fa062c8C54cA69d62C1b5D81": "DisputeGameFactory",
    "0xF0E449aaEE8b2368d911E944B442Bf649980dE45": "PreimageOracle",
    "0xF1F48782321A19f0d50F0C777801e38C67a26859": "DelayedWETH",
    "0x5C3D1b1334b6939e6D042BF5E15249cF86A875A4": "OptimismMintableERC20Factory",
    "0x8334f9A70294556101527bfB9bdEdeF7EB382D94": "L1ERC721Bridge"
  },
  "overrides": {
    "DelayedWETH": {
      "ignoreInWatchMode": ["totalSupply"]
    },
    "AddressManager": {
      "fields": {
        "BondManager": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["BondManager"]
          }
        },
        "OVM_L2CrossDomainMessenger": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_L2CrossDomainMessenger"]
          }
        },
        "OVM_DecompressionPrecompileAddress": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_DecompressionPrecompileAddress"]
          }
        },
        "OVM_Sequencer": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_Sequencer"]
          }
        },
        "OVM_Proposer": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_Proposer"]
          }
        },
        "OVM_ChainStorageContainer_CTC_batches": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_ChainStorageContainer-CTC-batches"]
          }
        },
        "OVM_ChainStorageContainer_CTC_queue": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_ChainStorageContainer-CTC-queue"]
          }
        },
        "OVM_ChainStorageContainer_SCC_batches": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_ChainStorageContainer-SCC-batches"]
          }
        },
        "OVM_CanonicalTransactionChain": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_CanonicalTransactionChain"]
          }
        },
        "OVM_StateCommitmentChain": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_StateCommitmentChain"]
          }
        },
        "OVM_BondManager": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_BondManager"]
          }
        },
        "Proxy__OVM_L1CrossDomainMessenger": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["Proxy__OVM_L1CrossDomainMessenger"]
          }
        },
        "OVM_ExecutionManager": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_ExecutionManager"]
          }
        },
        "OVM_FraudVerifier": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_FraudVerifier"]
          }
        },
        "OVM_StateManagerFactory": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_StateManagerFactory"]
          }
        },
        "OVM_StateTransitionerFactory": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_StateTransitionerFactory"]
          }
        },
        "OVM_SafetyChecker": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_SafetyChecker"]
          }
        },
        "OVM_L1MultiMessageRelayer": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["OVM_L1MultiMessageRelayer"]
          }
        },
        "Proxy__OVM_L1StandardBridge": {
          "handler": {
            "type": "call",
            "method": "getAddress",
            "args": ["Proxy__OVM_L1StandardBridge"]
          }
        }
      }
    },
    "L2OutputOracle": {
      "ignoreMethods": [
        "getL2OutputAfter",
        "getL2OutputIndexAfter",
        "getL2Output"
      ],
      "ignoreInWatchMode": [
        "nextBlockNumber",
        "nextOutputIndex",
        "latestBlockNumber",
        "latestOutputIndex"
      ],
      "fields": {
        "deletedOutputs": {
          "handler": {
            "type": "stateFromEvent",
            "event": "OutputsDeleted",
            "returnParams": ["prevNextOutputIndex", "newNextOutputIndex"]
          }
        }
      }
    },
    "OptimismPortal": {
      "ignoreMethods": ["isOutputFinalized"],
      "ignoreInWatchMode": ["params"],
      "fields": {
        "paused": {
          "description": "Whether the contract is paused or not. Determined by the SuperchainConfig contract PAUSED_SLOT. Here it pauses withdrawals. If this is paused, also the L1CrossDomainMessenger and ERC-20, ERC-721 deposits are paused.",
          "severity": "HIGH"
        }
      }
    },
    "L1CrossDomainMessenger": {
      "ignoreMethods": ["xDomainMessageSender"],
      "ignoreInWatchMode": ["messageNonce"]
    },
    "SystemConfig": {
      "fields": {
        // this overrides the batcherHash method return type (bytes32 -> address) so our discovery detects it as an address
        "batcherHash": {
          "handler": {
            "type": "call",
            "method": "function batcherHash() view returns (address)",
            "args": []
          }
        },
        "opStackDA": {
          "handler": {
            "type": "opStackDA",
            "sequencerAddress": "{{ batcherHash }}"
          }
        },
        "sequencerInbox": {
          "handler": {
            "type": "opStackSequencerInbox",
            "sequencerAddress": "{{ batcherHash }}"
          }
        },
        "gasLimit": {
          "description": "Gas limit for blocks on L2.",
          "severity": "LOW"
        }
      },
      "ignoreInWatchMode": ["scalar"]
    },
    "DisputeGameFactory": {
      "ignoreInWatchMode": ["gameCount"],
      "ignoreMethods": ["gameAtIndex"],
      "fields": {
        "gameImpls": {
          "handler": {
            "type": "array",
            "length": 5
          }
        },
        "initBonds": {
          "handler": {
            "type": "array",
            "length": 5
          }
        }
      }
    },
    "PreimageOracle": {
      "ignoreMethods": ["zeroHashes"]
    }
  }
}
