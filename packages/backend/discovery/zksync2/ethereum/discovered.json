{
  "name": "zksync2",
  "chain": "ethereum",
  "blockNumber": 21766584,
  "configHash": "0x40952a87caa82b0ca32f9d050da9989bad92d22ebaccb5af9f1abe4207c24368",
  "sharedModules": ["shared-zk-stack"],
  "contracts": [
    {
      "name": "Verifier",
      "address": "0x06aa7a7B07108F7C5539645e32DD5c21cBF9EB66",
      "template": "shared-zk-stack/Verifier",
      "sourceHashes": [
        "0xb36dfb10be7530bb56af796b85f6c84bf90513603fe59c2f7f0d78fc2a9a9235"
      ],
      "description": "Implements the ZK proof verification logic.",
      "sinceTimestamp": 1730327279,
      "values": {
        "$immutable": true,
        "verificationKeyHash": "0x14f97b81e54b35fe673d8708cc1a19e1ea5b5e348e12d31e39824ed4f42bbca2"
      }
    },
    {
      "name": "Governance",
      "address": "0x0b622A2061EaccAE1c664eBC3E868b8438e03F61",
      "sourceHashes": [
        "0x33d82f6564cf2a54b6bf9c51d42620b2702ccfa9393f498a5bee57c108a66055"
      ],
      "description": "Old Governance contract for ZKsync Era allowing for proposals in form of transactions. The minimum delay is 0s.",
      "receivedPermissions": [
        {
          "permission": "configure",
          "from": "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD",
          "description": "set addresses (validators) that can commit, prove, execute, revert batches through this contract."
        }
      ],
      "sinceTimestamp": 1701258227,
      "values": {
        "$immutable": true,
        "minDelay": 0,
        "minDelay_formatted": "0s",
        "owner": "0x4e4943346848c4867F81dFb37c4cA9C5715A7828",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "securityCouncil": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "Governance"
    },
    {
      "name": "ZKsync",
      "address": "0x32400084C286CF3E17e7B677ea9583e60a000324",
      "template": "shared-zk-stack/Diamond",
      "sourceHashes": [
        "0x46ab6472330f39b5dde71de5fc30609f34ecfa68c11673e09438f6db607279ea",
        "0x081a1805983e86cd6a80ed48c012c26bf9a39473c0f1e69b357afff240f027a0",
        "0x981d4f2ae5949ab33c6ba83f6446595d3b853bf6f7157884304445d70b185374",
        "0x91db58e4059dfed7357e56dac17d2963c6f9cfb540f527988ed25172251a2584",
        "0xdf47c6cd4fcffcfa4a670e1544e2391acc365cd7fd9b8e7583d58b28dff50c40"
      ],
      "proxyType": "EIP2535 diamond proxy",
      "description": "The main contract defining the Layer 2. The operator commits blocks and provides a ZK proof which is validated by the Verifier contract and then processes transactions. During batch execution it processes L1 --> L2 and L2 --> L1 transactions.",
      "issuedPermissions": [
        {
          "permission": "configure",
          "to": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock.",
          "via": []
        },
        {
          "permission": "configure",
          "to": "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock.",
          "via": []
        }
      ],
      "ignoreInWatchMode": [
        "getPriorityQueueSize",
        "getTotalBlocksCommitted",
        "getTotalBlocksExecuted",
        "getTotalBlocksVerified",
        "getTotalBatchesExecuted",
        "getTotalBatchesVerified",
        "getTotalBatchesCommitted",
        "getTotalPriorityTxs",
        "getFirstUnprocessedPriorityTx",
        "baseTokenGasPriceMultiplierNominator",
        "baseTokenGasPriceMultiplierDenominator"
      ],
      "sinceTimestamp": 1676315375,
      "values": {
        "$immutable": false,
        "$implementation": [
          "0x90C0A0a63d7ff47BfAA1e9F8fa554dabc986504a",
          "0x81754d2E48e3e553ba6Dfd193FC72B3A0c6076d9",
          "0x5575218cECd370E1d630d1AdB03c254B0B376821",
          "0xBB13642F795014E0EAC2b0d52ECD5162ECb66712"
        ],
        "$pastUpgrades": [
          [
            "2023-02-13T19:09:35.000Z",
            "0xba8357ad4ef5c48e120daf7c1569d90a803975958df777a4d8132dba6e8ef196",
            [
              "0xC48d496459e1358D055a79173BEA41efb7449028",
              "0xc30af84A6aFF43D5fd06FEdA6bA20BdfeD539F6C",
              "0x2EA0CFB9C942058ee5A84411EF2E37C6DE5bfe5c",
              "0x98E900Eb2e5fdE9786f736e86d6BFBfDb3E4683b",
              "0xa7E8a8F71c3cC43946601CC99997f8Cd6828a9B9"
            ]
          ],
          [
            "2023-03-23T18:01:59.000Z",
            "0x33a58f3097f84d41ae7f3bd280af6db28d04cd28af362faab164404b463e2791",
            [
              "0xC48d496459e1358D055a79173BEA41efb7449028",
              "0xc30af84A6aFF43D5fd06FEdA6bA20BdfeD539F6C",
              "0x2EA0CFB9C942058ee5A84411EF2E37C6DE5bfe5c",
              "0x98E900Eb2e5fdE9786f736e86d6BFBfDb3E4683b",
              "0xa7E8a8F71c3cC43946601CC99997f8Cd6828a9B9"
            ]
          ],
          [
            "2023-03-23T18:01:59.000Z",
            "0x33a58f3097f84d41ae7f3bd280af6db28d04cd28af362faab164404b463e2791",
            [
              "0xC48d496459e1358D055a79173BEA41efb7449028",
              "0xc30af84A6aFF43D5fd06FEdA6bA20BdfeD539F6C",
              "0x2EA0CFB9C942058ee5A84411EF2E37C6DE5bfe5c",
              "0x98E900Eb2e5fdE9786f736e86d6BFBfDb3E4683b",
              "0xa7E8a8F71c3cC43946601CC99997f8Cd6828a9B9"
            ]
          ],
          [
            "2023-03-23T19:15:35.000Z",
            "0x07c949f4a829a991f30998c6e89fdd8629fba240aedd59d55896c5c0999b6da4",
            [
              "0xF1fB730b7f8E8391B27B91f8f791e10E4a53CEcc",
              "0x6df4A6D71622860dcc64C1FD9645d9a5BE96f088",
              "0x2a2d6010202B93E727b61a60dfC1d5CF2707c1CE",
              "0xc796A402E1B26eCd2cd38F23e05A2f904504ec89",
              "0x389a081BCf20e5803288183b929F08458F1d863D"
            ]
          ],
          [
            "2023-04-24T20:03:11.000Z",
            "0xe246fdfa41030d23e91e4378db8697727da3c321a426a93a0861066cfb875875",
            [
              "0xF1fB730b7f8E8391B27B91f8f791e10E4a53CEcc",
              "0x6df4A6D71622860dcc64C1FD9645d9a5BE96f088",
              "0x2a2d6010202B93E727b61a60dfC1d5CF2707c1CE",
              "0x389a081BCf20e5803288183b929F08458F1d863D",
              "0xb2097DBe4410B538a45574B1FCD767E2303c7867"
            ]
          ],
          [
            "2023-08-16T10:15:11.000Z",
            "0x83d729e260c7ac2cf439aa2b8e667454489e4fb8d4965aaa9dc8e2fb95a44f46",
            [
              "0x9B1A10bDC4A40219544C835263b2cA3f3e689693",
              "0xA389bF185B301C8e20E79E3098e71399914035dF",
              "0xf002dFBc52C250a2E14C148041aDB8567a0B19BD",
              "0xab458aCbD8FF9B6cF7B8a029705A02F70DCDBf7D",
              "0x8c0f38F13526fCB379a80B87F4DEbdBCC9CAEcbD"
            ]
          ],
          [
            "2023-08-29T08:28:11.000Z",
            "0x8cdc268e23c0fa073ab3f1b75bd32a2cf05ea1e268a07c1aec44d5805f22fb12",
            [
              "0xc6f7e57C6e1e20468D869Fe33675524e243CD6a0",
              "0x7444DE636699F080cA1C033528D2bB3705B391Ce",
              "0x5349E94435Cc9Cab9FfB40A492DA46935052733A",
              "0x16615a85B451edfb6FCBea0b34405D9C7ca1a22A",
              "0x2E64926BE35412f7710A3E097Ba076740bF97CC0"
            ]
          ],
          [
            "2023-09-07T10:53:11.000Z",
            "0x72983cd25802230545bcb38b805638b0ffa17990ad51e8843e55519fe96d702c",
            [
              "0xdC7c3D03845EfE2c4a9E758A70a68BA6bba9FaC4",
              "0x7444DE636699F080cA1C033528D2bB3705B391Ce",
              "0x62aA95ac4740A367746A664C4C69034d52E968EF",
              "0x7Ed066718Dfb1b2B04D94780Eca92b67ECF3330b",
              "0x2E64926BE35412f7710A3E097Ba076740bF97CC0"
            ]
          ],
          [
            "2023-09-22T17:22:47.000Z",
            "0x5e3ce9e7d3920f293487a5581146f8333191a4068762db6fe4d1eec65a3fb805",
            [
              "0xdC7c3D03845EfE2c4a9E758A70a68BA6bba9FaC4",
              "0x7444DE636699F080cA1C033528D2bB3705B391Ce",
              "0x62aA95ac4740A367746A664C4C69034d52E968EF",
              "0x7Ed066718Dfb1b2B04D94780Eca92b67ECF3330b",
              "0x2E64926BE35412f7710A3E097Ba076740bF97CC0"
            ]
          ],
          [
            "2023-10-20T16:15:35.000Z",
            "0x0de4556791139b205562b388f2ddc4a2d2ec1bf0996feea38158535cd7e1a5c6",
            [
              "0xdC7c3D03845EfE2c4a9E758A70a68BA6bba9FaC4",
              "0x7444DE636699F080cA1C033528D2bB3705B391Ce",
              "0x62aA95ac4740A367746A664C4C69034d52E968EF",
              "0x7Ed066718Dfb1b2B04D94780Eca92b67ECF3330b",
              "0x2E64926BE35412f7710A3E097Ba076740bF97CC0"
            ]
          ],
          [
            "2023-11-01T16:41:35.000Z",
            "0x4d3e09380ee604e75800fd61da0c1771987e1cbca7c5254e8c7479e3dd0e3b37",
            [
              "0xdC7c3D03845EfE2c4a9E758A70a68BA6bba9FaC4",
              "0x7444DE636699F080cA1C033528D2bB3705B391Ce",
              "0x62aA95ac4740A367746A664C4C69034d52E968EF",
              "0x7Ed066718Dfb1b2B04D94780Eca92b67ECF3330b",
              "0x2E64926BE35412f7710A3E097Ba076740bF97CC0"
            ]
          ],
          [
            "2023-12-04T20:29:11.000Z",
            "0x9f0e9ecd78b5c17ff95c130b183df452486a0f784705927e608fd90a00aa9bcd",
            [
              "0x409560DE546e057ce5bD5dB487EdF2bB5E785baB",
              "0xF3ACF6a03ea4a914B78Ec788624B25ceC37c14A4",
              "0x63b5EC36B09384fFA7106A80Ec7cfdFCa521fD08",
              "0x9e3Fa34a10619fEDd7aE40A3fb86FA515fcfd269"
            ]
          ],
          [
            "2023-12-21T11:51:35.000Z",
            "0x2200e7109d3abbb74cb03144fea37f7227188e1fcaba4538bd9dfa3fa17cca02",
            [
              "0xAeA49FCEbe3A93ADaE67FF668C0ac87799537967",
              "0x5edb1756c0A0F933EB87f9d69DfA1db3167547a7",
              "0x2FbF76bAE617cE41AdB9021907F02e2bF187BB58",
              "0xc40e5BE1a6D18DdB14268D32dc6075FCf72fF16d"
            ]
          ],
          [
            "2024-02-05T14:30:47.000Z",
            "0x937dd21a05142c02159170dafb1bbaaa145ae7bd2c29bf512534fbec9ff801ab",
            [
              "0xE6426c725cB507168369c10284390E59d91eC821",
              "0xc4a5e861df9DD9495f8Dba1c260913d1A9b8Ec2B",
              "0x0f58Fd6c9Ed966e09C1dFFBc8E6FF600ec65f6eB",
              "0x3a4ef67C6cAb51444E5d3861843F7f4a37F64F0a"
            ]
          ],
          [
            "2024-03-11T14:32:11.000Z",
            "0xa5fd3584a815267a84a5686b386d911ed7e53d6c1863ff64a57ef0f7085bd4d7",
            [
              "0x230214F0224C7E0485f348a79512ad00514DB1F7",
              "0x10113bB3a8e64f8eD67003126adC8CE74C34610c",
              "0xA57F9FFD65fC0F5792B5e958dF42399a114EC7e7",
              "0xfd3779e6214eBBd40f5F5890351298e123A46BA6"
            ]
          ],
          [
            "2024-03-12T23:16:23.000Z",
            "0xc78a986be023f367f121c06fa9662ef950ad76f2cfe9397693f63de6c5959c61",
            [
              "0x230214F0224C7E0485f348a79512ad00514DB1F7",
              "0x10113bB3a8e64f8eD67003126adC8CE74C34610c",
              "0xA57F9FFD65fC0F5792B5e958dF42399a114EC7e7",
              "0xfd3779e6214eBBd40f5F5890351298e123A46BA6"
            ]
          ],
          [
            "2024-06-06T11:55:23.000Z",
            "0x71a3b924989f551cbf3024fcd6b52aeb9a52902d95c0efb690e7340d667b6e21",
            [
              "0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a",
              "0xE60E94fCCb18a81D501a38959E532C0A85A1be89",
              "0xCDB6228b616EEf8Df47D69A372C4f725C43e718C",
              "0xaD193aDe635576d8e9f7ada71Af2137b16c64075"
            ]
          ],
          [
            "2024-08-06T09:50:47.000Z",
            "0x2060aa785aeefa91a0b103accc9df689c7a2056aacfa70309492e729ddea4565",
            [
              "0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a",
              "0xE60E94fCCb18a81D501a38959E532C0A85A1be89",
              "0xCDB6228b616EEf8Df47D69A372C4f725C43e718C",
              "0xaD193aDe635576d8e9f7ada71Af2137b16c64075"
            ]
          ],
          [
            "2025-01-10T14:55:59.000Z",
            "0x4f45a603cfe9fb680e13fc3ecb48aed0ba73e198e7be5f53e39f016384d262b0",
            [
              "0x90C0A0a63d7ff47BfAA1e9F8fa554dabc986504a",
              "0x81754d2E48e3e553ba6Dfd193FC72B3A0c6076d9",
              "0x5575218cECd370E1d630d1AdB03c254B0B376821",
              "0xBB13642F795014E0EAC2b0d52ECD5162ECb66712"
            ]
          ]
        ],
        "$upgradeCount": 19,
        "baseTokenGasPriceMultiplierDenominator": 1,
        "baseTokenGasPriceMultiplierNominator": 1,
        "daMode": 0,
        "facetAddresses": [
          "0x90C0A0a63d7ff47BfAA1e9F8fa554dabc986504a",
          "0x81754d2E48e3e553ba6Dfd193FC72B3A0c6076d9",
          "0x5575218cECd370E1d630d1AdB03c254B0B376821",
          "0xBB13642F795014E0EAC2b0d52ECD5162ECb66712"
        ],
        "facets": {
          "0x90C0A0a63d7ff47BfAA1e9F8fa554dabc986504a": [
            "acceptAdmin()",
            "changeFeeParams((uint8,uint32,uint32,uint32,uint32,uint64))",
            "executeUpgrade(((address,uint8,bool,bytes4[])[],address,bytes))",
            "freezeDiamond()",
            "setPendingAdmin(address)",
            "setPorterAvailability(bool)",
            "setPriorityTxMaxGasLimit(uint256)",
            "setPubdataPricingMode(uint8)",
            "setTokenMultiplier(uint128,uint128)",
            "setTransactionFilterer(address)",
            "setValidator(address,bool)",
            "unfreezeDiamond()",
            "upgradeChainFromVersion(uint256,((address,uint8,bool,bytes4[])[],address,bytes))"
          ],
          "0x81754d2E48e3e553ba6Dfd193FC72B3A0c6076d9": [
            "baseTokenGasPriceMultiplierDenominator()",
            "baseTokenGasPriceMultiplierNominator()",
            "facetAddress(bytes4)",
            "facetAddresses()",
            "facetFunctionSelectors(address)",
            "facets()",
            "getAdmin()",
            "getBaseToken()",
            "getBaseTokenBridge()",
            "getBridgehub()",
            "getFirstUnprocessedPriorityTx()",
            "getL2BootloaderBytecodeHash()",
            "getL2DefaultAccountBytecodeHash()",
            "getL2SystemContractsUpgradeBatchNumber()",
            "getL2SystemContractsUpgradeBlockNumber()",
            "getL2SystemContractsUpgradeTxHash()",
            "getPendingAdmin()",
            "getPriorityQueueSize()",
            "getPriorityTxMaxGasLimit()",
            "getProtocolVersion()",
            "getPubdataPricingMode()",
            "getSemverProtocolVersion()",
            "getStateTransitionManager()",
            "getTotalBatchesCommitted()",
            "getTotalBatchesExecuted()",
            "getTotalBatchesVerified()",
            "getTotalBlocksCommitted()",
            "getTotalBlocksExecuted()",
            "getTotalBlocksVerified()",
            "getTotalPriorityTxs()",
            "getVerifier()",
            "getVerifierParams()",
            "isDiamondStorageFrozen()",
            "isEthWithdrawalFinalized(uint256,uint256)",
            "isFacetFreezable(address)",
            "isFunctionFreezable(bytes4)",
            "isValidator(address)",
            "l2LogsRootHash(uint256)",
            "priorityQueueFrontOperation()",
            "storedBatchHash(uint256)",
            "storedBlockHash(uint256)"
          ],
          "0x5575218cECd370E1d630d1AdB03c254B0B376821": [
            "bridgehubRequestL2Transaction((address,address,uint256,uint256,bytes,uint256,uint256,bytes[],address))",
            "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])",
            "l2TransactionBaseCost(uint256,uint256,uint256)",
            "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)",
            "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])",
            "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])",
            "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)",
            "transferEthToSharedBridge()"
          ],
          "0xBB13642F795014E0EAC2b0d52ECD5162ECb66712": [
            "commitBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),(uint64,uint64,uint64,bytes32,uint256,bytes32,bytes32,bytes32,bytes,bytes)[])",
            "commitBatchesSharedBridge(uint256,(uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),(uint64,uint64,uint64,bytes32,uint256,bytes32,bytes32,bytes32,bytes,bytes)[])",
            "executeBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32)[])",
            "executeBatchesSharedBridge(uint256,(uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32)[])",
            "proveBatches((uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),(uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32)[],(uint256[],uint256[]))",
            "proveBatchesSharedBridge(uint256,(uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32),(uint64,bytes32,uint64,uint256,bytes32,bytes32,uint256,bytes32)[],(uint256[],uint256[]))",
            "revertBatches(uint256)",
            "revertBatchesSharedBridge(uint256,uint256)"
          ]
        },
        "getAdmin": "0x2cf3bD6a9056b39999F3883955E183F655345063",
        "getBaseToken": "0x0000000000000000000000000000000000000001",
        "getBaseTokenBridge": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
        "getBridgehub": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "getFirstUnprocessedPriorityTx": 3268301,
        "getL2BootloaderBytecodeHash": "0x010008c3be57ae5800e077b6c2056d9d75ad1a7b4f0ce583407961cc6fe0b678",
        "getL2DefaultAccountBytecodeHash": "0x0100055dba11508480be023137563caec69debc85f826cb3a4b68246a7cabe30",
        "getL2SystemContractsUpgradeBatchNumber": 0,
        "getL2SystemContractsUpgradeBlockNumber": 0,
        "getL2SystemContractsUpgradeTxHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getPendingAdmin": "0x0000000000000000000000000000000000000000",
        "getPriorityQueueSize": 65,
        "getPriorityTxMaxGasLimit": 72000000,
        "getProtocolVersion": 107374182400,
        "getPubdataPricingMode": 0,
        "getSemverProtocolVersion": [0, 25, 0],
        "getStateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "getTotalBatchesCommitted": 496744,
        "getTotalBatchesExecuted": 496685,
        "getTotalBatchesVerified": 496741,
        "getTotalBlocksCommitted": 496744,
        "getTotalBlocksExecuted": 496685,
        "getTotalBlocksVerified": 496741,
        "getTotalPriorityTxs": 3268366,
        "getVerifier": "0x06aa7a7B07108F7C5539645e32DD5c21cBF9EB66",
        "getVerifierParams": {
          "recursionNodeLevelVkHash": "0xf520cd5b37e74e19fdb369c8d676a04dce8a19457497ac6686d2bb95d94109c8",
          "recursionLeafLevelVkHash": "0xf9664f4324c1400fa5c3822d667f30e873f53f1b8033180cd15fe41c1e2355c6",
          "recursionCircuitsSetVksHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
        },
        "isDiamondStorageFrozen": false,
        "txFilterer": [],
        "validators": [
          "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD",
          "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E"
        ]
      },
      "fieldMeta": {
        "txFilterer": {
          "severity": "HIGH",
          "description": "This contract must expose the ITransactionFilterer interface (see Mailbox facet) and is used for censoring transactions pushed from L1 to L2."
        },
        "getProtocolVersion": {
          "severity": "MEDIUM",
          "description": "Protocol version, increments with each protocol upgrade."
        },
        "getVerifierParams": {
          "severity": "LOW",
          "description": "Verifier parameters used for proving batches."
        }
      },
      "derivedName": "DiamondProxy"
    },
    {
      "name": "L1ERC20Bridge_wstETH",
      "address": "0x41527B2d03844dB6b0945f25702cB958b6d55989",
      "sourceHashes": [
        "0x698ae88793265d087e07a445b69bf16b450cdcf636b9073b86221936e912a135",
        "0x8d6377528b46831d215e352a53f276acbd18ec4bc66c04894dd72dad36288c4d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Bridge for depositing wrapped stETH (Lido) to ZKsync Era. These deposits and withdrawals do not go through the shared Bridge.",
      "sinceTimestamp": 1698065351,
      "values": {
        "$admin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "0x9a810469F4a451Ebb7ef53672142053b4971587c",
        "$pastUpgrades": [
          [
            "2023-10-23T12:49:11.000Z",
            "0x51c6da607599f4f5f12d9fce001ede3fb1b94c9e2bd37fb48e081898fabf0020",
            ["0x9a810469F4a451Ebb7ef53672142053b4971587c"]
          ]
        ],
        "$upgradeCount": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DEPOSITS_DISABLER_ROLE": "0x63f736f21cb2943826cd50b191eb054ebbea670e4e962d0527611f830cd399d6",
        "DEPOSITS_ENABLER_ROLE": "0x4b43b36766bde12c5e9cbbc37d15f8d1f769f08f54720ab370faeb4ce893753a",
        "isDepositsEnabled": true,
        "isInitialized": true,
        "isWithdrawalsEnabled": true,
        "l1Token": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
        "l2Bridge": "0xE1D6A50E7101c8f8db77352897Ee3f1AC53f782B",
        "l2Token": "0x703b52F2b28fEbcB60E1372858AF5b18849FE867",
        "proxy__getAdmin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "0x9a810469F4a451Ebb7ef53672142053b4971587c",
        "proxy__getIsOssified": false,
        "WITHDRAWALS_DISABLER_ROLE": "0x94a954c0bc99227eddbc0715a62a7e1056ed8784cd719c2303b685683908857c",
        "WITHDRAWALS_ENABLER_ROLE": "0x9ab8816a3dc0b3849ec1ac00483f6ec815b07eee2fd766a353311c823ad59d0d",
        "zkSync": "0x32400084C286CF3E17e7B677ea9583e60a000324"
      },
      "derivedName": "L1ERC20Bridge"
    },
    {
      "name": "L1ERC20Bridge",
      "address": "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
      "sourceHashes": [
        "0x3f8d1d2461c05779ca5de685fd391f6a4c07e91953373effd46d11f72b025dc3",
        "0x179b79e02a71cc452486d433271b925a402363053a3dd4e9d83837877c677dfd"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Legacy bridge for depositing ERC20 tokens to ZKsync Era. Forwards deposits and withdrawals to the BridgeHub.",
      "sinceTimestamp": 1676370683,
      "values": {
        "$admin": "0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1",
        "$implementation": "0x8D231E4097C3cb200Ed62134B466AA615cE60336",
        "$pastUpgrades": [
          [
            "2023-02-14T10:31:23.000Z",
            "0xbeb9be61e12ebe1e8abcaa0ddd3149cc0282a60af9b11ee2cae50fbcd0adb96e",
            ["0x22bE40122BA952b81c50bcaa86F84418ff623391"]
          ],
          [
            "2023-03-23T19:49:59.000Z",
            "0x5fc563e76bc3421166b3898389b72d6a93ac04d94741fc884290d2120ce8cfd0",
            ["0x7e5E66B01fe43293545eaB98ec4D31784A5Efa84"]
          ],
          [
            "2023-04-25T12:37:35.000Z",
            "0xa462b66e80e973da1eaea5a5bde5a1b4ff6a1a3b29ac4db25922712e71900e80",
            ["0x38ABF296EE79621A225AA85086853b0dA3225D2F"]
          ],
          [
            "2023-08-16T10:21:35.000Z",
            "0x351e42a19944da59b77c2fdd0d5adb58fd0af1cc960e14af3cfae0d686fda478",
            ["0x7FB17101A744e156e63d5fF6A4775fb48756577c"]
          ],
          [
            "2023-12-04T20:29:11.000Z",
            "0x9f0e9ecd78b5c17ff95c130b183df452486a0f784705927e608fd90a00aa9bcd",
            ["0x03F3F3c12e11C2FAA60080bd3F7f80AADF369a33"]
          ],
          [
            "2023-12-22T10:57:59.000Z",
            "0xd340a9274753c7f5edd33bc034c08df9e050821d399059c2f6bf0686dd341a87",
            ["0x79Cc1DF74Ac2d1B0876498C9FcE32c7e34F57B43"]
          ],
          [
            "2024-02-08T10:36:47.000Z",
            "0x7a9c713189afcfbb07826da5078905f2543da22468f98507e51eac632dc784ce",
            ["0x810c6598CAaA08B61f6430Df5a8e120B3390d78A"]
          ],
          [
            "2024-06-06T13:20:35.000Z",
            "0xb689a0cfff9af4bb1d1da94c404d396f24d5cf5031c31647671549c717cdba7a",
            ["0x8191975d8B0851C7f0740918896Cf298c09aA05E"]
          ],
          [
            "2025-01-08T16:00:35.000Z",
            "0xc90d135e4b8ab58304853f3be34b2fefd18c2a817d3d250e7b669e024d5277c5",
            ["0x8D231E4097C3cb200Ed62134B466AA615cE60336"]
          ]
        ],
        "$upgradeCount": 9,
        "l2Bridge": "0x11f943b2c77b743AB90f4A0Ae7d5A4e7FCA3E102",
        "l2TokenBeacon": "0x1Eb710030273e529A6aD7E1e14D4e601765Ba3c6",
        "l2TokenProxyBytecodeHash": "0x01000121a363b3fbec270986067c1b553bf540c30a6f186f45313133ff1a1019",
        "SHARED_BRIDGE": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB"
      },
      "derivedName": "L1ERC20Bridge"
    },
    {
      "name": "ValidatorTimelock",
      "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
      "template": "shared-zk-stack/ValidatorTimelock",
      "sourceHashes": [
        "0x5c435b3eaf489b61e623af2356a751079cfa87c079c12e5d93108d007d3b4c97"
      ],
      "description": "Intermediary contract between the *Validators* and the central diamond contract that delays block execution (ie withdrawals and other L2 --> L1 messages) by 3h.",
      "issuedPermissions": [
        {
          "permission": "validateZkStack",
          "to": "0x0D3250c3D5FAcb74Ac15834096397a3Ef790ec99",
          "via": []
        },
        {
          "permission": "validateZkStack",
          "to": "0x3527439923a63F8C13CF72b8Fe80a77f6e572092",
          "via": []
        }
      ],
      "receivedPermissions": [
        {
          "permission": "configure",
          "from": "0x32400084C286CF3E17e7B677ea9583e60a000324",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock."
        }
      ],
      "sinceTimestamp": 1717520615,
      "values": {
        "$immutable": true,
        "executionDelay": 10800,
        "executionDelay_fmt": "3h",
        "getName": "ValidatorTimelock",
        "owner": "0x8f7a9912416e8AdC4D9c21FAe1415D3318A11897",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "revertedBlocks": [],
        "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "validatorsVTL": [
          "0x0D3250c3D5FAcb74Ac15834096397a3Ef790ec99",
          "0x3527439923a63F8C13CF72b8Fe80a77f6e572092"
        ]
      }
    },
    {
      "name": "ValidatorTimelockOld",
      "address": "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD",
      "sourceHashes": [
        "0x2aff1337a5d8a9be27e6d384ec8a2efd746fb4b73195773c82f3e42e2210c8ed"
      ],
      "description": "Intermediary contract between the *Validators* and the ZKsync Era diamond that delays block execution (ie withdrawals and other L2 --> L1 messages) by 21h. This contract is a remnant from pre Elastic Chain times.",
      "issuedPermissions": [
        {
          "permission": "configure",
          "to": "0x0b622A2061EaccAE1c664eBC3E868b8438e03F61",
          "description": "set addresses (validators) that can commit, prove, execute, revert batches through this contract.",
          "via": []
        }
      ],
      "receivedPermissions": [
        {
          "permission": "configure",
          "from": "0x32400084C286CF3E17e7B677ea9583e60a000324",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock."
        }
      ],
      "sinceTimestamp": 1709850611,
      "values": {
        "$immutable": true,
        "constructorArgs": {
          "_initialOwner": "0x0b622A2061EaccAE1c664eBC3E868b8438e03F61",
          "_zkSyncContract": "0x32400084C286CF3E17e7B677ea9583e60a000324",
          "_executionDelay": 75600,
          "_validators": [
            "0x3527439923a63F8C13CF72b8Fe80a77f6e572092",
            "0x0D3250c3D5FAcb74Ac15834096397a3Ef790ec99"
          ]
        },
        "executionDelay": 75600,
        "executionDelay_formatted": "21h",
        "getName": "ValidatorTimelock",
        "owner": "0x0b622A2061EaccAE1c664eBC3E868b8438e03F61",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "revertedBlocks": [],
        "validatorsVTLold": [],
        "zkSyncContract": "0x32400084C286CF3E17e7B677ea9583e60a000324"
      },
      "derivedName": "ValidatorTimelock"
    }
  ],
  "eoas": [
    { "address": "0x0000000000000000000000000000000000000000" },
    {
      "address": "0x0D3250c3D5FAcb74Ac15834096397a3Ef790ec99",
      "receivedPermissions": [
        {
          "permission": "validateZkStack",
          "from": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E"
        }
      ]
    },
    {
      "address": "0x3527439923a63F8C13CF72b8Fe80a77f6e572092",
      "receivedPermissions": [
        {
          "permission": "validateZkStack",
          "from": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E"
        }
      ]
    }
  ],
  "abis": {
    "0x06aa7a7B07108F7C5539645e32DD5c21cBF9EB66": [
      "function verificationKeyHash() pure returns (bytes32 vkHash)",
      "function verify(uint256[], uint256[], uint256[]) view returns (bool)"
    ],
    "0x0b622A2061EaccAE1c664eBC3E868b8438e03F61": [
      "constructor(address _admin, address _securityCouncil, uint256 _minDelay)",
      "event ChangeMinDelay(uint256 _delayBefore, uint256 _delayAfter)",
      "event ChangeSecurityCouncil(address _securityCouncilBefore, address _securityCouncilAfter)",
      "event OperationCancelled(bytes32 indexed _id)",
      "event OperationExecuted(bytes32 indexed _id)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ShadowOperationScheduled(bytes32 indexed _id, uint256 delay)",
      "event TransparentOperationScheduled(bytes32 indexed _id, uint256 delay, tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation)",
      "function acceptOwnership()",
      "function cancel(bytes32 _id)",
      "function execute(tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation) payable",
      "function executeInstant(tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation) payable",
      "function getOperationState(bytes32 _id) view returns (uint8)",
      "function hashOperation(tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation) pure returns (bytes32)",
      "function isOperation(bytes32 _id) view returns (bool)",
      "function isOperationDone(bytes32 _id) view returns (bool)",
      "function isOperationPending(bytes32 _id) view returns (bool)",
      "function isOperationReady(bytes32 _id) view returns (bool)",
      "function minDelay() view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function scheduleShadow(bytes32 _id, uint256 _delay)",
      "function scheduleTransparent(tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation, uint256 _delay)",
      "function securityCouncil() view returns (address)",
      "function timestamps(bytes32) view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function updateDelay(uint256 _newDelay)",
      "function updateSecurityCouncil(address _newSecurityCouncil)"
    ],
    "0x32400084C286CF3E17e7B677ea9583e60a000324": [
      "constructor(uint256 _chainId, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)"
    ],
    "0x41527B2d03844dB6b0945f25702cB958b6d55989": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error ErrorNotAdmin()",
      "error ErrorProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "0x5575218cECd370E1d630d1AdB03c254B0B376821": [
      "constructor(uint256 _eraChainId)",
      "error BaseTokenGasPriceDenominatorNotSet()",
      "error BatchNotExecuted(uint256 batchNumber)",
      "error GasPerPubdataMismatch()",
      "error HashedLogIsDefault()",
      "error LengthIsNotDivisibleBy32(uint256 length)",
      "error MalformedBytecode(uint8)",
      "error MerkleIndexOutOfBounds()",
      "error MerklePathEmpty()",
      "error MerklePathOutOfBounds()",
      "error MsgValueTooLow(uint256 required, uint256 provided)",
      "error NotInitializedReentrancyGuard()",
      "error OnlyEraSupported()",
      "error PubdataGreaterThanLimit(uint256 limit, uint256 length)",
      "error Reentrancy()",
      "error TooManyFactoryDeps()",
      "error TooMuchGas()",
      "error TransactionNotAllowed()",
      "error TxnBodyGasLimitNotEnoughGas()",
      "error Unauthorized(address caller)",
      "error ValidateTxnNotEnoughGas()",
      "event NewPriorityRequest(uint256 txId, bytes32 txHash, uint64 expirationTimestamp, tuple(uint256 txType, uint256 from, uint256 to, uint256 gasLimit, uint256 gasPerPubdataByteLimit, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas, uint256 paymaster, uint256 nonce, uint256 value, uint256[4] reserved, bytes data, bytes signature, uint256[] factoryDeps, bytes paymasterInput, bytes reservedDynamic) transaction, bytes[] factoryDeps)",
      "function bridgehubRequestL2Transaction(tuple(address sender, address contractL2, uint256 mintValue, uint256 l2Value, bytes l2Calldata, uint256 l2GasLimit, uint256 l2GasPerPubdataByteLimit, bytes[] factoryDeps, address refundRecipient) _request) returns (bytes32 canonicalTxHash)",
      "function finalizeEthWithdrawal(uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes _message, bytes32[] _merkleProof)",
      "function getName() view returns (string)",
      "function l2TransactionBaseCost(uint256 _gasPrice, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit) view returns (uint256)",
      "function proveL1ToL2TransactionStatus(bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof, uint8 _status) view returns (bool)",
      "function proveL2LogInclusion(uint256 _batchNumber, uint256 _index, tuple(uint8 l2ShardId, bool isService, uint16 txNumberInBatch, address sender, bytes32 key, bytes32 value) _log, bytes32[] _proof) view returns (bool)",
      "function proveL2MessageInclusion(uint256 _batchNumber, uint256 _index, tuple(uint16 txNumberInBatch, address sender, bytes data) _message, bytes32[] _proof) view returns (bool)",
      "function requestL2Transaction(address _contractL2, uint256 _l2Value, bytes _calldata, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit, bytes[] _factoryDeps, address _refundRecipient) payable returns (bytes32 canonicalTxHash)",
      "function transferEthToSharedBridge()"
    ],
    "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E": [
      "constructor(address _initialOwner, uint32 _executionDelay, uint256 _eraChainId)",
      "error AddressAlreadyValidator(uint256 _chainId)",
      "error ValidatorDoesNotExist(uint256 _chainId)",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "event NewExecutionDelay(uint256 _newExecutionDelay)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ValidatorAdded(uint256 indexed _chainId, address _addedValidator)",
      "event ValidatorRemoved(uint256 indexed _chainId, address _removedValidator)",
      "function acceptOwnership()",
      "function addValidator(uint256 _chainId, address _newValidator)",
      "function commitBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, uint64 timestamp, uint64 indexRepeatedStorageChanges, bytes32 newStateRoot, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 bootloaderHeapInitialContentsHash, bytes32 eventsQueueStateHash, bytes systemLogs, bytes pubdataCommitments)[] _newBatchesData)",
      "function commitBatchesSharedBridge(uint256 _chainId, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, uint64 timestamp, uint64 indexRepeatedStorageChanges, bytes32 newStateRoot, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 bootloaderHeapInitialContentsHash, bytes32 eventsQueueStateHash, bytes systemLogs, bytes pubdataCommitments)[] _newBatchesData)",
      "function executeBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _newBatchesData)",
      "function executeBatchesSharedBridge(uint256 _chainId, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _newBatchesData)",
      "function executionDelay() view returns (uint32)",
      "function getCommittedBatchTimestamp(uint256 _chainId, uint256 _l2BatchNumber) view returns (uint256)",
      "function getName() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function proveBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[], tuple(uint256[] recursiveAggregationInput, uint256[] serializedProof))",
      "function proveBatchesSharedBridge(uint256 _chainId, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[], tuple(uint256[] recursiveAggregationInput, uint256[] serializedProof))",
      "function removeValidator(uint256 _chainId, address _validator)",
      "function renounceOwnership()",
      "function revertBatches(uint256)",
      "function revertBatchesSharedBridge(uint256 _chainId, uint256)",
      "function setExecutionDelay(uint32 _executionDelay)",
      "function setStateTransitionManager(address _stateTransitionManager)",
      "function stateTransitionManager() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function validators(uint256 _chainId, address _validator) view returns (bool)"
    ],
    "0x81754d2E48e3e553ba6Dfd193FC72B3A0c6076d9": [
      "error InvalidSelector(bytes4 func)",
      "error QueueIsEmpty()",
      "function baseTokenGasPriceMultiplierDenominator() view returns (uint128)",
      "function baseTokenGasPriceMultiplierNominator() view returns (uint128)",
      "function facetAddress(bytes4 _selector) view returns (address)",
      "function facetAddresses() view returns (address[])",
      "function facetFunctionSelectors(address _facet) view returns (bytes4[])",
      "function facets() view returns (tuple(address addr, bytes4[] selectors)[] result)",
      "function getAdmin() view returns (address)",
      "function getBaseToken() view returns (address)",
      "function getBaseTokenBridge() view returns (address)",
      "function getBridgehub() view returns (address)",
      "function getFirstUnprocessedPriorityTx() view returns (uint256)",
      "function getL2BootloaderBytecodeHash() view returns (bytes32)",
      "function getL2DefaultAccountBytecodeHash() view returns (bytes32)",
      "function getL2SystemContractsUpgradeBatchNumber() view returns (uint256)",
      "function getL2SystemContractsUpgradeBlockNumber() view returns (uint256)",
      "function getL2SystemContractsUpgradeTxHash() view returns (bytes32)",
      "function getName() view returns (string)",
      "function getPendingAdmin() view returns (address)",
      "function getPriorityQueueSize() view returns (uint256)",
      "function getPriorityTxMaxGasLimit() view returns (uint256)",
      "function getProtocolVersion() view returns (uint256)",
      "function getPubdataPricingMode() view returns (uint8)",
      "function getSemverProtocolVersion() view returns (uint32, uint32, uint32)",
      "function getStateTransitionManager() view returns (address)",
      "function getTotalBatchesCommitted() view returns (uint256)",
      "function getTotalBatchesExecuted() view returns (uint256)",
      "function getTotalBatchesVerified() view returns (uint256)",
      "function getTotalBlocksCommitted() view returns (uint256)",
      "function getTotalBlocksExecuted() view returns (uint256)",
      "function getTotalBlocksVerified() view returns (uint256)",
      "function getTotalPriorityTxs() view returns (uint256)",
      "function getVerifier() view returns (address)",
      "function getVerifierParams() view returns (tuple(bytes32 recursionNodeLevelVkHash, bytes32 recursionLeafLevelVkHash, bytes32 recursionCircuitsSetVksHash))",
      "function isDiamondStorageFrozen() view returns (bool)",
      "function isEthWithdrawalFinalized(uint256 _l2BatchNumber, uint256 _l2MessageIndex) view returns (bool)",
      "function isFacetFreezable(address _facet) view returns (bool isFreezable)",
      "function isFunctionFreezable(bytes4 _selector) view returns (bool)",
      "function isValidator(address _address) view returns (bool)",
      "function l2LogsRootHash(uint256 _batchNumber) view returns (bytes32)",
      "function priorityQueueFrontOperation() view returns (tuple(bytes32 canonicalTxHash, uint64 expirationTimestamp, uint192 layer2Tip))",
      "function storedBatchHash(uint256 _batchNumber) view returns (bytes32)",
      "function storedBlockHash(uint256 _batchNumber) view returns (bytes32)"
    ],
    "0x8D231E4097C3cb200Ed62134B466AA615cE60336": [
      "constructor(address _sharedBridge)",
      "error EmptyDeposit()",
      "error NotInitializedReentrancyGuard()",
      "error Reentrancy()",
      "error SlotOccupied()",
      "error TokensWithFeesNotSupported()",
      "error Unauthorized(address caller)",
      "error WithdrawalAlreadyFinalized()",
      "event ClaimedFailedDeposit(address indexed to, address indexed l1Token, uint256 amount)",
      "event DepositInitiated(bytes32 indexed l2DepositTxHash, address indexed from, address indexed to, address l1Token, uint256 amount)",
      "event WithdrawalFinalized(address indexed to, address indexed l1Token, uint256 amount)",
      "function SHARED_BRIDGE() view returns (address)",
      "function claimFailedDeposit(address _depositSender, address _l1Token, bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof)",
      "function deposit(address _l2Receiver, address _l1Token, uint256 _amount, uint256 _l2TxGasLimit, uint256 _l2TxGasPerPubdataByte) payable returns (bytes32 l2TxHash)",
      "function deposit(address _l2Receiver, address _l1Token, uint256 _amount, uint256 _l2TxGasLimit, uint256 _l2TxGasPerPubdataByte, address _refundRecipient) payable returns (bytes32 l2TxHash)",
      "function depositAmount(address account, address l1Token, bytes32 depositL2TxHash) view returns (uint256 amount)",
      "function finalizeWithdrawal(uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes _message, bytes32[] _merkleProof)",
      "function initialize()",
      "function isWithdrawalFinalized(uint256 l2BatchNumber, uint256 l2ToL1MessageNumber) view returns (bool isFinalized)",
      "function l2Bridge() view returns (address)",
      "function l2TokenAddress(address _l1Token) view returns (address)",
      "function l2TokenBeacon() view returns (address)",
      "function l2TokenProxyBytecodeHash() view returns (bytes32)",
      "function transferTokenToSharedBridge(address _token)"
    ],
    "0x90C0A0a63d7ff47BfAA1e9F8fa554dabc986504a": [
      "error AddressHasNoCode(address)",
      "error ChainAlreadyLive()",
      "error DelegateCallFailed(bytes returnData)",
      "error DenominatorIsZero()",
      "error DiamondAlreadyFrozen()",
      "error DiamondNotFrozen()",
      "error FacetExists(bytes4 selector, address)",
      "error HashMismatch(bytes32 expected, bytes32 actual)",
      "error InvalidPubdataPricingMode()",
      "error NoFunctionsForDiamondCut()",
      "error NonEmptyCalldata()",
      "error PriorityTxPubdataExceedsMaxPubDataPerBatch()",
      "error ProtocolIdMismatch(uint256 expectedProtocolVersion, uint256 providedProtocolId)",
      "error ProtocolIdNotGreater()",
      "error RemoveFunctionFacetAddressNotZero(address facet)",
      "error RemoveFunctionFacetAddressZero()",
      "error ReplaceFunctionFacetAddressZero()",
      "error SelectorsMustAllHaveSameFreezability()",
      "error TooMuchGas()",
      "error Unauthorized(address caller)",
      "error UndefinedDiamondCutAction()",
      "event DiamondCut(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata)",
      "event ExecuteUpgrade(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) diamondCut)",
      "event Freeze()",
      "event IsPorterAvailableStatusUpdate(bool isPorterAvailable)",
      "event NewAdmin(address indexed oldAdmin, address indexed newAdmin)",
      "event NewBaseTokenMultiplier(uint128 oldNominator, uint128 oldDenominator, uint128 newNominator, uint128 newDenominator)",
      "event NewFeeParams(tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) oldFeeParams, tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) newFeeParams)",
      "event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin)",
      "event NewPriorityTxMaxGasLimit(uint256 oldPriorityTxMaxGasLimit, uint256 newPriorityTxMaxGasLimit)",
      "event NewTransactionFilterer(address oldTransactionFilterer, address newTransactionFilterer)",
      "event Unfreeze()",
      "event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive)",
      "event ValidiumModeStatusUpdate(uint8 validiumMode)",
      "function acceptAdmin()",
      "function changeFeeParams(tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) _newFeeParams)",
      "function executeUpgrade(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)",
      "function freezeDiamond()",
      "function getName() view returns (string)",
      "function setPendingAdmin(address _newPendingAdmin)",
      "function setPorterAvailability(bool _zkPorterIsAvailable)",
      "function setPriorityTxMaxGasLimit(uint256 _newPriorityTxMaxGasLimit)",
      "function setPubdataPricingMode(uint8 _pricingMode)",
      "function setTokenMultiplier(uint128 _nominator, uint128 _denominator)",
      "function setTransactionFilterer(address _transactionFilterer)",
      "function setValidator(address _validator, bool _active)",
      "function unfreezeDiamond()",
      "function upgradeChainFromVersion(uint256 _oldProtocolVersion, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)"
    ],
    "0x9a810469F4a451Ebb7ef53672142053b4971587c": [
      "constructor()",
      "error ErrorAccountIsZeroAddress()",
      "error ErrorAlreadyInitialized()",
      "error ErrorDepositsDisabled()",
      "error ErrorDepositsEnabled()",
      "error ErrorUnsupportedL1Token()",
      "error ErrorUnsupportedL2Token()",
      "error ErrorWithdrawalsDisabled()",
      "error ErrorWithdrawalsEnabled()",
      "event ClaimedFailedDeposit(address indexed to, address indexed l1Token, uint256 amount)",
      "event DepositInitiated(bytes32 indexed l2DepositTxHash, address indexed from, address indexed to, address l1Token, uint256 amount, address refundRecipient)",
      "event DepositsDisabled(address indexed disabler)",
      "event DepositsEnabled(address indexed enabler)",
      "event Initialized(uint8 version)",
      "event InitializedBridgingManager(address indexed admin)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event WithdrawalFinalized(address indexed to, address indexed l1Token, uint256 amount)",
      "event WithdrawalsDisabled(address indexed disabler)",
      "event WithdrawalsEnabled(address indexed enabler)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DEPOSITS_DISABLER_ROLE() view returns (bytes32)",
      "function DEPOSITS_ENABLER_ROLE() view returns (bytes32)",
      "function WITHDRAWALS_DISABLER_ROLE() view returns (bytes32)",
      "function WITHDRAWALS_ENABLER_ROLE() view returns (bytes32)",
      "function claimFailedDeposit(address _depositSender, address _l1Token, bytes32 _l2TxHash, uint256 _l2BlockNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBlock, bytes32[] _merkleProof)",
      "function deposit(address _l2Receiver, address _l1Token, uint256 _amount, uint256 _l2TxGasLimit, uint256 _l2TxGasPerPubdataByte) payable returns (bytes32 l2TxHash)",
      "function deposit(address _l2Receiver, address _l1Token, uint256 _amount, uint256 _l2TxGasLimit, uint256 _l2TxGasPerPubdataByte, address _refundRecipient) payable returns (bytes32 l2TxHash)",
      "function depositAmount(address, bytes32) view returns (uint256)",
      "function disableDeposits()",
      "function disableWithdrawals()",
      "function enableDeposits()",
      "function enableWithdrawals()",
      "function finalizeWithdrawal(uint256 _l2BlockNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBlock, bytes _message, bytes32[] _merkleProof)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(bytes[] _factoryDeps, tuple(address _l1Token, address _l2Token, address _governor, address _admin, address _zkSync) addresses, uint256 _deployBridgeImplementationFee, uint256 _deployBridgeProxyFee) payable",
      "function isDepositsEnabled() view returns (bool)",
      "function isInitialized() view returns (bool)",
      "function isWithdrawalFinalized(uint256, uint256) view returns (bool)",
      "function isWithdrawalsEnabled() view returns (bool)",
      "function l1Token() view returns (address)",
      "function l2Bridge() view returns (address)",
      "function l2Token() view returns (address)",
      "function l2TokenAddress(address _l1Token) view returns (address l2TokenAddr)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function zkSync() view returns (address)"
    ],
    "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD": [
      "constructor(address _initialOwner, address _zkSyncContract, uint32 _executionDelay, address[] _validators)",
      "error AddressAlreadyValidator()",
      "error ValidatorDoesNotExist()",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "event NewExecutionDelay(uint256 _newExecutionDelay)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ValidatorAdded(address _addedValidator)",
      "event ValidatorRemoved(address _removedValidator)",
      "function acceptOwnership()",
      "function addValidator(address _newValidator)",
      "function commitBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, uint64 timestamp, uint64 indexRepeatedStorageChanges, bytes32 newStateRoot, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 bootloaderHeapInitialContentsHash, bytes32 eventsQueueStateHash, bytes systemLogs, bytes pubdataCommitments)[] _newBatchesData)",
      "function executeBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _newBatchesData)",
      "function executionDelay() view returns (uint32)",
      "function getCommittedBatchTimestamp(uint256 _l2BatchNumber) view returns (uint256)",
      "function getName() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function proveBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[], tuple(uint256[] recursiveAggregationInput, uint256[] serializedProof))",
      "function removeValidator(address _validator)",
      "function renounceOwnership()",
      "function revertBatches(uint256)",
      "function setExecutionDelay(uint32 _executionDelay)",
      "function transferOwnership(address newOwner)",
      "function validators(address) view returns (bool)",
      "function zkSyncContract() view returns (address)"
    ],
    "0xBB13642F795014E0EAC2b0d52ECD5162ECb66712": [
      "error BatchHashMismatch(bytes32 expected, bytes32 actual)",
      "error BatchNumberMismatch(uint256 expectedBatchNumber, uint256 providedBatchNumber)",
      "error BlobHashCommitmentError(uint256 index, bool blobHashEmpty, bool blobCommitmentEmpty)",
      "error CalldataLengthTooBig()",
      "error CanOnlyProcessOneBatch()",
      "error CantExecuteUnprovenBatches()",
      "error CantRevertExecutedBatch()",
      "error EmptyBlobVersionHash(uint256 index)",
      "error HashMismatch(bytes32 expected, bytes32 actual)",
      "error InvalidLogSender(address sender, uint256 logKey)",
      "error InvalidNumberOfBlobs(uint256 expected, uint256 numCommitments, uint256 numHashes)",
      "error InvalidProof()",
      "error InvalidProtocolVersion()",
      "error InvalidPubdataCommitmentsSize()",
      "error InvalidPubdataHash(bytes32 expectedHash, bytes32 provided)",
      "error InvalidPubdataLength()",
      "error InvalidPubdataMode()",
      "error L2TimestampTooBig()",
      "error LogAlreadyProcessed(uint8)",
      "error MissingSystemLogs(uint256 expected, uint256 actual)",
      "error NonEmptyBlobVersionHash(uint256 index)",
      "error NonIncreasingTimestamp()",
      "error NonSequentialBatch()",
      "error NotInitializedReentrancyGuard()",
      "error PointEvalCallFailed(bytes)",
      "error PointEvalFailed(bytes)",
      "error PriorityOperationsRollingHashMismatch()",
      "error PubdataCommitmentsEmpty()",
      "error PubdataCommitmentsTooBig()",
      "error QueueIsEmpty()",
      "error Reentrancy()",
      "error RevertedBatchNotAfterNewLastBatch()",
      "error SystemLogsSizeTooBig()",
      "error TimeNotReached(uint256 expectedTimestamp, uint256 actualTimestamp)",
      "error TimestampError()",
      "error TooManyBlobs()",
      "error TxHashMismatch()",
      "error Unauthorized(address caller)",
      "error UnexpectedSystemLog(uint256 logKey)",
      "error UpgradeBatchNumberIsNotZero()",
      "error ValueMismatch(uint256 expected, uint256 actual)",
      "error VerifiedBatchesExceedsCommittedBatches()",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "function commitBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment) _lastCommittedBatchData, tuple(uint64 batchNumber, uint64 timestamp, uint64 indexRepeatedStorageChanges, bytes32 newStateRoot, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 bootloaderHeapInitialContentsHash, bytes32 eventsQueueStateHash, bytes systemLogs, bytes pubdataCommitments)[] _newBatchesData)",
      "function commitBatchesSharedBridge(uint256, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment) _lastCommittedBatchData, tuple(uint64 batchNumber, uint64 timestamp, uint64 indexRepeatedStorageChanges, bytes32 newStateRoot, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 bootloaderHeapInitialContentsHash, bytes32 eventsQueueStateHash, bytes systemLogs, bytes pubdataCommitments)[] _newBatchesData)",
      "function executeBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _batchesData)",
      "function executeBatchesSharedBridge(uint256, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _batchesData)",
      "function getName() view returns (string)",
      "function proveBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment) _prevBatch, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _committedBatches, tuple(uint256[] recursiveAggregationInput, uint256[] serializedProof) _proof)",
      "function proveBatchesSharedBridge(uint256, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment) _prevBatch, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _committedBatches, tuple(uint256[] recursiveAggregationInput, uint256[] serializedProof) _proof)",
      "function revertBatches(uint256 _newLastBatch)",
      "function revertBatchesSharedBridge(uint256, uint256 _newLastBatch)"
    ]
  },
  "usedTemplates": {
    "shared-zk-stack/Diamond": "0x0b3c325e7797ebbc2cbb7d8518f22c694bce12e188d52758cc1e4ac318c29813",
    "shared-zk-stack/ValidatorTimelock": "0x3776f17136539758803c8f9414cca1bb0b6b9758adb3686b6cc31c7a53210cf0",
    "shared-zk-stack/Verifier": "0x747e9df6c967ba03b301b81982e9eee0991001c30f832d55dba9c87bbd2651c4"
  }
}
