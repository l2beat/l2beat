{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "ethereum",
  "name": "zksync2",
  "initialAddresses": [
    "0x41527B2d03844dB6b0945f25702cB958b6d55989",
    "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB"
  ],
  "names": {
    "0x32400084C286CF3E17e7B677ea9583e60a000324": "zkSync",
    "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063": "L1ERC20Bridge",
    "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD": "ValidatorTimelock_deprecated",
    "0x4e4943346848c4867F81dFb37c4cA9C5715A7828": "Matter Labs Multisig",
    "0x0b622A2061EaccAE1c664eBC3E868b8438e03F61": "Governance",
    "0x41527B2d03844dB6b0945f25702cB958b6d55989": "L1ERC20Bridge_wstETH",
    "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": "LidoAgent",
    "0x303a465B659cBB0ab36eE643eA362c509EEb5213": "BridgeHub",
    "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C": "StateTransitionManager",
    "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB": "L1SharedBridge",
    "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E": "ValidatorTimelock"
  },
  "overrides": {
    "BridgeHub": {
      "ignoreMethods": ["baseToken", "stateTransitionManager"],
      "fields": {
        "zksyncEraDiamond": {
          "handler": {
            "type": "call",
            "method": "getHyperchain",
            "args": [324]
          }
        },
        "zksyncEraSTM": {
          "handler": {
            "type": "call",
            "method": "stateTransitionManager",
            "args": [324]
          }
        }
      }
    },
    "StateTransitionManager": {
      "ignoreMethods": [
        "getHyperchain",
        "protocolVersionDeadline",
        "protocolVersionIsActive",
        "upgradeCutHash"
      ]
    },
    "L1SharedBridge": {
      "ignoreMethods": ["l2BridgeAddress", "L1_WETH_TOKEN"]
    },
    "zkSync": {
      "ignoreMethods": [
        "l2LogsRootHash",
        "storedBlockHash",
        "storedBatchHash",
        "getName"
      ],
      "ignoreInWatchMode": [
        "getPriorityQueueSize",
        "getTotalBlocksCommitted",
        "getTotalBlocksExecuted",
        "getTotalBlocksVerified",
        "getTotalBatchesExecuted",
        "getTotalBatchesVerified",
        "getTotalBatchesCommitted",
        "getTotalPriorityTxs",
        "priorityQueueFrontOperation",
        "getFirstUnprocessedPriorityTx"
      ],
      "fields": {
        "validators": {
          // this does not catch validators changed through an upgrade of the diamond (this is about the validator role in the executor (usually held by the validatorTimelock), not the validators of the ValidatorTimelock)
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "ValidatorStatusUpdate",
            "valueKey": "validatorAddress",
            "flagKey": "isActive"
          }
        },
        "getProtocolVersion": {
          "description": "Protocol version, increments with each protocol change",
          "severity": "MEDIUM"
        },
        "getVerifierParams": {
          "description": "Verifier parameters used for proving batches",
          "severity": "LOW"
        }
      }
    },
    "ValidatorTimelock": {
      "ignoreMethods": [
        "committedBlockTimestamp",
        "getCommittedBatchTimestamp"
      ],
      "fields": {
        "revertedBlocks": {
          "handler": {
            "type": "stateFromEvent",
            "event": "BlocksRevert",
            "returnParams": [
              "totalBlocksCommitted",
              "totalBlocksVerified",
              "totalBlocksExecuted"
            ]
          }
        },
        // the 3 following allow us to get an array of validators without creating a new handler
        // construnctorArgs._validators u validatorsAdded n validatorsRemoved
        // where u is the union of the 2 sets and n is intersection
        "constructorArgs": {
          "handler": {
            "type": "constructorArgs",
            "nameArgs": true
          }
        },
        "validatorsAdded": {
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "ValidatorAdded",
            "valueKey": "_addedValidator"
          }
        },
        "validatorsRemoved": {
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "ValidatorRemoved",
            "valueKey": "_removedValidator"
          }
        }
      }
    },
    "ValidatorTimelock_deprecated": {
      "ignoreMethods": [
        "committedBlockTimestamp",
        "getCommittedBatchTimestamp"
      ],
      "fields": {
        "revertedBlocks": {
          "handler": {
            "type": "stateFromEvent",
            "event": "BlocksRevert",
            "returnParams": [
              "totalBlocksCommitted",
              "totalBlocksVerified",
              "totalBlocksExecuted"
            ]
          }
        },
        // the 3 following allow us to get an array of validators without creating a new handler
        // construnctorArgs._validators u validatorsAdded n validatorsRemoved
        // where u is the union of the 2 sets and n is intersection
        "constructorArgs": {
          "handler": {
            "type": "constructorArgs",
            "nameArgs": true
          }
        },
        "validatorsAdded": {
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "ValidatorAdded",
            "valueKey": "_addedValidator"
          }
        },
        "validatorsRemoved": {
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "ValidatorRemoved",
            "valueKey": "_removedValidator"
          }
        }
      }
    },
    "Matter Labs Multisig": {
      "description": "Can instantly upgrade all contracts and roles in the zksync Era contracts",
      "ignoreInWatchMode": ["nonce"],
      "fields": {
        "getOwners": {
          "description": "Signers of the multisig",
          "severity": "LOW",
          "type": "PERMISSION"
        },
        "getThreshold": {
          "description": "Should be 4/8 per official docs",
          "severity": "HIGH",
          "type": "PERMISSION"
        }
      }
    },
    "L1ERC20Bridge": {
      "ignoreRelatives": ["l2Bridge", "l2TokenBeacon"]
    },
    "L1ERC20Bridge_wstETH": {
      "ignoreRelatives": [
        "l1Token",
        "l2Token",
        "l2Bridge",
        "l2TokenAddress",
        "proxy__getAdmin"
      ]
    },
    "LidoAgent": {
      "ignoreDiscovery": true
    },
    "Governance": {
      "fields": {
        "minDelay": {
          "description": "Minimum delay for scheduled upgrades",
          "severity": "MEDIUM"
        },
        "owner": {
          "description": "This owner role has all permissions in absence of a security council",
          "severity": "HIGH",
          "type": "PERMISSION"
        },
        "pendingOwner": {
          "description": "Pending owner can be set by current owner and accept or renounce ownership",
          "severity": "HIGH",
          "type": "PERMISSION"
        },
        "securityCouncil": {
          "description": "Address of the security council, change Governance section if this differs from the null address",
          "severity": "HIGH",
          "type": "PERMISSION"
        }
      }
    }
  }
}
