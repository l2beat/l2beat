{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "ethereum",
  "name": "zksync2",
  "initialAddresses": [
    "0x32400084C286CF3E17e7B677ea9583e60a000324", // ZKsync
    "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063", // L1ERC20Bridge
    "0x41527B2d03844dB6b0945f25702cB958b6d55989" // L1ERC20Bridge_wstETH
  ],
  "names": {
    "0x32400084C286CF3E17e7B677ea9583e60a000324": "ZKsync",
    "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063": "L1ERC20Bridge",
    "0x41527B2d03844dB6b0945f25702cB958b6d55989": "L1ERC20Bridge_wstETH",
    "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": "LidoAgent",
    "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD": "ValidatorTimelockOld",
    "0x0b622A2061EaccAE1c664eBC3E868b8438e03F61": "Governance"
  },
  "sharedModules": {
    "doesThisKeyDoAnything": "shared-zk-stack"
  },
  "overrides": {
    "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E": {
      // local override over the template to fetch the validators from the shared contract
      "fields": {
        "validatorsVTL": {
          "handler": {
            "type": "event",
            "select": ["validator"],
            "add": {
              "event": "event ValidatorAdded(uint256 indexed chainId, address validator)",
              "where": ["=", "#chainId", 324]
            },
            "remove": {
              "event": "event ValidatorRemoved(uint256 indexed chainId, address validator)",
              "where": ["=", "#chainId", 324]
            }
          },
          "target": {
            "permissions": [
              {
                "type": "validateZkStack"
              }
            ]
          }
        }
      }
    },
    "Governance": {
      "description": "Old Governance contract for ZKsync Era allowing for proposals in form of transactions. The minimum delay is {{minDelay_formatted}}.",
      "fields": {
        "minDelay_formatted": {
          "handler": {
            "type": "call",
            "method": "minDelay",
            "args": []
          },
          "returnType": "(FormatSeconds)"
        },
        "owner": {
          "target": {
            "permissions": [
              {
                "type": "act"
              }
            ]
          }
        }
      }
    },
    "ValidatorTimelockOld": {
      "description": "Intermediary contract between the *Validators* and the ZKsync Era diamond that delays block execution (ie withdrawals and other L2 --> L1 messages) by {{executionDelay_formatted}}. This contract is a remnant from pre Elastic Chain times.",
      "ignoreMethods": [
        "committedBlockTimestamp",
        "getCommittedBatchTimestamp"
      ],
      "fields": {
        "owner": {
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "set addresses (validators) that can commit, prove, execute, revert batches through this contract." // {{$$.address}} does not work
              }
            ]
          }
        },
        "executionDelay_formatted": {
          "handler": {
            "type": "call",
            "method": "executionDelay",
            "args": []
          },
          "returnType": "(FormatSeconds)"
        },
        "revertedBlocks": {
          "handler": {
            "type": "event",
            "select": [
              "totalBlocksCommitted",
              "totalBlocksVerified",
              "totalBlocksExecuted"
            ],
            "add": { "event": "BlocksRevert" }
          }
        },
        // the 2 following allow us to get an array of validators without creating a new handler
        // construnctorArgs._validators u validatorsVTLold
        // where u is the union of the 2 sets
        "constructorArgs": {
          // these validators are by default the same as the ones in the new timelock, but we fetch them to be sure
          "handler": {
            "type": "constructorArgs",
            "nameArgs": true
          }
        },
        "validatorsVTLold": {
          // should be empty, as the valis were added in the constructor and this VTL is unused
          "handler": {
            "type": "event",
            "select": ["validator"],
            "add": {
              "event": "event ValidatorAdded(address validator)"
            },
            "remove": {
              "event": "event ValidatorRemoved(address validator)"
            }
          },
          "target": {
            "permissions": [
              {
                "type": "validateZkStack"
              }
            ]
          }
        }
      }
    },
    "L1ERC20Bridge": {
      "description": "Legacy bridge for depositing ERC20 tokens to ZKsync Era. Forwards deposits and withdrawals to the BridgeHub.",
      "ignoreRelatives": ["l2Bridge", "l2TokenBeacon"]
    },
    "L1ERC20Bridge_wstETH": {
      "description": "Bridge for depositing wrapped stETH (Lido) to ZKsync Era. These deposits and withdrawals do not go through the shared Bridge.",
      "ignoreRelatives": [
        "l1Token",
        "l2Token",
        "l2Bridge",
        "l2TokenAddress",
        "proxy__getAdmin"
      ]
    },
    "LidoAgent": {
      "ignoreDiscovery": true
    }
  }
}
