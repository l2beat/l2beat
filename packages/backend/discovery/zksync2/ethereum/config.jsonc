{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "ethereum",
  "name": "zksync2",
  "initialAddresses": [
    "0x32400084C286CF3E17e7B677ea9583e60a000324",
    "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
    "0x41527B2d03844dB6b0945f25702cB958b6d55989"
  ],
  "names": {
    "0x32400084C286CF3E17e7B677ea9583e60a000324": "ZKsync",
    "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063": "L1ERC20Bridge",
    "0x41527B2d03844dB6b0945f25702cB958b6d55989": "L1ERC20Bridge_wstETH",
    "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": "LidoAgent",
    "0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD": "ValidatorTimelockOld"
  },
  "sharedModules": {
    "doesThisKeyDoAnything": "shared-zk-stack"
  },
  "overrides": {
    "ZKsync": {
      "ignoreMethods": [
        "l2LogsRootHash",
        "storedBlockHash",
        "storedBatchHash",
        "getName"
      ],
      "ignoreInWatchMode": [
        "getPriorityQueueSize",
        "getTotalBlocksCommitted",
        "getTotalBlocksExecuted",
        "getTotalBlocksVerified",
        "getTotalBatchesExecuted",
        "getTotalBatchesVerified",
        "getTotalBatchesCommitted",
        "getTotalPriorityTxs",
        "priorityQueueFrontOperation",
        "getFirstUnprocessedPriorityTx"
      ],
      "fields": {
        "txFilterer": {
          "description": "Optional: This contract must expose the ITransactionFilterer interface (see Mailbox facet) and is used for censoring transactions pushed from L1 to L2.",
          "severity": "HIGH",
          "handler": {
            "type": "stateFromEvent",
            "event": "NewTransactionFilterer",
            "returnParams": ["oldTransactionFilterer", "newTransactionFilterer"]
          }
        },
        "validators": {
          "handler": {
            "type": "zksynceraValidators"
          }
        },
        "getProtocolVersion": {
          "description": "Protocol version, increments with each protocol change",
          "severity": "MEDIUM"
        },
        "getVerifierParams": {
          "description": "Verifier parameters used for proving batches",
          "severity": "LOW"
        },
        "facets": {
          "handler": {
            "type": "eip2535Facets"
          }
        },
        "daMode": {
          "handler": {
            "type": "storage",
            "slot": 38,
            "offset": 0,
            "returnType": "uint8"
          }
        }
      }
    },
    "ValidatorTimelockOld": {
      "ignoreMethods": [
        "committedBlockTimestamp",
        "getCommittedBatchTimestamp"
      ],
      "fields": {
        "revertedBlocks": {
          "handler": {
            "type": "stateFromEvent",
            "event": "BlocksRevert",
            "returnParams": [
              "totalBlocksCommitted",
              "totalBlocksVerified",
              "totalBlocksExecuted"
            ]
          }
        },
        // the 3 following allow us to get an array of validators without creating a new handler
        // construnctorArgs._validators u validatorsAdded n validatorsRemoved
        // where u is the union of the 2 sets and n is intersection
        "constructorArgs": {
          "handler": {
            "type": "constructorArgs",
            "nameArgs": true
          }
        },
        "validatorsAdded": {
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "ValidatorAdded",
            "valueKey": "_addedValidator"
          }
        },
        "validatorsRemoved": {
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "ValidatorRemoved",
            "valueKey": "_removedValidator"
          }
        }
      }
    },
    "L1ERC20Bridge": {
      "ignoreRelatives": ["l2Bridge", "l2TokenBeacon"]
    },
    "L1ERC20Bridge_wstETH": {
      "ignoreRelatives": [
        "l1Token",
        "l2Token",
        "l2Bridge",
        "l2TokenAddress",
        "proxy__getAdmin"
      ]
    },
    "LidoAgent": {
      "ignoreDiscovery": true
    }
  }
}
