{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "ethereum",
  "name": "shared-eigenlayer",
  "initialAddresses": [
    "0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
    "0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF",
    "0xec53bF9167f50cDEB3Ae105f56099aaaB9061F83"
  ],
  "names": {
    "0x858646372CC42E1A627fcE94aa7A7033e7CF075A": "StrategyManager",
    "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A": "DelegationManager",
    "0xD92145c07f8Ed1D392c1B88017934E301CC1c3Cd": "Slasher",
    "0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2": "rETH-Strategy",
    "0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d": "ETHx-Strategy",
    "0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc": "cbETH-Strategy",
    "0x93c4b944D05dfe6df7645A86cd2206016c51564D": "stETH-Strategy",
    "0x13760F50a9d7377e4F20CB8CF9e4c26586c658ff": "ankrETH-Strategy",
    "0xa4C637e0F704745D182e4D38cAb7E7485321d059": "OETH-Strategy",
    "0x57ba429517c3473B6d34CA9aCd56c0e735b94c02": "osETH-Strategy",
    "0x0Fe4F44beE93503346A3Ac9EE5A26b130a5796d6": "swETH-Strategy",
    "0x7CA911E83dabf90C90dD3De5411a10F1A6112184": "wBETH-Strategy",
    "0x8CA7A5d6f3acd3A7A8bC468a8CD0FB14B6BD28b6": "sfrxETH-Strategy",
    "0xAe60d8180437b5C34bB956822ac2710972584473": "RiverV1-Strategy",
    "0x298aFB19A105D59E74658C4C334Ff360BadE6dd2": "METH-Strategy",
    "0x8fEb56C8802Bda01F3cC1802D44f6Cb469Ac9B22": "sUSDe-Strategy",
    "0x6075546538c3eFbD607ea6aFC24149fCcFb2edF4": "reALT-Strategy",
    "0x8457CA5040ad67fdebbCC8EdCE889A335Bc0fbFB": "ALT-Strategy",
    "0xaCB55C530Acdb2849e6d4f36992Cd8c9D50ED8F7": "bEIGEN-Strategy",
    "0x00000000219ab540356cBB839Cbe05303d7705Fa": "DepositContract",
    "0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338": "EigenPodManager",
    "0xBE1685C81aA44FF9FB319dD389addd9374383e90": "EigenLayerOperationsMultisig",
    "0x369e6F597e22EaB55fFb173C6d9cD234BD699111": "EigenLayerExecutorMultisig",
    "0xFEA47018D632A77bA579846c840d5706705Dc598": "EigenLayerCommunityMultisig",
    "0xbb00DDa2832850a43840A3A86515E3Fe226865F2": "EigenLayerTokenMultisig",
    "0x343907185b71aDF0eBa9567538314396aa985442": "EigenLayerBeaconOracle",
    "0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF": "AVSDirectory",
    "0xec53bF9167f50cDEB3Ae105f56099aaaB9061F83": "EIGEN token",
    "0x2520C6b2C1FBE1813AB5c7c1018CDa39529e9FF2": "EIGEN Timelock",
    "0x83E9115d334D248Ce39a6f36144aEaB5b3456e75": "bEIGEN token",
    "0xd6EC41E453C5E7dA5494f4d51A053Ab571712E6f": "bEIGEN Timelock",
    "0x0c431C66F4dE941d089625E5B423D00707977060": "PauserRegistry",
    "0x5e4c39ad7a3e881585e383db9827eb4811f6f647": "StrategyFactory",
    "0x0ed6703C298d28aE0878d1b28e88cA87F9662fE9": "StrategiesBeacon",
    "0x7750d328b314EfFa365A0402CcfD489B80B0adda": "RewardsCoordinator",
    "0x708230Be53c08b270F43e068116EBacc4C13F577": "TokenHopper",
    "0xF2eB394c4e04ff19422EB27411f78d00e216a88d": "RewardAllStakersActionGenerator"
  },
  "overrides": {
    "RewardAllStakersActionGenerator": {
      "description": "Generates calldata for the TokenHopper to mint EIGEN and send it to the RewardsCoordinator for distribution to all stakers."
    },
    "TokenHopper": {
      "description": "Minter of the bEIGEN (and thus EIGEN) token. Can execute a predefined payload in predefined intervals (configured by the Owner).",
      "ignoreInWatchMode": ["latestPress", "canPress"],
      "fields": {
        "latestPress": {
          "description": "Timestamp of the latest press. A button-press makes a call (calldata and cooldown are defined by the owner). Anyone can press the button at the defined time intervals.",
          "severity": "LOW"
        },
        "getHopperConfiguration": {
          "description": "Current configuration of the TokenHopper, like calldata executed at each button-press (actionGenerator), target (token) and cooldownSeconds.",
          "severity": "MEDIUM"
        }
      }
    },
    "RewardsCoordinator": {
      "description": "Manages the distribution of rewards (arbitrary tokens, EIGEN) to restakers and commission to operators.",
      "ignoreMethods": [
        "getCurrentClaimableDistributionRoot",
        "getCurrentDistributionRoot",
        "getDistributionRootAtIndex",
        "getDistributionRootsLength",
        "currRewardsCalculationEndTimestamp"
      ]
    },
    "StrategiesBeacon": {
      "description": "UpgradeableBeacon managing the single implementation for all strategies deployed via StrategyFactory."
    },
    "StrategyFactory": {
      "description": "Factory contract for permissionless strategy creation via beacon proxies."
    },
    "bEIGEN token": {
      "ignoreInWatchMode": ["totalSupply"],
      "ignoreMethods": ["getPastTotalSupply", "clock"],
      "fields": {
        "Minters": {
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "IsMinterModified",
            "valueKey": "minterAddress",
            "flagKey": "newStatus"
          }
        },
        "transferRestrictionsDisabledAfter": {
          "description": "Timestamp after which transfer restrictions (whitelist) are disabled. Preset to uint256 max. Restrictions disabled if == 0.",
          "severity": "HIGH"
        }
      }
    },
    "bEIGEN Timelock": {
      "fields": {
        "accessControl": {
          "handler": {
            "type": "accessControl"
          }
        }
      }
    },
    "EIGEN token": {
      "ignoreMethods": ["getPastTotalSupply", "clock"],
      "ignoreInWatchMode": ["totalSupply"],
      "fields": {
        "transferRestrictionsDisabledAfter": {
          "description": "Timestamp after which transfer restrictions (whitelist) are disabled. Preset to uint256 max. Restrictions disabled if == 0.",
          "severity": "HIGH"
        }
      }
    },
    "EIGEN Timelock": {
      "fields": {
        "accessControl": {
          "handler": {
            "type": "accessControl"
          }
        }
      }
    },
    "DepositContract": {
      "ignoreInWatchMode": ["get_deposit_count", "get_deposit_root"]
    },
    "EigenPodManager": {
      "ignoreInWatchMode": ["numPods"]
    },
    "EigenLayerBeaconOracle": {
      "ignoreMethods": ["findBlockRoot", "timestampToBlockRoot"]
    },
    "AVSDirectory": {
      "fields": {
        "avs": {
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "OperatorAVSRegistrationStatusUpdated",
            "valueKey": "avs"
          }
        }
      },
      "ignoreRelatives": ["avs"],
      "ignoreInWatchMode": ["avs"]
    },
    "PauserRegistry": {
      "fields": {
        "pausers": {
          "handler": {
            "type": "arrayFromOneEvent",
            "event": "PauserStatusChanged",
            "valueKey": "pauser",
            "flagKey": "canPause"
          }
        }
      }
    }
  }
}
