{
  "name": "metis",
  "blockNumber": 17272120,
  "configHash": "0x84caa287885c0a7cc1c5a60bf66c91d8ed10675962232fcdd99582495cf112bd",
  "contracts": [
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x081D1101855bD523bA69A9794e0217F0DB6323ff",
      "code": "https://etherscan.deth.net/address/0x081D1101855bD523bA69A9794e0217F0DB6323ff,0x8bF439ef7167023F009E24b21719Ca5f768Ecb36",
      "upgradeability": {
        "type": "resolved delegate proxy",
        "addressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "implementationName": "OVM_L1CrossDomainMessenger",
        "implementation": "0x8bF439ef7167023F009E24b21719Ca5f768Ecb36"
      },
      "values": {
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "owner": "0xDD6FFC7D9a4Fb420b637747edc6456340d12d377",
        "paused": false
      }
    },
    {
      "name": "ChainStorageContainer",
      "address": "0x10739F09f6e62689c0aA8A1878816de9e166d6f9",
      "code": "https://etherscan.deth.net/address/0x10739F09f6e62689c0aA8A1878816de9e166d6f9",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "DEFAULT_CHAINID": 1088,
        "getGlobalMetadata": "0x00000000000000000000000000000000000064636c37000056ddb9",
        "length": 15257,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "owner": "StateCommitmentChain",
        "getGlobalMetadataByChainId": "0x00000000000000000000000000000000000064636c37000056ddb9",
        "lengthByChainId": 15257
      },
      "derivedName": "ChainStorageContainer"
    },
    {
      "name": "ChainStorageContainer",
      "address": "0x38473Feb3A6366757A249dB2cA4fBB2C663416B7",
      "code": "https://etherscan.deth.net/address/0x38473Feb3A6366757A249dB2cA4fBB2C663416B7",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "DEFAULT_CHAINID": 1088,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "owner": "CanonicalTransactionChain"
      }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b",
      "code": "https://etherscan.deth.net/address/0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b,0xa0cfE8Af2AB5C9232714647702DbACf862EA4798",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xa0cfE8Af2AB5C9232714647702DbACf862EA4798",
        "admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"
      },
      "values": {
        "addressmgr": "0x918778e825747a892b17C66fe7D24C618262867d",
        "DEFAULT_CHAINID": 1088,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x081D1101855bD523bA69A9794e0217F0DB6323ff",
        "metis": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e"
      }
    },
    {
      "name": "Metis Multisig",
      "address": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
      "code": "https://etherscan.deth.net/address/0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21,0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
      "upgradeability": {
        "type": "gnosis safe",
        "masterCopy": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552"
      },
      "values": {
        "domainSeparator": "0xfb4b712c4b7702310419a72c040b8486f1f9e8b0b84ae19732273a65d3a840c5",
        "getChainId": 1,
        "getOwners": [
          "0x217fD54d336f710F8aee19572dBfBf0B2297ed69",
          "0xB383E1331dEE29864b68f7D84b0dC289F770d846",
          "0x7a9059F4A6e50090e4f55994d465918200AB4454",
          "0x02058Bb1d98D88087008F2ac1273584591380e3F",
          "0xB961047013F974C5b6B6F8dA4402379525316550",
          "0xa6D8941F935932a531A856C2e48046DA73a1098E"
        ],
        "getThreshold": 4,
        "nonce": 6,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "CanonicalTransactionChain",
      "address": "0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9",
      "code": "https://etherscan.deth.net/address/0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "batches": "0x38473Feb3A6366757A249dB2cA4fBB2C663416B7",
        "DEFAULT_CHAINID": 1088,
        "enqueueGasCost": 60000,
        "enqueueL2GasPrepaid": 1920000,
        "getLastBlockNumber": 17272013,
        "getLastTimestamp": 1684237176,
        "getNextQueueIndex": 26507,
        "getNumPendingQueueElements": 1,
        "getQueueLength": 26508,
        "getTotalBatches": 34919,
        "getTotalElements": 5693533,
        "l2GasDiscountDivisor": 32,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "MAX_ROLLUP_TX_SIZE": 50000,
        "maxTransactionGasLimit": 1100000000,
        "MIN_ROLLUP_TX_GAS": 100000,
        "queue": "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57"
      }
    },
    {
      "name": "",
      "address": "0x5fF5316CD1C015970eEC83D34a69E504B577a5bb",
      "unverified": true,
      "code": "https://etherscan.deth.net/address/0x5fF5316CD1C015970eEC83D34a69E504B577a5bb",
      "upgradeability": {
        "type": "immutable"
      }
    },
    {
      "name": "MVM_CanonicalTransaction",
      "address": "0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a",
      "code": "https://etherscan.deth.net/address/0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a,0xC878771A4ff7466B7be8b59FB8766719AEa8d562",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0xC878771A4ff7466B7be8b59FB8766719AEa8d562",
        "admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"
      },
      "values": {
        "CONFIG_OWNER_KEY": "METIS_MANAGER",
        "getStakeBaseCost": "100000000000000000",
        "getStakeSeqSeconds": 86400,
        "getStakeUnitCost": 0,
        "getTxBatchSize": 9000000,
        "getTxDataSliceCount": 100,
        "getTxDataSliceSize": 90000,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "stakeBaseCost": "100000000000000000",
        "stakeSeqSeconds": 86400,
        "stakeUnitCost": 0,
        "txBatchSize": 9000000,
        "TXDATA_SUBMIT_TIMEOUT": 1800,
        "txDataSliceCount": 100,
        "txDataSliceSize": 90000
      }
    },
    {
      "name": "MVM_DiscountOracle",
      "address": "0x7f6B0b7589febc40419a8646EFf9801b87397063",
      "code": "https://etherscan.deth.net/address/0x7f6B0b7589febc40419a8646EFf9801b87397063",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "CONFIG_OWNER_KEY": "METIS_MANAGER",
        "discount": 0,
        "getDiscount": 0,
        "getMinL2Gas": 200000,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "minL2Gas": 200000
      }
    },
    {
      "name": "Lib_AddressManager",
      "address": "0x918778e825747a892b17C66fe7D24C618262867d",
      "code": "https://etherscan.deth.net/address/0x918778e825747a892b17C66fe7D24C618262867d",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "_1088_MVM_FraudVerifier": "0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb",
        "_1088_MVM_Proposer": "0x9cB01d516D930EF49591a05B09e0D33E6286689D",
        "_1088_MVM_Sequencer": "0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a",
        "_1088_MVM_Sequencer_Wrapper": "0xcDf02971871B7736874E20B8487c019D28090019",
        "BondManager": "0xf51B9C9a1c12e7E48BEC15DC358D0C1f0d7Eb3be",
        "CanonicalTransactionChain": "0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9",
        "ChainStorageContainer_CTC_queue": "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57",
        "L2CrossDomainMessenger": "0x4200000000000000000000000000000000000007",
        "METIS_MANAGER": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "MVM_DiscountOracle": "0x7f6B0b7589febc40419a8646EFf9801b87397063",
        "owner": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "Proxy__MVM_CanonicalTransaction": "0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a",
        "Proxy__MVM_ChainManager": "0xf3d58D1794f2634d6649a978f2dc093898FEEBc0",
        "Proxy__MVM_Verifier": "0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb",
        "Proxy__OVM_L1StandardBridge": "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b",
        "StateCommitmentChain": "0xf209815E595Cdf3ed0aAF9665b1772e608AB9380",
        "undefined_MVM_FraudVerifier": "0x5fF5316CD1C015970eEC83D34a69E504B577a5bb"
      }
    },
    {
      "name": "MToken",
      "address": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
      "code": "https://etherscan.deth.net/address/0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "decimals": 18,
        "isOwner": true,
        "name": "Metis Token",
        "owner": "0x0000000000000000000000000000000000000000",
        "symbol": "Metis",
        "totalSupply": "5410000510000000000000000"
      }
    },
    {
      "name": "ChainStorageContainer",
      "address": "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57",
      "code": "https://etherscan.deth.net/address/0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "DEFAULT_CHAINID": 1088,
        "get": [],
        "getGlobalMetadata": "0x000000000000000000000000000000000000000000000000000000",
        "length": 0,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "owner": "CanonicalTransactionChain",
        "getGlobalMetadataByChainId": "0x000000000000000000000000000000000000000000000000000000",
        "lengthByChainId": 0
      }
    },
    {
      "name": "MVM_Verifier",
      "address": "0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb",
      "code": "https://etherscan.deth.net/address/0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb,0x47b5A78E127Dfd521532Fdca89651c832Acb7e0E",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x47b5A78E127Dfd521532Fdca89651c832Acb7e0E",
        "admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"
      },
      "values": {
        "activeChallenges": 0,
        "challenges": [],
        "CONFIG_OWNER_KEY": "METIS_MANAGER",
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "metis": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
        "minStake": "200000000000000000000",
        "numQualifiedVerifiers": 0,
        "seqStake": 0,
        "verifiers": [],
        "verifyWindow": 0
      }
    },
    {
      "name": "StateCommitmentChain",
      "address": "0xf209815E595Cdf3ed0aAF9665b1772e608AB9380",
      "code": "https://etherscan.deth.net/address/0xf209815E595Cdf3ed0aAF9665b1772e608AB9380",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "batches": "0x10739F09f6e62689c0aA8A1878816de9e166d6f9",
        "DEFAULT_CHAINID": 1088,
        "FRAUD_PROOF_WINDOW": 604800,
        "getLastSequencerTimestamp": 1684237367,
        "getTotalBatches": 15257,
        "getTotalElements": 5692857,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "SEQUENCER_PUBLISH_WINDOW": 12592000,
        "getLastSequencerTimestampByChainId": 1684237367,
        "getTotalBatchesByChainId": 15257,
        "getTotalElementsByChainId": 5692857
      },
      "derivedName": "StateCommitmentChain"
    },
    {
      "name": "MVM_L2ChainManagerOnL1",
      "address": "0xf3d58D1794f2634d6649a978f2dc093898FEEBc0",
      "code": "https://etherscan.deth.net/address/0xf3d58D1794f2634d6649a978f2dc093898FEEBc0,0x7b5AFdA01ef32d95858A22E5fc0a6821A12CDAe5",
      "upgradeability": {
        "type": "EIP1967 proxy",
        "implementation": "0x7b5AFdA01ef32d95858A22E5fc0a6821A12CDAe5",
        "admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"
      },
      "values": {
        "addressmgr": "0x918778e825747a892b17C66fe7D24C618262867d",
        "CONFIG_OWNER_KEY": "METIS_MANAGER",
        "messenger": "0x081D1101855bD523bA69A9794e0217F0DB6323ff"
      }
    },
    {
      "name": "BondManager",
      "address": "0xf51B9C9a1c12e7E48BEC15DC358D0C1f0d7Eb3be",
      "code": "https://etherscan.deth.net/address/0xf51B9C9a1c12e7E48BEC15DC358D0C1f0d7Eb3be",
      "upgradeability": {
        "type": "immutable"
      },
      "values": {
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d"
      }
    }
  ],
  "eoas": [
    "0x02058Bb1d98D88087008F2ac1273584591380e3F",
    "0x217fD54d336f710F8aee19572dBfBf0B2297ed69",
    "0x4200000000000000000000000000000000000007",
    "0x4200000000000000000000000000000000000010",
    "0x7a9059F4A6e50090e4f55994d465918200AB4454",
    "0x9cB01d516D930EF49591a05B09e0D33E6286689D",
    "0xa6D8941F935932a531A856C2e48046DA73a1098E",
    "0xB383E1331dEE29864b68f7D84b0dC289F770d846",
    "0xB961047013F974C5b6B6F8dA4402379525316550",
    "0xcDf02971871B7736874E20B8487c019D28090019",
    "0xDD6FFC7D9a4Fb420b637747edc6456340d12d377"
  ],
  "abis": {
    "0x081D1101855bD523bA69A9794e0217F0DB6323ff": [
      "constructor(address _libAddressManager, string _implementationName)"
    ],
    "0x10739F09f6e62689c0aA8A1878816de9e166d6f9": [
      "constructor(address _libAddressManager, string _owner)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function deleteElementsAfterInclusive(uint256 _index, bytes27 _globalMetadata)",
      "function deleteElementsAfterInclusive(uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "function get(uint256 _index) view returns (bytes32)",
      "function getByChainId(uint256 _chainId, uint256 _index) view returns (bytes32)",
      "function getGlobalMetadata() view returns (bytes27)",
      "function getGlobalMetadataByChainId(uint256 _chainId) view returns (bytes27)",
      "function length() view returns (uint256)",
      "function lengthByChainId(uint256 _chainId) view returns (uint256)",
      "function libAddressManager() view returns (address)",
      "function owner() view returns (string)",
      "function push(bytes32 _object, bytes27 _globalMetadata)",
      "function push(bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "function resolve(string _name) view returns (address)",
      "function setByChainId(uint256 _chainId, uint256 _index, bytes32 _object)",
      "function setGlobalMetadata(bytes27 _globalMetadata)",
      "function setGlobalMetadataByChainId(uint256 _chainId, bytes27 _globalMetadata)"
    ],
    "0x38473Feb3A6366757A249dB2cA4fBB2C663416B7": [
      "constructor(address _libAddressManager, string _owner)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function deleteElementsAfterInclusive(uint256 _index, bytes27 _globalMetadata)",
      "function deleteElementsAfterInclusive(uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "function get(uint256 _index) view returns (bytes32)",
      "function getByChainId(uint256 _chainId, uint256 _index) view returns (bytes32)",
      "function getGlobalMetadata() view returns (bytes27)",
      "function getGlobalMetadataByChainId(uint256 _chainId) view returns (bytes27)",
      "function length() view returns (uint256)",
      "function lengthByChainId(uint256 _chainId) view returns (uint256)",
      "function libAddressManager() view returns (address)",
      "function owner() view returns (string)",
      "function push(bytes32 _object, bytes27 _globalMetadata)",
      "function push(bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "function resolve(string _name) view returns (address)",
      "function setByChainId(uint256 _chainId, uint256 _index, bytes32 _object)",
      "function setGlobalMetadata(bytes27 _globalMetadata)",
      "function setGlobalMetadataByChainId(uint256 _chainId, bytes27 _globalMetadata)"
    ],
    "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x47b5A78E127Dfd521532Fdca89651c832Acb7e0E": [
      "constructor()",
      "event Claim(address sender, uint256 amount)",
      "event Finalize(uint256 cIndex, address sender, uint8 result)",
      "event NewChallenge(uint256 cIndex, uint256 chainID, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) header, uint256 timestamp)",
      "event Penalize(address sender, uint256 stakeLost)",
      "event Reward(address target, uint256 amount)",
      "event SlashSequencer(uint256 chainID, address seq)",
      "event Stake(address verifier, uint256 amount)",
      "event Verify1(uint256 cIndex, address verifier)",
      "event Verify2(uint256 cIndex, address verifier)",
      "event Withdraw(address sender, uint256 amount)",
      "function CONFIG_OWNER_KEY() view returns (string)",
      "function absence_strikes(address) view returns (uint8)",
      "function activeChallenges() view returns (uint256)",
      "function chain_under_challenge(uint256) view returns (uint256)",
      "function challenges(uint256) view returns (address challenger, uint256 chainID, uint256 index, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) header, uint256 timestamp, uint256 numQualifiedVerifiers, uint256 numVerifiers, bool done)",
      "function claim()",
      "function consensus_strikes(address) view returns (uint8)",
      "function decrypt(bytes data, bytes key) pure returns (bytes)",
      "function depositSeqStake(uint256 amount)",
      "function disableWhiteList()",
      "function encrypt(bytes data, bytes key) pure returns (bytes)",
      "function getMerkleRoot(bytes32[] elements) pure returns (bytes32)",
      "function isSufficientlyStaked(address target) view returns (bool)",
      "function isWhiteListed(address verifier) view returns (bool)",
      "function libAddressManager() view returns (address)",
      "function metis() view returns (address)",
      "function minStake() view returns (uint256)",
      "function newChallenge(uint256 chainID, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) header, bytes proposedHash, bytes keyhash)",
      "function numQualifiedVerifiers() view returns (uint256)",
      "function resolve(string _name) view returns (address)",
      "function rewards(address) view returns (uint256)",
      "function seqStake() view returns (uint256)",
      "function setMinStake(uint256 _minStake)",
      "function setThreshold(uint256 absence_threshold, uint256 fail_threshold)",
      "function setVerifyWindow(uint256 window)",
      "function setWhiteList(address verifier, bool allowed)",
      "function verifierStake(uint256 stake)",
      "function verifier_stakes(address) view returns (uint256)",
      "function verifiers(uint256) view returns (address)",
      "function verify1(uint256 cIndex, bytes hash, bytes keyhash)",
      "function verify2(uint256 cIndex, bytes key)",
      "function verifyWindow() view returns (uint256)",
      "function whitelist(address) view returns (bool)",
      "function withdraw(uint256 amount)",
      "function withdrawSeqStake(address to)"
    ],
    "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21": [
      "constructor(address _singleton)"
    ],
    "0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9": [
      "constructor(address _libAddressManager, uint256 _maxTransactionGasLimit, uint256 _l2GasDiscountDivisor, uint256 _enqueueGasCost)",
      "event BatchElementDeleted(address _sender, uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "event BatchPushed(address _sender, uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "event BatchSetted(address _sender, uint256 _chainId, uint256 _index, bytes32 _object)",
      "event BatchesGlobalMetadataSet(address _sender, uint256 _chainId, bytes27 _globalMetadata)",
      "event L2GasParamsUpdated(uint256 l2GasDiscountDivisor, uint256 enqueueGasCost, uint256 enqueueL2GasPrepaid)",
      "event QueueBatchAppended(uint256 _chainId, uint256 _startingQueueIndex, uint256 _numQueueElements, uint256 _totalElements)",
      "event QueueElementDeleted(address _sender, uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "event QueueGlobalMetadataSet(address _sender, uint256 _chainId, bytes27 _globalMetadata)",
      "event QueuePushed(address _sender, uint256 _chainId, tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _object)",
      "event QueueSetted(address _sender, uint256 _chainId, uint256 _index, tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _object)",
      "event SequencerBatchAppended(uint256 _chainId, uint256 _startingQueueIndex, uint256 _numQueueElements, uint256 _totalElements)",
      "event TransactionBatchAppended(uint256 _chainId, uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData)",
      "event TransactionEnqueued(uint256 _chainId, address indexed _l1TxOrigin, address indexed _target, uint256 _gasLimit, bytes _data, uint256 indexed _queueIndex, uint256 _timestamp)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function MAX_ROLLUP_TX_SIZE() view returns (uint256)",
      "function MIN_ROLLUP_TX_GAS() view returns (uint256)",
      "function appendSequencerBatch()",
      "function appendSequencerBatchByChainId()",
      "function batches() view returns (address)",
      "function deleteBatchElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "function enqueue(address _target, uint256 _gasLimit, bytes _data)",
      "function enqueueByChainId(uint256 _chainId, address _target, uint256 _gasLimit, bytes _data)",
      "function enqueueGasCost() view returns (uint256)",
      "function enqueueL2GasPrepaid() view returns (uint256)",
      "function getBatchByChainId(uint256 _chainId, uint256 _index) view returns (bytes32)",
      "function getBatchGlobalMetadataByChainId(uint256 _chainId) view returns (bytes27)",
      "function getLastBlockNumber() view returns (uint40)",
      "function getLastBlockNumberByChainId(uint256 _chainId) view returns (uint40)",
      "function getLastTimestamp() view returns (uint40)",
      "function getLastTimestampByChainId(uint256 _chainId) view returns (uint40)",
      "function getNextQueueIndex() view returns (uint40)",
      "function getNextQueueIndexByChainId(uint256 _chainId) view returns (uint40)",
      "function getNumPendingQueueElements() view returns (uint40)",
      "function getNumPendingQueueElementsByChainId(uint256 _chainId) view returns (uint40)",
      "function getQueueElement(uint256 _index) view returns (tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _element)",
      "function getQueueElementByChainId(uint256 _chainId, uint256 _index) view returns (tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _element)",
      "function getQueueLength() view returns (uint40)",
      "function getQueueLengthByChainId(uint256 _chainId) view returns (uint40)",
      "function getTotalBatches() view returns (uint256 _totalBatches)",
      "function getTotalBatchesByChainId(uint256 _chainId) view returns (uint256 _totalBatches)",
      "function getTotalElements() view returns (uint256 _totalElements)",
      "function getTotalElementsByChainId(uint256 _chainId) view returns (uint256 _totalElements)",
      "function l2GasDiscountDivisor() view returns (uint256)",
      "function lengthBatchByChainId(uint256 _chainId) view returns (uint256)",
      "function libAddressManager() view returns (address)",
      "function maxTransactionGasLimit() view returns (uint256)",
      "function pushBatchByChainId(uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "function pushQueueByChainId(uint256 _chainId, tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _object)",
      "function queue() view returns (address)",
      "function resolve(string _name) view returns (address)",
      "function setBatchByChainId(uint256 _chainId, uint256 _index, bytes32 _object)",
      "function setBatchGlobalMetadataByChainId(uint256 _chainId, bytes27 _globalMetadata)",
      "function setGasParams(uint256 _l2GasDiscountDivisor, uint256 _enqueueGasCost)",
      "function setQueueByChainId(uint256 _chainId, uint256 _index, tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _object)"
    ],
    "0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x7b5AFdA01ef32d95858A22E5fc0a6821A12CDAe5": [
      "constructor()",
      "event PushConfig(uint256 chainid, bytes configs)",
      "event SwitchSeq(uint256 chainid, address wallet, address manager)",
      "function CONFIG_OWNER_KEY() view returns (string)",
      "function addressmgr() view returns (address)",
      "function messenger() view returns (address)",
      "function pushConfig(uint256 _chainId, bytes _configs) payable",
      "function switchSequencer(uint256 _chainId, address wallet, address manager) payable"
    ],
    "0x7f6B0b7589febc40419a8646EFf9801b87397063": [
      "constructor(address _addressManager, uint256 _initialDiscount)",
      "function CONFIG_OWNER_KEY() view returns (string)",
      "function discount() view returns (uint256)",
      "function getDiscount() view returns (uint256)",
      "function getMinL2Gas() view returns (uint256)",
      "function isXDomainSenderAllowed(address _sender) view returns (bool)",
      "function libAddressManager() view returns (address)",
      "function minL2Gas() view returns (uint256)",
      "function processL2SeqGas(address sender, uint256 _chainId) payable",
      "function resolve(string _name) view returns (address)",
      "function setAllowAllXDomainSenders(bool _allowAllXDomainSenders)",
      "function setDiscount(uint256 _discount)",
      "function setMinL2Gas(uint256 _minL2Gas)",
      "function setWhitelistedXDomainSender(address _sender, bool _isWhitelisted)",
      "function xDomainWL(address) view returns (bool)"
    ],
    "0x8bF439ef7167023F009E24b21719Ca5f768Ecb36": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event MessageAllowed(bytes32 indexed _xDomainCalldataHash)",
      "event MessageBlocked(bytes32 indexed _xDomainCalldataHash)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit, uint256 chainId)",
      "event Unpaused(address account)",
      "function allowMessage(bytes32 _xDomainCalldataHash)",
      "function blockMessage(bytes32 _xDomainCalldataHash)",
      "function blockedMessages(bytes32) view returns (bool)",
      "function initialize(address _libAddressManager)",
      "function libAddressManager() view returns (address)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function relayMessage(address _target, address _sender, bytes _message, uint256 _messageNonce, tuple(bytes32 stateRoot, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) stateRootBatchHeader, tuple(uint256 index, bytes32[] siblings) stateRootProof, bytes stateTrieWitness, bytes storageTrieWitness) _proof)",
      "function relayMessageViaChainId(uint256 _chainId, address _target, address _sender, bytes _message, uint256 _messageNonce, tuple(bytes32 stateRoot, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) stateRootBatchHeader, tuple(uint256 index, bytes32[] siblings) stateRootProof, bytes stateTrieWitness, bytes storageTrieWitness) _proof)",
      "function relayedMessages(bytes32) view returns (bool)",
      "function renounceOwnership()",
      "function replayMessage(address _target, address _sender, bytes _message, uint256 _queueIndex, uint32 _oldGasLimit, uint32 _newGasLimit) payable",
      "function replayMessageViaChainId(uint256 _chainId, address _target, address _sender, bytes _message, uint256 _queueIndex, uint32 _oldGasLimit, uint32 _newGasLimit) payable",
      "function resolve(string _name) view returns (address)",
      "function sendMessage(address _target, bytes _message, uint32 _gasLimit) payable",
      "function sendMessageViaChainId(uint256 _chainId, address _target, bytes _message, uint32 _gasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x918778e825747a892b17C66fe7D24C618262867d": [
      "event AddressSet(string indexed _name, address _newAddress, address _oldAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getAddress(string _name) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e": [
      "constructor(address[] minters, uint256 maxSupply)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function addMinter(address minter)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(address target, uint256 amount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function isOwner() view returns (bool)",
      "function mint(address target, uint256 amount)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function removeMinter(address minter)",
      "function renounceOwnership()",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "0xa0cfE8Af2AB5C9232714647702DbACf862EA4798": [
      "constructor()",
      "event ERC20ChainID(uint256 _chainid)",
      "event ERC20DepositInitiated(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _amount, bytes _data)",
      "event ERC20WithdrawalFinalized(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _amount, bytes _data)",
      "event ETHDepositInitiated(address indexed _from, address indexed _to, uint256 _amount, bytes _data, uint256 chainId)",
      "event ETHWithdrawalFinalized(address indexed _from, address indexed _to, uint256 _amount, bytes _data, uint256 chainId)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function addressmgr() view returns (address)",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _l2Gas, bytes _data)",
      "function depositERC20ByChainId(uint256 _chainid, address _l1Token, address _l2Token, uint256 _amount, uint32 _l2Gas, bytes _data) payable",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _l2Gas, bytes _data)",
      "function depositERC20ToByChainId(uint256 _chainid, address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _l2Gas, bytes _data) payable",
      "function depositETH(uint32 _l2Gas, bytes _data) payable",
      "function depositETHByChainId(uint256 _chainId, uint32 _l2Gas, bytes _data) payable",
      "function depositETHTo(address _to, uint32 _l2Gas, bytes _data) payable",
      "function depositETHToByChainId(uint256 _chainId, address _to, uint32 _l2Gas, bytes _data) payable",
      "function deposits(address, uint256, address) view returns (uint256)",
      "function donateETH() payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _data)",
      "function finalizeERC20WithdrawalByChainId(uint256 _chainid, address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _data)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _data)",
      "function finalizeETHWithdrawalByChainId(uint256 _chainid, address _from, address _to, uint256 _amount, bytes _data)",
      "function finalizeMetisWithdrawalByChainId(uint256 _chainid, address _from, address _to, uint256 _amount, bytes _data)",
      "function initialize(address _l1messenger, address _l2TokenBridge, address _metis, address _addressmgr)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function metis() view returns (address)"
    ],
    "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57": [
      "constructor(address _libAddressManager, string _owner)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function deleteElementsAfterInclusive(uint256 _index, bytes27 _globalMetadata)",
      "function deleteElementsAfterInclusive(uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "function get(uint256 _index) view returns (bytes32)",
      "function getByChainId(uint256 _chainId, uint256 _index) view returns (bytes32)",
      "function getGlobalMetadata() view returns (bytes27)",
      "function getGlobalMetadataByChainId(uint256 _chainId) view returns (bytes27)",
      "function length() view returns (uint256)",
      "function lengthByChainId(uint256 _chainId) view returns (uint256)",
      "function libAddressManager() view returns (address)",
      "function owner() view returns (string)",
      "function push(bytes32 _object, bytes27 _globalMetadata)",
      "function push(bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "function resolve(string _name) view returns (address)",
      "function setByChainId(uint256 _chainId, uint256 _index, bytes32 _object)",
      "function setGlobalMetadata(bytes27 _globalMetadata)",
      "function setGlobalMetadataByChainId(uint256 _chainId, bytes27 _globalMetadata)"
    ],
    "0xC878771A4ff7466B7be8b59FB8766719AEa8d562": [
      "constructor()",
      "event AppendBatchElement(uint256 _chainId, uint256 _batchIndex, uint40 _shouldStartAtElement, uint24 _totalElementsToAppend, uint256 _txBatchSize, uint256 _txBatchTime, bytes32 _root)",
      "event SetBatchTxData(address _sender, uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, uint256 _stakeAmount, bool _verified, bool _sequencer)",
      "event VerifierStake(address _sender, uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, uint256 _amount)",
      "function CONFIG_OWNER_KEY() view returns (string)",
      "function TXDATA_SUBMIT_TIMEOUT() view returns (uint256)",
      "function appendSequencerBatchByChainId()",
      "function checkBatchTxHash(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, bytes _data) view returns (bytes32 txHash, bool verified)",
      "function disableWhiteList()",
      "function getBatchTxData(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber) view returns (bytes txData, bool verified)",
      "function getStakeBaseCost() view returns (uint256)",
      "function getStakeCostByBatch(uint256 _chainId, uint256 _batchIndex) view returns (uint256)",
      "function getStakeSeqSeconds() view returns (uint256)",
      "function getStakeUnitCost() view returns (uint256)",
      "function getTxBatchSize() view returns (uint256)",
      "function getTxDataSliceCount() view returns (uint256)",
      "function getTxDataSliceSize() view returns (uint256)",
      "function isWhiteListed(address _verifier) view returns (bool)",
      "function libAddressManager() view returns (address)",
      "function resolve(string _name) view returns (address)",
      "function setBatchTxDataForStake(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, bytes _data, uint256 _leafIndex, uint256 _totalLeaves, bytes32[] _proof)",
      "function setBatchTxDataForVerifier(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, bytes _data)",
      "function setBatchTxDataVerified(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, bool _verified)",
      "function setStakeBaseCost(uint256 _stakeBaseCost)",
      "function setStakeSeqSeconds(uint256 _seconds)",
      "function setStakeUnitCost(uint256 _stakeUnitCost)",
      "function setTxBatchSize(uint256 _size)",
      "function setTxDataSliceCount(uint256 _count)",
      "function setTxDataSliceSize(uint256 _size)",
      "function setWhiteList(address _verifier, bool _allowed)",
      "function stakeBaseCost() view returns (uint256)",
      "function stakeSeqSeconds() view returns (uint256)",
      "function stakeUnitCost() view returns (uint256)",
      "function txBatchSize() view returns (uint256)",
      "function txDataSliceCount() view returns (uint256)",
      "function txDataSliceSize() view returns (uint256)",
      "function verifierStake(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber) payable",
      "function whitelist(address) view returns (bool)",
      "function withdrawStake(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0xf209815E595Cdf3ed0aAF9665b1772e608AB9380": [
      "constructor(address _libAddressManager, uint256 _fraudProofWindow, uint256 _sequencerPublishWindow)",
      "event StateBatchAppended(uint256 _chainId, uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData)",
      "event StateBatchDeleted(uint256 _chainId, uint256 indexed _batchIndex, bytes32 _batchRoot)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function FRAUD_PROOF_WINDOW() view returns (uint256)",
      "function SEQUENCER_PUBLISH_WINDOW() view returns (uint256)",
      "function appendStateBatch(bytes32[] _batch, uint256 _shouldStartAtElement)",
      "function appendStateBatchByChainId(uint256 _chainId, bytes32[] _batch, uint256 _shouldStartAtElement, string proposer)",
      "function batches() view returns (address)",
      "function deleteStateBatch(tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader)",
      "function deleteStateBatchByChainId(uint256 _chainId, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader)",
      "function getLastSequencerTimestamp() view returns (uint256 _lastSequencerTimestamp)",
      "function getLastSequencerTimestampByChainId(uint256 _chainId) view returns (uint256 _lastSequencerTimestamp)",
      "function getTotalBatches() view returns (uint256 _totalBatches)",
      "function getTotalBatchesByChainId(uint256 _chainId) view returns (uint256 _totalBatches)",
      "function getTotalElements() view returns (uint256 _totalElements)",
      "function getTotalElementsByChainId(uint256 _chainId) view returns (uint256 _totalElements)",
      "function insideFraudProofWindow(tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader) view returns (bool _inside)",
      "function insideFraudProofWindowByChainId(uint256 _chainId, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader) view returns (bool _inside)",
      "function libAddressManager() view returns (address)",
      "function resolve(string _name) view returns (address)",
      "function setFraudProofWindow(uint256 window)",
      "function verifyStateCommitment(bytes32 _element, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader, tuple(uint256 index, bytes32[] siblings) _proof) view returns (bool)",
      "function verifyStateCommitmentByChainId(uint256 _chainId, bytes32 _element, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader, tuple(uint256 index, bytes32[] siblings) _proof) view returns (bool)"
    ],
    "0xf3d58D1794f2634d6649a978f2dc093898FEEBc0": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0xf51B9C9a1c12e7E48BEC15DC358D0C1f0d7Eb3be": [
      "constructor(address _libAddressManager)",
      "function isCollateralized(address _who) view returns (bool)",
      "function isCollateralizedByChainId(uint256 _chainId, address _who, address _prop) view returns (bool)",
      "function libAddressManager() view returns (address)",
      "function registerSequencerByChainId(uint256 _chainId, address _sequencer, address _proposer)",
      "function resolve(string _name) view returns (address)"
    ]
  }
}
