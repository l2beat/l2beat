{
  "$schema": "../../../../discovery/schemas/meta.schema.json",
  "contracts": [
    {
      "name": ""
    },
    {
      "name": "BondManager",
      "values": {
        "libAddressManager": {}
      }
    },
    {
      "name": "CanonicalTransactionChain",
      "values": {
        "DEFAULT_CHAINID": {},
        "MAX_ROLLUP_TX_SIZE": {},
        "MIN_ROLLUP_TX_GAS": {},
        "batches": {},
        "enqueueGasCost": {},
        "enqueueL2GasPrepaid": {},
        "getLastBlockNumber": {},
        "getLastTimestamp": {},
        "getNextQueueIndex": {},
        "getNumPendingQueueElements": {},
        "getQueueLength": {},
        "getTotalBatches": {},
        "getTotalElements": {},
        "l2GasDiscountDivisor": {},
        "libAddressManager": {},
        "maxTransactionGasLimit": {},
        "queue": {}
      }
    },
    {
      "name": "ChainStorageContainer",
      "values": {
        "DEFAULT_CHAINID": {},
        "get": {},
        "getGlobalMetadata": {},
        "getGlobalMetadataByChainId": {},
        "length": {},
        "lengthByChainId": {},
        "libAddressManager": {},
        "owner": {}
      }
    },
    {
      "name": "ChainStorageContainer",
      "values": {
        "DEFAULT_CHAINID": {},
        "libAddressManager": {},
        "owner": {}
      }
    },
    {
      "name": "ChainStorageContainer",
      "values": {
        "DEFAULT_CHAINID": {},
        "getGlobalMetadata": {},
        "getGlobalMetadataByChainId": {},
        "length": {},
        "lengthByChainId": {},
        "libAddressManager": {},
        "owner": {}
      }
    },
    {
      "name": "GnosisSafe",
      "values": {
        "VERSION": {},
        "domainSeparator": {},
        "getChainId": {},
        "getOwners": {},
        "getThreshold": {},
        "nonce": {}
      }
    },
    {
      "name": "L1CrossDomainMessenger",
      "values": {
        "libAddressManager": {},
        "owner": {},
        "paused": {}
      }
    },
    {
      "name": "L1StandardBridge",
      "values": {
        "DEFAULT_CHAINID": {},
        "addressmgr": {},
        "l2TokenBridge": {},
        "messenger": {},
        "metis": {}
      }
    },
    {
      "name": "Lib_AddressManager",
      "values": {
        "BondManager": {},
        "CanonicalTransactionChain": {},
        "ChainStorageContainer_CTC_queue": {},
        "L2CrossDomainMessenger": {},
        "METIS_MANAGER": {},
        "MVM_DiscountOracle": {},
        "Proxy__MVM_CanonicalTransaction": {},
        "Proxy__MVM_ChainManager": {},
        "Proxy__MVM_Verifier": {},
        "Proxy__OVM_L1StandardBridge": {},
        "StateCommitmentChain": {
          "description": "Manages the L2 state on Ethereum. L2 state batches can be appended here by proposers.",
          "severity": "HIGH",
          "type": "CODE_CHANGE"
        },
        "_1088_MVM_FraudVerifier": {},
        "_1088_MVM_Proposer": {},
        "_1088_MVM_Sequencer": {},
        "_1088_MVM_Sequencer_Wrapper": {},
        "owner": {},
        "undefined_MVM_FraudVerifier": {}
      }
    },
    {
      "name": "LockingInfo",
      "values": {
        "bridge": {},
        "l1Token": {},
        "l2ChainId": {},
        "l2Token": {},
        "manager": {},
        "maxLock": {},
        "minLock": {},
        "owner": {},
        "rewardPayer": {},
        "totalLocked": {},
        "totalRewardsLiquidated": {}
      }
    },
    {
      "name": "LockingPool",
      "values": {
        "BLOCK_REWARD": {},
        "WITHDRAWAL_DELAY": {},
        "currentBatch": {},
        "escrow": {},
        "exitDelayPeriod": {},
        "mpcAddress": {},
        "owner": {},
        "paused": {},
        "rewardPerBlock": {},
        "sequencers": {},
        "signerUpdateThrottle": {},
        "totalSequencers": {}
      }
    },
    {
      "name": "MToken",
      "values": {
        "decimals": {},
        "name": {},
        "owner": {},
        "symbol": {},
        "totalSupply": {}
      }
    },
    {
      "name": "MVM_CanonicalTransaction",
      "values": {
        "CONFIG_OWNER_KEY": {},
        "TXDATA_SUBMIT_TIMEOUT": {},
        "getStakeBaseCost": {},
        "getStakeSeqSeconds": {},
        "getStakeUnitCost": {},
        "getTxBatchSize": {},
        "getTxDataSliceCount": {},
        "getTxDataSliceSize": {},
        "libAddressManager": {},
        "stakeBaseCost": {},
        "stakeSeqSeconds": {},
        "stakeUnitCost": {},
        "txBatchSize": {},
        "txDataSliceCount": {},
        "txDataSliceSize": {}
      }
    },
    {
      "name": "MVM_DiscountOracle",
      "values": {
        "CONFIG_OWNER_KEY": {},
        "discount": {},
        "getDiscount": {},
        "getMinL2Gas": {},
        "libAddressManager": {},
        "minL2Gas": {}
      }
    },
    {
      "name": "MVM_L2ChainManagerOnL1",
      "values": {
        "CONFIG_OWNER_KEY": {},
        "addressmgr": {},
        "messenger": {}
      }
    },
    {
      "name": "MVM_Verifier",
      "values": {
        "CONFIG_OWNER_KEY": {},
        "activeChallenges": {},
        "challenges": {},
        "libAddressManager": {},
        "metis": {},
        "minStake": {},
        "numQualifiedVerifiers": {},
        "seqStake": {},
        "verifiers": {},
        "verifyWindow": {}
      }
    },
    {
      "name": "Metis Multisig",
      "description": "Can pause, censor, instantly upgrade the bridge and upgrade other critical contracts in the system.",
      "values": {
        "VERSION": {},
        "domainSeparator": {},
        "getChainId": {},
        "getOwners": {
          "description": "Metis Multisig signers as array",
          "severity": "LOW",
          "type": "PERMISSION"
        },
        "getThreshold": {
          "description": "Multisig threshold",
          "severity": "HIGH",
          "type": "PERMISSION"
        },
        "nonce": {}
      }
    },
    {
      "name": "ProxyAdmin",
      "values": {
        "owner": {}
      }
    },
    {
      "name": "StateCommitmentChain",
      "values": {
        "DEFAULT_CHAINID": {},
        "FRAUD_PROOF_WINDOW": {},
        "SEQUENCER_PUBLISH_WINDOW": {},
        "batches": {},
        "getLastSequencerTimestamp": {},
        "getLastSequencerTimestampByChainId": {},
        "getTotalBatches": {},
        "getTotalBatchesByChainId": {},
        "getTotalElements": {},
        "getTotalElementsByChainId": {},
        "libAddressManager": {}
      }
    }
  ]
}
