{
  "name": "termstructure",
  "chain": "ethereum",
  "blockNumber": 20469346,
  "configHash": "0xbc9a459ceb78018e275b623a83c95165762b20ec7e4c2b1a295ea48585cc0e6a",
  "version": 15,
  "contracts": [
    {
      "name": "ZkTrueUp",
      "address": "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
      "proxyType": "EIP2535 diamond proxy",
      "ignoreInWatchMode": [
        "getAccountNum",
        "getBlockNum",
        "getBorrowFeeRate",
        "getFundWeight",
        "getL1RequestNum",
        "getTokenNum"
      ],
      "sinceTimestamp": 1716263903,
      "values": {
        "$immutable": false,
        "$implementation": [
          "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
          "0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A",
          "0x5d8A9DDA649524D1Ce31C204551a93560617D1D3",
          "0xbb629c830a4d153CDE43Cb127b5aff60d1185B8c",
          "0x84283289D7E57a2f5b80ddA065AC99450eB44cb6",
          "0xf1E357A2645dad05FbfbC34ddF6c2D24B9f332B9",
          "0x955cdD2E56Ca2776a101a552A318d28fe311398D",
          "0x0d7598cE7Cd1fA07C2a26c49876F850b0AD66bbC",
          "0x10a73b16f6CD03931484b4Ae69fEDc55E868D295",
          "0x882aBFb2F6A67d36350499991638044e8Bd83a72"
        ],
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "ADMIN_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0xa00d50A40B1635D293c87BA36503bD2504b5D818"]
          },
          "OPERATOR_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0xeBec1D162f8467C0070C190A347Bbc3bFf6d14F8"]
          },
          "COMMITTER_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0x0A4aB40Cc78D34052e1A8F5Bb5BaEb0174aBDe12"]
          },
          "VERIFIER_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0x0A4aB40Cc78D34052e1A8F5Bb5BaEb0174aBDe12"]
          },
          "EXECUTER_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["0x0A4aB40Cc78D34052e1A8F5Bb5BaEb0174aBDe12"]
          }
        },
        "EXPIRATION_PERIOD": 1209600,
        "facetAddresses": [
          "0x09E01425780094a9754B2bd8A3298f73ce837CF9",
          "0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A",
          "0x5d8A9DDA649524D1Ce31C204551a93560617D1D3",
          "0xbb629c830a4d153CDE43Cb127b5aff60d1185B8c",
          "0x84283289D7E57a2f5b80ddA065AC99450eB44cb6",
          "0xf1E357A2645dad05FbfbC34ddF6c2D24B9f332B9",
          "0x955cdD2E56Ca2776a101a552A318d28fe311398D",
          "0x0d7598cE7Cd1fA07C2a26c49876F850b0AD66bbC",
          "0x10a73b16f6CD03931484b4Ae69fEDc55E868D295",
          "0x882aBFb2F6A67d36350499991638044e8Bd83a72"
        ],
        "facets": {
          "0x09E01425780094a9754B2bd8A3298f73ce837CF9": [
            "getFallbackAddress()",
            "setFallbackAddress(address)",
            "diamondCut((address,uint8,bytes4[])[],address,bytes)",
            "facets()",
            "facetFunctionSelectors(address)",
            "facetAddresses()",
            "facetAddress(bytes4)",
            "supportsInterface(bytes4)",
            "owner()",
            "nomineeOwner()",
            "transferOwnership(address)",
            "acceptOwnership()"
          ],
          "0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A": [
            "deposit(address,address,uint128)",
            "forceWithdraw(address)",
            "getAccountAddr(uint32)",
            "getAccountId(address)",
            "getAccountNum()",
            "getDelegatedActions(address,address)",
            "getIsDelegated(address,address,uint256)",
            "getPermitNonce(address)",
            "register(uint256,uint256,address,uint128)",
            "setDelegatee(address,uint256)",
            "withdraw(address,address,uint256)",
            "withdrawWithPermit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
          ],
          "0x5d8A9DDA649524D1Ce31C204551a93560617D1D3": [
            "getAaveV3Pool()",
            "getEvacuVerifier()",
            "getPoseidonUnit2()",
            "getVerifier()",
            "getWETH()",
            "setEvacuVerifier(address)",
            "setVerifier(address)"
          ],
          "0xbb629c830a4d153CDE43Cb127b5aff60d1185B8c": [
            "flashLoan(address,address[],uint256[],bytes)",
            "getFlashLoanPremium()",
            "setFlashLoanPremium(uint16)"
          ],
          "0x84283289D7E57a2f5b80ddA065AC99450eB44cb6": [
            "getFundWeight()",
            "getInsuranceAddr()",
            "getTreasuryAddr()",
            "getVaultAddr()",
            "setFundWeight((uint16,uint16,uint16))",
            "setInsuranceAddr(address)",
            "setTreasuryAddr(address)",
            "setVaultAddr(address)",
            "withdrawProtocolFee(uint8,address,uint256)"
          ],
          "0xf1E357A2645dad05FbfbC34ddF6c2D24B9f332B9": [
            "addCollateral(bytes12,uint128)",
            "forceCancelRollBorrow(bytes12)",
            "forceCancelRollBorrowWithPermit(bytes12,uint256,uint8,bytes32,bytes32)",
            "getBorrowFeeRate()",
            "getHalfLiquidationThreshold()",
            "getHealthFactor(bytes12)",
            "getLiquidationFactor(bool)",
            "getLiquidationInfo(bytes12)",
            "getLoan(bytes12)",
            "getLoanId(uint32,uint32,uint16,uint16)",
            "getRollOverFee()",
            "isActivatedRoller()",
            "liquidate(bytes12,uint128)",
            "removeCollateral(bytes12,uint128)",
            "removeCollateralWithPermit(bytes12,uint128,uint256,uint8,bytes32,bytes32)",
            "repay(bytes12,uint128,uint128,bool)",
            "repayWithPermit(bytes12,uint128,uint128,bool,uint256,uint8,bytes32,bytes32)",
            "resolveLoanId(bytes12)",
            "rollBorrow((bytes12,uint32,uint32,uint128,uint128,address))",
            "rollBorrowWithPermit((bytes12,uint32,uint32,uint128,uint128,address),uint256,uint8,bytes32,bytes32)",
            "rollToAave(bytes12,uint128,uint128)",
            "rollToAaveWithPermit(bytes12,uint128,uint128,uint256,uint8,bytes32,bytes32)",
            "setActivatedRoller(bool)",
            "setBorrowFeeRate(uint32)",
            "setHalfLiquidationThreshold(uint16)",
            "setLiquidationFactor((uint16,uint16,uint16,uint16),bool)",
            "setRollOverFee(uint256)"
          ],
          "0x955cdD2E56Ca2776a101a552A318d28fe311398D": [
            "commitBlocks((uint32,uint64,bytes32,bytes32,bytes32,uint256),(uint32,bytes32,bytes32,uint256,uint16[],bytes)[])",
            "commitEvacuBlocks((uint32,uint64,bytes32,bytes32,bytes32,uint256),(uint32,bytes32,bytes32,uint256,uint16[],bytes)[])",
            "executeBlocks(((uint32,uint64,bytes32,bytes32,bytes32,uint256),bytes[])[])",
            "executeEvacuBlocks(((uint32,uint64,bytes32,bytes32,bytes32,uint256),bytes[])[])",
            "getBlockNum()",
            "getL1Request(uint64)",
            "getL1RequestNum()",
            "getPendingBalances(address,address)",
            "getStoredBlockHash(uint32)",
            "isDepositInL1RequestQueue((uint32,uint16,uint128),uint64)",
            "isEvacuationInL1RequestQueue((uint32,uint16,uint128),uint64)",
            "isForceCancelRollBorrowInL1RequestQueue((uint32,uint16,uint16,uint32),uint64)",
            "isForceWithdrawInL1RequestQueue((uint32,uint16,uint128),uint64)",
            "isRegisterInL1RequestQueue((uint32,bytes20),uint64)",
            "isRollBorrowInL1RequestQueue((uint32,uint16,uint128,uint32,uint16,uint128,uint32,uint32,uint32,uint32),uint64)",
            "revertBlocks((uint32,uint64,bytes32,bytes32,bytes32,uint256)[])",
            "verifyBlocks(((uint32,uint64,bytes32,bytes32,bytes32,uint256),(uint256[2],uint256[2][2],uint256[2],uint256[1]))[])",
            "verifyEvacuBlocks(((uint32,uint64,bytes32,bytes32,bytes32,uint256),(uint256[2],uint256[2][2],uint256[2],uint256[1]))[])"
          ],
          "0x0d7598cE7Cd1fA07C2a26c49876F850b0AD66bbC": [
            "addToken((bool,bool,uint8,uint128,address,address))",
            "getAssetConfig(uint16)",
            "getTokenId(address)",
            "getTokenNum()",
            "isTokenPaused(address)",
            "setMinDepositAmt(address,uint128)",
            "setPaused(address,bool)",
            "setPriceFeed(address,address)",
            "setStableCoin(address,bool)"
          ],
          "0x10a73b16f6CD03931484b4Ae69fEDc55E868D295": [
            "activeSupply(address)",
            "allowance(address,address,address)",
            "balanceOf(address,address)",
            "createTsbToken(uint16,uint32,string,string)",
            "getMaturityTime(address)",
            "getTsbToken(uint16,uint32)",
            "getUnderlyingAsset(address)",
            "redeem(address,address,uint128,bool)",
            "redeemWithPermit(address,address,uint128,bool,uint256,uint8,bytes32,bytes32)"
          ],
          "0x882aBFb2F6A67d36350499991638044e8Bd83a72": [
            "activateEvacuation()",
            "consumeL1RequestInEvacuMode(bytes[])",
            "evacuate((uint32,uint64,bytes32,bytes32,bytes32,uint256),(uint32,bytes32,bytes32,uint256,uint16[],bytes),(uint256[2],uint256[2][2],uint256[2],uint256[1]))",
            "isEvacuMode()",
            "isEvacuted(address,uint16)",
            "refundDeregisteredAddr(address,uint256,uint32)"
          ]
        },
        "getAaveV3Pool": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2",
        "getAccountNum": 53,
        "getBlockNum": [194, 194, 194],
        "getBorrowFeeRate": 10000000,
        "getEvacuVerifier": "0x9c7Df3981A89eD04588907843fe2a6c1BcCc4467",
        "getFallbackAddress": "0x0000000000000000000000000000000000000000",
        "getFlashLoanPremium": 3,
        "getFundWeight": { "treasury": 0, "insurance": 0, "vault": 10000 },
        "getHalfLiquidationThreshold": 10000,
        "getInsuranceAddr": "0x2df3e912aeDe36ea5EaB06232ca3b239a40A8165",
        "getL1RequestNum": [233, 233, 233],
        "getPoseidonUnit2": "0x3B1D7E06a1bFfD89ECd8026CF287C11F6Ec34f0D",
        "getRollOverFee": "10000000000000000",
        "getTokenNum": 78,
        "getTreasuryAddr": "0xB7ef7117FfCa1956249B666D9fdBe182cFbbF5ca",
        "getVaultAddr": "0x23bCad9BFB1378cd45b32525B835F037b673f529",
        "getVerifier": "0x23369A60E5A8f422E38d799eD55e7AD8Ed4A86cE",
        "getWETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "isActivatedRoller": false,
        "isEvacuMode": false,
        "nomineeOwner": "0x0000000000000000000000000000000000000000",
        "owner": "0xa00d50A40B1635D293c87BA36503bD2504b5D818"
      },
      "derivedName": "ZkTrueUp"
    },
    {
      "name": "Verifier",
      "address": "0x23369A60E5A8f422E38d799eD55e7AD8Ed4A86cE",
      "sinceTimestamp": 1716263747,
      "values": { "$immutable": true }
    },
    {
      "name": "VaultMultisig",
      "address": "0x23bCad9BFB1378cd45b32525B835F037b673f529",
      "template": "GnosisSafe",
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1716254495,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x6Ed505e36B8ae1eC730d8b3F4E0125f0F1F78C44",
          "0x83d4814307088732528A53D8DF75fd6F2f5be398",
          "0x50E6298795C412B26e54FdD87825Bc6ffa94B80d",
          "0x85e500dF81F10B539E16Dd717e24C41465D10D82",
          "0x871679A28adDdaB762a8C6Ff010d2D9Ffa38d348",
          "0xa7197E776F2abFCDe1Fa662aBa5A4B86a02f0F93"
        ],
        "$threshold": 4,
        "domainSeparator": "0xcbdbe6506e1cb79232f4c965204bb95931a2e6dbfe5aaf5dd3b10f93d06d404a",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 6 (67%)",
        "nonce": 4,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "InsuranceMultisig",
      "address": "0x2df3e912aeDe36ea5EaB06232ca3b239a40A8165",
      "template": "GnosisSafe",
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1716254831,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x6Ed505e36B8ae1eC730d8b3F4E0125f0F1F78C44",
          "0x83d4814307088732528A53D8DF75fd6F2f5be398",
          "0x50E6298795C412B26e54FdD87825Bc6ffa94B80d",
          "0x85e500dF81F10B539E16Dd717e24C41465D10D82",
          "0x871679A28adDdaB762a8C6Ff010d2D9Ffa38d348",
          "0xa7197E776F2abFCDe1Fa662aBa5A4B86a02f0F93"
        ],
        "$threshold": 4,
        "domainSeparator": "0xa8d496ef58694c5b643be9bfdef2a52066c56fe63e93ee7b0d35bfd3c7385cd5",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 6 (67%)",
        "nonce": 4,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "",
      "address": "0x3B1D7E06a1bFfD89ECd8026CF287C11F6Ec34f0D",
      "unverified": true,
      "sinceTimestamp": 1716263735,
      "values": { "$immutable": true }
    },
    {
      "name": "EvacuationFacet",
      "address": "0x882aBFb2F6A67d36350499991638044e8Bd83a72",
      "sinceTimestamp": 1716263891,
      "values": { "$immutable": true, "isEvacuMode": false },
      "derivedName": "EvacuationFacet"
    },
    {
      "name": "AccountFacet",
      "address": "0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A",
      "sinceTimestamp": 1716263771,
      "values": { "$immutable": true, "getAccountNum": 0 },
      "derivedName": "AccountFacet"
    },
    {
      "name": "RollupFacet",
      "address": "0x955cdD2E56Ca2776a101a552A318d28fe311398D",
      "sinceTimestamp": 1716263831,
      "values": {
        "$immutable": true,
        "getBlockNum": [0, 0, 0],
        "getL1RequestNum": [0, 0, 0]
      },
      "derivedName": "RollupFacet"
    },
    {
      "name": "EvacuVerifier",
      "address": "0x9c7Df3981A89eD04588907843fe2a6c1BcCc4467",
      "sinceTimestamp": 1716263759,
      "values": { "$immutable": true }
    },
    {
      "name": "TermStructureMultisig",
      "address": "0xa00d50A40B1635D293c87BA36503bD2504b5D818",
      "template": "GnosisSafe",
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1716253799,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x6Ed505e36B8ae1eC730d8b3F4E0125f0F1F78C44",
          "0x83d4814307088732528A53D8DF75fd6F2f5be398",
          "0x50E6298795C412B26e54FdD87825Bc6ffa94B80d",
          "0x85e500dF81F10B539E16Dd717e24C41465D10D82",
          "0x871679A28adDdaB762a8C6Ff010d2D9Ffa38d348",
          "0xa7197E776F2abFCDe1Fa662aBa5A4B86a02f0F93"
        ],
        "$threshold": 4,
        "domainSeparator": "0x480cfb113268edb43ba8a78c53a4301e006ab4f5579da686448e4b18647cd2c6",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 6 (67%)",
        "nonce": 9,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "TreasuryMultisig",
      "address": "0xB7ef7117FfCa1956249B666D9fdBe182cFbbF5ca",
      "template": "GnosisSafe",
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1716254159,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x6Ed505e36B8ae1eC730d8b3F4E0125f0F1F78C44",
          "0x83d4814307088732528A53D8DF75fd6F2f5be398",
          "0x50E6298795C412B26e54FdD87825Bc6ffa94B80d",
          "0x85e500dF81F10B539E16Dd717e24C41465D10D82",
          "0x871679A28adDdaB762a8C6Ff010d2D9Ffa38d348",
          "0xa7197E776F2abFCDe1Fa662aBa5A4B86a02f0F93"
        ],
        "$threshold": 4,
        "domainSeparator": "0x06a4de0d5b7b1171090ba38e2dc6ef3c5e2c8219915ef5a272fad0d29f2a9c06",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 6 (67%)",
        "nonce": 5,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    }
  ],
  "eoas": [
    { "address": "0x0000000000000000000000000000000000000000" },
    { "address": "0x0A4aB40Cc78D34052e1A8F5Bb5BaEb0174aBDe12" },
    { "address": "0x50E6298795C412B26e54FdD87825Bc6ffa94B80d" },
    { "address": "0x6Ed505e36B8ae1eC730d8b3F4E0125f0F1F78C44" },
    { "address": "0x83d4814307088732528A53D8DF75fd6F2f5be398" },
    { "address": "0x85e500dF81F10B539E16Dd717e24C41465D10D82" },
    { "address": "0x871679A28adDdaB762a8C6Ff010d2D9Ffa38d348" },
    { "address": "0xa7197E776F2abFCDe1Fa662aBa5A4B86a02f0F93" },
    { "address": "0xeBec1D162f8467C0070C190A347Bbc3bFf6d14F8" }
  ],
  "abis": {
    "0x09E01425780094a9754B2bd8A3298f73ce837CF9": [
      "error DiamondWritable__InvalidInitializationParameters()",
      "error DiamondWritable__RemoveTargetNotZeroAddress()",
      "error DiamondWritable__ReplaceTargetIsIdentical()",
      "error DiamondWritable__SelectorAlreadyAdded()",
      "error DiamondWritable__SelectorIsImmutable()",
      "error DiamondWritable__SelectorNotFound()",
      "error DiamondWritable__SelectorNotSpecified()",
      "error DiamondWritable__TargetHasNoCode()",
      "error ERC165Base__InvalidInterfaceId()",
      "error Ownable__NotOwner()",
      "error Ownable__NotTransitiveOwner()",
      "error Proxy__ImplementationIsNotContract()",
      "error SafeOwnable__NotNomineeOwner()",
      "error UintUtils__InsufficientHexLength()",
      "event DiamondCut(tuple(address target, uint8 action, bytes4[] selectors)[] facetCuts, address target, bytes data)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function acceptOwnership()",
      "function diamondCut(tuple(address target, uint8 action, bytes4[] selectors)[] facetCuts, address target, bytes data)",
      "function facetAddress(bytes4 selector) view returns (address facet)",
      "function facetAddresses() view returns (address[] addresses)",
      "function facetFunctionSelectors(address facet) view returns (bytes4[] selectors)",
      "function facets() view returns (tuple(address target, bytes4[] selectors)[] diamondFacets)",
      "function getFallbackAddress() view returns (address fallbackAddress)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function nomineeOwner() view returns (address)",
      "function owner() view returns (address)",
      "function renounceRole(bytes32 role)",
      "function revokeRole(bytes32 role, address account)",
      "function setFallbackAddress(address fallbackAddress)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferOwnership(address account)"
    ],
    "0x0d7598cE7Cd1fA07C2a26c49876F850b0AD66bbC": [
      "error InvalidZeroAddr(address addr)",
      "error TokenIsNotExist(address notWhitelistedToken)",
      "error TokenIsWhitelisted(address whitelistedToken)",
      "error TokenNumExceedLimit(uint16 newTokenId)",
      "error UintUtils__InsufficientHexLength()",
      "event BaseTokenWhitelisted(address indexed token, uint16 indexed tokenId, tuple(bool isStableCoin, bool isTsbToken, uint8 decimals, uint128 minDepositAmt, address token, address priceFeed) assetConfig)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SetMinDepositAmt(address indexed token, uint128 indexed minDepositAmt)",
      "event SetPaused(address indexed token, bool indexed isPaused)",
      "event SetPriceFeed(address indexed token, address indexed priceFeed)",
      "event SetStableCoin(address indexed token, bool indexed isStableCoin)",
      "event TsbTokenWhitelisted(address indexed tsbToken, uint16 indexed tokenId, tuple(bool isStableCoin, bool isTsbToken, uint8 decimals, uint128 minDepositAmt, address token, address priceFeed) assetConfig, uint32 maturityTime)",
      "function addToken(tuple(bool isStableCoin, bool isTsbToken, uint8 decimals, uint128 minDepositAmt, address token, address priceFeed) assetConfig)",
      "function getAssetConfig(uint16 tokenId) view returns (tuple(bool isStableCoin, bool isTsbToken, uint8 decimals, uint128 minDepositAmt, address token, address priceFeed))",
      "function getTokenId(address token) view returns (uint16)",
      "function getTokenNum() view returns (uint16)",
      "function isTokenPaused(address token) view returns (bool)",
      "function setMinDepositAmt(address token, uint128 minDepositAmt)",
      "function setPaused(address token, bool isPaused)",
      "function setPriceFeed(address token, address priceFeed)",
      "function setStableCoin(address token, bool isStableCoin)"
    ],
    "0x10a73b16f6CD03931484b4Ae69fEDc55E868D295": [
      "error AccountIsNotRegistered(address accountAddr)",
      "error InvalidCaller(address caller, address accountAddr)",
      "error InvalidDepositAmt(uint128 depositAmt, uint128 minDepositAmt)",
      "error InvalidMaturityTime(uint32 maturityTime)",
      "error InvalidSignature(address signer, address expectedSigner)",
      "error InvalidTsbToken(address invalidToken)",
      "error ReentrancyGuard__ReentrantCall()",
      "error SafeCast__ValueDoesNotFit()",
      "error SignatureExpired(uint256 deadline, uint256 currentTime)",
      "error TokenIsNotExist(address notWhitelistedToken)",
      "error TokenIsPaused(address pausedToken)",
      "error TransferFailed(address receiver, uint256 amount, bytes data)",
      "error TsbTokenCreateFailed(string name, string symbol, address underlyingAsset, uint32 maturity)",
      "error TsbTokenIsExist(address existTsbToken)",
      "error TsbTokenIsNotMatured(address tsbToken)",
      "error UintUtils__InsufficientHexLength()",
      "error UnderlyingAssetIsNotExist(uint16 underlyingTokenId)",
      "event Redemption(address indexed caller, address indexed accountAddr, address indexed tsbToken, address underlyingAsset, uint256 amount, bool redeemAndDeposit)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TsbTokenCreated(address indexed tsbToken, address underlyingAsset, uint32 maturity)",
      "function activeSupply(address tsbToken) view returns (uint256)",
      "function allowance(address owner, address spender, address tsbToken) view returns (uint256)",
      "function balanceOf(address account, address tsbToken) view returns (uint256)",
      "function createTsbToken(uint16 underlyingTokenId, uint32 maturityTime, string name, string symbol)",
      "function getMaturityTime(address tsbToken) view returns (uint32)",
      "function getTsbToken(uint16 underlyingTokenId, uint32 maturity) view returns (address)",
      "function getUnderlyingAsset(address tsbToken) view returns (address)",
      "function redeem(address accountAddr, address tsbToken, uint128 amount, bool redeemAndDeposit)",
      "function redeemWithPermit(address accountAddr, address tsbToken, uint128 amount, bool redeemAndDeposit, uint256 deadline, uint8 v, bytes32 r, bytes32 s)"
    ],
    "0x23369A60E5A8f422E38d799eD55e7AD8Ed4A86cE": [
      "function verifyProof(uint256[2] _pA, uint256[2][2] _pB, uint256[2] _pC, uint256[1] _pubSignals) view returns (bool)"
    ],
    "0x23bCad9BFB1378cd45b32525B835F037b673f529": [
      "constructor(address _singleton)"
    ],
    "0x2df3e912aeDe36ea5EaB06232ca3b239a40A8165": [
      "constructor(address _singleton)"
    ],
    "0x5d8A9DDA649524D1Ce31C204551a93560617D1D3": [
      "error InvalidZeroAddr(address addr)",
      "error UintUtils__InsufficientHexLength()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SetEvacuVerifier(address indexed newEvacuVerifier)",
      "event SetVerifier(address indexed newVerifier)",
      "function getAaveV3Pool() view returns (address)",
      "function getEvacuVerifier() view returns (address)",
      "function getPoseidonUnit2() view returns (address)",
      "function getVerifier() view returns (address)",
      "function getWETH() view returns (address)",
      "function setEvacuVerifier(address newEvacuVerifier)",
      "function setVerifier(address newVerifier)"
    ],
    "0x84283289D7E57a2f5b80ddA065AC99450eB44cb6": [
      "error InsufficientPendingBalances(uint256 pendingBalance, uint256 withdrawAmt)",
      "error InvalidFeeRecepient(address feeRecepient)",
      "error InvalidFundWeight(tuple(uint16 treasury, uint16 insurance, uint16 vault) fundWeight)",
      "error InvalidZeroAddr(address addr)",
      "error TokenIsNotExist(address notWhitelistedToken)",
      "error TokenIsPaused(address pausedToken)",
      "error TransferFailed(address receiver, uint256 amount, bytes data)",
      "error UintUtils__InsufficientHexLength()",
      "event ProtocolFeeWithdrawn(address indexed receiver, address token, uint256 amount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SetFundWeight(tuple(uint16 treasury, uint16 insurance, uint16 vault) indexed fundWeight)",
      "event SetInsuranceAddr(address indexed insuranceAddr)",
      "event SetTreasuryAddr(address indexed treasuryAddr)",
      "event SetVaultAddr(address indexed vaultAddr)",
      "function getFundWeight() view returns (tuple(uint16 treasury, uint16 insurance, uint16 vault))",
      "function getInsuranceAddr() view returns (address)",
      "function getTreasuryAddr() view returns (address)",
      "function getVaultAddr() view returns (address)",
      "function setFundWeight(tuple(uint16 treasury, uint16 insurance, uint16 vault) fundWeight)",
      "function setInsuranceAddr(address insuranceAddr)",
      "function setTreasuryAddr(address treasuryAddr)",
      "function setVaultAddr(address vaultAddr)",
      "function withdrawProtocolFee(uint8 receiver, address token, uint256 amount)"
    ],
    "0x882aBFb2F6A67d36350499991638044e8Bd83a72": [
      "error AccountAddrIsNotCaller(address accountAddr, address sender)",
      "error BlockHashIsNotEq(uint32 blockNum, tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp) storedBlock)",
      "error CommitmentInconsistant(uint256 proofCommitment, uint256 committedBlockcommitment)",
      "error ConsumedRequestNumExceedTotalNum(uint256 consumedRequestNum)",
      "error EvacuModeActivated()",
      "error Evacuated(uint32 accountId, uint16 tokenId)",
      "error InsufficientPendingBalances(uint256 pendingBalance, uint256 withdrawAmt)",
      "error InvalidBlockNum(uint32 newBlockNum, uint32 lastBlockNum)",
      "error InvalidBlockTimestamp(uint256 l2BlockTimestamp, uint256 l1BlockTimestamp)",
      "error InvalidBytesLength(uint256 bytesLen, uint256 offset)",
      "error InvalidChunkIdDelta(uint16[] chunkIdDeltas)",
      "error InvalidConsumedPubData(uint64 l1RequestNum, bytes pubData)",
      "error InvalidEvacuatePubDataLength(uint256 pubDataLength)",
      "error InvalidOpType(uint8 opType)",
      "error InvalidProof(tuple(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] commitment) proof)",
      "error InvalidZeroAddr(address addr)",
      "error LastL1RequestIsEvacuation(uint64 totalL1RequestNum)",
      "error NoExecutedL1Request()",
      "error NoL1Request()",
      "error NotConsumedAllL1Requests(uint64 executedL1RequestNum, uint64 totalL1RequestNum)",
      "error NotDeregisteredAddr(address accountAddr, uint32 accountId)",
      "error NotEvacuMode()",
      "error ReentrancyGuard__ReentrantCall()",
      "error TimeStampIsNotExpired(uint256 curTimestamp, uint256 expirationTime)",
      "error TimestampLtPreviousBlock(uint256 newBlockTimestamp, uint256 lastBlockTimestamp)",
      "error TokenIsNotExist(address notWhitelistedToken)",
      "error TokenIsPaused(address pausedToken)",
      "error TransferFailed(address receiver, uint256 amount, bytes data)",
      "event AccountDeregistration(address indexed accountAddr, uint32 indexed accountId)",
      "event EvacuModeActivation()",
      "event Evacuation(address indexed accountAddr, uint32 indexed accountId, address token, uint16 indexed tokenId, uint256 amount)",
      "event L1RequestConsumption(uint64 executedL1RequestNum, uint8 opType, bytes pubData)",
      "function activateEvacuation()",
      "function consumeL1RequestInEvacuMode(bytes[] consumedTxPubData)",
      "function evacuate(tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp) lastExecutedBlock, tuple(uint32 blockNumber, bytes32 newStateRoot, bytes32 newTsRoot, uint256 timestamp, uint16[] chunkIdDeltas, bytes publicData) newBlock, tuple(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] commitment) proof)",
      "function isEvacuMode() view returns (bool)",
      "function isEvacuted(address addr, uint16 tokenId) view returns (bool)",
      "function refundDeregisteredAddr(address token, uint256 amount, uint32 accountId)"
    ],
    "0x8D0fc76595E42f38c771ecEE627DA5654Ca2E75A": [
      "error AccountIsNotRegistered(address accountAddr)",
      "error AccountIsRegistered(address sender)",
      "error AccountNumExceedLimit(uint32 registeredAccountId)",
      "error AmountInconsistent(uint256 amount, uint256 transferredAmt)",
      "error EvacuModeActivated()",
      "error InsufficientPendingBalances(uint256 pendingBalance, uint256 withdrawAmt)",
      "error InvalidBaseTokenAddr(address invalidTokenAddr)",
      "error InvalidCaller(address caller, address accountAddr)",
      "error InvalidDepositAmt(uint128 depositAmt, uint128 minDepositAmt)",
      "error InvalidMsgValue(uint256 msgValue)",
      "error InvalidSignature(address signer, address expectedSigner)",
      "error InvalidTsPublicKey(uint256 tsPubKeyX, uint256 tsPubKeyY)",
      "error ReentrancyGuard__ReentrantCall()",
      "error SafeCast__ValueDoesNotFit()",
      "error SignatureExpired(uint256 deadline, uint256 currentTime)",
      "error TokenIsNotExist(address notWhitelistedToken)",
      "error TokenIsPaused(address pausedToken)",
      "error TransferFailed(address receiver, uint256 amount, bytes data)",
      "event SetDelegatee(address indexed delegator, address indexed delegatee, uint256 delegatedActions)",
      "function deposit(address accountAddr, address token, uint128 amount) payable",
      "function forceWithdraw(address token)",
      "function getAccountAddr(uint32 accountId) view returns (address)",
      "function getAccountId(address accountAddr) view returns (uint32)",
      "function getAccountNum() view returns (uint32)",
      "function getDelegatedActions(address delegator, address delegatee) view returns (uint256)",
      "function getIsDelegated(address delegator, address delegatee, uint256 actionMask) view returns (bool)",
      "function getPermitNonce(address accountAddr) view returns (uint256)",
      "function register(uint256 tsPubKeyX, uint256 tsPubKeyY, address token, uint128 amount) payable",
      "function setDelegatee(address delegatee, uint256 delegatedActions)",
      "function withdraw(address accountAddr, address token, uint256 amount)",
      "function withdrawWithPermit(address accountAddr, address token, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)"
    ],
    "0x955cdD2E56Ca2776a101a552A318d28fe311398D": [
      "error BlockHashIsNotEq(uint32 blockNum, tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp) storedBlock)",
      "error CollateralAmtIsNotEnough(uint128 collateralAmt, uint128 amount)",
      "error CollateralAmtLtLockedCollateralAmt(uint128 collateralAmt, uint128 lockedCollateralAmt)",
      "error CommitmentInconsistant(uint256 proofCommitment, uint256 committedBlockcommitment)",
      "error CommittedRequestNumExceedTotalNum(uint64 committedL1RequestNum)",
      "error DebtAmtLtRepayAmt(uint128 debtAmt, uint128 repayAmt)",
      "error EvacuModeActivated()",
      "error ExecutedBlockNumExceedProvedNum(uint256 pendingBlockNum)",
      "error InvalidBlockNum(uint32 newBlockNum, uint32 lastBlockNum)",
      "error InvalidBlockTimestamp(uint256 l2BlockTimestamp, uint256 l1BlockTimestamp)",
      "error InvalidBytesLength(uint256 bytesLen, uint256 offset)",
      "error InvalidChunkIdDelta(uint16[] chunkIdDeltas)",
      "error InvalidEvacuBlockPubData(uint256 evacuationRequestNum)",
      "error InvalidExecutedBlockNum(uint32 executedBlockNum)",
      "error InvalidMatchedTime(uint32 matchedTime, uint256 blockTimestamp)",
      "error InvalidNewMaturityTime(uint32 newMaturityTime, uint32 oldMaturityTime)",
      "error InvalidOldMaturityTime(uint32 oldMaturityTime, uint256 blockTimestamp)",
      "error InvalidOpType(uint8 opType)",
      "error InvalidProof(tuple(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] commitment) proof)",
      "error InvalidPubDataLength(uint256 pubDataLength)",
      "error InvalidTsbTokenAddr(address invalidTokenAddr)",
      "error InvalidZeroAddr(address addr)",
      "error LockedCollateralAmtIsNotEnough(uint128 lockedCollateralAmt, uint128 amount)",
      "error MaturityTimeIsNotMatched(uint32 tsbTokenMaturityTime, uint32 createTsbReqMaturityTime)",
      "error NotConsumedAllL1Requests(uint64 executedL1RequestNum, uint64 totalL1RequestNum)",
      "error NotEvacuMode()",
      "error OffsetGtPubDataLength(uint256 offset)",
      "error OffsetIsSet(uint256 chunkId)",
      "error OpTypeIsNotMatched(uint8 requestOpType, uint8 expectedOpType)",
      "error OverPublicDataLength(uint256 pubDataLength, uint256 start, uint256 expectedDataLength)",
      "error PendingRollupTxHashIsNotMatched(bytes32 pendingRollupTxHash, bytes32 executeBlockPendingRollupTxHash)",
      "error RemovedCollateralAmtGtLockedCollateralAmt(uint128 removedCollateralAmt, uint128 lockedCollateralAmt)",
      "error SafeCast__ValueDoesNotFit()",
      "error TimestampLtPreviousBlock(uint256 newBlockTimestamp, uint256 lastBlockTimestamp)",
      "error TokenIsNotMatched(address underlyingAsset, address baseToken)",
      "error UintUtils__InsufficientHexLength()",
      "error VerifiedBlockNumExceedCommittedNum(uint256 verifyingBlockNum)",
      "event BlockCommit(uint32 indexed blockNumber, bytes32 indexed commitment)",
      "event BlockExecution(uint32 indexed blockNumber)",
      "event BlockRevert(uint32 indexed blockNumber)",
      "event BlockVerification(uint32 indexed blockNumber)",
      "event EvacuModeDeactivation()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RollBorrowCancel(bytes12 indexed loanId, uint128 removedLockedCollateralAmt)",
      "event RollOver(bytes12 indexed loanId, bytes12 indexed newLoanId, uint128 collateralAmt, uint128 borrowAmt, uint128 debtAmt)",
      "event UpdateLoan(bytes12 indexed loanId, uint128 addedCollateralAmt, uint128 addedDebtAmt)",
      "function commitBlocks(tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp) lastCommittedBlock, tuple(uint32 blockNumber, bytes32 newStateRoot, bytes32 newTsRoot, uint256 timestamp, uint16[] chunkIdDeltas, bytes publicData)[] newBlocks)",
      "function commitEvacuBlocks(tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp) lastCommittedBlock, tuple(uint32 blockNumber, bytes32 newStateRoot, bytes32 newTsRoot, uint256 timestamp, uint16[] chunkIdDeltas, bytes publicData)[] evacuBlocks)",
      "function executeBlocks(tuple(tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp) storedBlock, bytes[] pendingRollupTxPubData)[] pendingBlocks)",
      "function executeEvacuBlocks(tuple(tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp) storedBlock, bytes[] pendingRollupTxPubData)[] evacuBlocks)",
      "function getBlockNum() view returns (uint32, uint32, uint32)",
      "function getL1Request(uint64 requestId) view returns (tuple(uint8 opType, uint32 expirationTime, bytes32 hashedPubData))",
      "function getL1RequestNum() view returns (uint64, uint64, uint64)",
      "function getPendingBalances(address accountAddr, address token) view returns (uint256)",
      "function getStoredBlockHash(uint32 blockNum) view returns (bytes32)",
      "function isDepositInL1RequestQueue(tuple(uint32 accountId, uint16 tokenId, uint128 amount) deposit, uint64 requestId) view returns (bool)",
      "function isEvacuationInL1RequestQueue(tuple(uint32 accountId, uint16 tokenId, uint128 amount) evacuation, uint64 requestId) view returns (bool)",
      "function isForceCancelRollBorrowInL1RequestQueue(tuple(uint32 accountId, uint16 debtTokenId, uint16 collateralTokenId, uint32 maturityTime) forceCancelRollBorrow, uint64 requestId) view returns (bool)",
      "function isForceWithdrawInL1RequestQueue(tuple(uint32 accountId, uint16 tokenId, uint128 amount) forceWithdraw, uint64 requestId) view returns (bool)",
      "function isRegisterInL1RequestQueue(tuple(uint32 accountId, bytes20 tsAddr) register, uint64 requestId) view returns (bool)",
      "function isRollBorrowInL1RequestQueue(tuple(uint32 accountId, uint16 collateralTokenId, uint128 maxCollateralAmt, uint32 feeRate, uint16 borrowTokenId, uint128 maxBorrowAmt, uint32 oldMaturityTime, uint32 newMaturityTime, uint32 expiredTime, uint32 maxPrincipalAndInterestRate) rollBorrow, uint64 requestId) view returns (bool)",
      "function revertBlocks(tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp)[] revertedBlocks)",
      "function verifyBlocks(tuple(tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp) storedBlock, tuple(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] commitment) proof)[] verifyingBlocks)",
      "function verifyEvacuBlocks(tuple(tuple(uint32 blockNumber, uint64 l1RequestNum, bytes32 pendingRollupTxHash, bytes32 commitment, bytes32 stateRoot, uint256 timestamp) storedBlock, tuple(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[1] commitment) proof)[] evacuBlocks)"
    ],
    "0x9c7Df3981A89eD04588907843fe2a6c1BcCc4467": [
      "function verifyProof(uint256[2] _pA, uint256[2][2] _pB, uint256[2] _pC, uint256[1] _pubSignals) view returns (bool)"
    ],
    "0xa00d50A40B1635D293c87BA36503bD2504b5D818": [
      "constructor(address _singleton)"
    ],
    "0xB7ef7117FfCa1956249B666D9fdBe182cFbbF5ca": [
      "constructor(address _singleton)"
    ],
    "0xbb629c830a4d153CDE43Cb127b5aff60d1185B8c": [
      "error ExecuteOperationFailedLogBytes(bytes err)",
      "error ExecuteOperationFailedLogString(string err)",
      "error InputLengthMismatch(uint256 assetLength, uint256 amountLength)",
      "error ReentrancyGuard__ReentrantCall()",
      "error TokenIsNotExist(address notWhitelistedToken)",
      "error TokenIsPaused(address pausedToken)",
      "error UintUtils__InsufficientHexLength()",
      "event FlashLoan(address indexed sender, address indexed receiver, address indexed asset, uint256 amount, uint256 premium)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SetFlashLoanPremium(uint16 indexed flashLoanPremium)",
      "function flashLoan(address receiver, address[] assets, uint256[] amounts, bytes data)",
      "function getFlashLoanPremium() view returns (uint16)",
      "function setFlashLoanPremium(uint16 flashLoanPremium)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xf1E357A2645dad05FbfbC34ddF6c2D24B9f332B9": [
      "error AmountInconsistent(uint256 amount, uint256 transferredAmt)",
      "error BorrowFromAaveFailed(address collateralToken, uint128 collateralAmt, address debtToken, uint128 debtAmt, bytes reason)",
      "error CollateralAmtIsNotEnough(uint128 collateralAmt, uint128 amount)",
      "error CollateralAmtLtLockedCollateralAmt(uint128 collateralAmt, uint128 lockedCollateralAmt)",
      "error DebtAmtLtRepayAmt(uint128 debtAmt, uint128 repayAmt)",
      "error InvalidCaller(address caller, address accountAddr)",
      "error InvalidDepositAmt(uint128 depositAmt, uint128 minDepositAmt)",
      "error InvalidExpiredTime(uint32 expiredTime)",
      "error InvalidLiquidationFactor(tuple(uint16 liquidationLtvThreshold, uint16 borrowOrderLtvThreshold, uint16 liquidatorIncentive, uint16 protocolPenalty) liquidationFactor)",
      "error InvalidMaturityTime(uint32 maturityTime)",
      "error InvalidMsgValue(uint256 msgValue)",
      "error InvalidPrice(int256 price)",
      "error InvalidRollBorrowFee(uint256 rollBorrowFee)",
      "error InvalidSignature(address signer, address expectedSigner)",
      "error InvalidTsbToken(address tsbToken)",
      "error InvalidZeroAddr(address addr)",
      "error LoanIsLocked(bytes12 loanId)",
      "error LoanIsNotExist(bytes12 loanId)",
      "error LoanIsNotHealthy(uint256 healthFactor)",
      "error LoanIsNotLocked(bytes12 loanId)",
      "error LoanIsNotStrictHealthy(uint256 healthFactor)",
      "error LoanIsSafe(uint256 healthFactor, uint32 maturityTime)",
      "error LockedCollateralAmtIsNotEnough(uint128 lockedCollateralAmt, uint128 amount)",
      "error ReentrancyGuard__ReentrantCall()",
      "error RepayAmtExceedsMaxRepayAmt(uint128 repayAmt, uint128 maxRepayAmt)",
      "error RollIsNotActivated()",
      "error SafeCast__ValueDoesNotFit()",
      "error SignatureExpired(uint256 deadline, uint256 currentTime)",
      "error SupplyToAaveFailed(address collateralToken, uint128 collateralAmt, bytes reason)",
      "error TokenIsNotExist(address notWhitelistedToken)",
      "error TokenIsPaused(address pausedToken)",
      "error TransferFailed(address receiver, uint256 amount, bytes data)",
      "error UintUtils__InsufficientHexLength()",
      "event CollateralAdded(bytes12 indexed loanId, address caller, address indexed loanOwner, address collateralToken, uint128 addedCollateralAmt)",
      "event CollateralRemoved(bytes12 indexed loanId, address caller, address indexed loanOwner, address collateralToken, uint128 removedCollateralAmt)",
      "event Liquidation(bytes12 indexed loanId, address indexed liquidator, address collateralToken, uint128 liquidatorReward, uint128 protocolPenalty)",
      "event Repayment(bytes12 indexed loanId, address caller, address indexed loanOwner, address collateralToken, address debtToken, uint128 removedCollateralAmt, uint128 removedDebtAmt, bool repayAndDeposit)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RollBorrowOrderForceCancelPlaced(bytes12 indexed loanId, address caller, address indexed loanOwner)",
      "event RollBorrowOrderPlaced(bytes12 indexed loanId, address caller, address indexed loanOwner, tuple(uint32 accountId, uint16 collateralTokenId, uint128 maxCollateralAmt, uint32 feeRate, uint16 borrowTokenId, uint128 maxBorrowAmt, uint32 oldMaturityTime, uint32 newMaturityTime, uint32 expiredTime, uint32 maxPrincipalAndInterestRate) rollBorrowReq)",
      "event RollToAave(bytes12 indexed loanId, address caller, address indexed loanOwner, address supplyToken, address borrowToken, uint128 collateralAmt, uint128 debtAmt)",
      "event SetActivatedRoller(bool isActivatedRoll)",
      "event SetBorrowFeeRate(uint32 indexed borrowFeeRate)",
      "event SetHalfLiquidationThreshold(uint16 indexed halfLiquidationThreshold)",
      "event SetLiquidationFactor(tuple(uint16 liquidationLtvThreshold, uint16 borrowOrderLtvThreshold, uint16 liquidatorIncentive, uint16 protocolPenalty) indexed liquidationFactor, bool indexed isStableCoinPair)",
      "event SetRollOverFee(uint256 indexed rollOverFee)",
      "function addCollateral(bytes12 loanId, uint128 amount) payable",
      "function forceCancelRollBorrow(bytes12 loanId)",
      "function forceCancelRollBorrowWithPermit(bytes12 loanId, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function getBorrowFeeRate() view returns (uint32)",
      "function getHalfLiquidationThreshold() view returns (uint16)",
      "function getHealthFactor(bytes12 loanId) view returns (uint256)",
      "function getLiquidationFactor(bool isStableCoinPair) view returns (tuple(uint16 liquidationLtvThreshold, uint16 borrowOrderLtvThreshold, uint16 liquidatorIncentive, uint16 protocolPenalty))",
      "function getLiquidationInfo(bytes12 loanId) view returns (bool, address, uint128)",
      "function getLoan(bytes12 loanId) view returns (tuple(uint128 collateralAmt, uint128 lockedCollateralAmt, uint128 debtAmt))",
      "function getLoanId(uint32 accountId, uint32 maturityTime, uint16 debtTokenId, uint16 collateralTokenId) pure returns (bytes12)",
      "function getRollOverFee() view returns (uint256)",
      "function isActivatedRoller() view returns (bool)",
      "function liquidate(bytes12 loanId, uint128 repayAmt) payable returns (uint128, uint128)",
      "function removeCollateral(bytes12 loanId, uint128 amount)",
      "function removeCollateralWithPermit(bytes12 loanId, uint128 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function repay(bytes12 loanId, uint128 collateralAmt, uint128 debtAmt, bool repayAndDeposit) payable",
      "function repayWithPermit(bytes12 loanId, uint128 collateralAmt, uint128 debtAmt, bool repayAndDeposit, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable",
      "function resolveLoanId(bytes12 loanId) pure returns (uint32, uint32, uint16, uint16)",
      "function rollBorrow(tuple(bytes12 loanId, uint32 expiredTime, uint32 maxAnnualPercentageRate, uint128 maxCollateralAmt, uint128 maxBorrowAmt, address tsbToken) rollBorrowOrder) payable",
      "function rollBorrowWithPermit(tuple(bytes12 loanId, uint32 expiredTime, uint32 maxAnnualPercentageRate, uint128 maxCollateralAmt, uint128 maxBorrowAmt, address tsbToken) rollBorrowOrder, uint256 deadline, uint8 v, bytes32 r, bytes32 s) payable",
      "function rollToAave(bytes12 loanId, uint128 collateralAmt, uint128 debtAmt)",
      "function rollToAaveWithPermit(bytes12 loanId, uint128 collateralAmt, uint128 debtAmt, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function setActivatedRoller(bool isActivated)",
      "function setBorrowFeeRate(uint32 borrowFeeRate)",
      "function setHalfLiquidationThreshold(uint16 halfLiquidationThreshold)",
      "function setLiquidationFactor(tuple(uint16 liquidationLtvThreshold, uint16 borrowOrderLtvThreshold, uint16 liquidatorIncentive, uint16 protocolPenalty) liquidationFactor, bool isStableCoinPair)",
      "function setRollOverFee(uint256 rollOverFee)"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0x55dd1039f19d840b39ef504eac8a631b912d707343588aed9ac96bd4e874f837"
  },
  "shapeFilesHash": "0x1b71e6de9b37e27fa623d351c775f0b1129ddf53c2082f7042461e94e2b52e34"
}
