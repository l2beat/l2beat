{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "ethereum",
  "name": "sxnetwork",
  "initialAddresses": [
    "0xa104C0426e95a5538e89131DbB4163d230C35f86" //erc20bridge
  ],
  "names": {
    "0x36c6C69A6186D4475fc5c21181CD980Bd6E5e11F": "RollupProxy",
    "0xa104C0426e95a5538e89131DbB4163d230C35f86": "Bridge",
    "0x73cfa0F6ae141212115657ad91Ad918E5d34d882": "ChallengeManager",
    "0xB360b2f57c645E847148d7C479b7468AbF6F707d": "Outbox",
    "0xD80a805c86C14c879420eC6acb366D04D318fC0C": "SequencerInbox",
    "0x44Ec40D86b4643Bd5110ED07BE188F8473Ad2d3a": "UpgradeExecutor",
    "0x2b0E04Dc90e3fA58165CB41E2834B44A56E766aF": "ValidatorUtils",
    "0xEa83E8907C89Bc0D9517632f0ba081972E328631": "Inbox",
    "0xbe9F61555F50DD6167f2772e9CF7519790d96624": "SXNetwork"
  },
  "overrides": {
    "ValidatorUtils": {
      "fields": {
        "SXNETWORK_STAKERS": {
          "handler": {
            "type": "call",
            "method": "function getStakers(address rollup, uint64 startIndex, uint64 max) view returns (address[], bool hasMore)",
            "args": ["0x36c6C69A6186D4475fc5c21181CD980Bd6E5e11F", 0, 10] // args are RollupProxy address, startIndex, max no. of stakers returned
          }
        }
      },
      "ignoreRelatives": ["SXNETWORK_STAKERS"]
    },
    "ChallengeManager": {
      "ignoreMethods": ["challenges"]
    },
    "RollupProxy": {
      "extends": "orbitstack/RollupProxy"
    },
    "Outbox": {
      "ignoreMethods": ["spent", "isSpent"]
    },
    "Bridge": {
      "ignoreMethods": ["sequencerInboxAccs", "delayedInboxAccs"],
      "ignoreInWatchMode": [
        "delayedMessageCount",
        "sequencerMessageCount",
        "sequencerReportedSubMessageCount"
      ]
    },
    "SequencerInbox": {
      "ignoreMethods": ["inboxAccs"],
      "ignoreInWatchMode": ["batchCount", "totalDelayedMessagesRead"],
      "fields": {
        // getting sequencers from the contract is too complex at the moment
        // so we hardcode it in config .ts
        // this field will notify us in case of changes
        "IS_HARDCODED_SEQUENCER_BATCH_POSTER": {
          "handler": {
            "type": "call",
            "method": "function isBatchPoster(address) external view returns (bool)",
            "args": ["0xf5636Df6f86f31668aeAe9bB8a1C4F0ED147926a"]
          }
        },
        "sequencerVersion": {
          "handler": {
            "type": "arbitrumSequencerVersion"
          }
        },
        // when this changes, it means the sequencers have changed
        "setIsBatchPosterCount": {
          "handler": {
            "type": "eventCount",
            "topics": [
              // event OwnerFunctionCalled(uint256 indexed id);
              "0xea8787f128d10b2cc0317b0c3960f9ad447f7f6c1ed189db1083ccffd20f456e",
              // id == 6 is emitted inside setValidator()
              "0x0000000000000000000000000000000000000000000000000000000000000001"
            ]
          }
        },
        "batchPosters": {
          "target": {
            "role": "Sequencer"
          },
          "handler": {
            "type": "arbitrumActors",
            "actorType": "batchPoster"
          }
        },
        "dacKeyset": {
          "handler": {
            "type": "arbitrumDACKeyset"
          }
        },
        "keySetUpdates": {
          "handler": {
            "type": "eventCount",
            "topics": [
              // SetValidKeyset(bytes32,bytes)
              "0xabca9b7986bc22ad0160eb0cb88ae75411eacfba4052af0b457a9335ef655722"
            ]
          }
        }
      }
    },
    "UpgradeExecutor": {
      "fields": {
        "accessControl": {
          "handler": {
            "type": "accessControl"
          }
        }
      }
    },
    "SXNetwork": {
      "ignoreMethods": ["totalSupply"]
    }
  }
}
