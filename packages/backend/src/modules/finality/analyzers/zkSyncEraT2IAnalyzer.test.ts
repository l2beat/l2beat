import type { Database } from '@l2beat/database'
import type { RpcClient } from '@l2beat/shared'
import { ProjectId, UnixTime } from '@l2beat/shared-pure'
import { expect, mockFn, mockObject } from 'earl'
import { zkSyncEraT2IAnalyzer } from './zkSyncEraT2IAnalyzer'

describe(zkSyncEraT2IAnalyzer.name, () => {
  describe(zkSyncEraT2IAnalyzer.prototype.analyze.name, () => {
    it('correctly decode and returns correct data', async () => {
      const ethRpc = mockObject<RpcClient>({
        getTransaction: mockFn().resolvesTo({
          data: RAW_DATA,
        }),
      })
      const l2Rpc = mockObject<RpcClient>({
        query: mockFn().resolvesTo({
          result: ['0x3734a49', '0x37351c4'],
        }),
        getBlock: getBlockResponses(L2_BLOCKS),
      })
      const l1Timestamp = 1742370779
      const analyzer = new zkSyncEraT2IAnalyzer(
        ethRpc,
        mockObject<Database>(),
        ProjectId('zksync2'),
        l2Rpc,
      )
      const tx = { txHash: '0x121', timestamp: UnixTime(l1Timestamp) }
      const previousTx = tx // not used
      const result = await analyzer.analyze(previousTx, tx)
      expect(result).toEqualUnsorted(L2_BLOCKS)
    })
  })
})

const L2_BLOCKS = [
  { blockNumber: 57887305, timestamp: 1742362203 },
  { blockNumber: 57889220, timestamp: 1742365803 },
]

function getBlockResponses(
  blocks: { blockNumber: number; timestamp: number }[],
) {
  let fun = mockFn()
  for (const block of blocks) {
    fun = fun.given(block.blockNumber, false).resolvesToOnce({
      number: block.blockNumber,
      timestamp: block.timestamp,
    })
  }
  return fun
}

// real data from https://etherscan.io/tx/0x90d62ade54338c6f0bcebd0bee66de7eff8a8fca056b7f5dcc72cea82c7ebffd
const RAW_DATA =
  '0xe12a6137000000000000000000000000000000000000000000000000000000000000014400000000000000000000000000000000000000000000000000000000000799470000000000000000000000000000000000000000000000000000000000079947000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000008010000000000000000000000000000000000000000000000000000000000000799469a1cec1ca397b08d5eff82dee750fe7afe36cabb16605259e106cbf2cd3e04ba00000000000000000000000000000000000000000000000000000000169132760000000000000000000000000000000000000000000000000000000000000001147fb799cde8cbe448218681618fe2d0a6f308b8b78fd2207cee4a732cd63e8a5177d69f4fac9d2f6f528fe674b00c0ead04dd762de52cf061c8bcacd31c657a0000000000000000000000000000000000000000000000000000000067da484779390258e3c2a55dbd36e0f97777eac36078d1fdaab0a49293161d8af2cf442100000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000799470b91f195d42f13fce7238d206d26ad6f83b1e66bb56d2abc40b18f1a48e1919900000000000000000000000000000000000000000000000000000000169138e200000000000000000000000000000000000000000000000000000000000000037dcecc2c2ed0dc25f1b11fc3355ba3934480f7a775b57cbdeada3eccef175316595e6e2fd4f0fdf86c7578978a5bf3810fbcd0d8041fb627192ae2e7e6264c950000000000000000000000000000000000000000000000000000000067da565bf4024b487c1f93086100747b67e547f8c1f5cf21eeef76972e38ba5147d80f33000000000000000000000000000000000000000000000000000000000000002c18568193601b06dc5da5601e72f6a546b7103c72996d5a2fa25b5fe13a98f8130a200983c3ebc0151a2f3ff1db84cd069d148da9b8feaf8b688a7b41e08766fc0e594302b36fbe207fc1e88278f020b0009d7fb67fd18668e183e7fcd2f7b9321020bde1668752b9761bd2ea87a74383adb237b2bf3a382a70455cc6ac34e67702c9d64fd76ab8f64753ec325d073e6aee382ebbff6b1b6241d2b211d674cd88291baa1c3564c943c812c66b74b29ac47f115603628babc926564fdda7ce42af211758725411537d1bde8f8a3ef576fb26dd9c870412a8b46f696efb66264f7f09c430294bf63e663a1caa5b5eade0a5cdecc0c74ca77787bad2e8786cd687772d10f1e75959ea7b77b9b290cc7fc4722e607e69a91253898103ef0db440f1ad10f056b7deb778139c23a3efbb1df3b69111dbb573aa828002c27a31a0aad200062e13da64c2b0f4ff491b806922df371815a625399c7c37faf3ab0627d8b0fc121f268016d6f36cb2d0d9b99e2de588a1b5d98fc300980d04e54f1ce35621400b6b8661cbfb3f7fc1be0d59c9b4edf51b993f83cb48dc831bef63e1d778435a1726336f210c78c566a1db8fd19b0c641f62711f2094b3af07d44614ddb8ccda11303cffdc264c4e1d73348a4b2a4f89164f4e79177c2b33fb87877bda38c6b12d9ab3d1d3c92c2445af94f49962b9dad4528ed05a63afc50b4f975d2f1812910152fe977537b1eb6874566981d2a285a2914afd1b034185d7920679c99f384c14edeb6d8f4836d7f2522a6b1804f9e170cbaf260a08cd7c54a7cd79c259b02c2638b88921708179879fac082839acff02eb550c30f03b051a62fc4ddb4b02ba2bb07bdd3736de406c9b14271bb806d0b580f64ee6d4bffd66a66b6aa17afc6d12ebe643494f51e880b2b1fc818d00a25ef976cb8eeeefaaad2f3e5d01692053192d65ffef119f515d3915501fc5e079b46c2f33d0cb422ec40b49d0790c3ff81eb7a158fb02d900a602e13063de456a74bae3953c4c746d0510dd9513abf17a0932d8fd3c8e0be3253d6c8fb9c2814b0ecb70a772c32d075cbb1af6be9a39941403a7d3200ab637753d803bf9c14540980df25aade87f70a52b6449a9686f4501a7d3d568c5ec7a1d2a42aa5b7ef97f6924fdc915a7b094a3204d9098a2990e19590b8337e381404e8bf52fa05ae6fc8e7e0e495d0960b847dec3bd046dd2111e7e26ab780ca5b66a4847e185448f29e666d884d7a4a3cd2650bf4cf69dad01215e883052d04d24e84e0219d3893db253bb4f7e11f50a25fcf28a738e808d5c1d4d983f581328e563983995ad5519296f6448a8039b7ed67be5e35a29e13aed0249c6ab92d4617907e6cdd9ff2a4ac7b8e92ca08057859a15744f10662eac611197ded1dd5c6097536074558820c99cb985eb1099c87a53c7f81b369466c50520273b5373b8832b117224038f1efff20b7399593ec5d76a57581615f87ae55113e6b85bb65c787ecd92c9e475b5900d1e887593ea368182fb65c52ad10c54192cdb5720d321bace446a0fc8e0a8fa19d6773cff4dcb2ec0faa50ee24852ee2f1bfd433f178c2226de1d64f0dbcdc3a18e8bbd243053bd4a05f5e8be1ace5b1923310c129c49720176229994691d6d51fba73f87528a7e07b885fd1c88d9d2402163f75b55cede86577fc34e0bf9684b0a55ecff5921d4fdc3d528902495a30b2d66f45fac62db4e2a51a303a1a0e370f29233ef3c29fc21721b257bd998e546276b9efd28ad01c08ead2f4bd86d198874f54b38917b19db3b88b692833635cd03b9a832ac98453cffb0144c311cd2b25b9877df991e77e00a9a4972b78894891563caaa098acafdd8d056ea8263439b1748ff176b5224062cb054ce3dcf40720ec53b54d638d14709b45b2ae6440e8989b2bb7817c81e4cda2af7694914afc32625332d4bc538b6a7ff5267ea7bc556af3361270a1e6460f1b69e8eb5574be600000000000000000000000000000000000000000000000000000000000000'
