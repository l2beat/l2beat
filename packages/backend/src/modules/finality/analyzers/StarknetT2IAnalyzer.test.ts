import { ProjectId, UnixTime } from '@l2beat/shared-pure'
import { expect, mockFn, mockObject } from 'earl'

import { Database } from '@l2beat/database'
import { RpcClient } from '../../../peripherals/rpcclient/RpcClient'
import { StarknetClient } from '../../../peripherals/starknet/StarknetClient'
import { StarknetT2IAnalyzer } from './StarknetT2IAnalyzer'

describe(StarknetT2IAnalyzer.name, () => {
  describe(StarknetT2IAnalyzer.prototype.analyze.name, () => {
    it('should return timestamp differences between l1 and l2 blocks', async () => {
      const TX_HASH =
        '0x8063b9ceea01ba171e08f3ac2771f30ca1784ed3bf08c326102d13da22651005'
      const L1_TIMESTAMP = 1800000000

      /**
       * @see mockBytesResponse
       */
      const L2_BLOCK = 766901
      const L2_TIMESTAMP = 1712099039

      const l2Client = mockObject<StarknetClient>({
        getBlock: mockFn().resolvesTo({
          timestamp: L2_TIMESTAMP,
        }),
      })

      const projectId = ProjectId('scroll')
      const rpcClient = mockObject<RpcClient>({
        getTransaction: mockFn().resolvesTo({
          data: mockBytesResponse,
        }),
      })

      const analyzer = new StarknetT2IAnalyzer(
        rpcClient,
        mockObject<Database>({}),
        projectId,
        l2Client,
      )

      const tx = { txHash: TX_HASH, timestamp: new UnixTime(L1_TIMESTAMP) }
      const previousTx = tx // not used
      const result = await analyzer.analyze(previousTx, tx)

      expect(result).toEqual([
        {
          blockNumber: 766901,
          timestamp: L2_TIMESTAMP,
        },
      ])
      expect(l2Client.getBlock).toHaveBeenNthCalledWith(1, L2_BLOCK)
    })
  })
})

/**
 * Input of an actual transcation under hash `0x8063b9ceea01ba171e08f3ac2771f30ca1784ed3bf08c326102d13da22651005`
 **/
const mockBytesResponse =
  '0x507ee52800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000001e02f9c66d2947f0fe3c2c2fdabfb0b80107308d0fbbd94c8744303ba5649ac3ee0405bed5cd93ac23529087705233800dad7022044100ceaff08314ee9467da4900000000000000000000000000000000000000000000000000000000000bb3b500000000000000000000000000000000000000000000000000000000000bb3f007ad83bd11350a7e16eb93fb9ac3b2918294cc83e4448683cc81cf4132eb89eb0026f614b50536fe375d6d1717c31901e4ba94ae2d9d47083d97481e2b7e387101e324682835e60c4779a683b32713504aed894fd73842f7d05b18e7bd29cd7005ba2078240f1585f96424c2d1ee48211da3b3f9177bf2b9880b4fc91d59e9a20000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003169623c1a7d709b4c3790a2c54be8e9f13d6ecca5895775b0b123966db911800000000000000000000000000000000000000000000000000000000000000020000000000000000249102ca40cfc71b76b6294a928214376f377f4f224032830000000000000000b5c17ca1b0f13ab98b9442207741fee3c595208a01be2d93000000000000000063a7b5443256e92c7ead3c4e7cb6c7924928fe3db6556ef70000000000000000acf33383a7eae386a9532ea38363be76ab5414fddab9ce15000000000000000000000000000000006f5b3a9335f707ae467f82f81133c3930000000000000000000000000000000002bfb0989d5d2b52e24c42a31523de19000000000000000000000000000000004d7f3cb6463adfd987be14ce7356f10700000000000000000000000000000000657e2cbb1068c2b050c30ac8bed101cb000000000000000000000000000000000000000000000000000000000000000805cd48fccbfd8aa2773fe22c217e808319ffcc1c5a6a463f7d8fa2da48218196000000000000000000000000f6080d9fbeebcd44d89affbfd42f098cbff928160000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025ef9386a96bde9bb47be826155efae7722148c0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000045d964b800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000030a2409f27aadb9353777fb0a27e27b012db7dc38998f882b0d050666d84490e361c1e762ff2f243b39f038d4fd7ea3ebb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030951f38b002a7436936998072ee55295203357fb3ff710fb1692bd659fd8110b73ad01773f5b7be230369d6eec485000f00000000000000000000000000000000'
