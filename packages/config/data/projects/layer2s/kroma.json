{"type":"layer2","id":"kroma","badges":["EVM","EthereumBlobs","OPStack","Superchain"],"display":{"name":"Kroma","slug":"kroma","description":"Kroma aims to develop an universal ZK Rollup based on the Optimism Bedrock architecture. Currently, Kroma operates as an Optimistic Rollup with ZK fault proofs, utilizing a zkEVM based on Scroll.","purposes":["Universal"],"category":"Optimistic Rollup","provider":"OP Stack","links":{"websites":["https://kroma.network/"],"apps":["https://kroma.network/bridge/"],"documentation":["https://docs.kroma.network/","https://specs.kroma.network/"],"explorers":["https://kromascan.com/","https://blockscout.kroma.network/"],"repositories":["https://github.com/kroma-network/"],"socialMedia":["https://discord.com/invite/kroma-network","https://twitter.com/kroma_network","https://medium.com/@kroma-network"]},"activityDataSource":"Blockchain RPC","liveness":{"warnings":{"stateUpdates":"Please note, for Optimistic rollups the state is not finalized until the challenge period passes."},"explanation":"Kroma is an Optimistic rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted within a tx batch on L1 that links to a previous finalized batch. If the previous batch is missing, transaction finalization can be delayed up to 12h or until it gets published. The state root gets finalized 7d after it has been posted."},"finality":{"warnings":{"timeToInclusion":{"sentiment":"neutral","value":"It's assumed that transaction data batches are submitted sequentially."}},"finalizationPeriod":604800}},"chainConfig":{"name":"kroma","chainId":255,"explorerUrl":"https://kromascan.com","explorerApi":{"url":"https://api.kromascan.com/api","type":"etherscan"},"multicallContracts":[],"minTimestampForTvl":1693882800},"config":{"escrows":[{"address":"0x31F648572b67e60Ec6eb8E197E1848CC5F5558de","newVersion":true,"sinceTimestamp":1693880555,"tokens":["ETH"],"contract":{"address":"0x31F648572b67e60Ec6eb8E197E1848CC5F5558de","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x381F53695230BAF83a39D1a08304D233A35730Fa"]},"chain":"ethereum","description":"Main entry point for users depositing ETH."},"chain":"ethereum","includeInTotal":true},{"address":"0x827962404D7104202C5aaa6b929115C8211d9596","newVersion":true,"sinceTimestamp":1693880555,"tokens":"*","contract":{"address":"0x827962404D7104202C5aaa6b929115C8211d9596","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x404133EdF24F56b7dD9c6d89Fb56bb35244461B4"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 token that do not require custom gateway."},"chain":"ethereum","includeInTotal":true},{"address":"0x7e1Bdb9ee75B6ef1BCAAE3B1De1c616C7B11ef6e","newVersion":true,"sinceTimestamp":1700122827,"tokens":["USDC"],"contract":{"address":"0x7e1Bdb9ee75B6ef1BCAAE3B1De1c616C7B11ef6e","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x22605A12cB77Fe420B0cC1263cEb58a77352FDc1"],"implementations":["0xE4e9F3AD8A6F224c4b39854D3550AD258441AfE3"]},"chain":"ethereum","description":"Main entry point for users depositing USDC."},"chain":"ethereum","includeInTotal":true}],"transactionApi":{"type":"rpc","defaultUrl":"https://api.kroma.network","defaultCallsPerMinute":1500,"startBlock":1},"trackedTxs":[{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"transfer","from":"0x41b8cD6791De4D8f9E0eaF7861aC506822AdcE12","to":"0xfF00000000000000000000000000000000000255","sinceTimestamp":1693883663}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0x180c77aE51a9c505a43A2C7D81f8CE70cacb93A6","selector":"0x5a045f78","functionSignature":"function submitL2Output(bytes32 _outputRoot,uint256 _l2BlockNumber,bytes32 _l1BlockHash,uint256 _l1BlockNumber)","sinceTimestamp":1693880579}}],"finality":{"type":"OPStack","lag":0,"stateUpdate":"disabled"}},"dataAvailability":{"layer":{"value":"Ethereum (blobs or calldata)","sentiment":"good","description":"The data is posted to Ethereum as calldata or blobs."},"bridge":{"value":"Enshrined","sentiment":"good","description":"The validating bridge has access to all the data, as it is posted on chain."},"mode":"Transaction data"},"riskView":{"stateValidation":{"value":"Fraud proofs (INT, ZK)","description":"Fraud proofs allow actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve. ZK proofs are used to adjudicate the correctness of the last step. The challenge protocol can be subject to delay attacks and can fail under certain conditions. The current system doesn't use posted L2 txs batches on L1 as inputs to prove a fault, meaning that DA is not enforced.","sentiment":"bad","definingMetric":null,"secondLine":"7d challenge period"},"dataAvailability":{"value":"Onchain","description":"All of the data needed for proof construction is published on Ethereum L1.","sentiment":"good","definingMetric":null,"sources":[{"contract":"KromaPortal","references":["https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#430"]}]},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","definingMetric":-604800,"sources":[{"contract":"KromaPortal","references":["https://etherscan.io/address/0x31F648572b67e60Ec6eb8E197E1848CC5F5558de"]}]},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 12h delay on this operation.","sentiment":"good","definingMetric":43200,"sources":[{"contract":"KromaPortal","references":["https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#430"]}]},"proposerFailure":{"value":"Self propose","description":"Anyone can be a Proposer and propose new roots to the L1 bridge.","sentiment":"good","sources":[{"contract":"L2OutputOracle","references":["https://etherscan.io/address/0x14126FFa3889a026A79F0f99FaE80B3dc9E38095#code#F1#L197"]}]},"destinationToken":{"value":"Native & Canonical","description":"ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.","sentiment":"good"},"validatedBy":{"value":"Ethereum","description":"Smart contracts on Ethereum validate all bridge transfers.","sentiment":"good"}},"stage":{"stage":"Stage 0","missing":{"nextStage":"Stage 1","requirements":["The proof system is still under development.","Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."]},"summary":[{"stage":"Stage 0","requirements":[{"satisfied":true,"description":"The project calls itself a rollup."},{"satisfied":true,"description":"State roots are posted to Ethereum L1."},{"satisfied":true,"description":"Inputs for the state transition function are posted to Ethereum L1."},{"satisfied":true,"description":"A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/kroma-network/kroma)"}]},{"stage":"Stage 1","requirements":[{"satisfied":false,"description":"The proof system is still under development."},{"satisfied":true,"description":"There are at least 5 external actors who can submit fraud proofs."},{"satisfied":true,"description":"Users are able to exit without the help of the permissioned operators."},{"satisfied":false,"description":"Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."},{"satisfied":true,"description":"The Security Council is properly set up."}]},{"stage":"Stage 2","requirements":[{"satisfied":true,"description":"Fraud proof submission is open to everyone."},{"satisfied":false,"description":"Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."},{"satisfied":false,"description":"The Security Council's actions are not confined to on-chain provable bugs."}]}]},"technology":{"stateCorrectness":{"name":"Fraud Proofs ensure state correctness","description":"Kroma uses an interactive fraud proof system to find a single block of disagreement, which is then ZK proven. The zkEVM used is based on Scroll.        Once the single block of disagreement is found, the challenger is required to present ZK proof of the fraud. When the proof is validated, the incorrect        state output is deleted. The Security Council can always override the result of the challenge, it can also delete any L2 state root at any time. If        the malicious attester and challenger collude and are willing to spend bonds, they can perform a delay attack by engaging in continuous challenge        resulting in lack of finalization of the L2 state root on L1. The protocol can also fail under certain conditions.","references":[{"text":"Colosseum.sol#L300 - Etherscan source code, createChallenge function","href":"https://etherscan.io/address/0xb87eaB624EE684C1799f1E8b24936A1c90759eEc#code#F1#L300"},{"text":"Colosseum.sol#L378 - Etherscan source code, bisect function","href":"https://etherscan.io/address/0xb87eaB624EE684C1799f1E8b24936A1c90759eEc#code#F1#L378"},{"text":"Colosseum.sol#L434 - Etherscan source code, proveFault function","href":"https://etherscan.io/address/0xb87eaB624EE684C1799f1E8b24936A1c90759eEc#code#F1#L434"},{"text":"KROMA-020: lack of validation segments and proofs in Colosseum.sol - ChainLight security audit","href":"https://drive.google.com/file/d/13TUxZ9KPyvUXNZGddALcJLin-xmp_Fkj/view"}],"risks":[{"category":"Withdrawals can be delayed if","text":"the fraud proof system is under a delay attack."},{"category":"Funds can be lost if","text":"the cryptography is broken or implemented incorrectly."}]},"dataAvailability":{"name":"All transaction data is recorded on chain","description":"All executed transactions are submitted to an on chain smart contract. The execution of the rollup is based entirely on the submitted transactions, so anyone monitoring the contract can know the correct state of the rollup chain.","risks":[],"references":[{"text":"Derivation: Batch Submission - Kroma specs","href":"https://specs.kroma.network/glossary.html#batch-submission"},{"text":"BatchInbox - Etherscan address","href":"https://etherscan.io/address/0xff00000000000000000000000000000000000255"},{"text":"KromaPortal.sol#L430 - Etherscan source code, depositTransaction function","href":"https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#L430"}]},"operator":{"name":"The system has a centralized sequencer","description":"While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"text":"SystemConfig - batcher address","href":"https://etherscan.io/address/0x3971EB866AA9b2b8aFEa8a7C816F3b7e8b195a35#readProxyContract#F3"}]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly.","risks":[],"references":[{"text":"Sequencing Window - Kroma specs","href":"https://specs.kroma.network/glossary.html#sequencing-window"},{"text":"KromaPortal.sol#430 - Etherscan source code, depositTransaction function","href":"https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#L430"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization takes a challenge period of 7d to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.","risks":[],"references":[{"text":"KromaPortal.sol#L241 - Etherscan source code, proveWithdrawalTransaction function","href":"https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#L241"},{"text":"KromaPortal.sol#L324 - Etherscan source code, finalizeWithdrawalTransaction function","href":"https://etherscan.io/address/0x381F53695230BAF83a39D1a08304D233A35730Fa#code#F1#L324"}]},{"name":"Autonomous exit","description":"Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.","risks":[],"references":[]}],"otherConsiderations":[{"name":"EVM compatible smart contracts are supported","description":"OP stack chains are pursuing the EVM Equivalence model. No changes to smart contracts are required regardless of the language they are written in, i.e. anything deployed on L1 can be deployed on L2.","risks":[],"references":[{"text":"Introducing EVM Equivalence","href":"https://medium.com/ethereum-optimism/introducing-evm-equivalence-5c2021deb306"}]}]},"stateDerivation":{"nodeSoftware":"Kroma nodes source code, including full node, proposer and validator, can be found [here](https://github.com/kroma-network/kroma). Also, the geth server, source maintained [here](https://github.com/kroma-network/go-ethereum), is a fork of go-ethereum. For more details on how they are different from the Optimism implementation, see [here](https://github.com/kroma-network/kroma-specs/blob/main/specs/protocol/differences-from-optimism.md).\nThe instructions to run the proposer (called validator) and the ZK prover, are documented [here](https://docs.kroma.network/developers/running-nodes-on-kroma).","compressionScheme":"Data batches are compressed using the [zlib](https://github.com/madler/zlib) algorithm with best compression level.","genesisState":"The genesis file can be found [here](https://github.com/kroma-network/kroma-up/blob/main/config/mainnet/genesis.json).","dataFormat":"L2 blocks derivation from L1 data plus the format and architecture of batch submission is documented [here](https://specs.kroma.network/protocol/rollup-node.html#derivation)."},"permissions":[{"name":"Spectrum EOA Admin","accounts":[{"address":"0x7D76Ae60dcc2FdB57d3924024E2Ad940B76Ef81f","type":"EOA"}],"description":"Can upgrade all Spectrum-related contracts and potentially gain access to all escrowed weETH."},{"name":"SecurityCouncil","accounts":[{"address":"0x3de211088dF516da72efe68D386b561BEE256Ec4","type":"Contract"}],"description":"MultiSig (currently 7 / 9) that is a guardian of KromaPortal, privileged Validator that does not need a bond         and privileged actor in Colosseum contract that can remove any L2Output state root regardless of the outcome of the challenge."},{"name":"SecurityCouncil members","accounts":[{"address":"0x3aa00bb915A8e78b0523E4c365e3E70A19d329e6","type":"EOA"},{"address":"0x77Fe100758c5320cdfBb4f4a0Bed57885c97158A","type":"EOA"},{"address":"0x8ECF028Cd647379E580DaA6701A11154750fcd3c","type":"EOA"},{"address":"0x42a4f1958A5d99A62C50eb24a80d1D8b142ea3A1","type":"EOA"},{"address":"0x7B3225ADc5D908668FaA050246680CBE4e75A93f","type":"EOA"},{"address":"0x5ddcf494A8b6EeE4904934E829109cCF584EAF80","type":"EOA"},{"address":"0xECe4AAf6A41aa81A164363Ec6C420510617Fc998","type":"EOA"},{"address":"0x3a4F65D1ACFb2A3F5AD93ef7b240bfa1079052e0","type":"EOA"},{"address":"0x66FA82F4AEA284d1d208437F179dFE13d8118f3A","type":"EOA"}],"description":"Members of the SecurityCouncil.","references":[{"text":"Security Council members - Announcing Kroma Security Council","href":"https://blog.kroma.network/announcing-kroma-security-council-435b540d2ab4"}]},{"name":"Sequencer","accounts":[{"address":"0x41b8cD6791De4D8f9E0eaF7861aC506822AdcE12","type":"EOA"}],"description":"Central actor allowed to commit L2 transactions on L1."},{"name":"Guardian","accounts":[{"address":"0x3de211088dF516da72efe68D386b561BEE256Ec4","type":"Contract"}],"description":"Actor allowed to pause withdrawals. Currently set to the Security Council."}],"contracts":{"addresses":[{"name":"L2OutputOracle","address":"0x180c77aE51a9c505a43A2C7D81f8CE70cacb93A6","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x14126FFa3889a026A79F0f99FaE80B3dc9E38095"]},"chain":"ethereum","description":"The L2OutputOracle contract contains a list of proposed state roots which Proposers assert to be a result of block execution. Anyone can participate as a Proposer by depositing in the ValidatorPool. A root can be proposed every 1h.","upgradableBy":["SecurityCouncil"],"upgradeDelay":"0s delay"},{"name":"KromaPortal","address":"0x31F648572b67e60Ec6eb8E197E1848CC5F5558de","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x381F53695230BAF83a39D1a08304D233A35730Fa"]},"chain":"ethereum","description":"The OptimismPortal contract is the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals.","upgradableBy":["SecurityCouncil"],"upgradeDelay":"0s delay"},{"name":"SystemConfig","address":"0x3971EB866AA9b2b8aFEa8a7C816F3b7e8b195a35","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x2af8a383C395EBa6551E674EeD02344936fE36f5"]},"chain":"ethereum","description":"It contains configuration parameters such as the Sequencer address, the L2 gas limit and the unsafe block signer address.","upgradableBy":["SecurityCouncil"],"upgradeDelay":"0s delay"},{"name":"L1ERC721Bridge","address":"0x46d07221dfC313afe1BF104F4bB1f185301D65B9","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0xbB1cDB5Cc35B1c9801DA8772aCBcDbd323A912D9"]},"chain":"ethereum","description":"The L1ERC721Bridge contract is the main entry point to deposit ERC721 tokens from L1 to L2.","upgradableBy":["SecurityCouncil"],"upgradeDelay":"0s delay"},{"name":"L1CrossDomainMessenger","address":"0x46B8bB4C5dd27bB42807Db477af4d1a7C8A5B746","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x675924D68200F2C967Ba12349d5d510676C7214c"]},"chain":"ethereum","description":"The L1 Cross Domain Messenger contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract's replay function.","upgradableBy":["SecurityCouncil"],"upgradeDelay":"0s delay"},{"name":"Timelock","address":"0x22605A12cB77Fe420B0cC1263cEb58a77352FDc1","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0xe44da6e9fA92E3FD897Da84d38fa6B9322Dd22c3"]},"chain":"ethereum","description":"Timelock contract behind which the ProxyAdmin is. There is a 0s delay."},{"name":"SecurityCouncil","address":"0x3de211088dF516da72efe68D386b561BEE256Ec4","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x61c7C854Dcdf8393230B1242a4c1107f4d023c28"]},"chain":"ethereum","description":"Contract allowed to start upgrades, dismiss challenges and delete roots. It is also designated as a guardian, meaning it can pause withdrawals.","upgradableBy":["SecurityCouncil"],"upgradeDelay":"0s delay"},{"name":"UpgradeGovernor","address":"0xb3c415c2Aad428D5570208e1772cb68e7D06a537","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x64F8F4EB207D51F74caf6db644Bf710Ad86989b3"]},"chain":"ethereum","description":"Controls the Timelock. It is governed using a Soulbound NFT."},{"name":"ProxyAdmin","address":"0x665c23A5722B6A237fa6Be2B49c0A94504db1edd","chain":"ethereum","description":"Admin of the L2OutputOracle, Timelock, KromaPortal, SystemConfig, SecurityCouncil, L1CrossDomainMessenger, L1ERC721Bridge, ZKVerifier, Colosseum, L1StandardBridge, UpgradeGovernor, SecurityCouncilToken, ValidatorPool proxies. It's effectively controlled by the Security Council. The proxy is behind a Timelock."},{"name":"Colosseum","address":"0x713C2BEd44eB45D490afB8D4d1aA6F12290B829a","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0xb87eaB624EE684C1799f1E8b24936A1c90759eEc"]},"chain":"ethereum","description":"Contract used to challenge state roots and prove fraud. The SecurityCouncil can interfere by deleting challenges and roots.","upgradableBy":["SecurityCouncil"],"upgradeDelay":"0s delay"},{"name":"ValidatorPool","address":"0xFdFF462845953D90719A78Fd12a2d103541d2103","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x8EDc4cCa2aF96f5D5141d55333043a65c3f59Ec4"]},"chain":"ethereum","description":"Contract used to manage the Proposers. Anyone can submit a deposit and bond to a state root, or create a challenge. It also manages the Proposer rotation for each submittable block using a random selection. If the selected proposer fails to publish a root within 30m, then the submission becomes open to everyone.","upgradableBy":["SecurityCouncil"],"upgradeDelay":"0s delay"},{"name":"ZKMerkleTrie","address":"0x339208824010425cBE73201ceD4372308ACD610B","chain":"ethereum","description":"Trie contract used to prove withdrawals."},{"name":"ZKVerifier","address":"0x6deb6a630D7b486c1C08d4016AEe3835a2F52Fa7","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x665c23A5722B6A237fa6Be2B49c0A94504db1edd"],"implementations":["0x4cd05aB629055a449617a28E3466660403eA7126"]},"chain":"ethereum","description":"ZK verifier used to verify the last step of a fraud proof, which corresponds to a block.","upgradableBy":["SecurityCouncil"],"upgradeDelay":"0s delay"},{"name":"Poseidon2","address":"0xFd234971881a7c72965175fA8E438c97B2Dcd273","chain":"ethereum","description":"Contract used to compute hashes. It is used by the ZKMerkeTrie. The contract has been generated using the circomlibjs library."}],"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is a 0s delay on code upgrades."}]},"milestones":[{"name":"Chain fork #2 - Output root replaced","link":"https://x.com/kroma_network/status/1774683208753590506","date":"2024-04-05T00:00:00Z","description":"The chain forked and an L2 output on Ethereum has to be replaced by the Security Council.","type":"incident"},{"name":"Chain fork - Output root replaced","link":"https://x.com/kroma_network/status/1767478100819153009","date":"2024-03-18T00:00:00Z","description":"The chain forked and an L2 output on Ethereum has to be replaced by the Security Council.","type":"incident"},{"name":"Ecotone upgrade","link":"https://twitter.com/kroma_network/status/1783410075346063564","date":"2024-04-25T00:00:00.00Z","description":"Introduces EIP-4844 data blobs for L1 data availability and more L2 opcodes.","type":"general"},{"name":"Kroma Mainnet Launch","link":"https://twitter.com/kroma_network/status/1699267271968055305?s=20","date":"2023-09-06T00:00:00Z","description":"Kroma is live on mainnet.","type":"general"}],"knowledgeNuggets":[{"title":"Kroma’s Road to Stage 2","url":"https://blog.kroma.network/kromas-road-to-stage-2-0c02e41d8c99","thumbnail":"kroma-01.jpg"}]}