{"type":"layer2","id":"nova","contracts":{"addresses":[{"name":"RollupProxy","address":"0xFb209827c58283535b744575e11953DCC4bEAD88","upgradeability":{"proxyType":"Arbitrum proxy","admins":["0x3ffFbAdAF827559da092217e474760E2b2c3CeDd"],"implementations":["0x72f193d0F305F532C87a4B9D0A2F407a3F4f585f","0xA0Ed0562629D45B88A34a342f20dEb58c46C15ff"]},"chain":"ethereum","description":"Main contract implementing Arbitrum One Rollup. Manages other Rollup components, list of Stakers and Validators. Entry point for Validators creating new Rollup Nodes (state commits) and Challengers submitting fraud proofs.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"Bridge","address":"0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["0x1066CEcC8880948FE55e427E94F1FF221d626591"]},"chain":"ethereum","description":"Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"SequencerInbox","address":"0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["0x31DA64D19Cd31A19CD09F4070366Fe2144792cf7"]},"chain":"ethereum","description":"Main entry point for the Sequencer submitting transaction batches to a Rollup. Sequencers can be changed here through the UpgradeExecutor or the BatchPosterManager.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"Inbox","address":"0xc4448b71118c9071Bcb9734A0EAc55D18A153949","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["0x1b2676D32E2f7430a564DD4560641F990dFE3D6a"]},"chain":"ethereum","description":"Entry point for users depositing ETH and sending L1 --> L2 messages. Deposited ETH is escrowed in a Bridge contract.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"address":"0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58","name":"Outbox","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["0x7439d8d4F3b9d9B6222f3E9760c75a47e08a7b3f"]},"chain":"ethereum","description":"Arbitrum's Outbox system allows for arbitrary L2 to L1 contract calls; i.e., messages initiated from L2 which eventually resolve in execution on L1.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"UpgradeExecutor","address":"0x3ffFbAdAF827559da092217e474760E2b2c3CeDd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"],"implementations":["0x86f0cf42Ad673B3D666d103E009EC142D1298a17"]},"chain":"ethereum","description":"This contract can upgrade the system's contracts. The upgrades can be done either by the Security Council or by the L1Timelock.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"L1Timelock","address":"0xE6841D92B0C345144506576eC13ECf5103aC7f49","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x5613AF0474EB9c528A34701A5b1662E3C8FA0678"],"implementations":["0x61dC65001A8De4138DAD5167e43FF0FB0AB8D3B3"]},"chain":"ethereum","description":"Timelock contract for Arbitrum Governance transactions. Scheduled transactions from Arbitrum One L2 (by the DAO or the Security Council) are delayed here and can be canceled by the Security Council or executed to upgrade and change system contracts on Ethereum, Arbitrum One and -Nova.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"L1GatewayRouter","address":"0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],"implementations":["0x52595021fA01B3E14EC6C88953AFc8E35dFf423c"]},"chain":"ethereum","description":"Router managing token <--> gateway mapping.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"ChallengeManager","address":"0xA59075221b50C598aED0Eae0bB9869639513af0D","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["0x914B7b3053B35B84A24df08D7c9ceBCaEA4E2948"]},"chain":"ethereum","description":"Contract that allows challenging invalid state roots. Can be called through the RollupProxy by Validators or the UpgradeExecutor.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"OneStepProofEntry","address":"0xa328BAF257A937b7934429a5d8458d98693C6FC7","chain":"ethereum","description":"Contract used to perform the last step of a fraud proof."},{"name":"OneStepProverMemory","address":"0x5C9F8663583Ad0A1c0009c871f8253DBF4767A18","chain":"ethereum","description":"Contract used to perform the last step of a fraud proof."},{"name":"OneStepProverMath","address":"0x2c785E954c376be0CEfF4a7Db92E053B0830F7c9","chain":"ethereum","description":"Contract used to perform the last step of a fraud proof."},{"name":"OneStepProverHostIo","address":"0x8D78382913467Cd25374C75BA918b0A723Bc2544","chain":"ethereum","description":"Contract used to perform the last step of a fraud proof."},{"name":"OneStepProver0","address":"0xD0465e3356213869f1Fae38b3E67CBF4E873c5B6","chain":"ethereum","description":"Contract used to perform the last step of a fraud proof."}],"nativeAddresses":{"nova":[{"name":"L2UpgradeExecutor","address":"0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9"],"implementations":["0x3096EAEdcb3A3B665552660F4d921E565D0073cB"]},"chain":"nova","description":"This contract can upgrade the L2 system's contracts through the L2ProxyAdmin. The upgrades can be done either by the Security Council or by the L1Timelock (via its alias on L2).","upgradableBy":["SecurityCouncilEmergency","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by the Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"L2ProxyAdmin","address":"0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9","chain":"nova","description":"The owner (UpgradeExecutor) can upgrade proxies' implementations of all L2 system contracts through this contract."},{"name":"L2GatewaysProxyAdmin","address":"0xada790b026097BfB36a5ed696859b97a96CEd92C","chain":"nova","description":"The owner (UpgradeExecutor) can upgrade proxies' implementations of all L2 bridging gateway contracts through this contract."},{"name":"L2BaseFee","address":"0x9fCB6F75D99029f28F6F4a1d277bae49c5CAC79f","chain":"nova","description":"This contract receives all BaseFees: The transaction fee component that covers the minimum cost of Arbitrum transaction execution. They are withdrawable to a configurable set of recipients."},{"name":"L2SurplusFee","address":"0x509386DbF5C0BE6fd68Df97A05fdB375136c32De","chain":"nova","description":"This contract receives all SurplusFees: Transaction fee component that covers the cost beyond that covered by the L2 Base Fee during chain congestion. They are withdrawable to a configurable set of recipients."},{"name":"ArbChildToParentRewardRouter","address":"0x36D0170D92F66e8949eB276C3AC4FEA64f83704d","chain":"nova","description":"Is used as the main recipient for the ETH from L2SurplusFee and L2BaseFee contracts. Forwards the ETH via L1 to the Arbitrum treasury on Arbitrum One."},{"name":"L2ArbitrumToken","address":"0xf823C3cD3CeBE0a1fA952ba88Dc9EEf8e0Bf46AD","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9"],"implementations":["0x099bC495EA4Fd828FEe7C636F0Ab84d0f501B96d"]},"chain":"nova","description":"The ARB token contract. Supply can be increased by the owner once per year by a maximum of 2%.","upgradableBy":["SecurityCouncilEmergency","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by the Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"L2GatewayRouter","address":"0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xada790b026097BfB36a5ed696859b97a96CEd92C"],"implementations":["0x8f377770289863DF73Fe665B74460579F82321fb"]},"chain":"nova","description":"Router managing token <--> gateway mapping on L2.","upgradableBy":["SecurityCouncilEmergency","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by the Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"L2ERC20Gateway","address":"0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xada790b026097BfB36a5ed696859b97a96CEd92C"],"implementations":["0x466155FD6d8BbF1c0d5ca32818814cB28b6884d8"]},"chain":"nova","description":"Counterpart to the L1ERC20Gateway. Can mint (deposit to L2) and burn (withdraw to L1) ERC20 tokens on L2.","upgradableBy":["SecurityCouncilEmergency","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by the Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"L2WethGateway","address":"0x7626841cB6113412F9c88D3ADC720C9FAC88D9eD","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xada790b026097BfB36a5ed696859b97a96CEd92C"],"implementations":["0xbe04Ab2728c924D678f9FC833E379688c6eFA317"]},"chain":"nova","description":"Counterpart to the Bridge on L1. Mints and burns WETH on L2.","upgradableBy":["SecurityCouncilEmergency","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by the Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."},{"name":"L2ARBGateway","address":"0xbf544970E6BD77b21C6492C281AB60d0770451F4","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xada790b026097BfB36a5ed696859b97a96CEd92C"],"implementations":["0x554e12DBAa0fBeB8A35583a6Fd9D04BaA4ff597f"]},"chain":"nova","description":"ARB sent from L2 to L1 is escrowed in this contract and minted on L1.","upgradableBy":["SecurityCouncilEmergency","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by the Security Council","upgradeConsiderations":"An upgrade initiated by the DAO can be vetoed by the Security Council."}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"chainConfig":{"name":"nova","chainId":42170,"explorerUrl":"https://nova.arbiscan.io","explorerApi":{"url":"https://api-nova.arbiscan.io/api","type":"etherscan"},"minTimestampForTvl":1656122488,"multicallContracts":[{"address":"0xcA11bde05977b3631167028862bE2a173976CA11","batchSize":150,"sinceBlock":1746963,"version":"3"}],"coingeckoPlatform":"arbitrum-nova"},"technology":{"dataAvailability":{"name":"Data is not stored on chain","description":"Users transactions are not published on-chain, but rather sent to external trusted parties, also known as committee members (DAC). Members of the DAC collectively produce a Data Availability Certificate (comprising BLS signatures from a quorum) guaranteeing that the data behind the new transaction batch will be available until the expiry period elapses (currently a minimum of two weeks). This signature is not verified by L1, however external Validators will skip the batch if BLS signature is not valid resulting. This will result in a fraud proof challenge if this batch is included in a consecutive state update. It is assumed that at least one honest DAC member that signed the batch will reveal tx data to the Validators if Sequencer decides to act maliciously and withhold the data. If the Sequencer cannot gather enough signatures from the DAC, it will \"fall back to rollup\" mode and by posting the full data directly to the L1 chain. The current DAC threshold is 5 out of 6.","risks":[{"category":"Funds can be lost if","text":"the external data becomes unavailable.","isCritical":true},{"category":"Users can be censored if","text":"the committee restricts their access to the external data."}],"references":[{"text":"Inside AnyTrust - Arbitrum documentation","href":"https://developer.offchainlabs.com/inside-anytrust"}]},"operator":{"name":"The system has a centralized sequencer","description":"While forcing transaction is open to anyone the system employs a privileged sequencer that has priority for submitting transaction batches and ordering transactions.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"text":"Sequencer - Arbitrum documentation","href":"https://docs.arbitrum.io/how-arbitrum-works/inside-arbitrum-nitro#the-sequencer"}]},"forceTransactions":{"name":"Users can force any transaction","description":"Because the state of the system is based on transactions submitted on the underlying host chain and anyone can submit their transactions there it allows the users to circumvent censorship by interacting with the smart contract on the host chain directly. After a delay of 1d in which a Sequencer has failed to include a transaction that was directly posted to the smart contract, it can be forcefully included by anyone on the host chain, which finalizes its ordering.","risks":[],"references":[{"text":"SequencerInbox.sol - Etherscan source code, forceInclusion function","href":"https://etherscan.io/address/0x31DA64D19Cd31A19CD09F4070366Fe2144792cf7#code"},{"text":"Sequencer Isn’t Doing Its Job - Arbitrum documentation","href":"https://docs.arbitrum.io/how-arbitrum-works/sequencer#unhappyuncommon-case-sequencer-isnt-doing-its-job"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is finalized the funds become available for withdrawal on L1. The process of block finalization usually takes several days to complete. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.","risks":[],"references":[{"text":"Transaction lifecycle - Arbitrum documentation","href":"https://developer.offchainlabs.com/tx-lifecycle"},{"text":"L2 to L1 Messages - Arbitrum documentation","href":"https://developer.offchainlabs.com/arbos/l2-to-l1-messaging"},{"text":"Mainnet for everyone - Arbitrum Blog","href":"https://offchain.medium.com/mainnet-for-everyone-27ce0f67c85e"}]},{"name":"Tradeable Bridge Exit","description":"When a user initiates a regular withdrawal a third party verifying the chain can offer to buy this withdrawal by paying the user on L1. The user will get the funds immediately, however the third party has to wait for the block to be finalized. This is implemented as a first party functionality inside Arbitrum's token bridge.","risks":[],"references":[{"text":"Tradeable Bridge Exits - Arbitrum documentation","href":"https://developer.offchainlabs.com/docs/withdrawals#tradeable-bridge-exits"}]},{"name":"Autonomous exit","description":"Users can (eventually) exit the system by pushing the transaction on L1 and providing the corresponding state root. The only way to prevent such withdrawal is via an upgrade.","risks":[],"references":[]}],"otherConsiderations":[{"name":"EVM compatible and Stylus smart contracts are supported","description":"Arbitrum One supports smart contracts written in Solidity and other programming languages (Rust, C++) that compile to WASM. Such smart contracts are executed by nodes using either a geth fork or [a fork of wasmer](https://github.com/OffchainLabs/wasmer) inside the Nitro node, and can be proven with the onchain WASM VM.","risks":[{"category":"Funds can be lost if","text":"there are mistakes in the highly complex Nitro and WASM one-step prover implementation."}],"references":[{"text":"Inside Arbitrum Nitro","href":"https://developer.offchainlabs.com/inside-arbitrum-nitro/"},{"text":"A gentle introduction: Stylus","href":"https://docs.arbitrum.io/stylus/stylus-gentle-introduction"}]},{"name":"Arbitrum DAO is in charge of upgrades","description":"Arbitrum DAO allows $ARB token holders to propose and vote on changes to the organization and the technologies it governs. The governance smart contracts are implemented on Arbitrum One rollup chain. The DAO can upgrade the Arbitrum One contracts on L2 with 3d delay and - using L2 --> L1 Governance Relay, update contracts on L1 with additional 3d delay + 6d 8h delay for all L2 --> L1 messages (in total a delay of 12d 8h). The Security Council can upgrade the contracts without any delay. It can also cancel any upgrades initiated by the DAO.","risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is a 12d 8h delay on code upgrades."}],"references":[{"text":"Arbitrum DAO","href":"https://docs.arbitrum.foundation/concepts/arbitrum-dao"}]}]},"permissions":[{"name":"Sequencers","accounts":[{"address":"0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D","type":"EOA"},{"address":"0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc","type":"EOA"}],"description":"Central actors allowed to submit transaction batches to L1.","chain":"ethereum"},{"name":"Validators/Proposers","accounts":[{"address":"0x1732BE6738117e9d22A84181AF68C8d09Cd4FF23","type":"Contract"},{"address":"0x24Ca61c31C7f9Af3ab104dB6B9A444F28e9071e3","type":"Contract"},{"address":"0x3B0369CAD35d257793F51c28213a4Cf4001397AC","type":"Contract"},{"address":"0x57004b440Cc4eb2FEd8c4d1865FaC907F9150C76","type":"Contract"},{"address":"0x658e8123722462F888b6fa01a7dbcEFe1D6DD709","type":"Contract"},{"address":"0xE27d4Ed355e5273A3D4855c8e11BC4a8d3e39b87","type":"Contract"},{"address":"0x0fF813f6BD577c3D1cDbE435baC0621BE6aE34B4","type":"EOA"},{"address":"0x54c0D3d6C101580dB3be8763A2aE2c6bb9dc840c","type":"EOA"},{"address":"0x610Aa279989F440820e14248BD3879B148717974","type":"EOA"},{"address":"0xAB1A39332e934300eBCc57B5f95cA90631a347FF","type":"EOA"},{"address":"0xB51EDdfc9A945e2B909905e4F242C4796Ac0C61d","type":"EOA"},{"address":"0xdDf2F71Ab206C0138A8eceEb54386567D5abF01E","type":"EOA"},{"address":"0xDfB23DFE9De7dcC974467195C8B7D5cd21C9d7cB","type":"EOA"}],"description":"They can submit new state roots and challenge state roots. Some of the operators perform their duties through special purpose smart contracts.","chain":"ethereum"},{"name":"SecurityCouncil","description":"This is a Gnosis Safe with 9 / 12 threshold. It uses the following modules: UpgradeExecutor. The admin of all contracts in the system, capable of issuing upgrades without notice and delay. This allows it to censor transactions, upgrade bridge implementation potentially gaining access to all funds stored in a bridge and change the sequencer or any other system component (unlimited upgrade power). It is also the admin of the special purpose smart contracts used by validators.","accounts":[{"address":"0xF06E95eF589D9c38af242a8AAee8375f14023F85","type":"MultiSig"}],"chain":"ethereum","references":[{"text":"Security Council members - Arbitrum DAO Governance Docs","href":"https://docs.arbitrum.foundation/foundational-documents/transparency-report-initial-foundation-setup"}],"participants":[{"address":"0x70C006fC86A392c16D7E085cefc0Ad1FF7de6C75","type":"EOA"},{"address":"0xA821c8c245d1F3A257e3B0DEC99268cA05144422","type":"EOA"},{"address":"0x5a09A94eE8198D3c474d723337aa58023810022C","type":"EOA"},{"address":"0x5DD2205C3aac13E592F0a3D85188c948D1781df1","type":"EOA"},{"address":"0x8F10e3413586c4a8DCfcE19D009872b19e9cd8E3","type":"EOA"},{"address":"0xb71ca4FFbB7b58d75Ba29891ab45e9Dc12B444Ed","type":"EOA"},{"address":"0x3E286452b1C66abB08Eb5494c3894F40aB5a59AF","type":"EOA"},{"address":"0xb07dc9103328A51128bC6Cc1049d1137035f5E28","type":"EOA"},{"address":"0x3Bd8e2AC65ad6f0F094BA6766cBd9484AB49eF23","type":"EOA"},{"address":"0xf8e1492255d9428c2Fc20A98A1DeB1215C8ffEfd","type":"EOA"},{"address":"0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae","type":"EOA"},{"address":"0x475816ca2a31D601B4e336f5c2418A67978aBf09","type":"EOA"}]},{"name":"L1Timelock","accounts":[{"address":"0xE6841D92B0C345144506576eC13ECf5103aC7f49","type":"Contract"}],"chain":"ethereum","description":"Timelock contract for Arbitrum Governance transactions. Scheduled transactions from Arbitrum One L2 (by the DAO or the Security Council) are delayed here and can be canceled by the Security Council or executed to upgrade and change system contracts on Ethereum, Arbitrum One and -Nova."},{"name":"BatchPosterManagerMultisig","description":"This is a Gnosis Safe with 4 / 6 threshold.  It can update whether an address is authorized to be a batch poster at the sequencer inbox. The UpgradeExecutor retains the ability to update the batch poster manager (along with any batch posters).","accounts":[{"address":"0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x375906ADFD34D93236084F462BB2dB0D92129Fe1","type":"EOA"},{"address":"0xfE2bf40f2A9183774BF8E871d634A4E50255158B","type":"EOA"},{"address":"0x64379Dee676ab442B48925Ed603771f386510Ee7","type":"EOA"},{"address":"0x290Aa3E7533c873B3326DabFe7579e86ed951428","type":"EOA"},{"address":"0x4d9A23BD4DBBdC04A88B99d8d2ac450EB6b8f49C","type":"EOA"},{"address":"0x79D3Bb67EA7aB77E015af3dA885E8ed9C48a9fCe","type":"EOA"}]}],"nativePermissions":{"nova":[{"name":"L2SecurityCouncilEmergency","description":"This is a Gnosis Safe with 9 / 12 threshold. It uses the following modules: L2UpgradeExecutor. The elected signers for the Arbitrum SecurityCouncil can act through this multisig on Layer2, permissioned to upgrade all system contracts without delay.","accounts":[{"address":"0xc232ee726E3C51B86778BB4dBe61C52cC07A60F3","type":"MultiSig"}],"chain":"nova","participants":[{"address":"0x70C006fC86A392c16D7E085cefc0Ad1FF7de6C75","type":"EOA"},{"address":"0xA821c8c245d1F3A257e3B0DEC99268cA05144422","type":"EOA"},{"address":"0x5a09A94eE8198D3c474d723337aa58023810022C","type":"EOA"},{"address":"0x5DD2205C3aac13E592F0a3D85188c948D1781df1","type":"EOA"},{"address":"0x8F10e3413586c4a8DCfcE19D009872b19e9cd8E3","type":"EOA"},{"address":"0xb71ca4FFbB7b58d75Ba29891ab45e9Dc12B444Ed","type":"EOA"},{"address":"0x3E286452b1C66abB08Eb5494c3894F40aB5a59AF","type":"EOA"},{"address":"0xb07dc9103328A51128bC6Cc1049d1137035f5E28","type":"EOA"},{"address":"0x3Bd8e2AC65ad6f0F094BA6766cBd9484AB49eF23","type":"EOA"},{"address":"0xf8e1492255d9428c2Fc20A98A1DeB1215C8ffEfd","type":"EOA"},{"address":"0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae","type":"EOA"},{"address":"0x475816ca2a31D601B4e336f5c2418A67978aBf09","type":"EOA"}]}]},"stateValidation":{"description":"Updates to the system state can be proposed and challenged by a set of whitelisted validators. If a state root passes the challenge period, it is optimistically considered correct and made actionable for withdrawals.","categories":[{"title":"State root proposals","description":"Whitelisted validators propose state roots as children of a previous state root. A state root can have multiple conflicting children. This structure forms a graph, and therefore, in the contracts, state roots are referred to as nodes. Each proposal requires a stake, currently set to 1.0 ETH, that can be slashed if the proposal is proven incorrect via a fraud proof. Stakes can be moved from one node to one of its children, either by calling `stakeOnExistingNode` or `stakeOnNewNode`. New nodes cannot be created faster than the minimum assertion period by the same validator, currently set to 15m. The oldest unconfirmed node can be confirmed if the challenge period has passed and there are no siblings, and rejected if the parent is not a confirmed node or if the challenge period has passed and no one is staked on it.","risks":[{"category":"Funds can be stolen if","text":"none of the whitelisted verifiers checks the published state. Fraud proofs assume at least one honest and able validator.","isCritical":true}],"references":[{"text":"How is fraud proven - Arbitrum documentation FAQ","href":"https://docs.arbitrum.io/welcome/arbitrum-gentle-introduction#q-and-how-exactly-is-fraud-proven-sounds-complicated"}]},{"title":"Challenges","description":"A challenge can be started between two siblings, i.e. two different state roots that share the same parent, by calling the `startChallenge` function. Validators cannot be in more than one challenge at the same time, meaning that the protocol operates with [partial concurrency](https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a). Since each challenge lasts 6d 8h, this implies that the protocol can be subject to [delay attacks](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a), where a malicious actor can delay withdrawals as long as they are willing to pay the cost of losing their stakes. If the protocol is delayed attacked, the new stake requirement increases exponentially for each challenge period of delay. Challenges are played via a bisection game, where asserter and challenger play together to find the first instruction of disagreement. Such instruction is then executed onchain in the WASM OneStepProver contract to determine the winner, who then gets half of the stake of the loser. As said before, a state root is rejected only when no one left is staked on it. The protocol does not enforces valid bisections, meaning that actors can propose correct initial claim and then provide incorrect midpoints.","references":[{"text":"Fraud Proof Wars: Arbitrum Classic","href":"https://medium.com/l2beat/fraud-proof-wars-b0cb4d0f452a"}]}]},"upgradesAndGovernance":"\n  All critical system smart contracts are upgradeable (can be arbitrarily changed). This permission is governed by the Arbitrum Decentralized Autonomous Organization (DAO) \n  and their elected Security Council. The Arbitrum DAO controls Arbitrum One and Arbitrum Nova through upgrades and modifications to their smart contracts on Layer 1 Ethereum and the Layer 2s. \n  While the DAO governs through token-weighted governance in their associated ARB token, the Security Council can directly act through \n  the Security Council smart contracts on all three chains. Although these multisigs are technically separate and connect to different target permissions, \n  their member- and threshold configuration is kept in sync by a manager contract on Arbitrum One and crosschain transactions.\n  \n  \n  Regular upgrades, Admin- and Owner actions originate from either the Arbitrum DAO or the non-emergency (proposer-) Security Council on Arbitrum One \n  and pass through multiple delays and timelocks before being executed at their destination. Contrarily, the three Emergency Security Council multisigs \n  (one on each chain: Arbitrum One, Ethereum, Arbitrum Nova) can skip delays and directly access all admin- and upgrade functions of all smart contracts. \n  These two general paths have the same destination: the respective UpgradeExecutor smart contract.\n  \n  \n  Regular upgrades are scheduled in the L2 Timelock. The proposer Security Council can do this directly and the Arbitrum DAO (ARB token holders and delegates) must meet a \n  CoreGovernor-enforced 5% threshold of the votable tokens. The L2 Timelock queues the transaction for a 3d delay and then sends it to the Outbox contract on Ethereum. This incurs another delay (the challenge period) of 6d 8h.\n  When that has passed, the L1 Timelock delays for additional 3d. Both timelocks serve as delays during which the transparent transaction contents can be audited, \n  and even cancelled by the Emergency Security Council. Finally, the transaction can be executed, calling Admin- or Owner functions of the respective destination smart contracts \n  through the UpgradeExecutor on Ethereum. If the predefined  transaction destination is Arbitrum One or -Nova, this last call is executed on L2 through the canonical bridge and the aliased address of the L1 Timelock.\n  \n  \n  Operator roles like the Sequencers and Validators are managed using the same paths. \n  Sequencer changes can be delegated to a Batch Poster Manager.\n  \n  \n  Transactions targeting the Arbitrum DAO Treasury can be scheduled in the 3d \n  Treasury Timelock by meeting a TreasuryGovernor-enforced 3% threshold of votable ARB tokens. The Security Council cannot regularly cancel \n  these transactions or schedule different ones but can overwrite them anyway by having full admin upgrade permissions for all the underlying smart contracts.","milestones":[{"name":"ArbOS 32 Emergency upgrade","link":"https://github.com/OffchainLabs/nitro/releases/tag/v3.2.0","date":"2024-09-25T00:00:00Z","description":"SecurityCouncil emergency upgrades to fix attack vectors related to Stylus resource pricing.","type":"incident"},{"name":"ArbOS 31 Bianca upgrade","link":"https://www.tally.xyz/gov/arbitrum/proposal/108288822474129076868455956066667369439381709547570289793612729242368710728616","date":"2024-09-03T00:00:00Z","description":"Nova upgrades to ArbOS 31 activating Stylus (new languages for smart contracts).","type":"general"},{"name":"Mainnet for everyone","description":"Whitelist got removed, there are no restrictions on who can transact with the network.","date":"2022-08-09T00:00:00Z","link":"https://medium.com/offchainlabs/its-time-for-a-new-dawn-nova-is-open-to-the-public-a081df1e4ad2","type":"general"}],"knowledgeNuggets":[{"title":"Data availability on Arbitrum Nova","url":"https://twitter.com/bkiepuszewski/status/1555180043525128200","thumbnail":"l2beat-03.jpg"}],"badges":["DAC","Nitro","WasmVM","Governance","L3HostChain","EVM"],"display":{"stateValidationImage":"orbit","warning":"Fraud proof system is fully deployed but is not yet permissionless as it requires Validators to be whitelisted.","name":"Arbitrum Nova","slug":"nova","description":"Arbitrum Nova is an AnyTrust Optimium, differing from Arbitrum One by not posting transaction data onchain.","purposes":["Universal"],"links":{"websites":["https://nova.arbitrum.io/","https://arbitrum.io/","https://arbitrum.foundation/"],"apps":["https://bridge.arbitrum.io/?destinationChain=arbitrum-nova&sourceChain=ethereum"],"documentation":["https://developer.arbitrum.io/","https://developer.arbitrum.io/inside-arbitrum-nitro/#inside-anytrust"],"explorers":["https://nova.arbiscan.io/","https://nova-explorer.arbitrum.io/"],"repositories":["https://github.com/ArbitrumFoundation/docs","https://github.com/ArbitrumFoundation/governance","https://github.com/OffchainLabs/nitro"],"socialMedia":["https://twitter.com/arbitrum","https://arbitrumfoundation.medium.com/","https://discord.gg/Arbitrum"]},"activityDataSource":"Blockchain RPC","provider":"Arbitrum","category":"Optimium","finality":{"finalizationPeriod":549816}},"stage":{"stage":"NotApplicable"},"dataAvailability":{"layer":{"value":"DAC","sentiment":"warning","description":"The data is posted off chain and a Data Availability Committee (DAC) is responsible for protecting and supplying it."},"bridge":{"value":"5/6 DAC Members","sentiment":"warning","description":"There is a threshold of 5/6 members that must sign and attest that the data is correct and available."},"mode":"Transaction data (compressed)"},"riskView":{"stateValidation":{"value":"Fraud proofs (INT)","description":"Fraud proofs allow 13 WHITELISTED actors watching the chain to prove that the state is incorrect. Interactive proofs (INT) require multiple transactions over time to resolve. There is a 6d 8h challenge period.","sentiment":"warning","definingMetric":13,"secondLine":"6d 8h challenge period"},"dataAvailability":{"value":"External (DAC)","description":"Proof construction relies fully on data that is NOT published onchain. There exists a Data Availability Committee (DAC) with a threshold of 5/6 that is tasked with protecting and supplying the data.","sentiment":"warning","definingMetric":0.8333333333333334},"exitWindow":{"value":"2d","description":"Non-emergency upgrades are initiated on L2 and go through a 3d delay. Since there is a 1d delay to force a tx (forcing the inclusion in the following state update), users have only 2d to exit. \n    \n  If users post a tx after that time, they would only be able to self propose a state root 12d 17h after the last state root was proposed and then wait for the 6d 8h challenge window, while the upgrade would be confirmed just after the 6d 8h challenge window and the 3d L1 timelock.","sentiment":"bad","definingMetric":172800,"warning":{"value":"The Security Council can upgrade with no delay.","sentiment":"bad"},"sources":[{"contract":"RollupProxy","references":["https://etherscan.io/address/0xA0Ed0562629D45B88A34a342f20dEb58c46C15ff#code#F1#L43"]},{"contract":"Outbox","references":["https://etherscan.io/address/0x7439d8d4F3b9d9B6222f3E9760c75a47e08a7b3f#code"]}]},"sequencerFailure":{"value":"Self sequence","description":"In the event of a sequencer failure, users can force transactions to be included in the project's chain by sending them to L1. There is a 1d delay on this operation.","sentiment":"good","definingMetric":86400},"proposerFailure":{"value":"Self propose","description":"Anyone can become a Proposer after 12d 17h of inactivity from the currently whitelisted Proposers.","sentiment":"good","definingMetric":1099632},"validatedBy":{"value":"Ethereum","description":"Smart contracts on Ethereum validate all bridge transfers.","sentiment":"good"},"destinationToken":{"value":"Native & Canonical","description":"ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.","sentiment":"good"}},"config":{"associatedTokens":["ARB"],"escrows":[{"address":"0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd","newVersion":true,"sinceTimestamp":1656050353,"tokens":["ETH"],"contract":{"address":"0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x71D78dC7cCC0e037e12de1E50f5470903ce37148"],"implementations":["0x1066CEcC8880948FE55e427E94F1FF221d626591"]},"chain":"ethereum","description":"Contract managing Inboxes and Outboxes. It escrows ETH sent to L2.","upgradableBy":["ProxyAdmin"],"upgradeDelay":"No delay"},"chain":"ethereum","includeInTotal":true},{"address":"0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3","newVersion":true,"sinceTimestamp":1659620187,"tokens":["DAI"],"contract":{"address":"0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3","chain":"ethereum","description":"DAI Vault for custom DAI Gateway. Fully controlled by MakerDAO governance.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council"},"chain":"ethereum","includeInTotal":true},{"address":"0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf","newVersion":true,"sinceTimestamp":1656305583,"tokens":"*","contract":{"address":"0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],"implementations":["0xb4299A1F5f26fF6a98B7BA35572290C359fde900"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 tokens. Upon depositing, on L2 a generic, “wrapped” token will be minted.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council"},"chain":"ethereum","includeInTotal":true},{"address":"0x23122da8C581AA7E0d07A36Ff1f16F799650232f","newVersion":true,"sinceTimestamp":1659620187,"tokens":"*","contract":{"address":"0x23122da8C581AA7E0d07A36Ff1f16F799650232f","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560"],"implementations":["0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45"]},"chain":"ethereum","description":"Main entry point for users depositing ERC20 tokens that require minting a custom token on the L2.","upgradableBy":["SecurityCouncil","L1Timelock"],"upgradeDelay":"12d 8h or 0 if overridden by Security Council"},"chain":"ethereum","includeInTotal":true}],"transactionApi":{"type":"rpc","startBlock":1,"defaultUrl":"https://nova.arbitrum.io/rpc","defaultCallsPerMinute":1500},"finality":"coming soon"}}