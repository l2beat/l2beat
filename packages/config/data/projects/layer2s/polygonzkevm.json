{"type":"layer2","id":"polygonzkevm","display":{"name":"Polygon zkEVM","slug":"polygonzkevm","warning":"The forced transaction mechanism is currently disabled.","description":"Polygon zkEVM is a EVM-compatible ZK Rollup built by Polygon Labs.","purposes":["Universal"],"links":{"websites":["https://polygon.technology/polygon-zkevm"],"apps":["https://bridge.zkevm-rpc.com"],"documentation":["https://wiki.polygon.technology/docs/zkEVM/introduction"],"explorers":["https://zkevm.polygonscan.com/","https://explorer.mainnet.zkevm-test.net/"],"repositories":["https://github.com/0xPolygonHermez"],"socialMedia":["https://twitter.com/0xPolygon","https://discord.gg/XvpHAxZ","https://polygon.technology/blog-tags/polygon-zk"],"rollupCodes":"https://rollup.codes/polygon-zkevm"},"activityDataSource":"Blockchain RPC","liveness":{"explanation":"Polygon zkEVM is a ZK rollup that posts transaction data to the L1. For a transaction to be considered final, it has to be posted on L1. State updates are a three step process: first blocks are committed to L1, then they are proved, and then it is possible to execute them."},"category":"ZK Rollup","provider":"Polygon","finality":{"finalizationPeriod":0,"warnings":{"timeToInclusion":{"sentiment":"neutral","value":"Uniform block distribution is assumed for calculations."}}}},"config":{"associatedTokens":["POL","MATIC"],"escrows":[{"address":"0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe","newVersion":true,"sinceTimestamp":1679653127,"tokens":"*","contract":{"address":"0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],"implementations":["0x0FeB850B183C57534b56b7d56520133C8f9BDB65"]},"chain":"ethereum"},"chain":"ethereum","includeInTotal":true,"sharedEscrow":{"type":"AggLayer","nativeAsset":"etherPreminted","premintedAmount":"200000000000000000000000000"}}],"transactionApi":{"type":"rpc","defaultUrl":"https://polygon-rpc.com/zkevm","defaultCallsPerMinute":500,"startBlock":1},"trackedTxs":[{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x519E42c24163192Dca44CD3fBDCEBF6be9130987","selector":"0xecef3f99","functionSignature":"function sequenceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, address l2Coinbase)","sinceTimestamp":1707824735,"untilTimestamp":1710419699}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x519E42c24163192Dca44CD3fBDCEBF6be9130987","selector":"0xdef57e54","functionSignature":"function sequenceBatches(tuple(bytes transactions, bytes32 forcedGlobalExitRoot, uint64 forcedTimestamp, bytes32 forcedBlockHashL1)[] batches, uint64 maxSequenceTimestamp, uint64 initSequencedBatch, address l2Coinbase)","sinceTimestamp":1710419699}},{"uses":[{"type":"liveness","subtype":"batchSubmissions"},{"type":"l2costs","subtype":"batchSubmissions"}],"query":{"formula":"functionCall","address":"0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2","selector":"0x5e9145c9","functionSignature":"function sequenceBatches((bytes,bytes32,uint64,uint64)[] batches,address l2Coinbase)","sinceTimestamp":1679653163,"untilTimestamp":1707824735}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2","selector":"0x2b0006fa","functionSignature":"function verifyBatchesTrustedAggregator(uint64 pendingStateNum,uint64 initNumBatch,uint64 finalNewBatch,bytes32 newLocalExitRoot,bytes32 newStateRoot,bytes32[24] proof)","sinceTimestamp":1679653163,"untilTimestamp":1707822059}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2","selector":"0x621dd411","functionSignature":"function verifyBatches(uint64 pendingStateNum,uint64 initNumBatch,uint64 finalNewBatch,bytes32 newLocalExitRoot,bytes32 newStateRoot,bytes32[24] calldata proof) ","sinceTimestamp":1679653163,"untilTimestamp":1707822059}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2","selector":"0x1489ed10","functionSignature":"function verifyBatchesTrustedAggregator(uint32,uint64,uint64,uint64,bytes32,bytes32,address,bytes32[24])","sinceTimestamp":1707822059}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2","selector":"0x87c20c01","functionSignature":"function verifyBatches(uint32,uint64,uint64,uint64,bytes32,bytes32,address,bytes32[24])","sinceTimestamp":1707822059}}],"liveness":{"duplicateData":{"from":"stateUpdates","to":"proofSubmissions"}},"finality":{"type":"PolygonZkEvm","minTimestamp":1679653163,"lag":0,"stateUpdate":"disabled"}},"chainConfig":{"name":"polygonzkevm","chainId":1101,"explorerUrl":"https://zkevm.polygonscan.com","explorerApi":{"url":"https://api-zkevm.polygonscan.com/api","type":"etherscan"},"minTimestampForTvl":1679679015,"multicallContracts":[{"address":"0xcA11bde05977b3631167028862bE2a173976CA11","batchSize":150,"sinceBlock":57746,"version":"3"}]},"dataAvailability":{"layer":{"value":"Ethereum (calldata)","sentiment":"good","description":"The data is posted to Ethereum as calldata."},"bridge":{"value":"Enshrined","sentiment":"good","description":"The validating bridge has access to all the data, as it is posted on chain."},"mode":"Transaction data"},"riskView":{"stateValidation":{"value":"ZK proofs (ST, SN)","description":"STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.","sentiment":"good","definingMetric":null,"sources":[{"contract":"PolygonRollupManager","references":["https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]}]},"dataAvailability":{"value":"Onchain","description":"All of the data needed for proof construction is published on Ethereum L1. Unlike most ZK rollups transactions are posted instead of state diffs.","sentiment":"good","definingMetric":null,"sources":[{"contract":"PolygonZkEVMEtrog","references":[]}]},"exitWindow":{"value":"None","description":"Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d.","sentiment":"bad","definingMetric":-432000,"warning":{"value":"The Security Council can remove the delay on upgrades.","sentiment":"bad"}},"sequencerFailure":{"value":"No mechanism","description":"There is no mechanism to have transactions be included if the sequencer is down or censoring. Although the functionality exists in the code, it is currently disabled.","sentiment":"bad","sources":[{"contract":"PolygonZkEVMEtrog","references":[]}]},"proposerFailure":{"value":"Self propose","description":"If the Proposer fails, users can leverage the source available prover to submit proofs to the L1 bridge. There is a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state.","sentiment":"good","sources":[{"contract":"PolygonRollupManager","references":["https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b","https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]}]},"destinationToken":{"value":"Native & Canonical","description":"ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.","sentiment":"good"},"validatedBy":{"value":"Ethereum","description":"Smart contracts on Ethereum validate all bridge transfers.","sentiment":"good"}},"stage":{"stage":"Stage 0","missing":{"nextStage":"Stage 1","requirements":["Users' withdrawals can be censored by the permissioned operators.","Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring.","Security Council members are not publicly known."]},"summary":[{"stage":"Stage 0","requirements":[{"satisfied":true,"description":"The project calls itself a rollup."},{"satisfied":true,"description":"State roots are posted to Ethereum L1."},{"satisfied":true,"description":"Inputs for the state transition function are posted to Ethereum L1."},{"satisfied":true,"description":"A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/0xPolygonHermez/zkevm-node)"}]},{"stage":"Stage 1","requirements":[{"satisfied":true,"description":"A complete and functional proof system is deployed."},{"satisfied":false,"description":"Users' withdrawals can be censored by the permissioned operators."},{"satisfied":false,"description":"Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."},{"satisfied":false,"description":"Security Council members are not publicly known."}]},{"stage":"Stage 2","requirements":[{"satisfied":false,"description":"Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."},{"satisfied":false,"description":"The Security Council's actions are not confined to on-chain provable bugs."}]}]},"technology":{"newCryptography":{"name":"Zero knowledge STARK and SNARK cryptography is used","description":"Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.","risks":[{"category":"Funds can be lost if","text":"the proof system is implemented incorrectly."}],"references":[{"text":"PolygonZkEVMEtrog.sol - Etherscan source code, verifyBatches function","href":"https://etherscan.io/address/0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"}]},"stateCorrectness":{"name":"Validity proofs ensure state correctness","description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.","risks":[],"references":[{"text":"PolygonRollupManager.sol - Etherscan source code, _verifyAndRewardBatches function","href":"https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"}]},"dataAvailability":{"name":"All transaction data is recorded on chain","description":"All executed transactions are submitted to an on chain smart contract. The execution of the rollup is based entirely on the submitted transactions, so anyone monitoring the contract can know the correct state of the rollup chain.","risks":[],"references":[{"text":"PolygonZkEVMEtrog.sol - Etherscan source code, sequenceBatches function","href":"https://etherscan.io/address/0x519E42c24163192Dca44CD3fBDCEBF6be9130987"}]},"operator":{"name":"The system has a centralized sequencer","description":"Only a trusted sequencer is allowed to submit transaction batches. A mechanism for users to submit their own batches is currently disabled.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."},{"category":"Funds can be frozen if","text":"the sequencer refuses to include an exit transaction.","isCritical":true}],"references":[{"text":"PolygonZkEVMEtrog.sol - Etherscan source code, onlyTrustedSequencer modifier","href":"https://etherscan.io/address/0x2650a9a4fC64f63F573EF0F405064EF54BC46f71"}]},"forceTransactions":{"name":"Users can't force any transaction","description":"The mechanism for allowing users to submit their own transactions is currently disabled.","risks":[{"category":"Users can be censored if","text":"the operator refuses to include their transactions."}],"references":[{"text":"PolygonZkEVMEtrog.sol - Etherscan source code, forceBatchAddress address","href":"https://etherscan.io/address/0x2650a9a4fC64f63F573EF0F405064EF54BC46f71"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.","risks":[],"references":[{"text":"PolygonZkEvmBridgeV2.sol - Etherscan source code, claimAsset function","href":"https://etherscan.io/address/0x0FeB850B183C57534b56b7d56520133C8f9BDB65"}]}]},"stateDerivation":{"nodeSoftware":"Node software can be found [here](https://github.com/0xPolygonHermez/zkevm-node).","compressionScheme":"No compression scheme yet.","genesisState":"The genesis state, whose corresponding root is accessible as Batch 0 root in the [`_legacyBatchNumToStateRoot`](https://evm.storage/eth/19489007/0x5132a183e9f3cb7c848b0aac5ae0c4f0491b7ab2/_legacyBatchNumToStateRoot#map) variable of PolygonRollupManager, is available [here](https://github.com/0xPolygonHermez/zkevm-contracts/blob/0d0e69a6f299e273343461f6350343cf4b048269/deployment/genesis.json).","dataFormat":"The trusted sequencer batches transactions according to the specifications documented [here](https://docs.polygon.technology/zkEVM/architecture/protocol/transaction-life-cycle/transaction-batching/)."},"stateValidation":{"description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.","categories":[{"title":"Prover Architecture","description":"Polygon zkEVM proof system PIL-STARK can be found [here](https://github.com/0xPolygonHermez/pil-stark)."},{"title":"ZK Circuits","description":"Polygon zkEVM circuits are built from PIL and are designed to replicate the behavior of the EVM. The source code can be found [here](https://github.com/0xPolygonHermez/zkevm-rom).","risks":[{"category":"Funds can be lost if","text":"the proof system is implemented incorrectly."}]},{"title":"Verification Keys Generation","description":"SNARK verification keys can be generated and checked against the Ethereum verifier contract using [this guide](https://github.com/0xPolygonHermez/zkevm-contracts/blob/main/verifyMainnetDeployment/verifyMainnetProofVerifier.md). The system requires a trusted setup."}],"proofVerification":{"shortDescription":"Polygon zkEVM is a ZK-EVM rollup on Ethereum.","aggregation":true,"requiredTools":[{"name":"circom","version":"v2.1.8","link":"https://github.com/iden3/circom/releases/tag/v2.1.8"}],"verifiers":[{"name":"PolygonZkEvmVerifier (current RollupType 5)","description":"Polygon zkEVM utilizes [PIL-STARK](https://github.com/0xPolygonHermez/pil-stark) as the main proving stack for their system. PIL-STARK is an implementation of the [eSTARK](https://eprint.iacr.org/2023/474) protocol. The circuits and the computations are represented using the PIL and zkASM custom languages. The protocol makes use of recursive proof aggregation. The final eSTARK proof is wrapped in a fflonk proof.","verified":"no","contractAddress":"0xc521580cd8586Cc688A7430F9DcE0f6A803F2883","chainId":1,"subVerifiers":[{"name":"Final wrap","proofSystem":"fflonk","mainArithmetization":"Plonkish","mainPCS":"KZG-fflonk","trustedSetup":"Powers of Tau 28"},{"name":"Aggregation circuit","proofSystem":"eSTARK","mainArithmetization":"eAIR","mainPCS":"FRI","trustedSetup":"None"},{"name":"Polygon zkEVM ROM","proofSystem":"eSTARK","mainArithmetization":"eAIR","mainPCS":"FRI","trustedSetup":"None","link":"https://github.com/0xPolygonHermez/zkevm-rom"}]},{"name":"PolygonZkEvmVerifier (old RollupType 3)","description":"Polygon zkEVM utilizes [PIL-STARK](https://github.com/0xPolygonHermez/pil-stark) as the main proving stack for their system. PIL-STARK is an implementation of the [eSTARK](https://eprint.iacr.org/2023/474) protocol. The circuits and the computations are represented using the PIL and zkASM custom languages. The protocol makes use of recursive proof aggregation. The final eSTARK proof is wrapped in a fflonk proof.","verified":"no","contractAddress":"0x0775e11309d75aA6b0967917fB0213C5673eDf81","chainId":1,"subVerifiers":[{"name":"Final wrap","proofSystem":"fflonk","mainArithmetization":"Plonkish","mainPCS":"KZG-fflonk","trustedSetup":"Powers of Tau 28"},{"name":"Aggregation circuit","proofSystem":"eSTARK","mainArithmetization":"eAIR","mainPCS":"FRI","trustedSetup":"None"},{"name":"Polygon zkEVM ROM","proofSystem":"eSTARK","mainArithmetization":"eAIR","mainPCS":"FRI","trustedSetup":"None","link":"https://github.com/0xPolygonHermez/zkevm-rom"}]}]}},"permissions":[{"name":"Sequencer","accounts":[{"address":"0x148Ee7dAF16574cD020aFa34CC658f8F3fbd2800","type":"EOA"}],"description":"Its sole purpose and ability is to submit transaction batches. In case they are unavailable users cannot rely on the force batch mechanism because it is currently disabled."},{"name":"Proposer (Trusted Aggregator)","accounts":[{"address":"0x6329Fe417621925C81c16F9F9a18c203C21Af7ab","type":"EOA"},{"address":"0x20A53dCb196cD2bcc14Ece01F358f1C849aA51dE","type":"EOA"}],"description":"The trusted proposer (called Aggregator) provides ZK proofs for all the supported systems. In case they are unavailable a mechanism for users to submit proofs on their own exists, but is behind a 5d delay for proving and a 5d delay for finalizing state proven in this way. These delays can only be lowered except during the emergency state."},{"name":"SecurityCouncil","description":"This is a Gnosis Safe with 6 / 8 threshold.  The Security Council is a multisig that can be used to trigger the emergency state which pauses bridge functionality, restricts advancing system state and removes the upgradeability delay.","accounts":[{"address":"0x37c58Dfa7BF0A165C5AAEdDf3e2EdB475ac6Dcb6","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0xFe45baf0F18c207152A807c1b05926583CFE2e4b","type":"EOA"},{"address":"0xaF46a0ddf80DFFB49C87656625E65A37499B261D","type":"EOA"},{"address":"0xBDc235cC9d6Baa641c5ae306bc83962475A5FEFf","type":"EOA"},{"address":"0x4c1665d6651ecEfa59B9B3041951608468b18891","type":"EOA"},{"address":"0x3ab9f4b964eE665F7CDf1d65f1cEEc6196B0D622","type":"EOA"},{"address":"0x49c15936864690bCd6af0ecaca8E874adFF30E86","type":"EOA"},{"address":"0x9F7dfAb2222A473284205cdDF08a677726d786A0","type":"EOA"},{"address":"0x21887c89368bf918346c62460e0c339113801C28","type":"EOA"}]},{"name":"Forced Batcher","accounts":[{"address":"0x242daE44F5d8fb54B198D03a94dA45B5a4413e21","type":"MultiSig"}],"description":"Sole account allowed to submit forced transactions. If this address is the zero address, anyone can submit forced transactions."},{"name":"RollupManagerAdminMultisig","description":"This is a Gnosis Safe with 2 / 3 threshold.  Admin of the PolygonRollupManager contract, can set core system parameters like timeouts and aggregator as well as deactivate emergency state. They can also upgrade the PolygonZkEVMEtrog contracts, but are restricted by a 10d delay unless rollup is put in the Emergency State.","accounts":[{"address":"0x242daE44F5d8fb54B198D03a94dA45B5a4413e21","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x4c1665d6651ecEfa59B9B3041951608468b18891","type":"EOA"},{"address":"0xA0B02B28920812324f1cC3255bd8840867d3f227","type":"EOA"},{"address":"0xEad77b01ea770839F7f576Cd1516Ff6A298d9dB2","type":"EOA"}]},{"name":"EscrowsAdmin","description":"This is a Gnosis Safe with 5 / 10 threshold.  Escrows Admin can instantly upgrade wstETH, DAI and USDC bridges.","accounts":[{"address":"0xf694C9e3a34f5Fa48b6f3a0Ff186C1c6c4FcE904","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x099198353446A9E3a20672eDC1Bd461E978842c3","type":"EOA"},{"address":"0xb771380f912E4b5F6beDdf81314C383c13F16ab5","type":"EOA"},{"address":"0xD09971D8ed6C6a5e57581e90d593ee5B94e348D4","type":"EOA"},{"address":"0xc4591c41e01a7a654B5427f39Bbd1dEe5bD45D1D","type":"EOA"},{"address":"0xE6Ee0F8D81170160d50ed77b9C91E6219473d43a","type":"EOA"},{"address":"0xd1B856ee12Bd00922cae8DD86ab068f8c0F95224","type":"EOA"},{"address":"0xF53D1fB2EeD22Cf1E8f7E90Da7f1CAe88344065F","type":"EOA"},{"address":"0xf56AE6520776934127AB68438d1b4652BCe07F8f","type":"EOA"},{"address":"0x4DE44Aa0Ef9DB64DF3eB3465d35D73d0409d44ed","type":"EOA"},{"address":"0x4E83124eD15b13265240B61EC9627797CCE1032E","type":"EOA"}]},{"name":"LocalAdmin","accounts":[{"address":"0x242daE44F5d8fb54B198D03a94dA45B5a4413e21","type":"MultiSig"}],"description":"Admin of the PolygonZkEVMEtrog contract, can set core system parameters like timeouts, sequencer, activate forced transactions and update the DA mode. In the case on Polygon zkEVM, this is also the RollupManagerAdminMultisig."}],"contracts":{"addresses":[{"name":"PolygonZkEVMEtrog","address":"0x519E42c24163192Dca44CD3fBDCEBF6be9130987","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"],"implementations":["0x2650a9a4fC64f63F573EF0F405064EF54BC46f71"]},"chain":"ethereum","description":"The main contract of the Polygon zkEVM. Contains sequenced transaction batch hashes and forced transaction logic.","upgradableBy":["RollupManagerAdminMultisig"],"upgradeDelay":"None","upgradeConsiderations":"Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."},{"name":"PolygonzkEVMVerifier","address":"0xc521580cd8586Cc688A7430F9DcE0f6A803F2883","chain":"ethereum","description":"An autogenerated contract that verifies ZK proofs in the PolygonRollupManager system."},{"name":"PolygonRollupManager","address":"0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],"implementations":["0x3b82Da772c825283d85d5d6717A77C6Ff582053b"]},"chain":"ethereum","description":"It defines the rules of the system including core system parameters, permissioned actors as well as emergency procedures. The emergency state can be activated either by the Security Council, by proving a soundness error or by presenting a sequenced batch that has not been aggregated before a 7d timeout. This contract receives L2 state roots as well as ZK proofs.","upgradableBy":["RollupManagerAdminMultisig"],"upgradeDelay":"None","upgradeConsiderations":"Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."},{"name":"Bridge","address":"0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],"implementations":["0x0FeB850B183C57534b56b7d56520133C8f9BDB65"]},"chain":"ethereum","description":"The escrow contract for user funds. It is mirrored on the L2 side and can be used to transfer both ERC20 assets and arbitrary messages. To transfer funds a user initiated transaction on both sides is required.","upgradableBy":["RollupManagerAdminMultisig"],"upgradeDelay":"None","upgradeConsiderations":"Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."},{"name":"GlobalExitRootV2","address":"0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x0F99738B2Fc14D77308337f3e2596b63aE7BCC4A"],"implementations":["0x2E38cD55163137483E30580Cb468C2dFf1d85077"]},"chain":"ethereum","description":"Synchronizes deposit and withdraw merkle trees across L1 and the L2s. The global root from this contract is injected into the L2 contracts.","upgradableBy":["RollupManagerAdminMultisig"],"upgradeDelay":"None","upgradeConsiderations":"Even though there is a 10d Timelock for upgrades, forced transactions are disabled. Even if they were to be enabled, user withdrawals can be censored up to 15d."},{"name":"Timelock","address":"0xEf1462451C30Ea7aD8555386226059Fe837CA4EF","chain":"ethereum","description":"Contract upgrades have to go through a 10d timelock unless the Emergency State is activated. It can also add rollup types that can be used to upgrade verifier contracts of existing systems. It is controlled by the ProxyAdminOwner."}],"references":[{"text":"State injections - stateRoot and exitRoot are part of the validity proof input.","href":"https://etherscan.io/address/0x3b82Da772c825283d85d5d6717A77C6Ff582053b"}],"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is a 10d delay on code upgrades."}]},"upgradesAndGovernance":"All main contracts and the verifier are upgradable by the 2 / 3 `ProxyAdminOwner` through a timelock that owns `SharedProxyAdmin`. Addresses of trusted sequencer, aggregator and operational parameters (like fees) on the `PolygonRollupManager` can be instantly set by the `ProxyAdminOwner`. Escrow contracts are upgradable by the `EscrowsAdmin` 5 / 10 multisig.\n\n`PolygonZkEVMTimelock` is a modified version of TimelockController that disables delay in case of a manually enabled or triggered emergency state in the `PolygonRollupManager`. It otherwise has a 10d delay.\n\nThe process to upgrade the `PolygonRollupManager`-implementation and / or the verifier has two steps: 1) A newRollupType-transaction is added by the `ProxyAdminOwner` to the timelock, which in turn can call the `addNewRollupType()` function in the `PolygonRollupManager`. In a non-emergency state, this allows potential reviews of the new rollup type while it sits in the timelock. 2) After the delay period, the rollup implementation can be upgraded to the new rollup type by the `ProxyAdminOwner` calling the `updateRollup()`-function in the `PolygonRollupManager` directly.\n\nThe critical roles in the `PolygonRollupManager` can be changed through the timelock, while the trusted Aggregator role can be granted by the `ProxyAdminOwner` directly.\n\nThe 6 / 8 `SecurityCouncil` multisig can manually enable the emergency state in the `PolygonRollupManager`.","milestones":[{"name":"Polygon zkEVM Etrog upgrade","link":"https://docs.polygon.technology/zkEVM/architecture/protocol/etrog-upgrade/#etrog-upgrade","date":"2024-02-13","description":"Polygon zkEVM is upgraded to the Polygon Etrog version.","type":"general"},{"name":"Polygon zkEVM Mainnet Beta is Live","link":"https://polygon.technology/blog/polygon-zkevm-mainnet-beta-is-live?utm_source=twitter&utm_medium=social&utm_campaign=zkevm-launch&utm_term=mainnet-beta-live&utm_content=blog","date":"2023-03-27T00:00:00Z","description":"Polygon zkEVM public beta launched.","type":"general"}],"knowledgeNuggets":[{"title":"State diffs vs raw tx data","url":"https://twitter.com/krzKaczor/status/1641505354600046594","thumbnail":"l2beat-03.jpg"}],"badges":["PolygonCDK","EthereumCalldata","AggLayer","EVM"]}