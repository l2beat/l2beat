{"type":"layer2","id":"paradex","badges":["CairoVM","EthereumBlobs","StarknetFork","SHARP"],"display":{"name":"Paradex","slug":"paradex","provider":"Starknet","description":"Paradex is a high-performance crypto-derivatives exchange built on a Starknet Appchain.","purposes":["Exchange"],"category":"ZK Rollup","links":{"websites":["https://paradex.trade/"],"apps":["https://app.paradex.trade","https://paradex.trade/stats"],"documentation":["https://docs.paradex.trade/"],"explorers":[],"repositories":["https://github.com/tradeparadex"],"socialMedia":["https://twitter.com/tradeparadex","https://discord.com/invite/paradex"]},"liveness":{"explanation":"Paradex is a ZK rollup that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. Proofs are aggregated with other projects using SHARP and state updates have to refer to proved claims."},"finality":{"finalizationPeriod":0}},"config":{"escrows":[{"address":"0xE3cbE3A636AB6A754e9e41B12b09d09Ce9E53Db3","newVersion":true,"sinceTimestamp":1692341159,"tokens":["USDC"],"contract":{"address":"0xE3cbE3A636AB6A754e9e41B12b09d09Ce9E53Db3","upgradeability":{"proxyType":"StarkWare proxy","admins":["0xa1F2ecaC6E3E593ED58B9ac5fa4B97962892E77c"],"implementations":["0x8A4e51ff0F2a45899519e6049FB2D1F038Be1e77"],"immutable":false},"chain":"ethereum","description":"Paradex USDC Escrow. The current bridge cap is 30.00â€ŠM USDC.","upgradableBy":["USDC Escrow owner"],"upgradeDelay":"0s"},"chain":"ethereum","includeInTotal":true}],"trackedTxs":[{"uses":[{"type":"liveness","subtype":"proofSubmissions"}],"query":{"formula":"sharpSubmission","sinceTimestamp":1636978914,"untilTimestamp":1704729971,"programHashes":["3258367057337572248818716706664617507069572185152472699066582725377748079373"]}},{"uses":[{"type":"liveness","subtype":"proofSubmissions"}],"query":{"formula":"sharpSubmission","sinceTimestamp":1704729971,"untilTimestamp":1706626427,"programHashes":["54878256403880350656938046611252303365750679698042371543935159963667935317"]}},{"uses":[{"type":"liveness","subtype":"proofSubmissions"}],"query":{"formula":"sharpSubmission","sinceTimestamp":1706626427,"untilTimestamp":1710346919,"programHashes":["2479841346739966073527450029179698923866252973805981504232089731754042431018"]}},{"uses":[{"type":"liveness","subtype":"proofSubmissions"}],"query":{"formula":"sharpSubmission","sinceTimestamp":1710346919,"untilTimestamp":1710764843,"programHashes":["109586309220455887239200613090920758778188956576212125550190099009305121410"]}},{"uses":[{"type":"liveness","subtype":"proofSubmissions"}],"query":{"formula":"sharpSubmission","sinceTimestamp":1710764843,"untilTimestamp":1725811535,"programHashes":["3383082961563516565935611087683915026448707331436034043529592588079494402084"]}},{"uses":[{"type":"liveness","subtype":"proofSubmissions"}],"query":{"formula":"sharpSubmission","sinceTimestamp":1725811535,"programHashes":["853638403225561750106379562222782223909906501242604214771127703946595519856"]}},{"uses":[{"type":"liveness","subtype":"proofSubmissions"}],"query":{"formula":"sharpSubmission","sinceTimestamp":1725811535,"programHashes":["1161178844461337253856226043908368523817098764221830529880464854589141231910"]}},{"uses":[{"type":"liveness","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0xF338cad020D506e8e3d9B4854986E0EcE6C23640","selector":"0x77552641","functionSignature":"function updateState(uint256[] programOutput, uint256 onchainDataHash, uint256 onchainDataSize)","sinceTimestamp":1689850631}},{"uses":[{"type":"liveness","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0xF338cad020D506e8e3d9B4854986E0EcE6C23640","selector":"0xb72d42a1","functionSignature":"function updateStateKzgDA(uint256[] programOutput, bytes kzgProof)","sinceTimestamp":1710346919,"untilTimestamp":1725811535}},{"uses":[{"type":"liveness","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0xF338cad020D506e8e3d9B4854986E0EcE6C23640","selector":"0x507ee528","functionSignature":"function updateStateKzgDA(uint256[] programOutput, bytes[] kzgProofs)","sinceTimestamp":1725811667}}],"finality":{"lag":0,"type":"Starknet","minTimestamp":1725811667,"stateUpdate":"disabled"}},"dataAvailability":{"layer":{"value":"Ethereum (blobs or calldata)","sentiment":"good","description":"The data is posted to Ethereum as calldata or blobs."},"bridge":{"value":"Enshrined","sentiment":"good","description":"The validating bridge has access to all the data, as it is posted on chain."},"mode":"State diffs"},"riskView":{"stateValidation":{"value":"ZK proofs (ST)","description":"STARKs are zero knowledge proofs that ensure state correctness.","sentiment":"good","definingMetric":null,"sources":[{"contract":"Paradex","references":["https://etherscan.io/address/0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC#code"]}]},"dataAvailability":{"value":"Onchain (SD)","description":"All of the data (SD = state diffs) needed for proof construction is published onchain.","sentiment":"good","definingMetric":null,"sources":[{"contract":"Paradex","references":["https://etherscan.io/address/0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC#code"]}]},"exitWindow":{"value":"None","description":"There is no window for users to exit in case of an unwanted regular upgrade since contracts are instantly upgradable.","sentiment":"bad","definingMetric":0},"sequencerFailure":{"value":"No mechanism","description":"There is no mechanism to have transactions be included if the sequencer is down or censoring.","sentiment":"bad","sources":[{"contract":"Paradex","references":["https://etherscan.io/address/0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC#code#F1#L253"]}]},"proposerFailure":{"value":"Cannot withdraw","description":"Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen.","sentiment":"bad","definingMetric":null},"destinationToken":{"value":"Canonical","description":"USDC transferred is considered canonical as it is the basis of the perpetual protocol on the chain.","sentiment":"good"},"validatedBy":{"value":"Ethereum","description":"Smart contracts on Ethereum validate all bridge transfers.","sentiment":"good"}},"stage":{"stage":"Stage 0","missing":{"nextStage":"Stage 1","requirements":["Users' withdrawals can be censored by the permissioned operators.","Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."]},"summary":[{"stage":"Stage 0","requirements":[{"satisfied":true,"description":"The project calls itself a rollup."},{"satisfied":true,"description":"State roots are posted to Ethereum L1."},{"satisfied":true,"description":"Inputs for the state transition function are posted to Ethereum L1."},{"satisfied":false,"description":"No source-available node exists that can recreate the state from L1 data."}]},{"stage":"Stage 1","requirements":[{"satisfied":true,"description":"A complete and functional proof system is deployed."},{"satisfied":false,"description":"Users' withdrawals can be censored by the permissioned operators."},{"satisfied":false,"description":"Upgrades executed by actors with more centralized control than a Security Council provide less than 7d for users to exit if the permissioned operator is down or censoring."}]},{"stage":"Stage 2","requirements":[{"satisfied":false,"description":"Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."}]}],"message":{"type":"warning","text":"There is no available node software that can reconstruct the state from L1 data, hence there is no way to verify that this system is a rollup."}},"technology":{"stateCorrectness":{"name":"Validity proofs ensure state correctness","description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.","risks":[],"references":[]},"newCryptography":{"name":"Zero knowledge STARK cryptography is used","description":"Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.","risks":[{"category":"Funds can be lost if","text":"the proof system is implemented incorrectly."}],"references":[{"text":"STARK Core Engine Deep Dive","href":"https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"}]},"dataAvailability":{"name":"All data required to reconstruct rollup state is published on chain","description":"State diffs are publish on-chain as blob or calldata on every state update. The state diffs contain information on every contact whose storage was updated, and additional information on contract deployments. From diffs full system state can be recovered. Contracts' code is not published on L1, but can be trustlessly verified if available elsewhere.","risks":[],"references":[{"text":"On-Chain Data - Starknet documentation","href":"https://docs.starknet.io/documentation/architecture_and_concepts/Network_Architecture/on-chain-data/"}]},"operator":{"name":"The system has a centralized operator","description":"The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[]},"forceTransactions":{"name":"Users can't force any transaction","description":"There is no general mechanism to force the sequencer to include the transaction.","risks":[{"category":"Users can be censored if","text":"the operator refuses to include their transactions."}],"references":[{"text":"Censorship resistance of Starknet - Forum Discussion","href":"https://community.starknet.io/t/censorship-resistance/196"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof. Note that the withdrawal request can be censored by the Sequencer.","risks":[{"category":"Funds can be frozen if","text":"the operator censors withdrawal transaction."}],"references":[{"text":"Withdrawing is based on l2 to l1 messages - Starknet documentation","href":"https://book.cairo-lang.org/ch16-04-L1-L2-messaging.html#sending-messages-from-starknet-to-ethereum"}]},{"name":"Emergency exit","risks":[],"description":"There is no generic escape hatch mechanism as Starknet cannot be forced by users into a frozen state. Note that a freezing mechanism on L2, to be secure, requires anti-censorship protection.","references":[]}]},"contracts":{"addresses":[{"name":"Paradex","address":"0xF338cad020D506e8e3d9B4854986E0EcE6C23640","upgradeability":{"proxyType":"StarkWare proxy","admins":["0x2E6fe05FE3f9a6622092Fd75439D53f01eb8A74f","0x0a64d3D7747549aF6d65C225D56ac8f71e436B93"],"implementations":["0x47103A9b801eB6a63555897d399e4b7c1c8Eb5bC"],"immutable":false},"chain":"ethereum","description":"Paradex contract received verified state roots from the Sequencer, allows users to read L2 -> L1 messages and send L1 -> L2 messages.","upgradeDelay":"No delay","upgradableBy":["Paradex owner"]},{"name":"SHARPVerifierProxy","address":"0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60","upgradeability":{"proxyType":"StarkWare proxy","admins":["0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6","0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4"],"implementations":["0xD4C4044ACa68ebBcB81B13cC2699e1Bca2d3F458"],"immutable":false},"chain":"ethereum","description":"CallProxy for GpsStatementVerifier."},{"name":"SHARPVerifier","address":"0x9fb7F48dCB26b7bFA4e580b2dEFf637B13751942","chain":"ethereum","description":"Starkware SHARP verifier used collectively by Starknet, Sorare, ImmutableX, Apex, Myria, rhino.fi and Canvas Connect. It receives STARK proofs from the Prover attesting to the integrity of the Execution Trace of these Programs including correctly computed state root which is part of the Program Output."},{"name":"FriStatementContract","address":"0x30EfaAA99f8eFe310D9FdC83072e2a04c093d400","chain":"ethereum","description":"Part of STARK Verifier."},{"name":"MerkleStatementContract","address":"0x32a91Ff604AB2aDCd832e91D68b2f3f25358FdAd","chain":"ethereum","description":"Part of STARK Verifier."},{"name":"CairoBootloaderProgram","address":"0x58600A1Dc51dcF7D4F541a8f1F5C6c6AA86cc515","chain":"ethereum","description":"Part of STARK Verifier."},{"name":"MemoryPageFactRegistry","address":"0xe583BcDE0160b637330b27a3ea1F3c02ba2eC460","chain":"ethereum","description":"MemoryPageFactRegistry is one of the many contracts used by SHARP verifier. This one is important as it registers all necessary on-chain data."},{"name":"OldMemoryPageFactRegistry","address":"0xFD14567eaf9ba941cB8c8a94eEC14831ca7fD1b4","chain":"ethereum","description":"Same as MemoryPageFactRegistry but stores facts proved by the old SHARP Verifier, used as a fallback."}],"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is no delay on code upgrades.","isCritical":true}]},"permissions":[{"name":"Paradex owner","accounts":[{"address":"0x2E6fe05FE3f9a6622092Fd75439D53f01eb8A74f","type":"EOA"},{"address":"0x0a64d3D7747549aF6d65C225D56ac8f71e436B93","type":"MultiSig"}],"description":"Can upgrade implementation of the system, potentially gaining access to all funds stored in the bridge and potentially allowing fraudulent state to be posted. Currently there is 0s delay before the upgrade."},{"name":"Paradex Implementation Governors","accounts":[{"address":"0x8Cef438c3e363e15F9619e32D9b5D04ff777D670","type":"EOA"},{"address":"0x0a64d3D7747549aF6d65C225D56ac8f71e436B93","type":"MultiSig"}],"description":"The governors are responsible for: appointing operators, changing program hash, changing config hash, changing message cancellation delay. There is no delay on governor actions."},{"name":"SHARP Verifier Governors","accounts":[{"address":"0x3DE55343499f59CEB3f1dE47F2Cd7Eab28F2F5C6","type":"EOA"},{"address":"0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4","type":"MultiSig"}],"description":"Can upgrade implementation of SHARP Verifier, potentially with code approving fraudulent state. Currently there is 0s delay before the upgrade."},{"name":"SHARPVerifierGovernorMultisig","description":"This is a Gnosis Safe with 2 / 4 threshold.  SHARP Verifier Governor.","accounts":[{"address":"0x21F9eC47b19d95b5C2DDFB6Ae5D4F92fAdacAEc4","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x0405107a60391Eb51821be373ff978115Ee58488","type":"EOA"},{"address":"0x59232aC80E6d403b6381393e52f4665ECA328558","type":"EOA"},{"address":"0xebc8416179fE90854fe8B3f774801165572cfD7F","type":"EOA"},{"address":"0x955B978F3ee7818dA71fA25c676062E6BC462Fec","type":"EOA"}]},{"name":"Operators","accounts":[{"address":"0xC70ae19B5FeAA5c19f576e621d2bad9771864fe2","type":"EOA"}],"description":"Allowed to post state updates. When the operator is down the state cannot be updated."},{"name":"USDC Escrow owner","accounts":[{"address":"0xa1F2ecaC6E3E593ED58B9ac5fa4B97962892E77c","type":"EOA"}],"description":"Can upgrade implementation of the USDC Escrow, potentially gaining access to all funds stored in the bridge. Currently there is 0s delay before the upgrade."}],"milestones":[{"name":"Paradex starts using blobs","link":"https://twitter.com/tradeparadex/status/1768306190596153799","date":"2024-03-26T00:00:00Z","description":"Paradex starts publishing data to blobs.","type":"general"},{"name":"Open Beta Mainnet Launch","link":"https://twitter.com/tradeparadex","date":"2023-10-01T00:00:00.00Z","description":"Paradex launches Open Beta on Mainnet.","type":"general"}],"knowledgeNuggets":[{"title":"Understand StarkWare #1","url":"https://twitter.com/bkiepuszewski/status/1480473352213041152","thumbnail":"starkware-01.jpg"},{"title":"Understand StarkWare #2","url":"https://twitter.com/bkiepuszewski/status/1480804584926949377","thumbnail":"starkware-02.jpg"},{"title":"Understand StarkWare #3","url":"https://twitter.com/bkiepuszewski/status/1481173682219270146","thumbnail":"starkware-03.jpg"},{"title":"Understand StarkWare #4","url":"https://twitter.com/bkiepuszewski/status/1481521079562784769","thumbnail":"starkware-04.jpg"}]}