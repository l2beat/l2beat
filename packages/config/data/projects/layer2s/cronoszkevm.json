{"type":"layer2","id":"cronoszkevm","badges":["EVM","CustomDA","ZKStack","ElasticChain"],"display":{"upgradesAndGovernanceImage":"zk-stack","name":"Cronos zkEVM","slug":"cronoszkevm","description":"Cronos zkEVM is a general-purpose Validium on Ethereum built on the ZK Stack, scaling the existing portfolio of Cronos apps and chains.","purposes":["Universal"],"links":{"websites":["https://cronos.org/zkevm"],"apps":["https://zkevm.cronos.org/bridge"],"documentation":["https://docs-zkevm.cronos.org/"],"explorers":["https://explorer.zkevm.cronos.org/"],"repositories":[],"socialMedia":["https://x.com/cronos_chain","https://discord.com/invite/cronos"]},"activityDataSource":"Blockchain RPC","provider":"ZK Stack","category":"Validium","liveness":{"explanation":"Cronos zkEVM is a Validium that posts commitments to the L1. Transactions within a state diff can be considered final when proven on L1 using a ZK proof, except that an operator can revert them if not executed yet. Currently, there is at least a 21h delay between state diffs verification and the execution of the corresponding state actions."},"finality":{"finalizationPeriod":75600,"warnings":{"timeToInclusion":{"sentiment":"warning","value":"Proven but not executed batches can be reverted by the validator(s) or the StateTransitionManager."}}}},"config":{"associatedTokens":["zkCRO"],"escrows":[{"address":"0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB","newVersion":true,"sinceTimestamp":1717521479,"tokens":["ybETH","CRO","USDC","WBTC","zkCRO"],"contract":{"address":"0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],"implementations":["0xb56A8225A745756DD215faf22E4796f373561AcD"]},"chain":"ethereum","description":"Shared bridge for depositing tokens to Cronos zkEVM and other ZK stack chains.","upgradableBy":["ProtocolUpgradeHandler"],"upgradeDelay":"4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."},"chain":"ethereum","includeInTotal":true,"sharedEscrow":{"type":"ElasticChian","l2BridgeAddress":"0x309429DE3621992Cb0ab8982A448c9Cc5c38405b","l2EtherAddress":"0x898B3560AFFd6D955b1574D87EE09e46669c60eA","tokensToAssignFromL1":["zkCRO"]}}],"transactionApi":{"type":"rpc","startBlock":1,"defaultUrl":"https://mainnet.zkevm.cronos.org","defaultCallsPerMinute":1500}},"chainConfig":{"name":"cronoszkevm","chainId":388,"coingeckoPlatform":"cronos-zkevm","explorerUrl":"https://explorer.zkevm.cronos.org/","minTimestampForTvl":1722394995},"dataAvailability":{"layer":{"value":"External","sentiment":"warning","description":"The data is posted off chain."},"bridge":{"value":"None","sentiment":"bad","description":"There is no bridge that can attest if the data has been made available."},"mode":"State diffs (compressed)"},"riskView":{"stateValidation":{"value":"ZK proofs (ST, SN)","description":"STARKs and SNARKs are zero knowledge proofs that ensure state correctness. STARKs proofs are wrapped in SNARKs proofs for efficiency. SNARKs require a trusted setup.","sentiment":"good","definingMetric":null,"sources":[{"contract":"ValidatorTimelock","references":["https://etherscan.io/address/0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E#code#F1#L169"]},{"contract":"CronosZkEvm","references":["https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L448","https://etherscan.io/address/0xE60E94fCCb18a81D501a38959E532C0A85A1be89#code#F6#L23"]},{"contract":"Verifier","references":["https://etherscan.io/address/0x70F3FBf8a427155185Ec90BED8a3434203de9604#code#F1#L343"]}]},"dataAvailability":{"value":"External","description":"Proof construction and state derivation rely fully on data that is NOT published onchain.","sentiment":"bad","sources":[{"contract":"ValidatorTimelock","references":["https://etherscan.io/address/0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E#code#F1#L120","https://etherscan.io/tx/0x9dbf29985eae00b7a1b7dbd5b21eedfb287be17310eb8bef6c524990b6928f63"]},{"contract":"CronosZkEvm","references":["https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L216","https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L52","https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F11#L120"]}]},"exitWindow":{"value":"None","sentiment":"bad","description":"There is no window for users to exit in case of an unwanted standard upgrade bacause the central operator can censor withdrawal transactions by implementing a TransactionFilterer with no delay. The standard upgrade delay is 4d 21h.","sources":[{"contract":"CronosZkEvm","references":["https://etherscan.io/address/0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a#code#F1#L114","https://etherscan.io/address/0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a#code#F1#L128"]}]},"sequencerFailure":{"value":"Enqueue via L1","description":"Users can submit transactions to an L1 queue, but can't force them. The sequencer cannot selectively skip transactions but can stop processing the queue entirely. In other words, if the sequencer censors or is down, it is so for everyone.","sentiment":"warning","sources":[{"contract":"CronosZkEvm","references":["https://etherscan.io/address/0xCDB6228b616EEf8Df47D69A372C4f725C43e718C#code#F1#L53","https://etherscan.io/address/0xE60E94fCCb18a81D501a38959E532C0A85A1be89#code#F1#L95"]}]},"proposerFailure":{"value":"Cannot withdraw","description":"Only the whitelisted proposers can publish state roots on L1, so in the event of failure the withdrawals are frozen. There is a decentralized Governance system that can attempt changing Proposers with an upgrade.","sentiment":"warning","definingMetric":null,"sources":[{"contract":"CronosZkEvm","references":["https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L219"]}]},"destinationToken":{"value":"Native & Canonical","description":"ETH transferred via this bridge is used to pay for gas and other tokens transferred are considered canonical on the destination chain.","sentiment":"good"},"validatedBy":{"value":"Ethereum","description":"Smart contracts on Ethereum validate all bridge transfers.","sentiment":"good"}},"stage":{"stage":"NotApplicable"},"technology":{"newCryptography":{"name":"Zero knowledge STARK and SNARK cryptography is used","description":"Despite their production use zkSTARKs and zkSNARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace. In addition zkSNARKs require a trusted setup to operate.","risks":[{"category":"Funds can be lost if","text":"the proof system is implemented incorrectly."}],"references":[]},"dataAvailability":{"name":"Data is not stored on chain","description":"The transaction data is not recorded on the Ethereum main chain. Transaction data is stored off-chain and only the hashes are posted on-chain by the centralized Sequencer.","risks":[{"category":"Funds can be lost if","text":"the external data becomes unavailable.","isCritical":true}],"references":[{"text":"ExecutorFacet - _commitOneBatch() function","href":"https://etherscan.io/address/0xaD193aDe635576d8e9f7ada71Af2137b16c64075#code#F1#L53"}]},"operator":{"name":"The system has a centralized operator","description":"The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[]},"forceTransactions":{"name":"Users can force any transaction via L1","description":"If a user is censored by the L2 Sequencer, they can try to force their transaction via an L1 queue. Right now there is no mechanism that forces L2 Sequencer to include        transactions from the queue in an L2 block. The operator can implement a TransactionFilterer that censors forced transactions.","risks":[{"category":"Users can be censored if","text":"the operator refuses to include their transactions."},{"category":"Users can be censored if","text":"the operator implements a TransactionFilterer, which is possible without delay."}],"references":[{"text":"L1 - L2 interoperability - Developer's documentation","href":"https://docs.zksync.io/build/developer-reference/l1-l2-interoperability#priority-queue"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction requires a merkle proof.","risks":[],"references":[{"text":"Withdrawing funds - ZKsync documentation","href":"https://docs.zksync.io/build/developer-reference/bridging-assets"}]},{"name":"Forced exit","description":"If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request or halt all messages from L1, including all forced withdrawals and deposits. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.","risks":[],"references":[]}]},"upgradesAndGovernance":"\n    There are two main paths for contract upgrades in the shared ZK stack ecosystem - standard and emergency - both converging on the shared upgrade proxy contract ProtocolUpgradeHandler. \n    The standard path involves a governance proposal and voting through the DAO, multiple timelock delays and finally approval by the Guardians or 6 SecurityCouncil participants. \n    The emergency path allows for contract upgrades without any delay by the EmergencyUpgradeBoard, which acts as a 3/3 Multisig between SecurityCouncil, Guardians and the FoundationMultisig. \n    ## Standard path\n    ### On ZKsync Era\n    Delegates can start new proposals by reaching a threshold of 21M ZK tokens on the ZKsync Era Rollup's ZkProtocolGovernor contract.\n    This launches a 7d 'voting delay' after which the 7d voting period starts. During these first two periods, the proposal can be canceled by the proposer or if it falls below the proposing threshold.\n    A proposal is only successful if it reaches both quorum (630M ZK tokens) and simple majority. When it reaches quorum, the voting period is reset to 7d. \n    In the successful case, it can be queued in the 0s timelock which forwards it to Ethereum as an L2->L1 log. \n    ### On Ethereum\n    After the execution of the proposal-containing batch (21h delay), the proposal is now picked up by the ProtocolUpgradeHandler and enters the 3d 'legal veto period'.\n    This serves as a window in which a veto could be coordinated offchain, to be then enforced by non-approval of Guardians and SecurityCouncil. A threshold of 2 Guardians can extend the veto period to 7d. \n    After this a proposal enters a *waiting* state of 30d, from which it can be immediately approved (cancelling the delay) by 6 participants of the SecurityCouncil. \n    For the unlikely case that the SC does not approve here, the Guardians can instead approve the proposal, or nobody. In the two latter cases, the waiting period is enforced in full. \n    A proposal cannot be actively cancelled in the ProtocolUpgradeHandler, but will be expired if not approved within the waiting period. An approved proposal now enters the *pendingExecution* state for a final delay of 1d, and can then be executed.\n    ### Other governance tracks\n    There are two other tracks of Governance also starting with DAO Delegate proposals the ZKsync Era rollup: 1) Token Program Proposals that add new minters, allocations or upgrade the ZK token and \n    2) Governance Advisory Proposals that e.g. change the ZK Credo or other offchain Governance Procedures without onchain targets. \n    The protocol for these two other tracks is similar to the first part of the standard path described above (albeit having different quorum and timelock values), and not passing over to the Ethereum L1. \n    Further customizations are that the ZkFoundationMultisig can propose to the ZkTokenGovernor without a threshold and that the Guardians' L2 alias can cancel proposals in the ZkTokenGovernor and the ZkGovOpsGovernor.\n    ## Emergency path \n    SecurityCouncil (9 / 12), Guardians (5 / 8) and ZkFoundationMultisig (3 / 5) form a de-facto 3/3 Multisig \n    by pushing an immediate upgrade proposal through the EmergencyUpgradeBoard, which circumvents all delays and executes immediately via the ProtocolUpgradeHandler.\n    ## Upgrade Delays\n    The cumulative duration of the upgrade paths from the moment of a voted 'successful' proposal is 4d 21h or 8d 21h (depending on Guardians extending the LegalVetoPeriod) for Standard, 0 for Emergency and 34d 21h for the path in which the SecurityCouncil is not approving the proposal.\n    ## Freezing\n    The SecurityCouncil can freeze (pause withdrawals and settlement) all chains connected to the current StateTransitionManager. \n    Either for a softFreeze of 12h or a hardFreeze of 7d. \n    After a softFreeze and / or a hardFreeze, a proposal from the EmergencyUpgradeBoard has to be passed before subsequent freezes are possible. \n    Only the SecurityCouncil can unfreeze an active freeze.\n    ## Elastic Chain Operator and ChainAdmin\n    Apart from the paths that can upgrade all shared implementations, the ZK stack governance system defines other roles that can modify the system: \n    A single *Elastic Chain operator* role that governs parameters in the shared contracts and a *ChainAdmin* role (in the chain-specific diamond contract) for managing parameters of each individual Hyperchain that builds on the stack.\n    These chain-specific actions include setting a transaction filterer that can censor L1 -> L2 messages, setting fee parameters and adding / removing Validators in the ValidatorTimelock. \n    ZKsync Era's ChainAdmin differs from the others as it also has the above *Elastic Chain Operator* role in the shared ZK stack contracts.\n    ","permissions":[{"name":"SecurityCouncil","accounts":[{"address":"0xBDFfCC71FE84020238F2990a6D2954e87355De0D","type":"Contract"}],"chain":"ethereum","description":"One of the three signers of the EmergencyUpgradeBoard. Can freeze all ZK stack chains. Can approve governance proposals in the ProtocolUpgradeHandler. The default threshold for the members of this contract is 9 / 12 but is customized for certain actions."},{"name":"SecurityCouncil members","accounts":[{"address":"0x13f07d9BF17615f6a17F272fe1A913168C275A66","type":"Contract"},{"address":"0x34Ea62D4b9bBB8AD927eFB6ab31E3Ab3474aC93a","type":"Contract"},{"address":"0x35eA56fd9eAd2567F339Eb9564B6940b9DD5653F","type":"Contract"},{"address":"0x3888777686F0b0d8c3108fc22ad8DE9E049bE26F","type":"Contract"},{"address":"0x69462a81ba94D64c404575f1899a464F123497A2","type":"Contract"},{"address":"0x725065b4eB99294BaaE57AdDA9c32e42F453FA8A","type":"Contract"},{"address":"0x84BF0Ac41Eeb74373Ddddae8b7055Bf2bD3CE6E0","type":"Contract"},{"address":"0x9B39Ea22e838B316Ea7D74e7C4B07d91D51ccA88","type":"Contract"},{"address":"0x9B8Be3278B7F0168D82059eb6BAc5991DcdfA803","type":"Contract"},{"address":"0xB7aC3A79A23B148c85fba259712c5A1e7ad0ca44","type":"Contract"},{"address":"0xc3Abc9f9AA75Be8341E831482cdA0125a7B1A23e","type":"Contract"},{"address":"0xFB90Da9DC45378A1B50775Beb03aD10C7E8DC231","type":"Contract"}],"description":"Members of the SecurityCouncil. The members are mostly low-threshold multisigs themselves. ","references":[{"text":"Security Council members - ZK Nation docs","href":"https://docs.zknation.io/zksync-governance/schedule-3-zksync-security-council"}]},{"name":"Guardians","accounts":[{"address":"0xD677e09324F8Bb3cC64F009973693f751c33A888","type":"Contract"}],"chain":"ethereum","description":"Is one of the three signers of the EmergencyUpgradeBoard. Can extend the legal veto period and / or approve governance proposals in the ProtocolUpgradeHandler. Permissioned to cancel non-protocolUpgrade proposals on L2. The default threshold for the members of this contract is 5 / 8 but is customized for certain actions."},{"name":"ZKsync Guardians","accounts":[{"address":"0x015318c16AE443a20DE0A776dB06a59F0D279057","type":"MultiSig"},{"address":"0x178D8Eb1A1fb81B5102808A83318Bb04C6a9fC6D","type":"MultiSig"},{"address":"0x2A90830083C5Ca1f18d7AA7fCDC2998f93475384","type":"MultiSig"},{"address":"0x538612F6eba6ff80FBD95D60dCDee16b8FfF2c0f","type":"MultiSig"},{"address":"0x55c671BcE13120387Ded710A1d1b80C0e3d8E857","type":"MultiSig"},{"address":"0x590926dBCDfD19627c3BbD2A6Eb96DeC7a3AbF69","type":"MultiSig"},{"address":"0x6D26874130A174839b9cd8CB87Ed4E09D0c1a5f0","type":"MultiSig"},{"address":"0xCe7a3dFcc35602155809920Ff65e093aa726f6cf","type":"MultiSig"}],"description":"Members of the Guardians contract, usually 1/1 Gnosis multisigs themselves. ","references":[{"text":"ZKsync Guardians - ZK Nation docs","href":"https://docs.zknation.io/zksync-governance/schedule-4-zksync-guardians"}]},{"name":"ZkFoundationMultisig","description":"This is a Gnosis Safe with 3 / 5 threshold.  Is one of the three signers of the EmergencyUpgradeBoard.","accounts":[{"address":"0xbC1653bd3829dfEc575AfC3816D4899cd103B51c","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x56B3120c32AE9C3188fafc5Cc542F9c53B0b2222","type":"EOA"},{"address":"0x441e5c8910Ef39996B2D01499509861228cbc2d1","type":"EOA"},{"address":"0xd5966E3dd25f6086b6aD7D7Fa3292d11b988da95","type":"EOA"},{"address":"0x0B2E7ffbcD1E3e6f5034555Fb638889FE7564709","type":"EOA"},{"address":"0x610e45F112e0c8a9aA7137677C83E7A198A1b991","type":"EOA"}]},{"name":"ProtocolUpgradeHandler","accounts":[{"address":"0x8f7a9912416e8AdC4D9c21FAe1415D3318A11897","type":"Contract"}],"chain":"ethereum","description":"Owner and upgrade Admin of all shared ZK stack contracts. Can also upgrade the individual Hyperchain diamond contracts."},{"name":"Matter Labs Multisig","description":"This is a Gnosis Safe with 4 / 7 threshold.  Has the *ChainAdmin* role in the ZKsync Era diamond and the *Elastic Chain Operator* role in the shared contracts.","accounts":[{"address":"0x4e4943346848c4867F81dFb37c4cA9C5715A7828","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0x3F0009D00cc78979d00Eb635490F23E8d6aCc481","type":"EOA"},{"address":"0xe79af29d618141Ffef951B240b250d47030D56d7","type":"EOA"},{"address":"0x3068415e0F857A5eEd03302A1F7E44f67468d2Bc","type":"EOA"},{"address":"0x702caCafA54B88e9c54449563Fb2e496e85c78b7","type":"EOA"},{"address":"0xFAdb20191Ab38362C50f52909817B74214CA79AE","type":"EOA"},{"address":"0xfd03dA3aeb6807a98db96C1704Ea4CFf031BaEd2","type":"EOA"},{"address":"0x700DA14328eC2F81053E5B6aAE4803E16BEdF1df","type":"EOA"}]},{"name":"Elastic Chain Operator","accounts":[{"address":"0x4e4943346848c4867F81dFb37c4cA9C5715A7828","type":"MultiSig"}],"description":"Can change the ValidatorTimelock in the StateTransitionManager, manage validators of the Hyperchain diamonds, revert batches and create new Hyperchains."},{"name":"ChainAdmin","accounts":[{"address":"0x6a88E8f6B5382d87F39213eB3df43c5FF2498Dd4","type":"Contract"}],"description":"Can manage fees, apply predefined upgrades and censor bridge transactions (*ChainAdmin* role)."},{"name":"Diamond Contract Validators","accounts":[{"address":"0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E","type":"Contract"}],"description":"Addresses permissioned to call the functions to propose, execute and revert L2 batches in the Cronos zkEVM diamond. Usually these are addresses of proxying ValidatorTimelock contracts."},{"name":"ValidatorTimelock Validators","accounts":[{"address":"0xb9d48DaF26F3CBE01A959F09f98E8a2eC8204122","type":"EOA"},{"address":"0x7fEA26A181A792B5107ee0a31e434F5dBcbBe0B7","type":"EOA"}],"description":"Actors that are allowed to propose, execute and revert L2 batches on L1 through the ValidatorTimelock."},{"name":"CronosChainAdminMultisig","description":"This is a Gnosis Safe with 2 / 3 threshold.  Inherits all *ChainAdmin* permissions.","accounts":[{"address":"0x4c57b73435FcB2D60AAf581e44d6a8AFc57ddFce","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0xE9A03EB4C2262A7d01981cAD1f2c1FFa05CB64Fb","type":"EOA"},{"address":"0x5628D5EF2bAd701617b4003F6a2e34eeB89F2ADa","type":"EOA"},{"address":"0xc7e3F37766627b5DAF734f5bb5e43Ae9327011D8","type":"EOA"}]},{"name":"CronosChainAdminEOA","accounts":[{"address":"0xfD7a03Cdb68E6488F950108A4d24f15519b87339","type":"EOA"}],"description":"Inherits all *ChainAdmin* permissions."},{"name":"TxFiltererOwnerMultisig","description":"This is a Gnosis Safe with 2 / 5 threshold.  Owns the TransactionFiltererDenyList contract and can manage addresses in the censoring list. Currently also has all *ChainAdmin* permissions through the CronosZkEVMAdmin contract.","accounts":[{"address":"0xC774CDFc4d2AcE7aaD12D77B6A3752a393E1ab8b","type":"MultiSig"}],"chain":"ethereum","participants":[{"address":"0xE9A03EB4C2262A7d01981cAD1f2c1FFa05CB64Fb","type":"EOA"},{"address":"0xAaC5b858d10107900e642681a97887D33FC3c9E9","type":"EOA"},{"address":"0xc7e3F37766627b5DAF734f5bb5e43Ae9327011D8","type":"EOA"},{"address":"0x5628D5EF2bAd701617b4003F6a2e34eeB89F2ADa","type":"EOA"},{"address":"0x149f3850AcfC5caa3ecF31dCF922A75eD2944a5e","type":"EOA"}]}],"nativePermissions":{"zksync2":[{"accounts":[{"address":"0xcd2753Bd3829dfeC575AFC3816d4899CD103C62D","type":"EOA"}],"chain":"zksync2","name":"ZkFoundationMultisig L2 alias","description":"The Layer2 alias address through which the ZkFoundationMultisig can act."},{"accounts":[{"address":"0xe788e09324F8bb3cc64f009973693f751C33b999","type":"EOA"}],"chain":"zksync2","name":"Guardians L2 alias","description":"The Layer2 alias address through which the Guardians contract can act."},{"accounts":[{"address":"0xA08b9912416E8aDc4D9C21Fae1415d3318A129A8","type":"EOA"}],"chain":"zksync2","name":"ProtocolUpgradeHandler L2 alias","description":"The Layer2 alias address through which the ProtocolUpgradeHandler contract can act."},{"accounts":[{"address":"0xe788e09324F8bb3cc64f009973693f751C33b999","type":"EOA"}],"chain":"zksync2","name":"Veto Guardian TokenGovernor","description":"This address can cancel proposals in the ZkTokenGovernor while they are pending (after having been proposed) or active (during the voting period)."},{"accounts":[{"address":"0xcd2753Bd3829dfeC575AFC3816d4899CD103C62D","type":"EOA"}],"chain":"zksync2","name":"Propose Guardian TokenGovernor","description":"This address can make direct proposals in the ZkTokenGovernor without owning ZK tokens."},{"accounts":[{"address":"0xA08b9912416E8aDc4D9C21Fae1415d3318A129A8","type":"EOA"}],"chain":"zksync2","name":"ZK Token upgrade Admin","description":"Can upgrade the ZK token contract, affecting all holders of the ZK token."},{"accounts":[{"address":"0x3E21c654B545Bf6236DC08236169DcF13dA4dDd6","type":"Contract"}],"chain":"zksync2","name":"ZK Token minter Admin","description":"Can add and remove minters from the ZK token contract and mint unlimited amounts."},{"accounts":[{"address":"0xe788e09324F8bb3cc64f009973693f751C33b999","type":"EOA"}],"chain":"zksync2","name":"Veto Guardian GovOpsGovernor","description":"This address can cancel proposals in the ZkGovOpsGovernor while they are pending (after having been proposed) or active (during the voting period)."}]},"contracts":{"addresses":[{"name":"CronosZkEvm","address":"0x7b2DA4e77BAE0e0d23c53C3BE6650497d0576CFc","upgradeability":{"proxyType":"EIP2535 diamond proxy","admins":[],"implementations":["0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a","0xE60E94fCCb18a81D501a38959E532C0A85A1be89","0xCDB6228b616EEf8Df47D69A372C4f725C43e718C","0xaD193aDe635576d8e9f7ada71Af2137b16c64075"],"immutable":false},"chain":"ethereum","description":"The main Rollup contract. The operator commits blocks and provides a ZK proof which is validated by the Verifier contract           then processes transactions. During batch execution it processes L1 --> L2 and L2 --> L1 transactions.","upgradableBy":["ProtocolUpgradeHandler"],"upgradeDelay":"4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."},{"name":"CronosZkEVMAdmin","address":"0x6a88E8f6B5382d87F39213eB3df43c5FF2498Dd4","chain":"ethereum","description":"Intermediary governance contract that has the *ChainAdmin* role in the Cronos zkEVM diamond contract."},{"name":"TransactionFiltererDenyList","address":"0xA8998F231a660Eca365B382943c71ad9b7619139","chain":"ethereum","description":"Censorship contract that is registered as the TransactionFilterer in the Cronos zkEVM diamond contract. Keeps a list of addresses that are not allowed to force transactions to the Layer 2 (`requestL2Transaction()`)."},{"name":"ValidatorTimelock","address":"0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E","chain":"ethereum","description":"Intermediary contract between the *Validators* and the ZKsync Era diamond that delays block execution (ie withdrawals and other L2 --> L1 messages) by 21h."},{"name":"Verifier","address":"0x70F3FBf8a427155185Ec90BED8a3434203de9604","chain":"ethereum","description":"Implements ZK proof verification logic."},{"name":"SecurityCouncil","address":"0xBDFfCC71FE84020238F2990a6D2954e87355De0D","chain":"ethereum","description":"Custom contract acting as a Multisig. The default threshold for the members of this contract is 9 / 12 but is customized for certain actions."},{"name":"Guardians","address":"0xD677e09324F8Bb3cC64F009973693f751c33A888","chain":"ethereum","description":"Custom contract acting as a Multisig. The default threshold for the members of this contract is 5 / 8 but is customized for certain actions."},{"name":"ProtocolUpgradeHandler","address":"0x8f7a9912416e8AdC4D9c21FAe1415D3318A11897","chain":"ethereum","description":"The central upgrade contract and Governance proxy for all ZK stack contracts. Accepts successful DAO proposals from L2 and emergency proposals from the EmergencyUpgradeBoard."},{"name":"L1SharedBridge","address":"0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],"implementations":["0xb56A8225A745756DD215faf22E4796f373561AcD"]},"chain":"ethereum","description":"This bridge contract escrows all ERC-20s and ETH that are deposited to registered ZK stack chains like ZKsync Era.","upgradableBy":["ProtocolUpgradeHandler"],"upgradeDelay":"4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."},{"name":"BridgeHub","address":"0x303a465B659cBB0ab36eE643eA362c509EEb5213","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],"implementations":["0x509dA1BE24432F8804C4A9FF4a3c3f80284CDd13"]},"chain":"ethereum","description":"Sits between the single shared bridge and the StateTransitionManager(s) and relays L1 <-> L2 messages from the shared bridge or other ZK stack chains to their respective destinations.","upgradableBy":["ProtocolUpgradeHandler"],"upgradeDelay":"4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."},{"name":"StateTransitionManager","address":"0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1"],"implementations":["0xed1Dc7F0Be2B19cb02a2476150C8ea24A37c5274"]},"chain":"ethereum","description":"Defines L2 diamond contract creation and upgrade data, proof verification for the `ZKsync diamond` contract connected to it (and other L2 diamond contracts that share the logic).","upgradableBy":["ProtocolUpgradeHandler"],"upgradeDelay":"4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."}],"nativeAddresses":{"zksync2":[{"name":"ZkProtocolGovernor","address":"0x76705327e682F2d96943280D99464Ab61219e34f","chain":"zksync2","description":"Main Governance contract allowing for token voting (simple majority) with the ZK token through delegates. This contract is used for protocol upgrade proposals (ZIPs) that go through Ethereum Layer 1 and can target all L1 and L2 contracts. At least 21M ZK tokens are necessary to start a proposal and a 630M quorum of voted tokens must be met to succeed. Can queue and execute proposals in the ProtocolTimelockController."},{"name":"ProtocolTimelockController","address":"0x3701fB675bCd4A85eb11A2467628BBe193F6e6A8","chain":"zksync2","description":"Timelock contract that can send L2->L1 logs that start a proposal in the ProtocolUpgradeHandler on Ethereum. This timelock has no minimum delay"},{"name":"ZkTokenGovernor","address":"0x10560f8B7eE37571AD7E3702EEb12Bc422036E89","chain":"zksync2","description":"Governance contract allowing for token voting (simple majority) with the ZK token through delegates. This contract is used for Token Program Proposals (TPPs) usually targeting the ZK token. At least 21M ZK tokens are necessary to start a proposal (for delegates) and a 630M quorum of voted tokens must be met to succeed. Can queue and execute proposals in the TokenTimelockController."},{"name":"TokenTimelockController","address":"0x3E21c654B545Bf6236DC08236169DcF13dA4dDd6","chain":"zksync2","description":"This timelock contract has 3d minimum delay"},{"name":"ZkGovOpsGovernor","address":"0x496869a7575A1f907D1C5B1eca28e4e9E382afAb","chain":"zksync2","description":"Governance contract allowing for token voting (simple majority) with the ZK token through delegates. This contract is used for Governance Advisory Proposals (GAPs) that are not executable onchain. At least 21M ZK tokens are necessary to start a proposal and a 630M quorum of voted tokens must be met to succeed. Can queue and execute proposals in the GovOpsTimelockController."},{"name":"GovOpsTimelockController","address":"0xC3e970cB015B5FC36edDf293D2370ef5D00F7a19","chain":"zksync2","description":"This timelock contract has 3d minimum delay"},{"name":"ZkToken","address":"0x5A7d6b2F92C77FAD6CCaBd7EE0624E64907Eaf3E","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xdB1E46B448e68a5E35CB693a99D59f784aD115CC"],"implementations":["0x01a6715d3560241E09E865a46122bf347A576c09"]},"chain":"zksync2","description":"The ZK token contract on ZKsync Era. Used for voting in the ZK stack governance system.","upgradableBy":["ProtocolUpgradeHandler"],"upgradeDelay":"4d 21h via the standard upgrade path, but immediate through the EmergencyUpgradeBoard."}]},"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is a 4d 21h - 8d 21h delay on code upgrades unless upgrade is initiated by the     EmergencyUpgradeBoard in which case there is no delay."}]},"stateValidation":{"description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract.","categories":[{"title":"Prover Architecture","description":"ZKsync Era proof system Boojum can be found [here](https://github.com/matter-labs/era-boojum/tree/main) and contains essential tools like the Prover, the Verifier, and other backend components. The specs of the system can be found [here](https://github.com/matter-labs/zksync-era/tree/main/docs/specs/prover)."},{"title":"ZK Circuits","description":"ZKsync Era circuits are built from Boojum and are designed to replicate the behavior of the EVM. The source code can be found [here](https://github.com/matter-labs/era-zkevm_circuits/tree/main). The circuits are checked against tests that can be found [here](https://github.com/matter-labs/era-zkevm_test_harness/tree/main).","risks":[{"category":"Funds can be lost if","text":"the proof system is implemented incorrectly."}]},{"title":"Verification Keys Generation","description":"SNARK verification keys can be generated and checked against the Ethereum verifier contract using [this tool](https://github.com/matter-labs/zksync-era/tree/main/prover/crates/bin/vk_setup_data_generator_server_fri). The system requires a trusted setup."}],"proofVerification":{"shortDescription":"ZKsync Era is a ZK-EVM rollup on Ethereum.","aggregation":true,"requiredTools":[{"name":"Custom tool","version":"v14.2.0","link":"https://github.com/matter-labs/zksync-era/tree/prover-v14.2.0/prover/vk_setup_data_generator_server_fri"}],"verifiers":[{"name":"ZKsyncEraVerifier","description":"ZKsync Era utilizes [Boojum](https://github.com/matter-labs/era-boojum/tree/main) as the main proving stack for their system. Boojum is an implementation of the [Redshift](https://eprint.iacr.org/2019/1400.pdf) protocol. The protocol makes use of recursive proof aggregation. The final Redshift proof is wrapped in a SNARK (Plonk + KZG) proof.","verified":"no","contractAddress":"0x70F3FBf8a427155185Ec90BED8a3434203de9604","chainId":1,"subVerifiers":[{"name":"Final wrap","proofSystem":"Plonk SNARK","mainArithmetization":"Plonkish","mainPCS":"KZG","trustedSetup":"Aztec ceremony","link":"https://github.com/matter-labs/era-zkevm_test_harness/blob/v1.5.0/circuit_definitions/src/circuit_definitions/aux_layer/wrapper.rs"},{"name":"Aggregation circuit","proofSystem":"Redshift","mainArithmetization":"Plonkish","mainPCS":"LPC","trustedSetup":"None","link":"https://github.com/matter-labs/era-zkevm_test_harness/blob/v1.5.0/circuit_definitions/src/circuit_definitions/recursion_layer/mod.rs#L45"},{"name":"Main circuit","proofSystem":"Redshift","mainArithmetization":"Plonkish","mainPCS":"LPC","trustedSetup":"None","link":"https://github.com/matter-labs/era-zkevm_circuits"}]}]}},"milestones":[{"name":"Alpha Mainnet Launch","link":"https://blog.cronos.org/p/cronos-zkevm-launches-its-alpha-mainnet","date":"2024-08-15T00:00:00Z","description":"Cronos zkEVM Launches Its Alpha Mainnet powered by ZKsync.","type":"general"}],"knowledgeNuggets":[{"title":"State diffs vs raw tx data","url":"https://twitter.com/krzKaczor/status/1641505354600046594","thumbnail":"l2beat-03.jpg"}]}