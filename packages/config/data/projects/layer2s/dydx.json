{"type":"layer2","id":"dydx","badges":["AppChain","StarkEx","EthereumCalldata","Governance"],"display":{"name":"dYdX v3","slug":"dydx","warning":"This page describes dYdX v3, which is an L2 built on Ethereum. Recently deployed dYdX v4 is a separate blockchain based on Cosmos SDK, unrelated to Ethereum and is using different technology. No information on this page applies to dYdX v4.","description":"dYdX v3 aims to build a powerful and professional exchange for trading crypto assets where users can truly own their trades and, eventually, the exchange itself.","purposes":["Exchange"],"provider":"StarkEx","category":"ZK Rollup","links":{"websites":["https://dydx.exchange/"],"apps":["https://trade.dydx.exchange/","https://margin.dydx.exchange/","https://dydx.l2beat.com"],"documentation":["https://docs.starkware.co/starkex/","https://docs.dydx.exchange/","https://docs.dydx.community/dydx-governance/"],"explorers":["https://dydx.l2beat.com"],"repositories":["https://github.com/starkware-libs/starkex-contracts","https://github.com/dydxprotocol/"],"socialMedia":["https://dydx.exchange/blog","https://twitter.com/dYdX","https://discord.gg/dydx","https://youtube.com/c/dydxprotocol","https://reddit.com/r/dydxprotocol/","https://linkedin.com/company/dydx"]},"activityDataSource":"Closed API","liveness":{"explanation":"dYdX is a ZK rollup that posts state diffs to the L1. For a transaction to be considered final, the state diffs have to be submitted and validity proof should be generated, submitted, and verified. The verification is done as part of the state update."},"finality":{"finalizationPeriod":0}},"config":{"associatedTokens":["DYDX"],"escrows":[{"address":"0xD54f502e184B6B739d7D27a6410a67dc462D69c8","newVersion":true,"sinceTimestamp":1613033682,"tokens":["USDC"],"contract":{"address":"0xD54f502e184B6B739d7D27a6410a67dc462D69c8","upgradeability":{"proxyType":"StarkWare diamond","admins":["0xFCAac0F14deA11eDe11Afcb875f29130e1ad5ec0","0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE"],"implementations":["0x2C0df87E073755139101b35c0A51e065291cc2d3","0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5","0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545","0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0","0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3"],"immutable":false},"chain":"ethereum","upgradableBy":["Rollup Admin"],"upgradeDelay":"9d or 2d if overridden by Priority Controller"},"chain":"ethereum","includeInTotal":true}],"transactionApi":{"type":"starkex","product":["dydx"],"sinceTimestamp":1613033682,"resyncLastDays":7},"trackedTxs":[{"uses":[{"type":"liveness","subtype":"proofSubmissions"},{"type":"l2costs","subtype":"proofSubmissions"}],"query":{"formula":"functionCall","address":"0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3","selector":"0x9b3b76cc","functionSignature":"function verifyProofAndRegister(uint256[] proofParams, uint256[] proof, uint256[] taskMetadata, uint256[] cairoAuxInput, uint256 cairoVerifierId)","sinceTimestamp":1615417556}},{"uses":[{"type":"liveness","subtype":"stateUpdates"},{"type":"l2costs","subtype":"stateUpdates"}],"query":{"formula":"functionCall","address":"0xD54f502e184B6B739d7D27a6410a67dc462D69c8","selector":"0x538f9406","functionSignature":"function updateState(uint256[] publicInput, uint256[] applicationData)","sinceTimestamp":1613033682}}],"finality":"coming soon"},"dataAvailability":{"layer":{"value":"Ethereum (calldata)","sentiment":"good","description":"The data is posted to Ethereum as calldata."},"bridge":{"value":"Enshrined","sentiment":"good","description":"The validating bridge has access to all the data, as it is posted on chain."},"mode":"State diffs"},"riskView":{"stateValidation":{"value":"ZK proofs (ST)","description":"zkSTARKS are zero knowledge proofs that ensure state correctness.","sentiment":"good","definingMetric":null,"sources":[{"contract":"StarkPerpetual","references":["https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F35#L125"]}]},"dataAvailability":{"value":"Onchain","description":"All of the data needed for proof construction is published on Ethereum L1.","sentiment":"good","definingMetric":null,"sources":[{"contract":"StarkPerpetual","references":["https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F35#L82"]}]},"exitWindow":{"value":"None","description":"There is no exit window. Upgrades have a 9d delay, (or 2d if shortened by the Priority Controller), but withdrawals can be censored for up to 14d.","sentiment":"bad","definingMetric":-432000},"sequencerFailure":{"value":"Force via L1","description":"Users can force the sequencer to include a trade or a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for 14d, users can use the exit hatch to withdraw their funds. Users are required to find a counterparty for the trade by out of system means.","sentiment":"good","definingMetric":1209600,"sources":[{"contract":"StarkPerpetual","references":["https://etherscan.io/address/0xc43f5526124877f9125e3b48101dca6d7c6b4ea3#code#F4#L46"]}]},"proposerFailure":{"value":"Use escape hatch","description":"Users are able to trustlessly exit by submitting a Merkle proof of funds. Positions will be closed using the average price from the last batch state update.","sentiment":"good","definingMetric":null,"sources":[{"contract":"StarkPerpetual","references":["https://etherscan.io/address/0xc43f5526124877f9125e3b48101dca6d7c6b4ea3#code#F6#L32"]}]},"destinationToken":{"value":"Canonical","description":"USDC transferred is considered canonical as it is the basis of the perpetual protocol on the chain.","sentiment":"good"},"validatedBy":{"value":"Ethereum","description":"Smart contracts on Ethereum validate all bridge transfers.","sentiment":"good"}},"technology":{"stateCorrectness":{"name":"Validity proofs ensure state correctness","description":"Each update to the system state must be accompanied by a ZK proof that ensures that the new state was derived by correctly applying a series of valid user transactions to the previous state. These proofs are then verified on Ethereum by a smart contract. The system state is represented using Merkle roots.","risks":[],"references":[{"text":"Enforcing Consistency on the On-Chain State - StarkEx documentation","href":"https://docs.starkware.co/starkex/spot/shared/README-off-chain-state.html#enforcing_consistency_in_the_on_chain_state_spot"},{"text":"UpdatePerpetualState.sol#L125 - Etherscan source code, verifyFact function call","href":"https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F35#L125"}]},"newCryptography":{"name":"Zero knowledge STARK cryptography is used","description":"Despite their production use zkSTARKs proof systems are still relatively new, complex and they rely on the proper implementation of the polynomial constraints used to check validity of the Execution Trace.","risks":[{"category":"Funds can be lost if","text":"the proof system is implemented incorrectly."}],"references":[{"text":"STARK Core Engine Deep Dive","href":"https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab"}]},"dataAvailability":{"name":"All data required for proofs is published on chain","description":"All the relevant data that is used to recover the balances Merkle Tree is published on-chain as calldata. This includes, in addition to the proven new state, the complete list of differences of the users' balances from the previous state.","risks":[],"references":[{"text":"Data Availability Modes - StarkEx documentation","href":"https://docs.starkware.co/starkex/con_data_availability.html#data_availability_modes"},{"text":"ZK Rollup - StarkEx documentation","href":"https://docs.starkware.co/starkex/con_data_availability.html#zk_rollup"},{"text":"UpdatePerpetualState.sol#L82 - Etherscan source code, updateState function","href":"https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F35#L82"}]},"operator":{"name":"The system has a centralized operator","description":"The operator is the only entity that can propose blocks. A live and trustworthy operator is vital to the health of the system. Typically, the Operator is the hot wallet of the StarkEx service submitting state updates for which proofs have been already submitted and verified.","risks":[{"category":"MEV can be extracted if","text":"the operator exploits their centralized position and frontruns user transactions."}],"references":[{"text":"Operator - StarkEx documentation","href":"https://docs.starkware.co/starkex/perpetual/shared/contract-management.html#operator_perpetual"},{"text":"Operator.sol#L42 - Etherscan source code, onlyOperator modifier","href":"https://etherscan.io/address/0xdf9c117cad37f2ed8c99e36a40317d8cc340d4a0#code#F26#L42"}]},"forceTransactions":{"name":"Users can force exit the system","description":"Force exit allows the users to escape censorship by withdrawing their funds. The system allows users to force the withdrawal of funds by submitting a request directly to the contract on-chain.  The request must be served within 14d. If this does not happen, the system will halt regular operation and permit trustless withdrawal of funds. Perpetual positions can also be force closed before withdrawing, however this requires the user to find the counterparty for the trade themselves.","risks":[{"category":"Users can be censored if","text":"the operator refuses to include their transactions. However, there exists a mechanism to independently exit the system."},{"category":"Funds can be lost if","text":"the user is unable to find the counterparty for the force trade."}],"references":[{"text":"Censorship Prevention - StarkEx documentation","href":"https://docs.starkware.co/starkex/architecture/overview-architecture.html#8_censorship_prevention"},{"text":"Forced Trade - StarkEx documentation","href":"https://docs.starkware.co/starkex/perpetual/forced-actions-escape-hatch-perpetual.html#forcedtrade"},{"text":"ForcedTrades.sol#L46 - Etherscan source code, forcedTradeRequest function","href":"https://etherscan.io/address/0xc43f5526124877f9125e3b48101dca6d7c6b4ea3#code#F4#L46"},{"text":"ForcedWithdrawals.sol#L32 - Etherscan source code, forcedWithdrawalRequest function","href":"https://etherscan.io/address/0xc43f5526124877f9125e3b48101dca6d7c6b4ea3#code#F6#L32"}]},"exitMechanisms":[{"name":"Regular exit","description":"The user initiates the withdrawal by submitting a regular transaction on this chain. When the block containing that transaction is proven the funds become available for withdrawal on L1. Finally the user submits an L1 transaction to claim the funds. This transaction does not require a merkle proof.","risks":[],"references":[{"text":"Withdrawal - StarkEx documentation","href":"https://docs.starkware.co/starkex/perpetual/withdrawal-perpetual.html"}]},{"name":"Forced exit","description":"If the user experiences censorship from the operator with regular exit they can submit their withdrawal requests directly on L1. The system is then obliged to service this request. Once the force operation is submitted and if the request is serviced, the operation follows the flow of a regular exit.","risks":[],"references":[{"text":"Forced Operations - StarkEx documentation","href":"https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"},{"text":"Forced Withdrawal - StarkEx documentation","href":"https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"},{"text":"Forced Trade - StarkEx documentation","href":"https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"}]},{"name":"Emergency exit","description":"If the enough time deadline passes and the forced exit is still ignored the user can put the system into a frozen state, disallowing further state updates. In that case everybody can withdraw by submitting a merkle proof of their funds with their L1 transaction.","risks":[],"references":[{"text":"Forced Operations - StarkEx documentation","href":"https://docs.starkware.co/starkex/perpetual/shared/README-forced-operations.html"},{"text":"Forced Withdrawal - StarkEx documentation","href":"https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_withdrawal"},{"text":"Forced Trade - StarkEx documentation","href":"https://docs.starkware.co/starkex/perpetual/perpetual-trading-forced-withdrawal-and-forced-trade.html#forced_trade"}]}]},"stage":{"stage":"Stage 1","missing":{"nextStage":"Stage 2","requirements":["Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."]},"summary":[{"stage":"Stage 0","requirements":[{"satisfied":true,"description":"The project calls itself a rollup."},{"satisfied":true,"description":"State roots are posted to Ethereum L1."},{"satisfied":true,"description":"Inputs for the state transition function are posted to Ethereum L1."},{"satisfied":true,"description":"A source-available node exists that can recreate the state from Ethereum L1 data. Please note that the L2BEAT team has not verified the validity of the node source code. [View code](https://github.com/l2beat/starkex-explorer)"}]},{"stage":"Stage 1","requirements":[{"satisfied":true,"description":"A complete and functional proof system is deployed."},{"satisfied":true,"description":"Users are able to exit without the help of the permissioned operators."},{"satisfied":true,"description":"In case of an unwanted upgrade by actors more centralized than a Security Council, users have at least 7d to exit."}]},{"stage":"Stage 2","requirements":[{"satisfied":false,"description":"Upgrades unrelated to on-chain provable bugs provide less than 30d to exit."}]}]},"contracts":{"addresses":[{"name":"StarkPerpetual","address":"0xD54f502e184B6B739d7D27a6410a67dc462D69c8","upgradeability":{"proxyType":"StarkWare diamond","admins":["0xFCAac0F14deA11eDe11Afcb875f29130e1ad5ec0","0xa306989BA6BcacdECCf3C0614FfF2B8C668e3CaE"],"implementations":["0x2C0df87E073755139101b35c0A51e065291cc2d3","0x5d8cC5659db74EEbF19aA2Bb39973F9339012AC5","0x3FeD7bF5Bf3E738bc30fBe61B048fDcb82368545","0xDF9c117Cad37F2ED8C99E36A40317D8CC340D4a0","0xc43f5526124877F9125E3B48101DcA6D7c6B4Ea3"],"immutable":false},"chain":"ethereum","description":"Main contract of dYdX exchange. Updates dYdX state and verifies its integrity using STARK Verifier. Allows users to deposit and withdraw tokens via normal and emergency modes.","upgradableBy":["Rollup Admin"],"upgradeDelay":"9d or 2d if overridden by Priority Controller"},{"name":"FinalizableGpsFactAdapter","address":"0xF23754231BC4cE8C8E92C3bADfB37d922d46053C","chain":"ethereum","description":"Contract serving as an adapter for STARK Verifier. It holds the address of the STARK Verifier and CAIRO program hash needed for verification.","upgradeConsiderations":"This contract is not upgradeable and the program hash cannot be updated because it is in the finalized state."},{"name":"GpsStatementVerifier","address":"0x894c4a12548FB18EaA48cF34f9Cd874Fc08b7FC3","chain":"ethereum","description":"STARK Verifier. In contrast to other StarkWare systems which use common SHARP Prover, dYdX uses separate Prover/Verifier."},{"name":"MemoryPageFactRegistry","address":"0xEfbCcE4659db72eC6897F46783303708cf9ACef8","chain":"ethereum","description":"Contract storing CAIRO Program Output, in case of dYdX, it stores state diffs of dYdX Exchange."},{"name":"FriStatementContract","address":"0xf6b83CcaDeee478FC372AF6ca7069b14FBc5E1B1","chain":"ethereum","description":"Part of STARK Verifier."},{"name":"MerkleStatementContract","address":"0x0d62bac5c346c78DC1b27107CAbC5F4DE057a830","chain":"ethereum","description":"Part of STARK Verifier."},{"name":"CairoBootloaderProgram","address":"0x1dd8945200f5a09D6Fe0ed68494c2ac41cd02E2D","chain":"ethereum","description":"Part of STARK Verifier."},{"name":"PerpetualEscapeVerifier","address":"0x626211C1e9BC633f4D342Af99f4E8bc93f11F3DD","chain":"ethereum","description":"Contract responsible for validating force withdrawal requests."},{"name":"MerkleDistributor","address":"0x01d3348601968aB85b4bb028979006eac235a588","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x6C5cd3aD7A16Ae207D221908E6b997d9B0DcD7b0"],"implementations":["0xFE1d5439625a9524a80F66670733129E80E0C112"]},"chain":"ethereum","description":"The Merkle Distributor smart contract distributes DYDX token rewards according to a Merkle tree of balances.","upgradableBy":["Treasury Admin"],"upgradeDelay":"2d","upgradeConsiderations":"This contract can be paused by the Merkle Pauser with 0s delay."},{"name":"LiquidityStaking","address":"0x5Aa653A076c1dbB47cec8C1B4d152444CAD91941","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0xAc5D8bCD13da463bea96c75f9085c4e40037F790"],"implementations":["0xBE607a58206180fef691bf1B5aE9670174284388"]},"chain":"ethereum","description":"The Liquidity Module is a collection of smart contracts for staking and borrowing, which incentivize the allocation of USDC funds for market making purposes on the dYdX layer 2 exchange.","upgradableBy":["Treasury Admin"],"upgradeDelay":"2d"},{"name":"SafetyModule","address":"0x65f7BA4Ec257AF7c55fd5854E5f6356bBd0fb8EC","upgradeability":{"proxyType":"EIP1967 proxy","admins":["0x6aaD0BCfbD91963Cf2c8FB042091fd411FB05b3C"],"implementations":["0x31D76F5Db8F40D28886Bf00F3be5F157472Bf77A"]},"chain":"ethereum","description":"The Safety Module is a staking pool that offers DYDX rewards to users who stake DYDX towards the security of the Protocol.","upgradableBy":["Safety Module Admin"],"upgradeDelay":"7d"},{"name":"DydxGovernor","address":"0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2","chain":"ethereum","description":"Contract storing dYdX Governance logic."},{"name":"GovernanceStrategyV2","address":"0xc2f5F3505910Da80F0592a3Cc023881C50b16505","chain":"ethereum","description":"Contract storing logic for votes counting in dYdX Governance.","upgradeConsiderations":"This contract is not upgradeable, although the address of the GovernanceStrategyV2 can be changed by the owner of DydxGovernor contract."},{"name":"DydxToken","address":"0x92D6C1e31e14520e676a687F0a93788B716BEff5","chain":"ethereum","description":"Token used by the dYdX Governance for voting."}],"risks":[{"category":"Funds can be stolen if","text":"a contract receives a malicious code upgrade. There is a 9d delay on code upgrades.The delay can be decreased by the Priority Controller to 2d."}]},"permissions":[{"name":"Operators","accounts":[{"address":"0x8129b737912e17212C8693B781928f5D0303390a","type":"EOA"}],"description":"Allowed to update state of the rollup. When Operator is down the state cannot be updated."},{"name":"Rollup Admin","accounts":[{"address":"0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2","type":"Contract"}],"description":"Controlled by dYdX Governance. Defines rules of governance via the dYdX token. Can upgrade implementation of the rollup, potentially gaining access to all funds stored in the bridge. Currently there is 9d delay before the upgrade.","references":[{"text":"Rollup Admin documentation","href":"https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#long-timelock-executor"}]},{"name":"Rollup Priority Controller","accounts":[{"address":"0xDC7eBbc857Ad2d276c387100dB67c1041dA0B2c0","type":"EOA"}],"description":"Can decrease the delay required for the Rollup upgrade to 2d.","references":[{"text":"dYdX governance documentation","href":"https://docs.dydx.community/dydx-governance/"},{"text":"Priority Controller documentation","href":"https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#long-timelock-executor"}]},{"name":"Treasury Admin","accounts":[{"address":"0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2","type":"Contract"}],"description":"Controlled by dYdX Governance. Owner of dYdX token. Can upgrade Treasury, Liquidity Module and Merkle Distributor. Currently there is 2d delay before the upgrade.","references":[{"text":"Treasury Admin documentation","href":"https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#long-timelock-executor"}]},{"name":"Safety Module Admin","accounts":[{"address":"0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2","type":"Contract"}],"description":"Controlled by dYdX Governance. Has the ability to update Governance Strategy resulting in different logic of votes counting. Can upgrade Safety Module. Currently there is 7d delay before the upgrade.","references":[{"text":"Safety Module Admin","href":"https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#long-timelock-executor"}]},{"name":"Merkle Pauser","accounts":[{"address":"0x7E9B1672616FF6D6629Ef2879419aaE79A9018D2","type":"Contract"}],"description":"Controlled by dYdX Governance. The Merkle-pauser executor can freeze the Merkle root, which is updated periodically with each user cumulative reward balance, in case the proposed root is incorrect or malicious. It can also veto forced trade requests by any of the stark proxy contracts.Currently there is 0s delay before the upgrade.","references":[{"text":"Merkle Pauser documentation","href":"https://docs.dydx.community/dydx-governance/voting-and-governance/governance-process#merkle-pauser-executor"}]}],"stateDerivation":{"nodeSoftware":"State can be independently derived from data (state updates) published on Ethereum by running an open-source [StarkEx Explorer](https://github.com/l2beat/starkex-explorer). The explorer, once fully synced, provides UI interface to perform forced actions, trigger rollup freeze and withdraw funds using escape hatch.","compressionScheme":"No compression is used, state updates and other metadata are simply serialized for L1","genesisState":"There is no genesis file for dYdX. By default, all accounts were empty at the beginning.","dataFormat":"dYdX doesn't publish transactions. Balances of user positions are stored in a Merkle Tree and updates to that tree are published on Ethereum, together with Merkle Root and a ZK proof. Deserialization of that data is implemented [here](https://github.com/l2beat/starkex-explorer/blob/59e5c744cd3a1103c01893881a40492a817f13bd/packages/encoding/src/decoding/decodeOnChainData.ts#L6). Generating Merkle Proof is implemented [here](https://github.com/l2beat/starkex-explorer/blob/d957fe5ed3b8f6590a84507655eb76c7b2876e67/packages/state/src/MerkleTree.ts#L92)."},"milestones":[{"name":"Public launch","link":"https://dydx.exchange/blog/public","date":"2021-04-06T00:00:00Z","description":"Layer 2 cross-margined Perpetuals are now live in production for all traders.","type":"general"},{"name":"dYdX Foundation","link":"https://dydx.exchange/blog/introducing-dydx-foundation","date":"2021-08-03T00:00:00Z","description":"Independent foundation was created to participate in the Protocol governance.","type":"general"},{"name":"dYdX v4 announcement","link":"https://dydx.exchange/blog/dydx-chain","date":"2022-06-22T00:00:00Z","description":"dYdX V4 will be developed as a standalone blockchain based on the Cosmos SDK.","type":"general"}],"knowledgeNuggets":[{"title":"How does escape hatch work?","url":"https://twitter.com/bkiepuszewski/status/1469201939049103360","thumbnail":"l2beat-03.jpg"},{"title":"Understand StarkWare #1","url":"https://twitter.com/bkiepuszewski/status/1480473352213041152","thumbnail":"starkware-01.jpg"},{"title":"Understand StarkWare #2","url":"https://twitter.com/bkiepuszewski/status/1480804584926949377","thumbnail":"starkware-02.jpg"},{"title":"Understand StarkWare #3","url":"https://twitter.com/bkiepuszewski/status/1481173682219270146","thumbnail":"starkware-03.jpg"},{"title":"Understand StarkWare #4","url":"https://twitter.com/bkiepuszewski/status/1481521079562784769","thumbnail":"starkware-04.jpg"}]}