/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common'

export declare namespace Types {
  export type CheckpointOutputStruct = {
    submitter: string
    outputRoot: BytesLike
    timestamp: BigNumberish
    l2BlockNumber: BigNumberish
  }

  export type CheckpointOutputStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
  ] & {
    submitter: string
    outputRoot: string
    timestamp: BigNumber
    l2BlockNumber: BigNumber
  }
}

export interface L2OutputOracleInterface extends utils.Interface {
  functions: {
    'COLOSSEUM()': FunctionFragment
    'FINALIZATION_PERIOD_SECONDS()': FunctionFragment
    'L2_BLOCK_TIME()': FunctionFragment
    'SUBMISSION_INTERVAL()': FunctionFragment
    'VALIDATOR_POOL()': FunctionFragment
    'computeL2Timestamp(uint256)': FunctionFragment
    'finalizedAt(uint256)': FunctionFragment
    'getL2Output(uint256)': FunctionFragment
    'getL2OutputAfter(uint256)': FunctionFragment
    'getL2OutputIndexAfter(uint256)': FunctionFragment
    'getSubmitter(uint256)': FunctionFragment
    'initialize(uint256,uint256)': FunctionFragment
    'isFinalized(uint256)': FunctionFragment
    'latestBlockNumber()': FunctionFragment
    'latestOutputIndex()': FunctionFragment
    'nextBlockNumber()': FunctionFragment
    'nextOutputIndex()': FunctionFragment
    'replaceL2Output(uint256,bytes32,address)': FunctionFragment
    'startingBlockNumber()': FunctionFragment
    'startingTimestamp()': FunctionFragment
    'submitL2Output(bytes32,uint256,bytes32,uint256)': FunctionFragment
    'version()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'COLOSSEUM'
      | 'FINALIZATION_PERIOD_SECONDS'
      | 'L2_BLOCK_TIME'
      | 'SUBMISSION_INTERVAL'
      | 'VALIDATOR_POOL'
      | 'computeL2Timestamp'
      | 'finalizedAt'
      | 'getL2Output'
      | 'getL2OutputAfter'
      | 'getL2OutputIndexAfter'
      | 'getSubmitter'
      | 'initialize'
      | 'isFinalized'
      | 'latestBlockNumber'
      | 'latestOutputIndex'
      | 'nextBlockNumber'
      | 'nextOutputIndex'
      | 'replaceL2Output'
      | 'startingBlockNumber'
      | 'startingTimestamp'
      | 'submitL2Output'
      | 'version',
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'COLOSSEUM', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'FINALIZATION_PERIOD_SECONDS',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'L2_BLOCK_TIME',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'SUBMISSION_INTERVAL',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'VALIDATOR_POOL',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'computeL2Timestamp',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'finalizedAt',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getL2Output',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getL2OutputAfter',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getL2OutputIndexAfter',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getSubmitter',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'isFinalized',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'latestBlockNumber',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'latestOutputIndex',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'nextBlockNumber',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'nextOutputIndex',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'replaceL2Output',
    values: [BigNumberish, BytesLike, string],
  ): string
  encodeFunctionData(
    functionFragment: 'startingBlockNumber',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'startingTimestamp',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'submitL2Output',
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'version', values?: undefined): string

  decodeFunctionResult(functionFragment: 'COLOSSEUM', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'FINALIZATION_PERIOD_SECONDS',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'L2_BLOCK_TIME',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'SUBMISSION_INTERVAL',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'VALIDATOR_POOL',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'computeL2Timestamp',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'finalizedAt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getL2Output', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getL2OutputAfter',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getL2OutputIndexAfter',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSubmitter',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isFinalized', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'latestBlockNumber',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'latestOutputIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'nextBlockNumber',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'nextOutputIndex',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'replaceL2Output',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'startingBlockNumber',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'startingTimestamp',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'submitL2Output',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result

  events: {
    'Initialized(uint8)': EventFragment
    'OutputReplaced(uint256,bytes32)': EventFragment
    'OutputSubmitted(bytes32,uint256,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OutputReplaced'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OutputSubmitted'): EventFragment
}

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface OutputReplacedEventObject {
  outputIndex: BigNumber
  newOutputRoot: string
}
export type OutputReplacedEvent = TypedEvent<
  [BigNumber, string],
  OutputReplacedEventObject
>

export type OutputReplacedEventFilter = TypedEventFilter<OutputReplacedEvent>

export interface OutputSubmittedEventObject {
  outputRoot: string
  l2OutputIndex: BigNumber
  l2BlockNumber: BigNumber
  l1Timestamp: BigNumber
}
export type OutputSubmittedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  OutputSubmittedEventObject
>

export type OutputSubmittedEventFilter = TypedEventFilter<OutputSubmittedEvent>

export interface L2OutputOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: L2OutputOracleInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    COLOSSEUM(overrides?: CallOverrides): Promise<[string]>

    FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<[BigNumber]>

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>

    VALIDATOR_POOL(overrides?: CallOverrides): Promise<[string]>

    computeL2Timestamp(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    finalizedAt(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getL2Output(
      _l2OutputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[Types.CheckpointOutputStructOutput]>

    getL2OutputAfter(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[Types.CheckpointOutputStructOutput]>

    getL2OutputIndexAfter(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getSubmitter(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>

    initialize(
      _startingBlockNumber: BigNumberish,
      _startingTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    isFinalized(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    latestBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>

    latestOutputIndex(overrides?: CallOverrides): Promise<[BigNumber]>

    nextBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>

    nextOutputIndex(overrides?: CallOverrides): Promise<[BigNumber]>

    replaceL2Output(
      _l2OutputIndex: BigNumberish,
      _newOutputRoot: BytesLike,
      _submitter: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    startingBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>

    startingTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    submitL2Output(
      _outputRoot: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l1BlockHash: BytesLike,
      _l1BlockNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>

    version(overrides?: CallOverrides): Promise<[string]>
  }

  COLOSSEUM(overrides?: CallOverrides): Promise<string>

  FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>

  L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>

  SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>

  VALIDATOR_POOL(overrides?: CallOverrides): Promise<string>

  computeL2Timestamp(
    _l2BlockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  finalizedAt(
    _outputIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getL2Output(
    _l2OutputIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<Types.CheckpointOutputStructOutput>

  getL2OutputAfter(
    _l2BlockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<Types.CheckpointOutputStructOutput>

  getL2OutputIndexAfter(
    _l2BlockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getSubmitter(
    _outputIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>

  initialize(
    _startingBlockNumber: BigNumberish,
    _startingTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  isFinalized(
    _outputIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>

  latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

  latestOutputIndex(overrides?: CallOverrides): Promise<BigNumber>

  nextBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

  nextOutputIndex(overrides?: CallOverrides): Promise<BigNumber>

  replaceL2Output(
    _l2OutputIndex: BigNumberish,
    _newOutputRoot: BytesLike,
    _submitter: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

  startingTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  submitL2Output(
    _outputRoot: BytesLike,
    _l2BlockNumber: BigNumberish,
    _l1BlockHash: BytesLike,
    _l1BlockNumber: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>

  version(overrides?: CallOverrides): Promise<string>

  callStatic: {
    COLOSSEUM(overrides?: CallOverrides): Promise<string>

    FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>

    VALIDATOR_POOL(overrides?: CallOverrides): Promise<string>

    computeL2Timestamp(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    finalizedAt(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getL2Output(
      _l2OutputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<Types.CheckpointOutputStructOutput>

    getL2OutputAfter(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<Types.CheckpointOutputStructOutput>

    getL2OutputIndexAfter(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getSubmitter(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>

    initialize(
      _startingBlockNumber: BigNumberish,
      _startingTimestamp: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    isFinalized(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>

    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

    latestOutputIndex(overrides?: CallOverrides): Promise<BigNumber>

    nextBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

    nextOutputIndex(overrides?: CallOverrides): Promise<BigNumber>

    replaceL2Output(
      _l2OutputIndex: BigNumberish,
      _newOutputRoot: BytesLike,
      _submitter: string,
      overrides?: CallOverrides,
    ): Promise<void>

    startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

    startingTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    submitL2Output(
      _outputRoot: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l1BlockHash: BytesLike,
      _l1BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    version(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'OutputReplaced(uint256,bytes32)'(
      outputIndex?: BigNumberish | null,
      newOutputRoot?: null,
    ): OutputReplacedEventFilter
    OutputReplaced(
      outputIndex?: BigNumberish | null,
      newOutputRoot?: null,
    ): OutputReplacedEventFilter

    'OutputSubmitted(bytes32,uint256,uint256,uint256)'(
      outputRoot?: BytesLike | null,
      l2OutputIndex?: BigNumberish | null,
      l2BlockNumber?: BigNumberish | null,
      l1Timestamp?: null,
    ): OutputSubmittedEventFilter
    OutputSubmitted(
      outputRoot?: BytesLike | null,
      l2OutputIndex?: BigNumberish | null,
      l2BlockNumber?: BigNumberish | null,
      l1Timestamp?: null,
    ): OutputSubmittedEventFilter
  }

  estimateGas: {
    COLOSSEUM(overrides?: CallOverrides): Promise<BigNumber>

    FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>

    VALIDATOR_POOL(overrides?: CallOverrides): Promise<BigNumber>

    computeL2Timestamp(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    finalizedAt(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getL2Output(
      _l2OutputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getL2OutputAfter(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getL2OutputIndexAfter(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getSubmitter(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    initialize(
      _startingBlockNumber: BigNumberish,
      _startingTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    isFinalized(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

    latestOutputIndex(overrides?: CallOverrides): Promise<BigNumber>

    nextBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

    nextOutputIndex(overrides?: CallOverrides): Promise<BigNumber>

    replaceL2Output(
      _l2OutputIndex: BigNumberish,
      _newOutputRoot: BytesLike,
      _submitter: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>

    startingTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    submitL2Output(
      _outputRoot: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l1BlockHash: BytesLike,
      _l1BlockNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>

    version(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    COLOSSEUM(overrides?: CallOverrides): Promise<PopulatedTransaction>

    FINALIZATION_PERIOD_SECONDS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>

    SUBMISSION_INTERVAL(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    VALIDATOR_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    computeL2Timestamp(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    finalizedAt(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getL2Output(
      _l2OutputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getL2OutputAfter(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getL2OutputIndexAfter(
      _l2BlockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getSubmitter(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    initialize(
      _startingBlockNumber: BigNumberish,
      _startingTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    isFinalized(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    latestBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>

    latestOutputIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nextBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nextOutputIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>

    replaceL2Output(
      _l2OutputIndex: BigNumberish,
      _newOutputRoot: BytesLike,
      _submitter: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    startingBlockNumber(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    startingTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>

    submitL2Output(
      _outputRoot: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l1BlockHash: BytesLike,
      _l1BlockNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
