/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common'

export declare namespace Types {
  export type BondStruct = { amount: BigNumberish; expiresAt: BigNumberish }

  export type BondStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber
    expiresAt: BigNumber
  }
}

export interface ValidatorPoolInterface extends utils.Interface {
  functions: {
    'L2_ORACLE()': FunctionFragment
    'MAX_UNBOND()': FunctionFragment
    'PORTAL()': FunctionFragment
    'REQUIRED_BOND_AMOUNT()': FunctionFragment
    'ROUND_DURATION()': FunctionFragment
    'SECURITY_COUNCIL()': FunctionFragment
    'TAX_DENOMINATOR()': FunctionFragment
    'TAX_NUMERATOR()': FunctionFragment
    'TRUSTED_VALIDATOR()': FunctionFragment
    'VAULT_REWARD_GAS_LIMIT()': FunctionFragment
    'addPendingBond(uint256,address)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'createBond(uint256,uint128)': FunctionFragment
    'deposit()': FunctionFragment
    'getBond(uint256)': FunctionFragment
    'getPendingBond(uint256,address)': FunctionFragment
    'increaseBond(uint256,address)': FunctionFragment
    'initialize()': FunctionFragment
    'isValidator(address)': FunctionFragment
    'nextValidator()': FunctionFragment
    'releasePendingBond(uint256,address,address)': FunctionFragment
    'unbond()': FunctionFragment
    'validatorCount()': FunctionFragment
    'version()': FunctionFragment
    'withdraw(uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'L2_ORACLE'
      | 'MAX_UNBOND'
      | 'PORTAL'
      | 'REQUIRED_BOND_AMOUNT'
      | 'ROUND_DURATION'
      | 'SECURITY_COUNCIL'
      | 'TAX_DENOMINATOR'
      | 'TAX_NUMERATOR'
      | 'TRUSTED_VALIDATOR'
      | 'VAULT_REWARD_GAS_LIMIT'
      | 'addPendingBond'
      | 'balanceOf'
      | 'createBond'
      | 'deposit'
      | 'getBond'
      | 'getPendingBond'
      | 'increaseBond'
      | 'initialize'
      | 'isValidator'
      | 'nextValidator'
      | 'releasePendingBond'
      | 'unbond'
      | 'validatorCount'
      | 'version'
      | 'withdraw',
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'L2_ORACLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAX_UNBOND', values?: undefined): string
  encodeFunctionData(functionFragment: 'PORTAL', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'REQUIRED_BOND_AMOUNT',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'ROUND_DURATION',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'SECURITY_COUNCIL',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'TAX_DENOMINATOR',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'TAX_NUMERATOR',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'TRUSTED_VALIDATOR',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'VAULT_REWARD_GAS_LIMIT',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'addPendingBond',
    values: [BigNumberish, string],
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'createBond',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'deposit', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getBond',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getPendingBond',
    values: [BigNumberish, string],
  ): string
  encodeFunctionData(
    functionFragment: 'increaseBond',
    values: [BigNumberish, string],
  ): string
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string
  encodeFunctionData(functionFragment: 'isValidator', values: [string]): string
  encodeFunctionData(
    functionFragment: 'nextValidator',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'releasePendingBond',
    values: [BigNumberish, string, string],
  ): string
  encodeFunctionData(functionFragment: 'unbond', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'validatorCount',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'version', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish],
  ): string

  decodeFunctionResult(functionFragment: 'L2_ORACLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAX_UNBOND', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'PORTAL', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'REQUIRED_BOND_AMOUNT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'ROUND_DURATION',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'SECURITY_COUNCIL',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'TAX_DENOMINATOR',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'TAX_NUMERATOR',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'TRUSTED_VALIDATOR',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'VAULT_REWARD_GAS_LIMIT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'addPendingBond',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createBond', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getBond', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getPendingBond',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseBond',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isValidator', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'nextValidator',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'releasePendingBond',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'unbond', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'validatorCount',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'BondIncreased(uint256,address,uint128)': EventFragment
    'Bonded(address,uint256,uint128,uint128)': EventFragment
    'Initialized(uint8)': EventFragment
    'PendingBondAdded(uint256,address,uint128)': EventFragment
    'PendingBondReleased(uint256,address,address,uint128)': EventFragment
    'Unbonded(uint256,address,uint128)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'BondIncreased'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Bonded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PendingBondAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PendingBondReleased'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unbonded'): EventFragment
}

export interface BondIncreasedEventObject {
  outputIndex: BigNumber
  challenger: string
  amount: BigNumber
}
export type BondIncreasedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  BondIncreasedEventObject
>

export type BondIncreasedEventFilter = TypedEventFilter<BondIncreasedEvent>

export interface BondedEventObject {
  submitter: string
  outputIndex: BigNumber
  amount: BigNumber
  expiresAt: BigNumber
}
export type BondedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  BondedEventObject
>

export type BondedEventFilter = TypedEventFilter<BondedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface PendingBondAddedEventObject {
  outputIndex: BigNumber
  challenger: string
  amount: BigNumber
}
export type PendingBondAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PendingBondAddedEventObject
>

export type PendingBondAddedEventFilter =
  TypedEventFilter<PendingBondAddedEvent>

export interface PendingBondReleasedEventObject {
  outputIndex: BigNumber
  challenger: string
  recipient: string
  amount: BigNumber
}
export type PendingBondReleasedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  PendingBondReleasedEventObject
>

export type PendingBondReleasedEventFilter =
  TypedEventFilter<PendingBondReleasedEvent>

export interface UnbondedEventObject {
  outputIndex: BigNumber
  recipient: string
  amount: BigNumber
}
export type UnbondedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  UnbondedEventObject
>

export type UnbondedEventFilter = TypedEventFilter<UnbondedEvent>

export interface ValidatorPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ValidatorPoolInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    L2_ORACLE(overrides?: CallOverrides): Promise<[string]>

    MAX_UNBOND(overrides?: CallOverrides): Promise<[BigNumber]>

    PORTAL(overrides?: CallOverrides): Promise<[string]>

    REQUIRED_BOND_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>

    ROUND_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>

    SECURITY_COUNCIL(overrides?: CallOverrides): Promise<[string]>

    TAX_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>

    TAX_NUMERATOR(overrides?: CallOverrides): Promise<[BigNumber]>

    TRUSTED_VALIDATOR(overrides?: CallOverrides): Promise<[string]>

    VAULT_REWARD_GAS_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>

    addPendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    balanceOf(_addr: string, overrides?: CallOverrides): Promise<[BigNumber]>

    createBond(
      _outputIndex: BigNumberish,
      _expiresAt: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    deposit(
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>

    getBond(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[Types.BondStructOutput]>

    getPendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    increaseBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    initialize(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    isValidator(_addr: string, overrides?: CallOverrides): Promise<[boolean]>

    nextValidator(overrides?: CallOverrides): Promise<[string]>

    releasePendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      _recipient: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    unbond(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    validatorCount(overrides?: CallOverrides): Promise<[BigNumber]>

    version(overrides?: CallOverrides): Promise<[string]>

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>
  }

  L2_ORACLE(overrides?: CallOverrides): Promise<string>

  MAX_UNBOND(overrides?: CallOverrides): Promise<BigNumber>

  PORTAL(overrides?: CallOverrides): Promise<string>

  REQUIRED_BOND_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>

  ROUND_DURATION(overrides?: CallOverrides): Promise<BigNumber>

  SECURITY_COUNCIL(overrides?: CallOverrides): Promise<string>

  TAX_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>

  TAX_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>

  TRUSTED_VALIDATOR(overrides?: CallOverrides): Promise<string>

  VAULT_REWARD_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>

  addPendingBond(
    _outputIndex: BigNumberish,
    _challenger: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  balanceOf(_addr: string, overrides?: CallOverrides): Promise<BigNumber>

  createBond(
    _outputIndex: BigNumberish,
    _expiresAt: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  deposit(
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>

  getBond(
    _outputIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<Types.BondStructOutput>

  getPendingBond(
    _outputIndex: BigNumberish,
    _challenger: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  increaseBond(
    _outputIndex: BigNumberish,
    _challenger: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  initialize(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  isValidator(_addr: string, overrides?: CallOverrides): Promise<boolean>

  nextValidator(overrides?: CallOverrides): Promise<string>

  releasePendingBond(
    _outputIndex: BigNumberish,
    _challenger: string,
    _recipient: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  unbond(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  validatorCount(overrides?: CallOverrides): Promise<BigNumber>

  version(overrides?: CallOverrides): Promise<string>

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  callStatic: {
    L2_ORACLE(overrides?: CallOverrides): Promise<string>

    MAX_UNBOND(overrides?: CallOverrides): Promise<BigNumber>

    PORTAL(overrides?: CallOverrides): Promise<string>

    REQUIRED_BOND_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>

    ROUND_DURATION(overrides?: CallOverrides): Promise<BigNumber>

    SECURITY_COUNCIL(overrides?: CallOverrides): Promise<string>

    TAX_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>

    TAX_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>

    TRUSTED_VALIDATOR(overrides?: CallOverrides): Promise<string>

    VAULT_REWARD_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>

    addPendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: CallOverrides,
    ): Promise<void>

    balanceOf(_addr: string, overrides?: CallOverrides): Promise<BigNumber>

    createBond(
      _outputIndex: BigNumberish,
      _expiresAt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    deposit(overrides?: CallOverrides): Promise<void>

    getBond(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<Types.BondStructOutput>

    getPendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    increaseBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: CallOverrides,
    ): Promise<void>

    initialize(overrides?: CallOverrides): Promise<void>

    isValidator(_addr: string, overrides?: CallOverrides): Promise<boolean>

    nextValidator(overrides?: CallOverrides): Promise<string>

    releasePendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      _recipient: string,
      overrides?: CallOverrides,
    ): Promise<void>

    unbond(overrides?: CallOverrides): Promise<void>

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>

    version(overrides?: CallOverrides): Promise<string>

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'BondIncreased(uint256,address,uint128)'(
      outputIndex?: BigNumberish | null,
      challenger?: string | null,
      amount?: null,
    ): BondIncreasedEventFilter
    BondIncreased(
      outputIndex?: BigNumberish | null,
      challenger?: string | null,
      amount?: null,
    ): BondIncreasedEventFilter

    'Bonded(address,uint256,uint128,uint128)'(
      submitter?: string | null,
      outputIndex?: BigNumberish | null,
      amount?: null,
      expiresAt?: null,
    ): BondedEventFilter
    Bonded(
      submitter?: string | null,
      outputIndex?: BigNumberish | null,
      amount?: null,
      expiresAt?: null,
    ): BondedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'PendingBondAdded(uint256,address,uint128)'(
      outputIndex?: BigNumberish | null,
      challenger?: string | null,
      amount?: null,
    ): PendingBondAddedEventFilter
    PendingBondAdded(
      outputIndex?: BigNumberish | null,
      challenger?: string | null,
      amount?: null,
    ): PendingBondAddedEventFilter

    'PendingBondReleased(uint256,address,address,uint128)'(
      outputIndex?: BigNumberish | null,
      challenger?: string | null,
      recipient?: string | null,
      amount?: null,
    ): PendingBondReleasedEventFilter
    PendingBondReleased(
      outputIndex?: BigNumberish | null,
      challenger?: string | null,
      recipient?: string | null,
      amount?: null,
    ): PendingBondReleasedEventFilter

    'Unbonded(uint256,address,uint128)'(
      outputIndex?: BigNumberish | null,
      recipient?: string | null,
      amount?: null,
    ): UnbondedEventFilter
    Unbonded(
      outputIndex?: BigNumberish | null,
      recipient?: string | null,
      amount?: null,
    ): UnbondedEventFilter
  }

  estimateGas: {
    L2_ORACLE(overrides?: CallOverrides): Promise<BigNumber>

    MAX_UNBOND(overrides?: CallOverrides): Promise<BigNumber>

    PORTAL(overrides?: CallOverrides): Promise<BigNumber>

    REQUIRED_BOND_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>

    ROUND_DURATION(overrides?: CallOverrides): Promise<BigNumber>

    SECURITY_COUNCIL(overrides?: CallOverrides): Promise<BigNumber>

    TAX_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>

    TAX_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>

    TRUSTED_VALIDATOR(overrides?: CallOverrides): Promise<BigNumber>

    VAULT_REWARD_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>

    addPendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    balanceOf(_addr: string, overrides?: CallOverrides): Promise<BigNumber>

    createBond(
      _outputIndex: BigNumberish,
      _expiresAt: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    deposit(
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>

    getBond(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getPendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    increaseBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    isValidator(_addr: string, overrides?: CallOverrides): Promise<BigNumber>

    nextValidator(overrides?: CallOverrides): Promise<BigNumber>

    releasePendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      _recipient: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    unbond(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>

    version(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    L2_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAX_UNBOND(overrides?: CallOverrides): Promise<PopulatedTransaction>

    PORTAL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    REQUIRED_BOND_AMOUNT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    ROUND_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>

    SECURITY_COUNCIL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    TAX_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    TAX_NUMERATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    TRUSTED_VALIDATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    VAULT_REWARD_GAS_LIMIT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    addPendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    balanceOf(
      _addr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    createBond(
      _outputIndex: BigNumberish,
      _expiresAt: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    deposit(
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>

    getBond(
      _outputIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getPendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    increaseBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    initialize(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    isValidator(
      _addr: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    nextValidator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    releasePendingBond(
      _outputIndex: BigNumberish,
      _challenger: string,
      _recipient: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    unbond(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    validatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>
  }
}
