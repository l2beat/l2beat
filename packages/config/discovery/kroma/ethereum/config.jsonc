{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "ethereum",
  "name": "kroma",
  "import": ["../../ethereumConfig.jsonc"],
  "initialAddresses": [
    "0x31F648572b67e60Ec6eb8E197E1848CC5F5558de",
    "0x827962404D7104202C5aaa6b929115C8211d9596",
    "0x46d07221dfC313afe1BF104F4bB1f185301D65B9",
    "0xb3c415c2Aad428D5570208e1772cb68e7D06a537",
    "0x7e1Bdb9ee75B6ef1BCAAE3B1De1c616C7B11ef6e"
  ],
  "names": {
    "0x31F648572b67e60Ec6eb8E197E1848CC5F5558de": "KromaPortal",
    "0x180c77aE51a9c505a43A2C7D81f8CE70cacb93A6": "L2OutputOracle",
    "0x3de211088dF516da72efe68D386b561BEE256Ec4": "KromaSecurityCouncil",
    "0x46B8bB4C5dd27bB42807Db477af4d1a7C8A5B746": "L1CrossDomainMessenger",
    "0x713C2BEd44eB45D490afB8D4d1aA6F12290B829a": "Colosseum",
    "0xFdFF462845953D90719A78Fd12a2d103541d2103": "ValidatorPool",
    "0x232277d9672eEdd53c4B26C0F386C2Eb88DC7363": "ValidatorManager",
    "0xa295310DE52b86F236A815AFb2f518F3C0F5A6D3": "AssetManager",
    "0xb3c415c2Aad428D5570208e1772cb68e7D06a537": "UpgradeGovernor",
    "0xe4D08346609055c091D3DEECdAAd3Bf83119B08c": "SecurityCouncilTokenOwners",
    "0x3aa00bb915A8e78b0523E4c365e3E70A19d329e6": "KromaOperator",
    "0xFd234971881a7c72965175fA8E438c97B2Dcd273": "Poseidon2",
    "0x7e1Bdb9ee75B6ef1BCAAE3B1De1c616C7B11ef6e": "USDCBridge",
    "0xe57E217d8ed498992452791622711B866403E950": "KromaRewardVaultMultisig",
    "0x339208824010425cBE73201ceD4372308ACD610B": "ZKMerkleTrie",
    "0x6deb6a630D7b486c1C08d4016AEe3835a2F52Fa7": "ZkVerifier",
    "0x3B6041173B80E77f038f3F2C0f9744f04837185e": "SP1VerifierGateway"
  },
  "overrides": {
    "SP1VerifierGateway": {
      "fields": {
        "verifier": {
          "description": "The prover contract address for SP1, and whether it is frozen (true if frozen).",
          "handler": {
            "type": "call",
            "method": "function routes(bytes4) view returns (address prover, bool frozen)",
            "args": [
              // first 4 bytes of the blobstream proof are used as identifier
              "0x0000dead" // identifier for kroma is unknown
            ]
          },
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "can verify proofs for the header range [latestBlock, targetBlock] proof."
              }
            ]
          }
        }
      }
    },
    "KromaRewardVaultMultisig": {
      "description": "Escrows a pool of KRO used as validator rewards by the AssetManager.",
      "ignoreRelatives": ["KGH"]
    },
    "ZkVerifier": {
      "description": "ZK verifier used to verify the last step of a legacy zkEVM proof, which corresponds to a block."
    },
    "ZKMerkleTrie": {
      "description": "Merkle Trie contract used to prove withdrawals that were initiated in the legacy system, deprecated for new withdrawals and succeeded by a merkle tree library in the KromaPortal."
    },
    "Poseidon2": {
      "description": "Contract used to compute hashes. It is used by the ZKMerkeTrie. The contract has been generated using the circomlibjs library.",
      "manualSourcePaths": {
        // Kroma's Poseidon2 contract, deployed using Circomlibjs,
        "0xFd234971881a7c72965175fA8E438c97B2Dcd273": "https://github.com/iden3/circomlibjs/blob/main/src/poseidon_gencontract.js"
      }
    },
    "AssetManager": {
      "description": "Manages the delegation and undelegation of KRO tokens and Kroma Guardian House (KGH) NFTs for Proposers (Kroma Validators) and distributes rewards.",
      "ignoreRelatives": ["ASSET_TOKEN", "KGH"]
    },
    "ValidatorManager": {
      "description": "Manages the set of Proposers (Validators in Kroma) and selects the next proposer with the window to submit the output root within {{RoundDurationFormatted}}, after which anyone can propose for them. It is also the entry point for other contracts, such as the L2OutputOracle and the Colosseum, which distribute output rewards and slash challenge losers. It makes successive calls to the AssetManager to apply changes to the proposers' assets.",
      "ignoreInWatchMode": [
        "activatedValidatorCount",
        "activatedValidatorTotalWeight",
        "nextValidator"
      ],
      "fields": {
        "RoundDurationFormatted": {
          "handler": {
            "type": "call",
            "method": "ROUND_DURATION_SECONDS",
            "args": []
          },
          "returnType": "(FormatSeconds)"
        }
      }
    },
    "L2OutputOracle": {
      "description": "The L2OutputOracle contract contains a list of proposed state roots which Proposers assert to be a result of block execution. Anyone can participate as a Proposer by depositing in the ValidatorPool. A root can be proposed every {{SUBMISSION_INTERVAL}} blocks (2s block time).",
      "ignoreMethods": [
        "computeL2Timestamp",
        "finalizedAt",
        "getL2Output",
        "getL2OutputAfter",
        "getL2OutputIndexAfter",
        "getSubmitter",
        "isFinalized"
      ],
      "ignoreInWatchMode": [
        "latestBlockNumber",
        "latestOutputIndex",
        "nextBlockNumber",
        "nextOutputIndex",
        "nextFinalizeOutputIndex",
        "nextOutputMinL2Timestamp"
      ],
      "fields": {
        "COLOSSEUM": {
          "description": "Contract used to challenge state roots and prove fraud.",
          "severity": "HIGH",
          "type": "CODE_CHANGE"
        }
      }
    },
    "KromaPortal": {
      "description": "This is a fork of the standard OP stack OptimismPortal contract, the main entry point to deposit funds from L1 to L2. It also allows to prove and finalize withdrawals.",
      "ignoreMethods": ["isOutputFinalized"],
      "ignoreInWatchMode": ["params"],
      "fields": {
        "GUARDIAN": {
          "target": {
            "permissions": [
              {
                "type": "guard"
              }
            ]
          }
        }
      }
    },
    "Colosseum": {
      "description": "Contract used to challenge state roots and prove fraud. If successful, the wrong state root in the {{L2_ORACLE}} is replaced.",
      "ignoreMethods": [
        "isInCreationPeriod",
        "deletedOutputs",
        "segmentsLengths"
      ],
      "fields": {
        "SECURITY_COUNCIL": {
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "dismiss ongoing challenges and override state roots (`forceDeleteOutput()`)."
              }
            ]
          }
        },
        "challengedRoots": {
          "description": "State roots that have been challenged by the validators. Challenges are created when, according to the validators, the roots commit to an incorrect L2 state.",
          "severity": "HIGH",
          "handler": {
            "type": "event",
            "select": "outputIndex",
            "add": { "event": "ChallengeCreated" },
            "ignoreRelative": true
          }
        },
        "accessControl": {
          "handler": {
            "type": "accessControl"
          }
        }
      }
    },
    "ValidatorPool": {
      "description": "Contract used to manage the Proposers. Anyone can submit a deposit and bond to a state root, or create a challenge. It also manages the Proposer rotation for each submittable block using a random selection. If the selected proposer fails to publish a root within {{RoundDurationFormatted}} then the submission becomes open to everyone.",
      "ignoreMethods": ["getBond", "isTerminated"],
      "ignoreInWatchMode": ["nextValidator", "validatorCount"],
      "fields": {
        "SECURITY_COUNCIL": {
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "become a validator without posting a bond."
              }
            ]
          }
        },
        "RoundDurationFormatted": {
          "handler": {
            "type": "call",
            "method": "ROUND_DURATION",
            "args": []
          },
          "returnType": "(FormatSeconds)"
        }
      }
      // discovers all 300+ validator addresses:
      // "fields": {
      //   "validators": {
      //     "handler": {
      //       "type": "dynamicArray",
      //       "slot": 54,
      //       "returnType": "address",
      //       "ignoreRelative": true
      //     }
      //   }
      // }
    },
    "UpgradeGovernor": {
      "description": "A governance proxy contract using token voting with {{token}} as identification of actors allowed to vote/sign a proposal which is passed to the {{timelock}} afterwards.",
      "ignoreMethods": [
        "proposalDeadline",
        "proposalEta",
        "proposalProposer",
        "proposalSnapshot",
        "proposalVotes",
        "quorum"
      ],
      "ignoreInWatchMode": ["clock"],
      "fields": {
        "token": {
          "target": {
            "permissions": [
              {
                "type": "act"
              }
            ]
          }
        }
      }
    },
    "KromaSecurityCouncil": {
      "description": "Custom Multisig contract in which each signer is identified by a token. The threshold is {{quorum}} and the token contract is called SecurityCouncilToken.",
      "canActIndependently": true,
      "ignoreMethods": [
        "getConfirmationCount",
        "getConfirmations",
        "confirmations",
        "isConfirmed",
        "outputsDeleteRequested",
        "transactions",
        "getOwners", // already read from owners array,
        "clock"
      ],
      "fields": {
        "COLOSSEUM": {
          "description": "Contract used to challenge state roots and prove fraud.",
          "severity": "HIGH",
          "type": "CODE_CHANGE"
        },
        "transactionCount": {
          "description": "Increases with each Security Council action.",
          "severity": "HIGH",
          "type": "L2"
        }
      },
      "references": [
        {
          "text": "Security Council members - Announcing Kroma Security Council",
          "href": "https://blog.kroma.network/announcing-kroma-security-council-435b540d2ab4"
        }
      ]
    },
    "SecurityCouncilTokenOwners": {
      "description": "A soulbound token implementation to identify participants of the KromaSecurityCouncil. Owners of the token are members of the council. There are currently {{totalSupply}} members.",
      "ignoreMethods": ["getPastTotalSupply", "tokenByIndex"],
      "ignoreInWatchMode": ["clock", "ownerOf"],
      "fields": {
        "tokens": {
          "handler": {
            "type": "array",
            "method": "tokenByIndex"
          }
        },
        "tokenOwners": {
          "handler": {
            "type": "array",
            "method": "ownerOf",
            "indices": "{{ tokens }}"
          },
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "one of the signers of the KromaSecurityCouncil."
              }
            ]
          }
        }
      }
    },
    "USDCBridge": {
      "ignoreMethods": ["OTHER_BRIDGE"]
    }
  }
}
