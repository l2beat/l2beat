{
  "name": "unichain",
  "chain": "unichain",
  "blockNumber": 9227118,
  "configHash": "0x379519bcf95828b5d33e872906d1a1f251e52130a49050300bf15b4af2916a59",
  "contracts": [
    {
      "name": "DeployerWhitelist",
      "address": "0x4200000000000000000000000000000000000002",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x0fd28d62e5a8f9fd1412bc515a5e629d1d43df8bc41d81ea00ae50082dbb7a7d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Legacy contract that was originally used to act as a whitelist of addresses allowed to the Optimism network. Fully unused and deprecated since the Bedrock upgrade.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xc0d3c0d3C0d3c0D3c0d3C0D3c0d3C0d3c0D30002",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "owner": "0x0000000000000000000000000000000000000000",
        "version": "1.1.1-beta.1"
      },
      "derivedName": "DeployerWhitelist"
    },
    {
      "name": "L2CrossDomainMessenger",
      "address": "0x4200000000000000000000000000000000000007",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x232dce20746263348611758da13c5157e6731aa8b6a6fde61475eb230f8a87f0"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The L2CrossDomainMessenger (L2xDM) contract sends messages from L2 to L1, and relays messages from L1 onto L2 with a system tx. In the event that a message sent from L2 to L1 is rejected for exceeding the L1 gas limit, it can be resubmitted via this contractâ€™s replay function.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xC0d3c0d3c0D3c0D3C0d3C0D3C0D3c0d3c0d30007",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l1CrossDomainMessenger": "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6",
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292619988",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6",
        "otherMessenger": "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6",
        "paused": false,
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "version": "2.1.1-beta.1"
      },
      "derivedName": "L2CrossDomainMessenger"
    },
    {
      "name": "GasPriceOracle",
      "address": "0x420000000000000000000000000000000000000F",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x6e5bd465cdf07c7fc7de194833be336109be5aceaeb509643962096c772ec26a"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Provides the current gas price for L2 transactions.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["l1BaseFee", "blobBaseFee"],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xc0d3C0d3C0d3c0D3C0D3C0d3C0d3C0D3C0D3000f",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "baseFee": 0,
        "baseFeeScalar": 2000,
        "blobBaseFee": 8046209,
        "blobBaseFeeScalar": 900000,
        "decimals": 6,
        "DECIMALS": 6,
        "gasPrice": 0,
        "isEcotone": true,
        "isFjord": true,
        "l1BaseFee": 814176901,
        "version": "1.3.1-beta.1"
      },
      "derivedName": "GasPriceOracle"
    },
    {
      "name": "L2StandardBridge",
      "address": "0x4200000000000000000000000000000000000010",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0xa4f24c20d581e0bac8e94e683fdd07c596b2e534f9e822aaddf952658542972d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The L2StandardBridge contract is the main entry point to deposit or withdraw ERC20 tokens from L2 to L1. This contract can store any token.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xC0d3c0d3c0D3c0d3C0D3c0D3C0d3C0D3C0D30010",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l1TokenBridge": "0x81014F44b0a345033bB2b3B21C7a1A308B35fEeA",
        "messenger": "0x4200000000000000000000000000000000000007",
        "MESSENGER": "0x4200000000000000000000000000000000000007",
        "OTHER_BRIDGE": "0x81014F44b0a345033bB2b3B21C7a1A308B35fEeA",
        "otherBridge": "0x81014F44b0a345033bB2b3B21C7a1A308B35fEeA",
        "paused": false,
        "version": "1.11.1-beta.1"
      },
      "derivedName": "L2StandardBridge"
    },
    {
      "name": "SequencerFeeVault",
      "address": "0x4200000000000000000000000000000000000011",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0xbf16b8057a2beae4130302910e769f47307e0e0e5afd365093b06effa159019c"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Collects the sequencer fees, which are withdrawable to the FeesCollector on L1.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xC0D3C0d3c0d3c0d3C0D3c0d3C0D3c0d3c0D30011",
        "$pastUpgrades": [
          [
            "2024-12-05T19:19:37.000Z",
            "0x535fc15c66b384bf5f53847b4f1d5666a8a3a24f9e43f66854b1643b641312a8",
            ["0x95Fc06E1F6330F2829f0622d6158F5b1E21597B0"]
          ]
        ],
        "$upgradeCount": 1,
        "l1FeeWallet": "0x4300c0D3c0d3c0d3c0d3c0d3C0D3c0d3c0d30001",
        "MIN_WITHDRAWAL_AMOUNT": 1,
        "minWithdrawalAmount": 1,
        "recipient": "0x4300c0D3c0d3c0d3c0d3c0d3C0D3c0d3c0d30001",
        "RECIPIENT": "0x4300c0D3c0d3c0d3c0d3c0d3C0D3c0d3c0d30001",
        "version": "1.5.0-beta.2",
        "WITHDRAWAL_NETWORK": 1,
        "withdrawalNetwork": 1
      },
      "derivedName": "SequencerFeeVault"
    },
    {
      "name": "OptimismMintableERC20Factory",
      "address": "0x4200000000000000000000000000000000000012",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x7235f633505819bfbed4f3905acfb40f5998a831cc47abc2f22f730a0bc3686a"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Factory contract to create bridge compliant ERC20 IOU token representations of bridged L1 ERC20 tokens.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xc0D3c0d3C0d3c0d3c0D3c0d3c0D3c0D3c0D30012",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "bridge": "0x4200000000000000000000000000000000000010",
        "BRIDGE": "0x4200000000000000000000000000000000000010",
        "version": "1.10.1-beta.2"
      },
      "derivedName": "OptimismMintableERC20Factory"
    },
    {
      "name": "L1BlockNumber",
      "address": "0x4200000000000000000000000000000000000013",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x56c885b4644f191a780cd112098dd6bff77fae09fd61699d3d34a1fee191e919"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Simple contract that returns the latest L1 block number.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xC0D3C0d3C0D3c0D3C0d3c0D3C0d3c0d3C0d30013",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "version": "1.1.1-beta.1"
      },
      "derivedName": "L1BlockNumber"
    },
    {
      "name": "L2ERC721Bridge",
      "address": "0x4200000000000000000000000000000000000014",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0xf8e3171eeccb9b5e31480276120e77545d7f33ae218b16ee367370dc484149f2"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The L2ERC721Bridge contract is the main entry point to deposit or withdraw ERC721 tokens from L2 to L1. This contract can store any token.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xC0D3c0d3c0d3c0d3c0D3C0d3C0D3C0D3c0d30014",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "messenger": "0x4200000000000000000000000000000000000007",
        "MESSENGER": "0x4200000000000000000000000000000000000007",
        "OTHER_BRIDGE": "0xD04D0D87E0bd4D2E50286760a3EF323FeA6849Cf",
        "otherBridge": "0xD04D0D87E0bd4D2E50286760a3EF323FeA6849Cf",
        "paused": false,
        "version": "1.7.1-beta.2"
      },
      "derivedName": "L2ERC721Bridge"
    },
    {
      "name": "L1Block",
      "address": "0x4200000000000000000000000000000000000015",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x936b7b7eb2a88a64e3eceaf897abfa2dc6e48b4c75eba2da34ff927b98413b6b"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Simple contract that returns information about the latest L1 block, which is derived permissionlessly from the L1 chain.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "ignoreInWatchMode": [
        "basefee",
        "hash",
        "number",
        "timestamp",
        "sequenceNumber",
        "blobBaseFee"
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xc0d3C0D3C0D3c0D3C0D3C0d3C0D3c0D3c0d30015",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "basefee": 814176901,
        "baseFeeScalar": 2000,
        "batcherHash": "0x0000000000000000000000002f60a5184c63ca94f82a27100643dbabe4f3f7fd",
        "blobBaseFee": 8046209,
        "blobBaseFeeScalar": 900000,
        "DEPOSITOR_ACCOUNT": "0xDeaDDEaDDeAdDeAdDEAdDEaddeAddEAdDEAd0001",
        "gasPayingToken": {
          "addr_": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
          "decimals_": 18
        },
        "gasPayingTokenName": "Ether",
        "gasPayingTokenSymbol": "ETH",
        "hash": "0x12b12164405894c92165a6c4f1ec25b0c0a104017f8dfcaa7ad8ea1adb7ff4e1",
        "isCustomGasToken": false,
        "l1FeeOverhead": 0,
        "l1FeeScalar": 0,
        "number": 21881020,
        "sequenceNumber": 0,
        "timestamp": 1739975423,
        "version": "1.5.1-beta.1"
      },
      "derivedName": "L1Block"
    },
    {
      "name": "L2ToL1MessagePasser",
      "address": "0x4200000000000000000000000000000000000016",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x1904a0b899857bcfd0f09e8b106c904d2d1a1fc1bcc0d3f7f0a77e6ab9daacb4"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract used internally by the L2CrossDomainMessenger to send messages to L1, including withdrawals. It can also be used directly as a low-level interface.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xC0D3C0d3C0d3c0d3C0d3C0D3c0D3c0d3c0D30016",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "MESSAGE_VERSION": 1,
        "version": "1.1.1-beta.1"
      },
      "derivedName": "L2ToL1MessagePasser"
    },
    {
      "name": "OptimismMintableERC721Factory",
      "address": "0x4200000000000000000000000000000000000017",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0xd05d0050b36bb2fb43c345eabc2d7f6e796571360aa2198707da64794c5f4b64"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Factory contract to create bridge compliant ERC721 IOU token representations of bridged L1 ERC721 tokens.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xc0d3C0d3C0d3C0d3C0d3c0d3C0D3C0d3C0D30017",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "BRIDGE": "0x4200000000000000000000000000000000000014",
        "REMOTE_CHAIN_ID": 1,
        "version": "1.4.1-beta.1"
      },
      "derivedName": "OptimismMintableERC721Factory"
    },
    {
      "name": "L2ProxyAdmin",
      "address": "0x4200000000000000000000000000000000000018",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0xe6aa6a8aed0808dc2e9355191d252aeab0c0891c1f81e4c9e51bc206fee6740c"
      ],
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000002"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000007"
        },
        {
          "permission": "upgrade",
          "from": "0x420000000000000000000000000000000000000F"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000010"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000011"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000012"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000013"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000014"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000015"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000016"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000017"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000018"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000019"
        },
        {
          "permission": "upgrade",
          "from": "0x420000000000000000000000000000000000001A"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000020"
        },
        {
          "permission": "upgrade",
          "from": "0x4200000000000000000000000000000000000021"
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xC0d3C0D3c0d3C0d3c0d3c0D3C0D3C0d3C0D30018",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "addressManager": "0x0000000000000000000000000000000000000000",
        "isUpgrading": false,
        "owner": "0x7E6c183F538abb8572F5cd17109C617b994d6944"
      },
      "derivedName": "ProxyAdmin"
    },
    {
      "name": "BaseFeeVault",
      "address": "0x4200000000000000000000000000000000000019",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x0706f7ff4b2f4c1e03bff710e9b98afa6f716ae6ac7b5e61797f9cb40a58221a"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Collects EIP-1559 base fees, which are withdrawable to the FeesCollector on L1.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xC0d3c0D3c0d3C0D3C0D3C0d3c0D3C0D3c0d30019",
        "$pastUpgrades": [
          [
            "2024-12-05T19:19:37.000Z",
            "0xb16f95118e9269c5d7e0ee3a58e4cf22cb5a7e74c2ae7446b4419fd6855aa761",
            ["0xeb82050BB91e4879E256E0cF9a7C4bD58916aa6e"]
          ]
        ],
        "$upgradeCount": 1,
        "MIN_WITHDRAWAL_AMOUNT": 1,
        "minWithdrawalAmount": 1,
        "recipient": "0x4300c0D3c0d3c0d3c0d3c0d3C0D3c0d3c0d30001",
        "RECIPIENT": "0x4300c0D3c0d3c0d3c0d3c0d3C0D3c0d3c0d30001",
        "version": "1.5.0-beta.2",
        "WITHDRAWAL_NETWORK": 1,
        "withdrawalNetwork": 1
      },
      "derivedName": "BaseFeeVault"
    },
    {
      "name": "L1FeeVault",
      "address": "0x420000000000000000000000000000000000001A",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x6cd48142610d7634a3e49c7a9f181be68c6ca47b0ed2777c884a26a219ebb034"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Collects the L1 portion of the L2 transaction fees, which are withdrawable to the FeesCollector on L1.",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xc0D3c0D3C0d3c0d3c0d3C0d3c0d3C0d3C0D3001A",
        "$pastUpgrades": [
          [
            "2024-12-05T19:19:37.000Z",
            "0x66332072346a29a118b78491d791cb2abb2cea8f16e343b492e25f1ba9785406",
            ["0xc1fB143b9dF08eB0612ABCA237Dfe3726da2ED15"]
          ]
        ],
        "$upgradeCount": 1,
        "MIN_WITHDRAWAL_AMOUNT": 1,
        "minWithdrawalAmount": 1,
        "recipient": "0x4300c0D3c0d3c0d3c0d3c0d3C0D3c0d3c0d30001",
        "RECIPIENT": "0x4300c0D3c0d3c0d3c0d3c0d3C0D3c0d3c0d30001",
        "version": "1.5.0-beta.2",
        "WITHDRAWAL_NETWORK": 1,
        "withdrawalNetwork": 1
      },
      "derivedName": "L1FeeVault"
    },
    {
      "name": "SchemaRegistry",
      "address": "0x4200000000000000000000000000000000000020",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x8953b1a1d45818a07988bc049a217a4400be83db95b5aeced6a374e52cd17c5e"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contracts to register schemas for the Ethereum Attestation Service (EAS).",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xc0d3c0d3c0d3C0d3c0d3C0D3C0D3c0d3C0D30020",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "version": "1.3.1-beta.1"
      },
      "derivedName": "SchemaRegistry"
    },
    {
      "name": "EAS",
      "address": "0x4200000000000000000000000000000000000021",
      "sourceHashes": [
        "0xdb44b7e73254e0314f233ca790b4d44a2f9e3cebc019945c0ef84b9e3579c77a",
        "0x0ca562554163a2c4d87d76cd922699bca2c35809d5595ca3737d56db3d87b9f9"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract containing the main logic for the Ethereum Attestation Service (EAS).",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0x4200000000000000000000000000000000000018",
          "via": []
        }
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$admin": "0x4200000000000000000000000000000000000018",
        "$implementation": "0xC0D3c0D3C0d3c0D3c0D3C0D3c0D3c0d3c0d30021",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "getAttestTypeHash": "0xfeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d988076",
        "getDomainSeparator": "0xd940a73236ef2df8e7b3d43c8c02045c7ebbbb3aeeedcd94a46d96d33838769c",
        "getName": "EAS",
        "getRevokeTypeHash": "0xb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e75",
        "getSchemaRegistry": "0x4200000000000000000000000000000000000020",
        "version": "1.4.1-beta.1"
      },
      "derivedName": "EAS"
    },
    {
      "name": "FeeSplitter",
      "address": "0x4300c0D3c0d3c0d3c0d3c0d3C0D3c0d3c0d30001",
      "sourceHashes": [
        "0x1f2b6fc2c60f9146209fc5eb2dacd47f042450f4348d6656802b5b561c6325ea"
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$immutable": true,
        "L1_FEE_RECIPIENT": "0x4300c0d3c0d3c0D3c0d3C0D3c0d3C0D3C0D30003",
        "NET_FEE_RECIPIENT": "0x4300c0D3c0D3c0D3c0D3c0D3C0D3c0d3c0D30004",
        "OPTIMISM_WALLET": "0x4300C0D3C0D3C0D3C0d3C0d3c0d3C0d3C0d30002"
      }
    },
    {
      "name": "L1Splitter",
      "address": "0x4300C0D3C0D3C0D3C0d3C0d3c0d3C0d3C0d30002",
      "sourceHashes": [
        "0x4463f100e9cf9f75c48ce2bdf395baea65cffbcfc47d7b49c54ac49deb99fb09"
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$immutable": true,
        "feeDisbursementInterval": 86400,
        "l1Recipient": "0xa3d596EAfaB6B13Ab18D40FaE1A962700C84ADEa",
        "lastDisbursementTime": 0,
        "minWithdrawalAmount": "10000000000000000000",
        "owner": "0xb4E696eAFAB6B13AB18D40fAE1a962700C84BefB",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "L1Splitter",
      "address": "0x4300c0d3c0d3c0D3c0d3C0D3c0d3C0D3C0D30003",
      "sourceHashes": [
        "0x4463f100e9cf9f75c48ce2bdf395baea65cffbcfc47d7b49c54ac49deb99fb09"
      ],
      "sinceTimestamp": 1730748360,
      "values": {
        "$immutable": true,
        "feeDisbursementInterval": 86400,
        "l1Recipient": "0x2F60A5184c63ca94f82a27100643DbAbe4F3f7Fd",
        "lastDisbursementTime": 0,
        "minWithdrawalAmount": "10000000000000000000",
        "owner": "0xa356d5D10aA8A842B31530dE71EA86c0760CB2C2",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "NetFeeSplitter",
      "address": "0x4300c0D3c0D3c0D3c0D3c0D3C0D3c0d3c0D30004",
      "sourceHashes": [
        "0x3ce35b9a968810e9a9f15e947ea37fd6403fb3feb01252004814d90926556ea1"
      ],
      "sinceTimestamp": 1730748360,
      "values": { "$immutable": true }
    }
  ],
  "eoas": [
    { "address": "0x0000000000000000000000000000000000000000" },
    { "address": "0x2F60A5184c63ca94f82a27100643DbAbe4F3f7Fd" },
    {
      "name": "OPToken",
      "address": "0x4200000000000000000000000000000000000042"
    },
    { "address": "0x7E6c183F538abb8572F5cd17109C617b994d6944" },
    { "address": "0x81014F44b0a345033bB2b3B21C7a1A308B35fEeA" },
    { "address": "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6" },
    { "address": "0xa356d5D10aA8A842B31530dE71EA86c0760CB2C2" },
    { "address": "0xa3d596EAfaB6B13Ab18D40FaE1A962700C84ADEa" },
    { "address": "0xb4E696eAFAB6B13AB18D40fAE1a962700C84BefB" },
    { "address": "0xD04D0D87E0bd4D2E50286760a3EF323FeA6849Cf" },
    { "address": "0xDeaDDEaDDeAdDeAdDEAdDEaddeAddEAdDEAd0001" },
    { "address": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE" }
  ],
  "abis": {
    "0x4200000000000000000000000000000000000002": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000007": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x420000000000000000000000000000000000000F": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000010": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000011": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000012": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000013": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000014": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000015": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000016": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000017": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000018": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000019": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x420000000000000000000000000000000000001A": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000020": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4200000000000000000000000000000000000021": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "0x4300c0D3c0d3c0d3c0d3c0d3C0D3c0d3c0d30001": [
      "constructor(address optimismWallet, address l1FeeRecipient, address netFeeRecipient)",
      "error AddressZero()",
      "error Locked()",
      "error MustWithdrawToFeeSplitter()",
      "error MustWithdrawToL2()",
      "error OnlyVaults()",
      "error TransferFailed()",
      "event FeesDistributed(uint256 optimismShare, uint256 l1Fees, uint256 netShare)",
      "event NoFeesCollected()",
      "function L1_FEE_RECIPIENT() view returns (address)",
      "function NET_FEE_RECIPIENT() view returns (address)",
      "function OPTIMISM_WALLET() view returns (address)",
      "function distributeFees() returns (bool feesDistributed)"
    ],
    "0x4300C0D3C0D3C0D3C0d3C0d3c0d3C0d3C0d30002": [
      "constructor(address initialOwner, address l1Wallet, uint48 feeDisbursementInterval_, uint256 minWithdrawalAmount_)",
      "error AddressZero()",
      "error DisbursementIntervalNotReached()",
      "error InsufficientWithdrawalAmount()",
      "error MinDisbursementInterval()",
      "error MinWithdrawalAmount()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event FeeDisbursementIntervalUpdated(uint48 oldInterval, uint48 newInterval)",
      "event L1RecipientUpdated(address indexed oldRecipient, address indexed newRecipient)",
      "event MinWithdrawalAmountUpdated(uint256 oldAmount, uint256 newAmount)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Withdrawal(address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function feeDisbursementInterval() view returns (uint48)",
      "function l1Recipient() view returns (address)",
      "function lastDisbursementTime() view returns (uint48)",
      "function minWithdrawalAmount() view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function updateFeeDisbursementInterval(uint48 newInterval)",
      "function updateL1Recipient(address newRecipient)",
      "function updateMinWithdrawalAmount(uint256 newAmount)",
      "function withdraw() returns (uint256 balance)"
    ],
    "0x4300c0d3c0d3c0D3c0d3C0D3c0d3C0D3C0D30003": [
      "constructor(address initialOwner, address l1Wallet, uint48 feeDisbursementInterval_, uint256 minWithdrawalAmount_)",
      "error AddressZero()",
      "error DisbursementIntervalNotReached()",
      "error InsufficientWithdrawalAmount()",
      "error MinDisbursementInterval()",
      "error MinWithdrawalAmount()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event FeeDisbursementIntervalUpdated(uint48 oldInterval, uint48 newInterval)",
      "event L1RecipientUpdated(address indexed oldRecipient, address indexed newRecipient)",
      "event MinWithdrawalAmountUpdated(uint256 oldAmount, uint256 newAmount)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Withdrawal(address indexed recipient, uint256 amount)",
      "function acceptOwnership()",
      "function feeDisbursementInterval() view returns (uint48)",
      "function l1Recipient() view returns (address)",
      "function lastDisbursementTime() view returns (uint48)",
      "function minWithdrawalAmount() view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function updateFeeDisbursementInterval(uint48 newInterval)",
      "function updateL1Recipient(address newRecipient)",
      "function updateMinWithdrawalAmount(uint256 newAmount)",
      "function withdraw() returns (uint256 balance)"
    ],
    "0x4300c0D3c0D3c0D3c0D3c0D3C0D3c0d3c0D30004": [
      "constructor(address[] initialRecipients, tuple(address setter, uint256 allocation)[] recipientData)",
      "error AllocationZero()",
      "error DuplicateRecipient()",
      "error InsufficientAllocation()",
      "error InvalidRecipients()",
      "error InvalidTotalAllocation()",
      "error RecipientZero()",
      "error SetterAlreadySet()",
      "error SetterZero()",
      "error Unauthorized()",
      "error WithdrawalFailed()",
      "event AllocationTransferred(address indexed setter, address indexed from, address indexed to, uint256 allocation)",
      "event SetterTransferred(address indexed recipient, address indexed previousSetter, address indexed newSetter)",
      "event Withdrawn(address indexed recipient, address indexed to, uint256 amount)",
      "function balanceOf(address recipient) view returns (uint256)",
      "function earnedFees(address account) view returns (uint256)",
      "function recipients(address recipient) view returns (address setter, uint256 allocation)",
      "function setterOf(address recipient) view returns (address)",
      "function transferAllocation(address oldRecipient, address newRecipient, uint256 allocation)",
      "function transferAllocationAndSetSetter(address oldRecipient, address newRecipient, address newSetter, uint256 allocation)",
      "function transferSetter(address recipient, address newSetter)",
      "function withdrawFees(address to) returns (uint256 amount)"
    ],
    "0xc0d3c0d3C0d3c0D3c0d3C0D3c0d3C0d3c0D30002": [
      "event OwnerChanged(address oldOwner, address newOwner)",
      "event WhitelistDisabled(address oldOwner)",
      "event WhitelistStatusChanged(address deployer, bool whitelisted)",
      "function enableArbitraryContractDeployment()",
      "function isDeployerAllowed(address _deployer) view returns (bool)",
      "function owner() view returns (address)",
      "function setOwner(address _owner)",
      "function setWhitelistedDeployer(address _deployer, bool _isWhitelisted)",
      "function version() view returns (string)",
      "function whitelist(address) view returns (bool)"
    ],
    "0xC0d3c0d3c0D3c0D3C0d3C0D3C0D3c0d3c0d30007": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _l1CrossDomainMessenger)",
      "function l1CrossDomainMessenger() view returns (address)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0xc0d3C0d3C0d3c0D3C0D3C0d3C0d3C0D3C0D3000f": [
      "function DECIMALS() view returns (uint256)",
      "function baseFee() view returns (uint256)",
      "function baseFeeScalar() view returns (uint32)",
      "function blobBaseFee() view returns (uint256)",
      "function blobBaseFeeScalar() view returns (uint32)",
      "function decimals() pure returns (uint256)",
      "function gasPrice() view returns (uint256)",
      "function getL1Fee(bytes _data) view returns (uint256)",
      "function getL1FeeUpperBound(uint256 _unsignedTxSize) view returns (uint256)",
      "function getL1GasUsed(bytes _data) view returns (uint256)",
      "function isEcotone() view returns (bool)",
      "function isFjord() view returns (bool)",
      "function l1BaseFee() view returns (uint256)",
      "function overhead() view returns (uint256)",
      "function scalar() view returns (uint256)",
      "function setEcotone()",
      "function setFjord()",
      "function version() view returns (string)"
    ],
    "0xC0d3c0d3c0D3c0d3C0D3c0D3C0d3C0D3C0D30010": [
      "constructor()",
      "event DepositFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "event WithdrawalInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _otherBridge)",
      "function l1TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function version() pure returns (string)",
      "function withdraw(address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData) payable",
      "function withdrawTo(address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData) payable"
    ],
    "0xC0D3C0d3c0d3c0d3C0D3c0d3C0D3c0d3c0D30011": [
      "constructor(address _recipient, uint256 _minWithdrawalAmount, uint8 _withdrawalNetwork)",
      "event Withdrawal(uint256 value, address to, address from)",
      "event Withdrawal(uint256 value, address to, address from, uint8 withdrawalNetwork)",
      "function MIN_WITHDRAWAL_AMOUNT() view returns (uint256)",
      "function RECIPIENT() view returns (address)",
      "function WITHDRAWAL_NETWORK() view returns (uint8)",
      "function l1FeeWallet() view returns (address)",
      "function minWithdrawalAmount() view returns (uint256 amount_)",
      "function recipient() view returns (address recipient_)",
      "function totalProcessed() view returns (uint256)",
      "function version() view returns (string)",
      "function withdraw()",
      "function withdrawalNetwork() view returns (uint8 network_)"
    ],
    "0xc0D3c0d3C0d3c0d3c0D3c0d3c0D3c0D3c0D30012": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event OptimismMintableERC20Created(address indexed localToken, address indexed remoteToken, address deployer)",
      "event StandardL2TokenCreated(address indexed remoteToken, address indexed localToken)",
      "function BRIDGE() view returns (address)",
      "function bridge() view returns (address)",
      "function createOptimismMintableERC20(address _remoteToken, string _name, string _symbol) returns (address)",
      "function createOptimismMintableERC20WithDecimals(address _remoteToken, string _name, string _symbol, uint8 _decimals) returns (address)",
      "function createStandardL2Token(address _remoteToken, string _name, string _symbol) returns (address)",
      "function deployments(address) view returns (address)",
      "function initialize(address _bridge)",
      "function version() view returns (string)"
    ],
    "0xC0D3C0d3C0D3c0D3C0d3c0D3C0d3c0d3C0d30013": [
      "function getL1BlockNumber() view returns (uint256)",
      "function version() view returns (string)"
    ],
    "0xC0D3c0d3c0d3c0d3c0D3C0d3C0D3C0D3c0d30014": [
      "constructor()",
      "event ERC721BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 tokenId, bytes extraData)",
      "event ERC721BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 tokenId, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC721(address _localToken, address _remoteToken, uint256 _tokenId, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC721To(address _localToken, address _remoteToken, address _to, uint256 _tokenId, uint32 _minGasLimit, bytes _extraData)",
      "function finalizeBridgeERC721(address _localToken, address _remoteToken, address _from, address _to, uint256 _tokenId, bytes _extraData)",
      "function initialize(address _l1ERC721Bridge)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function version() view returns (string)"
    ],
    "0xc0d3C0D3C0D3c0D3C0D3C0d3C0D3c0D3c0d30015": [
      "error NotDepositor()",
      "event GasPayingTokenSet(address indexed token, uint8 indexed decimals, bytes32 name, bytes32 symbol)",
      "function DEPOSITOR_ACCOUNT() pure returns (address addr_)",
      "function baseFeeScalar() view returns (uint32)",
      "function basefee() view returns (uint256)",
      "function batcherHash() view returns (bytes32)",
      "function blobBaseFee() view returns (uint256)",
      "function blobBaseFeeScalar() view returns (uint32)",
      "function gasPayingToken() view returns (address addr_, uint8 decimals_)",
      "function gasPayingTokenName() view returns (string name_)",
      "function gasPayingTokenSymbol() view returns (string symbol_)",
      "function hash() view returns (bytes32)",
      "function isCustomGasToken() view returns (bool)",
      "function l1FeeOverhead() view returns (uint256)",
      "function l1FeeScalar() view returns (uint256)",
      "function number() view returns (uint64)",
      "function sequenceNumber() view returns (uint64)",
      "function setGasPayingToken(address _token, uint8 _decimals, bytes32 _name, bytes32 _symbol)",
      "function setL1BlockValues(uint64 _number, uint64 _timestamp, uint256 _basefee, bytes32 _hash, uint64 _sequenceNumber, bytes32 _batcherHash, uint256 _l1FeeOverhead, uint256 _l1FeeScalar)",
      "function setL1BlockValuesEcotone()",
      "function timestamp() view returns (uint64)",
      "function version() pure returns (string)"
    ],
    "0xC0D3C0d3C0d3c0d3C0d3C0D3c0D3c0d3c0D30016": [
      "event MessagePassed(uint256 indexed nonce, address indexed sender, address indexed target, uint256 value, uint256 gasLimit, bytes data, bytes32 withdrawalHash)",
      "event WithdrawerBalanceBurnt(uint256 indexed amount)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function burn()",
      "function initiateWithdrawal(address _target, uint256 _gasLimit, bytes _data) payable",
      "function messageNonce() view returns (uint256)",
      "function sentMessages(bytes32) view returns (bool)",
      "function version() view returns (string)"
    ],
    "0xc0d3C0d3C0d3C0d3C0d3c0d3C0D3C0d3C0D30017": [
      "constructor(address _bridge, uint256 _remoteChainId)",
      "event OptimismMintableERC721Created(address indexed localToken, address indexed remoteToken, address deployer)",
      "function BRIDGE() view returns (address)",
      "function REMOTE_CHAIN_ID() view returns (uint256)",
      "function createOptimismMintableERC721(address _remoteToken, string _name, string _symbol) returns (address)",
      "function isOptimismMintableERC721(address) view returns (bool)",
      "function version() view returns (string)"
    ],
    "0xC0d3C0D3c0d3C0d3c0d3c0D3C0D3C0d3C0D30018": [
      "constructor(address _owner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function addressManager() view returns (address)",
      "function changeProxyAdmin(address _proxy, address _newAdmin)",
      "function getProxyAdmin(address _proxy) view returns (address)",
      "function getProxyImplementation(address _proxy) view returns (address)",
      "function implementationName(address) view returns (string)",
      "function isUpgrading() view returns (bool)",
      "function owner() view returns (address)",
      "function proxyType(address) view returns (uint8)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function setAddressManager(address _address)",
      "function setImplementationName(address _address, string _name)",
      "function setProxyType(address _address, uint8 _type)",
      "function setUpgrading(bool _upgrading)",
      "function transferOwnership(address newOwner)",
      "function upgrade(address _proxy, address _implementation)",
      "function upgradeAndCall(address _proxy, address _implementation, bytes _data) payable"
    ],
    "0xC0d3c0D3c0d3C0D3C0D3C0d3c0D3C0D3c0d30019": [
      "constructor(address _recipient, uint256 _minWithdrawalAmount, uint8 _withdrawalNetwork)",
      "event Withdrawal(uint256 value, address to, address from)",
      "event Withdrawal(uint256 value, address to, address from, uint8 withdrawalNetwork)",
      "function MIN_WITHDRAWAL_AMOUNT() view returns (uint256)",
      "function RECIPIENT() view returns (address)",
      "function WITHDRAWAL_NETWORK() view returns (uint8)",
      "function minWithdrawalAmount() view returns (uint256 amount_)",
      "function recipient() view returns (address recipient_)",
      "function totalProcessed() view returns (uint256)",
      "function version() view returns (string)",
      "function withdraw()",
      "function withdrawalNetwork() view returns (uint8 network_)"
    ],
    "0xc0D3c0D3C0d3c0d3c0d3C0d3c0d3C0d3C0D3001A": [
      "constructor(address _recipient, uint256 _minWithdrawalAmount, uint8 _withdrawalNetwork)",
      "event Withdrawal(uint256 value, address to, address from)",
      "event Withdrawal(uint256 value, address to, address from, uint8 withdrawalNetwork)",
      "function MIN_WITHDRAWAL_AMOUNT() view returns (uint256)",
      "function RECIPIENT() view returns (address)",
      "function WITHDRAWAL_NETWORK() view returns (uint8)",
      "function minWithdrawalAmount() view returns (uint256 amount_)",
      "function recipient() view returns (address recipient_)",
      "function totalProcessed() view returns (uint256)",
      "function version() view returns (string)",
      "function withdraw()",
      "function withdrawalNetwork() view returns (uint8 network_)"
    ],
    "0xc0d3c0d3c0d3C0d3c0d3C0D3C0D3c0d3C0D30020": [
      "error AlreadyExists()",
      "event Registered(bytes32 indexed uid, address indexed registerer, tuple(bytes32 uid, address resolver, bool revocable, string schema) schema)",
      "function getSchema(bytes32 uid) view returns (tuple(bytes32 uid, address resolver, bool revocable, string schema))",
      "function register(string schema, address resolver, bool revocable) returns (bytes32)",
      "function version() view returns (string)"
    ],
    "0xC0D3c0D3C0d3c0D3c0D3C0D3c0D3c0d3c0d30021": [
      "constructor()",
      "error AccessDenied()",
      "error AlreadyRevoked()",
      "error AlreadyRevokedOffchain()",
      "error AlreadyTimestamped()",
      "error DeadlineExpired()",
      "error InsufficientValue()",
      "error InvalidAttestation()",
      "error InvalidAttestations()",
      "error InvalidExpirationTime()",
      "error InvalidLength()",
      "error InvalidNonce()",
      "error InvalidOffset()",
      "error InvalidRegistry()",
      "error InvalidRevocation()",
      "error InvalidRevocations()",
      "error InvalidSchema()",
      "error InvalidSignature()",
      "error InvalidVerifier()",
      "error Irrevocable()",
      "error NotFound()",
      "error NotPayable()",
      "error WrongSchema()",
      "event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID)",
      "event NonceIncreased(uint256 oldNonce, uint256 newNonce)",
      "event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID)",
      "event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp)",
      "event Timestamped(bytes32 indexed data, uint64 indexed timestamp)",
      "function attest(tuple(bytes32 schema, tuple(address recipient, uint64 expirationTime, bool revocable, bytes32 refUID, bytes data, uint256 value) data) request) payable returns (bytes32)",
      "function attestByDelegation(tuple(bytes32 schema, tuple(address recipient, uint64 expirationTime, bool revocable, bytes32 refUID, bytes data, uint256 value) data, tuple(uint8 v, bytes32 r, bytes32 s) signature, address attester, uint64 deadline) delegatedRequest) payable returns (bytes32)",
      "function getAttestTypeHash() pure returns (bytes32)",
      "function getAttestation(bytes32 uid) view returns (tuple(bytes32 uid, bytes32 schema, uint64 time, uint64 expirationTime, uint64 revocationTime, bytes32 refUID, address recipient, address attester, bool revocable, bytes data))",
      "function getDomainSeparator() view returns (bytes32)",
      "function getName() view returns (string)",
      "function getNonce(address account) view returns (uint256)",
      "function getRevokeOffchain(address revoker, bytes32 data) view returns (uint64)",
      "function getRevokeTypeHash() pure returns (bytes32)",
      "function getSchemaRegistry() pure returns (address)",
      "function getTimestamp(bytes32 data) view returns (uint64)",
      "function increaseNonce(uint256 newNonce)",
      "function isAttestationValid(bytes32 uid) view returns (bool)",
      "function multiAttest(tuple(bytes32 schema, tuple(address recipient, uint64 expirationTime, bool revocable, bytes32 refUID, bytes data, uint256 value)[] data)[] multiRequests) payable returns (bytes32[])",
      "function multiAttestByDelegation(tuple(bytes32 schema, tuple(address recipient, uint64 expirationTime, bool revocable, bytes32 refUID, bytes data, uint256 value)[] data, tuple(uint8 v, bytes32 r, bytes32 s)[] signatures, address attester, uint64 deadline)[] multiDelegatedRequests) payable returns (bytes32[])",
      "function multiRevoke(tuple(bytes32 schema, tuple(bytes32 uid, uint256 value)[] data)[] multiRequests) payable",
      "function multiRevokeByDelegation(tuple(bytes32 schema, tuple(bytes32 uid, uint256 value)[] data, tuple(uint8 v, bytes32 r, bytes32 s)[] signatures, address revoker, uint64 deadline)[] multiDelegatedRequests) payable",
      "function multiRevokeOffchain(bytes32[] data) returns (uint64)",
      "function multiTimestamp(bytes32[] data) returns (uint64)",
      "function revoke(tuple(bytes32 schema, tuple(bytes32 uid, uint256 value) data) request) payable",
      "function revokeByDelegation(tuple(bytes32 schema, tuple(bytes32 uid, uint256 value) data, tuple(uint8 v, bytes32 r, bytes32 s) signature, address revoker, uint64 deadline) delegatedRequest) payable",
      "function revokeOffchain(bytes32 data) returns (uint64)",
      "function timestamp(bytes32 data) returns (uint64)",
      "function version() view returns (string)"
    ]
  },
  "usedTemplates": {}
}
