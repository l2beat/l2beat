{
  "$schema": "../../../../../discovery/schemas/contract.v2.schema.json",
  "displayName": "RollupProxy",
  "description": "Central contract for the project's configuration like its execution logic hash (`wasmModuleRoot`) and addresses of the other system contracts. Entry point for Proposers creating new assertions (state commitments) and Challengers submitting fraud proofs (In the Orbit stack, these two roles are both called Validators).",
  "ignoreMethods": ["proxiableUUID"],
  "ignoreInWatchMode": [
    "firstUnresolvedNode",
    "latestConfirmed",
    "latestNodeCreated"
  ],
  "ignoreRelatives": [
    "validatorWalletCreator",
    "rollupEventInbox",
    "stakeToken"
  ],
  "fields": {
    "isPostBoLD": {
      "handler": {
        "type": "hardcoded",
        "value": true
      }
    },
    "owner": {
      "target": {
        "permissions": [
          {
            "type": "interact",
            "description": "Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability and DACs, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes."
          }
        ]
      }
    },
    "minimumAssertionPeriod": {
      "description": "Minimum time delta between newly created nodes (stateUpdates). This is checked on `stakeOnNewNode()`. Format is number of ETHEREUM blocks, even for L3s. "
    },
    "confirmPeriodBlocks": {
      "description": "Challenge period. (Number of ETHEREUM blocks until a node is confirmed, even for L3s)."
    },
    "wasmModuleRoot": {
      "description": "Root hash of the WASM module used for execution, like a fingerprint of the L2 logic. Can be associated with ArbOS versions."
    },
    "arbOsFromWmRoot": {
      "description": "ArbOS version derived from known wasmModuleRoots.",
      "handler": {
        "type": "call",
        "method": "wasmModuleRoot",
        "args": []
      },
      "returnType": "(ArbOsWasmModuleRoot)"
    },
    "challenges": {
      "description": "Emitted on createChallenge() in RollupUserLogic.",
      "handler": {
        "type": "event",
        "select": [
          "challengeIndex",
          "asserter",
          "challenger",
          "challengedNode"
        ],
        "add": { "event": "RollupChallengeStarted" }
      }
    }
  }
}
