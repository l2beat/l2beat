{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "chain": "ethereum",
  "name": "sonicgateway",
  "initialAddresses": ["0xa1E2481a9CD0Cb0447EeB1cbc26F1b3fff3bec20"],
  "names": {
    "0xa1E2481a9CD0Cb0447EeB1cbc26F1b3fff3bec20": "TokenDeposit",
    "0xf2b1510c2709072C88C5b14db90Ec3b6297193e4": "TokenPairs",
    "0xB0bECf0fBfE431D42bA0FbD8dFBFbB0DCFd62Da4": "UpdateManager",
    "0x72965045A6691E5A74299D1e878f303264D4D910": "ValidatorsRegistry",
    "0x9Fe65a5418850015a9D8ad3Ca50d6a0B9769FbE0": "SonicGatewayMultisig",
    "0x76d906837a073bF63f0c21d1d5bC2Fd14057EC3B": "SonicGatewayOpsMultisig",
    "0x921B147a90Ef738BBb7c2c89D88ea9d8Af3e9306": "MPTProofVerifier",
    "0xB7e8CC3F5FeA12443136f0cc13D81F109B2dEd7f": "StateOracle"
  },
  "overrides": {
    "StateOracle": {
      "description": "Simple contract that saves the latest state root.",
      "ignoreInWatchMode": ["lastBlockNum", "lastState", "lastUpdateTime"],
      "fields": {
        "owner": {
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "update the state root."
              }
            ]
          }
        }
      }
    },
    "MPTProofVerifier": {
      "description": "Verifier contract for merkle proofs."
    },
    "TokenDeposit": {
      "description": "Escrows the tokens that are bridged to Sonic. Users call this contract to deposit when bridging to Sonic, and to withdraw when bridging back to Ethereum. Since this contract escrows all tokens and defines the oracle and verification contracts, an upgrade of this contract can overwrite the logic of the whole bridge and potentially steal all funds.",
      "ignoreMethods": [
        "claims",
        "deposits",
        "getClaimSlotIndex",
        "getWithdrawalSlotIndex",
        "proxiableUUID"
      ],
      "ignoreRelatives": ["bridge"],
      "fields": {
        "owner": {
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "set the proof verifier and the exit administrator."
              }
            ]
          }
        },
        "TimeUntilDead": {
          "handler": {
            "type": "hardcoded",
            "value": "200d"
          }
        },
        "exitAdministrator": {
          "severity": "HIGH",
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "call `withdrawWhileDead()` to withdraw escrowed tokens when the bridge liveness self-check has failed."
              }
            ]
          }
        },
        "proofVerifier": {
          "severity": "HIGH"
        },
        "stateOracle": {
          "severity": "HIGH"
        },
        "deadState": {
          "severity": "HIGH"
        }
      }
    },
    "TokenPairs": {
      "description": "Token pairs are whitelisted in this contract for bridging through the Sonc Gateway.",
      "ignoreMethods": ["proxiableUUID"],
      "fields": {
        "accessControl": {
          "handler": {
            "type": "accessControl"
          }
        },
        "acAdmin": {
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "DEFAULT_ADMIN_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "manage access control roles."
              }
            ]
          }
        },
        "acRegister": {
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "REGISTER_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "add tokens to the whitelist."
              }
            ]
          }
        },
        "acUnregister": {
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "UNREGISTER_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "remove tokens from the whitelist."
              }
            ]
          }
        }
      }
    },
    "UpdateManager": {
      "description": "Entry point for state (oracle) updates.",
      "ignoreMethods": ["proxiableUUID"],
      "ignoreInWatchMode": ["lastBlockNum"],
      "fields": {
        "accessControl": {
          "handler": {
            "type": "accessControl"
          }
        },
        "acAdmin": {
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "DEFAULT_ADMIN_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "manage all access control roles."
              }
            ]
          }
        },
        "acFeeSetter": {
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "FEE_SETTER_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "set the fast lane fee."
              }
            ]
          }
        },
        "acHeartbeat": {
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "HEARTBEAT_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "set the number of blocks (Sonic L1 blocks) at which periodic state root updates to Ethereum are expected (heartbeat)."
              }
            ]
          }
        },
        "acRelay": {
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "RELAY_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "relay"
              }
            ]
          }
        },
        "acRelayAdmin": {
          "handler": {
            "type": "accessControl",
            "pickRoleMembers": "RELAY_ADMIN_ROLE"
          },
          "target": {
            "permissions": [
              {
                "type": "interact",
                "description": "set permissioned relayers."
              }
            ]
          }
        }
      }
    },
    "ValidatorsRegistry": {
      "description": "Registry of the current validator set. Validators can have different weights and be changed on each state update (signed by the current validators).",
      "fields": {
        "validatorAddress": {
          "handler": {
            "type": "array"
          },
          "target": {
            "permissions": [
              {
                "type": "validateBridge"
              }
            ]
          }
        },
        // manual check of weights
        "validator1Weight": {
          "handler": {
            "type": "call",
            "method": "function validatorWeight(address validatorId) view returns (uint256 weight)",
            "args": ["0x92E33222A1389aAf89C0794643fBBC7E679a6Dad"]
          }
        },
        "validator2Weight": {
          "handler": {
            "type": "call",
            "method": "function validatorWeight(address validatorId) view returns (uint256 weight)",
            "args": ["0xb8B86aAa072B3aa26d0D02A81642d00Bf58f6572"]
          }
        },
        "validator3Weight": {
          "handler": {
            "type": "call",
            "method": "function validatorWeight(address validatorId) view returns (uint256 weight)",
            "args": ["0x32744b98cC03A76C0559e905a31E8474a31729c1"]
          }
        },
        "validator4Weight": {
          "handler": {
            "type": "call",
            "method": "function validatorWeight(address validatorId) view returns (uint256 weight)",
            "args": ["0x551a7DAD9a14EfD0289c8ed3e52cf8352dc52011"]
          }
        },
        "validator5Weight": {
          "handler": {
            "type": "call",
            "method": "function validatorWeight(address validatorId) view returns (uint256 weight)",
            "args": ["0x34F01d6B8ad8eB46D2A7bEcCc8611EED04ef5d65"]
          }
        },
        "validator6Weight": {
          "handler": {
            "type": "call",
            "method": "function validatorWeight(address validatorId) view returns (uint256 weight)",
            "args": ["0x8406de45bfAca854d08377ca1436C6b4785b4D79"]
          }
        },
        "validator7Weight": {
          "handler": {
            "type": "call",
            "method": "function validatorWeight(address validatorId) view returns (uint256 weight)",
            "args": ["0x3Dd6C793AbA45738e531639977a292A3A8E32C9D"]
          }
        },
        "validator8Weight": {
          "handler": {
            "type": "call",
            "method": "function validatorWeight(address validatorId) view returns (uint256 weight)",
            "args": ["0x2534ED5d1303F035fa7e5d6a52199e59328B3F72"]
          }
        }
      }
    }
  }
}
