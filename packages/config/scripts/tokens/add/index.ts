import { EthereumAddress } from '@l2beat/shared-pure'
import chalk from 'chalk'
import { config as dotenv } from 'dotenv'
import { providers } from 'ethers'
import { writeFileSync } from 'fs'
import { z } from 'zod'

import { tokenList } from '../../../src'
import { TokenInfo } from '../../../src/tokens/types'
import { getEnv } from '../../checkVerifiedContracts/utils'
import { getTokenInfo } from './getTokenInfo'

async function main() {
  const [address, category] = handleCLIParameters()
  if (!address || !category) {
    return
  }

  const provider = new providers.AlchemyProvider(
    'homestead',
    getEnv('CONFIG_ALCHEMY_API_KEY'),
  )

  const token: TokenInfo = await getTokenInfo(provider, address, category)

  const newList = [...tokenList, token].sort((a, b) =>
    a.name.localeCompare(b.name),
  )

  const comment =
    'This file was autogenerated. Do not modify it by hand, instead use: yarn tokens:add <address> <category>'
  writeFileSync(
    'src/tokens/tokenList.json',
    JSON.stringify({ comment, tokens: newList }, null, 2) + '\n',
  )
}

dotenv()
main().catch((e) => {
  console.error(e)
})

function handleCLIParameters(): [
  EthereumAddress | undefined,
  z.infer<typeof TokenInfo.shape.category> | undefined,
] {
  if (process.argv.length < 4) {
    console.log(chalk.red('!!! Missing arguments !!!'))
    console.log(`Usage: yarn tokens:add <address> <category>`)
  }

  let address: EthereumAddress | undefined

  try {
    address = EthereumAddress(process.argv[2])
  } catch {
    console.log(chalk.red('!!! Ethereum address is invalid !!!'))
    console.log(
      `Did you pass the address as the first argument? Did you copy it correctly?`,
    )
  }

  let category: z.infer<typeof TokenInfo.shape.category> | undefined

  try {
    category = TokenInfo.shape.category.parse(process.argv[3])
  } catch {
    console.log(chalk.red('!!! Invalid token category !!!'))
    console.log(
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
      `category must be one of: [${TokenInfo.shape.category.options
        .map((o) => o._def.value)
        .join(', ')}]`,
    )
  }

  return [address, category]
}
