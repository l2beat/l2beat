{
  "name": "across-v3",
  "chain": "ethereum",
  "blockNumber": 22045124,
  "configHash": "0x3610496ad747df5be62fe9d3c79e7fa0614afb2e458f977e5fbe17ead9c0cc23",
  "entries": [
    {
      "name": "Zora_Adapter",
      "address": "0x024F2fC31CBDD8de17194b1892c834f98Ef5169b",
      "type": "Contract",
      "sourceHashes": [
        "0x6d9e4b79712a4e81c51941fb986f4c55774da36be108106577ca01ccb35a0f87"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1723462727,
      "sinceBlock": 20512287,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0x3e2Ea9B92B7E48A52296fD261dc26fd995284631",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0xdC40a14d9abd6F410226f1E6de71aE03441ca506",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "TokenBridge",
      "address": "0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319",
      "type": "Contract",
      "template": "linea/TokenBridge",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x49bdbe79d2cc9cefee03245e4b48260f4a71e7976af51741005758e7236d687d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract used to bridge and escrow ERC-20 tokens.",
      "sinceTimestamp": 1691067875,
      "sinceBlock": 17834649,
      "values": {
        "$admin": "0xF5058616517C068C7b8c7EbC69FF636Ade9066d6",
        "$implementation": "0x2B6A2F8880220a66DfB9059FCB76F7dB54104a34",
        "$pastUpgrades": [
          [
            "2023-08-03T13:04:35.000Z",
            "0xbc08c4596eeee0a2e2527f03c0f2e85ec9e76e062b5f86eb435a67bca8f21122",
            ["0x6ccfD65b0b14F67259C77Ca6267104e058dDB292"]
          ],
          [
            "2024-06-05T11:49:35.000Z",
            "0x497bdab1d3fb97eed72a55fc6e3672694195b08f949c2e0e84ea4b36428ee9c6",
            ["0xd52c09E67aF3BE0977B52b4817366e9BaB5dCFA2"]
          ],
          [
            "2024-12-16T13:52:11.000Z",
            "0x96b88112de2e594cb763bc625cc2dcb6920825bb642eb1a62ff577f0c29f616d",
            ["0x2B6A2F8880220a66DfB9059FCB76F7dB54104a34"]
          ]
        ],
        "$upgradeCount": 3,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "PAUSE_ALL_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "UNPAUSE_ALL_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "PAUSE_INITIATE_TOKEN_BRIDGING_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "UNPAUSE_INITIATE_TOKEN_BRIDGING_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "PAUSE_COMPLETE_TOKEN_BRIDGING_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "UNPAUSE_COMPLETE_TOKEN_BRIDGING_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "SET_CUSTOM_CONTRACT_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "REMOVE_RESERVED_TOKEN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "SET_MESSAGE_SERVICE_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "SET_REMOTE_TOKENBRIDGE_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "SET_RESERVED_TOKEN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          }
        },
        "CONTRACT_VERSION": "1.0",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "messageService": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
        "PAUSE_ALL_ROLE": "0x56bdc3c9ec86cb7db110a7699b2ade72f0b8819727d9f7d906b012641505fa77",
        "PAUSE_COMPLETE_TOKEN_BRIDGING_ROLE": "0x50962b2d10066f5051f78d5ea04a3ab09b9c87dd1002962f0b1e30e66eeb80a5",
        "PAUSE_INITIATE_TOKEN_BRIDGING_ROLE": "0x3900d9d72d5177a154375317154fdc0e08377e3134a8a5d21cadccf831cc231c",
        "remoteSender": "0x353012dc4a9A6cF55c941bADC267f82004A8ceB9",
        "REMOVE_RESERVED_TOKEN_ROLE": "0x19bf281d118073c159a713666aba52e0d403520cd01e03f42e0f62a0b3bd4a35",
        "SET_CUSTOM_CONTRACT_ROLE": "0x550554a677c8e7b73b62db78b0ef06c5f237da4ef30b88196a899ccf591041fe",
        "SET_MESSAGE_SERVICE_ROLE": "0x77974cc9cb5bafc9bb265be792d93fa46355c05701895b82f6d3b4b448c8ce00",
        "SET_REMOTE_TOKENBRIDGE_ROLE": "0xbf094fe3c005c553ff0d33c7dff9d1273add12fb3f258b992f8d36224dd35b24",
        "SET_RESERVED_TOKEN_ROLE": "0xeaf25fcc6b7d45bda16c56628df3f435e20319ef53b065c11ee4510083f0ae2d",
        "sourceChainId": 1,
        "targetChainId": 59144,
        "tokenBeacon": "0x971f46a2852d11D59dbF0909e837cfd06f357DeB",
        "UNPAUSE_ALL_ROLE": "0xd8b4c34c2ec1f3194471108c64ad2beda340c0337ee4ca35592f9ef270f4228b",
        "UNPAUSE_COMPLETE_TOKEN_BRIDGING_ROLE": "0x8a7b208fd13ab36d18025be4f62b53d46aeb2cbe8958d2e13de74c040dddcddd",
        "UNPAUSE_INITIATE_TOKEN_BRIDGING_ROLE": "0x46e34517dc946faf87aabe65eb5b4fa06b974e5c8d72c5df73b9fb6ff7b6d802"
      }
    },
    {
      "address": "0x07aE8551Be970cB1cCa11Dd7a11F47Ae82e70E67",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Soneium_Adapter",
      "address": "0x0c9d064523177dBB55CFE52b9D0c485FBFc35FD2",
      "type": "Contract",
      "sourceHashes": [
        "0xa11a006e88b4bc29596c25023695ef9026e9dc97dfd50ba059ee6b3e23a44008"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1736551439,
      "sinceBlock": 21597341,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_OP_USDC_BRIDGE": "0xC67A8c5f22b40274Ca7C4A56Db89569Ee2AD3FAb",
        "L1_STANDARD_BRIDGE": "0xeb9bf100225c214Efc3E7C651ebbaDcF85177607",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x9CF951E3F74B644e621b36Ca9cea147a78D4c39f",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "derivedName": "OP_Adapter"
    },
    {
      "name": "DonationBox",
      "address": "0x0d57392895Db5aF3280e9223323e20F3951E81B1",
      "type": "Contract",
      "sourceHashes": [
        "0x539a032fe1b60e1dd436a94b78155443570396daf7c8cc46844afdd16bb606da"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1730750255,
      "sinceBlock": 21116520,
      "values": {
        "$immutable": true,
        "owner": "0xc186fA914353c44b2E33eBE05f21846F1048bEda"
      }
    },
    {
      "name": "L1MessageQueueWithGasPriceOracle",
      "address": "0x0d7E906BD9cAFa154b048cFa766Cc1E54E39AF9B",
      "type": "Contract",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x3e38728c8eff2d4e99a76036010214e6ece1aebfa85496f776910c3e674d90e0"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1696782311,
      "sinceBlock": 18306933,
      "values": {
        "$admin": "0xEB803eb3F501998126bf37bB823646Ed3D59d072",
        "$implementation": "0x137CC585F607EDeBBc3CA6360AffCFeab507B374",
        "$pastUpgrades": [
          [
            "2023-10-08T16:25:11.000Z",
            "0xdd4c82f4c38c76c6bb222f2b319e870ed48d8d4dc2a73e0baa5d560a286924b2",
            ["0xBC9D741501A20F962756C95BF906b4abffadcf8F"]
          ],
          [
            "2024-02-22T08:20:23.000Z",
            "0xe378370b6bbc3d7f7278df88aa0e233b8f0fea3d77bef04593919b29d0094826",
            ["0xeBaed7A81c298B24EE6d59c22698A951dc448E01"]
          ],
          [
            "2024-08-20T23:36:35.000Z",
            "0x3928e0223337a112ea68c84db95441185a3e1da809638be13c0135761aa19ee7",
            ["0x137CC585F607EDeBBc3CA6360AffCFeab507B374"]
          ]
        ],
        "$upgradeCount": 3,
        "enforcedTxGateway": "0x72CAcBcfDe2d1e19122F8A36a4d6676cd39d7A5d",
        "estimateCrossDomainMessageFee": [
          0, 40534634, 81069268, 121603902, 162138536
        ],
        "gasOracle": "0x987e300fDfb06093859358522a79098848C33852",
        "getCrossDomainMessage": [
          "0x8aa0f1f4e9ca81e9263a62ad3543600dbd50a8a7ca6ad3456f4d19b01b2f4320",
          "0xa52c3a1943be02ca2ccba4ca7000af0ef89bb0114fc781f70df88d0dc2a3c894",
          "0x244042e9244ca7cba571bb4443b5522d9cea30221fcdcb1feba0356740a675ae",
          "0x5e7b7df9dfa789d115c10a8d902437c326190f6d1aa8a213bd10b3021b86a0e6",
          "0x2e8ecf1f39268e939bc8275beb7a1a7d808da0701239087ea1597c91125efe28"
        ],
        "isMessageDropped": [false, false, false, false, false],
        "isMessageSkipped": [false, false, false, false, false],
        "l2BaseFee": 40534634,
        "maxGasLimit": 10000000,
        "messageQueue": [
          "0x8aa0f1f4e9ca81e9263a62ad3543600dbd50a8a7ca6ad3456f4d19b01b2f4320",
          "0xa52c3a1943be02ca2ccba4ca7000af0ef89bb0114fc781f70df88d0dc2a3c894",
          "0x244042e9244ca7cba571bb4443b5522d9cea30221fcdcb1feba0356740a675ae",
          "0x5e7b7df9dfa789d115c10a8d902437c326190f6d1aa8a213bd10b3021b86a0e6",
          "0x2e8ecf1f39268e939bc8275beb7a1a7d808da0701239087ea1597c91125efe28"
        ],
        "messenger": "0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367",
        "nextCrossDomainMessageIndex": 952279,
        "nextUnfinalizedQueueIndex": 952277,
        "owner": "0x798576400F7D662961BA15C6b3F3d813447a26a6",
        "pendingQueueIndex": 952279,
        "scrollChain": "0xa13BAF47339d63B743e7Da8741db5456DAc1E556",
        "whitelistChecker": "0x259204DDd2bA29bD9b1B9A5c9B093f73d7EAcf37"
      },
      "errors": {
        "estimateCrossDomainMessageFee": "Processing error occurred.",
        "getCrossDomainMessage": "Processing error occurred.",
        "isMessageDropped": "Processing error occurred.",
        "isMessageSkipped": "Processing error occurred.",
        "messageQueue": "Processing error occurred."
      }
    },
    {
      "name": "Arbitrum_Adapter",
      "address": "0x100EDfCf3af2B4625Fca4EaF6C533703e71F7210",
      "type": "Contract",
      "sourceHashes": [
        "0xa1c171564a6e837069132a07b8c6d217e08cf53cd6a43151a7f497440d2f1e33"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1732204763,
      "sinceBlock": 21237154,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "L1_DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "L1_ERC20_GATEWAY_ROUTER": "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef",
        "L1_INBOX": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
        "L2_CALL_VALUE": 0,
        "L2_GAS_PRICE": 5000000000,
        "L2_MAX_SUBMISSION_COST": "10000000000000000",
        "L2_REFUND_L2_ADDRESS": "0x07aE8551Be970cB1cCa11Dd7a11F47Ae82e70E67",
        "recipientCircleDomainId": 3,
        "RELAY_MESSAGE_L2_GAS_LIMIT": 2000000,
        "RELAY_TOKENS_L2_GAS_LIMIT": 300000,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "name": "L1DAITokenBridge",
      "address": "0x10E6593CDda8c58a1d0f14C5164B376352a55f2F",
      "type": "Contract",
      "sourceHashes": [
        "0x4c5465ff113d9808b9b99013be373f52fcb90c8df71628dd658f0adbceff1366"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1625675779,
      "sinceBlock": 12781431,
      "values": {
        "$immutable": true,
        "escrow": "0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65",
        "isOpen": 1,
        "l1Token": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "l2DAITokenBridge": "0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65",
        "l2Token": "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
        "messenger": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1"
      }
    },
    {
      "address": "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1OpUSDCBridgeAdapter",
      "address": "0x153A69e4bb6fEDBbAaF463CB982416316c84B2dB",
      "type": "Contract",
      "template": "circle/L1OpUSDCBridgeAdapter",
      "sourceHashes": [
        "0xbbe53a68c0042f4050bdf21e8d16eee4688dd35d24e49740915f0a0cf994f0d6",
        "0xd311a9b68b7e171b3bc43bd9e7ee705886c2fdd620360576ca49115fd9799d5d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Escrow for USDC that uses the canonical bridge for messaging but is governed externally.",
      "sinceTimestamp": 1724427575,
      "sinceBlock": 20592251,
      "values": {
        "$admin": "0x28fAb3A5b69711cc64B09240d2694d9F0f07eBf6",
        "$implementation": "0x62d45660505D7457e3ce9Cd87C0a0cf890fB38ff",
        "$pastUpgrades": [
          [
            "2024-08-23T15:39:35.000Z",
            "0xbcd8e7e264c743a567f2f034945e8c9d1e4d5583f9efd0dbf2d89bbefe6cfd60",
            ["0x62d45660505D7457e3ce9Cd87C0a0cf890fB38ff"]
          ]
        ],
        "$upgradeCount": 1,
        "BRIDGE_MESSAGE_TYPEHASH": "0x87e4683aad14f1869b43140e06b846bd1b00c2e08e9825f6719d163b4cfef2a6",
        "burnAmount": 0,
        "burnCaller": "0x0000000000000000000000000000000000000000",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "OpUSDCBridgeAdapter",
          "version": "1.0.0",
          "chainId": 1,
          "verifyingContract": "0x153A69e4bb6fEDBbAaF463CB982416316c84B2dB",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "LINKED_ADAPTER": "0xbD80b06d3dbD0801132c6689429aC09Ca6D27f82",
        "MESSENGER": "0xf931a81D18B1766d15695ffc7c1920a62b7e710a",
        "messengerStatus": 0,
        "owner": "0x28fAb3A5b69711cc64B09240d2694d9F0f07eBf6",
        "UPGRADE_INTERFACE_VERSION": "5.0.0",
        "USDC": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "name": "Redstone_Adapter",
      "address": "0x188F8C95B7cfB7993B53a4F643efa687916f73fA",
      "type": "Contract",
      "sourceHashes": [
        "0x0c32a0cfde3cb87843b5521bf184be1dd2b0031a8e91c2bc7885a2e10db010c1"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1722504155,
      "sinceBlock": 20432774,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0xc473ca7E02af24c129c2eEf51F2aDf0411c1Df69",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x592C1299e0F8331D81A28C0FC7352Da24eDB444a",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "address": "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x6e4b297b822bdda2bb8bbf4dde360ee51379af5a0de55c0d726a2d7b68791bf7",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1624400997,
      "sinceBlock": 12686757,
      "values": {
        "$immutable": false,
        "$implementation": "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65",
        "$pastUpgrades": [
          [
            "2021-06-22T22:29:27.000Z",
            "0xd19d40f11c375feeea5fe47576ce98a3a08caac68b2a8a52fb95dd1a76dd205a",
            ["0x16393737D09d2722AD13DcA3cA8C3DB957699F1D"]
          ],
          [
            "2021-06-26T00:52:47.000Z",
            "0x98a05fb521b3349dd92cff2e104d78c6c318add003bb501c0d416b2b4d75df8a",
            ["0xbfba066b5cA610Fe70AdCE45FcB622F945891bb0"]
          ],
          [
            "2021-11-11T17:37:56.000Z",
            "0x2625aa2013fd1a650fb0264d2746be597e12f846baa48a68fe14539c200ed6dc",
            ["0x0000000000000000000000000000000000000000"]
          ],
          [
            "2021-11-11T19:29:14.000Z",
            "0xbabb37235bd38ae5a29717590eedfd9b02f84a12b890b2126feac68f223d7448",
            ["0xd9166833FF12A5F900ccfBf2c8B62a90F1Ca1FD5"]
          ],
          [
            "2023-06-06T15:58:47.000Z",
            "0x76bceccd7d44656f5a129a600a6120091570b897c1d45c18cd7134cfe67c2537",
            ["0x0000000000000000000000000000000000000000"]
          ],
          [
            "2023-06-06T18:24:11.000Z",
            "0xe2ff41f9bdf03d5455f55539b8b9c350276a179ca7f79322e2077d7c1ffb1268",
            ["0x2150Bc3c64cbfDDbaC9815EF615D6AB8671bfe43"]
          ],
          [
            "2024-02-26T21:44:11.000Z",
            "0x3f7c36a1d636cdb23bf4f9171c27ebe58b73f4c0e6a33dbaac2c2f3c142faf50",
            ["0xd81f43eDBCAcb4c29a9bA38a13Ee5d79278270cC"]
          ],
          [
            "2024-02-26T21:44:11.000Z",
            "0x3f7c36a1d636cdb23bf4f9171c27ebe58b73f4c0e6a33dbaac2c2f3c142faf50",
            ["0xa95B24af19f8907390eD15f8348A1a5e6Ccbc5C6"]
          ],
          [
            "2024-04-11T20:49:59.000Z",
            "0x4758bd62359bc69d7e8a0faaf5308d826379c23258d689a7430d5c0ad0361ad2",
            ["0xd81f43eDBCAcb4c29a9bA38a13Ee5d79278270cC"]
          ],
          [
            "2024-04-11T20:49:59.000Z",
            "0x4758bd62359bc69d7e8a0faaf5308d826379c23258d689a7430d5c0ad0361ad2",
            ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"]
          ]
        ],
        "$upgradeCount": 10,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292784423",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
        "PORTAL": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x2658723Bf70c7667De6B25F99fcce13A16D25d08",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1714730063,
      "sinceBlock": 19788825,
      "values": {
        "$admin": "0xeC432c4F1d0E12737f3a42a459B84848Af979b2d",
        "$implementation": "0x5BFC7acc740D2E19c290167052F69947e19475F3",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x31B72D76FB666844C41EdF08dF0254875Dbb7edB",
        "MESSENGER": "0x31B72D76FB666844C41EdF08dF0254875Dbb7edB",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x26C7bFB430d68Bf74d2d52497836d4336b555dE7",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "0x2D509190Ed0172ba588407D4c2df918F955Cc6E1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Bridgehub",
      "address": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
      "type": "Contract",
      "template": "shared-zk-stack/BridgeHub",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x568d6f26c34f7da5f4ac55957f99d9e66cbf967d550fa27ec431fb66bbd36a0b"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Sits between the shared bridge and the StateTransitionManager(s) and relays L1 <-> L2 messages from the shared bridge or other ZK stack chains to their respective destinations.",
      "sinceTimestamp": 1717520639,
      "sinceBlock": 20019828,
      "values": {
        "$admin": "0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1",
        "$implementation": "0x0029e562c0b54C0b88cB22adF4346DbfEC87400c",
        "$pastUpgrades": [
          [
            "2024-06-04T17:03:59.000Z",
            "0xdbb03a14ea223de3db4ac0916e78123bd0a1dde68e98952326d8382d29ac4d61",
            ["0x12f893689f9603991a8c22C249FFd0509Be95661"]
          ],
          [
            "2024-09-09T13:09:23.000Z",
            "0x21aec24a9df97ce4886d699314be627b0818da4d1987349421fb3df102c43f2b",
            ["0x509dA1BE24432F8804C4A9FF4a3c3f80284CDd13"]
          ],
          [
            "2025-01-08T16:00:35.000Z",
            "0xc90d135e4b8ab58304853f3be34b2fefd18c2a817d3d250e7b669e024d5277c5",
            ["0x0029e562c0b54C0b88cB22adF4346DbfEC87400c"]
          ]
        ],
        "$upgradeCount": 3,
        "admin": "0x2cf3bD6a9056b39999F3883955E183F655345063",
        "chainsCreated": [
          {
            "chainId": 324,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0x71d84c3404a6ae258E6471d4934B96a2033F9438"
          },
          {
            "chainId": 388,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0x143524d0ac8D7f35a2133b6B0a7567e0E3393137"
          },
          {
            "chainId": 50104,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0xE1eeA4D6443b19D373Fe99De838b930Ef0ac2Ad3"
          },
          {
            "chainId": 543210,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0xCA8faaF5BA885fEC8C2c8CD49bADAa7589D173b3"
          },
          {
            "chainId": 2741,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0xA1f75f491f630037C4Ccaa2bFA22363CEC05a661"
          },
          {
            "chainId": 325,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0x6308ee1Ebdb8D5E60bB88D3EA3b56CE326193e7D"
          },
          {
            "chainId": 61166,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0x97440Bf040f0dfA402cf5D4F1e0f574309Ace871"
          },
          {
            "chainId": 1345,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0x49664fFe2c2335c28631629606E26a6971aEf261"
          },
          {
            "chainId": 9637,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0x9381D943BcC1254723F85E9A85FFcc4Bb3C8deF6"
          },
          {
            "chainId": 320,
            "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
            "chainGovernance": "0x309EfA797ec5cd324Cb473F141F95214F3a25ab2"
          }
        ],
        "CronosDiamond": "0x7b2DA4e77BAE0e0d23c53C3BE6650497d0576CFc",
        "CronosSTM": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "getHyperchain": [],
        "GrvtDiamond": "0xe3e310cd8EE0C808794810AB50FE4BcCC5c7D89E",
        "GrvtSTM": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "owner": "0xE30Dca3047B37dc7d88849dE4A4Dc07937ad5Ab3",
        "paused": false,
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "sharedBridge": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
        "SophonDiamond": "0x05eDE6aD1f39B7A16C949d5C33a0658c9C7241e3",
        "SophonSTM": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "ZeroNetworkDiamond": "0xdbD849acC6bA61F461CB8A41BBaeE2D673CA02d9",
        "ZeroNetworkSTM": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "zksyncEraDiamond": "0x32400084C286CF3E17e7B677ea9583e60a000324",
        "zksyncEraSTM": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C"
      },
      "fieldMeta": {
        "chainsCreated": {
          "description": "All new chains created go thorugh the central bridgehub and are thus stored here with their respective STMs."
        }
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1686793895,
      "sinceBlock": 17482143,
      "values": {
        "$admin": "0x0475cBCAebd9CE8AfA5025828d5b98DFb67E059E",
        "$implementation": "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x866E82a600A1414e583f7F13623F1aC5d58b0Afa",
        "MESSENGER": "0x866E82a600A1414e583f7F13623F1aC5d58b0Afa",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "ZkStack_Adapter",
      "address": "0x3155A91D2EBAe69443B45556e1DE5ed8eB79C90D",
      "type": "Contract",
      "sourceHashes": [
        "0x6b9289adba88945bc716d68cbdde1a68c52429766cef73d7c17fe4ca6dd7cc59"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1741796927,
      "sinceBlock": 22031982,
      "values": {
        "$immutable": true,
        "BRIDGE_HUB": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "CHAIN_ID": 324,
        "L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT": 800,
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 2000000,
        "L2_REFUND_ADDRESS": "0x07aE8551Be970cB1cCa11Dd7a11F47Ae82e70E67",
        "SHARED_BRIDGE": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB"
      }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x31B72D76FB666844C41EdF08dF0254875Dbb7edB",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1714730087,
      "sinceBlock": 19788827,
      "values": {
        "$immutable": false,
        "$implementation": "0x0318A37e2662507789a6E17E85A506709F89488b",
        "$pastUpgrades": [
          [
            "2024-05-03T10:02:23.000Z",
            "0xfae1f2f01e0de9b66095de3faf83be79326792924394411ebef79b3c4d3314b9",
            ["0x0318A37e2662507789a6E17E85A506709F89488b"]
          ]
        ],
        "$upgradeCount": 1,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292627649",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x26dB93F8b8b4f7016240af62F7730979d353f9A7",
        "PORTAL": "0x26dB93F8b8b4f7016240af62F7730979d353f9A7",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0x2dF7057d3F25212E51aFEA8dA628668229Ea423f",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x26C7bFB430d68Bf74d2d52497836d4336b555dE7",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "Boba_Adapter",
      "address": "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
      "type": "Contract",
      "sourceHashes": [
        "0x9f8b082009430546d55daaa8e166eca77ef9ca17f7831f03de4635bdc4a32b31"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1651747441,
      "sinceBlock": 14716798,
      "values": {
        "$immutable": true,
        "l1StandardBridge": "0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00",
        "l1Weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "l2GasLimit": 2000000,
        "messenger": "0x6D4528d192dB72E282265D6092F4B872f9Dff69e"
      }
    },
    {
      "name": "SynthetixBridgeToOptimism",
      "address": "0x39Ea01a0298C315d149a490E34B59Dbf2EC7e48F",
      "type": "Contract",
      "sourceHashes": [
        "0xa0c5b8e3e7201002ebb3c8ce553cbc336880db6d608ca4ae76b8e44df64aabdb"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1652207034,
      "sinceBlock": 14750082,
      "values": {
        "$immutable": true,
        "CONTRACT_NAME": "0x53796e746865746978427269646765546f4f7074696d69736d00000000000000",
        "initiationActive": true,
        "isResolverCached": true,
        "nominatedOwner": "0x0000000000000000000000000000000000000000",
        "owner": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
        "resolver": "0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2",
        "resolverAddressesRequired": [
          "0x466c657869626c6553746f726167650000000000000000000000000000000000",
          "0x6578743a4d657373656e67657200000000000000000000000000000000000000",
          "0x53796e7468657469780000000000000000000000000000000000000000000000",
          "0x526577617264457363726f775632000000000000000000000000000000000000",
          "0x4973737565720000000000000000000000000000000000000000000000000000",
          "0x466565506f6f6c00000000000000000000000000000000000000000000000000",
          "0x466c657869626c6553746f726167650000000000000000000000000000000000",
          "0x45786368616e6765526174657300000000000000000000000000000000000000",
          "0x53797374656d5374617475730000000000000000000000000000000000000000",
          "0x4973737565720000000000000000000000000000000000000000000000000000",
          "0x52657761726473446973747269627574696f6e00000000000000000000000000",
          "0x6f766d3a53796e746865746978427269646765546f4261736500000000000000",
          "0x53796e746865746978427269646765457363726f770000000000000000000000"
        ],
        "synthTransferReceived": "115845669081419753886073095",
        "synthTransferSent": "208913125438631129043552151"
      }
    },
    {
      "name": "L1BlastBridge",
      "address": "0x3a05E5d33d7Ab3864D53aaEc93c8301C1Fa49115",
      "type": "Contract",
      "sourceHashes": [
        "0x25b3b37613a93de74b5c7b795eb7f1446dfea8b9e763cfebe29c2f2881acfbb3",
        "0x9b25fea33ece84240133b9633d6edebfa268b929644604f9ec3ef4fbcd97ac60"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1708812923,
      "sinceBlock": 19300361,
      "values": {
        "$admin": "0x364289230b8cc7d9120eF962AF37ebCFe23cE883",
        "$implementation": "0x7A2075519Dd9598b62075FD397aF0Dd34b14619a",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "ethYieldManager": "0x98078db053902644191f93988341E31289E1C8FE",
        "messenger": "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0",
        "MESSENGER": "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0",
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_BRIDGE": "0x4300000000000000000000000000000000000005",
        "otherBridge": "0x4300000000000000000000000000000000000005",
        "portal": "0x0Ec68c5B10F21EFFb74f2A5C61DFe6b08C0Db6Cb",
        "usdYieldManager": "0xa230285d5683C74935aD14c446e137c8c8828438",
        "version": "1.0.0"
      }
    },
    {
      "name": "AcrossConfigStore",
      "address": "0x3B03509645713718B78951126E0A6de6f10043f5",
      "type": "Contract",
      "sourceHashes": [
        "0x926aa3c074cb5463671ec24c946524d9e03d3aa56a9847ca738b17b747c0e076"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1651752742,
      "sinceBlock": 14717196,
      "values": {
        "$immutable": true,
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715"
      }
    },
    {
      "address": "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1StandardBridge",
      "address": "0x3e2Ea9B92B7E48A52296fD261dc26fd995284631",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1686693995,
      "sinceBlock": 17473935,
      "values": {
        "$admin": "0xD4ef175B9e72cAEe9f1fe7660a6Ec19009903b49",
        "$implementation": "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0xdC40a14d9abd6F410226f1E6de71aE03441ca506",
        "MESSENGER": "0xdC40a14d9abd6F410226f1E6de71aE03441ca506",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "DepositManager",
      "address": "0x401F6c983eA34274ec46f84D70b31C151321188b",
      "type": "Contract",
      "sourceHashes": [
        "0x56357b4fdb898e49aff0370db0c900b81a28004a5c5932d0cbe0f8ac8e017b39",
        "0xc5b5f88996b07c7bbc95a43cde9d9dd36d460beb6780e633858131ed36e1cbc9"
      ],
      "proxyType": "EIP897 proxy",
      "sinceTimestamp": 1590850640,
      "sinceBlock": 10167767,
      "values": {
        "$immutable": false,
        "$implementation": "0xb00aa68b87256E2F22058fB2Ba3246EEc54A44fc",
        "childChain": "0xD9c7C4ED4B66858301D0cb28Cc88bf655Fe34861",
        "deposits": [
          [
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0
          ],
          [
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0
          ],
          [
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0
          ],
          [
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0
          ],
          [
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0
          ]
        ],
        "governance": "0x6e7a5820baD6cebA8Ef5ea69c0C92EbbDAc9CE48",
        "implementation": "0xb00aa68b87256E2F22058fB2Ba3246EEc54A44fc",
        "isOwner": false,
        "locked": false,
        "maxErc20Deposit": "1000000000000000000000000000000",
        "owner": "0xCaf0aa768A3AE1297DF20072419Db8Bb8b5C8cEf",
        "proxyType": 2,
        "registry": "0x33a02E6cC863D393d6Bf231B697b82F6e499cA71",
        "rootChain": "0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287",
        "stateSender": "0x28e4F3a7f651294B9564800b2D01f35189A5bFbE"
      },
      "errors": { "deposits": "Processing error occurred." }
    },
    {
      "name": "ERC20Predicate",
      "address": "0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf",
      "type": "Contract",
      "sourceHashes": [
        "0x63f5481a49da196498b6cd77450d4e12da12c7608ab022b417dbed836935e0f7",
        "0xdb2c7a7688883aa90817563334c9613daee6ccad8d086ff273d6b484340444ab"
      ],
      "proxyType": "Polygon proxy",
      "sinceTimestamp": 1598436664,
      "sinceBlock": 10735445,
      "values": {
        "$admin": "0xCaf0aa768A3AE1297DF20072419Db8Bb8b5C8cEf",
        "$implementation": "0xB1fd4ae726c64A793588001EB465c46BD1BdF1cB",
        "$pastUpgrades": [
          [
            "2020-08-26T10:11:21.000Z",
            "0xd7497c770cd4812ca146b91a14ba1bac4198ff8dc7b9e5c3444906d297f275a1",
            ["0xC760DefB87E5194E62b282c2a76CBCe4766d7345"]
          ],
          [
            "2020-11-18T07:48:02.000Z",
            "0xbacffdae190eb0d874ee203c3b9724675ba2ec9bd3e4718e3f10ddf6a3829750",
            ["0x608669d4914Eec1E20408Bc4c9eFFf27BB8cBdE5"]
          ],
          [
            "2024-08-25T16:11:47.000Z",
            "0x0524bb8a888d645cfd326c307cf4503d6fa859add7f36433aac7410e1a8727d0",
            ["0xb774EBbeF817390483FEA5bEd0F0cB0EDEBE4065"]
          ],
          [
            "2024-08-27T11:02:23.000Z",
            "0xf81d8f7db4694015fc14426465cc2936dc03e3a07da3a879dcea009ef2cf384a",
            ["0xB1fd4ae726c64A793588001EB465c46BD1BdF1cB"]
          ]
        ],
        "$upgradeCount": 4,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "implementation": "0xB1fd4ae726c64A793588001EB465c46BD1BdF1cB",
        "MANAGER_ROLE": "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
        "proxyOwner": "0xCaf0aa768A3AE1297DF20072419Db8Bb8b5C8cEf",
        "proxyType": 2,
        "TOKEN_TYPE": "0x8ae85d849167ff996c04040c44924fd364217285e4cad818292c7ac37c0a345b",
        "TRANSFER_EVENT_SIG": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
      }
    },
    {
      "name": "Finder",
      "address": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
      "type": "Contract",
      "sourceHashes": [
        "0x6b81a32a0de6b3e8ed743f089a6518d3791b0e4d373300269439642482338ddb"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1578580941,
      "sinceBlock": 9247083,
      "values": {
        "$immutable": true,
        "isOwner": false,
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x470458C91978D2d929704489Ad730DC3E3001113",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1719432959,
      "sinceBlock": 20178184,
      "values": {
        "$admin": "0xd7405BE7f3e63b094Af6C7C23D5eE33Fd82F872D",
        "$implementation": "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0xf931a81D18B1766d15695ffc7c1920a62b7e710a",
        "MESSENGER": "0xf931a81D18B1766d15695ffc7c1920a62b7e710a",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "PolygonTokenBridger",
      "address": "0x48d990AbDA20afa1fD1da713AbC041B60a922c65",
      "type": "Contract",
      "sourceHashes": [
        "0xe3c561b96bc217e32abfe2230f61c22a385dde4d3fcc87ecda9703b78fc89e75"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1651578198,
      "sinceBlock": 14704448,
      "values": {
        "$immutable": true,
        "destination": "0x6Bb9910c5529Cb3b32c4f0e13E8bC38F903b2534",
        "l1ChainId": 1,
        "l1PolygonRegistry": "0x33a02E6cC863D393d6Bf231B697b82F6e499cA71",
        "l1Weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "l2ChainId": 137,
        "l2WrappedMatic": "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
        "maticToken": "0x0000000000000000000000000000000000001010"
      }
    },
    {
      "name": "Inbox",
      "address": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
      "type": "Contract",
      "template": "orbitstack/Inbox",
      "sourceHashes": [
        "0x26f6b72513d780b4c7f3855e9b8c63f3ea90b9d15ce1cf38534887619daaa18b",
        "0x421aa98d340c2ad3e475ce29bb1e72660c213f0997591e567c0fd3d3ae2365a8"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.",
      "sinceTimestamp": 1622243344,
      "sinceBlock": 12525700,
      "values": {
        "$admin": "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD",
        "$implementation": "0x7C058ad1D0Ee415f7e7f30e62DB1BCf568470a10",
        "$pastUpgrades": [
          [
            "2021-05-29T19:37:16.000Z",
            "0x2a41e48a9927eddb62c3d45d7a2eb0304281d4b9e7db8d52022c3ff80f7751df",
            ["0xB38634F1192fd4A4864b99a4C9100339815c6450"]
          ],
          [
            "2021-08-28T21:50:10.000Z",
            "0xc71c860df401495251ad1f549dbfd4995f4284e40454765f32e2e873f4aa63dc",
            ["0xE5dB9273e7279F1485b30D8553183E3E29532ca3"]
          ],
          [
            "2021-08-30T01:43:28.000Z",
            "0x37915ab37a7161dbc2f41340849491bcfc77eddce6fa3bce2918b1277e40597b",
            ["0x048cc108763de75E080Ad717bD284003aa49eA15"]
          ],
          [
            "2022-04-30T15:50:28.000Z",
            "0x3e8e23623e0dbda0b428efd30e71ef7b0e61622fc036db4943ce78bbfd129f91",
            ["0xc23E3F20340f8ef09c8861a724C29dB43bA3eeD4"]
          ],
          [
            "2022-08-26T16:50:55.000Z",
            "0xe679c9810cdff738114c551b47b1c30b5445f684a12a25dfaf27dac2e613591a",
            ["0xe4B8015Ea98fc86D7fDe16CdfD1B7A250cD93e2B"]
          ],
          [
            "2022-08-31T14:32:22.000Z",
            "0x7dfb8f1f20815629a78dc16a8657306b6d200041624c4f3410d659cbdab2bc9f",
            ["0x3E2198A77FC6B266082b92859092170763548730"]
          ],
          [
            "2022-09-14T03:08:00.000Z",
            "0xbfd8f54bf6b44ea4bcd76306d74b63602ee654e6a344bccca1825a388050988b",
            ["0x1b2676D32E2f7430a564DD4560641F990dFE3D6a"]
          ],
          [
            "2022-11-18T17:04:23.000Z",
            "0xd2638d4092738bced51f259ca8ab228c21763fd0e5d85657a75aec811c2c51f3",
            ["0x931E1770BEC7827841f3989bda43319adACD62db"]
          ],
          [
            "2022-12-15T15:58:59.000Z",
            "0x0bd4aae6c69f7e6aae36a112aae4793716f23620ed242027cc84c9236f170836",
            ["0x5aED5f8A1e3607476F1f81c3d8fe126deB0aFE94"]
          ],
          [
            "2025-02-12T14:00:11.000Z",
            "0xe9788a104f8443b5900e54f8c887f0522d121487fc343a1ff90e1e6ed987967e",
            ["0x7C058ad1D0Ee415f7e7f30e62DB1BCf568470a10"]
          ]
        ],
        "$upgradeCount": 10,
        "allowListEnabled": false,
        "bridge": "0x8315177aB297bA92A06054cE80a67Ed4DBd7ed3a",
        "getProxyAdmin": "0x554723262467F125Ac9e1cDFa9Ce15cc53822dbD",
        "maxDataSize": 117964,
        "paused": false,
        "sequencerInbox": "0x1c479675ad559DC151F6Ec7ed3FbF8ceE79582B6"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "L1USDCBridge",
      "address": "0x504A330327A089d8364C4ab3811Ee26976d388ce",
      "type": "Contract",
      "sourceHashes": [
        "0x6d1bbfb1ed7d88848e594dc11366fbed3d53c5a507022c04dbeea72ef549cd6a",
        "0x27a9694e3bfad3a6ec23be7f15d8e6093b4d3a12eba4d10de0d9c660f5a47d30"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1691086271,
      "sinceBlock": 17836170,
      "values": {
        "$admin": "0x41fAD3Df1B07B647D120D055259E474fE8046eb5",
        "$implementation": "0x0eC393209674090368C592A591B25811e490BF36",
        "$pastUpgrades": [
          [
            "2023-08-03T18:11:11.000Z",
            "0xa93648a8d01d65bea363bc2f6e19897e42f9af999370c07cb2a0ea6a5401b6b0",
            ["0x16Db542C30fB3519D11CF8F632077c62c1a944fd"]
          ],
          [
            "2023-09-01T20:25:47.000Z",
            "0xe752ce539119fc11af6239e8b26a79d80c9e84cec19ac6aca060f466853f5b7d",
            ["0x0eC393209674090368C592A591B25811e490BF36"]
          ]
        ],
        "$upgradeCount": 2,
        "balance": 19096920590177,
        "messageService": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
        "owner": "0x892bb7EeD71efB060ab90140e7825d8127991DD3",
        "paused": false,
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "remoteUSDCBridge": "0xA2Ee6Fce4ACB62D95448729cDb781e3BEb62504A",
        "usdc": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "name": "Ethereum_Adapter",
      "address": "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
      "type": "Contract",
      "sourceHashes": [
        "0x14afbe84cefefdcb06132c680d267b8892f0834a39fc23ca0ea563758653a21a"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1651577227,
      "sinceBlock": 14704381,
      "values": { "$immutable": true }
    },
    {
      "name": "Inbox",
      "address": "0x56D8EC76a421063e1907503aDd3794c395256AEb",
      "type": "Contract",
      "template": "orbitstack/Inbox",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0xcb390b491549387c8fcc09fb22fbea7adf54cc74b7247a0c738369ddd7049b92"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.",
      "sinceTimestamp": 1722259103,
      "sinceBlock": 20412468,
      "values": {
        "$admin": "0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b",
        "$implementation": "0x31fAAAB44e74eB408d1FC69A14806B4b9cA09da2",
        "$pastUpgrades": [
          [
            "2024-07-29T13:18:23.000Z",
            "0x16528bf78b7d2110129529a7a0435a35b5443e3638f89fb2f917a7c92ef587b9",
            ["0x31fAAAB44e74eB408d1FC69A14806B4b9cA09da2"]
          ]
        ],
        "$upgradeCount": 1,
        "allowListEnabled": false,
        "bridge": "0x41Ec9456AB918f2aBA81F38c03Eb0B93b78E84d9",
        "getProxyAdmin": "0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b",
        "maxDataSize": 117964,
        "paused": false,
        "sequencerInbox": "0xF75206c49c1694594E3e69252E519434f1579876"
      },
      "derivedName": "ERC20Inbox",
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x592C1299e0F8331D81A28C0FC7352Da24eDB444a",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1712184587,
      "sinceBlock": 19578332,
      "values": {
        "$immutable": false,
        "$implementation": "0x17AaA27ecEc9a0c530e6Dbd086b6049DCF6D9382",
        "$pastUpgrades": [
          [
            "2024-04-03T22:55:35.000Z",
            "0x1596672f469063a73fcb89c6de464d4102a5e1f8e6943d0d7fea90e09e583357",
            ["0x17AaA27ecEc9a0c530e6Dbd086b6049DCF6D9382"]
          ]
        ],
        "$upgradeCount": 1,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292623994",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0xC7bCb0e8839a28A1cFadd1CF716de9016CdA51ae",
        "PORTAL": "0xC7bCb0e8839a28A1cFadd1CF716de9016CdA51ae",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0xFe27f187A9E46104a932189dDF229871E06B22F8",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x4b5b41c240173191425F5928bc6bdd0d439331BB",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "Ethereum_SpokePool",
      "address": "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5",
      "type": "Contract",
      "sourceHashes": [
        "0x669da4e91a9ad0ca23205a174e7f8931e4d7d128453132164ba6458f11f15c72",
        "0x10d81ccfd26fbcb9926942a46436a7bedd3946646911a43f3f0e13dc7eb81517"
      ],
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["numberOfDeposits", "getCurrentTime"],
      "sinceTimestamp": 1682355155,
      "sinceBlock": 17117454,
      "values": {
        "$admin": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "$implementation": "0x0190a2328e072Fc5a7fA00F6C9ae2a16c7F4E32a",
        "$pastUpgrades": [
          [
            "2023-04-24T16:52:35.000Z",
            "0x411ae8360c51beff3d6034ea63f03c41e6cf8b031432391fc44bc4f5a1b908ef",
            ["0xA667498F46457548f1D3ad557340b95Fdb290148"]
          ],
          [
            "2023-08-22T00:20:59.000Z",
            "0xceb5b11cd6c78b29d16d2c91bedcb4ec7467814fdce84a753f468c452c36c0d6",
            ["0x326510c1bf9d85Fb73d0AB8d20Aa5BbE9c7561e9"]
          ],
          [
            "2023-10-03T13:48:47.000Z",
            "0x946dec56639129cadd298ce5a44341b6f361c5c632f5dea2a80d9cb023b836c6",
            ["0x5ab0A812327aD959dE664AEC8408Ef8c6ABe7184"]
          ],
          [
            "2024-02-21T18:04:23.000Z",
            "0xf08778addb8376b0beb500bf569c6251eadc124e6aeeaf5f702ab1dbf576379f",
            ["0x90438AD3d81a0739ce1Cb20C73564682388c5FdD"]
          ],
          [
            "2024-03-18T13:40:47.000Z",
            "0x3ebfeeedb62ab726a1cb350595df3d4b2212f2fda619ae08015d16f304fc8332",
            ["0xa4D3535f33549749Fb97fA42903AC80F6fb54af6"]
          ],
          [
            "2024-05-15T15:11:59.000Z",
            "0xa604480755748d8162a3fb11442719682d473d868450e7460d9dd111a0b8903a",
            ["0x08C21b200eD06D2e32cEC91a770C3FcA8aD5F877"]
          ],
          [
            "2024-09-03T15:48:23.000Z",
            "0xd3cfc5a7476fd33d3d3fdc2d77adac2bf6900945f9a5c5f35f65b6507dde381f",
            ["0x48Dcf75EA18233BA947E4480dCd70594720449C1"]
          ],
          [
            "2025-01-29T00:44:11.000Z",
            "0x4d37ad20bb31cedba7434223e08229ca95fbfd32eaf2bcbd456af0d0a32bba8b",
            ["0xD576931ab0bDC3dfdc2c041d3C7b9d2ED0c6dd9a"]
          ],
          [
            "2025-02-07T14:46:47.000Z",
            "0xbea88935fe99b6faba60ee273a5eb146cd6c2d12decfef8842c5c719a0009376",
            ["0x0190a2328e072Fc5a7fA00F6C9ae2a16c7F4E32a"]
          ]
        ],
        "$upgradeCount": 9,
        "chainId": 1,
        "crossDomainAdmin": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "depositQuoteTimeBuffer": 3600,
        "EMPTY_RELAYER": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EMPTY_REPAYMENT_CHAIN_ID": 0,
        "fillDeadlineBuffer": 21600,
        "getCurrentTime": 1741955375,
        "INFINITE_FILL_DEADLINE": 4294967295,
        "MAX_EXCLUSIVITY_PERIOD_SECONDS": 31536000,
        "MAX_TRANSFER_SIZE": "1000000000000000000000000000000000000",
        "numberOfDeposits": 2388308,
        "owner": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "pausedDeposits": false,
        "pausedFills": false,
        "proxiableUUID": "EXPECT_REVERT",
        "UPDATE_ADDRESS_DEPOSIT_DETAILS_HASH": "0x9c6dfd61d811b9950a4f2b9adf46357b717c816d22c420d0bde8f2360148f7cd",
        "UPDATE_BYTES32_DEPOSIT_DETAILS_HASH": "0x8d1994e2bbbd77564cdca06dd819e7ee2a5efa06c80dcb59a4a7b6e39edc538f",
        "withdrawalRecipient": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "wrappedNativeToken": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x62b0361291c40e624393723bdac21e4ecdb590904474346417c941734984bb25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1708812983,
      "sinceBlock": 19300366,
      "values": {
        "$immutable": false,
        "$implementation": "0x84efcFCE2dEe08072d5D57BF232D379b6E92A836",
        "$pastUpgrades": [
          [
            "2024-02-24T22:16:35.000Z",
            "0xb9df50a5931e96f2c6f8055055cf2943009705a369b845fbb3e0202a7b897223",
            ["0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0"]
          ],
          [
            "2024-02-24T22:25:11.000Z",
            "0x718f17591631857e26554f08b52874c1826d990a5c53d8496b12c860509615ed",
            ["0xe7406f6d89a14aC3Fc28530479327948ea500659"]
          ],
          [
            "2024-02-27T01:32:47.000Z",
            "0xcd5f72853d01d93a1fbf3d219a77c7f0243b0fd537d14737c3b0691f0897d67c",
            ["0x84efcFCE2dEe08072d5D57BF232D379b6E92A836"]
          ]
        ],
        "$upgradeCount": 3,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292742801",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "portal": "0x0Ec68c5B10F21EFFb74f2A5C61DFe6b08C0Db6Cb",
        "PORTAL": "0x0Ec68c5B10F21EFFb74f2A5C61DFe6b08C0Db6Cb",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 60000,
        "ResolvedDelegateProxy_addressManager": "0xE064B565Cf2A312a3e66Fe4118890583727380C0",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "version": "1.7.1"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "L1ScrollMessenger",
      "address": "0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367",
      "type": "Contract",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0xe550fda323606a4b4fd2a05cf45dda231290e1d57a077828632c098fa0579161"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1696782323,
      "sinceBlock": 18306934,
      "values": {
        "$admin": "0xEB803eb3F501998126bf37bB823646Ed3D59d072",
        "$implementation": "0x72981fD00087fF4F60aBFdE9f353cB1912A37fb6",
        "$pastUpgrades": [
          [
            "2023-10-08T16:25:23.000Z",
            "0xcad9f31340db6aca3a5da0d704ee33a9b6c43a5b1be4406cc0ed33edbdd7c92e",
            ["0xAf2F898a8680cb52766ABE0588ebe6b9bFe37845"]
          ],
          [
            "2024-02-22T08:20:23.000Z",
            "0xe378370b6bbc3d7f7278df88aa0e233b8f0fea3d77bef04593919b29d0094826",
            ["0x72981fD00087fF4F60aBFdE9f353cB1912A37fb6"]
          ]
        ],
        "$upgradeCount": 2,
        "counterpart": "0x781e90f1c8Fc4611c9b7497C3B47F99Ef6969CbC",
        "feeVault": "0x8FA3b4570B4C96f8036C13b64971BA65867eEB48",
        "maxReplayTimes": 3,
        "messageQueue": "0x0d7E906BD9cAFa154b048cFa766Cc1E54E39AF9B",
        "owner": "0x798576400F7D662961BA15C6b3F3d813447a26a6",
        "paused": false,
        "prevReplayIndex": [0, 0, 0, 0, 0],
        "rollup": "0xa13BAF47339d63B743e7Da8741db5456DAc1E556",
        "xDomainMessageSender": "0x0000000000000000000000000000000000000001"
      },
      "errors": { "prevReplayIndex": "Processing error occurred." }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x697402166Fbf2F22E970df8a6486Ef171dbfc524",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0x25b3b37613a93de74b5c7b795eb7f1446dfea8b9e763cfebe29c2f2881acfbb3",
        "0xf5e9d1b6ac4bf84529eacc8e29c0731ef1524f2a84cbd91fb9840cf631cfff7c"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1708812911,
      "sinceBlock": 19300360,
      "values": {
        "$admin": "0x364289230b8cc7d9120eF962AF37ebCFe23cE883",
        "$implementation": "0xD2C23A5A280AFF9182b953579f62EDdDF1c7ff22",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0",
        "MESSENGER": "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "version": "1.4.1"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x69d3Cf86B2Bf1a9e99875B7e2D9B6a84426c171f",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1733498411,
      "sinceBlock": 21344310,
      "values": {
        "$immutable": false,
        "$implementation": "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65",
        "$pastUpgrades": [
          [
            "2024-12-06T15:20:11.000Z",
            "0x45c2b63987a8c7ab97bdcdab5e04618d4ed74971aa4ac51b15ed8522ea6c0284",
            ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"]
          ]
        ],
        "$upgradeCount": 1,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292627146",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x5d66C1782664115999C47c9fA5cd031f495D3e4F",
        "PORTAL": "0x5d66C1782664115999C47c9fA5cd031f495D3e4F",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0x9b7C9BbD6d540A8A4dEDd935819fC4408Ba71153",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "Dai",
      "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
      "type": "Contract",
      "sourceHashes": [
        "0x9b792a0d5af6c0a88429413cb318629d76df165fef71bda23764c7f730ce6a70"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1573672677,
      "sinceBlock": 8928158,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0xdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f7",
        "name": "Dai Stablecoin",
        "PERMIT_TYPEHASH": "0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb",
        "symbol": "DAI",
        "totalSupply": "3187033263968724301985170775",
        "version": "1"
      }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x6D4528d192dB72E282265D6092F4B872f9Dff69e",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x6e4b297b822bdda2bb8bbf4dde360ee51379af5a0de55c0d726a2d7b68791bf7",
        "0xf3c7ecc8a3ece866c00e54f90a65843e8fd20e40ebc52fac59682640c2e1ca4b"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1628792652,
      "sinceBlock": 13011949,
      "values": {
        "$immutable": false,
        "$implementation": "0x3b48597212f2622511585914CC4D4152c9B1B077",
        "$pastUpgrades": [
          [
            "2021-08-12T18:24:06.000Z",
            "0xabf5ff59333cfb575404834e68633fd81c77ff85d6d6f9983e29140ebdf805f4",
            ["0x25109139f8C4F9f7b4E4d5452A067feaE3a537F3"]
          ],
          [
            "2021-10-05T19:35:22.000Z",
            "0x9ba695c4025241f04617877232a4cf86d9ccc1783a693cfe661784c7f89c8050",
            ["0xae6b041f0550EDeF61a70F76f89c77B2b1Ef38Fd"]
          ],
          [
            "2021-10-28T02:15:33.000Z",
            "0xa7c1696ee1da04699ec29609eb9c645e327a590ad21ff4a8cf16a9671719bec9",
            ["0x12Acf6E3ca96A60fBa0BBFd14D2Fe0EB6ae47820"]
          ],
          [
            "2024-04-16T21:38:23.000Z",
            "0x41b524b2ed6de3f6ec58d8e6508f9f6055ca3cb28a80b98af3213eb285a9fdce",
            ["0x0000000000000000000000000000000000000000"]
          ],
          [
            "2024-04-16T21:38:47.000Z",
            "0x1361f48fea8fbc08ffbc0877f540635a35dffe6560829923443c70702232197d",
            ["0x3b48597212f2622511585914CC4D4152c9B1B077"]
          ]
        ],
        "$upgradeCount": 5,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292677018",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x7B02D13904D8e6E0f0Efaf756aB14Cb0FF21eE7e",
        "PORTAL": "0x7B02D13904D8e6E0f0Efaf756aB14Cb0FF21eE7e",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0x8376ac6C3f73a25Dd994E0b0669ca7ee0C02F089",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x996ffD627901f10C80A7d4B72A12316D2e77c076",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "0x6f26Bf09B1C792e3228e5467807a900A503c0281",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Alephzero_Adapter",
      "address": "0x6F4083304C2cA99B077ACE06a5DcF670615915Af",
      "type": "Contract",
      "sourceHashes": [
        "0x1ccce681c671e5131c390787ccaa619eb4c4ee20d444e73484078b4770b12ea1"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1730926523,
      "sinceBlock": 21131132,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "CUSTOM_GAS_TOKEN": "0xdD0ae774F7E300CdAA4EA371cD55169665Ee6AFe",
        "CUSTOM_GAS_TOKEN_FUNDER": "0x0d57392895Db5aF3280e9223323e20F3951E81B1",
        "L1_ERC20_GATEWAY_ROUTER": "0xeBb17f398ed30d02F2e8733e7c1e5cf566e17812",
        "L1_INBOX": "0x56D8EC76a421063e1907503aDd3794c395256AEb",
        "L2_CALL_VALUE": 0,
        "L2_GAS_PRICE": 240000000000,
        "L2_MAX_SUBMISSION_COST": "10000000000000000",
        "L2_REFUND_L2_ADDRESS": "0x07aE8551Be970cB1cCa11Dd7a11F47Ae82e70E67",
        "NATIVE_TOKEN_DECIMALS": 18,
        "recipientCircleDomainId": 4294967295,
        "RELAY_MESSAGE_L2_GAS_LIMIT": 2000000,
        "RELAY_TOKENS_L2_GAS_LIMIT": 300000,
        "usdcToken": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "Arbitrum_CustomGasToken_Adapter"
    },
    {
      "name": "GatewayRouter",
      "address": "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef",
      "type": "Contract",
      "template": "orbitstack/GatewayRouter",
      "sourceHashes": [
        "0x26f6b72513d780b4c7f3855e9b8c63f3ea90b9d15ce1cf38534887619daaa18b",
        "0x265fc73d2eec7f0b459f92a25a37b145c8db22527232f08f3022d5cc18d6af9d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This routing contract maps tokens to the correct escrow (gateway) to be then bridged with canonical messaging.",
      "sinceTimestamp": 1623784095,
      "sinceBlock": 12640865,
      "values": {
        "$admin": "0x9aD46fac0Cf7f790E5be05A0F15223935A0c0aDa",
        "$implementation": "0x52595021fA01B3E14EC6C88953AFc8E35dFf423c",
        "$pastUpgrades": [
          [
            "2021-07-01T21:07:36.000Z",
            "0xb143deb4f1396daa96ea8e5be22dc6b188a09653bdf300b1f40573cce7ad01f0",
            ["0x4b2Cf3BE8677096310b32a648b0Bdb8c5A8dDC94"]
          ],
          [
            "2021-08-26T16:05:39.000Z",
            "0x5dc6e34fc33a880f60903032ae94b8bb11973c0102c7959490bbc0ea124f11e9",
            ["0x555d10f9E4d1b60B9c3F87F4E835119B2C65c8B0"]
          ],
          [
            "2021-08-30T17:40:11.000Z",
            "0x29c02be0f39043d705dd8d3eb2af9e3b3ae5e94251aa294e7c4e919252f80ab0",
            ["0x62285266B5ec3d5B8867c84B807b79B2c13892EC"]
          ],
          [
            "2021-09-17T19:52:13.000Z",
            "0x92bf07ee654ad93ad41c093f045cde6cd4b839d0e3a6b0532a8ab18090208f35",
            ["0x594393B6A6A46190dF3E479304bbC63572c6830a"]
          ],
          [
            "2021-10-14T14:36:02.000Z",
            "0x14a48840cec5b16e7e909ddbe69eec7edaeafde958c866a97a048b2daf9f9c1f",
            ["0x32f39fa08c1E0bbA551CBDa4197e543C53b3fC53"]
          ],
          [
            "2021-10-22T17:59:20.000Z",
            "0x656bdf44374b1fc07ce0a01b9645e2b03a4f134b35dfe41fd3e2045cfe082411",
            ["0x2e8e3e55cE12F981EbF8E545Cb263aB238e19715"]
          ],
          [
            "2022-08-08T17:02:04.000Z",
            "0xf2ba2551709d23686f52c3a3ecc65ae8347f1bab1877265c57ba260e8222bf33",
            ["0x6D1c576Fe3e54313990450f5Fa322306B4cCB47B"]
          ],
          [
            "2022-11-08T16:47:59.000Z",
            "0x0f4db1811c997e979b8f7be3cd8509b5ea0bb6a366a1848a0905f9c7f50c8612",
            ["0x52595021fA01B3E14EC6C88953AFc8E35dFf423c"]
          ]
        ],
        "$upgradeCount": 8,
        "counterpartGateway": "0x5288c571Fd7aD117beA99bF60FE0846C4E84F933",
        "defaultGateway": "0xa3A7B6F88361F48403514059F1F16C8E78d60EeC",
        "inbox": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
        "owner": "0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
        "router": "0x0000000000000000000000000000000000000000",
        "whitelist": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "L1GatewayRouter",
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x735aDBbE72226BD52e818E7181953f42E3b0FF21",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1700167631,
      "sinceBlock": 18586931,
      "values": {
        "$admin": "0x470d87b1dae09a454A43D1fD772A561a03276aB7",
        "$implementation": "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f",
        "MESSENGER": "0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "GovernorV2",
      "address": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
      "type": "Contract",
      "sourceHashes": [
        "0xdf7f17e5c8ba1f0103fcfaf495da624089f8bfb3d5052217537bb064ca8c60b9"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["getCurrentTime", "numProposals"],
      "sinceTimestamp": 1677230459,
      "sinceBlock": 16697276,
      "values": {
        "$immutable": true,
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getCurrentTime": 1741955375,
        "getMember": [
          "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "0x50efaC9619225d7fB4703C5872da978849B6E7cC",
          "0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748"
        ],
        "numProposals": 206
      }
    },
    {
      "name": "MaticToken",
      "address": "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
      "type": "Contract",
      "sourceHashes": [
        "0x70c94cabb413d3001456053bd2e2953800ed29792bb6a6b99ca87d4abee045f7"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1555778052,
      "sinceBlock": 7605604,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "name": "Matic Token",
        "paused": false,
        "symbol": "MATIC",
        "totalSupply": "10000000000000000000000000000"
      }
    },
    {
      "name": "LpTokenFactory",
      "address": "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
      "type": "Contract",
      "sourceHashes": [
        "0x54ab5e1f981929fca37e28c313db9ab35343de3df6907dbaeb29dda3840aadcd"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1651576251,
      "sinceBlock": 14704307,
      "values": { "$immutable": true }
    },
    {
      "address": "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Ink_Adapter",
      "address": "0x7e90A40c7519b041A7DF6498fBf5662e8cFC61d2",
      "type": "Contract",
      "sourceHashes": [
        "0xa11a006e88b4bc29596c25023695ef9026e9dc97dfd50ba059ee6b3e23a44008"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1734635711,
      "sinceBlock": 21438590,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_OP_USDC_BRIDGE": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0x88FF1e5b602916615391F55854588EFcBB7663f0",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x69d3Cf86B2Bf1a9e99875B7e2D9B6a84426c171f",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "derivedName": "OP_Adapter"
    },
    {
      "name": "Linea_Adapter",
      "address": "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE",
      "type": "Contract",
      "sourceHashes": [
        "0x6cc7cfdaa6b4d79d35a624dafc13713137f61d46c6536a4837a2793c3fa3fc4d"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1710046163,
      "sinceBlock": 19402413,
      "values": {
        "$immutable": true,
        "L1_MESSAGE_SERVICE": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
        "L1_TOKEN_BRIDGE": "0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319",
        "L1_USDC_BRIDGE": "0x504A330327A089d8364C4ab3811Ee26976d388ce",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x81014F44b0a345033bB2b3B21C7a1A308B35fEeA",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1730748227,
      "sinceBlock": 21116352,
      "values": {
        "$admin": "0x3B73Fa8d82f511A3caE17B5a26E4E1a2d5E2f2A4",
        "$implementation": "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6",
        "MESSENGER": "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "Lisk_Adapter",
      "address": "0x8229E812f20537caA1e8Fb41749b4887B8a75C3B",
      "type": "Contract",
      "sourceHashes": [
        "0x4d929bc632eff7818792b2ad5539b8b5dbc8842e7d23c9d9bfb116acb05eb96a"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1719509639,
      "sinceBlock": 20184545,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0x2658723Bf70c7667De6B25F99fcce13A16D25d08",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x31B72D76FB666844C41EdF08dF0254875Dbb7edB",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "address": "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x866E82a600A1414e583f7F13623F1aC5d58b0Afa",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1686793895,
      "sinceBlock": 17482143,
      "values": {
        "$immutable": false,
        "$implementation": "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65",
        "$pastUpgrades": [
          [
            "2023-06-15T01:51:47.000Z",
            "0x8869b94ddd0ba84b41d937708db7b8aa64948e85b3a11e970f22887a56b0b1d7",
            ["0x0000000000000000000000000000000000000000"]
          ],
          [
            "2023-06-15T01:51:59.000Z",
            "0xad5179152fdbe7ca60a41fd5a490add905e567c59e6630a7856a379759939a8e",
            ["0x81C4Bd600793EBd1C0323604E1F455fE50A951F8"]
          ],
          [
            "2024-06-28T16:32:47.000Z",
            "0xb690dad4829ca8b07b6944d7e937d7d36048ea29a9278cbae012ab4a66aac817",
            ["0xd81f43eDBCAcb4c29a9bA38a13Ee5d79278270cC"]
          ],
          [
            "2024-06-28T16:32:47.000Z",
            "0xb690dad4829ca8b07b6944d7e937d7d36048ea29a9278cbae012ab4a66aac817",
            ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"]
          ]
        ],
        "$upgradeCount": 4,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201293016500",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
        "PORTAL": "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0x8EfB6B5c4767B09Dc9AA6Af4eAA89F749522BaE2",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "0x868CF19464e17F76D6419ACC802B122c22D2FD34",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OptimisticGovernor",
      "address": "0x8692B776d1Ff0664177c90465038056Dc64f8991",
      "type": "Contract",
      "sourceHashes": [
        "0xcecd27c998c8fd83d7532693da2bdff346a1dbedbaab4744f21d2bcf1986e9de"
      ],
      "proxyType": "gnosis safe zodiac module",
      "sinceTimestamp": 1683067175,
      "sinceBlock": 17176107,
      "values": {
        "$immutable": false,
        "avatar": "0xB524735356985D2f267FA010D681f061DfF03715",
        "bondAmount": "2000000000000000000",
        "collateral": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "escalationManager": "0x0000000000000000000000000000000000000000",
        "EXPLANATION_KEY": "0x6578706c616e6174696f6e",
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getGuard": "0x0000000000000000000000000000000000000000",
        "getProposalBond": "2000000000000000000",
        "guard": "0x0000000000000000000000000000000000000000",
        "identifier": "0x4153534552545f54525554480000000000000000000000000000000000000000",
        "liveness": 172800,
        "optimisticOracleV3": "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "PROPOSAL_HASH_KEY": "0x70726f706f73616c48617368",
        "rules": "I assert that this transaction proposal is valid according to the following rules: Proposals approved on Snapshot, as verified at https://snapshot.org/#/acrossprotocol.eth, are valid as long as there is a minimum quorum of 6000000 and a minimum voting period of 72 hours and it does not appear that the Snapshot voting system is being exploited or is otherwise unavailable. The quorum and voting period are minimum requirements for a proposal to be valid. Quorum and voting period values set for a specific proposal in Snapshot should be used if they are more strict than the rules parameter. The explanation included with the on-chain proposal must be the unique IPFS identifier for the specific Snapshot proposal that was approved or a unique identifier for a proposal in an alternative voting system approved by DAO social consensus if Snapshot is being exploited or is otherwise unavailable.",
        "RULES_KEY": "0x72756c6573",
        "target": "0xB524735356985D2f267FA010D681f061DfF03715",
        "ZodiacModule_avatar": "0xB524735356985D2f267FA010D681f061DfF03715",
        "ZodiacModule_guard": "0x0000000000000000000000000000000000000000",
        "ZodiacModule_modules": [],
        "ZodiacModule_target": "0xB524735356985D2f267FA010D681f061DfF03715"
      }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x88FF1e5b602916615391F55854588EFcBB7663f0",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1733498411,
      "sinceBlock": 21344310,
      "values": {
        "$admin": "0xd56045E68956FCe2576E680c95a4750cf8241f79",
        "$implementation": "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x69d3Cf86B2Bf1a9e99875B7e2D9B6a84426c171f",
        "MESSENGER": "0x69d3Cf86B2Bf1a9e99875B7e2D9B6a84426c171f",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "0x9295ee1d8C5b022Be115A2AD3c30C72E34e7F096",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x9552a0a6624A23B848060AE5901659CDDa1f83f8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1700167631,
      "sinceBlock": 18586931,
      "values": {
        "$immutable": false,
        "$implementation": "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65",
        "$pastUpgrades": [
          [
            "2023-11-16T20:47:11.000Z",
            "0x58e9f85e8dff61e2d9b22bf79fc2052bc497cc5dd18a8e72e99d436fe229acb6",
            ["0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f"]
          ],
          [
            "2023-11-16T20:47:11.000Z",
            "0xad662056dcd7390e217500699f06939418ccd55cf0ee8c5839cc5f5e90b84292",
            ["0x14DdD08c0e28764FC89a266eC95A93619b0EE835"]
          ],
          [
            "2024-04-19T18:22:11.000Z",
            "0xfd62d0d284c8655e916a5cdd2472b461ed5686ab1414b834a1ffdb06a44f63b4",
            ["0xd81f43eDBCAcb4c29a9bA38a13Ee5d79278270cC"]
          ],
          [
            "2024-04-19T18:22:11.000Z",
            "0xfd62d0d284c8655e916a5cdd2472b461ed5686ab1414b834a1ffdb06a44f63b4",
            ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"]
          ]
        ],
        "$upgradeCount": 4,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292833425",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x8B34b14c7c7123459Cf3076b8Cb929BE097d0C07",
        "PORTAL": "0x8B34b14c7c7123459Cf3076b8Cb929BE097d0C07",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0x50eF494573f28Cad6B64C31b7a00Cdaa48306e15",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "0x996267d7d1B7f5046543feDe2c2Db473Ed4f65e9",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1StandardBridge",
      "address": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0x18e98a64fbfe011a7514d7a547900c02a3e0f9a49ab3413d517fd7e0e3c539dd",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1624401464,
      "sinceBlock": 12686786,
      "values": {
        "$admin": "0x543bA4AADBAb8f9025686Bd03993043599c6fB04",
        "$implementation": "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "MESSENGER": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1730748239,
      "sinceBlock": 21116353,
      "values": {
        "$immutable": false,
        "$implementation": "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65",
        "$pastUpgrades": [
          [
            "2024-11-04T19:27:35.000Z",
            "0x9efd53c7ecef0094ea6cd3a05d346daaee4a6c71c0dc69758bcdbac26b9ca9ef",
            ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"]
          ]
        ],
        "$upgradeCount": 1,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292629858",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x0bd48f6B86a26D3a217d0Fa6FfE2B491B956A7a2",
        "PORTAL": "0x0bd48f6B86a26D3a217d0Fa6FfE2B491B956A7a2",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0x8098F676033A377b9Defe302e9fE6877cD63D575",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x9CF951E3F74B644e621b36Ca9cea147a78D4c39f",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1733134751,
      "sinceBlock": 21314185,
      "values": {
        "$immutable": false,
        "$implementation": "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65",
        "$pastUpgrades": [
          [
            "2024-12-02T10:19:11.000Z",
            "0x521e36f9009b6c2545f054baf46587c17738e71b354712e0b534c5a53192fceb",
            ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"]
          ]
        ],
        "$upgradeCount": 1,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292664569",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x88e529A6ccd302c948689Cd5156C83D4614FAE92",
        "PORTAL": "0x88e529A6ccd302c948689Cd5156C83D4614FAE92",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0xB24bFEeCE1B3b7A44559F4Cbc21BeD312b130b70",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "FiatTokenV2_2",
      "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      "type": "Contract",
      "sourceHashes": [
        "0x465649a27ea63e4d4455ae370e76fe43b1e2ddf2e6c7df12603093e0fb9e5145",
        "0xacd76117eb21f736961ade180c25f63d796bc2e83f43b82ee3ff585bb34ce6ed"
      ],
      "proxyType": "ZeppelinOS proxy",
      "sinceTimestamp": 1533324504,
      "sinceBlock": 6082465,
      "values": {
        "$admin": "0x807a96288A1A408dBC13DE2b1d087d10356395d2",
        "$immutable": false,
        "$implementation": "0x43506849D7C04F9138D1A2050bbF3A0c054402dd",
        "$pastUpgrades": [
          [
            "2020-08-27T15:32:54.000Z",
            "0xe6f0f754398d89583da8e4229c5d7aaa00739a3ae334ecfc2839ac396b4836e3",
            ["0xB7277a6e95992041568D9391D09d0122023778A2"]
          ],
          [
            "2021-04-26T19:14:51.000Z",
            "0xe2e40640ffd5f76538cd23660cf56f00bfebd5fe925ebad6b8067c4cee18a2c3",
            ["0xa2327a938Febf5FEC13baCFb16Ae10EcBc4cbDCF"]
          ],
          [
            "2024-01-08T17:16:35.000Z",
            "0xae3ad89e569f27d47a8a02999a6d937c12aaa6bc50e66650e7cbd3244bde9951",
            ["0x43506849D7C04F9138D1A2050bbF3A0c054402dd"]
          ]
        ],
        "$upgradeCount": 3,
        "blacklister": "0x10DF6B6fe66dd319B1f82BaB2d054cbb61cdAD2e",
        "CANCEL_AUTHORIZATION_TYPEHASH": "0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429",
        "currency": "USD",
        "decimals": 6,
        "DOMAIN_SEPARATOR": "0x06c37168a7db5138defc7866392bb87a741f9b3d104deb5094588ce041cae335",
        "masterMinter": "0xE982615d461DD5cD06575BbeA87624fda4e3de17",
        "name": "USD Coin",
        "owner": "0xFcb19e6a322b27c06842A71e8c725399f049AE3a",
        "paused": false,
        "pauser": "0x4914f61d25e5C567143774B76EdbF4D5109a8566",
        "PERMIT_TYPEHASH": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
        "RECEIVE_WITH_AUTHORIZATION_TYPEHASH": "0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8",
        "rescuer": "0x0000000000000000000000000000000000000000",
        "symbol": "USDC",
        "totalSupply": "38740741212780517",
        "TRANSFER_WITH_AUTHORIZATION_TYPEHASH": "0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267",
        "version": "2"
      },
      "errors": {
        "admin": "Processing error occurred.",
        "implementation": "Processing error occurred."
      }
    },
    {
      "name": "RootChainManager",
      "address": "0xA0c68C638235ee32657e8f720a23ceC1bFc77C77",
      "type": "Contract",
      "sourceHashes": [
        "0xbbbf27b3fdffff6edc7bb78c7f8d8b0e49e427ea37c77f6c0ee0824742a1480a",
        "0x0f4d3951fb826a28e98a0923400b0173d459b26141d47b08227689849ce11141"
      ],
      "proxyType": "Polygon proxy",
      "sinceTimestamp": 1598436547,
      "sinceBlock": 10735437,
      "values": {
        "$admin": "0xCaf0aa768A3AE1297DF20072419Db8Bb8b5C8cEf",
        "$implementation": "0x639f13D5f30B47c792b6851238c05D0b623C77DE",
        "$pastUpgrades": [
          [
            "2020-08-26T10:09:10.000Z",
            "0x1457a23862a321795074e16b0e48a9a9d90bcdd480c35061a20b8ad977e55617",
            ["0xD4888faB8bd39A663B63161F5eE1Eae31a25B653"]
          ],
          [
            "2020-11-18T07:48:02.000Z",
            "0xbacffdae190eb0d874ee203c3b9724675ba2ec9bd3e4718e3f10ddf6a3829750",
            ["0x0BfF34272aF650632236703a3D6d8e3c133421Cb"]
          ],
          [
            "2021-01-22T18:50:08.000Z",
            "0x818eaf233a292714599882e5de3d254de791a15c5d5d2033d6f61e5ba1f76e18",
            ["0x4015ccad9218b109d3339B356392C6EE8438e5d0"]
          ],
          [
            "2021-02-24T11:42:20.000Z",
            "0x8d16d130b5625edf8f807ce8c02303fa7a09154c4127e38b5c7e612658e67272",
            ["0xEcFdefe1D67f93d3C154B67FD9d4ba62aB820DeA"]
          ],
          [
            "2021-04-28T11:52:47.000Z",
            "0x54f5399ff524598d12940be626bbfe5a407f288981f2ed7912f42a51da160516",
            ["0x296AC8fb39279BbcFF6eDc9FddF1d2f4aEa1631b"]
          ],
          [
            "2021-08-05T09:27:28.000Z",
            "0x481ab61601843d6186c15a98f078ab273cf654b476e62a96d25fbe5ab3fcdf08",
            ["0x7CfA0f105a4922E89666D7D63689d9C9b1eA7a19"]
          ],
          [
            "2021-09-26T07:01:07.000Z",
            "0x8e3021aef9032d2bf227d7b767d066ba56b38426551091a8367249b152e548d0",
            ["0x6866FE89723713282BF6aB2fb8f03b0ee1833ABE"]
          ],
          [
            "2021-09-26T07:01:07.000Z",
            "0x8e3021aef9032d2bf227d7b767d066ba56b38426551091a8367249b152e548d0",
            ["0x6aBB753C1893194DE4a83c6e8B4EadFc105Fd5f5"]
          ],
          [
            "2022-08-21T07:40:43.000Z",
            "0x537afb3b705a7458e31ea0b4ec7e317dbad36645460676ff6171fac0516093a0",
            ["0x37D26DC2890b35924b40574BAc10552794771997"]
          ],
          [
            "2024-08-25T16:11:47.000Z",
            "0x0524bb8a888d645cfd326c307cf4503d6fa859add7f36433aac7410e1a8727d0",
            ["0x1633012a2cB27eFBC2944f2E43b9197Bc3964359"]
          ],
          [
            "2024-08-27T11:02:23.000Z",
            "0xf81d8f7db4694015fc14426465cc2936dc03e3a07da3a879dcea009ef2cf384a",
            ["0x8F372f5404514cec63A3F88BAac772Cc620F2281"]
          ],
          [
            "2024-11-04T15:38:47.000Z",
            "0xa6a8a4e53e07aaca3a49c554781538762a1457b47b82e3f4a0edd54b18676f7d",
            ["0x639f13D5f30B47c792b6851238c05D0b623C77DE"]
          ]
        ],
        "$upgradeCount": 12,
        "checkpointManagerAddress": "0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287",
        "childChainManagerAddress": "0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DEPOSIT": "0x87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f821",
        "ERC712_VERSION": "1",
        "ETHER_ADDRESS": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
        "getChainId": 1,
        "getDomainSeperator": "0xb5a4cc9a023bd6d02f117aaf6dbd3f253f1f6e35a8497712420cc482df3f73e7",
        "implementation": "0x639f13D5f30B47c792b6851238c05D0b623C77DE",
        "MAP_TOKEN": "0x2cef46a936bdc5b7e6e8c71aa04560c41cf7d88bb26901a7e7f4936ff02accad",
        "MAPPER_ROLE": "0x2559c73ad5e64226de134fc607a00e9f0c0b7465b43c2ae69baaca347c607777",
        "proxyOwner": "0xCaf0aa768A3AE1297DF20072419Db8Bb8b5C8cEf",
        "proxyType": 2,
        "stateSenderAddress": "0x28e4F3a7f651294B9564800b2D01f35189A5bFbE"
      }
    },
    {
      "name": "WorldChain_Adapter",
      "address": "0xA8399e221a583A57F54Abb5bA22f31b5D6C09f32",
      "type": "Contract",
      "sourceHashes": [
        "0x20e9061e359e9fafb0e4b70f1fb2e4e7812f00cee7a62ed186f67134d3d9729a"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1728901991,
      "sinceBlock": 20963234,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_OP_USDC_BRIDGE": "0x153A69e4bb6fEDBbAaF463CB982416316c84B2dB",
        "L1_STANDARD_BRIDGE": "0x470458C91978D2d929704489Ad730DC3E3001113",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0xf931a81D18B1766d15695ffc7c1920a62b7e710a",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "derivedName": "OP_Adapter"
    },
    {
      "name": "Polygon_Adapter",
      "address": "0xb4AeF0178f5725392A26eE18684C2aB62adc912e",
      "type": "Contract",
      "sourceHashes": [
        "0xf598be4ed345b6b3e83e04dff2cb5472dc4df0b8476f8f74a4c75c473dee6347"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1716255695,
      "sinceBlock": 19915066,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "DEPOSIT_MANAGER": "0x401F6c983eA34274ec46f84D70b31C151321188b",
        "ERC20_PREDICATE": "0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf",
        "FX_STATE_SENDER": "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
        "L1_MATIC": "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "recipientCircleDomainId": 7,
        "ROOT_CHAIN_MANAGER": "0xA0c68C638235ee32657e8f720a23ceC1bFc77C77",
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "name": "HubPool Multisig",
      "address": "0xB524735356985D2f267FA010D681f061DfF03715",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1636157803,
      "sinceBlock": 13559776,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
          "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe",
          "0x996267d7d1B7f5046543feDe2c2Db473Ed4f65e9",
          "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
          "0x868CF19464e17F76D6419ACC802B122c22D2FD34"
        ],
        "$threshold": 3,
        "domainSeparator": "0xbb022dfb1fe065f2a2c6ea647af6240343ff4b980bc3c1183ecd630958c3b59e",
        "getChainId": 1,
        "GnosisSafe_modules": ["0x8692B776d1Ff0664177c90465038056Dc64f8991"],
        "multisigThreshold": "3 of 5 (60%)",
        "nonce": 301,
        "VERSION": "1.3.0"
      },
      "derivedName": "GnosisSafe"
    },
    {
      "name": "Scroll_Adapter",
      "address": "0xb6129Ab69aEA75e6884c2D6ecf25293C343C519F",
      "type": "Contract",
      "sourceHashes": [
        "0x56586e3315f76ed277970410b47da25a0980ca9400f2a97fd38139e2a1f2dc5e"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1721124335,
      "sinceBlock": 20318360,
      "values": {
        "$immutable": true,
        "L1_GATEWAY_ROUTER": "0xF8B1378579659D8F7EE5f3C929c2f3E332E41Fd6",
        "L1_SCROLL_MESSENGER": "0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367",
        "L2_GAS_PRICE_ORACLE": "0x0d7E906BD9cAFa154b048cFa766Cc1E54E39AF9B",
        "L2_MESSAGE_RELAY_GAS_LIMIT": 2000000,
        "L2_TOKEN_RELAY_GAS_LIMIT": 250000
      }
    },
    {
      "name": "CoveredCallFinancialProductLibrary",
      "address": "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58",
      "type": "Contract",
      "sourceHashes": [
        "0x626fc280735c432e9187554bc59d556389dc73435f1b570e64f424d257f68d09"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1618347170,
      "sinceBlock": 12234012,
      "values": { "$immutable": true }
    },
    {
      "name": "TokenMessenger",
      "address": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
      "type": "Contract",
      "sourceHashes": [
        "0xd05b852e1f8c4b58ffee547d6db9feb1ae5b614ac3281d8cb02c8b2e3af2164f"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1677628295,
      "sinceBlock": 16730029,
      "values": {
        "$immutable": true,
        "localMessageTransmitter": "0x0a992d191DEeC32aFe36203Ad87D7d289a738F81",
        "localMinter": "0xc4922d64a24675E16e1586e3e3Aa56C06fABe907",
        "messageBodyVersion": 0,
        "owner": "0x6b0b72E63764101Fc4d5BD914B107987041578C4",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "rescuer": "0x65cBcdbE95567A8F9519242f9C52F65E8067021B"
      }
    },
    {
      "name": "ProxyERC20",
      "address": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
      "type": "Contract",
      "sourceHashes": [
        "0x92e331fe4114ac2f89d5a81d1660e3e3fd7bf68fa357df90830934d0c3d081eb"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1565329008,
      "sinceBlock": 8314597,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "name": "Synthetix Network Token",
        "nominatedOwner": "0x0000000000000000000000000000000000000000",
        "owner": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
        "symbol": "SNX",
        "target": "0xc5f0b4194455e0C175ab68C501400e46C7203504",
        "totalSupply": "339889850088773602815691648",
        "useDELEGATECALL": false
      }
    },
    {
      "name": "WETH9",
      "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      "type": "Contract",
      "sourceHashes": [
        "0xec8c1fea9a5a10c4c028664a56d678a0776b07cfc510fc7fa54db0aed0978f49"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1513077455,
      "sinceBlock": 4719568,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "name": "Wrapped Ether",
        "symbol": "WETH",
        "totalSupply": "2797692064454474441730558"
      }
    },
    {
      "name": "HubPool",
      "address": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
      "type": "Contract",
      "sourceHashes": [
        "0x3afa0a01f4cde6c678d6ec12443078407e69293b9a4519105445f694671b2dec"
      ],
      "proxyType": "immutable",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5"
        }
      ],
      "ignoreInWatchMode": ["rootBundleProposal"],
      "sinceTimestamp": 1653167916,
      "sinceBlock": 14819537,
      "values": {
        "$immutable": true,
        "Adapters": {
          "1": "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
          "10": "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b",
          "130": "0xFADcC43096756e1527306FD92982FEbBe3c629Fa",
          "137": "0xb4AeF0178f5725392A26eE18684C2aB62adc912e",
          "288": "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
          "324": "0x3155A91D2EBAe69443B45556e1DE5ed8eB79C90D",
          "480": "0xA8399e221a583A57F54Abb5bA22f31b5D6C09f32",
          "690": "0x188F8C95B7cfB7993B53a4F643efa687916f73fA",
          "1135": "0x8229E812f20537caA1e8Fb41749b4887B8a75C3B",
          "1868": "0x0c9d064523177dBB55CFE52b9D0c485FBFc35FD2",
          "8453": "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c",
          "34443": "0xf1B59868697f3925b72889ede818B9E7ba0316d0",
          "41455": "0x6F4083304C2cA99B077ACE06a5DcF670615915Af",
          "42161": "0x100EDfCf3af2B4625Fca4EaF6C533703e71F7210",
          "57073": "0x7e90A40c7519b041A7DF6498fBf5662e8cFC61d2",
          "59144": "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE",
          "81457": "0xF2bEf5E905AAE0295003ab14872F811E914EdD81",
          "534352": "0xb6129Ab69aEA75e6884c2D6ecf25293C343C519F",
          "7777777": "0x024F2fC31CBDD8de17194b1892c834f98Ef5169b"
        },
        "bondAmount": "450000000000000000",
        "bondToken": "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea",
        "CrossChainContracts": {
          "1": "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5",
          "10": "0x6f26Bf09B1C792e3228e5467807a900A503c0281",
          "130": "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
          "137": "0x9295ee1d8C5b022Be115A2AD3c30C72E34e7F096",
          "288": "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58",
          "324": "0xE0B015E54d54fc84a6cB9B666099c46adE9335FF",
          "480": "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
          "690": "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97",
          "1135": "0x9552a0a6624A23B848060AE5901659CDDa1f83f8",
          "1868": "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
          "8453": "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
          "34443": "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
          "41455": "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97",
          "42161": "0xe35e9842fceaCA96570B734083f4a58e8F7C5f2A",
          "57073": "0xeF684C38F94F48775959ECf2012D7E864ffb9dd4",
          "59144": "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75",
          "81457": "0x2D509190Ed0172ba588407D4c2df918F955Cc6E1",
          "534352": "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
          "7777777": "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97"
        },
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "identifier": "0x4143524f53532d56320000000000000000000000000000000000000000000000",
        "liveness": 3600,
        "lpFeeRatePerSecond": 1500000000000,
        "lpTokenFactory": "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "paused": false,
        "protocolFeeCaptureAddress": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
        "protocolFeeCapturePct": 0,
        "rootBundleProposal": {
          "poolRebalanceRoot": "0x144fa2439eaad140d2f791af1fcf1b9dc0ebb4cdfb4e45adb4d92e47957c3072",
          "relayerRefundRoot": "0xc77f9ac7d4e7ea8b43edd0208842be8743802323c70fa408817cb7c9a7d875bf",
          "slowRelayRoot": "0xc0c7d70d3af4b2a1e852cf2c90ae9b9280fef7a821e6ff6bf079268af4f2a5d7",
          "claimedBitMap": 0,
          "proposer": "0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c",
          "unclaimedPoolRebalanceLeafCount": 16,
          "challengePeriodEndTimestamp": 1741956563
        },
        "timerAddress": "0x0000000000000000000000000000000000000000",
        "weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "L1StandardBridge",
      "address": "0xc473ca7E02af24c129c2eEf51F2aDf0411c1Df69",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xe60978aadd7b7babd6a7af621f97d7f7e58f1e93f631dd66a13fe4eae9b14761",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1712184575,
      "sinceBlock": 19578331,
      "values": {
        "$admin": "0xCC53b447aFe07926423aB96D5496b1af30485ED2",
        "$implementation": "0x49b20cBfA1d582475b2466A784B91dEe4549C737",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x592C1299e0F8331D81A28C0FC7352Da24eDB444a",
        "MESSENGER": "0x592C1299e0F8331D81A28C0FC7352Da24eDB444a",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x4b5b41c240173191425F5928bc6bdd0d439331BB",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "L1OpUSDCBridgeAdapter",
      "address": "0xC67A8c5f22b40274Ca7C4A56Db89569Ee2AD3FAb",
      "type": "Contract",
      "template": "circle/L1OpUSDCBridgeAdapter",
      "sourceHashes": [
        "0xbbe53a68c0042f4050bdf21e8d16eee4688dd35d24e49740915f0a0cf994f0d6",
        "0xd311a9b68b7e171b3bc43bd9e7ee705886c2fdd620360576ca49115fd9799d5d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Escrow for USDC that uses the canonical bridge for messaging but is governed externally.",
      "sinceTimestamp": 1735038311,
      "sinceBlock": 21471915,
      "values": {
        "$admin": "0xE7c9a9DddAb8a384c38D721DE64E4222Fe76DF75",
        "$implementation": "0xcfF35e3C0B8D197A6Ce10802cd649FBb9957dA07",
        "$pastUpgrades": [
          [
            "2024-12-24T11:05:11.000Z",
            "0x7bff56936a70f2b482f4b32df6bcfcc5c76b64aae40f7e8a4c5c666c328fa44d",
            ["0xcfF35e3C0B8D197A6Ce10802cd649FBb9957dA07"]
          ]
        ],
        "$upgradeCount": 1,
        "BRIDGE_MESSAGE_TYPEHASH": "0x87e4683aad14f1869b43140e06b846bd1b00c2e08e9825f6719d163b4cfef2a6",
        "burnAmount": 0,
        "burnCaller": "0x0000000000000000000000000000000000000000",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "OpUSDCBridgeAdapter",
          "version": "1.0.0",
          "chainId": 1,
          "verifyingContract": "0xC67A8c5f22b40274Ca7C4A56Db89569Ee2AD3FAb",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "LINKED_ADAPTER": "0x8be79275FCfD08A931087ECf70Ba8a99aee3AC59",
        "MESSENGER": "0x9CF951E3F74B644e621b36Ca9cea147a78D4c39f",
        "messengerStatus": 0,
        "owner": "0xE7c9a9DddAb8a384c38D721DE64E4222Fe76DF75",
        "UPGRADE_INTERFACE_VERSION": "5.0.0",
        "USDC": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "address": "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "LineaRollup",
      "address": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
      "type": "Contract",
      "template": "linea/LineaRollup",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0xd9038151917d14b4d25257789abe9a10cecf3a5b4c0c2520860ce1338757ceff"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main contract of the Linea zkEVM rollup. Contains state roots, the verifier addresses and manages messages between L1 and the L2.",
      "ignoreInWatchMode": [
        "currentPeriodAmountInWei",
        "currentL2StoredL1MessageNumber",
        "currentL2StoredL1RollingHash",
        "currentFinalizedShnarf",
        "currentFinalizedState"
      ],
      "sinceTimestamp": 1689159923,
      "sinceBlock": 17677070,
      "values": {
        "$admin": "0xF5058616517C068C7b8c7EbC69FF636Ade9066d6",
        "$implementation": "0x07ddce60658A61dc1732Cacf2220FcE4A01C49B0",
        "$pastUpgrades": [
          [
            "2023-07-12T11:05:23.000Z",
            "0x3564f15a274bdc49a6ad8af161113d20a678d87efbd3d708540a9b4d026f1122",
            ["0xE8f627df6Cb02e415b2e6d6e112323BD269b4706"]
          ],
          [
            "2023-07-12T12:57:47.000Z",
            "0x8ee4253600d68665e8d52a522d8ba7136639187b87f8079b881de9e6d1f20d2a",
            ["0xE8f627df6Cb02e415b2e6d6e112323BD269b4706"]
          ],
          [
            "2023-07-15T13:31:23.000Z",
            "0x628efc29f5b2267f23cf613720003fafe671ee47db60b4f6610f5ae1ab838555",
            ["0x4c8d4Ce72afAA417d1F7E833725FdB4E793cd6b3"]
          ],
          [
            "2023-08-08T16:58:47.000Z",
            "0xdff29a7f65b6bec4e8288673a5ca55e12081b4d55879e600817484f28c5a80b1",
            ["0xb32c3D0dDb0063FfB15E8a50b40cC62230D820B3"]
          ],
          [
            "2024-02-13T08:39:59.000Z",
            "0xb4ed5b2646e45744945a4fc51da0e5e687ffe26f570b7aa3abb7b1fd4a460ea4",
            ["0xAA4b3a9515c921996Abe7930bF75Eff7466a4457"]
          ],
          [
            "2024-03-26T10:29:47.000Z",
            "0x565c77e109aac4df41d81457bdfbdd17782d8bca9a1330c68a271c64f35d05e5",
            ["0x934Dd4C63E285551CEceF8459103554D0096c179"]
          ],
          [
            "2024-06-05T11:49:35.000Z",
            "0x497bdab1d3fb97eed72a55fc6e3672694195b08f949c2e0e84ea4b36428ee9c6",
            ["0x53fC68bFfC03D17804e5A901DE42d1eeF2e64562"]
          ],
          [
            "2024-10-29T15:35:47.000Z",
            "0x0970f422c80627f28916f9c5583ff6298070893debd191ead0cf39778e4bae14",
            ["0x1825242411792536469Cbb5843fd27Ce3e9e583A"]
          ],
          [
            "2024-12-16T13:52:11.000Z",
            "0x96b88112de2e594cb763bc625cc2dcb6920825bb642eb1a62ff577f0c29f616d",
            ["0x07ddce60658A61dc1732Cacf2220FcE4A01C49B0"]
          ]
        ],
        "$upgradeCount": 9,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "OPERATOR_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "0x46d2F319fd42165D4318F099E143dEA8124E9E3e",
              "0x52FF08F313A00A54e3Beffb5C4a7F7446eFb6754"
            ]
          },
          "RATE_LIMIT_SETTER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "PAUSE_MANAGER": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "VERIFIER_SETTER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0xd6B95c960779c72B8C6752119849318E5d550574"]
          },
          "PAUSE_ALL_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "PAUSE_L1_L2_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "PAUSE_L2_L1_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "UNPAUSE_ALL_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "UNPAUSE_L1_L2_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "UNPAUSE_L2_L1_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "PAUSE_BLOB_SUBMISSION_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "UNPAUSE_BLOB_SUBMISSION_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "PAUSE_FINALIZATION_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "UNPAUSE_FINALIZATION_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "USED_RATE_LIMIT_RESETTER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          },
          "VERIFIER_UNSETTER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x892bb7EeD71efB060ab90140e7825d8127991DD3"]
          }
        },
        "CONTRACT_VERSION": "6.0",
        "currentFinalizedShnarf": "0x1ca3d2da46eb9fedf20eec6bf3274771f6e85299aa2d074a5a014f3006d880ef",
        "currentFinalizedState": "0x82a5d65a55ea5ae0a99a165fa35aefefab73cb638266921fc42f0cd4eef1f82a",
        "currentL2StoredL1MessageNumber": 626080,
        "currentL2StoredL1RollingHash": "0xc2453f13443df7f6fd1a09328e1ed9aca29edf668321fb8376948908127c22ac",
        "currentPeriodAmountInWei": 5000000000000000,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "fallbackOperator": "0x3697bD0bC6C050135b8321F989a5316eACbF367D",
        "GENESIS_SHNARF": "0x47452a1b9ebadfe02bdd02f580fa1eba17680d57eec968a591644d05d78ee84f",
        "INBOX_STATUS_RECEIVED": 1,
        "INBOX_STATUS_UNKNOWN": 0,
        "isPaused_BLOB_SUBMISSION": false,
        "isPaused_CALLDATA_SUBMISSION": false,
        "isPaused_COMPLETE_TOKEN_BRIDGING": false,
        "isPaused_FINALIZATION": false,
        "isPaused_GENERAL": false,
        "isPaused_INITIATE_TOKEN_BRIDGING": false,
        "isPaused_L1_L2": false,
        "isPaused_L2_L1": false,
        "limitInWei": "18750000000000000000000",
        "OPERATOR_ROLE": "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
        "Operators": [
          "0x46d2F319fd42165D4318F099E143dEA8124E9E3e",
          "0x52FF08F313A00A54e3Beffb5C4a7F7446eFb6754"
        ],
        "OUTBOX_STATUS_RECEIVED": 2,
        "OUTBOX_STATUS_SENT": 1,
        "OUTBOX_STATUS_UNKNOWN": 0,
        "PAUSE_ALL_ROLE": "0x56bdc3c9ec86cb7db110a7699b2ade72f0b8819727d9f7d906b012641505fa77",
        "PAUSE_BLOB_SUBMISSION_ROLE": "0x67c2dca7476ee0fe1dd3cba13428c6760bfe2599a6dfe26a9ad7ef27317c6e77",
        "PAUSE_FINALIZATION_ROLE": "0xe37c272ea30e2bb381ad7cf89ae754b49153250609f36d0cbdad8b64c184bb5c",
        "PAUSE_L1_L2_ROLE": "0x430a7f0cb00b5ebbe63cecc96e82cf959a883e7c13a95110854f1fa6b3fbf598",
        "PAUSE_L2_L1_ROLE": "0xe1fce82838dd7a42cfe783f60dc6233c8aa2c4fc66e77817805e767ec5e349b6",
        "periodInSeconds": 86400,
        "RATE_LIMIT_SETTER_ROLE": "0x1185e52d62bfbbea270e57d3d09733d221b53ab7a18bae82bb3c6c74bab16d82",
        "sender": "0x0000000000000000000000000000000000000000",
        "systemMigrationBlock": 19219000,
        "UNPAUSE_ALL_ROLE": "0xd8b4c34c2ec1f3194471108c64ad2beda340c0337ee4ca35592f9ef270f4228b",
        "UNPAUSE_BLOB_SUBMISSION_ROLE": "0xe4831f9e4316ac2c65117d1f602fbf56d38128a9973d5e3fdbc5b77265c18d40",
        "UNPAUSE_FINALIZATION_ROLE": "0x1ab87f7458c0e3d07e9881c14ee67f0141703614fd48ea5b15ed987e5f4b030e",
        "UNPAUSE_L1_L2_ROLE": "0xe8cb6172fcf5cbaae022b7c910224a4f0c20d53227e630056efff182155a5abc",
        "UNPAUSE_L2_L1_ROLE": "0xb6cc65f42901ed602aec1619cc1ead29d487cd489094a37615153eaeb991d770",
        "USED_RATE_LIMIT_RESETTER_ROLE": "0x0cf0d2deb70d7bdac2fa48c4ac99bc558170be0ce5fcb994caefa4bf7b96edf9",
        "VERIFIER_SETTER_ROLE": "0x32937fd5162e282df7e9a14a5073a2425321c7966eaf70ed6c838a1006d84c4c",
        "VERIFIER_UNSETTER_ROLE": "0x6b5661ddfbd1fbd525c902a513e0f47d9c74f1c1ee8a2d4f1937ad305fb8f41a",
        "verifiers": [
          "0x1111111111111111111111111111111111111111",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0xBfF4a03A355eEF7dA720bBC7878F9BdBBE81fe6F",
          "0x1111111111111111111111111111111111111111",
          "0x0000000000000000000000000000000000000000",
          "0x1111111111111111111111111111111111111111",
          "0x1111111111111111111111111111111111111111",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ]
      },
      "fieldMeta": {
        "verifiers": {
          "description": "Mapping of proof type to ZK Plonk Verifier contract"
        }
      }
    },
    {
      "name": "L1SharedBridge",
      "address": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
      "type": "Contract",
      "template": "shared-zk-stack/L1SharedBridge",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x23ebe4dfc517328a5acc1f6f8aa84be593be5db9d6357fcdcd69c62ca60853f7"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This bridge contract escrows all ERC-20s and ETH that are deposited to registered ZK stack chains like ZKsync Era.",
      "sinceTimestamp": 1717521479,
      "sinceBlock": 20019898,
      "values": {
        "$admin": "0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1",
        "$implementation": "0xF5A14DCdde1143443f06033200D345c2a2828A99",
        "$pastUpgrades": [
          [
            "2024-06-04T17:17:59.000Z",
            "0xce3d72f23297a281cb58502dcc6a6c029489316a2faf9c4ef83141b1b254017c",
            ["0xCba1aF8f0bB223b2544F8eB8f69d1c7960f788dB"]
          ],
          [
            "2024-08-26T07:51:11.000Z",
            "0xaec33529b74f8f9d56d7aa568c6358be299228a85e49ea85cb106eca5af7367c",
            ["0xb56A8225A745756DD215faf22E4796f373561AcD"]
          ],
          [
            "2025-01-08T16:00:35.000Z",
            "0xc90d135e4b8ab58304853f3be34b2fefd18c2a817d3d250e7b669e024d5277c5",
            ["0xF5A14DCdde1143443f06033200D345c2a2828A99"]
          ]
        ],
        "$upgradeCount": 3,
        "admin": "0x2cf3bD6a9056b39999F3883955E183F655345063",
        "BRIDGE_HUB": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "legacyBridge": "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
        "owner": "0xE30Dca3047B37dc7d88849dE4A4Dc07937ad5Ab3",
        "paused": false,
        "pendingAdmin": "0x0000000000000000000000000000000000000000",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "L1StandardBridge",
      "address": "0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0x18e98a64fbfe011a7514d7a547900c02a3e0f9a49ab3413d517fd7e0e3c539dd",
        "0x3ffed4eb8169f2ebc4abe07aaa71451c53653f6b89400b483cdd4be5dbc8513a"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1628793901,
      "sinceBlock": 13012048,
      "values": {
        "$admin": "0x6e598cec2701FfAA3c06175dc3Af0317a749a0Dc",
        "$implementation": "0x5Eb02901135865aF8Da6752aF92fbAe62258520F",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x6D4528d192dB72E282265D6092F4B872f9Dff69e",
        "MESSENGER": "0x6D4528d192dB72E282265D6092F4B872f9Dff69e",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x996ffD627901f10C80A7d4B72A12316D2e77c076",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0xdC40a14d9abd6F410226f1E6de71aE03441ca506",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1686694019,
      "sinceBlock": 17473937,
      "values": {
        "$immutable": false,
        "$implementation": "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65",
        "$pastUpgrades": [
          [
            "2023-06-13T22:10:59.000Z",
            "0xf20999bd27f1d3effcc4cb9179f163441079744741a78ca04ea40bb505096f68",
            ["0x0000000000000000000000000000000000000000"]
          ],
          [
            "2023-06-13T22:11:23.000Z",
            "0x2d5cb61e2bcf7b90f813f128dd3ee41d8f0dc78bed2b49c2dcc61e95e7530d03",
            ["0x363B4B1ADa52E50353f746999bd9E94395190d2C"]
          ],
          [
            "2024-04-19T21:23:23.000Z",
            "0xfe942033eec0df235735ae8872759f690e4bee4c86ebb6dba7b9b9446410b5d1",
            ["0xd81f43eDBCAcb4c29a9bA38a13Ee5d79278270cC"]
          ],
          [
            "2024-04-19T21:23:23.000Z",
            "0xfe942033eec0df235735ae8872759f690e4bee4c86ebb6dba7b9b9446410b5d1",
            ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"]
          ]
        ],
        "$upgradeCount": 4,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292629575",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0x1a0ad011913A150f69f6A19DF447A0CfD9551054",
        "PORTAL": "0x1a0ad011913A150f69f6A19DF447A0CfD9551054",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0xEF8115F2733fb2033a7c756402Fc1deaa56550Ef",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "AzeroERC20",
      "address": "0xdD0ae774F7E300CdAA4EA371cD55169665Ee6AFe",
      "type": "Contract",
      "sourceHashes": [
        "0x1d6ebb6584ce9e6d66767a02f94aa605fde166a05c49f213a5873f1a79173b25"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1721400911,
      "sinceBlock": 20341311,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "minterBurner": "0xf2139f5c8AFB8A4D64084eFc5532830774742830",
        "name": "Aleph Zero",
        "owner": "0xdaD87f2a69540DF393b0e126895DE26C548dF131",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "symbol": "AZERO",
        "totalSupply": "6522853395381625558939369"
      }
    },
    {
      "address": "0xE0B015E54d54fc84a6cB9B666099c46adE9335FF",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Base_Adapter",
      "address": "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c",
      "type": "Contract",
      "sourceHashes": [
        "0x172a1f27f0fecf665d90a6adc1287223f05a73acd9ed19d9c446972880ccce0f"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1716255947,
      "sinceBlock": 19915087,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "L1_STANDARD_BRIDGE": "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x866E82a600A1414e583f7F13623F1aC5d58b0Afa",
        "recipientCircleDomainId": 6,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "name": "Optimism_Adapter",
      "address": "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b",
      "type": "Contract",
      "sourceHashes": [
        "0x59784b70d01278196c00fbfe1f237b01ec891dca28b0542cdf8dcc9e672b3849"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1716255311,
      "sinceBlock": 19915034,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "DAI_OPTIMISM_BRIDGE": "0x10E6593CDda8c58a1d0f14C5164B376352a55f2F",
        "L1_STANDARD_BRIDGE": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "recipientCircleDomainId": 2,
        "SNX": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
        "SNX_OPTIMISM_BRIDGE": "0x39Ea01a0298C315d149a490E34B59Dbf2EC7e48F",
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "address": "0xe35e9842fceaCA96570B734083f4a58e8F7C5f2A",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1StandardBridge",
      "address": "0xeb9bf100225c214Efc3E7C651ebbaDcF85177607",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x1010ff7f40ab4d53e6d9996aefa04423dabe9d0e22fac2d02b330ed3aa2c5740"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1733134751,
      "sinceBlock": 21314185,
      "values": {
        "$admin": "0x89889B569c3a505f3640ee1Bd0ac1D557f436D2a",
        "$implementation": "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x9CF951E3F74B644e621b36Ca9cea147a78D4c39f",
        "MESSENGER": "0x9CF951E3F74B644e621b36Ca9cea147a78D4c39f",
        "OTHER_BRIDGE": "0x4200000000000000000000000000000000000010",
        "otherBridge": "0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.1.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "GatewayRouter",
      "address": "0xeBb17f398ed30d02F2e8733e7c1e5cf566e17812",
      "type": "Contract",
      "template": "orbitstack/GatewayRouter",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x33422e0ac90902db5dad442b006c9df60e262556d8ad286808d133b5429a3eb0"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This routing contract maps tokens to the correct escrow (gateway) to be then bridged with canonical messaging.",
      "sinceTimestamp": 1722261575,
      "sinceBlock": 20412674,
      "values": {
        "$admin": "0x80622fe04c5e1c3fbb3A9c62996dB27B53E9F77b",
        "$implementation": "0x5Ff3feD7aad041ACe66E4ecDd7AfbCC43b6446b0",
        "$pastUpgrades": [
          [
            "2024-07-29T13:59:35.000Z",
            "0x7d95b8115b846835b6da60e35cc04647b957e35301e9cb72b1d148b26acac93a",
            ["0x5Ff3feD7aad041ACe66E4ecDd7AfbCC43b6446b0"]
          ]
        ],
        "$upgradeCount": 1,
        "counterpartGateway": "0xD296d45171B97720D3aBdb68B0232be01F1A9216",
        "defaultGateway": "0xccaF21F002EAF230c9Fa810B34837a3739B70F7B",
        "inbox": "0x56D8EC76a421063e1907503aDd3794c395256AEb",
        "owner": "0x830D41c5624EE982cddEd92Ba01DAB3a4856116f",
        "router": "0x0000000000000000000000000000000000000000",
        "whitelist": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "L1OrbitGatewayRouter",
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "name": "BondToken",
      "address": "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea",
      "type": "Contract",
      "sourceHashes": [
        "0x1d9754ae4e99e4320201bbc6f0e19aa5ecac917dcacaadba3b70cfa018910754"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["totalSupply"],
      "sinceTimestamp": 1692831647,
      "sinceBlock": 17980554,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "hubPool": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "name": "Across Bond Token",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "proposers": ["0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c"],
        "symbol": "ABT",
        "totalSupply": "28095402467539846062"
      }
    },
    {
      "name": "UMAOptimisticOracle",
      "address": "0xeE3Afe347D5C74317041E2618C49534dAf887c24",
      "type": "Contract",
      "sourceHashes": [
        "0xbe561564083bf80216ae0f5510f70415cf97a624ef4bad88fb98a43dc4231dd6"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1635958318,
      "sinceBlock": 13545034,
      "values": {
        "$immutable": true,
        "ancillaryBytesLimit": 8192,
        "defaultLiveness": 7200,
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "timerAddress": "0x0000000000000000000000000000000000000000"
      },
      "derivedName": "SkinnyOptimisticOracle"
    },
    {
      "address": "0xeF684C38F94F48775959ECf2012D7E864ffb9dd4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Mode_Adapter",
      "address": "0xf1B59868697f3925b72889ede818B9E7ba0316d0",
      "type": "Contract",
      "sourceHashes": [
        "0x1b1b271fd3f736024fda7dd869d78943819efee5dcbf6f4075af9647cfb16cac"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1716243911,
      "sinceBlock": 19914094,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0x735aDBbE72226BD52e818E7181953f42E3b0FF21",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f",
        "recipientCircleDomainId": 0,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "name": "Blast_Adapter",
      "address": "0xF2bEf5E905AAE0295003ab14872F811E914EdD81",
      "type": "Contract",
      "sourceHashes": [
        "0x596bdc0b39f0ff19cde625424cdc037dd3e79355ee2c845bd8a6e5e42b3bc332"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1719955511,
      "sinceBlock": 20221494,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_BLAST_BRIDGE": "0x3a05E5d33d7Ab3864D53aaEc93c8301C1Fa49115",
        "L1_DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "L1_STANDARD_BRIDGE": "0x697402166Fbf2F22E970df8a6486Ef171dbfc524",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "address": "0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1GatewayRouter",
      "address": "0xF8B1378579659D8F7EE5f3C929c2f3E332E41Fd6",
      "type": "Contract",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x3257fd4336e925899e6352562238124ef46e51d144d4a4d12526837be49a062f"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1696782323,
      "sinceBlock": 18306934,
      "values": {
        "$admin": "0xEB803eb3F501998126bf37bB823646Ed3D59d072",
        "$implementation": "0xb93Ac04010Bd61F45BF492022A5b49a902F798F3",
        "$pastUpgrades": [
          [
            "2023-10-08T16:25:23.000Z",
            "0x8f6851c707737c446ee55f39be1442ce8cfa50ef8522b34bac247c0bb39a14ec",
            ["0xb93Ac04010Bd61F45BF492022A5b49a902F798F3"]
          ]
        ],
        "$upgradeCount": 1,
        "defaultERC20Gateway": "0xD8A791fE2bE73eb6E6cF1eb0cb3F36adC9B3F8f9",
        "ethGateway": "0x7F2b8C31F88B6006c382775eea88297Ec1e3E905",
        "gatewayInContext": "0x0000000000000000000000000000000000000000",
        "owner": "0x798576400F7D662961BA15C6b3F3d813447a26a6"
      }
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0xf931a81D18B1766d15695ffc7c1920a62b7e710a",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x1cc8a3b7de3d2c54c4706bb3f3015714d3b56647fc9fbfd6f8b068f5f63c1c25"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1719432971,
      "sinceBlock": 20178185,
      "values": {
        "$immutable": false,
        "$implementation": "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65",
        "$pastUpgrades": [
          [
            "2024-06-26T20:22:11.000Z",
            "0xe6ded05b39b296df87dfd33578f9dd897082d080120302622ba8ca158ad6bd38",
            ["0xE187FEF3AAe13137e6062B2634cCE43B599156F6"]
          ],
          [
            "2025-01-23T14:07:23.000Z",
            "0xd769e7c27d00533eb49c0eab25c13936d9a16aa018bfeaef9309a41e7291aa39",
            ["0xd81f43eDBCAcb4c29a9bA38a13Ee5d79278270cC"]
          ],
          [
            "2025-01-23T14:07:23.000Z",
            "0xd769e7c27d00533eb49c0eab25c13936d9a16aa018bfeaef9309a41e7291aa39",
            ["0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"]
          ]
        ],
        "$upgradeCount": 3,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292633468",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "0x4200000000000000000000000000000000000007",
        "otherMessenger": "0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "0xd5ec14a83B7d95BE1E2Ac12523e2dEE12Cbeea6C",
        "PORTAL": "0xd5ec14a83B7d95BE1E2Ac12523e2dEE12Cbeea6C",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "0x5891090d5085679714cb0e62f74950a3c19146a8",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "0x95703e0982140D16f8ebA6d158FccEde42f04a4C",
        "version": "2.3.0"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "DoctorWho_Adapter",
      "address": "0xFADcC43096756e1527306FD92982FEbBe3c629Fa",
      "type": "Contract",
      "sourceHashes": [
        "0x26a48559a60b482a96526e1ee27fef2111bb46e40395ee2122284141ffc30e14"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1738675907,
      "sinceBlock": 21773451,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "L1_STANDARD_BRIDGE": "0x81014F44b0a345033bB2b3B21C7a1A308B35fEeA",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6",
        "recipientCircleDomainId": 10,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      }
    },
    {
      "name": "FxRoot",
      "address": "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
      "type": "Contract",
      "sourceHashes": [
        "0x31a28ed9351deeec2992e83cf310b611b8cafeb9cd37c83bee875fb104b5e6f6"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1610894890,
      "sinceBlock": 11673349,
      "values": {
        "$immutable": true,
        "fxChild": "0x8397259c983751DAf40400790063935a11afa28a",
        "stateSender": "0x28e4F3a7f651294B9564800b2D01f35189A5bFbE"
      }
    }
  ],
  "abis": {
    "0x0029e562c0b54C0b88cB22adF4346DbfEC87400c": [
      "constructor()",
      "error AddressTooLow(address)",
      "error BridgeHubAlreadyRegistered()",
      "error ChainIdTooBig()",
      "error MsgValueMismatch(uint256 expectedMsgValue, uint256 providedMsgValue)",
      "error NotInitializedReentrancyGuard()",
      "error Reentrancy()",
      "error STMAlreadyRegistered()",
      "error STMNotRegistered()",
      "error SharedBridgeNotSet()",
      "error SlotOccupied()",
      "error TokenAlreadyRegistered(address token)",
      "error TokenNotRegistered(address token)",
      "error Unauthorized(address caller)",
      "error WrongMagicValue(uint256 expectedMagicValue, uint256 providedMagicValue)",
      "error ZeroAddress()",
      "error ZeroChainId()",
      "event Initialized(uint8 version)",
      "event NewAdmin(address indexed oldAdmin, address indexed newAdmin)",
      "event NewChain(uint256 indexed chainId, address stateTransitionManager, address indexed chainGovernance)",
      "event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "function acceptAdmin()",
      "function acceptOwnership()",
      "function addStateTransitionManager(address _stateTransitionManager)",
      "function addToken(address _token)",
      "function admin() view returns (address)",
      "function baseToken(uint256 _chainId) view returns (address)",
      "function createNewChain(uint256 _chainId, address _stateTransitionManager, address _baseToken, uint256 _salt, address _admin, bytes _initData) returns (uint256)",
      "function getHyperchain(uint256 _chainId) view returns (address)",
      "function initialize(address _owner)",
      "function l2TransactionBaseCost(uint256 _chainId, uint256 _gasPrice, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit) view returns (uint256)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingOwner() view returns (address)",
      "function proveL1ToL2TransactionStatus(uint256 _chainId, bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof, uint8 _status) view returns (bool)",
      "function proveL2LogInclusion(uint256 _chainId, uint256 _batchNumber, uint256 _index, tuple(uint8 l2ShardId, bool isService, uint16 txNumberInBatch, address sender, bytes32 key, bytes32 value) _log, bytes32[] _proof) view returns (bool)",
      "function proveL2MessageInclusion(uint256 _chainId, uint256 _batchNumber, uint256 _index, tuple(uint16 txNumberInBatch, address sender, bytes data) _message, bytes32[] _proof) view returns (bool)",
      "function removeStateTransitionManager(address _stateTransitionManager)",
      "function renounceOwnership()",
      "function requestL2TransactionDirect(tuple(uint256 chainId, uint256 mintValue, address l2Contract, uint256 l2Value, bytes l2Calldata, uint256 l2GasLimit, uint256 l2GasPerPubdataByteLimit, bytes[] factoryDeps, address refundRecipient) _request) payable returns (bytes32 canonicalTxHash)",
      "function requestL2TransactionTwoBridges(tuple(uint256 chainId, uint256 mintValue, uint256 l2Value, uint256 l2GasLimit, uint256 l2GasPerPubdataByteLimit, address refundRecipient, address secondBridgeAddress, uint256 secondBridgeValue, bytes secondBridgeCalldata) _request) payable returns (bytes32 canonicalTxHash)",
      "function setPendingAdmin(address _newPendingAdmin)",
      "function setSharedBridge(address _sharedBridge)",
      "function sharedBridge() view returns (address)",
      "function stateTransitionManager(uint256 _chainId) view returns (address)",
      "function stateTransitionManagerIsRegistered(address _stateTransitionManager) view returns (bool)",
      "function tokenIsRegistered(address _token) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function unpause()"
    ],
    "0x0190a2328e072Fc5a7fA00F6C9ae2a16c7F4E32a": [
      "constructor(address _wrappedNativeTokenAddress, uint32 _depositQuoteTimeBuffer, uint32 _fillDeadlineBuffer)",
      "error ClaimedMerkleLeaf()",
      "error DepositsArePaused()",
      "error DisabledRoute()",
      "error ExpiredFillDeadline()",
      "error FillsArePaused()",
      "error InsufficientSpokePoolBalanceToExecuteLeaf()",
      "error InvalidBytes32()",
      "error InvalidChainId()",
      "error InvalidCrossDomainAdmin()",
      "error InvalidDepositorSignature()",
      "error InvalidExclusiveRelayer()",
      "error InvalidFillDeadline()",
      "error InvalidMerkleLeaf()",
      "error InvalidMerkleProof()",
      "error InvalidPayoutAdjustmentPct()",
      "error InvalidQuoteTimestamp()",
      "error InvalidRelayerFeePct()",
      "error InvalidSlowFillRequest()",
      "error InvalidWithdrawalRecipient()",
      "error LowLevelCallFailed(bytes data)",
      "error MaxTransferSizeExceeded()",
      "error MsgValueDoesNotMatchInputAmount()",
      "error NoRelayerRefundToClaim()",
      "error NoSlowFillsInExclusivityWindow()",
      "error NotEOA()",
      "error NotExclusiveRelayer()",
      "error RelayFilled()",
      "error WrongERC7683OrderId()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ClaimedRelayerRefund(bytes32 indexed l2TokenAddress, bytes32 indexed refundAddress, uint256 amount, address indexed caller)",
      "event EmergencyDeletedRootBundle(uint256 indexed rootBundleId)",
      "event EnabledDepositRoute(address indexed originToken, uint256 indexed destinationChainId, bool enabled)",
      "event ExecutedRelayerRefundRoot(uint256 amountToReturn, uint256 indexed chainId, uint256[] refundAmounts, uint32 indexed rootBundleId, uint32 indexed leafId, address l2TokenAddress, address[] refundAddresses, bool deferredRefunds, address caller)",
      "event FilledRelay(bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 repaymentChainId, uint256 indexed originChainId, uint256 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes32 exclusiveRelayer, bytes32 indexed relayer, bytes32 depositor, bytes32 recipient, bytes32 messageHash, tuple(bytes32 updatedRecipient, bytes32 updatedMessageHash, uint256 updatedOutputAmount, uint8 fillType) relayExecutionInfo)",
      "event FilledV3Relay(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 repaymentChainId, uint256 indexed originChainId, uint32 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, address exclusiveRelayer, address indexed relayer, address depositor, address recipient, bytes message, tuple(address updatedRecipient, bytes updatedMessage, uint256 updatedOutputAmount, uint8 fillType) relayExecutionInfo)",
      "event FundsDeposited(bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed destinationChainId, uint256 indexed depositId, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityDeadline, bytes32 indexed depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes message)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PausedDeposits(bool isPaused)",
      "event PausedFills(bool isPaused)",
      "event RelayedRootBundle(uint32 indexed rootBundleId, bytes32 indexed relayerRefundRoot, bytes32 indexed slowRelayRoot)",
      "event RequestedSlowFill(bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed originChainId, uint256 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes32 exclusiveRelayer, bytes32 depositor, bytes32 recipient, bytes32 messageHash)",
      "event RequestedSpeedUpDeposit(uint256 updatedOutputAmount, uint256 indexed depositId, bytes32 indexed depositor, bytes32 updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "event RequestedSpeedUpV3Deposit(uint256 updatedOutputAmount, uint32 indexed depositId, address indexed depositor, address updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "event RequestedV3SlowFill(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed originChainId, uint32 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, address exclusiveRelayer, address depositor, address recipient, bytes message)",
      "event SetWithdrawalRecipient(address indexed newWithdrawalRecipient)",
      "event SetXDomainAdmin(address indexed newAdmin)",
      "event TokensBridged(uint256 amountToReturn, uint256 indexed chainId, uint32 indexed leafId, bytes32 indexed l2TokenAddress, address caller)",
      "event Upgraded(address indexed implementation)",
      "event V3FundsDeposited(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed destinationChainId, uint32 indexed depositId, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityDeadline, address indexed depositor, address recipient, address exclusiveRelayer, bytes message)",
      "function EMPTY_RELAYER() view returns (bytes32)",
      "function EMPTY_REPAYMENT_CHAIN_ID() view returns (uint256)",
      "function INFINITE_FILL_DEADLINE() view returns (uint32)",
      "function MAX_EXCLUSIVITY_PERIOD_SECONDS() view returns (uint32)",
      "function MAX_TRANSFER_SIZE() view returns (uint256)",
      "function UPDATE_ADDRESS_DEPOSIT_DETAILS_HASH() view returns (bytes32)",
      "function UPDATE_BYTES32_DEPOSIT_DETAILS_HASH() view returns (bytes32)",
      "function __SpokePool_init(uint32 _initialDepositId, address _crossDomainAdmin, address _withdrawalRecipient)",
      "function chainId() view returns (uint256)",
      "function claimRelayerRefund(bytes32 l2TokenAddress, bytes32 refundAddress)",
      "function crossDomainAdmin() view returns (address)",
      "function deposit(bytes32 depositor, bytes32 recipient, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, bytes32 exclusiveRelayer, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityParameter, bytes message) payable",
      "function depositDeprecated_5947912356(address recipient, address originToken, uint256 amount, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256) payable",
      "function depositFor(address depositor, address recipient, address originToken, uint256 amount, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256) payable",
      "function depositNow(bytes32 depositor, bytes32 recipient, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, bytes32 exclusiveRelayer, uint32 fillDeadlineOffset, uint32 exclusivityParameter, bytes message) payable",
      "function depositQuoteTimeBuffer() view returns (uint32)",
      "function depositV3(address depositor, address recipient, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, address exclusiveRelayer, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityParameter, bytes message) payable",
      "function depositV3Now(address depositor, address recipient, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, address exclusiveRelayer, uint32 fillDeadlineOffset, uint32 exclusivityParameter, bytes message) payable",
      "function emergencyDeleteRootBundle(uint256 rootBundleId)",
      "function enabledDepositRoutes(address, uint256) view returns (bool)",
      "function executeRelayerRefundLeaf(uint32 rootBundleId, tuple(uint256 amountToReturn, uint256 chainId, uint256[] refundAmounts, uint32 leafId, address l2TokenAddress, address[] refundAddresses) relayerRefundLeaf, bytes32[] proof) payable",
      "function executeSlowRelayLeaf(tuple(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 chainId, uint256 updatedOutputAmount) slowFillLeaf, uint32 rootBundleId, bytes32[] proof)",
      "function fill(bytes32 orderId, bytes originData, bytes fillerData)",
      "function fillDeadlineBuffer() view returns (uint32)",
      "function fillRelay(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 repaymentChainId, bytes32 repaymentAddress)",
      "function fillRelayWithUpdatedDeposit(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 repaymentChainId, bytes32 repaymentAddress, uint256 updatedOutputAmount, bytes32 updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "function fillStatuses(bytes32) view returns (uint256)",
      "function fillV3Relay(tuple(address depositor, address recipient, address exclusiveRelayer, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint32 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 repaymentChainId)",
      "function getCurrentTime() view returns (uint256)",
      "function getRelayerRefund(address l2TokenAddress, address refundAddress) view returns (uint256)",
      "function getUnsafeDepositId(address msgSender, bytes32 depositor, uint256 depositNonce) pure returns (uint256)",
      "function getV3RelayHash(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData) view returns (bytes32)",
      "function initialize(uint32 _initialDepositId, address _withdrawalRecipient)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numberOfDeposits() view returns (uint32)",
      "function owner() view returns (address)",
      "function pauseDeposits(bool pause)",
      "function pauseFills(bool pause)",
      "function pausedDeposits() view returns (bool)",
      "function pausedFills() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function relayRootBundle(bytes32 relayerRefundRoot, bytes32 slowRelayRoot)",
      "function relayerRefund(address, address) view returns (uint256)",
      "function renounceOwnership()",
      "function requestSlowFill(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData)",
      "function rootBundles(uint256) view returns (bytes32 slowRelayRoot, bytes32 relayerRefundRoot)",
      "function setCrossDomainAdmin(address newCrossDomainAdmin)",
      "function setEnableRoute(address originToken, uint256 destinationChainId, bool enabled)",
      "function setWithdrawalRecipient(address newWithdrawalRecipient)",
      "function speedUpDeposit(bytes32 depositor, uint256 depositId, uint256 updatedOutputAmount, bytes32 updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "function speedUpV3Deposit(address depositor, uint256 depositId, uint256 updatedOutputAmount, address updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "function transferOwnership(address newOwner)",
      "function tryMulticall(bytes[] data) returns (tuple(bool success, bytes returnData)[] results)",
      "function unsafeDeposit(bytes32 depositor, bytes32 recipient, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, bytes32 exclusiveRelayer, uint256 depositNonce, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityParameter, bytes message) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function withdrawalRecipient() view returns (address)",
      "function wrappedNativeToken() view returns (address)"
    ],
    "0x024F2fC31CBDD8de17194b1892c834f98Ef5169b": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x0318A37e2662507789a6E17E85A506709F89488b": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _superchainConfig, address _portal)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x07ddce60658A61dc1732Cacf2220FcE4A01C49B0": [
      "constructor()",
      "error ArrayLengthsDoNotMatch()",
      "error BlobSubmissionDataEmpty(uint256 emptyBlobIndex)",
      "error BlobSubmissionDataIsMissing()",
      "error BytesLengthNotMultipleOf32()",
      "error BytesLengthNotMultipleOfTwo(uint256 bytesLength)",
      "error DataAlreadySubmitted(bytes32 currentDataHash)",
      "error EmptyBlobDataAtIndex(uint256 index)",
      "error EmptySubmissionData()",
      "error FeePaymentFailed(address recipient)",
      "error FeeTooLow()",
      "error FinalBlobNotSubmitted(bytes32 shnarf)",
      "error FinalBlockNumberLessThanOrEqualToLastFinalizedBlock(uint256 finalBlockNumber, uint256 lastFinalizedBlock)",
      "error FinalBlockStateEqualsZeroHash()",
      "error FinalShnarfWrong(bytes32 expected, bytes32 value)",
      "error FinalizationInTheFuture(uint256 l2BlockTimestamp, uint256 currentBlockTimestamp)",
      "error FinalizationStateIncorrect(bytes32 expected, bytes32 value)",
      "error FirstByteIsNotZero()",
      "error InvalidMerkleProof()",
      "error InvalidProof()",
      "error InvalidProofOrProofVerificationRanOutOfGas(string errorReason)",
      "error InvalidProofType()",
      "error IsNotPaused(uint8 pauseType)",
      "error IsPaused(uint8 pauseType)",
      "error L1RollingHashDoesNotExistOnL1(uint256 messageNumber, bytes32 rollingHash)",
      "error L2MerkleRootAlreadyAnchored(bytes32 merkleRoot)",
      "error L2MerkleRootDoesNotExist()",
      "error LastFinalizationTimeNotLapsed()",
      "error LeafIndexOutOfBounds(uint32 leafIndex, uint32 maxAllowedIndex)",
      "error LimitIsZero()",
      "error MessageAlreadyClaimed(uint256 messageIndex)",
      "error MessageDoesNotExistOrHasAlreadyBeenClaimed(bytes32 messageHash)",
      "error MessageSendingFailed(address destination)",
      "error MissingMessageNumberForRollingHash(bytes32 rollingHash)",
      "error MissingRollingHashForMessageNumber(uint256 messageNumber)",
      "error OnlyNonFallbackOperator()",
      "error ParentBlobNotSubmitted(bytes32 shnarf)",
      "error PeriodIsZero()",
      "error PointEvaluationFailed()",
      "error PointEvaluationResponseInvalid(uint256 fieldElements, uint256 blsCurveModulus)",
      "error PrecompileReturnDataLengthWrong(uint256 expected, uint256 actual)",
      "error ProofIsEmpty()",
      "error ProofLengthDifferentThanMerkleDepth(uint256 actual, uint256 expected)",
      "error RateLimitExceeded()",
      "error ReentrantCall()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error StartingRootHashDoesNotMatch()",
      "error ValueSentTooLow()",
      "error ZeroAddressNotAllowed()",
      "error ZeroHashNotAllowed()",
      "event AmountUsedInPeriodReset(address indexed resettingAddress)",
      "event DataFinalizedV3(uint256 indexed startBlockNumber, uint256 indexed endBlockNumber, bytes32 indexed shnarf, bytes32 parentStateRootHash, bytes32 finalStateRootHash)",
      "event DataSubmittedV3(bytes32 parentShnarf, bytes32 indexed shnarf, bytes32 finalStateRootHash)",
      "event FallbackOperatorAddressSet(address indexed caller, address indexed fallbackOperator)",
      "event FallbackOperatorRoleGranted(address indexed caller, address indexed fallbackOperator)",
      "event Initialized(uint8 version)",
      "event L2MerkleRootAdded(bytes32 indexed l2MerkleRoot, uint256 indexed treeDepth)",
      "event L2MessagingBlockAnchored(uint256 indexed l2Block)",
      "event LimitAmountChanged(address indexed amountChangeBy, uint256 amount, bool amountUsedLoweredToLimit, bool usedAmountResetToZero)",
      "event LineaRollupVersionChanged(bytes8 indexed previousVersion, bytes8 indexed newVersion)",
      "event MessageClaimed(bytes32 indexed _messageHash)",
      "event MessageSent(address indexed _from, address indexed _to, uint256 _fee, uint256 _value, uint256 _nonce, bytes _calldata, bytes32 indexed _messageHash)",
      "event PauseTypeRoleSet(uint8 indexed pauseType, bytes32 indexed role)",
      "event Paused(address messageSender, uint8 indexed pauseType)",
      "event RateLimitInitialized(uint256 periodInSeconds, uint256 limitInWei, uint256 currentPeriodEnd)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RollingHashUpdated(uint256 indexed messageNumber, bytes32 indexed rollingHash, bytes32 indexed messageHash)",
      "event UnPauseTypeRoleSet(uint8 indexed unPauseType, bytes32 indexed role)",
      "event UnPaused(address messageSender, uint8 indexed pauseType)",
      "event VerifierAddressChanged(address indexed verifierAddress, uint256 indexed proofType, address indexed verifierSetBy, address oldVerifierAddress)",
      "function CONTRACT_VERSION() view returns (string)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function GENESIS_SHNARF() view returns (bytes32)",
      "function INBOX_STATUS_RECEIVED() view returns (uint8)",
      "function INBOX_STATUS_UNKNOWN() view returns (uint8)",
      "function OPERATOR_ROLE() view returns (bytes32)",
      "function OUTBOX_STATUS_RECEIVED() view returns (uint8)",
      "function OUTBOX_STATUS_SENT() view returns (uint8)",
      "function OUTBOX_STATUS_UNKNOWN() view returns (uint8)",
      "function PAUSE_ALL_ROLE() view returns (bytes32)",
      "function PAUSE_BLOB_SUBMISSION_ROLE() view returns (bytes32)",
      "function PAUSE_FINALIZATION_ROLE() view returns (bytes32)",
      "function PAUSE_L1_L2_ROLE() view returns (bytes32)",
      "function PAUSE_L2_L1_ROLE() view returns (bytes32)",
      "function RATE_LIMIT_SETTER_ROLE() view returns (bytes32)",
      "function UNPAUSE_ALL_ROLE() view returns (bytes32)",
      "function UNPAUSE_BLOB_SUBMISSION_ROLE() view returns (bytes32)",
      "function UNPAUSE_FINALIZATION_ROLE() view returns (bytes32)",
      "function UNPAUSE_L1_L2_ROLE() view returns (bytes32)",
      "function UNPAUSE_L2_L1_ROLE() view returns (bytes32)",
      "function USED_RATE_LIMIT_RESETTER_ROLE() view returns (bytes32)",
      "function VERIFIER_SETTER_ROLE() view returns (bytes32)",
      "function VERIFIER_UNSETTER_ROLE() view returns (bytes32)",
      "function blobShnarfExists(bytes32 shnarf) view returns (uint256 exists)",
      "function claimMessage(address _from, address _to, uint256 _fee, uint256 _value, address _feeRecipient, bytes _calldata, uint256 _nonce)",
      "function claimMessageWithProof(tuple(bytes32[] proof, uint256 messageNumber, uint32 leafIndex, address from, address to, uint256 fee, uint256 value, address feeRecipient, bytes32 merkleRoot, bytes data) _params)",
      "function currentFinalizedShnarf() view returns (bytes32)",
      "function currentFinalizedState() view returns (bytes32)",
      "function currentL2BlockNumber() view returns (uint256)",
      "function currentL2StoredL1MessageNumber() view returns (uint256)",
      "function currentL2StoredL1RollingHash() view returns (bytes32)",
      "function currentPeriodAmountInWei() view returns (uint256)",
      "function currentPeriodEnd() view returns (uint256)",
      "function currentTimestamp() view returns (uint256)",
      "function dataEndingBlock(bytes32 dataHash) view returns (uint256 endingBlock)",
      "function dataFinalStateRootHashes(bytes32 dataHash) view returns (bytes32 finalStateRootHash)",
      "function dataParents(bytes32 dataHash) view returns (bytes32 parentHash)",
      "function dataShnarfHashes(bytes32 dataHash) view returns (bytes32 shnarfHash)",
      "function dataStartingBlock(bytes32 dataHash) view returns (uint256 startingBlock)",
      "function fallbackOperator() view returns (address)",
      "function finalizeBlocks(bytes _aggregatedProof, uint256 _proofType, tuple(bytes32 parentStateRootHash, uint256 endBlockNumber, tuple(bytes32 parentShnarf, bytes32 snarkHash, bytes32 finalStateRootHash, bytes32 dataEvaluationPoint, bytes32 dataEvaluationClaim) shnarfData, uint256 lastFinalizedTimestamp, uint256 finalTimestamp, bytes32 lastFinalizedL1RollingHash, bytes32 l1RollingHash, uint256 lastFinalizedL1RollingHashMessageNumber, uint256 l1RollingHashMessageNumber, uint256 l2MerkleTreesDepth, bytes32[] l2MerkleRoots, bytes l2MessagingBlocksOffsets) _finalizationData)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function inboxL2L1MessageStatus(bytes32 messageHash) view returns (uint256 messageStatus)",
      "function initialize(tuple(bytes32 initialStateRootHash, uint256 initialL2BlockNumber, uint256 genesisTimestamp, address defaultVerifier, uint256 rateLimitPeriodInSeconds, uint256 rateLimitAmountInWei, tuple(address addressWithRole, bytes32 role)[] roleAddresses, tuple(uint8 pauseType, bytes32 role)[] pauseTypeRoles, tuple(uint8 pauseType, bytes32 role)[] unpauseTypeRoles, address fallbackOperator, address defaultAdmin) _initializationData)",
      "function isMessageClaimed(uint256 _messageNumber) view returns (bool isClaimed)",
      "function isPaused(uint8 _pauseType) view returns (bool pauseTypeIsPaused)",
      "function l2MerkleRootsDepths(bytes32 merkleRoot) view returns (uint256 treeDepth)",
      "function limitInWei() view returns (uint256)",
      "function nextMessageNumber() view returns (uint256)",
      "function outboxL1L2MessageStatus(bytes32 messageHash) view returns (uint256 messageStatus)",
      "function pauseByType(uint8 _pauseType)",
      "function pauseTypeStatuses(bytes32 pauseType) view returns (bool pauseStatus)",
      "function periodInSeconds() view returns (uint256)",
      "function reinitializeLineaRollupV6(tuple(address addressWithRole, bytes32 role)[] _roleAddresses, tuple(uint8 pauseType, bytes32 role)[] _pauseTypeRoles, tuple(uint8 pauseType, bytes32 role)[] _unpauseTypeRoles, address _fallbackOperator)",
      "function renounceRole(bytes32 _role, address _account)",
      "function resetAmountUsedInPeriod()",
      "function resetRateLimitAmount(uint256 _amount)",
      "function revokeRole(bytes32 role, address account)",
      "function rollingHashes(uint256 messageNumber) view returns (bytes32 rollingHash)",
      "function sendMessage(address _to, uint256 _fee, bytes _calldata) payable",
      "function sender() view returns (address originalSender)",
      "function setFallbackOperator(uint256 _messageNumber, bytes32 _rollingHash, uint256 _lastFinalizedTimestamp)",
      "function setVerifierAddress(address _newVerifierAddress, uint256 _proofType)",
      "function stateRootHashes(uint256 blockNumber) view returns (bytes32 stateRootHash)",
      "function submitBlobs(tuple(uint256 dataEvaluationClaim, bytes kzgCommitment, bytes kzgProof, bytes32 finalStateRootHash, bytes32 snarkHash)[] _blobSubmissions, bytes32 _parentShnarf, bytes32 _finalBlobShnarf)",
      "function submitDataAsCalldata(tuple(bytes32 finalStateRootHash, bytes32 snarkHash, bytes compressedData) _submission, bytes32 _parentShnarf, bytes32 _expectedShnarf)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function systemMigrationBlock() view returns (uint256)",
      "function unPauseByType(uint8 _pauseType)",
      "function unsetVerifierAddress(uint256 _proofType)",
      "function verifiers(uint256 proofType) view returns (address verifierAddress)"
    ],
    "0x0c9d064523177dBB55CFE52b9D0c485FBFc35FD2": [
      "constructor(address _l1Weth, address _l1Usdc, address _crossDomainMessenger, address _l1StandardBridge, address _l1USDCBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_OP_USDC_BRIDGE() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x0d57392895Db5aF3280e9223323e20F3951E81B1": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function withdraw(address token, uint256 amount)"
    ],
    "0x0d7E906BD9cAFa154b048cFa766Cc1E54E39AF9B": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x0eC393209674090368C592A591B25811e490BF36": [
      "error AmountTooBig(uint256 amount, uint256 limit)",
      "error NoBurnCapabilities(address addr)",
      "error NotFromRemoteUSDCBridge(address sender, address remoteUSDCBridge)",
      "error NotMessageService(address addr, address messageService)",
      "error RemoteUSDCBridgeAlreadySet(address remoteUSDCBridge)",
      "error RemoteUSDCBridgeNotSet()",
      "error SameMessageServiceAddr(address messageService)",
      "error SenderBalanceTooLow(uint256 amount, uint256 balance)",
      "error ZeroAddressNotAllowed(address addr)",
      "error ZeroAmountNotAllowed(uint256 amount)",
      "event Deposited(address indexed depositor, uint256 amount, address indexed to)",
      "event Initialized(uint8 version)",
      "event MessageServiceUpdated(address indexed oldAddress, address indexed newAddress)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event ReceivedFromOtherLayer(address indexed recipient, uint256 indexed amount)",
      "event RemoteUSDCBridgeSet(address indexed newRemoteUSDCBridge)",
      "event Unpaused(address account)",
      "function acceptOwnership()",
      "function balance() view returns (uint256)",
      "function changeMessageService(address newMessageService)",
      "function deposit(uint256 amount) payable",
      "function depositTo(uint256 amount, address to) payable",
      "function initialize(address _messageService, address _usdc)",
      "function messageService() view returns (address)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingOwner() view returns (address)",
      "function receiveFromOtherLayer(address recipient, uint256 amount)",
      "function remoteUSDCBridge() view returns (address)",
      "function renounceOwnership()",
      "function rescueTransfer(address to, uint256 amount)",
      "function setRemoteUSDCBridge(address _remoteUSDCBridge)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function usdc() view returns (address)"
    ],
    "0x100EDfCf3af2B4625Fca4EaF6C533703e71F7210": [
      "constructor(address _l1ArbitrumInbox, address _l1ERC20GatewayRouter, address _l2RefundL2Address, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_DAI() view returns (address)",
      "function L1_ERC20_GATEWAY_ROUTER() view returns (address)",
      "function L1_INBOX() view returns (address)",
      "function L2_CALL_VALUE() view returns (uint256)",
      "function L2_GAS_PRICE() view returns (uint256)",
      "function L2_MAX_SUBMISSION_COST() view returns (uint256)",
      "function L2_REFUND_L2_ADDRESS() view returns (address)",
      "function RELAY_MESSAGE_L2_GAS_LIMIT() view returns (uint32)",
      "function RELAY_TOKENS_L2_GAS_LIMIT() view returns (uint32)",
      "function cctpTokenMessenger() view returns (address)",
      "function getL1CallValue(uint32 l2GasLimit) pure returns (uint256)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x10E6593CDda8c58a1d0f14C5164B376352a55f2F": [
      "constructor(address _l1Token, address _l2DAITokenBridge, address _l2Token, address _l1messenger, address _escrow)",
      "event Closed()",
      "event Deny(address indexed usr)",
      "event ERC20DepositInitiated(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _amount, bytes _data)",
      "event ERC20WithdrawalFinalized(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _amount, bytes _data)",
      "event Rely(address indexed usr)",
      "function close()",
      "function deny(address usr)",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _l2Gas, bytes _data)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _l2Gas, bytes _data)",
      "function escrow() view returns (address)",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _data)",
      "function isOpen() view returns (uint256)",
      "function l1Token() view returns (address)",
      "function l2DAITokenBridge() view returns (address)",
      "function l2Token() view returns (address)",
      "function messenger() view returns (address)",
      "function rely(address usr)",
      "function wards(address) view returns (uint256)"
    ],
    "0x137CC585F607EDeBBc3CA6360AffCFeab507B374": [
      "constructor(address _messenger, address _scrollChain, address _enforcedTxGateway)",
      "error ErrorNotWhitelistedSender()",
      "error ErrorZeroAddress()",
      "event DequeueTransaction(uint256 startIndex, uint256 count, uint256 skippedBitmap)",
      "event DropTransaction(uint256 index)",
      "event FinalizedDequeuedTransaction(uint256 finalizedIndex)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QueueTransaction(address indexed sender, address indexed target, uint256 value, uint64 queueIndex, uint256 gasLimit, bytes data)",
      "event ResetDequeuedTransaction(uint256 startIndex)",
      "event UpdateGasOracle(address indexed _oldGasOracle, address indexed _newGasOracle)",
      "event UpdateL2BaseFee(uint256 oldL2BaseFee, uint256 newL2BaseFee)",
      "event UpdateMaxGasLimit(uint256 _oldMaxGasLimit, uint256 _newMaxGasLimit)",
      "event UpdateWhitelistChecker(address indexed _oldWhitelistChecker, address indexed _newWhitelistChecker)",
      "function appendCrossDomainMessage(address _target, uint256 _gasLimit, bytes _data)",
      "function appendEnforcedTransaction(address _sender, address _target, uint256 _value, uint256 _gasLimit, bytes _data)",
      "function calculateIntrinsicGasFee(bytes _calldata) pure returns (uint256)",
      "function computeTransactionHash(address _sender, uint256 _queueIndex, uint256 _value, address _target, uint256 _gasLimit, bytes _data) pure returns (bytes32)",
      "function dropCrossDomainMessage(uint256 _index)",
      "function enforcedTxGateway() view returns (address)",
      "function estimateCrossDomainMessageFee(uint256 _gasLimit) view returns (uint256)",
      "function finalizePoppedCrossDomainMessage(uint256 _newFinalizedQueueIndexPlusOne)",
      "function gasOracle() view returns (address)",
      "function getCrossDomainMessage(uint256 _queueIndex) view returns (bytes32)",
      "function initialize(address _messenger, address _scrollChain, address _enforcedTxGateway, address _gasOracle, uint256 _maxGasLimit)",
      "function initializeV2()",
      "function initializeV3()",
      "function isMessageDropped(uint256 _queueIndex) view returns (bool)",
      "function isMessageSkipped(uint256 _queueIndex) view returns (bool)",
      "function l2BaseFee() view returns (uint256)",
      "function maxGasLimit() view returns (uint256)",
      "function messageQueue(uint256) view returns (bytes32)",
      "function messenger() view returns (address)",
      "function nextCrossDomainMessageIndex() view returns (uint256)",
      "function nextUnfinalizedQueueIndex() view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingQueueIndex() view returns (uint256)",
      "function popCrossDomainMessage(uint256 _startIndex, uint256 _count, uint256 _skippedBitmap)",
      "function renounceOwnership()",
      "function resetPoppedCrossDomainMessage(uint256 _startIndex)",
      "function scrollChain() view returns (address)",
      "function setL2BaseFee(uint256 _newL2BaseFee)",
      "function transferOwnership(address newOwner)",
      "function updateGasOracle(address _newGasOracle)",
      "function updateMaxGasLimit(uint256 _newMaxGasLimit)",
      "function updateWhitelistChecker(address _newWhitelistChecker)",
      "function whitelistChecker() view returns (address)"
    ],
    "0x153A69e4bb6fEDBbAaF463CB982416316c84B2dB": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x17AaA27ecEc9a0c530e6Dbd086b6049DCF6D9382": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _superchainConfig, address _portal)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x188F8C95B7cfB7993B53a4F643efa687916f73fA": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1": [
      "constructor(address _libAddressManager, string _implementationName)"
    ],
    "0x2658723Bf70c7667De6B25F99fcce13A16D25d08": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x2B6A2F8880220a66DfB9059FCB76F7dB54104a34": [
      "constructor()",
      "error AlreadyBridgedToken(address token)",
      "error AlreadyBrigedToNativeTokenSet(address token)",
      "error ArrayLengthsDoNotMatch()",
      "error CallerIsNotMessageService()",
      "error DecimalsAreUnknown(address token)",
      "error InvalidPermitData(bytes4 permitData, bytes4 permitSelector)",
      "error IsNotPaused(uint8 pauseType)",
      "error IsPaused(uint8 pauseType)",
      "error NativeToBridgedTokenAlreadySet(address token)",
      "error NotReserved(address token)",
      "error PermitNotAllowingBridge(address spender)",
      "error PermitNotFromSender(address owner)",
      "error RemoteTokenBridgeAlreadySet(address remoteTokenBridge)",
      "error ReservedToken(address token)",
      "error SenderNotAuthorized()",
      "error StatusAddressNotAllowed(address token)",
      "error TokenListEmpty()",
      "error TokenNotDeployed(address token)",
      "error ZeroAddressNotAllowed()",
      "error ZeroAmountNotAllowed(uint256 amount)",
      "error ZeroHashNotAllowed()",
      "event BridgingFinalized(address indexed nativeToken, address indexed bridgedToken, uint256 indexed amount, address recipient)",
      "event BridgingFinalizedV2(address indexed nativeToken, address indexed bridgedToken, uint256 amount, address indexed recipient)",
      "event BridgingInitiated(address indexed sender, address recipient, address indexed token, uint256 indexed amount)",
      "event BridgingInitiatedV2(address indexed sender, address indexed recipient, address indexed token, uint256 amount)",
      "event CustomContractSet(address indexed nativeToken, address indexed customContract, address indexed setBy)",
      "event DeploymentConfirmed(address[] tokens, address indexed confirmedBy)",
      "event Initialized(uint8 version)",
      "event MessageServiceUpdated(address indexed newMessageService, address indexed oldMessageService, address indexed setBy)",
      "event NewToken(address indexed token)",
      "event NewTokenDeployed(address indexed bridgedToken, address indexed nativeToken)",
      "event PauseTypeRoleSet(uint8 indexed pauseType, bytes32 indexed role)",
      "event Paused(address messageSender, uint8 indexed pauseType)",
      "event RemoteSenderSet(address indexed remoteSender, address indexed setter)",
      "event RemoteTokenBridgeSet(address indexed remoteTokenBridge, address indexed setBy)",
      "event ReservationRemoved(address indexed token)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TokenDeployed(address indexed token)",
      "event TokenReserved(address indexed token)",
      "event UnPauseTypeRoleSet(uint8 indexed unPauseType, bytes32 indexed role)",
      "event UnPaused(address messageSender, uint8 indexed pauseType)",
      "function CONTRACT_VERSION() view returns (string)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function PAUSE_ALL_ROLE() view returns (bytes32)",
      "function PAUSE_COMPLETE_TOKEN_BRIDGING_ROLE() view returns (bytes32)",
      "function PAUSE_INITIATE_TOKEN_BRIDGING_ROLE() view returns (bytes32)",
      "function REMOVE_RESERVED_TOKEN_ROLE() view returns (bytes32)",
      "function SET_CUSTOM_CONTRACT_ROLE() view returns (bytes32)",
      "function SET_MESSAGE_SERVICE_ROLE() view returns (bytes32)",
      "function SET_REMOTE_TOKENBRIDGE_ROLE() view returns (bytes32)",
      "function SET_RESERVED_TOKEN_ROLE() view returns (bytes32)",
      "function UNPAUSE_ALL_ROLE() view returns (bytes32)",
      "function UNPAUSE_COMPLETE_TOKEN_BRIDGING_ROLE() view returns (bytes32)",
      "function UNPAUSE_INITIATE_TOKEN_BRIDGING_ROLE() view returns (bytes32)",
      "function bridgeToken(address _token, uint256 _amount, address _recipient) payable",
      "function bridgeTokenWithPermit(address _token, uint256 _amount, address _recipient, bytes _permitData) payable",
      "function bridgedToNativeToken(address bridged) view returns (address native)",
      "function completeBridging(address _nativeToken, uint256 _amount, address _recipient, uint256 _chainId, bytes _tokenMetadata)",
      "function confirmDeployment(address[] _tokens) payable",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(tuple(address defaultAdmin, address messageService, address tokenBeacon, uint256 sourceChainId, uint256 targetChainId, address[] reservedTokens, tuple(address addressWithRole, bytes32 role)[] roleAddresses, tuple(uint8 pauseType, bytes32 role)[] pauseTypeRoles, tuple(uint8 pauseType, bytes32 role)[] unpauseTypeRoles) _initializationData)",
      "function isPaused(uint8 _pauseType) view returns (bool pauseTypeIsPaused)",
      "function messageService() view returns (address)",
      "function nativeToBridgedToken(uint256 chainId, address native) view returns (address bridged)",
      "function pauseByType(uint8 _pauseType)",
      "function pauseTypeStatuses(bytes32 pauseType) view returns (bool pauseStatus)",
      "function reinitializePauseTypesAndPermissions(address _defaultAdmin, tuple(address addressWithRole, bytes32 role)[] _roleAddresses, tuple(uint8 pauseType, bytes32 role)[] _pauseTypeRoles, tuple(uint8 pauseType, bytes32 role)[] _unpauseTypeRoles)",
      "function remoteSender() view returns (address)",
      "function removeReserved(address _token)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setCustomContract(address _nativeToken, address _targetContract)",
      "function setDeployed(address[] _nativeTokens)",
      "function setMessageService(address _messageService)",
      "function setRemoteTokenBridge(address _remoteTokenBridge)",
      "function setReserved(address _token)",
      "function sourceChainId() view returns (uint256)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function targetChainId() view returns (uint256)",
      "function tokenBeacon() view returns (address)",
      "function unPauseByType(uint8 _pauseType)"
    ],
    "0x303a465B659cBB0ab36eE643eA362c509EEb5213": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x3154Cf16ccdb4C6d922629664174b904d80F2C35": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x3155A91D2EBAe69443B45556e1DE5ed8eB79C90D": [
      "constructor(uint256 _chainId, address _bridgeHub, address _l1Weth, address _l2RefundAddress, uint256 _l2GasLimit, uint256 _l1GasToL2GasPerPubDataLimit, uint256 _maxTxGasprice)",
      "error ETHGasTokenRequired()",
      "error TransactionFeeTooHigh()",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "event ZkStackMessageRelayed(bytes32 indexed canonicalTxHash)",
      "function BRIDGE_HUB() view returns (address)",
      "function CHAIN_ID() view returns (uint256)",
      "function L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT() view returns (uint256)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint256)",
      "function L2_REFUND_ADDRESS() view returns (address)",
      "function SHARED_BRIDGE() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x31B72D76FB666844C41EdF08dF0254875Dbb7edB": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0x31fAAAB44e74eB408d1FC69A14806B4b9cA09da2": [
      "constructor(uint256 _maxDataSize)",
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error GasLimitTooLarge()",
      "error InsufficientSubmissionCost(uint256 expected, uint256 actual)",
      "error InsufficientValue(uint256 expected, uint256 actual)",
      "error L1Forked()",
      "error NotAllowedOrigin(address origin)",
      "error NotOrigin()",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error RetryableData(address from, address to, uint256 l2CallValue, uint256 deposit, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data)",
      "event AllowListAddressSet(address indexed user, bool val)",
      "event AllowListEnabledUpdated(bool isEnabled)",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "function allowListEnabled() view returns (bool)",
      "function bridge() view returns (address)",
      "function calculateRetryableSubmissionFee(uint256, uint256) pure returns (uint256)",
      "function createRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, uint256 tokenTotalFeeAmount, bytes data) returns (uint256)",
      "function depositERC20(uint256 amount) returns (uint256)",
      "function getProxyAdmin() view returns (address)",
      "function initialize(address _bridge, address _sequencerInbox)",
      "function isAllowed(address) view returns (bool)",
      "function maxDataSize() view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function sendContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, uint256 value, bytes data) returns (uint256)",
      "function sendL2Message(bytes messageData) returns (uint256)",
      "function sendL2MessageFromOrigin(bytes messageData) returns (uint256)",
      "function sendUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sequencerInbox() view returns (address)",
      "function setAllowList(address[] user, bool[] val)",
      "function setAllowListEnabled(bool _allowListEnabled)",
      "function unpause()",
      "function unsafeCreateRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, uint256 tokenTotalFeeAmount, bytes data) returns (uint256)"
    ],
    "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function l1StandardBridge() view returns (address)",
      "function l1Weth() view returns (address)",
      "function l2GasLimit() view returns (uint32)",
      "function messenger() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x39Ea01a0298C315d149a490E34B59Dbf2EC7e48F": [
      "constructor(address _owner, address _resolver)",
      "event CacheUpdated(bytes32 name, address destination)",
      "event DepositInitiated(address indexed _from, address _to, uint256 _amount)",
      "event ExportedVestingEntries(address indexed account, uint256 escrowedAccountBalance, tuple(uint64 endTime, uint256 escrowAmount)[] vestingEntries)",
      "event FeePeriodClosed(uint256 snxBackedDebt, uint256 totalDebtShares)",
      "event FinalizeSynthTransfer(bytes32 indexed currencyKey, address indexed destination, uint256 amount)",
      "event InitiateSynthTransfer(bytes32 indexed currencyKey, address indexed destination, uint256 amount)",
      "event InitiationResumed()",
      "event InitiationSuspended()",
      "event OwnerChanged(address oldOwner, address newOwner)",
      "event OwnerNominated(address newOwner)",
      "event RewardDepositInitiated(address indexed account, uint256 amount)",
      "event WithdrawalFinalized(address indexed _to, uint256 _amount)",
      "function CONTRACT_NAME() pure returns (bytes32)",
      "function acceptOwnership()",
      "function closeFeePeriod(uint256 snxBackedAmount, uint256 totalDebtShares)",
      "function deposit(uint256 amount)",
      "function depositAndMigrateEscrow(uint256 depositAmount, uint256[][] entryIDs)",
      "function depositReward(uint256 amount)",
      "function depositTo(address to, uint256 amount)",
      "function finalizeSynthTransfer(bytes32 currencyKey, address destination, uint256 amount)",
      "function finalizeWithdrawal(address to, uint256 amount)",
      "function forwardTokensToEscrow(address token)",
      "function initiateSynthTransfer(bytes32 currencyKey, address destination, uint256 amount)",
      "function initiationActive() view returns (bool)",
      "function isResolverCached() view returns (bool)",
      "function migrateEscrow(uint256[][] entryIDs)",
      "function nominateNewOwner(address _owner)",
      "function nominatedOwner() view returns (address)",
      "function notifyRewardAmount(uint256 amount)",
      "function owner() view returns (address)",
      "function rebuildCache()",
      "function resolver() view returns (address)",
      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
      "function resumeInitiation()",
      "function suspendInitiation()",
      "function synthTransferReceived() view returns (uint256)",
      "function synthTransferSent() view returns (uint256)"
    ],
    "0x3a05E5d33d7Ab3864D53aaEc93c8301C1Fa49115": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x3B03509645713718B78951126E0A6de6f10043f5": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event UpdatedGlobalConfig(bytes32 indexed key, string value)",
      "event UpdatedTokenConfig(address indexed key, string value)",
      "function globalConfig(bytes32) view returns (string)",
      "function l1TokenConfig(address) view returns (string)",
      "function multicall(bytes[] data) payable returns (bytes[] results)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function updateGlobalConfig(bytes32 key, string value)",
      "function updateTokenConfig(address l1Token, string value)"
    ],
    "0x3b48597212f2622511585914CC4D4152c9B1B077": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _superchainConfig, address _portal)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x3e2Ea9B92B7E48A52296fD261dc26fd995284631": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x401F6c983eA34274ec46f84D70b31C151321188b": [
      "function updateImplementation(address _newProxyTo)",
      "function childChain() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function governance() view returns (address)",
      "function implementation() view returns (address)",
      "function renounceOwnership()",
      "function registry() view returns (address)",
      "function owner() view returns (address)",
      "function isOwner() view returns (bool)",
      "function rootChain() view returns (address)",
      "function unlock()",
      "function deposits(uint256) view returns (bytes32 depositHash, uint256 createdAt)",
      "function stateSender() view returns (address)",
      "function locked() view returns (bool)",
      "function maxErc20Deposit() view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function lock()",
      "constructor(address _proxyTo, address _registry, address _rootChain, address _governance)",
      "event NewDepositBlock(address indexed owner, address indexed token, uint256 amountOrNFTId, uint256 depositBlockId)",
      "event MaxErc20DepositUpdate(uint256 indexed oldLimit, uint256 indexed newLimit)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "event OwnerUpdate(address _prevOwner, address _newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)"
    ],
    "0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf": [
      "constructor(address _proxyTo)",
      "event ProxyOwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function proxyOwner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferProxyOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x40f941E48A552bF496B154Af6bf55725f18D77c3": [
      "event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)",
      "function getImplementationAddress(bytes32 interfaceName) view returns (address implementationAddress)",
      "function interfacesImplemented(bytes32) view returns (address)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0x43506849D7C04F9138D1A2050bbF3A0c054402dd": [
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event AuthorizationCanceled(address indexed authorizer, bytes32 indexed nonce)",
      "event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce)",
      "event Blacklisted(address indexed _account)",
      "event BlacklisterChanged(address indexed newBlacklister)",
      "event Burn(address indexed burner, uint256 amount)",
      "event MasterMinterChanged(address indexed newMasterMinter)",
      "event Mint(address indexed minter, address indexed to, uint256 amount)",
      "event MinterConfigured(address indexed minter, uint256 minterAllowedAmount)",
      "event MinterRemoved(address indexed oldMinter)",
      "event OwnershipTransferred(address previousOwner, address newOwner)",
      "event Pause()",
      "event PauserChanged(address indexed newAddress)",
      "event RescuerChanged(address indexed newRescuer)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event UnBlacklisted(address indexed _account)",
      "event Unpause()",
      "function CANCEL_AUTHORIZATION_TYPEHASH() view returns (bytes32)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function PERMIT_TYPEHASH() view returns (bytes32)",
      "function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() view returns (bytes32)",
      "function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function authorizationState(address authorizer, bytes32 nonce) view returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function blacklist(address _account)",
      "function blacklister() view returns (address)",
      "function burn(uint256 _amount)",
      "function cancelAuthorization(address authorizer, bytes32 nonce, uint8 v, bytes32 r, bytes32 s)",
      "function cancelAuthorization(address authorizer, bytes32 nonce, bytes signature)",
      "function configureMinter(address minter, uint256 minterAllowedAmount) returns (bool)",
      "function currency() view returns (string)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 decrement) returns (bool)",
      "function increaseAllowance(address spender, uint256 increment) returns (bool)",
      "function initialize(string tokenName, string tokenSymbol, string tokenCurrency, uint8 tokenDecimals, address newMasterMinter, address newPauser, address newBlacklister, address newOwner)",
      "function initializeV2(string newName)",
      "function initializeV2_1(address lostAndFound)",
      "function initializeV2_2(address[] accountsToBlacklist, string newSymbol)",
      "function isBlacklisted(address _account) view returns (bool)",
      "function isMinter(address account) view returns (bool)",
      "function masterMinter() view returns (address)",
      "function mint(address _to, uint256 _amount) returns (bool)",
      "function minterAllowance(address minter) view returns (uint256)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pauser() view returns (address)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, bytes signature)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, bytes signature)",
      "function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s)",
      "function removeMinter(address minter) returns (bool)",
      "function rescueERC20(address tokenContract, address to, uint256 amount)",
      "function rescuer() view returns (address)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, bytes signature)",
      "function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s)",
      "function unBlacklist(address _account)",
      "function unpause()",
      "function updateBlacklister(address _newBlacklister)",
      "function updateMasterMinter(address _newMasterMinter)",
      "function updatePauser(address _newPauser)",
      "function updateRescuer(address newRescuer)",
      "function version() pure returns (string)"
    ],
    "0x470458C91978D2d929704489Ad730DC3E3001113": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x48d990AbDA20afa1fD1da713AbC041B60a922c65": [
      "constructor(address _destination, address _l1PolygonRegistry, address _l1Weth, address _l2WrappedMatic, uint256 _l1ChainId, uint256 _l2ChainId)",
      "function callExit(bytes data)",
      "function destination() view returns (address)",
      "function l1ChainId() view returns (uint256)",
      "function l1PolygonRegistry() view returns (address)",
      "function l1Weth() view returns (address)",
      "function l2ChainId() view returns (uint256)",
      "function l2WrappedMatic() view returns (address)",
      "function maticToken() view returns (address)",
      "function retrieve(address token)",
      "function send(address token, uint256 amount)"
    ],
    "0x49b20cBfA1d582475b2466A784B91dEe4549C737": [
      "constructor()",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger, address _superchainConfig)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x504A330327A089d8364C4ab3811Ee26976d388ce": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x52595021fA01B3E14EC6C88953AFc8E35dFf423c": [
      "event DefaultGatewayUpdated(address newDefaultGateway)",
      "event GatewaySet(address indexed l1Token, address indexed gateway)",
      "event TransferRouted(address indexed token, address indexed _userFrom, address indexed _userTo, address gateway)",
      "event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)",
      "event WhitelistSourceUpdated(address newSource)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function counterpartGateway() view returns (address)",
      "function defaultGateway() view returns (address)",
      "function finalizeInboundTransfer(address, address, address, uint256, bytes) payable",
      "function getGateway(address _token) view returns (address gateway)",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes)",
      "function inbox() view returns (address)",
      "function initialize(address _owner, address _defaultGateway, address, address _counterpartGateway, address _inbox)",
      "function l1TokenToGateway(address) view returns (address)",
      "function outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes)",
      "function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes)",
      "function owner() view returns (address)",
      "function postUpgradeInit()",
      "function router() view returns (address)",
      "function setDefaultGateway(address newL1DefaultGateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost) payable returns (uint256)",
      "function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress) payable returns (uint256)",
      "function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost) payable returns (uint256)",
      "function setGateways(address[] _token, address[] _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost) payable returns (uint256)",
      "function setOwner(address newOwner)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateWhitelistSource(address newSource)",
      "function whitelist() view returns (address)"
    ],
    "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084": [
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x56D8EC76a421063e1907503aDd3794c395256AEb": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x592C1299e0F8331D81A28C0FC7352Da24eDB444a": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0x5BFC7acc740D2E19c290167052F69947e19475F3": [
      "constructor()",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger, address _superchainConfig)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5": [
      "constructor(address _logic, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0x5Eb02901135865aF8Da6752aF92fbAe62258520F": [
      "constructor()",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger, address _superchainConfig)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function setSuperchainConfig(address _superchainConfig)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "0x5Ff3feD7aad041ACe66E4ecDd7AfbCC43b6446b0": [
      "event DefaultGatewayUpdated(address newDefaultGateway)",
      "event GatewaySet(address indexed l1Token, address indexed gateway)",
      "event TransferRouted(address indexed token, address indexed _userFrom, address indexed _userTo, address gateway)",
      "event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)",
      "event WhitelistSourceUpdated(address newSource)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function counterpartGateway() view returns (address)",
      "function defaultGateway() view returns (address)",
      "function finalizeInboundTransfer(address, address, address, uint256, bytes) payable",
      "function getGateway(address _token) view returns (address gateway)",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes)",
      "function inbox() view returns (address)",
      "function initialize(address _owner, address _defaultGateway, address, address _counterpartGateway, address _inbox)",
      "function l1TokenToGateway(address) view returns (address)",
      "function outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes)",
      "function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes)",
      "function owner() view returns (address)",
      "function postUpgradeInit()",
      "function router() view returns (address)",
      "function setDefaultGateway(address, uint256, uint256, uint256) payable returns (uint256)",
      "function setDefaultGateway(address newL1DefaultGateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns (uint256)",
      "function setGateway(address, uint256, uint256, uint256, address) payable returns (uint256)",
      "function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress, uint256 _feeAmount) returns (uint256)",
      "function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns (uint256)",
      "function setGateway(address, uint256, uint256, uint256) payable returns (uint256)",
      "function setGateways(address[] _token, address[] _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, uint256 _feeAmount) returns (uint256)",
      "function setGateways(address[], address[], uint256, uint256, uint256) payable returns (uint256)",
      "function setOwner(address newOwner)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateWhitelistSource(address newSource)",
      "function whitelist() view returns (address)"
    ],
    "0x62d45660505D7457e3ce9Cd87C0a0cf890fB38ff": [
      "constructor(address _usdc, address _messenger, address _linkedAdapter)",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error IOpUSDCBridgeAdapter_BlacklistedAddress()",
      "error IOpUSDCBridgeAdapter_BurnAmountNotSet()",
      "error IOpUSDCBridgeAdapter_ForbiddenTransaction()",
      "error IOpUSDCBridgeAdapter_InvalidAddress()",
      "error IOpUSDCBridgeAdapter_InvalidCaller()",
      "error IOpUSDCBridgeAdapter_InvalidNonce()",
      "error IOpUSDCBridgeAdapter_InvalidSender()",
      "error IOpUSDCBridgeAdapter_InvalidSignature()",
      "error IOpUSDCBridgeAdapter_InvalidTransaction()",
      "error IOpUSDCBridgeAdapter_MessageExpired()",
      "error IOpUSDCBridgeAdapter_MessagingDisabled()",
      "error IOpUSDCBridgeAdapter_MessagingEnabled()",
      "error IOpUSDCBridgeAdapter_NotMigrated()",
      "error IOpUSDCBridgeAdapter_NotUpgrading()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error SafeERC20FailedOperation(address token)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event BurnAmountSet(uint256 _burnAmount)",
      "event EIP712DomainChanged()",
      "event Initialized(uint64 version)",
      "event LockedFundsWithdrawn(address indexed _user, uint256 _amountWithdrawn)",
      "event MessageFailed(address indexed _spender, address indexed _user, uint256 _amount, address indexed _messenger)",
      "event MessageReceived(address indexed _spender, address indexed _user, uint256 _amount, address indexed _messenger)",
      "event MessageSent(address indexed _user, address indexed _to, uint256 _amount, address indexed _messenger, uint32 _minGasLimit)",
      "event MessagingResumed(address _messenger)",
      "event MessagingStopped(address _messenger)",
      "event MigratingToNative(address _messenger, address _caller)",
      "event MigrationComplete(uint256 _burnedAmount)",
      "event NonceCanceled(address _caller, uint256 _nonce)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function BRIDGE_MESSAGE_TYPEHASH() view returns (bytes32)",
      "function LINKED_ADAPTER() view returns (address)",
      "function MESSENGER() view returns (address)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function USDC() view returns (address)",
      "function attemptTransfer(address _to, uint256 _amount)",
      "function burnAmount() view returns (uint256)",
      "function burnCaller() view returns (address)",
      "function burnLockedUSDC()",
      "function cancelSignature(uint256 _nonce)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function initialize(address _owner)",
      "function lockedFundsDetails(address _spender, address _user) view returns (uint256 _lockedAmount)",
      "function messengerStatus() view returns (uint8)",
      "function migrateToNative(address _roleCaller, address _burnCaller, uint32 _minGasLimitReceiveOnL2, uint32 _minGasLimitSetBurnAmount)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function receiveMessage(address _user, address _spender, uint256 _amount)",
      "function receiveWithdrawLockedFundsPostMigration(address _spender, uint256 _amount)",
      "function renounceOwnership()",
      "function resumeMessaging(uint32 _minGasLimit)",
      "function sendMessage(address _signer, address _to, uint256 _amount, bytes _signature, uint256 _nonce, uint256 _deadline, uint32 _minGasLimit)",
      "function sendMessage(address _to, uint256 _amount, uint32 _minGasLimit)",
      "function setBurnAmount(uint256 _amount)",
      "function stopMessaging(uint32 _minGasLimit)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function userNonces(address _user, uint256 _nonce) view returns (bool _used)",
      "function withdrawLockedFunds(address _spender, address _user)"
    ],
    "0x639f13D5f30B47c792b6851238c05D0b623C77DE": [
      "constructor()",
      "event MetaTransactionExecuted(address indexed userAddress, address indexed relayerAddress, bytes functionSignature)",
      "event PredicateRegistered(bytes32 indexed tokenType, address indexed predicateAddress)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TokenMapped(address indexed rootToken, address indexed childToken, bytes32 indexed tokenType)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DEPOSIT() view returns (bytes32)",
      "function ERC712_VERSION() view returns (string)",
      "function ETHER_ADDRESS() view returns (address)",
      "function MAPPER_ROLE() view returns (bytes32)",
      "function MAP_TOKEN() view returns (bytes32)",
      "function checkpointManagerAddress() view returns (address)",
      "function childChainManagerAddress() view returns (address)",
      "function childToRootToken(address) view returns (address)",
      "function cleanMapToken(address rootToken, address childToken)",
      "function depositEtherFor(address user) payable",
      "function depositFor(address user, address rootToken, bytes depositData)",
      "function executeMetaTransaction(address userAddress, bytes functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) payable returns (bytes)",
      "function exit(bytes inputData)",
      "function getChainId() pure returns (uint256)",
      "function getDomainSeperator() view returns (bytes32)",
      "function getNonce(address user) view returns (uint256 nonce)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _owner)",
      "function initializeEIP712()",
      "function mapToken(address rootToken, address childToken, bytes32 tokenType)",
      "function processedExits(bytes32) view returns (bool)",
      "function registerPredicate(bytes32 tokenType, address predicateAddress)",
      "function remapToken(address rootToken, address childToken, bytes32 tokenType)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function rootToChildToken(address) view returns (address)",
      "function setCheckpointManager(address newCheckpointManager)",
      "function setChildChainManagerAddress(address newChildChainManager)",
      "function setStateSender(address newStateSender)",
      "function setupContractId()",
      "function stateSenderAddress() view returns (address)",
      "function tokenToType(address) view returns (bytes32)",
      "function typeToPredicate(bytes32) view returns (address)"
    ],
    "0x64B5a5Ed26DCb17370Ff4d33a8D503f0fbD06CfF": [
      "constructor()",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger, address _superchainConfig)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x697402166Fbf2F22E970df8a6486Ef171dbfc524": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x69d3Cf86B2Bf1a9e99875B7e2D9B6a84426c171f": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0x6B175474E89094C44Da98b954EedeAC495271d0F": [
      "constructor(uint256 chainId_)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event LogNote(bytes4 indexed sig, address indexed usr, bytes32 indexed arg1, bytes32 indexed arg2, bytes data) anonymous",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function PERMIT_TYPEHASH() view returns (bytes32)",
      "function allowance(address, address) view returns (uint256)",
      "function approve(address usr, uint256 wad) returns (bool)",
      "function balanceOf(address) view returns (uint256)",
      "function burn(address usr, uint256 wad)",
      "function decimals() view returns (uint8)",
      "function deny(address guy)",
      "function mint(address usr, uint256 wad)",
      "function move(address src, address dst, uint256 wad)",
      "function name() view returns (string)",
      "function nonces(address) view returns (uint256)",
      "function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)",
      "function pull(address usr, uint256 wad)",
      "function push(address usr, uint256 wad)",
      "function rely(address guy)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
      "function version() view returns (string)",
      "function wards(address) view returns (uint256)"
    ],
    "0x6D4528d192dB72E282265D6092F4B872f9Dff69e": [
      "constructor(address _libAddressManager, string _implementationName)"
    ],
    "0x6F4083304C2cA99B077ACE06a5DcF670615915Af": [
      "constructor(address _l1ArbitrumInbox, address _l1ERC20GatewayRouter, address _l2RefundL2Address, address _l1Usdc, address _cctpTokenMessenger, uint32 _cctpDomainId, uint8 _nativeTokenDecimals, address _customGasTokenFunder, uint256 _l2MaxSubmissionCost, uint256 _l2GasPrice)",
      "error InsufficientCustomGasToken()",
      "error InvalidCustomGasToken()",
      "error InvalidNativeTokenDecimals()",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function CUSTOM_GAS_TOKEN() view returns (address)",
      "function CUSTOM_GAS_TOKEN_FUNDER() view returns (address)",
      "function L1_ERC20_GATEWAY_ROUTER() view returns (address)",
      "function L1_INBOX() view returns (address)",
      "function L2_CALL_VALUE() view returns (uint256)",
      "function L2_GAS_PRICE() view returns (uint256)",
      "function L2_MAX_SUBMISSION_COST() view returns (uint256)",
      "function L2_REFUND_L2_ADDRESS() view returns (address)",
      "function NATIVE_TOKEN_DECIMALS() view returns (uint8)",
      "function RELAY_MESSAGE_L2_GAS_LIMIT() view returns (uint32)",
      "function RELAY_TOKENS_L2_GAS_LIMIT() view returns (uint32)",
      "function cctpTokenMessenger() view returns (address)",
      "function getL1CallValue(uint32 l2GasLimit) view returns (uint256)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x72981fD00087fF4F60aBFdE9f353cB1912A37fb6": [
      "constructor(address _counterpart, address _rollup, address _messageQueue)",
      "error ErrorZeroAddress()",
      "event FailedRelayedMessage(bytes32 indexed messageHash)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event RelayedMessage(bytes32 indexed messageHash)",
      "event SentMessage(address indexed sender, address indexed target, uint256 value, uint256 messageNonce, uint256 gasLimit, bytes message)",
      "event Unpaused(address account)",
      "event UpdateFeeVault(address _oldFeeVault, address _newFeeVault)",
      "event UpdateMaxReplayTimes(uint256 oldMaxReplayTimes, uint256 newMaxReplayTimes)",
      "function counterpart() view returns (address)",
      "function dropMessage(address _from, address _to, uint256 _value, uint256 _messageNonce, bytes _message)",
      "function feeVault() view returns (address)",
      "function initialize(address _counterpart, address _feeVault, address _rollup, address _messageQueue)",
      "function isL1MessageDropped(bytes32) view returns (bool)",
      "function isL2MessageExecuted(bytes32) view returns (bool)",
      "function maxReplayTimes() view returns (uint256)",
      "function messageQueue() view returns (address)",
      "function messageSendTimestamp(bytes32) view returns (uint256)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function prevReplayIndex(uint256) view returns (uint256)",
      "function relayMessageWithProof(address _from, address _to, uint256 _value, uint256 _nonce, bytes _message, tuple(uint256 batchIndex, bytes merkleProof) _proof)",
      "function renounceOwnership()",
      "function replayMessage(address _from, address _to, uint256 _value, uint256 _messageNonce, bytes _message, uint32 _newGasLimit, address _refundAddress) payable",
      "function replayStates(bytes32) view returns (uint128 times, uint128 lastIndex)",
      "function rollup() view returns (address)",
      "function sendMessage(address _to, uint256 _value, bytes _message, uint256 _gasLimit, address _refundAddress) payable",
      "function sendMessage(address _to, uint256 _value, bytes _message, uint256 _gasLimit) payable",
      "function setPause(bool _status)",
      "function transferOwnership(address newOwner)",
      "function updateFeeVault(address _newFeeVault)",
      "function updateMaxReplayTimes(uint256 _newMaxReplayTimes)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x735aDBbE72226BD52e818E7181953f42E3b0FF21": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x7A2075519Dd9598b62075FD397aF0Dd34b14619a": [
      "constructor()",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_BRIDGE() view returns (address)",
      "function baseGas(uint32 _minGasLimit) pure returns (uint64)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function ethYieldManager() view returns (address)",
      "function ethYieldTokens(address) view returns (bool approved, uint8 decimals, address provider, bool reportStakedBalance)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _portal, address _messenger, address _usdYieldManager, address _ethYieldManager)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function portal() view returns (address)",
      "function setETHYieldToken(address token, bool approved, uint8 decimals, address provider, bool reportStakedBalance)",
      "function setUSDYieldToken(address token, bool approved, uint8 decimals, address provider, bool reportStakedBalance)",
      "function usdYieldManager() view returns (address)",
      "function usdYieldTokens(address) view returns (bool approved, uint8 decimals, address provider, bool reportStakedBalance)",
      "function version() view returns (string)"
    ],
    "0x7b292034084A41B9D441B71b6E3557Edd0463fa8": [
      "constructor(address _finderAddress, uint256 _startingId)",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event EmergencyExecution(address indexed to, uint256 value, bytes data)",
      "event NewProposal(uint256 indexed id, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event ProposalExecuted(uint256 indexed id, uint256 transactionIndex)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function addMember(uint256 roleId, address newMember)",
      "function emergencyExecute(tuple(address to, uint256 value, bytes data) transaction) payable",
      "function executeProposal(uint256 id, uint256 transactionIndex) payable",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getMember(uint256 roleId) view returns (address)",
      "function getProposal(uint256 id) view returns (tuple(tuple(address to, uint256 value, bytes data)[] transactions, uint256 requestTime, bytes ancillaryData))",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numProposals() view returns (uint256)",
      "function proposals(uint256) view returns (uint256 requestTime, bytes ancillaryData)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions, bytes ancillaryData)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)"
    ],
    "0x7C058ad1D0Ee415f7e7f30e62DB1BCf568470a10": [
      "constructor(uint256 _maxDataSize)",
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error GasLimitTooLarge()",
      "error InsufficientSubmissionCost(uint256 expected, uint256 actual)",
      "error InsufficientValue(uint256 expected, uint256 actual)",
      "error L1Forked()",
      "error NotAllowedOrigin(address origin)",
      "error NotCodelessOrigin()",
      "error NotForked()",
      "error NotOrigin()",
      "error NotOwner(address sender, address owner)",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error RetryableData(address from, address to, uint256 l2CallValue, uint256 deposit, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data)",
      "event AllowListAddressSet(address indexed user, bool val)",
      "event AllowListEnabledUpdated(bool isEnabled)",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event Initialized(uint8 version)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "function allowListEnabled() view returns (bool)",
      "function bridge() view returns (address)",
      "function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee) view returns (uint256)",
      "function createRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)",
      "function createRetryableTicketNoRefundAliasRewrite(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)",
      "function depositEth(uint256) payable returns (uint256)",
      "function depositEth() payable returns (uint256)",
      "function getProxyAdmin() view returns (address)",
      "function initialize(address _bridge, address _sequencerInbox)",
      "function isAllowed(address) view returns (bool)",
      "function maxDataSize() view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function postUpgradeInit(address)",
      "function sendContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, uint256 value, bytes data) returns (uint256)",
      "function sendL1FundedContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, bytes data) payable returns (uint256)",
      "function sendL1FundedUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, bytes data) payable returns (uint256)",
      "function sendL1FundedUnsignedTransactionToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, bytes data) payable returns (uint256)",
      "function sendL2Message(bytes messageData) returns (uint256)",
      "function sendL2MessageFromOrigin(bytes messageData) returns (uint256)",
      "function sendUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sendUnsignedTransactionToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sendWithdrawEthToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, uint256 value, address withdrawTo) returns (uint256)",
      "function sequencerInbox() view returns (address)",
      "function setAllowList(address[] user, bool[] val)",
      "function setAllowListEnabled(bool _allowListEnabled)",
      "function unpause()",
      "function unsafeCreateRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)"
    ],
    "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0": [
      "function name() view returns (string)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function decimals() view returns (uint8)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool success)",
      "function unpause()",
      "function isPauser(address account) view returns (bool)",
      "function paused() view returns (bool)",
      "function renouncePauser()",
      "function balanceOf(address owner) view returns (uint256)",
      "function addPauser(address account)",
      "function pause()",
      "function symbol() view returns (string)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool success)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "constructor(string name, string symbol, uint8 decimals, uint256 totalSupply)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "event PauserAdded(address indexed account)",
      "event PauserRemoved(address indexed account)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)"
    ],
    "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d": [
      "function createLpToken(address l1Token) returns (address)"
    ],
    "0x7e90A40c7519b041A7DF6498fBf5662e8cFC61d2": [
      "constructor(address _l1Weth, address _l1Usdc, address _crossDomainMessenger, address _l1StandardBridge, address _l1USDCBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_OP_USDC_BRIDGE() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x7Ea0D1882D610095A45E512B0113f79cA98a8EfE": [
      "constructor(address _l1Weth, address _l1MessageService, address _l1TokenBridge, address _l1UsdcBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_MESSAGE_SERVICE() view returns (address)",
      "function L1_TOKEN_BRIDGE() view returns (address)",
      "function L1_USDC_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x81014F44b0a345033bB2b3B21C7a1A308B35fEeA": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x8229E812f20537caA1e8Fb41749b4887B8a75C3B": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x84efcFCE2dEe08072d5D57BF232D379b6E92A836": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function discountedValues(bytes32) view returns (uint256)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _portal)",
      "function messageNonce() view returns (uint256)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x866E82a600A1414e583f7F13623F1aC5d58b0Afa": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0x8692B776d1Ff0664177c90465038056Dc64f8991": [
      "constructor(address _finder, address _owner, address _collateral, uint256 _bondAmount, string _rules, bytes32 _identifier, uint64 _liveness)",
      "error NotIERC165Compliant(address guard_)",
      "event AvatarSet(address indexed previousAvatar, address indexed newAvatar)",
      "event ChangedGuard(address guard)",
      "event Initialized(uint8 version)",
      "event OptimisticGovernorDeployed(address indexed owner, address indexed avatar, address target)",
      "event OptimisticOracleChanged(address indexed newOptimisticOracleV3)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalDeleted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event ProposalExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event SetCollateralAndBond(address indexed collateral, uint256 indexed bondAmount)",
      "event SetEscalationManager(address indexed escalationManager)",
      "event SetIdentifier(bytes32 indexed identifier)",
      "event SetLiveness(uint64 indexed liveness)",
      "event SetRules(string rules)",
      "event TargetSet(address indexed previousTarget, address indexed newTarget)",
      "event TransactionExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId, uint256 indexed transactionIndex)",
      "event TransactionsProposed(address indexed proposer, uint256 indexed proposalTime, bytes32 indexed assertionId, tuple(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, uint256 requestTime) proposal, bytes32 proposalHash, bytes explanation, string rules, uint256 challengeWindowEnds)",
      "function EXPLANATION_KEY() view returns (bytes)",
      "function PROPOSAL_HASH_KEY() view returns (bytes)",
      "function RULES_KEY() view returns (bytes)",
      "function assertionDisputedCallback(bytes32 assertionId)",
      "function assertionIds(bytes32) view returns (bytes32)",
      "function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully)",
      "function avatar() view returns (address)",
      "function bondAmount() view returns (uint256)",
      "function collateral() view returns (address)",
      "function deleteProposalOnUpgrade(bytes32 proposalHash)",
      "function escalationManager() view returns (address)",
      "function executeProposal(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getGuard() view returns (address _guard)",
      "function getProposalBond() view returns (uint256)",
      "function guard() view returns (address)",
      "function identifier() view returns (bytes32)",
      "function liveness() view returns (uint64)",
      "function optimisticOracleV3() view returns (address)",
      "function owner() view returns (address)",
      "function proposalHashes(bytes32) view returns (bytes32)",
      "function proposeTransactions(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, bytes explanation)",
      "function renounceOwnership()",
      "function rules() view returns (string)",
      "function setAvatar(address _avatar)",
      "function setCollateralAndBond(address _collateral, uint256 _bondAmount)",
      "function setEscalationManager(address _escalationManager)",
      "function setGuard(address _guard)",
      "function setIdentifier(bytes32 _identifier)",
      "function setLiveness(uint64 _liveness)",
      "function setRules(string _rules)",
      "function setTarget(address _target)",
      "function setUp(bytes initializeParams)",
      "function sync()",
      "function target() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x88FF1e5b602916615391F55854588EFcBB7663f0": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0x9CF951E3F74B644e621b36Ca9cea147a78D4c39f": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48": [
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function implementation() view returns (address)",
      "function changeAdmin(address newAdmin)",
      "function admin() view returns (address)",
      "constructor(address _implementation)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address implementation)"
    ],
    "0xA0c68C638235ee32657e8f720a23ceC1bFc77C77": [
      "constructor(address _proxyTo)",
      "event ProxyOwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function proxyOwner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferProxyOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0xA8399e221a583A57F54Abb5bA22f31b5D6C09f32": [
      "constructor(address _l1Weth, address _l1Usdc, address _crossDomainMessenger, address _l1StandardBridge, address _l1USDCBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_OP_USDC_BRIDGE() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xb00aa68b87256E2F22058fB2Ba3246EEc54A44fc": [
      "constructor()",
      "event MaxErc20DepositUpdate(uint256 indexed oldLimit, uint256 indexed newLimit)",
      "event NewDepositBlock(address indexed owner, address indexed token, uint256 amountOrNFTId, uint256 depositBlockId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function childChain() view returns (address)",
      "function depositBulk(address[] _tokens, uint256[] _amountOrTokens, address _user)",
      "function depositERC20(address _token, uint256 _amount)",
      "function depositERC20ForUser(address _token, address _user, uint256 _amount)",
      "function depositERC721(address _token, uint256 _tokenId)",
      "function depositERC721ForUser(address _token, address _user, uint256 _tokenId)",
      "function depositEther() payable",
      "function deposits(uint256) view returns (bytes32 depositHash, uint256 createdAt)",
      "function governance() view returns (address)",
      "function isOwner() view returns (bool)",
      "function lock()",
      "function locked() view returns (bool)",
      "function maxErc20Deposit() view returns (uint256)",
      "function migrateMatic()",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function owner() view returns (address)",
      "function registry() view returns (address)",
      "function renounceOwnership()",
      "function rootChain() view returns (address)",
      "function stateSender() view returns (address)",
      "function transferAssets(address _token, address _user, uint256 _amountOrNFTId)",
      "function transferOwnership(address newOwner)",
      "function unlock()",
      "function updateChildChainAndStateSender()",
      "function updateMaxErc20Deposit(uint256 maxDepositAmount)",
      "function updateRootChain(address _rootChain)"
    ],
    "0xB1fd4ae726c64A793588001EB465c46BD1BdF1cB": [
      "constructor()",
      "event ExitedERC20(address indexed exitor, address indexed rootToken, uint256 amount)",
      "event LockedERC20(address indexed depositor, address indexed depositReceiver, address indexed rootToken, uint256 amount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MANAGER_ROLE() view returns (bytes32)",
      "function TOKEN_TYPE() view returns (bytes32)",
      "function TRANSFER_EVENT_SIG() view returns (bytes32)",
      "function exitTokens(address, address rootToken, bytes log)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _owner)",
      "function lockTokens(address depositor, address depositReceiver, address rootToken, bytes depositData)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)"
    ],
    "0xb4AeF0178f5725392A26eE18684C2aB62adc912e": [
      "constructor(address _rootChainManager, address _fxStateSender, address _depositManager, address _erc20Predicate, address _l1Matic, address _l1Weth, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function DEPOSIT_MANAGER() view returns (address)",
      "function ERC20_PREDICATE() view returns (address)",
      "function FX_STATE_SENDER() view returns (address)",
      "function L1_MATIC() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function ROOT_CHAIN_MANAGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xB524735356985D2f267FA010D681f061DfF03715": [
      "constructor(address _singleton)"
    ],
    "0xb6129Ab69aEA75e6884c2D6ecf25293C343C519F": [
      "constructor(address _l1GatewayRouter, address _l1ScrollMessenger, address _l2GasPriceOracle, uint32 _l2MessageRelayGasLimit, uint32 _l2TokenRelayGasLimit)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_GATEWAY_ROUTER() view returns (address)",
      "function L1_SCROLL_MESSENGER() view returns (address)",
      "function L2_GAS_PRICE_ORACLE() view returns (address)",
      "function L2_MESSAGE_RELAY_GAS_LIMIT() view returns (uint32)",
      "function L2_TOKEN_RELAY_GAS_LIMIT() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0xb93Ac04010Bd61F45BF492022A5b49a902F798F3": [
      "constructor()",
      "event DepositERC20(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes data)",
      "event DepositETH(address indexed from, address indexed to, uint256 amount, bytes data)",
      "event FinalizeWithdrawERC20(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes data)",
      "event FinalizeWithdrawETH(address indexed from, address indexed to, uint256 amount, bytes data)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RefundERC20(address indexed token, address indexed recipient, uint256 amount)",
      "event RefundETH(address indexed recipient, uint256 amount)",
      "event SetDefaultERC20Gateway(address indexed oldDefaultERC20Gateway, address indexed newDefaultERC20Gateway)",
      "event SetERC20Gateway(address indexed token, address indexed oldGateway, address indexed newGateway)",
      "event SetETHGateway(address indexed oldETHGateway, address indexed newEthGateway)",
      "function ERC20Gateway(address) view returns (address)",
      "function defaultERC20Gateway() view returns (address)",
      "function depositERC20(address _token, uint256 _amount, uint256 _gasLimit) payable",
      "function depositERC20(address _token, address _to, uint256 _amount, uint256 _gasLimit) payable",
      "function depositERC20AndCall(address _token, address _to, uint256 _amount, bytes _data, uint256 _gasLimit) payable",
      "function depositETH(uint256 _amount, uint256 _gasLimit) payable",
      "function depositETH(address _to, uint256 _amount, uint256 _gasLimit) payable",
      "function depositETHAndCall(address _to, uint256 _amount, bytes _data, uint256 _gasLimit) payable",
      "function ethGateway() view returns (address)",
      "function finalizeWithdrawERC20(address, address, address, address, uint256, bytes) payable",
      "function finalizeWithdrawETH(address, address, uint256, bytes) payable",
      "function gatewayInContext() view returns (address)",
      "function getERC20Gateway(address _token) view returns (address)",
      "function getL2ERC20Address(address _l1Address) view returns (address)",
      "function initialize(address _ethGateway, address _defaultERC20Gateway)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function requestERC20(address _sender, address _token, uint256 _amount) returns (uint256)",
      "function setDefaultERC20Gateway(address _newDefaultERC20Gateway)",
      "function setERC20Gateway(address[] _tokens, address[] _gateways)",
      "function setETHGateway(address _newEthGateway)",
      "function transferOwnership(address newOwner)"
    ],
    "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58": [
      "function getStrikeForFinancialProduct(address financialProduct) view returns (tuple(uint256 rawValue))",
      "function setFinancialProductStrike(address financialProduct, tuple(uint256 rawValue) strikePrice)",
      "function transformCollateralRequirement(tuple(uint256 rawValue) oraclePrice, tuple(uint256 rawValue) collateralRequirement) view returns (tuple(uint256 rawValue))",
      "function transformPrice(tuple(uint256 rawValue) oraclePrice, uint256 requestTime) view returns (tuple(uint256 rawValue))",
      "function transformPriceIdentifier(bytes32 priceIdentifier, uint256 requestTime) view returns (bytes32)"
    ],
    "0xBd3fa81B58Ba92a82136038B25aDec7066af3155": [
      "constructor(address _messageTransmitter, uint32 _messageBodyVersion)",
      "event DepositForBurn(uint64 indexed nonce, address indexed burnToken, uint256 amount, address indexed depositor, bytes32 mintRecipient, uint32 destinationDomain, bytes32 destinationTokenMessenger, bytes32 destinationCaller)",
      "event LocalMinterAdded(address localMinter)",
      "event LocalMinterRemoved(address localMinter)",
      "event MintAndWithdraw(address indexed mintRecipient, uint256 amount, address indexed mintToken)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RemoteTokenMessengerAdded(uint32 domain, bytes32 tokenMessenger)",
      "event RemoteTokenMessengerRemoved(uint32 domain, bytes32 tokenMessenger)",
      "event RescuerChanged(address indexed newRescuer)",
      "function acceptOwnership()",
      "function addLocalMinter(address newLocalMinter)",
      "function addRemoteTokenMessenger(uint32 domain, bytes32 tokenMessenger)",
      "function depositForBurn(uint256 amount, uint32 destinationDomain, bytes32 mintRecipient, address burnToken) returns (uint64 _nonce)",
      "function depositForBurnWithCaller(uint256 amount, uint32 destinationDomain, bytes32 mintRecipient, address burnToken, bytes32 destinationCaller) returns (uint64 nonce)",
      "function handleReceiveMessage(uint32 remoteDomain, bytes32 sender, bytes messageBody) returns (bool)",
      "function localMessageTransmitter() view returns (address)",
      "function localMinter() view returns (address)",
      "function messageBodyVersion() view returns (uint32)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function remoteTokenMessengers(uint32) view returns (bytes32)",
      "function removeLocalMinter()",
      "function removeRemoteTokenMessenger(uint32 domain)",
      "function replaceDepositForBurn(bytes originalMessage, bytes originalAttestation, bytes32 newDestinationCaller, bytes32 newMintRecipient)",
      "function rescueERC20(address tokenContract, address to, uint256 amount)",
      "function rescuer() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function updateRescuer(address newRescuer)"
    ],
    "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F": [
      "function name() view returns (string)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function nominateNewOwner(address _owner)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function decimals() view returns (uint8)",
      "function nominatedOwner() view returns (address)",
      "function balanceOf(address owner) view returns (uint256)",
      "function setTarget(address _target)",
      "function acceptOwnership()",
      "function owner() view returns (address)",
      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
      "function useDELEGATECALL() view returns (bool)",
      "function symbol() view returns (string)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function setUseDELEGATECALL(bool value)",
      "function target() view returns (address)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "constructor(address _owner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event TargetUpdated(address newTarget)",
      "event OwnerNominated(address newOwner)",
      "event OwnerChanged(address oldOwner, address newOwner)"
    ],
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2": [
      "function name() view returns (string)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
      "function withdraw(uint256 wad)",
      "function decimals() view returns (uint8)",
      "function balanceOf(address) view returns (uint256)",
      "function symbol() view returns (string)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function deposit() payable",
      "function allowance(address, address) view returns (uint256)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)"
    ],
    "0xc186fA914353c44b2E33eBE05f21846F1048bEda": [
      "constructor(address _lpTokenFactory, address _finder, address _weth, address _timer)",
      "event BondSet(address indexed newBondToken, uint256 newBondAmount)",
      "event CrossChainContractsSet(uint256 l2ChainId, address adapter, address spokePool)",
      "event EmergencyRootBundleDeleted(bytes32 indexed poolRebalanceRoot, bytes32 indexed relayerRefundRoot, bytes32 slowRelayRoot, address indexed proposer)",
      "event IdentifierSet(bytes32 newIdentifier)",
      "event L1TokenEnabledForLiquidityProvision(address l1Token, address lpToken)",
      "event L2TokenDisabledForLiquidityProvision(address l1Token, address lpToken)",
      "event LiquidityAdded(address indexed l1Token, uint256 amount, uint256 lpTokensMinted, address indexed liquidityProvider)",
      "event LiquidityRemoved(address indexed l1Token, uint256 amount, uint256 lpTokensBurnt, address indexed liquidityProvider)",
      "event LivenessSet(uint256 newLiveness)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(bool indexed isPaused)",
      "event ProposeRootBundle(uint32 challengePeriodEndTimestamp, uint8 poolRebalanceLeafCount, uint256[] bundleEvaluationBlockNumbers, bytes32 indexed poolRebalanceRoot, bytes32 indexed relayerRefundRoot, bytes32 slowRelayRoot, address indexed proposer)",
      "event ProtocolFeeCaptureSet(address indexed newProtocolFeeCaptureAddress, uint256 indexed newProtocolFeeCapturePct)",
      "event ProtocolFeesCapturedClaimed(address indexed l1Token, uint256 indexed accumulatedFees)",
      "event RootBundleCanceled(address indexed disputer, uint256 requestTime)",
      "event RootBundleDisputed(address indexed disputer, uint256 requestTime)",
      "event RootBundleExecuted(uint256 groupIndex, uint256 indexed leafId, uint256 indexed chainId, address[] l1Tokens, uint256[] bundleLpFees, int256[] netSendAmounts, int256[] runningBalances, address indexed caller)",
      "event SetEnableDepositRoute(uint256 indexed originChainId, uint256 indexed destinationChainId, address indexed originToken, bool depositsEnabled)",
      "event SetPoolRebalanceRoute(uint256 indexed destinationChainId, address indexed l1Token, address indexed destinationToken)",
      "event SpokePoolAdminFunctionTriggered(uint256 indexed chainId, bytes message)",
      "function addLiquidity(address l1Token, uint256 l1TokenAmount) payable",
      "function bondAmount() view returns (uint256)",
      "function bondToken() view returns (address)",
      "function claimProtocolFeesCaptured(address l1Token)",
      "function crossChainContracts(uint256) view returns (address adapter, address spokePool)",
      "function disableL1TokenForLiquidityProvision(address l1Token)",
      "function disputeRootBundle()",
      "function emergencyDeleteProposal()",
      "function enableL1TokenForLiquidityProvision(address l1Token)",
      "function exchangeRateCurrent(address l1Token) returns (uint256)",
      "function executeRootBundle(uint256 chainId, uint256 groupIndex, uint256[] bundleLpFees, int256[] netSendAmounts, int256[] runningBalances, uint8 leafId, address[] l1Tokens, bytes32[] proof)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function haircutReserves(address l1Token, int256 haircutAmount)",
      "function identifier() view returns (bytes32)",
      "function liquidityUtilizationCurrent(address l1Token) returns (uint256)",
      "function liquidityUtilizationPostRelay(address l1Token, uint256 relayedAmount) returns (uint256)",
      "function liveness() view returns (uint32)",
      "function loadEthForL2Calls() payable",
      "function lpFeeRatePerSecond() view returns (uint256)",
      "function lpTokenFactory() view returns (address)",
      "function multicall(bytes[] data) payable returns (bytes[] results)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function poolRebalanceRoute(uint256 destinationChainId, address l1Token) view returns (address destinationToken)",
      "function pooledTokens(address) view returns (address lpToken, bool isEnabled, uint32 lastLpFeeUpdate, int256 utilizedReserves, uint256 liquidReserves, uint256 undistributedLpFees)",
      "function proposeRootBundle(uint256[] bundleEvaluationBlockNumbers, uint8 poolRebalanceLeafCount, bytes32 poolRebalanceRoot, bytes32 relayerRefundRoot, bytes32 slowRelayRoot)",
      "function protocolFeeCaptureAddress() view returns (address)",
      "function protocolFeeCapturePct() view returns (uint256)",
      "function relaySpokePoolAdminFunction(uint256 chainId, bytes functionData)",
      "function removeLiquidity(address l1Token, uint256 lpTokenAmount, bool sendEth)",
      "function renounceOwnership()",
      "function rootBundleProposal() view returns (bytes32 poolRebalanceRoot, bytes32 relayerRefundRoot, bytes32 slowRelayRoot, uint256 claimedBitMap, address proposer, uint8 unclaimedPoolRebalanceLeafCount, uint32 challengePeriodEndTimestamp)",
      "function setBond(address newBondToken, uint256 newBondAmount)",
      "function setCrossChainContracts(uint256 l2ChainId, address adapter, address spokePool)",
      "function setCurrentTime(uint256 time)",
      "function setDepositRoute(uint256 originChainId, uint256 destinationChainId, address originToken, bool depositsEnabled)",
      "function setIdentifier(bytes32 newIdentifier)",
      "function setLiveness(uint32 newLiveness)",
      "function setPaused(bool pause)",
      "function setPoolRebalanceRoute(uint256 destinationChainId, address l1Token, address destinationToken)",
      "function setProtocolFeeCapture(address newProtocolFeeCaptureAddress, uint256 newProtocolFeeCapturePct)",
      "function sync(address l1Token)",
      "function timerAddress() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unclaimedAccumulatedProtocolFees(address) view returns (uint256)",
      "function weth() view returns (address)"
    ],
    "0xc473ca7E02af24c129c2eEf51F2aDf0411c1Df69": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0xC67A8c5f22b40274Ca7C4A56Db89569Ee2AD3FAb": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0xcfF35e3C0B8D197A6Ce10802cd649FBb9957dA07": [
      "constructor(address _usdc, address _messenger, address _linkedAdapter)",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error IOpUSDCBridgeAdapter_BlacklistedAddress()",
      "error IOpUSDCBridgeAdapter_BurnAmountNotSet()",
      "error IOpUSDCBridgeAdapter_ForbiddenTransaction()",
      "error IOpUSDCBridgeAdapter_InvalidAddress()",
      "error IOpUSDCBridgeAdapter_InvalidCaller()",
      "error IOpUSDCBridgeAdapter_InvalidNonce()",
      "error IOpUSDCBridgeAdapter_InvalidSender()",
      "error IOpUSDCBridgeAdapter_InvalidSignature()",
      "error IOpUSDCBridgeAdapter_InvalidTransaction()",
      "error IOpUSDCBridgeAdapter_MessageExpired()",
      "error IOpUSDCBridgeAdapter_MessagingDisabled()",
      "error IOpUSDCBridgeAdapter_MessagingEnabled()",
      "error IOpUSDCBridgeAdapter_NotMigrated()",
      "error IOpUSDCBridgeAdapter_NotUpgrading()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error SafeERC20FailedOperation(address token)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event BurnAmountSet(uint256 _burnAmount)",
      "event EIP712DomainChanged()",
      "event Initialized(uint64 version)",
      "event LockedFundsWithdrawn(address indexed _user, uint256 _amountWithdrawn)",
      "event MessageFailed(address indexed _spender, address indexed _user, uint256 _amount, address indexed _messenger)",
      "event MessageReceived(address indexed _spender, address indexed _user, uint256 _amount, address indexed _messenger)",
      "event MessageSent(address indexed _user, address indexed _to, uint256 _amount, address indexed _messenger, uint32 _minGasLimit)",
      "event MessagingResumed(address _messenger)",
      "event MessagingStopped(address _messenger)",
      "event MigratingToNative(address _messenger, address _caller)",
      "event MigrationComplete(uint256 _burnedAmount)",
      "event NonceCanceled(address _caller, uint256 _nonce)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function BRIDGE_MESSAGE_TYPEHASH() view returns (bytes32)",
      "function LINKED_ADAPTER() view returns (address)",
      "function MESSENGER() view returns (address)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function USDC() view returns (address)",
      "function attemptTransfer(address _to, uint256 _amount)",
      "function burnAmount() view returns (uint256)",
      "function burnCaller() view returns (address)",
      "function burnLockedUSDC()",
      "function cancelSignature(uint256 _nonce)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function initialize(address _owner)",
      "function lockedFundsDetails(address _spender, address _user) view returns (uint256 _lockedAmount)",
      "function messengerStatus() view returns (uint8)",
      "function migrateToNative(address _roleCaller, address _burnCaller, uint32 _minGasLimitReceiveOnL2, uint32 _minGasLimitSetBurnAmount)",
      "function owner() view returns (address)",
      "function proxiableUUID() view returns (bytes32)",
      "function receiveMessage(address _user, address _spender, uint256 _amount)",
      "function receiveWithdrawLockedFundsPostMigration(address _spender, uint256 _amount)",
      "function renounceOwnership()",
      "function resumeMessaging(uint32 _minGasLimit)",
      "function sendMessage(address _signer, address _to, uint256 _amount, bytes _signature, uint256 _nonce, uint256 _deadline, uint32 _minGasLimit)",
      "function sendMessage(address _to, uint256 _amount, uint32 _minGasLimit)",
      "function setBurnAmount(uint256 _amount)",
      "function stopMessaging(uint32 _minGasLimit)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function userNonces(address _user, uint256 _nonce) view returns (bool _used)",
      "function withdrawLockedFunds(address _spender, address _user)"
    ],
    "0xd19d4B5d358258f05D7B411E21A1460D11B0876F": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xD2C23A5A280AFF9182b953579f62EDdDF1c7ff22": [
      "constructor()",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function version() view returns (string)"
    ],
    "0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _superchainConfig, address _portal)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0xdC40a14d9abd6F410226f1E6de71aE03441ca506": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0xdD0ae774F7E300CdAA4EA371cD55169665Ee6AFe": [
      "constructor()",
      "error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)",
      "error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)",
      "error ERC20InvalidApprover(address approver)",
      "error ERC20InvalidReceiver(address receiver)",
      "error ERC20InvalidSender(address sender)",
      "error ERC20InvalidSpender(address spender)",
      "error NotMinterBurner()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function acceptOwnership()",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(uint256 _amount)",
      "function decimals() view returns (uint8)",
      "function mint(address _to, uint256 _amount)",
      "function minterBurner() view returns (address)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setMinterBurner(address _minter_burner)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function DAI() view returns (address)",
      "function DAI_OPTIMISM_BRIDGE() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function SNX() view returns (address)",
      "function SNX_OPTIMISM_BRIDGE() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xeb9bf100225c214Efc3E7C651ebbaDcF85177607": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0xeBb17f398ed30d02F2e8733e7c1e5cf566e17812": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea": [
      "constructor(address _hubPool)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposerModified(address proposer, bool enabled)",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)",
      "function allowance(address, address) view returns (uint256)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function balanceOf(address) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function deposit() payable",
      "function hubPool() view returns (address)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function proposers(address) view returns (bool)",
      "function renounceOwnership()",
      "function setProposer(address proposer, bool enabled)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function transferFrom(address src, address dst, uint256 amt) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function withdraw(uint256 wad)"
    ],
    "0xeE3Afe347D5C74317041E2618C49534dAf887c24": [
      "constructor(uint256 _liveness, address _finderAddress, address _timerAddress)",
      "event DisputePrice(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "event ProposePrice(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "event RequestPrice(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "event Settle(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "function ancillaryBytesLimit() view returns (uint256)",
      "function defaultLiveness() view returns (uint256)",
      "function disputePrice(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (uint256 totalBond)",
      "function disputePriceFor(bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request, address disputer, address requester) returns (uint256 totalBond)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getState(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (uint8)",
      "function hasPrice(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (bool)",
      "function proposePrice(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request, int256 proposedPrice) returns (uint256 totalBond)",
      "function proposePriceFor(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request, address proposer, int256 proposedPrice) returns (uint256 totalBond)",
      "function requestAndProposePriceFor(bytes32 identifier, uint32 timestamp, bytes ancillaryData, address currency, uint256 reward, uint256 bond, uint256 customLiveness, address proposer, int256 proposedPrice) returns (uint256 totalBond)",
      "function requestPrice(bytes32 identifier, uint32 timestamp, bytes ancillaryData, address currency, uint256 reward, uint256 bond, uint256 customLiveness) returns (uint256 totalBond)",
      "function requests(bytes32) view returns (bytes32)",
      "function setCurrentTime(uint256 time)",
      "function settle(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (uint256 payout, int256 resolvedPrice)",
      "function stampAncillaryData(bytes ancillaryData, address requester) pure returns (bytes)",
      "function timerAddress() view returns (address)"
    ],
    "0xf1B59868697f3925b72889ede818B9E7ba0316d0": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xF2bEf5E905AAE0295003ab14872F811E914EdD81": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address l1BlastBridge, address l1Dai, uint32 l2GasLimit)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_BLAST_BRIDGE() view returns (address)",
      "function L1_DAI() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xF5A14DCdde1143443f06033200D345c2a2828A99": [
      "constructor(address _l1WethAddress, address _bridgehub, uint256 _eraChainId, address _eraDiamondProxy)",
      "error AddressAlreadyUsed(address addr)",
      "error DepositDoesNotExist()",
      "error DepositExists()",
      "error DepositIncorrectAmount(uint256 expectedAmt, uint256 providedAmt)",
      "error EmptyDeposit()",
      "error InsufficientChainBalance()",
      "error InvalidProof()",
      "error InvalidSelector(bytes4 func)",
      "error L2BridgeNotSet(uint256 chainId)",
      "error L2WithdrawalMessageWrongLength(uint256 messageLen)",
      "error NoFundsTransferred()",
      "error NonEmptyMsgValue()",
      "error NotInitializedReentrancyGuard()",
      "error Reentrancy()",
      "error SharedBridgeBalanceMismatch()",
      "error SharedBridgeValueAlreadySet(uint8)",
      "error SharedBridgeValueNotSet(uint8)",
      "error SlotOccupied()",
      "error TokenNotSupported(address token)",
      "error TokensWithFeesNotSupported()",
      "error Unauthorized(address caller)",
      "error ValueMismatch(uint256 expected, uint256 actual)",
      "error WithdrawFailed()",
      "error WithdrawalAlreadyFinalized()",
      "error ZeroAddress()",
      "error ZeroBalance()",
      "event BridgehubDepositBaseTokenInitiated(uint256 indexed chainId, address indexed from, address l1Token, uint256 amount)",
      "event BridgehubDepositFinalized(uint256 indexed chainId, bytes32 indexed txDataHash, bytes32 indexed l2DepositTxHash)",
      "event BridgehubDepositInitiated(uint256 indexed chainId, bytes32 indexed txDataHash, address indexed from, address to, address l1Token, uint256 amount)",
      "event ClaimedFailedDepositSharedBridge(uint256 indexed chainId, address indexed to, address indexed l1Token, uint256 amount)",
      "event Initialized(uint8 version)",
      "event LegacyDepositInitiated(uint256 indexed chainId, bytes32 indexed l2DepositTxHash, address indexed from, address to, address l1Token, uint256 amount)",
      "event NewAdmin(address indexed oldAdmin, address indexed newAdmin)",
      "event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "event WithdrawalFinalizedSharedBridge(uint256 indexed chainId, address indexed to, address indexed l1Token, uint256 amount)",
      "function BRIDGE_HUB() view returns (address)",
      "function L1_WETH_TOKEN() view returns (address)",
      "function acceptAdmin()",
      "function acceptOwnership()",
      "function admin() view returns (address)",
      "function bridgehubConfirmL2Transaction(uint256 _chainId, bytes32 _txDataHash, bytes32 _txHash)",
      "function bridgehubDeposit(uint256 _chainId, address _prevMsgSender, uint256 _l2Value, bytes _data) payable returns (tuple(bytes32 magicValue, address l2Contract, bytes l2Calldata, bytes[] factoryDeps, bytes32 txDataHash) request)",
      "function bridgehubDepositBaseToken(uint256 _chainId, address _prevMsgSender, address _l1Token, uint256 _amount) payable",
      "function chainBalance(uint256 chainId, address l1Token) view returns (uint256 balance)",
      "function claimFailedDeposit(uint256 _chainId, address _depositSender, address _l1Token, uint256 _amount, bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof)",
      "function claimFailedDepositLegacyErc20Bridge(address _depositSender, address _l1Token, uint256 _amount, bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof)",
      "function depositHappened(uint256 chainId, bytes32 l2DepositTxHash) view returns (bytes32 depositDataHash)",
      "function depositLegacyErc20Bridge(address _prevMsgSender, address _l2Receiver, address _l1Token, uint256 _amount, uint256 _l2TxGasLimit, uint256 _l2TxGasPerPubdataByte, address _refundRecipient) payable returns (bytes32 l2TxHash)",
      "function finalizeWithdrawal(uint256 _chainId, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes _message, bytes32[] _merkleProof)",
      "function finalizeWithdrawalLegacyErc20Bridge(uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes _message, bytes32[] _merkleProof) returns (address l1Receiver, address l1Token, uint256 amount)",
      "function initialize(address _owner)",
      "function initializeChainGovernance(uint256 _chainId, address _l2BridgeAddress)",
      "function isWithdrawalFinalized(uint256 chainId, uint256 l2BatchNumber, uint256 l2ToL1MessageNumber) view returns (bool isFinalized)",
      "function l2BridgeAddress(uint256 chainId) view returns (address l2Bridge)",
      "function legacyBridge() view returns (address)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingAdmin() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function receiveEth(uint256 _chainId) payable",
      "function reinitializeChainGovernance(uint256 _chainId, address _l2BridgeAddress)",
      "function renounceOwnership()",
      "function safeTransferFundsFromLegacy(address _token, address _target, uint256 _targetChainId, uint256 _gasPerToken)",
      "function setEraLegacyBridgeLastDepositTime(uint256 _eraLegacyBridgeLastDepositBatch, uint256 _eraLegacyBridgeLastDepositTxNumber)",
      "function setEraPostDiamondUpgradeFirstBatch(uint256 _eraPostDiamondUpgradeFirstBatch)",
      "function setEraPostLegacyBridgeUpgradeFirstBatch(uint256 _eraPostLegacyBridgeUpgradeFirstBatch)",
      "function setL1Erc20Bridge(address _legacyBridge)",
      "function setPendingAdmin(address _newPendingAdmin)",
      "function transferFundsFromLegacy(address _token, address _target, uint256 _targetChainId)",
      "function transferOwnership(address newOwner)",
      "function unpause()"
    ],
    "0xF8B1378579659D8F7EE5f3C929c2f3E332E41Fd6": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xf931a81D18B1766d15695ffc7c1920a62b7e710a": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "0xFADcC43096756e1527306FD92982FEbBe3c629Fa": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2": [
      "constructor(address _stateSender)",
      "function fxChild() view returns (address)",
      "function sendMessageToChild(address _receiver, bytes _data)",
      "function setFxChild(address _fxChild)",
      "function stateSender() view returns (address)"
    ]
  },
  "usedTemplates": {
    "circle/L1OpUSDCBridgeAdapter": "0x22759a15b1e9cda9e20f90038ea71e9c208b164e806d9d3ed2af65951954e105",
    "GnosisSafe": "0xaae4ceb3ab17525638c5f164c89aee1cfa5a071129df0635d536987eb216d93f",
    "linea/LineaRollup": "0x6b62912f2fbf577082798e96a3f0022a8edf243776a2168855998b6b34e0f767",
    "linea/TokenBridge": "0x344e398a00b4da4b739370df1e59ae2bc56c107d1b1e6839d965eb131f6110e0",
    "opstack/L1CrossDomainMessenger": "0x8ecdf493ffe75de8cbd7492148db159b26c9ecc38bb6dd7b8488be72d0c7bf4e",
    "opstack/L1StandardBridge": "0x2c203b1e84018105cf241afde6a5c7ac9d742c0038b60ee17a12d3d90a68c090",
    "orbitstack/GatewayRouter": "0xe837f2a222906711731a613a1d1aac3c907b45d87c99b651cd1caf19950d32ff",
    "orbitstack/Inbox": "0x50b51cf63c3b2823c94ff050a8ee0410afef7b7c172fa8fcd35673471070373a",
    "shared-zk-stack/BridgeHub": "0x0ed3084958637a972697f50db49ea1b49378389e3bfe84cc7d86bc52b98de5da",
    "shared-zk-stack/L1SharedBridge": "0xcd9bf0d6a3ea2404756f083929a0caefca7fa928b4aba978796143f3b3cee0cf"
  }
}
