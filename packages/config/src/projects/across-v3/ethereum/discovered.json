{
  "name": "across-v3",
  "chain": "ethereum",
  "blockNumber": 22648158,
  "configHash": "0x42e0b35a2b0c0d087e89114055e8c923e0c36c606285b7bd8cfe59e7029220b8",
  "entries": [
    {
      "name": "VotingV2",
      "address": "0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac",
      "type": "Contract",
      "sourceHashes": [
        "0xef18268ad698461591028993ca19fa3b717ace3ee3371f86e68c1d0a3658d87e"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1677229919,
      "sinceBlock": 16697232,
      "values": {
        "$immutable": true,
        "ANCILLARY_BYTES_LIMIT": 8192,
        "cumulativeStake": "24287596729254730681261816",
        "currentActiveRequests": true,
        "emissionRate": "130000000000000000",
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "gat": "5000000000000000000000000",
        "getCurrentRoundId": 10122,
        "getCurrentTime": 1749244439,
        "getNumberOfPriceRequests": {
          "numberPendingPriceRequests": 12,
          "numberResolvedPriceRequests": 1014
        },
        "getPendingRequests": [
          {
            "lastVotingRound": 10122,
            "isGovernance": false,
            "time": 1749043032,
            "rollCount": 0,
            "identifier": "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000",
            "ancillaryData": "0x616e63696c6c61727944617461486173683a653036323034326333656439623732626337643837623032643865623666353564393430323266633838383163386163393537633630363331633232303362342c6368696c64426c6f636b4e756d6265723a37323335343738362c6368696c644f7261636c653a616336303335336135343837336334343631303132313638323961366139386364626263336633642c6368696c645265717565737465723a656533616665333437643563373433313730343165323631386334393533346461663838376332342c6368696c64436861696e49643a313337"
          },
          {
            "lastVotingRound": 10122,
            "isGovernance": false,
            "time": 1749012266,
            "rollCount": 0,
            "identifier": "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000",
            "ancillaryData": "0x616e63696c6c61727944617461486173683a343765656332653363336438663462616437663161316162363938653537646134326536656231386436353265646237353330326331313733643532646430642c6368696c64426c6f636b4e756d6265723a37323334303231342c6368696c644f7261636c653a616336303335336135343837336334343631303132313638323961366139386364626263336633642c6368696c645265717565737465723a656533616665333437643563373433313730343165323631386334393533346461663838376332342c6368696c64436861696e49643a313337"
          },
          {
            "lastVotingRound": 10122,
            "isGovernance": false,
            "time": 1749012200,
            "rollCount": 0,
            "identifier": "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000",
            "ancillaryData": "0x616e63696c6c61727944617461486173683a393432623563346133383764643839383831303638393131326439336366636432633636643932393833393230633962326235363765366239363731643336342c6368696c64426c6f636b4e756d6265723a37323334303132352c6368696c644f7261636c653a616336303335336135343837336334343631303132313638323961366139386364626263336633642c6368696c645265717565737465723a656533616665333437643563373433313730343165323631386334393533346461663838376332342c6368696c64436861696e49643a313337"
          },
          {
            "lastVotingRound": 10122,
            "isGovernance": false,
            "time": 1749012038,
            "rollCount": 0,
            "identifier": "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000",
            "ancillaryData": "0x616e63696c6c61727944617461486173683a623233343766386264313864383437373734393932316433643361306538636463643836353135653539353233343330313665666436326162663731613932352c6368696c64426c6f636b4e756d6265723a37323334303038302c6368696c644f7261636c653a616336303335336135343837336334343631303132313638323961366139386364626263336633642c6368696c645265717565737465723a656533616665333437643563373433313730343165323631386334393533346461663838376332342c6368696c64436861696e49643a313337"
          },
          {
            "lastVotingRound": 10122,
            "isGovernance": false,
            "time": 1749011944,
            "rollCount": 0,
            "identifier": "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000",
            "ancillaryData": "0x616e63696c6c61727944617461486173683a323966666163336465333263626461613139343464623964313233336265396630333239373538306563353462656634343964313635303662663761376530622c6368696c64426c6f636b4e756d6265723a37323334303030322c6368696c644f7261636c653a616336303335336135343837336334343631303132313638323961366139386364626263336633642c6368696c645265717565737465723a656533616665333437643563373433313730343165323631386334393533346461663838376332342c6368696c64436861696e49643a313337"
          },
          {
            "lastVotingRound": 10122,
            "isGovernance": false,
            "time": 1748888639,
            "rollCount": 0,
            "identifier": "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000",
            "ancillaryData": "0x616e63696c6c61727944617461486173683a333632643466353964646463383835323930366665383439316264303331373834303661393865373235396436366630646363653437333063626361613234372c6368696c64426c6f636b4e756d6265723a37323238353037332c6368696c644f7261636c653a616336303335336135343837336334343631303132313638323961366139386364626263336633642c6368696c645265717565737465723a656533616665333437643563373433313730343165323631386334393533346461663838376332342c6368696c64436861696e49643a313337"
          },
          {
            "lastVotingRound": 10122,
            "isGovernance": false,
            "time": 1748898065,
            "rollCount": 0,
            "identifier": "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000",
            "ancillaryData": "0x616e63696c6c61727944617461486173683a663930303662643431333530363934343637323862663131616536633234313761313533343337613763623539653738643762646632393035343936303833302c6368696c64426c6f636b4e756d6265723a37323238373033342c6368696c644f7261636c653a616336303335336135343837336334343631303132313638323961366139386364626263336633642c6368696c645265717565737465723a656533616665333437643563373433313730343165323631386334393533346461663838376332342c6368696c64436861696e49643a313337"
          },
          {
            "lastVotingRound": 10122,
            "isGovernance": false,
            "time": 1748968048,
            "rollCount": 0,
            "identifier": "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000",
            "ancillaryData": "0x616e63696c6c61727944617461486173683a356337643132613662633132636134346239316233343165346135353764303033663433303935656137343133316663653730633735636138323739333939322c6368696c64426c6f636b4e756d6265723a37323331393639332c6368696c644f7261636c653a616336303335336135343837336334343631303132313638323961366139386364626263336633642c6368696c645265717565737465723a656533616665333437643563373433313730343165323631386334393533346461663838376332342c6368696c64436861696e49643a313337"
          },
          {
            "lastVotingRound": 10122,
            "isGovernance": false,
            "time": 1748980930,
            "rollCount": 0,
            "identifier": "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000",
            "ancillaryData": "0x616e63696c6c61727944617461486173683a653330613030376533663630663933346666663036633462663361663265613137623266386266336636313133323931643364363936386137646539313135322c6368696c64426c6f636b4e756d6265723a37323332373432302c6368696c644f7261636c653a616336303335336135343837336334343631303132313638323961366139386364626263336633642c6368696c645265717565737465723a656533616665333437643563373433313730343165323631386334393533346461663838376332342c6368696c64436861696e49643a313337"
          }
        ],
        "getRoundEndTime": [172800, 345600, 518400, 691200, 864000],
        "getVotePhase": 1,
        "lastRoundIdProcessed": 10122,
        "lastUpdateTime": 1749244187,
        "maxRequestsPerRound": 1000,
        "maxRolls": 4,
        "migratedAddress": "0x0000000000000000000000000000000000000000",
        "nextPendingIndexToProcess": 12,
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "pendingPriceRequestsIds": [
          "0x29de78b989682441ba9928ac6ac2fc9546bd644e2882d662c896ed6bbad0fe20",
          "0x80d90283c920aa5cbbb91fc638e6e777423e4e03e05b7f0c0e681b55952bd5f9",
          "0x9a9cc9123005f79576afb9afcf9700265ec43b84b72014441ad63ccdebbfb298",
          "0x32cab0554d39cf0bd4d7ab378af7ea4145e40bcd6125b47a91e97acc4759587b",
          "0xcf35b4086d3644c74566fbe20748e2567d61f564b102a9fa1444f3456245d770"
        ],
        "previousVotingContract": "0x8B1631ab830d11531aE83725fDa4D86012eCCd77",
        "requestSlashingTrackers": [
          [
            0,
            1000000000000000,
            "894122295269549157065",
            "18617019924951271803176298",
            9712
          ],
          [
            1000000000000000,
            1000000000000000,
            "2627298461910141446152",
            "17332349229228232282508129",
            9715
          ],
          [
            1000000000000000,
            1000000000000000,
            "547691395181260367025",
            "19455197208095905107170651",
            9716
          ],
          [
            1000000000000000,
            1000000000000000,
            "7708320665789019986251",
            "12902557915899573849218434",
            9720
          ],
          [
            1000000000000000,
            1000000000000000,
            "7707999233215283798858",
            "12902879348473310036611129",
            9720
          ]
        ],
        "resolvedPriceRequestIds": [
          "0x84652155397d434717ac79a3360312d09eadd05f03fd7ea849e85d5b499984af",
          "0xcdbcf6810ad1ca548e3824411ec6fdafe42cee09f1c5624edc2b2a03eee5cf7a",
          "0x1ebf6f9eb66a2dde4e9c3c8f83aa23bacda5b7438b57778f289a7a2788e51b80",
          "0x18709d11510a60558eb759461d8bd25f7980d8ea9b5f39bdb412bc68fe23c31b",
          "0xccb635c902b35077eb61ad4b1cc1028f931df70230263db4beb1e77893174808"
        ],
        "rewardPerToken": "626331916314668974",
        "rewardPerTokenStored": "626330567478044042",
        "rounds": [
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0]
        ],
        "slashingLibrary": "0x9a406ba5a99983250Fd663947b3c968D387ce5cd",
        "spat": "650000000000000000",
        "UINT64_MAX": "18446744073709551615",
        "unstakeCoolDown": 604800,
        "voteTiming": 86400,
        "votingToken": "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828"
      },
      "errors": {
        "getRoundEndTime": "Processing error occurred.",
        "pendingPriceRequestsIds": "Processing error occurred.",
        "requestSlashingTrackers": "Processing error occurred.",
        "resolvedPriceRequestIds": "Processing error occurred.",
        "rounds": "Processing error occurred."
      },
      "implementationNames": {
        "0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac": "VotingV2"
      }
    },
    {
      "name": "Zora_Adapter",
      "address": "0x024F2fC31CBDD8de17194b1892c834f98Ef5169b",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x6d9e4b79712a4e81c51941fb986f4c55774da36be108106577ca01ccb35a0f87"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1723462727,
      "sinceBlock": 20512287,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0x3e2Ea9B92B7E48A52296fD261dc26fd995284631",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0xdC40a14d9abd6F410226f1E6de71aE03441ca506",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "0x024F2fC31CBDD8de17194b1892c834f98Ef5169b": "Zora_Adapter"
      }
    },
    {
      "address": "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Soneium_Adapter",
      "address": "0x0c9d064523177dBB55CFE52b9D0c485FBFc35FD2",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0xa11a006e88b4bc29596c25023695ef9026e9dc97dfd50ba059ee6b3e23a44008"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1736551439,
      "sinceBlock": 21597341,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_OP_USDC_BRIDGE": "0xC67A8c5f22b40274Ca7C4A56Db89569Ee2AD3FAb",
        "L1_STANDARD_BRIDGE": "0xeb9bf100225c214Efc3E7C651ebbaDcF85177607",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x9CF951E3F74B644e621b36Ca9cea147a78D4c39f",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0x0c9d064523177dBB55CFE52b9D0c485FBFc35FD2": "OP_Adapter"
      }
    },
    {
      "name": "Arbitrum_Adapter",
      "address": "0x100EDfCf3af2B4625Fca4EaF6C533703e71F7210",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0xa1c171564a6e837069132a07b8c6d217e08cf53cd6a43151a7f497440d2f1e33"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1732204763,
      "sinceBlock": 21237154,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "L1_DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "L1_ERC20_GATEWAY_ROUTER": "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef",
        "L1_INBOX": "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
        "L2_CALL_VALUE": 0,
        "L2_GAS_PRICE": 5000000000,
        "L2_MAX_SUBMISSION_COST": "10000000000000000",
        "L2_REFUND_L2_ADDRESS": "0x07aE8551Be970cB1cCa11Dd7a11F47Ae82e70E67",
        "recipientCircleDomainId": 3,
        "RELAY_MESSAGE_L2_GAS_LIMIT": 2000000,
        "RELAY_TOKENS_L2_GAS_LIMIT": 300000,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0x100EDfCf3af2B4625Fca4EaF6C533703e71F7210": "Arbitrum_Adapter"
      }
    },
    {
      "address": "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Redstone_Adapter",
      "address": "0x188F8C95B7cfB7993B53a4F643efa687916f73fA",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x0c32a0cfde3cb87843b5521bf184be1dd2b0031a8e91c2bc7885a2e10db010c1"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1722504155,
      "sinceBlock": 20432774,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0xc473ca7E02af24c129c2eEf51F2aDf0411c1Df69",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x592C1299e0F8331D81A28C0FC7352Da24eDB444a",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "0x188F8C95B7cfB7993B53a4F643efa687916f73fA": "Redstone_Adapter"
      }
    },
    {
      "name": "HubPoolStore",
      "address": "0x1Ace3BbD69b63063F859514Eca29C9BDd8310E61",
      "type": "Contract",
      "sourceHashes": [
        "0x64b6ef7e9493ba6f142060c8e818ecec991f8f8044b1713489114bec6633a256"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1745854319,
      "sinceBlock": 22368469,
      "values": {
        "$immutable": true,
        "hubPool": "0xc186fA914353c44b2E33eBE05f21846F1048bEda"
      },
      "implementationNames": {
        "0x1Ace3BbD69b63063F859514Eca29C9BDd8310E61": "HubPoolStore"
      }
    },
    {
      "address": "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Universal_Adapter",
      "address": "0x22001f37B586792F25Ef9d19d99537C6446e0833",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x45811d7c7fb7a921f66322f37a63fe336a5df0b31563d9ad40192b65a612b905"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1745855255,
      "sinceBlock": 22368546,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "cctpV2": false,
        "DATA_STORE": "0x1Ace3BbD69b63063F859514Eca29C9BDd8310E61",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0x22001f37B586792F25Ef9d19d99537C6446e0833": "Universal_Adapter"
      }
    },
    {
      "address": "0x2D509190Ed0172ba588407D4c2df918F955Cc6E1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Scroll_Adapter",
      "address": "0x2DA799c2223c6ffB595e578903AE6b95839160d8",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x56586e3315f76ed277970410b47da25a0980ca9400f2a97fd38139e2a1f2dc5e"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1745335811,
      "sinceBlock": 22325451,
      "values": {
        "$immutable": true,
        "L1_GATEWAY_ROUTER": "0xF8B1378579659D8F7EE5f3C929c2f3E332E41Fd6",
        "L1_SCROLL_MESSENGER": "0x6774Bcbd5ceCeF1336b5300fb5186a12DDD8b367",
        "L2_GAS_PRICE_ORACLE": "0x56971da63A3C0205184FEF096E9ddFc7A8C2D18a",
        "L2_MESSAGE_RELAY_GAS_LIMIT": 2000000,
        "L2_TOKEN_RELAY_GAS_LIMIT": 250000
      },
      "implementationNames": {
        "0x2DA799c2223c6ffB595e578903AE6b95839160d8": "Scroll_Adapter"
      }
    },
    {
      "name": "Boba_Adapter",
      "address": "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x9f8b082009430546d55daaa8e166eca77ef9ca17f7831f03de4635bdc4a32b31"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1651747441,
      "sinceBlock": 14716798,
      "values": {
        "$immutable": true,
        "l1StandardBridge": "0xdc1664458d2f0B6090bEa60A8793A4E66c2F1c00",
        "l1Weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "l2GasLimit": 2000000,
        "messenger": "0x6D4528d192dB72E282265D6092F4B872f9Dff69e"
      },
      "implementationNames": {
        "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3": "Boba_Adapter"
      }
    },
    {
      "name": "AcrossConfigStore",
      "address": "0x3B03509645713718B78951126E0A6de6f10043f5",
      "type": "Contract",
      "sourceHashes": [
        "0x926aa3c074cb5463671ec24c946524d9e03d3aa56a9847ca738b17b747c0e076"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1651752742,
      "sinceBlock": 14717196,
      "values": {
        "$immutable": true,
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715"
      },
      "implementationNames": {
        "0x3B03509645713718B78951126E0A6de6f10043f5": "AcrossConfigStore"
      }
    },
    {
      "address": "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Registry",
      "address": "0x3e532e6222afe9Bcf02DCB87216802c75D5113aE",
      "type": "Contract",
      "sourceHashes": [
        "0xc24ab9710d3eb0d1c35d298ecefe98096f87a672be7bd8051f9e86902122612f"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1587763861,
      "sinceBlock": 9937650,
      "values": {
        "$immutable": true,
        "getAllRegisteredContracts": [
          "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc",
          "0x3f2D9eDd9702909Cf1F8C4237B7c4c5931F9C944",
          "0x67DD35EaD67FcD184C8Ff6D0251DF4241F309ce1",
          "0x39450EB4f7DE57f2a25EeE548Ff392532cFB8759",
          "0xb56C5f1fB93b1Fbd7c473926c87B6B9c4d0e21d5",
          "0x4E3168Ea1082f3dda1694646B5EACdeb572009F1",
          "0xE1Ee8D4C5dBA1c221840c08f6Cf42154435B9D52",
          "0xc0b19570370478EDE5F2e922c5D31FAf1D5f90EA",
          "0xaBBee9fC7a882499162323EEB7BF6614193312e3",
          "0x3605Ec11BA7bD208501cbb24cd890bC58D2dbA56",
          "0x306B19502c833C1522Fbc36C9dd7531Eda35862B",
          "0x1477C532A5054e0879EaFBD6004208c2065Bc21f",
          "0x3a93E863cb3adc5910E6cea4d51f132E8666654F",
          "0x516f595978D87B67401DaB7AfD8555c3d28a3Af4",
          "0xeFA41F506EAA5c24666d4eE40888bA18FA60a1c7",
          "0xC843538d70ee5d28C5A80A75bb94C28925bB1cf2",
          "0xf32219331A03D99C98Adf96D43cc312353003531",
          "0x4AA79c00240a2094Ff3fa6CF7c67f521f32D84a2",
          "0xECFE06574B4A23A6476AD1f2568166BD1857E7c5",
          "0xE4256C47a3b27a969F25de8BEf44eCA5F2552bD5",
          "0x1c3f1A342c8D9591D9759220d114C685FD1cF6b8",
          "0xEAA081a9fad4607CdF046fEA7D4BF3DfEf533282",
          "0x2E918f0F18A69CFda3333C146A81e8100C85D8B0",
          "0xfA3AA7EE08399A4cE0B4921c85AB7D645Ccac669",
          "0xCA44D9e1eB0b27A0B56CdbebF4198DE5C2e6F7D0",
          "0xa1005DB6516A097E562ad7506CF90ebb511f5604",
          "0x45c4DBD73294c5d8DDF6E5F949BE4C505E6E9495",
          "0xd6fc1A7327210b7Fe33Ef2514B44979719424A1d",
          "0xda0943251079eB9f517668fdB372fC6AE299D898",
          "0xf215778F3a5e7Ab6A832e71d87267Dd9a9aB0037",
          "0xeAddB6AD65dcA45aC3bB32f88324897270DA0387",
          "0x267D46e71764ABaa5a0dD45260f95D9c8d5b8195",
          "0xd81028a6fbAAaf604316F330b20D24bFbFd14478",
          "0x2862A798B3DeFc1C24b9c0d241BEaF044C45E585",
          "0x94C7cab26c04B76D9Ab6277a0960781b90f74294",
          "0x7c4090170aeADD54B1a0DbAC2C8D08719220A435",
          "0xaD3cceebeFfCdC3576dE56811d0A6D164BF9A5A1",
          "0xaB3Aa2768Ba6c5876B2552a6F9b70E54aa256175",
          "0x48546bDD57D34Cb110f011Cdd1CcaaE75Ee17a70",
          "0x182d5993106573A95a182AB3A77c892713fFDA56",
          "0xD50fbace72352C2e15E0986b8Ad2599627B5c340",
          "0x14a046c066266da6b8b8C4D2de4AfBEeCd53a262",
          "0x496B179D5821d1a8B6C875677e3B89a9229AAB77",
          "0x287a1bA52e030459F163f48b2Ae468a085003A07",
          "0x5A7f8F8B0E912BBF8525bc3fb2ae46E70Db9516B",
          "0x4F1424Cef6AcE40c0ae4fc64d74B734f1eAF153C",
          "0xb33E3b8f5a172776730B0945206D6f75a2491307",
          "0x4E2697b3deEc9Cac270Be97e254EC1a791588770",
          "0xCdf99b9acE35e6414d802E97ed75ecfEe99A6f62",
          "0xF796059731942aB6317E1bD5a8E98eF1f6D345b1",
          "0xdf739f0219fA1A9288fc4c790304c8a3E928544C",
          "0x9E929a85282fB0555C19Ed70942B952827Ca4B0B",
          "0x384e239a2B225865558774b005C3d6eC29f8cE70",
          "0x4E8d60A785c2636A63c5Bd47C7050d21266c8B43",
          "0x6618Ff5a7dcea49F1AADA3BaFde3e87fe28D1303",
          "0x964Be01cCe200e168c4ba960a764cBEBa8C01200",
          "0x9bB1f39b6DB45BD087046385a43EAb7b60C52e7D",
          "0x0388f65C185a7E7D857BB142185381d97a4bc747",
          "0x161fa1ac2D93832C3F77c8b5879Cb4dC56d958a7",
          "0x14A415Dd90B63c791C5dc544594605c8bC13Bc8D",
          "0x1066E9D2E372d01A0F57bB6f231D34Ce4CEd228e",
          "0xa24Ba528Be99024f7F7C227b55cBb265ecf0C078",
          "0xd60139B287De1408f8388f5f57fC114Fb4B03328",
          "0x8E51Ad4EeB19693751a9A3E36b8F098D891Ddc7f",
          "0x144A3290C9Db859939F085E3EC9A5C321FC713aF",
          "0xDB2E7F6655de37822c3020a8988351CC76caDAD5",
          "0x6DA66C15823cFf681DaD6963fBD325a520362958",
          "0xb82756f9853A148A2390a08AaD30BabCDc22f068",
          "0xdF68acF496Db55f4A882a0371c489D739173fbEc",
          "0x02bD62088A02668F29102B06E4925791Cd0fe4C5",
          "0x45788a369f3083c02b942aEa02DBa25C466a773F",
          "0x52f83ACA94904b3590669E3525d25ec75cDFf798",
          "0xfDF90C4104c1dE34979235e6AE080528266a14a3",
          "0xb40BA94747c59d076B3c189E3A031547492013da",
          "0x46f5E363e69798a74c8422BFb9EDB63e3FB0f08a",
          "0x8F92465991e1111F012F24A55AE2B0742F82dd7b",
          "0x885c5fCB4D3B574A39f6750F962a3b52600ad728",
          "0xd9af2d7E4cF86aAfBCf688a47Bd6b95Da9F7c838",
          "0x0f4e2a456aAfc0068a0718E3107B88d2e8f2bfEF",
          "0x312Ecf2854f73a3Ff616e3CDBC05E2Ff6A98d1f0",
          "0x0Ee5Bb3dEAe8a44FbDeB269941f735793F8312Ef",
          "0xCef85b352CCD7a446d94AEeeA02dD11622289954",
          "0x56BaBEcb3dCaC063697fE38AB745c10181c56fA6",
          "0x4F8d7bFFe8a2428A313b737001311Ad302a60dF4",
          "0x10E018C01792705BefB7A757628C2947E38B9426",
          "0xb2AEa0DE92Acff7e1146333F776db42E5d004128",
          "0x0D1bA751BaDe6d7BB54CF4F05D2dC0A9f45605e5",
          "0x0759883acF042A54fAb083378b0395F773A79767",
          "0x32F0405834C4b50be53199628C45603Cea3A28aA",
          "0xC9E6C106C65eDD67C83CC6e3bCd18bf8d2Ebf182",
          "0x9c9Ee67586FaF80aFE147306FB858AF4Ec2212a4",
          "0x12d21cb3E544de60Edb434A43ae7ef0715bee6cc",
          "0xeCFe987D8C103a3EC2041774E4514ED0614fB42C",
          "0x67F4deC415Ce95F8e66d63C926605d16f8d1b4e4",
          "0x7FBE19088B011A9dE0e3a327D7C681028F065616",
          "0xB1a3E5a8d642534840bFC50c6417F9566E716cc7",
          "0xC73a3831B4A91Ab05f9171c0ef0BEc9545cDeCf5",
          "0xbc044745F137D4693c2Aa823C760f855254faD42",
          "0xF8eF02C10C473CA5E48b10c62ba4d46115dd2288",
          "0x6F4DD6F2dD3aCb85e4903c3307e18A35D59537c0",
          "0x5917C41a355D16D3950FE12299Ce6DFc1b54cD54",
          "0x5fbD22d64A1bD27b77e0f9d6e8831510439e947A",
          "0xe79dd3BDfb7868DedD00108FecaF12F94eB113B8",
          "0xa1Da681EA4b03ab826D33B7a9774222Ae175322F",
          "0x77482A8488a1cA8EdFAc67277b0eB99591106f05",
          "0x73220345bD37C6897dA959AE6205254be5da4dD8",
          "0xdd0acE85FcdC46d6430C7F24d56A0A80277AD8D2",
          "0x7bc1476eeD521c083Ec84D2894a7B7f738c93b3b",
          "0xCbbA8c0645ffb8aA6ec868f6F5858F2b0eAe34DA",
          "0xeF4Db4AF6189aae295a680345e07E00d25ECBAAb",
          "0x10D00f5788C39a2Bf248ADfa2863Fa55d83dcE36",
          "0x8484381906425E3AFe30CDD48bFc4ed7CC1499D4",
          "0xeE44aE0cff6E9E62F26add74784E573bD671F144",
          "0xee7f8088d2e67C5b10EB94732F4bB6E26968AC82",
          "0xb9942AA8983d41e53b68209BeA596A6004321E77",
          "0x52B21a720D5eBeFc7EFA802c7DEAB7c08Eb10F39",
          "0x772665dce7b347A867F42bcA93587b5400Ae2576",
          "0x2dE7A5157693a895ae8E55b1e935e23451a77cB3",
          "0xcA9C3d3fA9419C49465e04C49dD38C054fD94712",
          "0xc07dE54Aa905A644Ab67F6E3b0d40150Bf825Ca3",
          "0x4e3Decbb3645551B8A19f0eA1678079FCB33fB4c",
          "0xbD1463F02f61676d53fd183C2B19282BFF93D099",
          "0x767058F11800FBA6A682E73A6e79ec5eB74Fac8c",
          "0x799c9518Ea434bBdA03d4C0EAa58d644b768d3aB",
          "0x1C7a921808a8054C7ac2a3A3112823803eC97Ce4",
          "0x60E5db98d156B68bC079795096D8599d12F2DcA6",
          "0x91436EB8038ecc12c60EE79Dfe011EdBe0e6C777",
          "0xC43767F4592DF265B4a9F1a398B97fF24F38C6A6",
          "0xe7B0D6A9943bB8CD8cd323368450AD74474bB1b7",
          "0xcA2531b9CD04daf0c9114D853e7A83D8528f20bD",
          "0x7C62e5c39b7b296f4f2244e7EB51bea57ed26e4B",
          "0xf35a80E4705C56Fd345E735387c3377baCcd8189",
          "0x4060dBA72344DA74EDaEEAe51a71a57F7E96b6b4",
          "0xeE3Afe347D5C74317041E2618C49534dAf887c24",
          "0x8fE658AeB8d55fd1F3E157Ff8B316E232ffFF372",
          "0x226726Ac52e6e948D1B7eA9168F9Ff2E27DbcbB5",
          "0x34dF79AB1F3Cb70445834e71D725f83A6d3e03eb",
          "0xbCA5D4BF2bE2f18a964334A378219CAaB192F0BF",
          "0x89477Dd602f69c59Eb6B8e5C059F041a32ae4017",
          "0xA0Ae6609447e57a42c51B50EAe921D701823FFAe",
          "0xC75dd1b2A04d5aFF1E2779Ccc5624174a2c8cb7f",
          "0x86838871562B82C071ec57F7CA50879532678F42",
          "0xFEc7C6AA64fDD17f456028e0B411f5c3877ADa5e",
          "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
          "0x50efaC9619225d7fB4703C5872da978849B6E7cC",
          "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "0x9B40E25dDd4518F36c50ce8AEf53Ee527419D55d"
        ],
        "getMember": ["0x7b292034084A41B9D441B71b6E3557Edd0463fa8"],
        "registeredContracts": [
          "0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc",
          "0x3f2D9eDd9702909Cf1F8C4237B7c4c5931F9C944",
          "0x67DD35EaD67FcD184C8Ff6D0251DF4241F309ce1",
          "0x39450EB4f7DE57f2a25EeE548Ff392532cFB8759",
          "0xb56C5f1fB93b1Fbd7c473926c87B6B9c4d0e21d5"
        ]
      },
      "errors": { "registeredContracts": "Processing error occurred." },
      "implementationNames": {
        "0x3e532e6222afe9Bcf02DCB87216802c75D5113aE": "Registry"
      }
    },
    {
      "name": "Finder",
      "address": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
      "type": "Contract",
      "template": "acrossv3/Finder",
      "sourceHashes": [
        "0x6b81a32a0de6b3e8ed743f089a6518d3791b0e4d373300269439642482338ddb"
      ],
      "proxyType": "immutable",
      "description": "Maps interface names to contract addresses.",
      "sinceTimestamp": 1578580941,
      "sinceBlock": 9247083,
      "values": {
        "$immutable": true,
        "isOwner": false,
        "namedAddresses": [
          {
            "name": "Oracle",
            "address": "0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac"
          },
          {
            "name": "Registry",
            "address": "0x3e532e6222afe9Bcf02DCB87216802c75D5113aE"
          },
          {
            "name": "FinancialContractsAdmin",
            "address": "0x4E6CCB1dA3C7844887F9A5aF4e8450d9fd90317A"
          },
          {
            "name": "Store",
            "address": "0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF"
          },
          {
            "name": "IdentifierWhitelist",
            "address": "0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570"
          },
          {
            "name": "CollateralWhitelist",
            "address": "0xdBF90434dF0B98219f87d112F37d74B1D90758c7"
          },
          {
            "name": "OptimisticOracle",
            "address": "0xC43767F4592DF265B4a9F1a398B97fF24F38C6A6"
          },
          {
            "name": "SkinnyOptimisticOracle",
            "address": "0xeE3Afe347D5C74317041E2618C49534dAf887c24"
          },
          {
            "name": "OptimisticOracleV2",
            "address": "0xA0Ae6609447e57a42c51B50EAe921D701823FFAe"
          },
          {
            "name": "OptimisticAsserter",
            "address": "0x0000000000000000000000000000000000000000"
          },
          {
            "name": "OptimisticOracleV3",
            "address": "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE"
          }
        ],
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "implementationNames": {
        "0x40f941E48A552bF496B154Af6bf55725f18D77c3": "Finder"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "0x4f7261636c650000000000000000000000000000000000000000000000000000": "Oracle",
            "0x5265676973747279000000000000000000000000000000000000000000000000": "Registry",
            "0x46696e616e6369616c436f6e74726163747341646d696e000000000000000000": "FinancialContractsAdmin",
            "0x53746f7265000000000000000000000000000000000000000000000000000000": "Store",
            "0x4964656e74696669657257686974656c69737400000000000000000000000000": "IdentifierWhitelist",
            "0x436f6c6c61746572616c57686974656c69737400000000000000000000000000": "CollateralWhitelist",
            "0x4f7074696d69737469634f7261636c6500000000000000000000000000000000": "OptimisticOracle",
            "0x536b696e6e794f7074696d69737469634f7261636c6500000000000000000000": "SkinnyOptimisticOracle",
            "0x4f7074696d69737469634f7261636c6556320000000000000000000000000000": "OptimisticOracleV2",
            "0x4f7074696d697374696341737365727465720000000000000000000000000000": "OptimisticAsserter",
            "0x4f7074696d69737469634f7261636c6556330000000000000000000000000000": "OptimisticOracleV3"
          }
        }
      ]
    },
    {
      "name": "PolygonTokenBridger",
      "address": "0x48d990AbDA20afa1fD1da713AbC041B60a922c65",
      "type": "Contract",
      "sourceHashes": [
        "0xe3c561b96bc217e32abfe2230f61c22a385dde4d3fcc87ecda9703b78fc89e75"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1651578198,
      "sinceBlock": 14704448,
      "values": {
        "$immutable": true,
        "destination": "0x6Bb9910c5529Cb3b32c4f0e13E8bC38F903b2534",
        "l1ChainId": 1,
        "l1PolygonRegistry": "0x33a02E6cC863D393d6Bf231B697b82F6e499cA71",
        "l1Weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "l2ChainId": 137,
        "l2WrappedMatic": "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
        "maticToken": "0x0000000000000000000000000000000000001010"
      },
      "implementationNames": {
        "0x48d990AbDA20afa1fD1da713AbC041B60a922c65": "PolygonTokenBridger"
      }
    },
    {
      "name": "FinancialContractsAdmin",
      "address": "0x4E6CCB1dA3C7844887F9A5aF4e8450d9fd90317A",
      "type": "Contract",
      "sourceHashes": [
        "0x95f1ab2809d91e5ce5b81756f62205f179e0a97a919658683d96463c2dd03f76"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1587764093,
      "sinceBlock": 9937664,
      "values": {
        "$immutable": true,
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "implementationNames": {
        "0x4E6CCB1dA3C7844887F9A5aF4e8450d9fd90317A": "FinancialContractsAdmin"
      }
    },
    {
      "address": "0x4e8E101924eDE233C13e2D8622DC8aED2872d505",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Ethereum_Adapter",
      "address": "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x14afbe84cefefdcb06132c680d267b8892f0834a39fc23ca0ea563758653a21a"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1651577227,
      "sinceBlock": 14704381,
      "values": { "$immutable": true },
      "implementationNames": {
        "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084": "Ethereum_Adapter"
      }
    },
    {
      "name": "Store",
      "address": "0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF",
      "type": "Contract",
      "sourceHashes": [
        "0x6f43084dec3aeec07252527bcb44d7bfafac569030fc87e32d6a5661a0f3e0f1"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1587762539,
      "sinceBlock": 9937562,
      "values": {
        "$immutable": true,
        "fixedOracleFeePerSecondPerPfc": 0,
        "getCurrentTime": 1749244439,
        "getMember": [
          "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "0x2bAaA41d155ad8a4126184950B31F50A1513cE25"
        ],
        "SECONDS_PER_WEEK": 604800,
        "timerAddress": "0x0000000000000000000000000000000000000000",
        "weeklyDelayFeePerSecondPerPfc": 0
      },
      "implementationNames": {
        "0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF": "Store"
      }
    },
    {
      "name": "Linea_Adapter",
      "address": "0x5A44A32c13e2C43416bFDE5dDF5DCb3880c42787",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x0252bdb116e29cf6cc0b6de4ebf9589fcc53281458cb80f4db7a91a866d9eb46"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1743460115,
      "sinceBlock": 22169879,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x28b5a0e9C621a5BadaA536219b3a228C8168cf5d",
        "cctpV2": true,
        "L1_MESSAGE_SERVICE": "0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
        "L1_TOKEN_BRIDGE": "0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "recipientCircleDomainId": 11,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0x5A44A32c13e2C43416bFDE5dDF5DCb3880c42787": "Linea_Adapter"
      }
    },
    {
      "name": "Ethereum_SpokePool",
      "address": "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5",
      "type": "Contract",
      "sourceHashes": [
        "0x669da4e91a9ad0ca23205a174e7f8931e4d7d128453132164ba6458f11f15c72",
        "0x10d81ccfd26fbcb9926942a46436a7bedd3946646911a43f3f0e13dc7eb81517"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["numberOfDeposits", "getCurrentTime"],
      "sinceTimestamp": 1682355155,
      "sinceBlock": 17117454,
      "values": {
        "$admin": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "$implementation": "0x0190a2328e072Fc5a7fA00F6C9ae2a16c7F4E32a",
        "$pastUpgrades": [
          [
            "2023-04-24T16:52:35.000Z",
            "0x411ae8360c51beff3d6034ea63f03c41e6cf8b031432391fc44bc4f5a1b908ef",
            ["0xA667498F46457548f1D3ad557340b95Fdb290148"]
          ],
          [
            "2023-08-22T00:20:59.000Z",
            "0xceb5b11cd6c78b29d16d2c91bedcb4ec7467814fdce84a753f468c452c36c0d6",
            ["0x326510c1bf9d85Fb73d0AB8d20Aa5BbE9c7561e9"]
          ],
          [
            "2023-10-03T13:48:47.000Z",
            "0x946dec56639129cadd298ce5a44341b6f361c5c632f5dea2a80d9cb023b836c6",
            ["0x5ab0A812327aD959dE664AEC8408Ef8c6ABe7184"]
          ],
          [
            "2024-02-21T18:04:23.000Z",
            "0xf08778addb8376b0beb500bf569c6251eadc124e6aeeaf5f702ab1dbf576379f",
            ["0x90438AD3d81a0739ce1Cb20C73564682388c5FdD"]
          ],
          [
            "2024-03-18T13:40:47.000Z",
            "0x3ebfeeedb62ab726a1cb350595df3d4b2212f2fda619ae08015d16f304fc8332",
            ["0xa4D3535f33549749Fb97fA42903AC80F6fb54af6"]
          ],
          [
            "2024-05-15T15:11:59.000Z",
            "0xa604480755748d8162a3fb11442719682d473d868450e7460d9dd111a0b8903a",
            ["0x08C21b200eD06D2e32cEC91a770C3FcA8aD5F877"]
          ],
          [
            "2024-09-03T15:48:23.000Z",
            "0xd3cfc5a7476fd33d3d3fdc2d77adac2bf6900945f9a5c5f35f65b6507dde381f",
            ["0x48Dcf75EA18233BA947E4480dCd70594720449C1"]
          ],
          [
            "2025-01-29T00:44:11.000Z",
            "0x4d37ad20bb31cedba7434223e08229ca95fbfd32eaf2bcbd456af0d0a32bba8b",
            ["0xD576931ab0bDC3dfdc2c041d3C7b9d2ED0c6dd9a"]
          ],
          [
            "2025-02-07T14:46:47.000Z",
            "0xbea88935fe99b6faba60ee273a5eb146cd6c2d12decfef8842c5c719a0009376",
            ["0x0190a2328e072Fc5a7fA00F6C9ae2a16c7F4E32a"]
          ]
        ],
        "$upgradeCount": 9,
        "chainId": 1,
        "crossDomainAdmin": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "depositQuoteTimeBuffer": 3600,
        "EMPTY_RELAYER": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EMPTY_REPAYMENT_CHAIN_ID": 0,
        "fillDeadlineBuffer": 21600,
        "getCurrentTime": 1749244439,
        "INFINITE_FILL_DEADLINE": 4294967295,
        "MAX_EXCLUSIVITY_PERIOD_SECONDS": 31536000,
        "MAX_TRANSFER_SIZE": "1000000000000000000000000000000000000",
        "numberOfDeposits": 2688547,
        "owner": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "pausedDeposits": false,
        "pausedFills": false,
        "proxiableUUID": "EXPECT_REVERT",
        "UPDATE_ADDRESS_DEPOSIT_DETAILS_HASH": "0x9c6dfd61d811b9950a4f2b9adf46357b717c816d22c420d0bde8f2360148f7cd",
        "UPDATE_BYTES32_DEPOSIT_DETAILS_HASH": "0x8d1994e2bbbd77564cdca06dd819e7ee2a5efa06c80dcb59a4a7b6e39edc538f",
        "withdrawalRecipient": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "wrappedNativeToken": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "implementationNames": {
        "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5": "ERC1967Proxy",
        "0x0190a2328e072Fc5a7fA00F6C9ae2a16c7F4E32a": "Ethereum_SpokePool"
      }
    },
    {
      "name": "ZkStack_CustomGasToken_Adapter",
      "address": "0x5e0B7e20a77BDf11812837D30F1326068Bcf24Cf",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x949e41ae655aafeb048cfa1c491186b6582bd4f6028227ed0ce17a012456e675"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1746029159,
      "sinceBlock": 22382942,
      "values": {
        "$immutable": true,
        "BRIDGE_HUB": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "cctpV2": false,
        "CHAIN_ID": 232,
        "CUSTOM_GAS_TOKEN": "0x1ff1dC3cB9eeDbC6Eb2d99C03b30A05cA625fB5a",
        "CUSTOM_GAS_TOKEN_FUNDER": "0x0d57392895Db5aF3280e9223323e20F3951E81B1",
        "L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT": 800,
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 2000000,
        "L2_REFUND_ADDRESS": "0x07aE8551Be970cB1cCa11Dd7a11F47Ae82e70E67",
        "recipientCircleDomainId": 4294967295,
        "USDC_SHARED_BRIDGE": "0xf553E6D903AA43420ED7e3bc2313bE9286A8F987",
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0x5e0B7e20a77BDf11812837D30F1326068Bcf24Cf": "ZkStack_CustomGasToken_Adapter"
      }
    },
    {
      "address": "0x6f26Bf09B1C792e3228e5467807a900A503c0281",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Alephzero_Adapter",
      "address": "0x6F4083304C2cA99B077ACE06a5DcF670615915Af",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x1ccce681c671e5131c390787ccaa619eb4c4ee20d444e73484078b4770b12ea1"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1730926523,
      "sinceBlock": 21131132,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "CUSTOM_GAS_TOKEN": "0xdD0ae774F7E300CdAA4EA371cD55169665Ee6AFe",
        "CUSTOM_GAS_TOKEN_FUNDER": "0x0d57392895Db5aF3280e9223323e20F3951E81B1",
        "L1_ERC20_GATEWAY_ROUTER": "0xeBb17f398ed30d02F2e8733e7c1e5cf566e17812",
        "L1_INBOX": "0x56D8EC76a421063e1907503aDd3794c395256AEb",
        "L2_CALL_VALUE": 0,
        "L2_GAS_PRICE": 240000000000,
        "L2_MAX_SUBMISSION_COST": "10000000000000000",
        "L2_REFUND_L2_ADDRESS": "0x07aE8551Be970cB1cCa11Dd7a11F47Ae82e70E67",
        "NATIVE_TOKEN_DECIMALS": 18,
        "recipientCircleDomainId": 4294967295,
        "RELAY_MESSAGE_L2_GAS_LIMIT": 2000000,
        "RELAY_TOKENS_L2_GAS_LIMIT": 300000,
        "usdcToken": "0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "0x6F4083304C2cA99B077ACE06a5DcF670615915Af": "Arbitrum_CustomGasToken_Adapter"
      }
    },
    {
      "name": "GovernorV2",
      "address": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
      "type": "Contract",
      "sourceHashes": [
        "0xdf7f17e5c8ba1f0103fcfaf495da624089f8bfb3d5052217537bb064ca8c60b9"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["getCurrentTime", "numProposals"],
      "sinceTimestamp": 1677230459,
      "sinceBlock": 16697276,
      "values": {
        "$immutable": true,
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getCurrentTime": 1749244439,
        "getMember": [
          "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "0x50efaC9619225d7fB4703C5872da978849B6E7cC",
          "0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748"
        ],
        "numProposals": 210
      },
      "implementationNames": {
        "0x7b292034084A41B9D441B71b6E3557Edd0463fa8": "GovernorV2"
      }
    },
    {
      "name": "LpTokenFactory",
      "address": "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
      "type": "Contract",
      "sourceHashes": [
        "0x54ab5e1f981929fca37e28c313db9ab35343de3df6907dbaeb29dda3840aadcd"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1651576251,
      "sinceBlock": 14704307,
      "values": { "$immutable": true },
      "implementationNames": {
        "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d": "LpTokenFactory"
      }
    },
    {
      "address": "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Ink_Adapter",
      "address": "0x7e90A40c7519b041A7DF6498fBf5662e8cFC61d2",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0xa11a006e88b4bc29596c25023695ef9026e9dc97dfd50ba059ee6b3e23a44008"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1734635711,
      "sinceBlock": 21438590,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_OP_USDC_BRIDGE": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0x88FF1e5b602916615391F55854588EFcBB7663f0",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x69d3Cf86B2Bf1a9e99875B7e2D9B6a84426c171f",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0x7e90A40c7519b041A7DF6498fBf5662e8cFC61d2": "OP_Adapter"
      }
    },
    {
      "address": "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x868CF19464e17F76D6419ACC802B122c22D2FD34",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OptimisticGovernor",
      "address": "0x8692B776d1Ff0664177c90465038056Dc64f8991",
      "type": "Contract",
      "sourceHashes": [
        "0xcecd27c998c8fd83d7532693da2bdff346a1dbedbaab4744f21d2bcf1986e9de"
      ],
      "proxyType": "gnosis safe zodiac module",
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "ethereum:0xB524735356985D2f267FA010D681f061DfF03715",
          "role": ".GnosisSafe_modules"
        }
      ],
      "sinceTimestamp": 1683067175,
      "sinceBlock": 17176107,
      "values": {
        "$immutable": false,
        "avatar": "0xB524735356985D2f267FA010D681f061DfF03715",
        "bondAmount": "2000000000000000000",
        "collateral": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "escalationManager": "0x0000000000000000000000000000000000000000",
        "EXPLANATION_KEY": "0x6578706c616e6174696f6e",
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getGuard": "0x0000000000000000000000000000000000000000",
        "getProposalBond": "2000000000000000000",
        "guard": "0x0000000000000000000000000000000000000000",
        "identifier": "0x4153534552545f54525554480000000000000000000000000000000000000000",
        "liveness": 172800,
        "optimisticOracleV3": "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "PROPOSAL_HASH_KEY": "0x70726f706f73616c48617368",
        "rules": "I assert that this transaction proposal is valid according to the following rules: Proposals approved on Snapshot, as verified at https://snapshot.org/#/acrossprotocol.eth, are valid as long as there is a minimum quorum of 6000000 and a minimum voting period of 72 hours and it does not appear that the Snapshot voting system is being exploited or is otherwise unavailable. The quorum and voting period are minimum requirements for a proposal to be valid. Quorum and voting period values set for a specific proposal in Snapshot should be used if they are more strict than the rules parameter. The explanation included with the on-chain proposal must be the unique IPFS identifier for the specific Snapshot proposal that was approved or a unique identifier for a proposal in an alternative voting system approved by DAO social consensus if Snapshot is being exploited or is otherwise unavailable.",
        "RULES_KEY": "0x72756c6573",
        "target": "0xB524735356985D2f267FA010D681f061DfF03715",
        "ZodiacModule_avatar": "0xB524735356985D2f267FA010D681f061DfF03715",
        "ZodiacModule_guard": "0x0000000000000000000000000000000000000000",
        "ZodiacModule_modules": [],
        "ZodiacModule_target": "0xB524735356985D2f267FA010D681f061DfF03715"
      },
      "implementationNames": {
        "0x8692B776d1Ff0664177c90465038056Dc64f8991": "OptimisticGovernor"
      }
    },
    {
      "name": "WorldChain_Adapter",
      "address": "0x8bbdD67102D743b8533c1277a4ffdA04Dea158D1",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x1cb72676cfb98558060e29bb95cd793731c85797f35025b1f2dfb383499f55a3"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1748983475,
      "sinceBlock": 22626594,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x28b5a0e9C621a5BadaA536219b3a228C8168cf5d",
        "cctpV2": true,
        "L1_STANDARD_BRIDGE": "0x470458C91978D2d929704489Ad730DC3E3001113",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0xf931a81D18B1766d15695ffc7c1920a62b7e710a",
        "recipientCircleDomainId": 14,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0x8bbdD67102D743b8533c1277a4ffdA04Dea158D1": "WorldChain_Adapter"
      }
    },
    {
      "address": "0x9295ee1d8C5b022Be115A2AD3c30C72E34e7F096",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x9552a0a6624A23B848060AE5901659CDDa1f83f8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x996267d7d1B7f5046543feDe2c2Db473Ed4f65e9",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OptimisticOracleV2",
      "address": "0xA0Ae6609447e57a42c51B50EAe921D701823FFAe",
      "type": "Contract",
      "sourceHashes": [
        "0xdd1f9488cffd829d25348f551ab2dbfe747638fa227df49feaca3defe9dcdd09"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1654686988,
      "sinceBlock": 14926401,
      "values": {
        "$immutable": true,
        "ancillaryBytesLimit": 8192,
        "defaultLiveness": 7200,
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getCurrentTime": 1749244439,
        "OO_ANCILLARY_DATA_LIMIT": 8139,
        "timerAddress": "0x0000000000000000000000000000000000000000",
        "TOO_EARLY_RESPONSE": "-57896044618658097711785492504343953926634992332820282019728792003956564819968"
      },
      "implementationNames": {
        "0xA0Ae6609447e57a42c51B50EAe921D701823FFAe": "OptimisticOracleV2"
      }
    },
    {
      "name": "ZkStack_Adapter",
      "address": "0xA374585E6062517Ee367ee5044946A6fBe17724f",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x6b9289adba88945bc716d68cbdde1a68c52429766cef73d7c17fe4ca6dd7cc59"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1743426587,
      "sinceBlock": 22167105,
      "values": {
        "$immutable": true,
        "BRIDGE_HUB": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "CHAIN_ID": 324,
        "L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT": 800,
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 2000000,
        "L2_REFUND_ADDRESS": "0x07aE8551Be970cB1cCa11Dd7a11F47Ae82e70E67",
        "SHARED_BRIDGE": "0x8829AD80E425C646DAB305381ff105169FeEcE56"
      },
      "implementationNames": {
        "0xA374585E6062517Ee367ee5044946A6fBe17724f": "ZkStack_Adapter"
      }
    },
    {
      "name": "Polygon_Adapter",
      "address": "0xb4AeF0178f5725392A26eE18684C2aB62adc912e",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0xf598be4ed345b6b3e83e04dff2cb5472dc4df0b8476f8f74a4c75c473dee6347"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1716255695,
      "sinceBlock": 19915066,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "DEPOSIT_MANAGER": "0x401F6c983eA34274ec46f84D70b31C151321188b",
        "ERC20_PREDICATE": "0x40ec5B33f54e0E8A33A975908C5BA1c14e5BbbDf",
        "FX_STATE_SENDER": "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
        "L1_MATIC": "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "recipientCircleDomainId": 7,
        "ROOT_CHAIN_MANAGER": "0xA0c68C638235ee32657e8f720a23ceC1bFc77C77",
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0xb4AeF0178f5725392A26eE18684C2aB62adc912e": "Polygon_Adapter"
      }
    },
    {
      "name": "HubPool Multisig",
      "address": "0xB524735356985D2f267FA010D681f061DfF03715",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1636157803,
      "sinceBlock": 13559776,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
          "0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe",
          "0x996267d7d1B7f5046543feDe2c2Db473Ed4f65e9",
          "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
          "0x868CF19464e17F76D6419ACC802B122c22D2FD34"
        ],
        "$threshold": 3,
        "domainSeparator": "0xbb022dfb1fe065f2a2c6ea647af6240343ff4b980bc3c1183ecd630958c3b59e",
        "getChainId": 1,
        "GnosisSafe_modules": ["0x8692B776d1Ff0664177c90465038056Dc64f8991"],
        "multisigThreshold": "3 of 5 (60%)",
        "nonce": 333,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "0xB524735356985D2f267FA010D681f061DfF03715": "GnosisSafeProxy",
        "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "CoveredCallFinancialProductLibrary",
      "address": "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58",
      "type": "Contract",
      "sourceHashes": [
        "0x626fc280735c432e9187554bc59d556389dc73435f1b570e64f424d257f68d09"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1618347170,
      "sinceBlock": 12234012,
      "values": { "$immutable": true },
      "implementationNames": {
        "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58": "CoveredCallFinancialProductLibrary"
      }
    },
    {
      "name": "HubPool",
      "address": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
      "type": "Contract",
      "sourceHashes": [
        "0x3afa0a01f4cde6c678d6ec12443078407e69293b9a4519105445f694671b2dec"
      ],
      "proxyType": "immutable",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "ethereum:0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5",
          "role": "admin"
        }
      ],
      "ignoreInWatchMode": ["rootBundleProposal"],
      "sinceTimestamp": 1653167916,
      "sinceBlock": 14819537,
      "values": {
        "$immutable": true,
        "Adapters": {
          "1": "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
          "10": "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b",
          "56": "0x22001f37B586792F25Ef9d19d99537C6446e0833",
          "130": "0xFADcC43096756e1527306FD92982FEbBe3c629Fa",
          "137": "0xb4AeF0178f5725392A26eE18684C2aB62adc912e",
          "232": "0x5e0B7e20a77BDf11812837D30F1326068Bcf24Cf",
          "288": "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3",
          "324": "0xA374585E6062517Ee367ee5044946A6fBe17724f",
          "480": "0x8bbdD67102D743b8533c1277a4ffdA04Dea158D1",
          "690": "0x188F8C95B7cfB7993B53a4F643efa687916f73fA",
          "1135": "0xF039AdCC74936F90fE175e8b3FE0FdC8b8E0c73b",
          "1868": "0x0c9d064523177dBB55CFE52b9D0c485FBFc35FD2",
          "8453": "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c",
          "34443": "0xf1B59868697f3925b72889ede818B9E7ba0316d0",
          "41455": "0x6F4083304C2cA99B077ACE06a5DcF670615915Af",
          "42161": "0x100EDfCf3af2B4625Fca4EaF6C533703e71F7210",
          "57073": "0x7e90A40c7519b041A7DF6498fBf5662e8cFC61d2",
          "59144": "0x5A44A32c13e2C43416bFDE5dDF5DCb3880c42787",
          "81457": "0xF2bEf5E905AAE0295003ab14872F811E914EdD81",
          "534352": "0x2DA799c2223c6ffB595e578903AE6b95839160d8",
          "7777777": "0x024F2fC31CBDD8de17194b1892c834f98Ef5169b"
        },
        "bondAmount": "450000000000000000",
        "bondToken": "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea",
        "CrossChainContracts": {
          "1": "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5",
          "10": "0x6f26Bf09B1C792e3228e5467807a900A503c0281",
          "56": "0x4e8E101924eDE233C13e2D8622DC8aED2872d505",
          "130": "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
          "137": "0x9295ee1d8C5b022Be115A2AD3c30C72E34e7F096",
          "232": "0xe7cb3e167e7475dE1331Cf6E0CEb187654619E12",
          "288": "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58",
          "324": "0xE0B015E54d54fc84a6cB9B666099c46adE9335FF",
          "480": "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
          "690": "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97",
          "1135": "0x9552a0a6624A23B848060AE5901659CDDa1f83f8",
          "1868": "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
          "8453": "0x09aea4b2242abC8bb4BB78D537A67a245A7bEC64",
          "34443": "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
          "41455": "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97",
          "42161": "0xe35e9842fceaCA96570B734083f4a58e8F7C5f2A",
          "57073": "0xeF684C38F94F48775959ECf2012D7E864ffb9dd4",
          "59144": "0x7E63A5f1a8F0B4d0934B2f2327DAED3F6bb2ee75",
          "81457": "0x2D509190Ed0172ba588407D4c2df918F955Cc6E1",
          "534352": "0x3baD7AD0728f9917d1Bf08af5782dCbD516cDd96",
          "7777777": "0x13fDac9F9b4777705db45291bbFF3c972c6d1d97"
        },
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "identifier": "0x4143524f53532d56320000000000000000000000000000000000000000000000",
        "liveness": 3600,
        "lpFeeRatePerSecond": 1500000000000,
        "lpTokenFactory": "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "paused": false,
        "protocolFeeCaptureAddress": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
        "protocolFeeCapturePct": 0,
        "rootBundleProposal": {
          "poolRebalanceRoot": "0x956d401bd5661675a20169d8184539401883b70a14c36ac1db7583a7a8ccd803",
          "relayerRefundRoot": "0x7a6ca984bf7abeb417bd38ca86c5867fa82c753eb05b43882a962ea939be1e0e",
          "slowRelayRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "claimedBitMap": 0,
          "proposer": "0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c",
          "unclaimedPoolRebalanceLeafCount": 19,
          "challengePeriodEndTimestamp": 1749244211
        },
        "timerAddress": "0x0000000000000000000000000000000000000000",
        "weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "implementationNames": {
        "0xc186fA914353c44b2E33eBE05f21846F1048bEda": "HubPool"
      }
    },
    {
      "name": "OptimisticOracle",
      "address": "0xC43767F4592DF265B4a9F1a398B97fF24F38C6A6",
      "type": "Contract",
      "sourceHashes": [
        "0xf396c4025632e439a9c620010cef54a775abed2fd2fe6e4bcc7ca2e6a95a2df7"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1626104040,
      "sinceBlock": 12813254,
      "values": {
        "$immutable": true,
        "ancillaryBytesLimit": 8192,
        "defaultLiveness": 7200,
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getCurrentTime": 1749244439,
        "timerAddress": "0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "0xC43767F4592DF265B4a9F1a398B97fF24F38C6A6": "OptimisticOracle"
      }
    },
    {
      "address": "0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "IdentifierWhitelist",
      "address": "0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570",
      "type": "Contract",
      "sourceHashes": [
        "0xde400b9e12dee4cf61dc66db5e9da7fb6d736020292a92092de7ae2a6bff4cac"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1587764261,
      "sinceBlock": 9937679,
      "values": {
        "$immutable": true,
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "implementationNames": {
        "0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570": "IdentifierWhitelist"
      }
    },
    {
      "name": "AddressWhitelist",
      "address": "0xdBF90434dF0B98219f87d112F37d74B1D90758c7",
      "type": "Contract",
      "sourceHashes": [
        "0x34fe953eae62cfc4797c138b47bc03a1d268dc47ac86e5fce536da6e8bc1e195"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1595094721,
      "sinceBlock": 10484890,
      "values": {
        "$immutable": true,
        "getWhitelist": [
          "0x6B175474E89094C44Da98b954EedeAC495271d0F",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D",
          "0xeca82185adCE47f39c684352B0439f030f860318",
          "0x261b45D85cCFeAbb11F022eBa346ee8D1cd488c0",
          "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "0xdAC17F958D2ee523a2206206994597C13D831ec7",
          "0x758A43EE2BFf8230eeb784879CdcFF4828F2544D",
          "0xBD2F0Cd039E0BFcf88901C98c0bFAc5ab27566e3",
          "0x19D97D8fA813EE2f51aD4B4e04EA08bAf4DFfC28",
          "0x3832d2F059E55934220881F831bE501D180671A7",
          "0x967da4048cD07aB37855c090aAF366e4ce1b9F48",
          "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
          "0x0AaCfbeC6a24756c20D41914F2caba817C0d8521",
          "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
          "0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
          "0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828",
          "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
          "0xBb2b8038a1640196FbE3e38816F3e67Cba72D940",
          "0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc",
          "0xd3d2E2692501A5c9Ca623199D38826e513033a17",
          "0x88D97d199b9ED37C29D846d00D443De980832a22",
          "0xa117000000f279D81A1D3cc75430fAA017FA5A2e",
          "0x0954906da0Bf32d5479e25f46056d22f08464cab",
          "0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b",
          "0x6B3595068778DD592e39A122f4f5a5cF09C90fE2",
          "0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272",
          "0x0f7F961648aE6Db43C75663aC7E5414Eb79b5704",
          "0xba100000625a3754423978a60c9317c58a424e3D",
          "0x7e7E112A68d8D2E221E11047a72fFC1065c38e1a",
          "0x0000000000095413afC295d19EDeb1Ad7B71c952",
          "0x69af81e73A73B40adF4f3d4223Cd9b1ECE623074",
          "0x24A6A37576377F63f194Caa5F518a60f45b42921",
          "0xb753428af26E81097e7fD17f40c88aaA3E04902c",
          "0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421",
          "0x853d955aCEf822Db058eb8505911ED77F175b99e",
          "0x5F64Ab1544D28732F0A24F4713c2C8ec0dA089f0",
          "0x0258F474786DdFd37ABCE6df6BBb1Dd5dfC4434a",
          "0x0391D2021f89DC339F60Fff84546EA23E337750f",
          "0x69BbE2FA02b4D90A944fF328663667DC32786385",
          "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
          "0x1571eD0bed4D987fe2b498DdBaE7DFA19519F651",
          "0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9",
          "0xa47c8bf37f92aBed4A126BDA807A7b7498661acD",
          "0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C",
          "0x48Fb253446873234F2fEBbF9BdeAA72d9d387f94",
          "0xBA11D00c5f74255f56a5E366F4F77f5A186d7f55",
          "0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F",
          "0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44",
          "0x2ba592F78dB6436527729929AAf6c908497cB200",
          "0xC4C2614E694cF534D407Ee49F8E44D125E4681c4",
          "0xBBc2AE13b23d715c30720F079fcd9B4a74093505",
          "0x69e8b9528CABDA89fe846C67675B5D73d463a916",
          "0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c",
          "0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919",
          "0xc00e94Cb662C3520282E6f5717214004A7f26888",
          "0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e",
          "0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF",
          "0xa1faa113cbE53436Df28FF0aEe54275c13B40975",
          "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",
          "0x408e41876cCCDC0F92210600ef50372656052a38",
          "0xD533a949740bb3306d119CC777fa900bA034cd52",
          "0xD291E7a03283640FDc51b121aC401383A46cC623",
          "0x87d73E916D7057945c9BcD8cdd94e42A6F47f776",
          "0x888888435FDe8e7d4c54cAb67f206e4199454c60",
          "0x44564d0bd94343f72E3C8a0D22308B7Fa71DB0Bb",
          "0x3472A5A71965499acd81997a54BBA8D852C6E53d",
          "0x383518188C0C6d7730D91b2c03a03C837814a899",
          "0x875773784Af8135eA0ef43b5a374AaD105c5D39e",
          "0x6810e776880C02933D47DB1b9fc05908e5386b96",
          "0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e",
          "0xad32A8e6220741182940c5aBF610bDE99E737b2D",
          "0x956F47F50A910163D8BF957Cf5846D573E7f87CA",
          "0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B",
          "0xc770EEfAd204B5180dF6a14Ee197D99d808ee52d",
          "0xbEa98c05eEAe2f3bC8c3565Db7551Eb738c8CCAb",
          "0x8888801aF4d980682e47f1A9036e589479e835C5",
          "0x4104b135DBC9609Fc1A9490E61369036497660c8",
          "0xfe9A29aB92522D14Fc65880d817214261D8479AE",
          "0x86772b1409b61c639EaAc9Ba0AcfBb6E238e5F83",
          "0x6123B0049F904d730dB3C36a31167D9d4121fA6B",
          "0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198",
          "0x7815bDa662050D84718B988735218CFfd32f75ea",
          "0xbbBBBBB5AA847A2003fbC6b5C16DF0Bd1E725f61",
          "0x5166E09628b696285E3A151e84FB977736a83575",
          "0xB0e1fc65C1a741b4662B813eB787d369b8614Af1",
          "0xbC396689893D065F41bc2C6EcbeE5e0085233447",
          "0x3Ec8798B81485A254928B70CDA1cf0A2BB0B74D7",
          "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
          "0x6f40d4A6237C257fff2dB00FA0510DeEECd303eb",
          "0x8A9C67fee641579dEbA04928c4BC45F66e26343A",
          "0xD34a24006b862f4E9936c506691539D6433aD297",
          "0x0b15Ddf19D47E6a86A56148fb4aFFFc6929BcB89",
          "0xbA8A621b4a54e61C442F5Ec623687e2a942225ef",
          "0xc4E15973E6fF2A35cC804c2CF9D2a1b817a8b40F",
          "0x42bBFa2e77757C645eeaAd1655E0911a7553Efbc",
          "0xef5Fa9f3Dede72Ec306dfFf1A7eA0bB0A2F7046F",
          "0xaa61D5dec73971CD4a026ef2820bB87b4a4Ed8d6",
          "0x752Efadc0a7E05ad1BCCcDA22c141D01a75EF1e4",
          "0xEd1480d12bE41d92F36f5f7bDd88212E381A3677",
          "0xcAfE001067cDEF266AfB7Eb5A286dCFD277f3dE5",
          "0xDC59ac4FeFa32293A95889Dc396682858d52e5Db",
          "0xB0c7a3Ba49C7a6EaBa6cD4a96C55a1391070Ac9A",
          "0xa5f2211B9b8170F694421f2046281775E8468044",
          "0x44108f0223A3C3028F5Fe7AEC7f9bb2E66beF82F",
          "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea"
        ],
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "whitelistIndices": [
          "0x6B175474E89094C44Da98b954EedeAC495271d0F",
          "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D",
          "0xeca82185adCE47f39c684352B0439f030f860318",
          "0x261b45D85cCFeAbb11F022eBa346ee8D1cd488c0"
        ]
      },
      "errors": { "whitelistIndices": "Processing error occurred." },
      "implementationNames": {
        "0xdBF90434dF0B98219f87d112F37d74B1D90758c7": "AddressWhitelist"
      }
    },
    {
      "address": "0xE0B015E54d54fc84a6cB9B666099c46adE9335FF",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Base_Adapter",
      "address": "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x172a1f27f0fecf665d90a6adc1287223f05a73acd9ed19d9c446972880ccce0f"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1716255947,
      "sinceBlock": 19915087,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "L1_STANDARD_BRIDGE": "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x866E82a600A1414e583f7F13623F1aC5d58b0Afa",
        "recipientCircleDomainId": 6,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c": "Base_Adapter"
      }
    },
    {
      "name": "Optimism_Adapter",
      "address": "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x59784b70d01278196c00fbfe1f237b01ec891dca28b0542cdf8dcc9e672b3849"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1716255311,
      "sinceBlock": 19915034,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "DAI_OPTIMISM_BRIDGE": "0x10E6593CDda8c58a1d0f14C5164B376352a55f2F",
        "L1_STANDARD_BRIDGE": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "recipientCircleDomainId": 2,
        "SNX": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
        "SNX_OPTIMISM_BRIDGE": "0x39Ea01a0298C315d149a490E34B59Dbf2EC7e48F",
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b": "Optimism_Adapter"
      }
    },
    {
      "address": "0xe35e9842fceaCA96570B734083f4a58e8F7C5f2A",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xe7cb3e167e7475dE1331Cf6E0CEb187654619E12",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "BondToken",
      "address": "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea",
      "type": "Contract",
      "sourceHashes": [
        "0x1d9754ae4e99e4320201bbc6f0e19aa5ecac917dcacaadba3b70cfa018910754"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["totalSupply"],
      "sinceTimestamp": 1692831647,
      "sinceBlock": 17980554,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "hubPool": "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
        "name": "Across Bond Token",
        "owner": "0xB524735356985D2f267FA010D681f061DfF03715",
        "proposers": ["0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c"],
        "symbol": "ABT",
        "totalSupply": "28095402467539846062"
      },
      "implementationNames": {
        "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea": "BondToken"
      }
    },
    {
      "name": "UMAOptimisticOracle",
      "address": "0xeE3Afe347D5C74317041E2618C49534dAf887c24",
      "type": "Contract",
      "sourceHashes": [
        "0xbe561564083bf80216ae0f5510f70415cf97a624ef4bad88fb98a43dc4231dd6"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1635958318,
      "sinceBlock": 13545034,
      "values": {
        "$immutable": true,
        "ancillaryBytesLimit": 8192,
        "defaultLiveness": 7200,
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "timerAddress": "0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "0xeE3Afe347D5C74317041E2618C49534dAf887c24": "SkinnyOptimisticOracle"
      }
    },
    {
      "address": "0xeF684C38F94F48775959ECf2012D7E864ffb9dd4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Lisk_Adapter",
      "address": "0xF039AdCC74936F90fE175e8b3FE0FdC8b8E0c73b",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x9c8e20215aa548a11ed98c8333dbfbaa36143263b4de43d8f73a57b19ec7cea6"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1747138187,
      "sinceBlock": 22474211,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "cctpV2": false,
        "L1_OP_USDC_BRIDGE": "0xE3622468Ea7dD804702B56ca2a4f88C0936995e6",
        "L1_STANDARD_BRIDGE": "0x2658723Bf70c7667De6B25F99fcce13A16D25d08",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x31B72D76FB666844C41EdF08dF0254875Dbb7edB",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0xF039AdCC74936F90fE175e8b3FE0FdC8b8E0c73b": "OP_Adapter"
      }
    },
    {
      "name": "Mode_Adapter",
      "address": "0xf1B59868697f3925b72889ede818B9E7ba0316d0",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x1b1b271fd3f736024fda7dd869d78943819efee5dcbf6f4075af9647cfb16cac"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1716243911,
      "sinceBlock": 19914094,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_STANDARD_BRIDGE": "0x735aDBbE72226BD52e818E7181953f42E3b0FF21",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f",
        "recipientCircleDomainId": 0,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0xf1B59868697f3925b72889ede818B9E7ba0316d0": "Mode_Adapter"
      }
    },
    {
      "name": "Blast_Adapter",
      "address": "0xF2bEf5E905AAE0295003ab14872F811E914EdD81",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x596bdc0b39f0ff19cde625424cdc037dd3e79355ee2c845bd8a6e5e42b3bc332"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1719955511,
      "sinceBlock": 20221494,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0x0000000000000000000000000000000000000000",
        "L1_BLAST_BRIDGE": "0x3a05E5d33d7Ab3864D53aaEc93c8301C1Fa49115",
        "L1_DAI": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "L1_STANDARD_BRIDGE": "0x697402166Fbf2F22E970df8a6486Ef171dbfc524",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0",
        "recipientCircleDomainId": 4294967295,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0xF2bEf5E905AAE0295003ab14872F811E914EdD81": "Blast_Adapter"
      }
    },
    {
      "address": "0xf7bAc63fc7CEaCf0589F25454Ecf5C2ce904997c",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "DoctorWho_Adapter",
      "address": "0xFADcC43096756e1527306FD92982FEbBe3c629Fa",
      "type": "Contract",
      "template": "acrossv3/adapter",
      "sourceHashes": [
        "0x26a48559a60b482a96526e1ee27fef2111bb46e40395ee2122284141ffc30e14"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "L2_MESSAGE_RELAY_GAS_LIMIT",
        "L2_TOKEN_RELAY_GAS_LIMIT"
      ],
      "sinceTimestamp": 1738675907,
      "sinceBlock": 21773451,
      "values": {
        "$immutable": true,
        "cctpTokenMessenger": "0xBd3fa81B58Ba92a82136038B25aDec7066af3155",
        "L1_STANDARD_BRIDGE": "0x81014F44b0a345033bB2b3B21C7a1A308B35fEeA",
        "L1_WETH": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "L2_GAS_LIMIT": 200000,
        "MESSENGER": "0x9A3D64E386C18Cb1d6d5179a9596A4B5736e98A6",
        "recipientCircleDomainId": 10,
        "usdcToken": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "implementationNames": {
        "0xFADcC43096756e1527306FD92982FEbBe3c629Fa": "DoctorWho_Adapter"
      }
    },
    {
      "name": "OptimisticOracleV3",
      "address": "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
      "type": "Contract",
      "sourceHashes": [
        "0xfb2c9056673690384bb615fd326655f97b80fa2a5601a15a35065b0a68186ae7"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1676487275,
      "sinceBlock": 16636058,
      "values": {
        "$immutable": true,
        "burnedBondPercentage": "500000000000000000",
        "cachedOracle": "0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac",
        "defaultCurrency": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "defaultIdentifier": "0x4153534552545f54525554480000000000000000000000000000000000000000",
        "defaultLiveness": 7200,
        "finder": "0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "numericalTrue": "1000000000000000000",
        "owner": "0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "implementationNames": {
        "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE": "OptimisticOracleV3"
      }
    }
  ],
  "abis": {
    "0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac": [
      "constructor(uint128 _emissionRate, uint64 _unstakeCoolDown, uint64 _phaseLength, uint32 _maxRolls, uint32 _maxRequestsPerRound, uint128 _gat, uint64 _spat, address _votingToken, address _finder, address _slashingLibrary, address _previousVotingContract)",
      "event DelegateSet(address indexed delegator, address indexed delegate)",
      "event DelegatorSet(address indexed delegate, address indexed delegator)",
      "event EncryptedVote(address indexed caller, uint32 indexed roundId, bytes32 indexed identifier, uint256 time, bytes ancillaryData, bytes encryptedVote)",
      "event ExecutedUnstake(address indexed voter, uint128 tokensSent, uint128 voterStake)",
      "event GatAndSpatChanged(uint128 newGat, uint64 newSpat)",
      "event MaxRequestsPerRoundChanged(uint32 newMaxRequestsPerRound)",
      "event MaxRollsChanged(uint32 newMaxRolls)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RequestAdded(address indexed requester, uint32 indexed roundId, bytes32 indexed identifier, uint256 time, bytes ancillaryData, bool isGovernance)",
      "event RequestDeleted(bytes32 indexed identifier, uint256 indexed time, bytes ancillaryData, uint32 rollCount)",
      "event RequestResolved(uint32 indexed roundId, uint256 indexed resolvedPriceRequestIndex, bytes32 indexed identifier, uint256 time, bytes ancillaryData, int256 price)",
      "event RequestRolled(bytes32 indexed identifier, uint256 indexed time, bytes ancillaryData, uint32 rollCount)",
      "event RequestedUnstake(address indexed voter, uint128 amount, uint64 unstakeTime, uint128 voterStake)",
      "event SetNewEmissionRate(uint128 newEmissionRate)",
      "event SetNewUnstakeCoolDown(uint64 newUnstakeCoolDown)",
      "event SlashingLibraryChanged(address newAddress)",
      "event Staked(address indexed voter, address indexed from, uint128 amount, uint128 voterStake, uint128 voterPendingUnstake, uint128 cumulativeStake)",
      "event UpdatedReward(address indexed voter, uint128 newReward, uint64 lastUpdateTime)",
      "event VoteCommitted(address indexed voter, address indexed caller, uint32 roundId, bytes32 indexed identifier, uint256 time, bytes ancillaryData)",
      "event VoteRevealed(address indexed voter, address indexed caller, uint32 roundId, bytes32 indexed identifier, uint256 time, bytes ancillaryData, int256 price, uint128 numTokens)",
      "event VoterSlashApplied(address indexed voter, int128 slashedTokens, uint128 postStake)",
      "event VoterSlashed(address indexed voter, uint256 indexed requestIndex, int128 slashedTokens)",
      "event VotingContractMigrated(address newAddress)",
      "event WithdrawnRewards(address indexed voter, address indexed delegate, uint128 tokensWithdrawn)",
      "function ANCILLARY_BYTES_LIMIT() view returns (uint256)",
      "function UINT64_MAX() view returns (uint64)",
      "function commitAndEmitEncryptedVote(bytes32 identifier, uint256 time, bytes ancillaryData, bytes32 hash, bytes encryptedVote)",
      "function commitVote(bytes32 identifier, uint256 time, bytes ancillaryData, bytes32 hash)",
      "function cumulativeStake() view returns (uint128)",
      "function currentActiveRequests() view returns (bool)",
      "function delegateToStaker(address) view returns (address)",
      "function emissionRate() view returns (uint128)",
      "function executeUnstake()",
      "function finder() view returns (address)",
      "function gat() view returns (uint128)",
      "function getCurrentRoundId() view returns (uint32)",
      "function getCurrentTime() view returns (uint256)",
      "function getNumberOfPriceRequests() view returns (uint256 numberPendingPriceRequests, uint256 numberResolvedPriceRequests)",
      "function getNumberOfPriceRequestsPostUpdate() returns (uint256 numberPendingPriceRequests, uint256 numberResolvedPriceRequests)",
      "function getPendingRequests() view returns (tuple(uint32 lastVotingRound, bool isGovernance, uint64 time, uint32 rollCount, bytes32 identifier, bytes ancillaryData)[])",
      "function getPrice(bytes32 identifier, uint256 time, bytes ancillaryData) view returns (int256)",
      "function getPrice(bytes32 identifier, uint256 time) view returns (int256)",
      "function getPriceRequestStatuses(tuple(bytes32 identifier, uint256 time, bytes ancillaryData)[] requests) view returns (tuple(uint8 status, uint32 lastVotingRound)[])",
      "function getRoundEndTime(uint256 roundId) view returns (uint256)",
      "function getRoundIdToVoteOnRequest(uint32 targetRoundId) view returns (uint32)",
      "function getVotePhase() view returns (uint8)",
      "function getVoterFromDelegate(address caller) view returns (address)",
      "function getVoterParticipation(uint256 requestIndex, uint32 lastVotingRound, address voter) view returns (uint8)",
      "function getVoterPendingStake(address voter, uint32 roundId) view returns (uint128)",
      "function getVoterStakePostUpdate(address voter) returns (uint128)",
      "function hasPrice(bytes32 identifier, uint256 time) view returns (bool)",
      "function hasPrice(bytes32 identifier, uint256 time, bytes ancillaryData) view returns (bool)",
      "function lastRoundIdProcessed() view returns (uint32)",
      "function lastUpdateTime() view returns (uint64)",
      "function maxRequestsPerRound() view returns (uint32)",
      "function maxRolls() view returns (uint32)",
      "function migratedAddress() view returns (address)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function nextPendingIndexToProcess() view returns (uint64)",
      "function outstandingRewards(address voter) view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingPriceRequestsIds(uint256) view returns (bytes32)",
      "function previousVotingContract() view returns (address)",
      "function priceRequests(bytes32) view returns (uint32 lastVotingRound, bool isGovernance, uint64 time, uint32 rollCount, bytes32 identifier, bytes ancillaryData)",
      "function processResolvablePriceRequests()",
      "function processResolvablePriceRequestsRange(uint64 maxTraversals)",
      "function renounceOwnership()",
      "function requestGovernanceAction(bytes32 identifier, uint256 time, bytes ancillaryData)",
      "function requestPrice(bytes32 identifier, uint256 time, bytes ancillaryData)",
      "function requestPrice(bytes32 identifier, uint256 time)",
      "function requestSlashingTrackers(uint256 requestIndex) view returns (tuple(uint256 wrongVoteSlashPerToken, uint256 noVoteSlashPerToken, uint256 totalSlashed, uint256 totalCorrectVotes, uint32 lastVotingRound))",
      "function requestUnstake(uint128 amount)",
      "function resolvedPriceRequestIds(uint256) view returns (bytes32)",
      "function retrieveRewardsOnMigratedVotingContract(address voter, uint256 roundId, tuple(bytes32 identifier, uint256 time, bytes ancillaryData)[] toRetrieve) returns (uint256)",
      "function revealVote(bytes32 identifier, uint256 time, int256 price, bytes ancillaryData, int256 salt)",
      "function rewardPerToken() view returns (uint256)",
      "function rewardPerTokenStored() view returns (uint128)",
      "function rounds(uint256) view returns (address slashingLibrary, uint128 minParticipationRequirement, uint128 minAgreementRequirement, uint128 cumulativeStakeAtRound, uint32 numberOfRequestsToVote)",
      "function setDelegate(address delegate)",
      "function setDelegator(address delegator)",
      "function setEmissionRate(uint128 newEmissionRate)",
      "function setGatAndSpat(uint128 newGat, uint64 newSpat)",
      "function setMaxRequestPerRound(uint32 newMaxRequestsPerRound)",
      "function setMaxRolls(uint32 newMaxRolls)",
      "function setMigrated(address newVotingAddress)",
      "function setSlashingLibrary(address _newSlashingLibrary)",
      "function setUnstakeCoolDown(uint64 newUnstakeCoolDown)",
      "function slashingLibrary() view returns (address)",
      "function spat() view returns (uint64)",
      "function stake(uint128 amount)",
      "function stakeTo(address recipient, uint128 amount)",
      "function transferOwnership(address newOwner)",
      "function unstakeCoolDown() view returns (uint64)",
      "function updateTrackers(address voter)",
      "function updateTrackersRange(address voter, uint64 maxTraversals)",
      "function voteTiming() view returns (uint256 phaseLength)",
      "function voterStakes(address) view returns (uint128 stake, uint128 pendingUnstake, uint128 rewardsPaidPerToken, uint128 outstandingRewards, int128 unappliedSlash, uint64 nextIndexToProcess, uint64 unstakeTime, address delegate)",
      "function votingToken() view returns (address)",
      "function withdrawAndRestake() returns (uint128)",
      "function withdrawRewards() returns (uint128)"
    ],
    "0x0190a2328e072Fc5a7fA00F6C9ae2a16c7F4E32a": [
      "constructor(address _wrappedNativeTokenAddress, uint32 _depositQuoteTimeBuffer, uint32 _fillDeadlineBuffer)",
      "error ClaimedMerkleLeaf()",
      "error DepositsArePaused()",
      "error DisabledRoute()",
      "error ExpiredFillDeadline()",
      "error FillsArePaused()",
      "error InsufficientSpokePoolBalanceToExecuteLeaf()",
      "error InvalidBytes32()",
      "error InvalidChainId()",
      "error InvalidCrossDomainAdmin()",
      "error InvalidDepositorSignature()",
      "error InvalidExclusiveRelayer()",
      "error InvalidFillDeadline()",
      "error InvalidMerkleLeaf()",
      "error InvalidMerkleProof()",
      "error InvalidPayoutAdjustmentPct()",
      "error InvalidQuoteTimestamp()",
      "error InvalidRelayerFeePct()",
      "error InvalidSlowFillRequest()",
      "error InvalidWithdrawalRecipient()",
      "error LowLevelCallFailed(bytes data)",
      "error MaxTransferSizeExceeded()",
      "error MsgValueDoesNotMatchInputAmount()",
      "error NoRelayerRefundToClaim()",
      "error NoSlowFillsInExclusivityWindow()",
      "error NotEOA()",
      "error NotExclusiveRelayer()",
      "error RelayFilled()",
      "error WrongERC7683OrderId()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ClaimedRelayerRefund(bytes32 indexed l2TokenAddress, bytes32 indexed refundAddress, uint256 amount, address indexed caller)",
      "event EmergencyDeletedRootBundle(uint256 indexed rootBundleId)",
      "event EnabledDepositRoute(address indexed originToken, uint256 indexed destinationChainId, bool enabled)",
      "event ExecutedRelayerRefundRoot(uint256 amountToReturn, uint256 indexed chainId, uint256[] refundAmounts, uint32 indexed rootBundleId, uint32 indexed leafId, address l2TokenAddress, address[] refundAddresses, bool deferredRefunds, address caller)",
      "event FilledRelay(bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 repaymentChainId, uint256 indexed originChainId, uint256 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes32 exclusiveRelayer, bytes32 indexed relayer, bytes32 depositor, bytes32 recipient, bytes32 messageHash, tuple(bytes32 updatedRecipient, bytes32 updatedMessageHash, uint256 updatedOutputAmount, uint8 fillType) relayExecutionInfo)",
      "event FilledV3Relay(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 repaymentChainId, uint256 indexed originChainId, uint32 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, address exclusiveRelayer, address indexed relayer, address depositor, address recipient, bytes message, tuple(address updatedRecipient, bytes updatedMessage, uint256 updatedOutputAmount, uint8 fillType) relayExecutionInfo)",
      "event FundsDeposited(bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed destinationChainId, uint256 indexed depositId, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityDeadline, bytes32 indexed depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes message)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PausedDeposits(bool isPaused)",
      "event PausedFills(bool isPaused)",
      "event RelayedRootBundle(uint32 indexed rootBundleId, bytes32 indexed relayerRefundRoot, bytes32 indexed slowRelayRoot)",
      "event RequestedSlowFill(bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed originChainId, uint256 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes32 exclusiveRelayer, bytes32 depositor, bytes32 recipient, bytes32 messageHash)",
      "event RequestedSpeedUpDeposit(uint256 updatedOutputAmount, uint256 indexed depositId, bytes32 indexed depositor, bytes32 updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "event RequestedSpeedUpV3Deposit(uint256 updatedOutputAmount, uint32 indexed depositId, address indexed depositor, address updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "event RequestedV3SlowFill(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed originChainId, uint32 indexed depositId, uint32 fillDeadline, uint32 exclusivityDeadline, address exclusiveRelayer, address depositor, address recipient, bytes message)",
      "event SetWithdrawalRecipient(address indexed newWithdrawalRecipient)",
      "event SetXDomainAdmin(address indexed newAdmin)",
      "event TokensBridged(uint256 amountToReturn, uint256 indexed chainId, uint32 indexed leafId, bytes32 indexed l2TokenAddress, address caller)",
      "event Upgraded(address indexed implementation)",
      "event V3FundsDeposited(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 indexed destinationChainId, uint32 indexed depositId, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityDeadline, address indexed depositor, address recipient, address exclusiveRelayer, bytes message)",
      "function EMPTY_RELAYER() view returns (bytes32)",
      "function EMPTY_REPAYMENT_CHAIN_ID() view returns (uint256)",
      "function INFINITE_FILL_DEADLINE() view returns (uint32)",
      "function MAX_EXCLUSIVITY_PERIOD_SECONDS() view returns (uint32)",
      "function MAX_TRANSFER_SIZE() view returns (uint256)",
      "function UPDATE_ADDRESS_DEPOSIT_DETAILS_HASH() view returns (bytes32)",
      "function UPDATE_BYTES32_DEPOSIT_DETAILS_HASH() view returns (bytes32)",
      "function __SpokePool_init(uint32 _initialDepositId, address _crossDomainAdmin, address _withdrawalRecipient)",
      "function chainId() view returns (uint256)",
      "function claimRelayerRefund(bytes32 l2TokenAddress, bytes32 refundAddress)",
      "function crossDomainAdmin() view returns (address)",
      "function deposit(bytes32 depositor, bytes32 recipient, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, bytes32 exclusiveRelayer, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityParameter, bytes message) payable",
      "function depositDeprecated_5947912356(address recipient, address originToken, uint256 amount, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256) payable",
      "function depositFor(address depositor, address recipient, address originToken, uint256 amount, uint256 destinationChainId, int64 relayerFeePct, uint32 quoteTimestamp, bytes message, uint256) payable",
      "function depositNow(bytes32 depositor, bytes32 recipient, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, bytes32 exclusiveRelayer, uint32 fillDeadlineOffset, uint32 exclusivityParameter, bytes message) payable",
      "function depositQuoteTimeBuffer() view returns (uint32)",
      "function depositV3(address depositor, address recipient, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, address exclusiveRelayer, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityParameter, bytes message) payable",
      "function depositV3Now(address depositor, address recipient, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, address exclusiveRelayer, uint32 fillDeadlineOffset, uint32 exclusivityParameter, bytes message) payable",
      "function emergencyDeleteRootBundle(uint256 rootBundleId)",
      "function enabledDepositRoutes(address, uint256) view returns (bool)",
      "function executeRelayerRefundLeaf(uint32 rootBundleId, tuple(uint256 amountToReturn, uint256 chainId, uint256[] refundAmounts, uint32 leafId, address l2TokenAddress, address[] refundAddresses) relayerRefundLeaf, bytes32[] proof) payable",
      "function executeSlowRelayLeaf(tuple(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 chainId, uint256 updatedOutputAmount) slowFillLeaf, uint32 rootBundleId, bytes32[] proof)",
      "function fill(bytes32 orderId, bytes originData, bytes fillerData)",
      "function fillDeadlineBuffer() view returns (uint32)",
      "function fillRelay(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 repaymentChainId, bytes32 repaymentAddress)",
      "function fillRelayWithUpdatedDeposit(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 repaymentChainId, bytes32 repaymentAddress, uint256 updatedOutputAmount, bytes32 updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "function fillStatuses(bytes32) view returns (uint256)",
      "function fillV3Relay(tuple(address depositor, address recipient, address exclusiveRelayer, address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint32 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData, uint256 repaymentChainId)",
      "function getCurrentTime() view returns (uint256)",
      "function getRelayerRefund(address l2TokenAddress, address refundAddress) view returns (uint256)",
      "function getUnsafeDepositId(address msgSender, bytes32 depositor, uint256 depositNonce) pure returns (uint256)",
      "function getV3RelayHash(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData) view returns (bytes32)",
      "function initialize(uint32 _initialDepositId, address _withdrawalRecipient)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numberOfDeposits() view returns (uint32)",
      "function owner() view returns (address)",
      "function pauseDeposits(bool pause)",
      "function pauseFills(bool pause)",
      "function pausedDeposits() view returns (bool)",
      "function pausedFills() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function relayRootBundle(bytes32 relayerRefundRoot, bytes32 slowRelayRoot)",
      "function relayerRefund(address, address) view returns (uint256)",
      "function renounceOwnership()",
      "function requestSlowFill(tuple(bytes32 depositor, bytes32 recipient, bytes32 exclusiveRelayer, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 originChainId, uint256 depositId, uint32 fillDeadline, uint32 exclusivityDeadline, bytes message) relayData)",
      "function rootBundles(uint256) view returns (bytes32 slowRelayRoot, bytes32 relayerRefundRoot)",
      "function setCrossDomainAdmin(address newCrossDomainAdmin)",
      "function setEnableRoute(address originToken, uint256 destinationChainId, bool enabled)",
      "function setWithdrawalRecipient(address newWithdrawalRecipient)",
      "function speedUpDeposit(bytes32 depositor, uint256 depositId, uint256 updatedOutputAmount, bytes32 updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "function speedUpV3Deposit(address depositor, uint256 depositId, uint256 updatedOutputAmount, address updatedRecipient, bytes updatedMessage, bytes depositorSignature)",
      "function transferOwnership(address newOwner)",
      "function tryMulticall(bytes[] data) returns (tuple(bool success, bytes returnData)[] results)",
      "function unsafeDeposit(bytes32 depositor, bytes32 recipient, bytes32 inputToken, bytes32 outputToken, uint256 inputAmount, uint256 outputAmount, uint256 destinationChainId, bytes32 exclusiveRelayer, uint256 depositNonce, uint32 quoteTimestamp, uint32 fillDeadline, uint32 exclusivityParameter, bytes message) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function withdrawalRecipient() view returns (address)",
      "function wrappedNativeToken() view returns (address)"
    ],
    "0x024F2fC31CBDD8de17194b1892c834f98Ef5169b": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x0c9d064523177dBB55CFE52b9D0c485FBFc35FD2": [
      "constructor(address _l1Weth, address _l1Usdc, address _crossDomainMessenger, address _l1StandardBridge, address _l1USDCBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_OP_USDC_BRIDGE() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x100EDfCf3af2B4625Fca4EaF6C533703e71F7210": [
      "constructor(address _l1ArbitrumInbox, address _l1ERC20GatewayRouter, address _l2RefundL2Address, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_DAI() view returns (address)",
      "function L1_ERC20_GATEWAY_ROUTER() view returns (address)",
      "function L1_INBOX() view returns (address)",
      "function L2_CALL_VALUE() view returns (uint256)",
      "function L2_GAS_PRICE() view returns (uint256)",
      "function L2_MAX_SUBMISSION_COST() view returns (uint256)",
      "function L2_REFUND_L2_ADDRESS() view returns (address)",
      "function RELAY_MESSAGE_L2_GAS_LIMIT() view returns (uint32)",
      "function RELAY_TOKENS_L2_GAS_LIMIT() view returns (uint32)",
      "function cctpTokenMessenger() view returns (address)",
      "function getL1CallValue(uint32 l2GasLimit) pure returns (uint256)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x188F8C95B7cfB7993B53a4F643efa687916f73fA": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x1Ace3BbD69b63063F859514Eca29C9BDd8310E61": [
      "constructor(address _hubPool)",
      "error NotHubPool()",
      "event StoredCallData(address indexed target, bytes data, uint256 indexed nonce)",
      "function hubPool() view returns (address)",
      "function relayMessageCallData(uint256) view returns (bytes32)",
      "function storeRelayMessageCalldata(address target, bytes data, bool isAdminSender)"
    ],
    "0x22001f37B586792F25Ef9d19d99537C6446e0833": [
      "constructor(address _store, address _l1Usdc, address _cctpTokenMessenger, uint32 _cctpDestinationDomainId)",
      "error NotImplemented()",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function DATA_STORE() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function cctpV2() view returns (bool)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x2DA799c2223c6ffB595e578903AE6b95839160d8": [
      "constructor(address _l1GatewayRouter, address _l1ScrollMessenger, address _l2GasPriceOracle, uint32 _l2MessageRelayGasLimit, uint32 _l2TokenRelayGasLimit)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_GATEWAY_ROUTER() view returns (address)",
      "function L1_SCROLL_MESSENGER() view returns (address)",
      "function L2_GAS_PRICE_ORACLE() view returns (address)",
      "function L2_MESSAGE_RELAY_GAS_LIMIT() view returns (uint32)",
      "function L2_TOKEN_RELAY_GAS_LIMIT() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x33B0Ec794c15D6Cc705818E70d4CaCe7bCfB5Af3": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function l1StandardBridge() view returns (address)",
      "function l1Weth() view returns (address)",
      "function l2GasLimit() view returns (uint32)",
      "function messenger() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x3B03509645713718B78951126E0A6de6f10043f5": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event UpdatedGlobalConfig(bytes32 indexed key, string value)",
      "event UpdatedTokenConfig(address indexed key, string value)",
      "function globalConfig(bytes32) view returns (string)",
      "function l1TokenConfig(address) view returns (string)",
      "function multicall(bytes[] data) payable returns (bytes[] results)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function updateGlobalConfig(bytes32 key, string value)",
      "function updateTokenConfig(address l1Token, string value)"
    ],
    "0x3e532e6222afe9Bcf02DCB87216802c75D5113aE": [
      "constructor()",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties)",
      "event PartyAdded(address indexed contractAddress, address indexed party)",
      "event PartyRemoved(address indexed contractAddress, address indexed party)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function addMember(uint256 roleId, address newMember)",
      "function addPartyToContract(address party)",
      "function contractMap(address) view returns (uint8 valid, uint128 index)",
      "function getAllRegisteredContracts() view returns (address[])",
      "function getMember(uint256 roleId) view returns (address)",
      "function getRegisteredContracts(address party) view returns (address[])",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function isContractRegistered(address contractAddress) view returns (bool)",
      "function isPartyMemberOfContract(address party, address contractAddress) view returns (bool)",
      "function registerContract(address[] parties, address contractAddress)",
      "function registeredContracts(uint256) view returns (address)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function removePartyFromContract(address partyAddress)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)"
    ],
    "0x40f941E48A552bF496B154Af6bf55725f18D77c3": [
      "event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)",
      "function getImplementationAddress(bytes32 interfaceName) view returns (address implementationAddress)",
      "function interfacesImplemented(bytes32) view returns (address)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0x48d990AbDA20afa1fD1da713AbC041B60a922c65": [
      "constructor(address _destination, address _l1PolygonRegistry, address _l1Weth, address _l2WrappedMatic, uint256 _l1ChainId, uint256 _l2ChainId)",
      "function callExit(bytes data)",
      "function destination() view returns (address)",
      "function l1ChainId() view returns (uint256)",
      "function l1PolygonRegistry() view returns (address)",
      "function l1Weth() view returns (address)",
      "function l2ChainId() view returns (uint256)",
      "function l2WrappedMatic() view returns (address)",
      "function maticToken() view returns (address)",
      "function retrieve(address token)",
      "function send(address token, uint256 amount)"
    ],
    "0x4E6CCB1dA3C7844887F9A5aF4e8450d9fd90317A": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function callEmergencyShutdown(address financialContract)",
      "function callRemargin(address financialContract)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084": [
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF": [
      "constructor(tuple(uint256 rawValue) _fixedOracleFeePerSecondPerPfc, tuple(uint256 rawValue) _weeklyDelayFeePerSecondPerPfc, address _timerAddress)",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event NewFinalFee(tuple(uint256 rawValue) newFinalFee)",
      "event NewFixedOracleFeePerSecondPerPfc(tuple(uint256 rawValue) newOracleFee)",
      "event NewWeeklyDelayFeePerSecondPerPfc(tuple(uint256 rawValue) newWeeklyDelayFeePerSecondPerPfc)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function SECONDS_PER_WEEK() view returns (uint256)",
      "function addMember(uint256 roleId, address newMember)",
      "function computeFinalFee(address currency) view returns (tuple(uint256 rawValue))",
      "function computeRegularFee(uint256 startTime, uint256 endTime, tuple(uint256 rawValue) pfc) view returns (tuple(uint256 rawValue) regularFee, tuple(uint256 rawValue) latePenalty)",
      "function finalFees(address) view returns (uint256 rawValue)",
      "function fixedOracleFeePerSecondPerPfc() view returns (uint256 rawValue)",
      "function getCurrentTime() view returns (uint256)",
      "function getMember(uint256 roleId) view returns (address)",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function payOracleFees() payable",
      "function payOracleFeesErc20(address erc20Address, tuple(uint256 rawValue) amount)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)",
      "function setCurrentTime(uint256 time)",
      "function setFinalFee(address currency, tuple(uint256 rawValue) newFinalFee)",
      "function setFixedOracleFeePerSecondPerPfc(tuple(uint256 rawValue) newFixedOracleFeePerSecondPerPfc)",
      "function setWeeklyDelayFeePerSecondPerPfc(tuple(uint256 rawValue) newWeeklyDelayFeePerSecondPerPfc)",
      "function timerAddress() view returns (address)",
      "function weeklyDelayFeePerSecondPerPfc() view returns (uint256 rawValue)",
      "function withdraw(uint256 amount)",
      "function withdrawErc20(address erc20Address, uint256 amount)"
    ],
    "0x5A44A32c13e2C43416bFDE5dDF5DCb3880c42787": [
      "constructor(address _l1Weth, address _l1MessageService, address _l1TokenBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_MESSAGE_SERVICE() view returns (address)",
      "function L1_TOKEN_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function cctpV2() view returns (bool)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x5c7BCd6E7De5423a257D81B442095A1a6ced35C5": [
      "constructor(address _logic, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x5e0B7e20a77BDf11812837D30F1326068Bcf24Cf": [
      "constructor(uint256 _chainId, address _bridgeHub, address _circleUSDC, address _usdcSharedBridge, address _cctpTokenMessenger, uint32 _recipientCircleDomainId, address _l1Weth, address _l2RefundAddress, address _customGasTokenFunder, uint256 _l2GasLimit, uint256 _l1GasToL2GasPerPubDataLimit, uint256 _maxTxGasprice)",
      "error ETHGasTokenNotAllowed()",
      "error InvalidBridgeConfig()",
      "error TransactionFeeTooHigh()",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function BRIDGE_HUB() view returns (address)",
      "function CHAIN_ID() view returns (uint256)",
      "function CUSTOM_GAS_TOKEN() view returns (address)",
      "function CUSTOM_GAS_TOKEN_FUNDER() view returns (address)",
      "function L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT() view returns (uint256)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint256)",
      "function L2_REFUND_ADDRESS() view returns (address)",
      "function USDC_SHARED_BRIDGE() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function cctpV2() view returns (bool)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x6F4083304C2cA99B077ACE06a5DcF670615915Af": [
      "constructor(address _l1ArbitrumInbox, address _l1ERC20GatewayRouter, address _l2RefundL2Address, address _l1Usdc, address _cctpTokenMessenger, uint32 _cctpDomainId, uint8 _nativeTokenDecimals, address _customGasTokenFunder, uint256 _l2MaxSubmissionCost, uint256 _l2GasPrice)",
      "error InsufficientCustomGasToken()",
      "error InvalidCustomGasToken()",
      "error InvalidNativeTokenDecimals()",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function CUSTOM_GAS_TOKEN() view returns (address)",
      "function CUSTOM_GAS_TOKEN_FUNDER() view returns (address)",
      "function L1_ERC20_GATEWAY_ROUTER() view returns (address)",
      "function L1_INBOX() view returns (address)",
      "function L2_CALL_VALUE() view returns (uint256)",
      "function L2_GAS_PRICE() view returns (uint256)",
      "function L2_MAX_SUBMISSION_COST() view returns (uint256)",
      "function L2_REFUND_L2_ADDRESS() view returns (address)",
      "function NATIVE_TOKEN_DECIMALS() view returns (uint8)",
      "function RELAY_MESSAGE_L2_GAS_LIMIT() view returns (uint32)",
      "function RELAY_TOKENS_L2_GAS_LIMIT() view returns (uint32)",
      "function cctpTokenMessenger() view returns (address)",
      "function getL1CallValue(uint32 l2GasLimit) view returns (uint256)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x7b292034084A41B9D441B71b6E3557Edd0463fa8": [
      "constructor(address _finderAddress, uint256 _startingId)",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event EmergencyExecution(address indexed to, uint256 value, bytes data)",
      "event NewProposal(uint256 indexed id, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event ProposalExecuted(uint256 indexed id, uint256 transactionIndex)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function addMember(uint256 roleId, address newMember)",
      "function emergencyExecute(tuple(address to, uint256 value, bytes data) transaction) payable",
      "function executeProposal(uint256 id, uint256 transactionIndex) payable",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getMember(uint256 roleId) view returns (address)",
      "function getProposal(uint256 id) view returns (tuple(tuple(address to, uint256 value, bytes data)[] transactions, uint256 requestTime, bytes ancillaryData))",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numProposals() view returns (uint256)",
      "function proposals(uint256) view returns (uint256 requestTime, bytes ancillaryData)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions, bytes ancillaryData)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)"
    ],
    "0x7dB69eb9F52eD773E9b03f5068A1ea0275b2fD9d": [
      "function createLpToken(address l1Token) returns (address)"
    ],
    "0x7e90A40c7519b041A7DF6498fBf5662e8cFC61d2": [
      "constructor(address _l1Weth, address _l1Usdc, address _crossDomainMessenger, address _l1StandardBridge, address _l1USDCBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_OP_USDC_BRIDGE() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0x8692B776d1Ff0664177c90465038056Dc64f8991": [
      "constructor(address _finder, address _owner, address _collateral, uint256 _bondAmount, string _rules, bytes32 _identifier, uint64 _liveness)",
      "error NotIERC165Compliant(address guard_)",
      "event AvatarSet(address indexed previousAvatar, address indexed newAvatar)",
      "event ChangedGuard(address guard)",
      "event Initialized(uint8 version)",
      "event OptimisticGovernorDeployed(address indexed owner, address indexed avatar, address target)",
      "event OptimisticOracleChanged(address indexed newOptimisticOracleV3)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalDeleted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event ProposalExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event SetCollateralAndBond(address indexed collateral, uint256 indexed bondAmount)",
      "event SetEscalationManager(address indexed escalationManager)",
      "event SetIdentifier(bytes32 indexed identifier)",
      "event SetLiveness(uint64 indexed liveness)",
      "event SetRules(string rules)",
      "event TargetSet(address indexed previousTarget, address indexed newTarget)",
      "event TransactionExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId, uint256 indexed transactionIndex)",
      "event TransactionsProposed(address indexed proposer, uint256 indexed proposalTime, bytes32 indexed assertionId, tuple(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, uint256 requestTime) proposal, bytes32 proposalHash, bytes explanation, string rules, uint256 challengeWindowEnds)",
      "function EXPLANATION_KEY() view returns (bytes)",
      "function PROPOSAL_HASH_KEY() view returns (bytes)",
      "function RULES_KEY() view returns (bytes)",
      "function assertionDisputedCallback(bytes32 assertionId)",
      "function assertionIds(bytes32) view returns (bytes32)",
      "function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully)",
      "function avatar() view returns (address)",
      "function bondAmount() view returns (uint256)",
      "function collateral() view returns (address)",
      "function deleteProposalOnUpgrade(bytes32 proposalHash)",
      "function escalationManager() view returns (address)",
      "function executeProposal(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getGuard() view returns (address _guard)",
      "function getProposalBond() view returns (uint256)",
      "function guard() view returns (address)",
      "function identifier() view returns (bytes32)",
      "function liveness() view returns (uint64)",
      "function optimisticOracleV3() view returns (address)",
      "function owner() view returns (address)",
      "function proposalHashes(bytes32) view returns (bytes32)",
      "function proposeTransactions(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, bytes explanation)",
      "function renounceOwnership()",
      "function rules() view returns (string)",
      "function setAvatar(address _avatar)",
      "function setCollateralAndBond(address _collateral, uint256 _bondAmount)",
      "function setEscalationManager(address _escalationManager)",
      "function setGuard(address _guard)",
      "function setIdentifier(bytes32 _identifier)",
      "function setLiveness(uint64 _liveness)",
      "function setRules(string _rules)",
      "function setTarget(address _target)",
      "function setUp(bytes initializeParams)",
      "function sync()",
      "function target() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x8bbdD67102D743b8533c1277a4ffdA04Dea158D1": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function cctpV2() view returns (bool)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xA0Ae6609447e57a42c51B50EAe921D701823FFAe": [
      "constructor(uint256 _liveness, address _finderAddress, address _timerAddress)",
      "event DisputePrice(address indexed requester, address indexed proposer, address indexed disputer, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 proposedPrice)",
      "event ProposePrice(address indexed requester, address indexed proposer, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 proposedPrice, uint256 expirationTimestamp, address currency)",
      "event RequestPrice(address indexed requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData, address currency, uint256 reward, uint256 finalFee)",
      "event Settle(address indexed requester, address indexed proposer, address indexed disputer, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 price, uint256 payout)",
      "function OO_ANCILLARY_DATA_LIMIT() view returns (uint256)",
      "function TOO_EARLY_RESPONSE() view returns (int256)",
      "function ancillaryBytesLimit() view returns (uint256)",
      "function defaultLiveness() view returns (uint256)",
      "function disputePrice(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) returns (uint256 totalBond)",
      "function disputePriceFor(address disputer, address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) returns (uint256 totalBond)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getRequest(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) view returns (tuple(address proposer, address disputer, address currency, bool settled, tuple(bool eventBased, bool refundOnDispute, bool callbackOnPriceProposed, bool callbackOnPriceDisputed, bool callbackOnPriceSettled, uint256 bond, uint256 customLiveness) requestSettings, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee))",
      "function getState(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) view returns (uint8)",
      "function hasPrice(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) view returns (bool)",
      "function proposePrice(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 proposedPrice) returns (uint256 totalBond)",
      "function proposePriceFor(address proposer, address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 proposedPrice) returns (uint256 totalBond)",
      "function requestPrice(bytes32 identifier, uint256 timestamp, bytes ancillaryData, address currency, uint256 reward) returns (uint256 totalBond)",
      "function requests(bytes32) view returns (address proposer, address disputer, address currency, bool settled, tuple(bool eventBased, bool refundOnDispute, bool callbackOnPriceProposed, bool callbackOnPriceDisputed, bool callbackOnPriceSettled, uint256 bond, uint256 customLiveness) requestSettings, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee)",
      "function setBond(bytes32 identifier, uint256 timestamp, bytes ancillaryData, uint256 bond) returns (uint256 totalBond)",
      "function setCallbacks(bytes32 identifier, uint256 timestamp, bytes ancillaryData, bool callbackOnPriceProposed, bool callbackOnPriceDisputed, bool callbackOnPriceSettled)",
      "function setCurrentTime(uint256 time)",
      "function setCustomLiveness(bytes32 identifier, uint256 timestamp, bytes ancillaryData, uint256 customLiveness)",
      "function setEventBased(bytes32 identifier, uint256 timestamp, bytes ancillaryData)",
      "function setRefundOnDispute(bytes32 identifier, uint256 timestamp, bytes ancillaryData)",
      "function settle(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) returns (uint256 payout)",
      "function settleAndGetPrice(bytes32 identifier, uint256 timestamp, bytes ancillaryData) returns (int256)",
      "function stampAncillaryData(bytes ancillaryData, address requester) pure returns (bytes)",
      "function timerAddress() view returns (address)"
    ],
    "0xA374585E6062517Ee367ee5044946A6fBe17724f": [
      "constructor(uint256 _chainId, address _bridgeHub, address _l1Weth, address _l2RefundAddress, uint256 _l2GasLimit, uint256 _l1GasToL2GasPerPubDataLimit, uint256 _maxTxGasprice)",
      "error ETHGasTokenRequired()",
      "error TransactionFeeTooHigh()",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "event ZkStackMessageRelayed(bytes32 indexed canonicalTxHash)",
      "function BRIDGE_HUB() view returns (address)",
      "function CHAIN_ID() view returns (uint256)",
      "function L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT() view returns (uint256)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint256)",
      "function L2_REFUND_ADDRESS() view returns (address)",
      "function SHARED_BRIDGE() view returns (address)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable"
    ],
    "0xb4AeF0178f5725392A26eE18684C2aB62adc912e": [
      "constructor(address _rootChainManager, address _fxStateSender, address _depositManager, address _erc20Predicate, address _l1Matic, address _l1Weth, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function DEPOSIT_MANAGER() view returns (address)",
      "function ERC20_PREDICATE() view returns (address)",
      "function FX_STATE_SENDER() view returns (address)",
      "function L1_MATIC() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function ROOT_CHAIN_MANAGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xB524735356985D2f267FA010D681f061DfF03715": [
      "constructor(address _singleton)"
    ],
    "0xBbc6009fEfFc27ce705322832Cb2068F8C1e0A58": [
      "function getStrikeForFinancialProduct(address financialProduct) view returns (tuple(uint256 rawValue))",
      "function setFinancialProductStrike(address financialProduct, tuple(uint256 rawValue) strikePrice)",
      "function transformCollateralRequirement(tuple(uint256 rawValue) oraclePrice, tuple(uint256 rawValue) collateralRequirement) view returns (tuple(uint256 rawValue))",
      "function transformPrice(tuple(uint256 rawValue) oraclePrice, uint256 requestTime) view returns (tuple(uint256 rawValue))",
      "function transformPriceIdentifier(bytes32 priceIdentifier, uint256 requestTime) view returns (bytes32)"
    ],
    "0xc186fA914353c44b2E33eBE05f21846F1048bEda": [
      "constructor(address _lpTokenFactory, address _finder, address _weth, address _timer)",
      "event BondSet(address indexed newBondToken, uint256 newBondAmount)",
      "event CrossChainContractsSet(uint256 l2ChainId, address adapter, address spokePool)",
      "event EmergencyRootBundleDeleted(bytes32 indexed poolRebalanceRoot, bytes32 indexed relayerRefundRoot, bytes32 slowRelayRoot, address indexed proposer)",
      "event IdentifierSet(bytes32 newIdentifier)",
      "event L1TokenEnabledForLiquidityProvision(address l1Token, address lpToken)",
      "event L2TokenDisabledForLiquidityProvision(address l1Token, address lpToken)",
      "event LiquidityAdded(address indexed l1Token, uint256 amount, uint256 lpTokensMinted, address indexed liquidityProvider)",
      "event LiquidityRemoved(address indexed l1Token, uint256 amount, uint256 lpTokensBurnt, address indexed liquidityProvider)",
      "event LivenessSet(uint256 newLiveness)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(bool indexed isPaused)",
      "event ProposeRootBundle(uint32 challengePeriodEndTimestamp, uint8 poolRebalanceLeafCount, uint256[] bundleEvaluationBlockNumbers, bytes32 indexed poolRebalanceRoot, bytes32 indexed relayerRefundRoot, bytes32 slowRelayRoot, address indexed proposer)",
      "event ProtocolFeeCaptureSet(address indexed newProtocolFeeCaptureAddress, uint256 indexed newProtocolFeeCapturePct)",
      "event ProtocolFeesCapturedClaimed(address indexed l1Token, uint256 indexed accumulatedFees)",
      "event RootBundleCanceled(address indexed disputer, uint256 requestTime)",
      "event RootBundleDisputed(address indexed disputer, uint256 requestTime)",
      "event RootBundleExecuted(uint256 groupIndex, uint256 indexed leafId, uint256 indexed chainId, address[] l1Tokens, uint256[] bundleLpFees, int256[] netSendAmounts, int256[] runningBalances, address indexed caller)",
      "event SetEnableDepositRoute(uint256 indexed originChainId, uint256 indexed destinationChainId, address indexed originToken, bool depositsEnabled)",
      "event SetPoolRebalanceRoute(uint256 indexed destinationChainId, address indexed l1Token, address indexed destinationToken)",
      "event SpokePoolAdminFunctionTriggered(uint256 indexed chainId, bytes message)",
      "function addLiquidity(address l1Token, uint256 l1TokenAmount) payable",
      "function bondAmount() view returns (uint256)",
      "function bondToken() view returns (address)",
      "function claimProtocolFeesCaptured(address l1Token)",
      "function crossChainContracts(uint256) view returns (address adapter, address spokePool)",
      "function disableL1TokenForLiquidityProvision(address l1Token)",
      "function disputeRootBundle()",
      "function emergencyDeleteProposal()",
      "function enableL1TokenForLiquidityProvision(address l1Token)",
      "function exchangeRateCurrent(address l1Token) returns (uint256)",
      "function executeRootBundle(uint256 chainId, uint256 groupIndex, uint256[] bundleLpFees, int256[] netSendAmounts, int256[] runningBalances, uint8 leafId, address[] l1Tokens, bytes32[] proof)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function haircutReserves(address l1Token, int256 haircutAmount)",
      "function identifier() view returns (bytes32)",
      "function liquidityUtilizationCurrent(address l1Token) returns (uint256)",
      "function liquidityUtilizationPostRelay(address l1Token, uint256 relayedAmount) returns (uint256)",
      "function liveness() view returns (uint32)",
      "function loadEthForL2Calls() payable",
      "function lpFeeRatePerSecond() view returns (uint256)",
      "function lpTokenFactory() view returns (address)",
      "function multicall(bytes[] data) payable returns (bytes[] results)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function poolRebalanceRoute(uint256 destinationChainId, address l1Token) view returns (address destinationToken)",
      "function pooledTokens(address) view returns (address lpToken, bool isEnabled, uint32 lastLpFeeUpdate, int256 utilizedReserves, uint256 liquidReserves, uint256 undistributedLpFees)",
      "function proposeRootBundle(uint256[] bundleEvaluationBlockNumbers, uint8 poolRebalanceLeafCount, bytes32 poolRebalanceRoot, bytes32 relayerRefundRoot, bytes32 slowRelayRoot)",
      "function protocolFeeCaptureAddress() view returns (address)",
      "function protocolFeeCapturePct() view returns (uint256)",
      "function relaySpokePoolAdminFunction(uint256 chainId, bytes functionData)",
      "function removeLiquidity(address l1Token, uint256 lpTokenAmount, bool sendEth)",
      "function renounceOwnership()",
      "function rootBundleProposal() view returns (bytes32 poolRebalanceRoot, bytes32 relayerRefundRoot, bytes32 slowRelayRoot, uint256 claimedBitMap, address proposer, uint8 unclaimedPoolRebalanceLeafCount, uint32 challengePeriodEndTimestamp)",
      "function setBond(address newBondToken, uint256 newBondAmount)",
      "function setCrossChainContracts(uint256 l2ChainId, address adapter, address spokePool)",
      "function setCurrentTime(uint256 time)",
      "function setDepositRoute(uint256 originChainId, uint256 destinationChainId, address originToken, bool depositsEnabled)",
      "function setIdentifier(bytes32 newIdentifier)",
      "function setLiveness(uint32 newLiveness)",
      "function setPaused(bool pause)",
      "function setPoolRebalanceRoute(uint256 destinationChainId, address l1Token, address destinationToken)",
      "function setProtocolFeeCapture(address newProtocolFeeCaptureAddress, uint256 newProtocolFeeCapturePct)",
      "function sync(address l1Token)",
      "function timerAddress() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unclaimedAccumulatedProtocolFees(address) view returns (uint256)",
      "function weth() view returns (address)"
    ],
    "0xC43767F4592DF265B4a9F1a398B97fF24F38C6A6": [
      "constructor(uint256 _liveness, address _finderAddress, address _timerAddress)",
      "event DisputePrice(address indexed requester, address indexed proposer, address indexed disputer, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 proposedPrice)",
      "event ProposePrice(address indexed requester, address indexed proposer, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 proposedPrice, uint256 expirationTimestamp, address currency)",
      "event RequestPrice(address indexed requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData, address currency, uint256 reward, uint256 finalFee)",
      "event Settle(address indexed requester, address indexed proposer, address indexed disputer, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 price, uint256 payout)",
      "function ancillaryBytesLimit() view returns (uint256)",
      "function defaultLiveness() view returns (uint256)",
      "function disputePrice(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) returns (uint256 totalBond)",
      "function disputePriceFor(address disputer, address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) returns (uint256 totalBond)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getRequest(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) view returns (tuple(address proposer, address disputer, address currency, bool settled, bool refundOnDispute, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness))",
      "function getState(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) view returns (uint8)",
      "function hasPrice(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) view returns (bool)",
      "function proposePrice(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 proposedPrice) returns (uint256 totalBond)",
      "function proposePriceFor(address proposer, address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData, int256 proposedPrice) returns (uint256 totalBond)",
      "function requestPrice(bytes32 identifier, uint256 timestamp, bytes ancillaryData, address currency, uint256 reward) returns (uint256 totalBond)",
      "function requests(bytes32) view returns (address proposer, address disputer, address currency, bool settled, bool refundOnDispute, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness)",
      "function setBond(bytes32 identifier, uint256 timestamp, bytes ancillaryData, uint256 bond) returns (uint256 totalBond)",
      "function setCurrentTime(uint256 time)",
      "function setCustomLiveness(bytes32 identifier, uint256 timestamp, bytes ancillaryData, uint256 customLiveness)",
      "function setRefundOnDispute(bytes32 identifier, uint256 timestamp, bytes ancillaryData)",
      "function settle(address requester, bytes32 identifier, uint256 timestamp, bytes ancillaryData) returns (uint256 payout)",
      "function settleAndGetPrice(bytes32 identifier, uint256 timestamp, bytes ancillaryData) returns (int256)",
      "function stampAncillaryData(bytes ancillaryData, address requester) pure returns (bytes)",
      "function timerAddress() view returns (address)"
    ],
    "0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event SupportedIdentifierAdded(bytes32 indexed identifier)",
      "event SupportedIdentifierRemoved(bytes32 indexed identifier)",
      "function addSupportedIdentifier(bytes32 identifier)",
      "function isIdentifierSupported(bytes32 identifier) view returns (bool)",
      "function owner() view returns (address)",
      "function removeSupportedIdentifier(bytes32 identifier)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xdBF90434dF0B98219f87d112F37d74B1D90758c7": [
      "event AddedToWhitelist(address indexed addedAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RemovedFromWhitelist(address indexed removedAddress)",
      "function addToWhitelist(address newElement)",
      "function getWhitelist() view returns (address[] activeWhitelist)",
      "function isOnWhitelist(address elementToCheck) view returns (bool)",
      "function owner() view returns (address)",
      "function removeFromWhitelist(address elementToRemove)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function whitelist(address) view returns (uint8)",
      "function whitelistIndices(uint256) view returns (address)"
    ],
    "0xE1421233BF7158A19f89F17c9735F9cbd3D9529c": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xE1e74B3D6A8E2A479B62958D4E4E6eEaea5B612b": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function DAI() view returns (address)",
      "function DAI_OPTIMISM_BRIDGE() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function SNX() view returns (address)",
      "function SNX_OPTIMISM_BRIDGE() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea": [
      "constructor(address _hubPool)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposerModified(address proposer, bool enabled)",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)",
      "function allowance(address, address) view returns (uint256)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function balanceOf(address) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function deposit() payable",
      "function hubPool() view returns (address)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function proposers(address) view returns (bool)",
      "function renounceOwnership()",
      "function setProposer(address proposer, bool enabled)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function transferFrom(address src, address dst, uint256 amt) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function withdraw(uint256 wad)"
    ],
    "0xeE3Afe347D5C74317041E2618C49534dAf887c24": [
      "constructor(uint256 _liveness, address _finderAddress, address _timerAddress)",
      "event DisputePrice(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "event ProposePrice(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "event RequestPrice(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "event Settle(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "function ancillaryBytesLimit() view returns (uint256)",
      "function defaultLiveness() view returns (uint256)",
      "function disputePrice(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (uint256 totalBond)",
      "function disputePriceFor(bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request, address disputer, address requester) returns (uint256 totalBond)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getState(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (uint8)",
      "function hasPrice(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (bool)",
      "function proposePrice(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request, int256 proposedPrice) returns (uint256 totalBond)",
      "function proposePriceFor(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request, address proposer, int256 proposedPrice) returns (uint256 totalBond)",
      "function requestAndProposePriceFor(bytes32 identifier, uint32 timestamp, bytes ancillaryData, address currency, uint256 reward, uint256 bond, uint256 customLiveness, address proposer, int256 proposedPrice) returns (uint256 totalBond)",
      "function requestPrice(bytes32 identifier, uint32 timestamp, bytes ancillaryData, address currency, uint256 reward, uint256 bond, uint256 customLiveness) returns (uint256 totalBond)",
      "function requests(bytes32) view returns (bytes32)",
      "function setCurrentTime(uint256 time)",
      "function settle(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (uint256 payout, int256 resolvedPrice)",
      "function stampAncillaryData(bytes ancillaryData, address requester) pure returns (bytes)",
      "function timerAddress() view returns (address)"
    ],
    "0xF039AdCC74936F90fE175e8b3FE0FdC8b8E0c73b": [
      "constructor(address _l1Weth, address _l1Usdc, address _crossDomainMessenger, address _l1StandardBridge, address _l1USDCBridge)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_OP_USDC_BRIDGE() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function cctpV2() view returns (bool)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xf1B59868697f3925b72889ede818B9E7ba0316d0": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xF2bEf5E905AAE0295003ab14872F811E914EdD81": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address l1BlastBridge, address l1Dai, uint32 l2GasLimit)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_BLAST_BRIDGE() view returns (address)",
      "function L1_DAI() view returns (address)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xFADcC43096756e1527306FD92982FEbBe3c629Fa": [
      "constructor(address _l1Weth, address _crossDomainMessenger, address _l1StandardBridge, address _l1Usdc, address _cctpTokenMessenger)",
      "event MessageRelayed(address target, bytes message)",
      "event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to)",
      "function L1_STANDARD_BRIDGE() view returns (address)",
      "function L1_WETH() view returns (address)",
      "function L2_GAS_LIMIT() view returns (uint32)",
      "function MESSENGER() view returns (address)",
      "function cctpTokenMessenger() view returns (address)",
      "function recipientCircleDomainId() view returns (uint32)",
      "function relayMessage(address target, bytes message) payable",
      "function relayTokens(address l1Token, address l2Token, uint256 amount, address to) payable",
      "function usdcToken() view returns (address)"
    ],
    "0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE": [
      "constructor(address _finder, address _defaultCurrency, uint64 _defaultLiveness)",
      "event AdminPropertiesSet(address defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage)",
      "event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer)",
      "event AssertionMade(bytes32 indexed assertionId, bytes32 domainId, bytes claim, address indexed asserter, address callbackRecipient, address escalationManager, address caller, uint64 expirationTime, address currency, uint256 bond, bytes32 indexed identifier)",
      "event AssertionSettled(bytes32 indexed assertionId, address indexed bondRecipient, bool disputed, bool settlementResolution, address settleCaller)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function assertTruth(bytes claim, address asserter, address callbackRecipient, address escalationManager, uint64 liveness, address currency, uint256 bond, bytes32 identifier, bytes32 domainId) returns (bytes32 assertionId)",
      "function assertTruthWithDefaults(bytes claim, address asserter) returns (bytes32)",
      "function assertions(bytes32) view returns (tuple(bool arbitrateViaEscalationManager, bool discardOracle, bool validateDisputers, address assertingCaller, address escalationManager) escalationManagerSettings, address asserter, uint64 assertionTime, bool settled, address currency, uint64 expirationTime, bool settlementResolution, bytes32 domainId, bytes32 identifier, uint256 bond, address callbackRecipient, address disputer)",
      "function burnedBondPercentage() view returns (uint256)",
      "function cachedCurrencies(address) view returns (bool isWhitelisted, uint256 finalFee)",
      "function cachedIdentifiers(bytes32) view returns (bool)",
      "function cachedOracle() view returns (address)",
      "function defaultCurrency() view returns (address)",
      "function defaultIdentifier() view returns (bytes32)",
      "function defaultLiveness() view returns (uint64)",
      "function disputeAssertion(bytes32 assertionId, address disputer)",
      "function finder() view returns (address)",
      "function getAssertion(bytes32 assertionId) view returns (tuple(tuple(bool arbitrateViaEscalationManager, bool discardOracle, bool validateDisputers, address assertingCaller, address escalationManager) escalationManagerSettings, address asserter, uint64 assertionTime, bool settled, address currency, uint64 expirationTime, bool settlementResolution, bytes32 domainId, bytes32 identifier, uint256 bond, address callbackRecipient, address disputer))",
      "function getAssertionResult(bytes32 assertionId) view returns (bool)",
      "function getCurrentTime() view returns (uint256)",
      "function getMinimumBond(address currency) view returns (uint256)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numericalTrue() view returns (int256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAdminProperties(address _defaultCurrency, uint64 _defaultLiveness, uint256 _burnedBondPercentage)",
      "function settleAndGetAssertionResult(bytes32 assertionId) returns (bool)",
      "function settleAssertion(bytes32 assertionId)",
      "function stampAssertion(bytes32 assertionId) view returns (bytes)",
      "function syncUmaParams(bytes32 identifier, address currency)",
      "function transferOwnership(address newOwner)"
    ]
  },
  "usedTemplates": {
    "acrossv3/adapter": "0xb4255921436c1b241e151988fe5443ec28852daad474c31507370e6006903dbe",
    "acrossv3/Finder": "0xda74fa90b61bba763f4b2666a821b9b581d6a60c72fb58a97c98350118ddb4c0",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c"
  },
  "permissionsConfigHash": "0x35f15fb6a314c6677a19ebedc4d6ebb0120d00027ee549e77b82f3e28c7ca5c7"
}
