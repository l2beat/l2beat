{
  "name": "shibarium",
  "chain": "ethereum",
  "blockNumber": 22337733,
  "configHash": "0xfada0207d0fe482f12abd1a5ea908a92dc946bc7e6590c7de3b77939d65fd15c",
  "entries": [
    {
      "name": "ERC1155Predicate",
      "address": "0x0057bed57066F61c64DACB395B38c6E1792e03B8",
      "type": "Contract",
      "template": "polygonposbridge/predicate",
      "sourceHashes": [
        "0x428926e63c344a25fc6e1854be10f620c64143f66904314e15837a6734e132b1",
        "0xd4be21971e93432f8a4269386f5c2dfa288dff859600b0a3c8d8f17fdfd895e6"
      ],
      "proxyType": "Polygon proxy",
      "sinceTimestamp": 1691475899,
      "sinceBlock": 17868398,
      "values": {
        "$admin": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "$implementation": "0xCbb0D2eCBEDBF2D0F0D5616dFE25bC286D8F8610",
        "$pastUpgrades": [
          [
            "2023-08-08T06:25:11.000Z",
            "0xee350a63a70b71d85dca0d0154a14b13d67f3b48a11857fcf938cddfe26a8a99",
            ["0xCbb0D2eCBEDBF2D0F0D5616dFE25bC286D8F8610"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x80Cc222EA02F4334F67e9E55E7412fed62599004"]
          },
          "MANAGER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
              "0x08C4b60fda8aA6239b7de7d165BCF6F1686Cad82"
            ]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "implementation": "0xCbb0D2eCBEDBF2D0F0D5616dFE25bC286D8F8610",
        "MANAGER_ROLE": "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
        "proxyOwner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2,
        "TOKEN_TYPE": "0x973bb64086f173ec8099b7ed3d43da984f4a332e4417a08bc6a286e6402b0586",
        "TRANSFER_BATCH_EVENT_SIG": "0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb",
        "TRANSFER_SINGLE_EVENT_SIG": "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62"
      },
      "derivedName": "ERC1155Predicate"
    },
    {
      "name": "MintableERC721Predicate",
      "address": "0x03c77e03dB8183C8a9eFC178eC1Dfd98c1EfD665",
      "type": "Contract",
      "template": "polygonposbridge/predicate",
      "sourceHashes": [
        "0x378a22860f926f5ba4dd478549ef1dc9f126335557b56556444e5c1393bdbfef",
        "0x6e1b7753cf25b1dc926ed1048285f85b9cc596dbcebdadc1fdabd6830ac08f1e"
      ],
      "proxyType": "Polygon proxy",
      "sinceTimestamp": 1691475827,
      "sinceBlock": 17868392,
      "values": {
        "$admin": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "$implementation": "0x37A9b4e7c327c449858dba9F5e39CE6771cBc31b",
        "$pastUpgrades": [
          [
            "2023-08-08T06:23:59.000Z",
            "0xb4b02d47286a8569107dcbb8d73af8ab2e897abad6a70f1718fd60222e4a2922",
            ["0x37A9b4e7c327c449858dba9F5e39CE6771cBc31b"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x80Cc222EA02F4334F67e9E55E7412fed62599004"]
          },
          "MANAGER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
              "0x08C4b60fda8aA6239b7de7d165BCF6F1686Cad82"
            ]
          }
        },
        "BATCH_LIMIT": 20,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "implementation": "0x37A9b4e7c327c449858dba9F5e39CE6771cBc31b",
        "MANAGER_ROLE": "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
        "proxyOwner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2,
        "TOKEN_TYPE": "0xd4392723c111fcb98b073fe55873efb447bcd23cd3e49ec9ea2581930cd01ddc",
        "TRANSFER_EVENT_SIG": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
        "TRANSFER_WITH_METADATA_EVENT_SIG": "0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14",
        "WITHDRAW_BATCH_EVENT_SIG": "0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df"
      },
      "derivedName": "MintableERC721Predicate"
    },
    {
      "name": "RootChainManager",
      "address": "0x08C4b60fda8aA6239b7de7d165BCF6F1686Cad82",
      "type": "Contract",
      "template": "polygonposbridge/RootChainManager",
      "sourceHashes": [
        "0xbbbf27b3fdffff6edc7bb78c7f8d8b0e49e427ea37c77f6c0ee0824742a1480a",
        "0x8e1112329013d39a3a696d494a2238f100b58f447fef589f88c6ad0cf0f90fee"
      ],
      "proxyType": "Polygon proxy",
      "description": "Main configuration contract to manage tokens, token types, escrows (predicates) for given token types. It also serves as an entry point for deposits and withdrawals effectively acting as a token router.",
      "sinceTimestamp": 1691475083,
      "sinceBlock": 17868330,
      "values": {
        "$admin": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "$implementation": "0x1b50d902F01ad1e6358FD6116BC115E0a43Fe925",
        "$pastUpgrades": [
          [
            "2023-08-08T06:11:35.000Z",
            "0xdc8fd20ecca62bd049ca91a39a9980eb050f5c74a53ff040343da32b5a8ed90a",
            ["0x1b50d902F01ad1e6358FD6116BC115E0a43Fe925"]
          ]
        ],
        "$upgradeCount": 1,
        "checkpointManagerAddress": "0xd46042f503B8Ec0A166af8C0BFbB0a3C562353F9",
        "childChainManagerAddress": "0xc107664eeEEA2c84e51D56F1B7a479EbCf9541c4",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DEPOSIT": "0x87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f821",
        "ERC712_VERSION": "1",
        "ETHER_ADDRESS": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
        "getChainId": 1,
        "getDomainSeperator": "0xa2f7dfa597f6c9f9cc8fe27c6a0952520cdb54acccd2ec8b53bdc33b628e4b22",
        "implementation": "0x1b50d902F01ad1e6358FD6116BC115E0a43Fe925",
        "MAP_TOKEN": "0x2cef46a936bdc5b7e6e8c71aa04560c41cf7d88bb26901a7e7f4936ff02accad",
        "MAPPER_ROLE": "0x2559c73ad5e64226de134fc607a00e9f0c0b7465b43c2ae69baaca347c607777",
        "PREDICATES": [
          "0x6Aca26bFCE7675FF71C734BF26C8c0aC4039A4Fa",
          "0x98C831cFB18852f7deB3E3a970e907475b49730f",
          "0x03c77e03dB8183C8a9eFC178eC1Dfd98c1EfD665",
          "0x0057bed57066F61c64DACB395B38c6E1792e03B8",
          "0xc3897302aB4B42931cB4857050Fa60f53B775870"
        ],
        "proxyOwner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2,
        "stateSenderAddress": "0x3a122785bC4d951D132B2CAD31FC187D6DC7A21C"
      },
      "derivedName": "RootChainManager"
    },
    {
      "name": "EventsHub",
      "address": "0x12185669Dac70749f717247971E0B8819b2e472e",
      "type": "Contract",
      "sourceHashes": [
        "0x66fd0eba29db6a9a912c2986bcbdbd0e2dbef00e6507132ecf8a9e358d9ce7bd",
        "0x6739012cebcf9f8a3b471a230adc99bb3840a605867d4f20a9c11bf6e7a05d96"
      ],
      "proxyType": "Polygon proxy",
      "sinceTimestamp": 1691244011,
      "sinceBlock": 17849224,
      "values": {
        "$admin": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "$implementation": "0x01E988D4b8E86496a45C842E60155a9472541266",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "implementation": "0x01E988D4b8E86496a45C842E60155a9472541266",
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2,
        "registry": "0xF486e3B6A432Bdd6EDaAe85a565CD7682A7862BB"
      },
      "derivedName": "EventsHub"
    },
    {
      "name": "StakeManagerExtension",
      "address": "0x17174796E0eF24330aed565c87Ba5e85431DE19e",
      "type": "Contract",
      "template": "polygonposbridge/StakeManagerExtension_shibarium",
      "sourceHashes": [
        "0x6c5643dd27ff09baeb85b5fb025f64da4c191a2c42e30f5b72c33b0b8d74dbf4"
      ],
      "proxyType": "immutable",
      "description": "Contract primarily used to check whether a validator is whitelisted or not. It also provides the ability to update the validator registry address.",
      "sinceTimestamp": 1691243879,
      "sinceBlock": 17849213,
      "values": {
        "$immutable": true,
        "accountStateRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "auctionPeriod": 0,
        "CHECKPOINT_REWARD": 0,
        "checkPointBlockInterval": 0,
        "checkpointRewardDelta": 0,
        "currentEpoch": 0,
        "delegationEnabled": false,
        "dynasty": 0,
        "eventsHub": "0x0000000000000000000000000000000000000000",
        "extensionCode": "0x0000000000000000000000000000000000000000",
        "governance": "0x0000000000000000000000000000000000000000",
        "isOwner": false,
        "locked": false,
        "logger": "0x0000000000000000000000000000000000000000",
        "maxRewardedCheckpoints": 0,
        "minDeposit": 0,
        "minHeimdallFee": 0,
        "NFTContract": "0x0000000000000000000000000000000000000000",
        "NFTCounter": 0,
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "prevBlockInterval": 0,
        "proposerBonus": 0,
        "registry": "0x0000000000000000000000000000000000000000",
        "replacementCoolDown": 0,
        "rewardDecreasePerCheckpoint": 0,
        "rewardPerStake": 0,
        "rootChain": "0x0000000000000000000000000000000000000000",
        "signerUpdateLimit": 0,
        "token": "0x0000000000000000000000000000000000000000",
        "totalHeimdallFee": 0,
        "totalRewards": 0,
        "totalRewardsLiquidated": 0,
        "totalStaked": 0,
        "validatorRegistry": "0x53D63B9523Ab13399e2071BB4056bbc7Bf98e6A6",
        "validatorShareFactory": "0x0000000000000000000000000000000000000000",
        "validatorState": { "amount": 0, "stakerCount": 0 },
        "validatorThreshold": 0,
        "WITHDRAWAL_DELAY": 0
      },
      "derivedName": "StakeManagerExtension",
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "Merkle",
      "address": "0x32262DDD01fFF9bb367586317A5e40Dbe2bCcbe2",
      "type": "Contract",
      "template": "polygonposbridge/Merkle",
      "sourceHashes": [
        "0xf1be6e7e57f3ffb6af67424c57b1907e1fd54a410e2020ae110857774ea0a4b7"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1691242415,
      "sinceBlock": 17849092,
      "values": { "$immutable": true },
      "derivedName": "Merkle"
    },
    {
      "name": "StateSender",
      "address": "0x3a122785bC4d951D132B2CAD31FC187D6DC7A21C",
      "type": "Contract",
      "template": "polygonposbridge/StateSender",
      "sourceHashes": [
        "0x2f6878db7119cba5b64851fc04d0bd822ce210db74bf11ca1255f000eb88065f"
      ],
      "proxyType": "immutable",
      "description": "Smart contract allowing whitelisted addresses to send messages to contracts on the child chain.",
      "ignoreInWatchMode": ["counter"],
      "sinceTimestamp": 1691243927,
      "sinceBlock": 17849217,
      "values": {
        "$immutable": true,
        "counter": 39893,
        "isOwner": false,
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "REGISTRATIONS": [
          "0x885fcE983b6a01633f764325B8c3c5D31032C995",
          "0x08C4b60fda8aA6239b7de7d165BCF6F1686Cad82"
        ]
      },
      "derivedName": "StateSender",
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "StakingNFT",
      "address": "0x495eea66B0f8b636D441dC6a98d8F5C3D455C4c0",
      "type": "Contract",
      "template": "polygonposbridge/StakingNFT",
      "sourceHashes": [
        "0x3d5900e83820883d56342fee2c6ac21046702b686ae86d2ce5d2ac1beafe8b9e"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1691243843,
      "sinceBlock": 17849210,
      "values": {
        "$immutable": true,
        "getApproved": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "isOwner": false,
        "name": "Shibarium Validator",
        "owner": "0x65218A41Fb92637254B4f8c97448d3dF343A3064",
        "ownerOf": [
          "0xf6aA8B10bAA3C228fC94F3344b4a4A3BBf152CCd",
          "0xb5f7d2A522cB918C3364529b65440a83fab7407C",
          "0xF41a8315531d225AcC889C207aF7638adDCcf948",
          "0xF0Bf9BA7B71646d73a393d805CaF0c7e67C06a0F"
        ],
        "symbol": "SHV",
        "tokenURI": ["", "", "", ""],
        "totalSupply": 12
      },
      "derivedName": "StakingNFT"
    },
    {
      "name": "StakingInfo",
      "address": "0x539964b3d225194717fb896D26c8b3E635b8A1aE",
      "type": "Contract",
      "template": "polygonposbridge/StakingInfo",
      "sourceHashes": [
        "0x6f083446e02260d9c548d8b66bfe0bf437ae747e1e7163a71a5f1a6c4cabcd54"
      ],
      "proxyType": "immutable",
      "description": "Contains logging and getter functions about staking.",
      "sinceTimestamp": 1691243831,
      "sinceBlock": 17849209,
      "values": {
        "$immutable": true,
        "getAccountStateRoot": "0x76afb575e9c27e66d74045cd8a4c879dc244fb7b9657783249f62e57da12042d",
        "getStakerDetails": [
          [
            0,
            "51250000000000000000",
            0,
            0,
            "0x0000000000000000000000000000000000000000",
            0
          ]
        ],
        "isOwner": false,
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "registry": "0xF486e3B6A432Bdd6EDaAe85a565CD7682A7862BB"
      },
      "derivedName": "StakingInfo"
    },
    {
      "name": "ValidatorRegistry",
      "address": "0x53D63B9523Ab13399e2071BB4056bbc7Bf98e6A6",
      "type": "Contract",
      "template": "polygonposbridge/ValidatorRegistry",
      "sourceHashes": [
        "0xa7a26ec21e6beb982a3ab02a6e6c3d45d1812885147523f76ec9a1a55072dbcf"
      ],
      "proxyType": "immutable",
      "description": "Defines the whitelist of validators that can stake and therefore participate in the PoS consensus protocol.",
      "sinceTimestamp": 1691243915,
      "sinceBlock": 17849216,
      "values": {
        "$immutable": true,
        "isOwner": false,
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "validatorWhitelistingEnable": true
      },
      "derivedName": "ValidatorRegistry",
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "WithdrawalManager",
      "address": "0x5F683665ca87dbC3D1358913da80e3C71c328Fb0",
      "type": "Contract",
      "template": "polygonposbridge/WithdrawManager",
      "sourceHashes": [
        "0x7ff7f5fd1ef5fec15bf32c69a0cdd350dc14edf95e739c32035dddde5009e3c0",
        "0xda0990aeeb22bcf3c867d4f398d00bd7d2f15aef3add8c60800711185b34a09c"
      ],
      "proxyType": "EIP897 proxy",
      "description": "Contract handling users’ withdrawal finalization for tokens escrowed in DepositManager.",
      "sinceTimestamp": 1691243987,
      "sinceBlock": 17849222,
      "values": {
        "$immutable": false,
        "$implementation": "0xA5E0bD9dc1F1d55e53ca87496731aE6B768094D3",
        "exitNft": "0x7ad7f98f229c5C1EA5161bEd952c3007DBE1F307",
        "exitWindow": 0,
        "HALF_EXIT_PERIOD": 1,
        "implementation": "0xA5E0bD9dc1F1d55e53ca87496731aE6B768094D3",
        "isOwner": false,
        "ON_FINALIZE_GAS_LIMIT": 300000,
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2
      },
      "derivedName": "WithdrawManager",
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "StakeManager",
      "address": "0x65218A41Fb92637254B4f8c97448d3dF343A3064",
      "type": "Contract",
      "template": "polygonposbridge/StakeManager_shibarium",
      "sourceHashes": [
        "0x0e16b120e42fc8b8c6ed46c538b263aa895b463415254eba82cc25e7d104a136",
        "0x315e4278520bf097047cc2be4371ac60125bba1043fa4e97e7054988fe3ba503"
      ],
      "proxyType": "Polygon proxy",
      "ignoreInWatchMode": [
        "currentEpoch",
        "currentValidatorSetTotalStake",
        "epoch",
        "rewardPerStake",
        "totalRewardsLiquidated",
        "totalStaked",
        "validatorState",
        "totalHeimdallFee",
        "NFTCounter",
        "delegatorsReward"
      ],
      "sinceTimestamp": 1691243867,
      "sinceBlock": 17849212,
      "values": {
        "$admin": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "$implementation": "0x1be79AED4088A55f5ED249a14f777758d9F888c6",
        "$pastUpgrades": [
          [
            "2024-11-29T21:10:11.000Z",
            "0x80b2df040001f763336e32a7a1784fe5af6b8a9645d79f9f28e2a53e6b76eece",
            ["0xa5eeE6a1478c9c1b80f6f242D230C309107Cc584"]
          ],
          [
            "2024-11-30T00:34:23.000Z",
            "0x3278cdbe9d195ccb8cdc22c3c3613affb1b4ce5f01daf4eea713d29b49b6e5a7",
            ["0x1be79AED4088A55f5ED249a14f777758d9F888c6"]
          ]
        ],
        "$upgradeCount": 2,
        "auctionPeriod": 0,
        "CHECKPOINT_REWARD": "100000000000000000000",
        "checkPointBlockInterval": 1024,
        "checkpointRewardDelta": 0,
        "currentEpoch": 24653,
        "currentValidatorSetSize": 12,
        "currentValidatorSetTotalStake": "19129853420889152873015528",
        "delegationEnabled": true,
        "delegatorsReward": [
          "325341007234289128853",
          "6501646530511494472",
          "245029039561654077767",
          "2183291536449315348"
        ],
        "dynasty": 1,
        "epoch": 24653,
        "eventsHub": "0x12185669Dac70749f717247971E0B8819b2e472e",
        "extensionCode": "0x17174796E0eF24330aed565c87Ba5e85431DE19e",
        "getRegistry": "0xF486e3B6A432Bdd6EDaAe85a565CD7682A7862BB",
        "governance": "0xC476E20c2F7FA3B35aC242aBE71B59e902242f06",
        "implementation": "0x1be79AED4088A55f5ED249a14f777758d9F888c6",
        "isOwner": false,
        "locked": false,
        "logger": "0x539964b3d225194717fb896D26c8b3E635b8A1aE",
        "maxRewardedCheckpoints": 0,
        "minDeposit": "1000000000000000000",
        "minHeimdallFee": "1000000000000000000",
        "NFTContract": "0x495eea66B0f8b636D441dC6a98d8F5C3D455C4c0",
        "NFTCounter": 15,
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "ownerOf": [
          "0xf6aA8B10bAA3C228fC94F3344b4a4A3BBf152CCd",
          "0xb5f7d2A522cB918C3364529b65440a83fab7407C",
          "0xF41a8315531d225AcC889C207aF7638adDCcf948",
          "0xF0Bf9BA7B71646d73a393d805CaF0c7e67C06a0F"
        ],
        "prevBlockInterval": 0,
        "proposerBonus": 10,
        "proxyType": 2,
        "registry": "0xF486e3B6A432Bdd6EDaAe85a565CD7682A7862BB",
        "replacementCoolDown": 13608,
        "rewardDecreasePerCheckpoint": 0,
        "rewardPerStake": "1582538833747945943164700",
        "rootChain": "0xd46042f503B8Ec0A166af8C0BFbB0a3C562353F9",
        "signerUpdateLimit": 100,
        "token": "0x9813037ee2218799597d83D4a5B6F3b6778218d9",
        "totalHeimdallFee": "4502000000000000000000",
        "totalRewards": 0,
        "totalRewardsLiquidated": "18590437583460107248060",
        "totalStaked": "119999000000000000000000",
        "validatorShareFactory": "0x6113E0FDBe8EAE2e95F4a35cB0a6530c518881fD",
        "validatorState": {
          "amount": "19129853420889152873015528",
          "stakerCount": 12
        },
        "validatorThreshold": 15,
        "WITHDRAWAL_DELAY": 1,
        "withdrawalDelay": 1
      },
      "derivedName": "StakeManager",
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "ERC20Predicate",
      "address": "0x6Aca26bFCE7675FF71C734BF26C8c0aC4039A4Fa",
      "type": "Contract",
      "template": "polygonposbridge/predicate",
      "sourceHashes": [
        "0x63f5481a49da196498b6cd77450d4e12da12c7608ab022b417dbed836935e0f7",
        "0x093a1d884a048e1f39d3bb4ebd1bab3f52d07ed9cfd823099f6ddb87098f2de2"
      ],
      "proxyType": "Polygon proxy",
      "sinceTimestamp": 1691475539,
      "sinceBlock": 17868368,
      "values": {
        "$admin": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "$implementation": "0xfffC2D781999F09A8b127f8Ef419a3EeD2EDa1dd",
        "$pastUpgrades": [
          [
            "2023-08-08T06:19:11.000Z",
            "0x0200b66f31756427a0c3d6a06bf1d067bc82b9bafbce31bc4510782e2a83ee6d",
            ["0xfffC2D781999F09A8b127f8Ef419a3EeD2EDa1dd"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x80Cc222EA02F4334F67e9E55E7412fed62599004"]
          },
          "MANAGER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
              "0x08C4b60fda8aA6239b7de7d165BCF6F1686Cad82"
            ]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "implementation": "0xfffC2D781999F09A8b127f8Ef419a3EeD2EDa1dd",
        "MANAGER_ROLE": "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
        "proxyOwner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2,
        "TOKEN_TYPE": "0x8ae85d849167ff996c04040c44924fd364217285e4cad818292c7ac37c0a345b",
        "TRANSFER_EVENT_SIG": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
      },
      "derivedName": "ERC20Predicate"
    },
    {
      "name": "ExitNFT",
      "address": "0x7ad7f98f229c5C1EA5161bEd952c3007DBE1F307",
      "type": "Contract",
      "template": "polygonposbridge/ExitNFT",
      "sourceHashes": [
        "0x8ab86a61175e5d05a7397611f3be4b4979a70b9c498bf772de63c31455e9393d"
      ],
      "proxyType": "immutable",
      "description": "NFTs used to represent a withdrawal in the withdrawal PriorityQueue (Only used for tokens initially deposited via DepositManager).",
      "sinceTimestamp": 1691243975,
      "sinceBlock": 17849221,
      "values": { "$immutable": true, "getApproved": [], "ownerOf": [] },
      "derivedName": "ExitNFT"
    },
    {
      "address": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
      "type": "EOA",
      "proxyType": "EOA",
      "controlsMajorityOfUpgradePermissions": true,
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0x17174796E0eF24330aed565c87Ba5e85431DE19e",
          "description": "can update the validator registry address used to check whitelist inclusion."
        },
        {
          "permission": "interact",
          "from": "0x53D63B9523Ab13399e2071BB4056bbc7Bf98e6A6",
          "description": "can update the whitelist of validators"
        },
        {
          "permission": "interact",
          "from": "0x65218A41Fb92637254B4f8c97448d3dF343A3064",
          "description": "can replace all validators."
        },
        {
          "permission": "interact",
          "from": "0x885fcE983b6a01633f764325B8c3c5D31032C995",
          "description": "can update the root chain it references."
        },
        {
          "permission": "interact",
          "from": "0x8ed7d143Ef452316Ab1123d28Ab302dC3b80d3ce",
          "description": "can update how much of the slashed funds go to the proposer and reporter."
        },
        {
          "permission": "interact",
          "from": "0xd46042f503B8Ec0A166af8C0BFbB0a3C562353F9",
          "description": "can delete arbitrary checkpoints."
        },
        {
          "permission": "upgrade",
          "from": "0x0057bed57066F61c64DACB395B38c6E1792e03B8"
        },
        {
          "permission": "upgrade",
          "from": "0x03c77e03dB8183C8a9eFC178eC1Dfd98c1EfD665"
        },
        {
          "permission": "upgrade",
          "from": "0x08C4b60fda8aA6239b7de7d165BCF6F1686Cad82"
        },
        {
          "permission": "upgrade",
          "from": "0x12185669Dac70749f717247971E0B8819b2e472e"
        },
        {
          "permission": "upgrade",
          "from": "0x65218A41Fb92637254B4f8c97448d3dF343A3064"
        },
        {
          "permission": "upgrade",
          "from": "0x6Aca26bFCE7675FF71C734BF26C8c0aC4039A4Fa"
        },
        {
          "permission": "upgrade",
          "from": "0x98C831cFB18852f7deB3E3a970e907475b49730f"
        },
        {
          "permission": "upgrade",
          "from": "0xc3897302aB4B42931cB4857050Fa60f53B775870"
        }
      ]
    },
    {
      "name": "DepositManager",
      "address": "0x885fcE983b6a01633f764325B8c3c5D31032C995",
      "type": "Contract",
      "template": "polygonposbridge/DepositManager",
      "sourceHashes": [
        "0x5a03169cc01515b7d5ddd8f76da3641dcf8ffd451fc1d8edede0459191021835",
        "0x6abce1ddeb9ae9c18a0e3da61c77df366e4fc7b1837de5dbc51cdbd50fb6004c"
      ],
      "proxyType": "EIP897 proxy",
      "description": "Contract to deposit and escrow ETH, ERC20 or ERC721 tokens.",
      "sinceTimestamp": 1691243951,
      "sinceBlock": 17849219,
      "values": {
        "$immutable": false,
        "$implementation": "0x79a674D373551e6CfD22b2ed65cc1Ac09250F430",
        "childChain": "0x32262DDD01fFF9bb367586317A5e40Dbe2bCcbe2",
        "governance": "0xC476E20c2F7FA3B35aC242aBE71B59e902242f06",
        "implementation": "0x79a674D373551e6CfD22b2ed65cc1Ac09250F430",
        "isOwner": false,
        "locked": false,
        "maxErc20Deposit": "100000000000000000000000000000",
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2,
        "registry": "0xF486e3B6A432Bdd6EDaAe85a565CD7682A7862BB",
        "rootChain": "0xd46042f503B8Ec0A166af8C0BFbB0a3C562353F9",
        "stateSender": "0x3a122785bC4d951D132B2CAD31FC187D6DC7A21C"
      },
      "derivedName": "DepositManager"
    },
    {
      "name": "SlashingManager",
      "address": "0x8ed7d143Ef452316Ab1123d28Ab302dC3b80d3ce",
      "type": "Contract",
      "template": "polygonposbridge/SlashingManager",
      "sourceHashes": [
        "0x64d3fd0840fb5d9eedf5977cce8c443d31adfc2323458db3d2d9461d889ea994"
      ],
      "proxyType": "immutable",
      "description": "Contract that allows the consensus supermajority to slash validators.",
      "sinceTimestamp": 1691243891,
      "sinceBlock": 17849214,
      "values": {
        "$immutable": true,
        "heimdallId": "0x2d1b61c7cbff527a84da0d1da4e5ba94d46c39894530664ecfb67e21036736f1",
        "isOwner": false,
        "jailCheckpoints": 5,
        "logger": "0x539964b3d225194717fb896D26c8b3E635b8A1aE",
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proposerRate": 50,
        "registry": "0xF486e3B6A432Bdd6EDaAe85a565CD7682A7862BB",
        "reportRate": 5,
        "slashingNonce": 0,
        "VOTE_TYPE": 2
      },
      "derivedName": "SlashingManager"
    },
    {
      "name": "ERC721Predicate",
      "address": "0x98C831cFB18852f7deB3E3a970e907475b49730f",
      "type": "Contract",
      "template": "polygonposbridge/predicate",
      "sourceHashes": [
        "0x1d84e4aa2ca9808f7866a5d3c6c804956136d56a985525328da76b85a63238f3",
        "0x4731842b5a3a9367e3a748bcccb6280c89c1e5428139b7cca48ed566ed74709a"
      ],
      "proxyType": "Polygon proxy",
      "sinceTimestamp": 1691475707,
      "sinceBlock": 17868382,
      "values": {
        "$admin": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "$implementation": "0xe0f4555Fcffb181B1D7566d89200105226F29580",
        "$pastUpgrades": [
          [
            "2023-08-08T06:21:59.000Z",
            "0x2c4200e203ff16184501a19029fcc02264538e65e74e96d142010ebe5a7fcf58",
            ["0x67281E19c31B19f5450d1F218AA29e036C606fC0"]
          ],
          [
            "2024-10-09T16:29:47.000Z",
            "0x0773a0a64bcceb0d4fba20aa39483ea08f1cd58b39899640e8a2c161253f53c5",
            ["0xe0f4555Fcffb181B1D7566d89200105226F29580"]
          ]
        ],
        "$upgradeCount": 2,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x80Cc222EA02F4334F67e9E55E7412fed62599004"]
          },
          "MANAGER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
              "0x08C4b60fda8aA6239b7de7d165BCF6F1686Cad82"
            ]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "implementation": "0xe0f4555Fcffb181B1D7566d89200105226F29580",
        "MANAGER_ROLE": "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
        "proxyOwner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2,
        "TOKEN_TYPE": "0x73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a",
        "TRANSFER_EVENT_SIG": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
      },
      "derivedName": "ERC721Predicate"
    },
    {
      "name": "ERC721Predicate",
      "address": "0x9df56e63CD340F0f3D811dd2aAAEEa42ec27D5a3",
      "type": "Contract",
      "sourceHashes": [
        "0xd28d2832fa5e35e810073b99fcec18faf119bfc95223abc05bfb353a1f90dfd3"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1732926851,
      "sinceBlock": 21296948,
      "values": { "$immutable": true, "CHAINID": 109, "networkId": "0x6d" },
      "derivedName": "ERC721PredicateBurnOnly"
    },
    {
      "address": "0xb5f7d2A522cB918C3364529b65440a83fab7407C",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "RLPReader",
      "address": "0xc107664eeEEA2c84e51D56F1B7a479EbCf9541c4",
      "type": "Contract",
      "template": "polygonposbridge/RLPReader",
      "sourceHashes": [
        "0x00b47d9143f40ccd858572c752a890b6aa733e80f4a63e03fe919674f4ac55e1"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1691242667,
      "sinceBlock": 17849113,
      "values": { "$immutable": true },
      "derivedName": "RLPReader"
    },
    {
      "name": "EtherPredicate",
      "address": "0xc3897302aB4B42931cB4857050Fa60f53B775870",
      "type": "Contract",
      "template": "polygonposbridge/predicate",
      "sourceHashes": [
        "0xcd0a12ca9277d60031fd022482b8174c79dabb5d731b80609041c6778a899455",
        "0xa949b42c0c7697496d06fe3d513ba1663e62f99796bacd265ab50e6453e4dcbb"
      ],
      "proxyType": "Polygon proxy",
      "sinceTimestamp": 1691475959,
      "sinceBlock": 17868403,
      "values": {
        "$admin": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "$implementation": "0x3f3bF9Ce73CE5a152561f4BF0306de3E3526f8FA",
        "$pastUpgrades": [
          [
            "2023-08-08T06:26:11.000Z",
            "0x8a1a09d34137ce9d1fa93b6bbfb9312d8cd7c7141a440cee55bd54a2fda93584",
            ["0x3f3bF9Ce73CE5a152561f4BF0306de3E3526f8FA"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x80Cc222EA02F4334F67e9E55E7412fed62599004"]
          },
          "MANAGER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
              "0x08C4b60fda8aA6239b7de7d165BCF6F1686Cad82"
            ]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "implementation": "0x3f3bF9Ce73CE5a152561f4BF0306de3E3526f8FA",
        "MANAGER_ROLE": "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
        "proxyOwner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2,
        "TOKEN_TYPE": "0xa234e09165f88967a714e2a476288e4c6d88b4b69fe7c300a03190b858990bfc",
        "TRANSFER_EVENT_SIG": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
      },
      "derivedName": "EtherPredicate"
    },
    {
      "name": "Governance",
      "address": "0xC476E20c2F7FA3B35aC242aBE71B59e902242f06",
      "type": "Contract",
      "template": "polygonposbridge/Governance",
      "sourceHashes": [
        "0x8694e089b35ef48bca7c4041191923b03d5a5c1350e09e9074b44199d1df6cc3",
        "0x5a4efa55552545ebc05194d3649859f5731b5beb3358f26dadb38330cec78719"
      ],
      "proxyType": "EIP897 proxy",
      "description": "Simple contract that allows the owner to call an `update` function on arbitrary contracts.",
      "sinceTimestamp": 1691242715,
      "sinceBlock": 17849117,
      "values": {
        "$immutable": false,
        "$implementation": "0x3ca9770a30c61e6cF0a4bDD66A26Cee61AE51e65",
        "implementation": "0x3ca9770a30c61e6cF0a4bDD66A26Cee61AE51e65",
        "isOwner": false,
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2
      },
      "derivedName": "Governance",
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "RootChain",
      "address": "0xd46042f503B8Ec0A166af8C0BFbB0a3C562353F9",
      "type": "Contract",
      "template": "polygonposbridge/RootChain",
      "sourceHashes": [
        "0x561d13767c8364feca3a6af598f52c824a2ce67ac37855df5d2f678e5fa13410",
        "0x53df93798909c51b914d7f286a3fb02bd08bbc999d189bb089c2a7bb6f273426"
      ],
      "proxyType": "EIP897 proxy",
      "description": "Contract storing chain checkpoints. Note that validity of these checkpoints is not verified, it is assumed to be valid if signed by 2/3 of the validators.",
      "ignoreInWatchMode": [
        "_nextHeaderBlock",
        "getLastChildBlock",
        "currentHeaderBlock"
      ],
      "sinceTimestamp": 1691243771,
      "sinceBlock": 17849204,
      "values": {
        "_nextHeaderBlock": 246530000,
        "$immutable": false,
        "$implementation": "0xb3bfb2aE369a0e9D9735ac679e4A14eD81E837fA",
        "CHAINID": 109,
        "constructorArgs": {
          "_proxyTo": "0xb3bfb2aE369a0e9D9735ac679e4A14eD81E837fA",
          "_registry": "0xF486e3B6A432Bdd6EDaAe85a565CD7682A7862BB",
          "_heimdallId": "heimdall-109"
        },
        "currentHeaderBlock": 246520000,
        "getLastChildBlock": 10632220,
        "heimdallId": "0x2d1b61c7cbff527a84da0d1da4e5ba94d46c39894530664ecfb67e21036736f1",
        "implementation": "0xb3bfb2aE369a0e9D9735ac679e4A14eD81E837fA",
        "isOwner": false,
        "networkId": "0x6d",
        "owner": "0x80Cc222EA02F4334F67e9E55E7412fed62599004",
        "proxyType": 2,
        "VOTE_TYPE": 2
      },
      "derivedName": "RootChain",
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "ERC20Predicate",
      "address": "0xdaF14950155DF895E9D0fd2521D05477d26F462c",
      "type": "Contract",
      "sourceHashes": [
        "0xbcd7eec85265625afbc2eb9dda85d5f9134b5a206a965d8f040be01a92d12299"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1732926839,
      "sinceBlock": 21296947,
      "values": { "$immutable": true, "CHAINID": 109, "networkId": "0x6d" },
      "derivedName": "ERC20PredicateBurnOnly"
    },
    {
      "address": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xF0Bf9BA7B71646d73a393d805CaF0c7e67C06a0F",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xF41a8315531d225AcC889C207aF7638adDCcf948",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Registry",
      "address": "0xF486e3B6A432Bdd6EDaAe85a565CD7682A7862BB",
      "type": "Contract",
      "template": "polygonposbridge/Registry",
      "sourceHashes": [
        "0x8629d952a05ac151ee3cf2d7096112e2b03c6404c26409be4a6f9dfd8cdc30ba"
      ],
      "proxyType": "immutable",
      "description": "Maintains the addresses of the contracts used in the system.",
      "sinceTimestamp": 1691243735,
      "sinceBlock": 17849201,
      "values": {
        "$immutable": true,
        "erc20Predicate": "0xdaF14950155DF895E9D0fd2521D05477d26F462c",
        "erc721Predicate": "0x9df56e63CD340F0f3D811dd2aAAEEa42ec27D5a3",
        "getChildChainAndStateSender": [
          "0x32262DDD01fFF9bb367586317A5e40Dbe2bCcbe2",
          "0x3a122785bC4d951D132B2CAD31FC187D6DC7A21C"
        ],
        "getDepositManagerAddress": "0x885fcE983b6a01633f764325B8c3c5D31032C995",
        "getSlashingManagerAddress": "0x8ed7d143Ef452316Ab1123d28Ab302dC3b80d3ce",
        "getStakeManagerAddress": "0x65218A41Fb92637254B4f8c97448d3dF343A3064",
        "getValidatorShareAddress": "0xe99f1001c8afD34AcF0CEd6aD33137DeE8D81dE6",
        "getWethTokenAddress": "0x0000000000000000000000000000000000000000",
        "getWithdrawManagerAddress": "0x5F683665ca87dbC3D1358913da80e3C71c328Fb0",
        "governance": "0xC476E20c2F7FA3B35aC242aBE71B59e902242f06"
      },
      "derivedName": "Registry"
    },
    {
      "address": "0xf6aA8B10bAA3C228fC94F3344b4a4A3BBf152CCd",
      "type": "EOA",
      "proxyType": "EOA"
    }
  ],
  "abis": {
    "0x0057bed57066F61c64DACB395B38c6E1792e03B8": [
      "constructor(address _proxyTo)",
      "event ProxyOwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function proxyOwner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferProxyOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x01E988D4b8E86496a45C842E60155a9472541266": [
      "event DelegatorUnstakeWithId(uint256 indexed validatorId, address indexed user, uint256 amount, uint256 nonce)",
      "event RewardParams(uint256 rewardDecreasePerCheckpoint, uint256 maxRewardedCheckpoints, uint256 checkpointRewardDelta)",
      "event ShareBurnedWithId(uint256 indexed validatorId, address indexed user, uint256 indexed amount, uint256 tokens, uint256 nonce)",
      "event SharesTransfer(uint256 indexed validatorId, address indexed from, address indexed to, uint256 value)",
      "event UpdateCommissionRate(uint256 indexed validatorId, uint256 indexed newCommissionRate, uint256 indexed oldCommissionRate)",
      "function initialize(address _registry)",
      "function logDelegatorUnstakedWithId(uint256 validatorId, address user, uint256 amount, uint256 nonce)",
      "function logRewardParams(uint256 rewardDecreasePerCheckpoint, uint256 maxRewardedCheckpoints, uint256 checkpointRewardDelta)",
      "function logShareBurnedWithId(uint256 validatorId, address user, uint256 amount, uint256 tokens, uint256 nonce)",
      "function logSharesTransfer(uint256 validatorId, address from, address to, uint256 value)",
      "function logUpdateCommissionRate(uint256 validatorId, uint256 newCommissionRate, uint256 oldCommissionRate)",
      "function registry() view returns (address)"
    ],
    "0x03c77e03dB8183C8a9eFC178eC1Dfd98c1EfD665": [
      "constructor(address _proxyTo)",
      "event ProxyOwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function proxyOwner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferProxyOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x08C4b60fda8aA6239b7de7d165BCF6F1686Cad82": [
      "constructor(address _proxyTo)",
      "event ProxyOwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function proxyOwner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferProxyOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x12185669Dac70749f717247971E0B8819b2e472e": [
      "constructor(address _proxyTo)",
      "event OwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function owner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x17174796E0eF24330aed565c87Ba5e85431DE19e": [
      "constructor()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RootChainChanged(address indexed previousRootChain, address indexed newRootChain)",
      "function CHECKPOINT_REWARD() view returns (uint256)",
      "function NFTContract() view returns (address)",
      "function NFTCounter() view returns (uint256)",
      "function WITHDRAWAL_DELAY() view returns (uint256)",
      "function accountStateRoot() view returns (bytes32)",
      "function auctionPeriod() view returns (uint256)",
      "function changeRootChain(address newRootChain)",
      "function checkPointBlockInterval() view returns (uint256)",
      "function checkValidatorWhitelisting(address validator) view returns (bool)",
      "function checkpointRewardDelta() view returns (uint256)",
      "function confirmAuctionBid(uint256 validatorId, uint256 heimdallFee, address stakeManager)",
      "function currentEpoch() view returns (uint256)",
      "function delegationEnabled() view returns (bool)",
      "function dynasty() view returns (uint256)",
      "function eventsHub() view returns (address)",
      "function extensionCode() view returns (address)",
      "function governance() view returns (address)",
      "function isOwner() view returns (bool)",
      "function latestSignerUpdateEpoch(uint256) view returns (uint256)",
      "function lock()",
      "function locked() view returns (bool)",
      "function logger() view returns (address)",
      "function maxRewardedCheckpoints() view returns (uint256)",
      "function migrateValidatorsData(uint256 validatorIdFrom, uint256 validatorIdTo)",
      "function minDeposit() view returns (uint256)",
      "function minHeimdallFee() view returns (uint256)",
      "function owner() view returns (address)",
      "function prevBlockInterval() view returns (uint256)",
      "function proposerBonus() view returns (uint256)",
      "function registry() view returns (address)",
      "function renounceOwnership()",
      "function replacementCoolDown() view returns (uint256)",
      "function rewardDecreasePerCheckpoint() view returns (uint256)",
      "function rewardPerStake() view returns (uint256)",
      "function rootChain() view returns (address)",
      "function signerToValidator(address) view returns (uint256)",
      "function signerUpdateLimit() view returns (uint256)",
      "function signers(uint256) view returns (address)",
      "function startAuction(uint256 validatorId, uint256 amount, bool _acceptDelegation, bytes _signerPubkey)",
      "function token() view returns (address)",
      "function totalHeimdallFee() view returns (uint256)",
      "function totalRewards() view returns (uint256)",
      "function totalRewardsLiquidated() view returns (uint256)",
      "function totalStaked() view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function unlock()",
      "function updateCheckpointRewardParams(uint256 _rewardDecreasePerCheckpoint, uint256 _maxRewardedCheckpoints, uint256 _checkpointRewardDelta)",
      "function updateCommissionRate(uint256 validatorId, uint256 newCommissionRate)",
      "function updateValidatorRegistry(address _newContract)",
      "function userFeeExit(address) view returns (uint256)",
      "function validatorAuction(uint256) view returns (uint256 amount, uint256 startEpoch, address user, bool acceptDelegation, bytes signerPubkey)",
      "function validatorRegistry() view returns (address)",
      "function validatorShareFactory() view returns (address)",
      "function validatorState() view returns (uint256 amount, uint256 stakerCount)",
      "function validatorStateChanges(uint256) view returns (int256 amount, int256 stakerCount)",
      "function validatorThreshold() view returns (uint256)",
      "function validators(uint256) view returns (uint256 amount, uint256 reward, uint256 activationEpoch, uint256 deactivationEpoch, uint256 jailTime, address signer, address contractAddress, uint8 status, uint256 commissionRate, uint256 lastCommissionUpdate, uint256 delegatorsReward, uint256 delegatedAmount, uint256 initialRewardPerStake)"
    ],
    "0x1b50d902F01ad1e6358FD6116BC115E0a43Fe925": [
      "event MetaTransactionExecuted(address userAddress, address relayerAddress, bytes functionSignature)",
      "event PredicateRegistered(bytes32 indexed tokenType, address indexed predicateAddress)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TokenMapped(address indexed rootToken, address indexed childToken, bytes32 indexed tokenType)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DEPOSIT() view returns (bytes32)",
      "function ERC712_VERSION() view returns (string)",
      "function ETHER_ADDRESS() view returns (address)",
      "function MAPPER_ROLE() view returns (bytes32)",
      "function MAP_TOKEN() view returns (bytes32)",
      "function checkpointManagerAddress() view returns (address)",
      "function childChainManagerAddress() view returns (address)",
      "function childToRootToken(address) view returns (address)",
      "function cleanMapToken(address rootToken, address childToken)",
      "function depositEtherFor(address user) payable",
      "function depositFor(address user, address rootToken, bytes depositData)",
      "function executeMetaTransaction(address userAddress, bytes functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) payable returns (bytes)",
      "function exit(bytes inputData)",
      "function getChainId() pure returns (uint256)",
      "function getDomainSeperator() view returns (bytes32)",
      "function getNonce(address user) view returns (uint256 nonce)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _owner)",
      "function initializeEIP712()",
      "function mapToken(address rootToken, address childToken, bytes32 tokenType)",
      "function processedExits(bytes32) view returns (bool)",
      "function registerPredicate(bytes32 tokenType, address predicateAddress)",
      "function remapToken(address rootToken, address childToken, bytes32 tokenType)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function rootToChildToken(address) view returns (address)",
      "function setCheckpointManager(address newCheckpointManager)",
      "function setChildChainManagerAddress(address newChildChainManager)",
      "function setStateSender(address newStateSender)",
      "function setupContractId()",
      "function stateSenderAddress() view returns (address)",
      "function tokenToType(address) view returns (bytes32)",
      "function typeToPredicate(bytes32) view returns (address)"
    ],
    "0x1be79AED4088A55f5ED249a14f777758d9F888c6": [
      "constructor()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RootChainChanged(address indexed previousRootChain, address indexed newRootChain)",
      "function CHECKPOINT_REWARD() view returns (uint256)",
      "function NFTContract() view returns (address)",
      "function NFTCounter() view returns (uint256)",
      "function WITHDRAWAL_DELAY() view returns (uint256)",
      "function accountStateRoot() view returns (bytes32)",
      "function auctionPeriod() view returns (uint256)",
      "function changeRootChain(address newRootChain)",
      "function checkPointBlockInterval() view returns (uint256)",
      "function checkSignatures(uint256 blockInterval, bytes32 voteHash, bytes32 stateRoot, address proposer, uint256[3][] sigs) returns (uint256)",
      "function checkpointRewardDelta() view returns (uint256)",
      "function claimFee(uint256 accumFeeAmount, uint256 index, bytes proof)",
      "function confirmAuctionBid(uint256 validatorId, uint256 heimdallFee)",
      "function currentEpoch() view returns (uint256)",
      "function currentValidatorSetSize() view returns (uint256)",
      "function currentValidatorSetTotalStake() view returns (uint256)",
      "function decreaseValidatorDelegatedAmount(uint256 validatorId, uint256 amount)",
      "function delegatedAmount(uint256 validatorId) view returns (uint256)",
      "function delegationDeposit(uint256 validatorId, uint256 amount, address delegator) returns (bool)",
      "function delegationEnabled() view returns (bool)",
      "function delegatorsReward(uint256 validatorId) view returns (uint256)",
      "function dethroneAndStake(address auctionUser, uint256 heimdallFee, uint256 validatorId, uint256 auctionAmount, bool acceptDelegation, bytes signerPubkey)",
      "function dynasty() view returns (uint256)",
      "function epoch() view returns (uint256)",
      "function eventsHub() view returns (address)",
      "function extensionCode() view returns (address)",
      "function forceUnstake(uint256 validatorId)",
      "function getRegistry() view returns (address)",
      "function getValidatorContract(uint256 validatorId) view returns (address)",
      "function getValidatorId(address user) view returns (uint256)",
      "function governance() view returns (address)",
      "function initialize(address _registry, address _rootchain, address _token, address _NFTContract, address _stakingLogger, address _validatorShareFactory, address _governance, address _owner, address _extensionCode)",
      "function insertSigners(address[] _signers)",
      "function isOwner() view returns (bool)",
      "function isValidator(uint256 validatorId) view returns (bool)",
      "function latestSignerUpdateEpoch(uint256) view returns (uint256)",
      "function lock()",
      "function locked() view returns (bool)",
      "function logger() view returns (address)",
      "function maxRewardedCheckpoints() view returns (uint256)",
      "function migrateDelegation(uint256 fromValidatorId, uint256 toValidatorId, uint256 amount)",
      "function migrateValidatorsData(uint256 validatorIdFrom, uint256 validatorIdTo)",
      "function minDeposit() view returns (uint256)",
      "function minHeimdallFee() view returns (uint256)",
      "function owner() view returns (address)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function prevBlockInterval() view returns (uint256)",
      "function proposerBonus() view returns (uint256)",
      "function registry() view returns (address)",
      "function reinitialize(address _NFTContract, address _stakingLogger, address _validatorShareFactory, address _extensionCode)",
      "function renounceOwnership()",
      "function replacementCoolDown() view returns (uint256)",
      "function restake(uint256 validatorId, uint256 amount, bool stakeRewards)",
      "function rewardDecreasePerCheckpoint() view returns (uint256)",
      "function rewardPerStake() view returns (uint256)",
      "function rootChain() view returns (address)",
      "function setCurrentEpoch(uint256 _currentEpoch)",
      "function setDelegationEnabled(bool enabled)",
      "function setStakingToken(address _token)",
      "function signerToValidator(address) view returns (uint256)",
      "function signerUpdateLimit() view returns (uint256)",
      "function signers(uint256) view returns (address)",
      "function slash(bytes _slashingInfoList) returns (uint256)",
      "function stakeFor(address user, uint256 amount, uint256 heimdallFee, bool acceptDelegation, bytes signerPubkey)",
      "function startAuction(uint256 validatorId, uint256 amount, bool _acceptDelegation, bytes _signerPubkey)",
      "function stopAuctions(uint256 forNCheckpoints)",
      "function token() view returns (address)",
      "function topUpForFee(address user, uint256 heimdallFee)",
      "function totalHeimdallFee() view returns (uint256)",
      "function totalRewards() view returns (uint256)",
      "function totalRewardsLiquidated() view returns (uint256)",
      "function totalStaked() view returns (uint256)",
      "function totalStakedFor(address user) view returns (uint256)",
      "function transferFunds(uint256 validatorId, uint256 amount, address delegator) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function unjail(uint256 validatorId)",
      "function unlock()",
      "function unstake(uint256 validatorId)",
      "function unstakeClaim(uint256 validatorId)",
      "function updateCheckPointBlockInterval(uint256 _blocks)",
      "function updateCheckpointReward(uint256 newReward)",
      "function updateCheckpointRewardParams(uint256 _rewardDecreasePerCheckpoint, uint256 _maxRewardedCheckpoints, uint256 _checkpointRewardDelta)",
      "function updateCommissionRate(uint256 validatorId, uint256 newCommissionRate)",
      "function updateDynastyValue(uint256 newDynasty)",
      "function updateMinAmounts(uint256 _minDeposit, uint256 _minHeimdallFee)",
      "function updateProposerBonus(uint256 newProposerBonus)",
      "function updateSigner(uint256 validatorId, bytes signerPubkey)",
      "function updateSignerUpdateLimit(uint256 _limit)",
      "function updateValidatorContractAddress(uint256 validatorId, address newContractAddress)",
      "function updateValidatorDelegation(bool delegation)",
      "function updateValidatorState(uint256 validatorId, int256 amount)",
      "function updateValidatorThreshold(uint256 newThreshold)",
      "function userFeeExit(address) view returns (uint256)",
      "function validatorAuction(uint256) view returns (uint256 amount, uint256 startEpoch, address user, bool acceptDelegation, bytes signerPubkey)",
      "function validatorReward(uint256 validatorId) view returns (uint256)",
      "function validatorShareFactory() view returns (address)",
      "function validatorStake(uint256 validatorId) view returns (uint256)",
      "function validatorState() view returns (uint256 amount, uint256 stakerCount)",
      "function validatorStateChanges(uint256) view returns (int256 amount, int256 stakerCount)",
      "function validatorThreshold() view returns (uint256)",
      "function validators(uint256) view returns (uint256 amount, uint256 reward, uint256 activationEpoch, uint256 deactivationEpoch, uint256 jailTime, address signer, address contractAddress, uint8 status, uint256 commissionRate, uint256 lastCommissionUpdate, uint256 delegatorsReward, uint256 delegatedAmount, uint256 initialRewardPerStake)",
      "function withdrawDelegatorsReward(uint256 validatorId) returns (uint256)",
      "function withdrawRewards(uint256 validatorId)",
      "function withdrawalDelay() view returns (uint256)"
    ],
    "0x37A9b4e7c327c449858dba9F5e39CE6771cBc31b": [
      "constructor()",
      "event LockedMintableERC721(address indexed depositor, address indexed depositReceiver, address indexed rootToken, uint256 tokenId)",
      "event LockedMintableERC721Batch(address indexed depositor, address indexed depositReceiver, address indexed rootToken, uint256[] tokenIds)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function BATCH_LIMIT() view returns (uint256)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MANAGER_ROLE() view returns (bytes32)",
      "function TOKEN_TYPE() view returns (bytes32)",
      "function TRANSFER_EVENT_SIG() view returns (bytes32)",
      "function TRANSFER_WITH_METADATA_EVENT_SIG() view returns (bytes32)",
      "function WITHDRAW_BATCH_EVENT_SIG() view returns (bytes32)",
      "function exitTokens(address, address rootToken, bytes log)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _owner)",
      "function lockTokens(address depositor, address depositReceiver, address rootToken, bytes depositData)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)"
    ],
    "0x3a122785bC4d951D132B2CAD31FC187D6DC7A21C": [
      "event NewRegistration(address indexed user, address indexed sender, address indexed receiver)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RegistrationUpdated(address indexed user, address indexed sender, address indexed receiver)",
      "event StateSynced(uint256 indexed id, address indexed contractAddress, bytes data)",
      "function counter() view returns (uint256)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function register(address sender, address receiver)",
      "function registrations(address) view returns (address)",
      "function renounceOwnership()",
      "function syncState(address receiver, bytes data)",
      "function transferOwnership(address newOwner)"
    ],
    "0x3ca9770a30c61e6cF0a4bDD66A26Cee61AE51e65": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function update(address target, bytes data)"
    ],
    "0x3f3bF9Ce73CE5a152561f4BF0306de3E3526f8FA": [
      "constructor()",
      "event ExitedEther(address indexed exitor, uint256 amount)",
      "event LockedEther(address indexed depositor, address indexed depositReceiver, uint256 amount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MANAGER_ROLE() view returns (bytes32)",
      "function TOKEN_TYPE() view returns (bytes32)",
      "function TRANSFER_EVENT_SIG() view returns (bytes32)",
      "function exitTokens(address, address, bytes log)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _owner)",
      "function lockTokens(address depositor, address depositReceiver, address, bytes depositData)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)"
    ],
    "0x495eea66B0f8b636D441dC6a98d8F5C3D455C4c0": [
      "constructor(string name, string symbol)",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "function approve(address to, uint256 tokenId)",
      "function balanceOf(address owner) view returns (uint256)",
      "function burn(uint256 tokenId)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function isOwner() view returns (bool)",
      "function mint(address to, uint256 tokenId)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function renounceOwnership()",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)",
      "function setApprovalForAll(address to, bool approved)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function tokenByIndex(uint256 index) view returns (uint256)",
      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
      "function tokenURI(uint256 tokenId) view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address from, address to, uint256 tokenId)",
      "function transferOwnership(address newOwner)"
    ],
    "0x539964b3d225194717fb896D26c8b3E635b8A1aE": [
      "constructor(address _registry)",
      "event ClaimFee(address indexed user, uint256 indexed fee)",
      "event ClaimRewards(uint256 indexed validatorId, uint256 indexed amount, uint256 indexed totalAmount)",
      "event ConfirmAuction(uint256 indexed newValidatorId, uint256 indexed oldValidatorId, uint256 indexed amount)",
      "event DelegatorClaimedRewards(uint256 indexed validatorId, address indexed user, uint256 indexed rewards)",
      "event DelegatorRestaked(uint256 indexed validatorId, address indexed user, uint256 indexed totalStaked)",
      "event DelegatorUnstaked(uint256 indexed validatorId, address indexed user, uint256 amount)",
      "event DynastyValueChange(uint256 newDynasty, uint256 oldDynasty)",
      "event Jailed(uint256 indexed validatorId, uint256 indexed exitEpoch, address indexed signer)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposerBonusChange(uint256 newProposerBonus, uint256 oldProposerBonus)",
      "event Restaked(uint256 indexed validatorId, uint256 amount, uint256 total)",
      "event RewardUpdate(uint256 newReward, uint256 oldReward)",
      "event ShareBurned(uint256 indexed validatorId, address indexed user, uint256 indexed amount, uint256 tokens)",
      "event ShareMinted(uint256 indexed validatorId, address indexed user, uint256 indexed amount, uint256 tokens)",
      "event SignerChange(uint256 indexed validatorId, uint256 nonce, address indexed oldSigner, address indexed newSigner, bytes signerPubkey)",
      "event Slashed(uint256 indexed nonce, uint256 indexed amount)",
      "event StakeUpdate(uint256 indexed validatorId, uint256 indexed nonce, uint256 indexed newAmount)",
      "event Staked(address indexed signer, uint256 indexed validatorId, uint256 nonce, uint256 indexed activationEpoch, uint256 amount, uint256 total, bytes signerPubkey)",
      "event StartAuction(uint256 indexed validatorId, uint256 indexed amount, uint256 indexed auctionAmount)",
      "event ThresholdChange(uint256 newThreshold, uint256 oldThreshold)",
      "event TopUpFee(address indexed user, uint256 indexed fee)",
      "event UnJailed(uint256 indexed validatorId, address indexed signer)",
      "event UnstakeInit(address indexed user, uint256 indexed validatorId, uint256 nonce, uint256 deactivationEpoch, uint256 indexed amount)",
      "event Unstaked(address indexed user, uint256 indexed validatorId, uint256 amount, uint256 total)",
      "event UpdateCommissionRate(uint256 indexed validatorId, uint256 indexed newCommissionRate, uint256 indexed oldCommissionRate)",
      "function getAccountStateRoot() view returns (bytes32 accountStateRoot)",
      "function getStakerDetails(uint256 validatorId) view returns (uint256 amount, uint256 reward, uint256 activationEpoch, uint256 deactivationEpoch, address signer, uint256 _status)",
      "function getValidatorContractAddress(uint256 validatorId) view returns (address ValidatorContract)",
      "function isOwner() view returns (bool)",
      "function logClaimFee(address user, uint256 fee)",
      "function logClaimRewards(uint256 validatorId, uint256 amount, uint256 totalAmount)",
      "function logConfirmAuction(uint256 newValidatorId, uint256 oldValidatorId, uint256 amount)",
      "function logDelegatorClaimRewards(uint256 validatorId, address user, uint256 rewards)",
      "function logDelegatorRestaked(uint256 validatorId, address user, uint256 totalStaked)",
      "function logDelegatorUnstaked(uint256 validatorId, address user, uint256 amount)",
      "function logDynastyValueChange(uint256 newDynasty, uint256 oldDynasty)",
      "function logJailed(uint256 validatorId, uint256 exitEpoch, address signer)",
      "function logProposerBonusChange(uint256 newProposerBonus, uint256 oldProposerBonus)",
      "function logRestaked(uint256 validatorId, uint256 amount, uint256 total)",
      "function logRewardUpdate(uint256 newReward, uint256 oldReward)",
      "function logShareBurned(uint256 validatorId, address user, uint256 amount, uint256 tokens)",
      "function logShareMinted(uint256 validatorId, address user, uint256 amount, uint256 tokens)",
      "function logSignerChange(uint256 validatorId, address oldSigner, address newSigner, bytes signerPubkey)",
      "function logSlashed(uint256 nonce, uint256 amount)",
      "function logStakeUpdate(uint256 validatorId)",
      "function logStaked(address signer, bytes signerPubkey, uint256 validatorId, uint256 activationEpoch, uint256 amount, uint256 total)",
      "function logStartAuction(uint256 validatorId, uint256 amount, uint256 auctionAmount)",
      "function logThresholdChange(uint256 newThreshold, uint256 oldThreshold)",
      "function logTopUpFee(address user, uint256 fee)",
      "function logUnjailed(uint256 validatorId, address signer)",
      "function logUnstakeInit(address user, uint256 validatorId, uint256 deactivationEpoch, uint256 amount)",
      "function logUnstaked(address user, uint256 validatorId, uint256 amount, uint256 total)",
      "function logUpdateCommissionRate(uint256 validatorId, uint256 newCommissionRate, uint256 oldCommissionRate)",
      "function owner() view returns (address)",
      "function registry() view returns (address)",
      "function renounceOwnership()",
      "function totalValidatorStake(uint256 validatorId) view returns (uint256 validatorStake)",
      "function transferOwnership(address newOwner)",
      "function updateNonce(uint256[] validatorIds, uint256[] nonces)",
      "function validatorNonce(uint256) view returns (uint256)"
    ],
    "0x53D63B9523Ab13399e2071BB4056bbc7Bf98e6A6": [
      "constructor()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event WhitelistUpdated(address indexed validator, bool isWhitelisted)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function toggleWhitelisting(bool _validatorWhitelistingEnable)",
      "function transferOwnership(address newOwner)",
      "function updateValidatorsPermission(address _validator, bool _isWhitelisted)",
      "function validatorWhitelistingEnable() view returns (bool)",
      "function validators(address) view returns (bool)"
    ],
    "0x5F683665ca87dbC3D1358913da80e3C71c328Fb0": [
      "constructor(address _proxyTo, address _registry, address _rootChain, address _exitNft)",
      "event ExitCancelled(uint256 indexed exitId)",
      "event ExitPeriodUpdate(uint256 indexed oldExitPeriod, uint256 indexed newExitPeriod)",
      "event ExitStarted(address indexed exitor, uint256 indexed exitId, address indexed token, uint256 amount, bool isRegularExit)",
      "event ExitUpdated(uint256 indexed exitId, uint256 indexed age, address signer)",
      "event OwnerUpdate(address _prevOwner, address _newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "event Withdraw(uint256 indexed exitId, address indexed user, address indexed token, uint256 amount)",
      "function HALF_EXIT_PERIOD() view returns (uint256)",
      "function ON_FINALIZE_GAS_LIMIT() view returns (uint32)",
      "function exitNft() view returns (address)",
      "function exitWindow() view returns (uint256)",
      "function exits(uint256) view returns (uint256 receiptAmountOrNFTId, bytes32 txHash, address owner, address token, bool isRegularExit, address predicate)",
      "function exitsQueues(address) view returns (address)",
      "function implementation() view returns (address)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function ownerExits(bytes32) view returns (uint256)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x65218A41Fb92637254B4f8c97448d3dF343A3064": [
      "constructor(address _proxyTo)",
      "event OwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function owner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x6Aca26bFCE7675FF71C734BF26C8c0aC4039A4Fa": [
      "constructor(address _proxyTo)",
      "event ProxyOwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function proxyOwner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferProxyOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x79a674D373551e6CfD22b2ed65cc1Ac09250F430": [
      "constructor()",
      "event MaxErc20DepositUpdate(uint256 indexed oldLimit, uint256 indexed newLimit)",
      "event NewDepositBlock(address indexed owner, address indexed token, uint256 amountOrNFTId, uint256 depositBlockId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function childChain() view returns (address)",
      "function depositBulk(address[] _tokens, uint256[] _amountOrTokens, address _user)",
      "function depositERC20(address _token, uint256 _amount)",
      "function depositERC20ForUser(address _token, address _user, uint256 _amount)",
      "function depositERC721(address _token, uint256 _tokenId)",
      "function depositERC721ForUser(address _token, address _user, uint256 _tokenId)",
      "function depositEther() payable",
      "function deposits(uint256) view returns (bytes32 depositHash, uint256 createdAt)",
      "function governance() view returns (address)",
      "function isOwner() view returns (bool)",
      "function lock()",
      "function locked() view returns (bool)",
      "function maxErc20Deposit() view returns (uint256)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function owner() view returns (address)",
      "function registry() view returns (address)",
      "function renounceOwnership()",
      "function rootChain() view returns (address)",
      "function stateSender() view returns (address)",
      "function transferAssets(address _token, address _user, uint256 _amountOrNFTId)",
      "function transferOwnership(address newOwner)",
      "function unlock()",
      "function updateChildChainAndStateSender()",
      "function updateMaxErc20Deposit(uint256 maxDepositAmount)",
      "function updateRootChain(address _rootChain)"
    ],
    "0x7ad7f98f229c5C1EA5161bEd952c3007DBE1F307": [
      "constructor(address _registry)",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "function approve(address to, uint256 tokenId)",
      "function balanceOf(address owner) view returns (uint256)",
      "function burn(uint256 _tokenId)",
      "function exists(uint256 tokenId) view returns (bool)",
      "function getApproved(uint256 tokenId) view returns (address)",
      "function isApprovedForAll(address owner, address operator) view returns (bool)",
      "function mint(address _owner, uint256 _tokenId)",
      "function ownerOf(uint256 tokenId) view returns (address)",
      "function safeTransferFrom(address from, address to, uint256 tokenId)",
      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)",
      "function setApprovalForAll(address to, bool approved)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferFrom(address from, address to, uint256 tokenId)"
    ],
    "0x885fcE983b6a01633f764325B8c3c5D31032C995": [
      "constructor(address _proxyTo, address _registry, address _rootChain, address _governance)",
      "event MaxErc20DepositUpdate(uint256 indexed oldLimit, uint256 indexed newLimit)",
      "event NewDepositBlock(address indexed owner, address indexed token, uint256 amountOrNFTId, uint256 depositBlockId)",
      "event OwnerUpdate(address _prevOwner, address _newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function childChain() view returns (address)",
      "function deposits(uint256) view returns (bytes32 depositHash, uint256 createdAt)",
      "function governance() view returns (address)",
      "function implementation() view returns (address)",
      "function isOwner() view returns (bool)",
      "function lock()",
      "function locked() view returns (bool)",
      "function maxErc20Deposit() view returns (uint256)",
      "function owner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function registry() view returns (address)",
      "function renounceOwnership()",
      "function rootChain() view returns (address)",
      "function stateSender() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unlock()",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x8ed7d143Ef452316Ab1123d28Ab302dC3b80d3ce": [
      "constructor(address _registry, address _logger, string _heimdallId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function VOTE_TYPE() view returns (uint8)",
      "function drainTokens(uint256 value, address token, address destination)",
      "function heimdallId() view returns (bytes32)",
      "function isOwner() view returns (bool)",
      "function jailCheckpoints() view returns (uint256)",
      "function logger() view returns (address)",
      "function owner() view returns (address)",
      "function proposerRate() view returns (uint256)",
      "function registry() view returns (address)",
      "function renounceOwnership()",
      "function reportRate() view returns (uint256)",
      "function setHeimdallId(string _heimdallId)",
      "function slashingNonce() view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function updateProposerRate(uint256 newProposerRate)",
      "function updateReportRate(uint256 newReportRate)",
      "function updateSlashedAmounts(bytes data, bytes sigs)",
      "function verifyConsensus(bytes32 voteHash, bytes sigs) view returns (bool)"
    ],
    "0x98C831cFB18852f7deB3E3a970e907475b49730f": [
      "constructor(address _proxyTo)",
      "event ProxyOwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function proxyOwner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferProxyOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0x9df56e63CD340F0f3D811dd2aAAEEa42ec27D5a3": [
      "constructor(address _withdrawManager, address _depositManager)",
      "function CHAINID() view returns (uint256)",
      "function interpretStateUpdate(bytes state) view returns (bytes b)",
      "function networkId() view returns (bytes)",
      "function onFinalizeExit(bytes data)",
      "function startExitWithBurntTokens(bytes data) returns (bytes)",
      "function verifyDeprecation(bytes exit, bytes inputUtxo, bytes challengeData) returns (bool)"
    ],
    "0xA5E0bD9dc1F1d55e53ca87496731aE6B768094D3": [
      "event ExitCancelled(uint256 indexed exitId)",
      "event ExitPeriodUpdate(uint256 indexed oldExitPeriod, uint256 indexed newExitPeriod)",
      "event ExitStarted(address indexed exitor, uint256 indexed exitId, address indexed token, uint256 amount, bool isRegularExit)",
      "event ExitUpdated(uint256 indexed exitId, uint256 indexed age, address signer)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Withdraw(uint256 indexed exitId, address indexed user, address indexed token, uint256 amount)",
      "function HALF_EXIT_PERIOD() view returns (uint256)",
      "function ON_FINALIZE_GAS_LIMIT() view returns (uint32)",
      "function addExitToQueue(address exitor, address childToken, address rootToken, uint256 exitAmountOrTokenId, bytes32 txHash, bool isRegularExit, uint256 priority)",
      "function addInput(uint256 exitId, uint256 age, address utxoOwner, address token)",
      "function challengeExit(uint256 exitId, uint256 inputId, bytes challengeData, address adjudicatorPredicate)",
      "function createExitQueue(address token)",
      "function exitNft() view returns (address)",
      "function exitWindow() view returns (uint256)",
      "function exits(uint256) view returns (uint256 receiptAmountOrNFTId, bytes32 txHash, address owner, address token, bool isRegularExit, address predicate)",
      "function exitsQueues(address) view returns (address)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function ownerExits(bytes32) view returns (uint256)",
      "function processExits(address _token)",
      "function processExitsBatch(address[] _tokens)",
      "function renounceOwnership()",
      "function startExitWithDepositedTokens(uint256 depositId, address token, uint256 amountOrToken) payable",
      "function transferOwnership(address newOwner)",
      "function updateExitPeriod(uint256 halfExitPeriod)",
      "function verifyInclusion(bytes data, uint8 offset, bool verifyTxInclusion) view returns (uint256)"
    ],
    "0xb3bfb2aE369a0e9D9735ac679e4A14eD81E837fA": [
      "event NewHeaderBlock(address indexed proposer, uint256 indexed headerBlockId, uint256 indexed reward, uint256 start, uint256 end, bytes32 root)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ResetHeaderBlock(address indexed proposer, uint256 indexed headerBlockId)",
      "function CHAINID() view returns (uint256)",
      "function VOTE_TYPE() view returns (uint8)",
      "function _nextHeaderBlock() view returns (uint256)",
      "function currentHeaderBlock() view returns (uint256)",
      "function getLastChildBlock() view returns (uint256)",
      "function headerBlocks(uint256) view returns (bytes32 root, uint256 start, uint256 end, uint256 createdAt, address proposer)",
      "function heimdallId() view returns (bytes32)",
      "function isOwner() view returns (bool)",
      "function networkId() view returns (bytes)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setHeimdallId(string _heimdallId)",
      "function setNextHeaderBlock(uint256 _value)",
      "function slash()",
      "function submitCheckpoint(bytes data, uint256[3][] sigs)",
      "function submitHeaderBlock(bytes data, bytes sigs)",
      "function transferOwnership(address newOwner)",
      "function updateDepositId(uint256 numDeposits) returns (uint256 depositId)"
    ],
    "0xc3897302aB4B42931cB4857050Fa60f53B775870": [
      "constructor(address _proxyTo)",
      "event ProxyOwnerUpdate(address _new, address _old)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function proxyOwner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function transferProxyOwnership(address newOwner)",
      "function updateAndCall(address _newProxyTo, bytes data) payable",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0xC476E20c2F7FA3B35aC242aBE71B59e902242f06": [
      "constructor(address _proxyTo)",
      "event OwnerUpdate(address _prevOwner, address _newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "function implementation() view returns (address)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0xCbb0D2eCBEDBF2D0F0D5616dFE25bC286D8F8610": [
      "constructor()",
      "event LockedBatchERC1155(address indexed depositor, address indexed depositReceiver, address indexed rootToken, uint256[] ids, uint256[] amounts)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MANAGER_ROLE() view returns (bytes32)",
      "function TOKEN_TYPE() view returns (bytes32)",
      "function TRANSFER_BATCH_EVENT_SIG() view returns (bytes32)",
      "function TRANSFER_SINGLE_EVENT_SIG() view returns (bytes32)",
      "function exitTokens(address, address rootToken, bytes log)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _owner)",
      "function lockTokens(address depositor, address depositReceiver, address rootToken, bytes depositData)",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) returns (bytes4)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0xd46042f503B8Ec0A166af8C0BFbB0a3C562353F9": [
      "constructor(address _proxyTo, address _registry, string _heimdallId)",
      "event NewHeaderBlock(address indexed proposer, uint256 indexed headerBlockId, uint256 indexed reward, uint256 start, uint256 end, bytes32 root)",
      "event OwnerUpdate(address _prevOwner, address _newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProxyUpdated(address indexed _new, address indexed _old)",
      "event ResetHeaderBlock(address indexed proposer, uint256 indexed headerBlockId)",
      "function CHAINID() view returns (uint256)",
      "function VOTE_TYPE() view returns (uint8)",
      "function _nextHeaderBlock() view returns (uint256)",
      "function headerBlocks(uint256) view returns (bytes32 root, uint256 start, uint256 end, uint256 createdAt, address proposer)",
      "function heimdallId() view returns (bytes32)",
      "function implementation() view returns (address)",
      "function isOwner() view returns (bool)",
      "function networkId() view returns (bytes)",
      "function owner() view returns (address)",
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function updateImplementation(address _newProxyTo)"
    ],
    "0xdaF14950155DF895E9D0fd2521D05477d26F462c": [
      "constructor(address _withdrawManager, address _depositManager)",
      "function CHAINID() view returns (uint256)",
      "function interpretStateUpdate(bytes state) view returns (bytes)",
      "function networkId() view returns (bytes)",
      "function onFinalizeExit(bytes data)",
      "function startExitWithBurntTokens(bytes data)",
      "function verifyDeprecation(bytes exit, bytes inputUtxo, bytes challengeData) returns (bool)"
    ],
    "0xe0f4555Fcffb181B1D7566d89200105226F29580": [
      "constructor()",
      "event ExitedERC721(address indexed exitor, address indexed rootToken, uint256 tokenId)",
      "event LockedERC721(address indexed depositor, address indexed depositReceiver, address indexed rootToken, uint256 tokenId)",
      "event LockedERC721Batch(address indexed depositor, address indexed depositReceiver, address indexed rootToken, uint256[] tokenIds)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MANAGER_ROLE() view returns (bytes32)",
      "function TOKEN_TYPE() view returns (bytes32)",
      "function TRANSFER_EVENT_SIG() view returns (bytes32)",
      "function exitTokens(address sender, address rootToken, bytes log)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _owner)",
      "function lockTokens(address depositor, address depositReceiver, address rootToken, bytes depositData)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)"
    ],
    "0xF486e3B6A432Bdd6EDaAe85a565CD7682A7862BB": [
      "constructor(address _governance)",
      "event ContractMapUpdated(bytes32 indexed key, address indexed previousContract, address indexed newContract)",
      "event PredicateAdded(address indexed predicate, address indexed from)",
      "event PredicateRemoved(address indexed predicate, address indexed from)",
      "event ProofValidatorAdded(address indexed validator, address indexed from)",
      "event ProofValidatorRemoved(address indexed validator, address indexed from)",
      "event TokenMapped(address indexed rootToken, address indexed childToken)",
      "function addErc20Predicate(address predicate)",
      "function addErc721Predicate(address predicate)",
      "function addPredicate(address predicate, uint8 _type)",
      "function childToRootToken(address) view returns (address)",
      "function contractMap(bytes32) view returns (address)",
      "function erc20Predicate() view returns (address)",
      "function erc721Predicate() view returns (address)",
      "function getChildChainAndStateSender() view returns (address, address)",
      "function getDepositManagerAddress() view returns (address)",
      "function getSlashingManagerAddress() view returns (address)",
      "function getStakeManagerAddress() view returns (address)",
      "function getValidatorShareAddress() view returns (address)",
      "function getWethTokenAddress() view returns (address)",
      "function getWithdrawManagerAddress() view returns (address)",
      "function governance() view returns (address)",
      "function isChildTokenErc721(address childToken) view returns (bool)",
      "function isERC721(address) view returns (bool)",
      "function isTokenMapped(address _token) view returns (bool)",
      "function isTokenMappedAndGetPredicate(address _token) view returns (address)",
      "function isTokenMappedAndIsErc721(address _token) view returns (bool)",
      "function mapToken(address _rootToken, address _childToken, bool _isERC721)",
      "function predicates(address) view returns (uint8 _type)",
      "function proofValidatorContracts(address) view returns (bool)",
      "function removePredicate(address predicate)",
      "function rootToChildToken(address) view returns (address)",
      "function updateContractMap(bytes32 _key, address _address)"
    ],
    "0xfffC2D781999F09A8b127f8Ef419a3EeD2EDa1dd": [
      "constructor()",
      "event LockedERC20(address indexed depositor, address indexed depositReceiver, address indexed rootToken, uint256 amount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MANAGER_ROLE() view returns (bytes32)",
      "function TOKEN_TYPE() view returns (bytes32)",
      "function TRANSFER_EVENT_SIG() view returns (bytes32)",
      "function exitTokens(address, address rootToken, bytes log)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _owner)",
      "function lockTokens(address depositor, address depositReceiver, address rootToken, bytes depositData)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)"
    ]
  },
  "usedTemplates": {
    "polygonposbridge/DepositManager": "0x508d4444e3c21f1361f9b0948976412f48fe067c7d529bf6121ac18a4cabd004",
    "polygonposbridge/ExitNFT": "0x60ea045776cab9e4486806a9ce5a117ed68399ec7dc959eadd4b46a91b5531a1",
    "polygonposbridge/Governance": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "polygonposbridge/Merkle": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "polygonposbridge/predicate": "0xf0db03721cc15af078d6a93a1b8d8f8e438c2611fdb2fb5c22d599e6c939a384",
    "polygonposbridge/Registry": "0x740dd1c9a6f29e9a794b82248a0b4db07a11d3016347bb97a121b714a5018529",
    "polygonposbridge/RLPReader": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "polygonposbridge/RootChain": "0xc5d595b4751aa7bad9f8fb8f08c661b78407e5794f5279461a7d497658d6fe1f",
    "polygonposbridge/RootChainManager": "0x50bcd0272aecc010cbde0bed943b6da88de3ffe1388773dd4691a0b4d4a0d8de",
    "polygonposbridge/SlashingManager": "0xff988e17661283d80f937c5ed6b0b648c510181283f32327373a7ece9c12584d",
    "polygonposbridge/StakeManager_shibarium": "0x49f15371f74243e39c359f2a6d210cf2aefa616d0b7973abdb52f266a50a0931",
    "polygonposbridge/StakeManagerExtension_shibarium": "0x677de9736569f920b2137c3fffcc33e745538b857e5bc56e01b4cd9326170710",
    "polygonposbridge/StakingInfo": "0x472b4e99f38353920f0adb960c096ef2b8db88cfed76d97db017fff0a6c925fa",
    "polygonposbridge/StakingNFT": "0xb548c6f269123f0c23a2463c83cf000cda1a984eeeeb354a9a2af803b5245488",
    "polygonposbridge/StateSender": "0xeb9862ce79f45aeb62e0c88612fd64a3ce8a0ec8b3ec63a6f51b2dca893bbcbd",
    "polygonposbridge/ValidatorRegistry": "0x6d525dc05290b0183414a4731a6dc9236e6d96841b6b657bae95deebeddee807",
    "polygonposbridge/WithdrawManager": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c"
  },
  "permissionsConfigHash": "0x10dc816c7af47a91ad8f5d2c34186f8887f8e105596dc497cd39850e443aa5e2"
}
