{
  "name": "grvt",
  "chain": "ethereum",
  "blockNumber": 22115934,
  "configHash": "0xd85578550cf1650b2db26b02ed9662d926fa51568250ad7a4bb8de9a06d3d887",
  "sharedModules": ["shared-zk-stack"],
  "entries": [
    {
      "address": "0x0b114d4675Cb79507e68F2616c93e124122c6ef0",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "validateZkStack",
          "from": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E"
        }
      ]
    },
    {
      "address": "0x11f943b2c77b743AB90f4A0Ae7d5A4e7FCA3E102",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x1Eb710030273e529A6aD7E1e14D4e601765Ba3c6",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x29496817aB0820A5aDa4d5C656Ea8DF79Ba05F3A",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GrvtChainAdminMultisig",
      "address": "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0x6308ee1Ebdb8D5E60bB88D3EA3b56CE326193e7D",
          "description": "set the conversion factor for gas token deposits."
        },
        {
          "permission": "interact",
          "from": "0xe3e310cd8EE0C808794810AB50FE4BcCC5c7D89E",
          "description": "manage fees, apply predefined upgrades and manage censorship through a TransactionFilterer (ChainAdmin role).",
          "via": [{ "address": "0x6308ee1Ebdb8D5E60bB88D3EA3b56CE326193e7D" }]
        },
        {
          "permission": "upgrade",
          "from": "0x3Cd52B238Ac856600b22756133eEb31ECb25109a"
        },
        {
          "permission": "upgrade",
          "from": "0xE17aeD2fC55f4A876315376ffA49FE6358113a65"
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "0x6308ee1Ebdb8D5E60bB88D3EA3b56CE326193e7D"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1729305923,
      "sinceBlock": 20996715,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "0xF29bFff344c7ef0186432fE30C39fda0cca0550b",
          "0x29496817aB0820A5aDa4d5C656Ea8DF79Ba05F3A",
          "0x9A4484BBDae765A84c802Cf0A4777D8b16AB1270"
        ],
        "$threshold": 2,
        "domainSeparator": "0x595c085e1d2c5de315ddc014fe37e43279cdbccafa1bf9295d15b850b2d57550",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 3 (67%)",
        "nonce": 12,
        "VERSION": "1.4.1"
      },
      "derivedName": "Safe"
    },
    {
      "name": "GRVTTransactionFilterer",
      "address": "0x3Cd52B238Ac856600b22756133eEb31ECb25109a",
      "type": "Contract",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x1aa0c6d334201fd66596305e4bb950e80a12be8e6cbad011dcb90a7ca7f49bd5"
      ],
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "interact",
          "to": "0x8829AD80E425C646DAB305381ff105169FeEcE56",
          "description": "address is part of the GRVTTransactionFilterer whitelist.",
          "via": []
        },
        {
          "permission": "interact",
          "to": "0xE17aeD2fC55f4A876315376ffA49FE6358113a65",
          "description": "address is part of the GRVTTransactionFilterer whitelist.",
          "via": []
        },
        {
          "permission": "interact",
          "to": "0xe81d64195072e4d09639b31Abb257d0096FEa9d1",
          "description": "address is part of the GRVTTransactionFilterer whitelist.",
          "via": []
        },
        {
          "permission": "interact",
          "to": "0xF29bFff344c7ef0186432fE30C39fda0cca0550b",
          "description": "address is part of the GRVTTransactionFilterer whitelist.",
          "via": []
        },
        {
          "permission": "interact",
          "to": "0xF29bFff344c7ef0186432fE30C39fda0cca0550b",
          "description": "manage the whitelist of addresses.",
          "via": []
        },
        {
          "permission": "upgrade",
          "to": "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5",
          "via": []
        }
      ],
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0xe3e310cd8EE0C808794810AB50FE4BcCC5c7D89E",
          "description": "define addresses that can send transactions from L1 to L2 (e.g. for deposits, withdrawals, queued transactions). This is enforced in the Mailbox Facet."
        }
      ],
      "sinceTimestamp": 1733129219,
      "sinceBlock": 21313725,
      "values": {
        "$admin": "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5",
        "$implementation": "0x8319feDe99061C6723c86D366a903e8fa3a0f541",
        "$pastUpgrades": [
          [
            "2024-12-02T08:46:59.000Z",
            "0x0ab501f1d5f7438d5286ed0d2daf30e257f756224d2c16225760e36186b3e8bf",
            ["0x8319feDe99061C6723c86D366a903e8fa3a0f541"]
          ]
        ],
        "$upgradeCount": 1,
        "acAdmin": ["0xF29bFff344c7ef0186432fE30C39fda0cca0550b"],
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0xF29bFff344c7ef0186432fE30C39fda0cca0550b"]
          },
          "L2_TX_SENDER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "0xe81d64195072e4d09639b31Abb257d0096FEa9d1",
              "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
              "0xE17aeD2fC55f4A876315376ffA49FE6358113a65",
              "0xF29bFff344c7ef0186432fE30C39fda0cca0550b",
              "0x8829AD80E425C646DAB305381ff105169FeEcE56"
            ]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "L2_TX_SENDER_ROLE": "0xe2cf43bd009fb6c7b5c7b6d5cae83b0c49a676ef5ee3c3e94016e6c31e8b6fd2",
        "whitelistedSender": [
          "0xe81d64195072e4d09639b31Abb257d0096FEa9d1",
          "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
          "0xE17aeD2fC55f4A876315376ffA49FE6358113a65",
          "0xF29bFff344c7ef0186432fE30C39fda0cca0550b",
          "0x8829AD80E425C646DAB305381ff105169FeEcE56"
        ]
      }
    },
    {
      "name": "L1ERC20Bridge",
      "address": "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
      "type": "Contract",
      "sourceHashes": [
        "0x3f8d1d2461c05779ca5de685fd391f6a4c07e91953373effd46d11f72b025dc3",
        "0x179b79e02a71cc452486d433271b925a402363053a3dd4e9d83837877c677dfd"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1676370683,
      "sinceBlock": 16626406,
      "values": {
        "$admin": "0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1",
        "$implementation": "0x8D231E4097C3cb200Ed62134B466AA615cE60336",
        "$pastUpgrades": [
          [
            "2023-02-14T10:31:23.000Z",
            "0xbeb9be61e12ebe1e8abcaa0ddd3149cc0282a60af9b11ee2cae50fbcd0adb96e",
            ["0x22bE40122BA952b81c50bcaa86F84418ff623391"]
          ],
          [
            "2023-03-23T19:49:59.000Z",
            "0x5fc563e76bc3421166b3898389b72d6a93ac04d94741fc884290d2120ce8cfd0",
            ["0x7e5E66B01fe43293545eaB98ec4D31784A5Efa84"]
          ],
          [
            "2023-04-25T12:37:35.000Z",
            "0xa462b66e80e973da1eaea5a5bde5a1b4ff6a1a3b29ac4db25922712e71900e80",
            ["0x38ABF296EE79621A225AA85086853b0dA3225D2F"]
          ],
          [
            "2023-08-16T10:21:35.000Z",
            "0x351e42a19944da59b77c2fdd0d5adb58fd0af1cc960e14af3cfae0d686fda478",
            ["0x7FB17101A744e156e63d5fF6A4775fb48756577c"]
          ],
          [
            "2023-12-04T20:29:11.000Z",
            "0x9f0e9ecd78b5c17ff95c130b183df452486a0f784705927e608fd90a00aa9bcd",
            ["0x03F3F3c12e11C2FAA60080bd3F7f80AADF369a33"]
          ],
          [
            "2023-12-22T10:57:59.000Z",
            "0xd340a9274753c7f5edd33bc034c08df9e050821d399059c2f6bf0686dd341a87",
            ["0x79Cc1DF74Ac2d1B0876498C9FcE32c7e34F57B43"]
          ],
          [
            "2024-02-08T10:36:47.000Z",
            "0x7a9c713189afcfbb07826da5078905f2543da22468f98507e51eac632dc784ce",
            ["0x810c6598CAaA08B61f6430Df5a8e120B3390d78A"]
          ],
          [
            "2024-06-06T13:20:35.000Z",
            "0xb689a0cfff9af4bb1d1da94c404d396f24d5cf5031c31647671549c717cdba7a",
            ["0x8191975d8B0851C7f0740918896Cf298c09aA05E"]
          ],
          [
            "2025-01-08T16:00:35.000Z",
            "0xc90d135e4b8ab58304853f3be34b2fefd18c2a817d3d250e7b669e024d5277c5",
            ["0x8D231E4097C3cb200Ed62134B466AA615cE60336"]
          ]
        ],
        "$upgradeCount": 9,
        "l2Bridge": "0x11f943b2c77b743AB90f4A0Ae7d5A4e7FCA3E102",
        "l2TokenBeacon": "0x1Eb710030273e529A6aD7E1e14D4e601765Ba3c6",
        "l2TokenProxyBytecodeHash": "0x01000121a363b3fbec270986067c1b553bf540c30a6f186f45313133ff1a1019",
        "SHARED_BRIDGE": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB"
      }
    },
    {
      "address": "0x58D14960E0a2be353eDdE61ad719196A2b816522",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "validateZkStack",
          "from": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E"
        }
      ]
    },
    {
      "address": "0x5c8de5821dd9263F124E8ddbff11C3368Ff86a37",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0xE17aeD2fC55f4A876315376ffA49FE6358113a65",
          "description": "approve deposits to GRVT via the GRVTBridgeProxy."
        }
      ]
    },
    {
      "name": "ValidatorTimelock",
      "address": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
      "type": "Contract",
      "template": "shared-zk-stack/ValidatorTimelock",
      "sourceHashes": [
        "0x5c435b3eaf489b61e623af2356a751079cfa87c079c12e5d93108d007d3b4c97"
      ],
      "proxyType": "immutable",
      "description": "Intermediary contract between the *Validators* and the central diamond contract that delays block execution (ie withdrawals and other L2 --> L1 messages) by 3h.",
      "issuedPermissions": [
        {
          "permission": "validateZkStack",
          "to": "0x0b114d4675Cb79507e68F2616c93e124122c6ef0",
          "via": []
        },
        {
          "permission": "validateZkStack",
          "to": "0x58D14960E0a2be353eDdE61ad719196A2b816522",
          "via": []
        }
      ],
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0xe3e310cd8EE0C808794810AB50FE4BcCC5c7D89E",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock."
        }
      ],
      "sinceTimestamp": 1717520615,
      "sinceBlock": 20019826,
      "values": {
        "$immutable": true,
        "executionDelay": 10800,
        "executionDelay_fmt": "3h",
        "getName": "ValidatorTimelock",
        "owner": "0xE30Dca3047B37dc7d88849dE4A4Dc07937ad5Ab3",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "revertedBlocks": [],
        "stateTransitionManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "validatorsVTL": [
          "0x58D14960E0a2be353eDdE61ad719196A2b816522",
          "0x0b114d4675Cb79507e68F2616c93e124122c6ef0"
        ]
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "GrvtZkEvmAdmin",
      "address": "0x6308ee1Ebdb8D5E60bB88D3EA3b56CE326193e7D",
      "type": "Contract",
      "template": "shared-zk-stack/ChainAdmin",
      "sourceHashes": [
        "0xefb240f5e06f5ffb38c7e98e9738ecf10381c49716281a3da9d5a1d17438eb4c"
      ],
      "proxyType": "immutable",
      "issuedPermissions": [
        {
          "permission": "interact",
          "to": "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5",
          "description": "set the conversion factor for gas token deposits.",
          "via": []
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "interact",
          "from": "0xe3e310cd8EE0C808794810AB50FE4BcCC5c7D89E",
          "description": "manage fees, apply predefined upgrades and manage censorship through a TransactionFilterer (ChainAdmin role)."
        }
      ],
      "sinceTimestamp": 1730797559,
      "sinceBlock": 21120440,
      "values": {
        "$immutable": true,
        "owner": "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "tokenMultiplierSetter": "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5",
        "upgradeTimestamps": [
          { "_protocolVersion": 107374182400, "_upgradeTimestamp": 1729793768 },
          { "_protocolVersion": 111669149696, "_upgradeTimestamp": 1738089540 }
        ]
      },
      "fieldMeta": {
        "upgradeTimestamps": {
          "description": "Timestamps for new protocol version upgrades can be registered here (NOT enforced)"
        }
      },
      "derivedName": "ChainAdmin",
      "category": { "name": "Governance", "priority": 3 }
    },
    {
      "address": "0x85deE82d32d78eaa59588B6574Df420ef2A74098",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1AssetRouter",
      "address": "0x8829AD80E425C646DAB305381ff105169FeEcE56",
      "type": "Contract",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x1912c5e1125a20bfd6b933a66a437e3d04e2404549b86b88ceadb233eff05477"
      ],
      "proxyType": "EIP1967 proxy",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0x3Cd52B238Ac856600b22756133eEb31ECb25109a",
          "description": "address is part of the GRVTTransactionFilterer whitelist."
        }
      ],
      "sinceTimestamp": 1739109071,
      "sinceBlock": 21809370,
      "values": {
        "$admin": "0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1",
        "$implementation": "0x20E17D0280DeaBb78f7c193E3Ef05F62adC0936E",
        "$pastUpgrades": [
          [
            "2025-02-09T13:51:11.000Z",
            "0x2c945c00f7a9f08b1a0bc749a08d76ca4cd5ee6f8890011ab43898e9fa1fcdf2",
            ["0x20E17D0280DeaBb78f7c193E3Ef05F62adC0936E"]
          ]
        ],
        "$upgradeCount": 1,
        "BRIDGE_HUB": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "ERA_CHAIN_ID": 324,
        "ETH_TOKEN_ASSET_ID": "0x05e1c3ae4b9732444ae25217ac7666e46fa365fee1768de00c9fcb65532b7609",
        "L1_CHAIN_ID": 1,
        "L1_NULLIFIER": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
        "L1_WETH_TOKEN": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "l2BridgeAddress": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "legacyBridge": "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
        "nativeTokenVault": "0xbeD1EB542f9a5aA6419Ff3deb921A372681111f6",
        "owner": "0xE30Dca3047B37dc7d88849dE4A4Dc07937ad5Ab3",
        "paused": false,
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      },
      "errors": { "l2BridgeAddress": "Processing error occurred." }
    },
    {
      "name": "ValidatorTimelock",
      "address": "0x8c0Bfc04AdA21fd496c55B8C50331f904306F564",
      "type": "Contract",
      "template": "shared-zk-stack/ValidatorTimelock",
      "sourceHashes": [
        "0x2221508945ceea880f5d52488af1a7466fcdfadeaf3644dc5e3b82671b7947a3"
      ],
      "proxyType": "immutable",
      "description": "Intermediary contract between the *Validators* and the central diamond contract that delays block execution (ie withdrawals and other L2 --> L1 messages) by 3h.",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0xe3e310cd8EE0C808794810AB50FE4BcCC5c7D89E",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock."
        }
      ],
      "sinceTimestamp": 1739108999,
      "sinceBlock": 21809364,
      "values": {
        "$immutable": true,
        "chainTypeManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "executionDelay": 10800,
        "executionDelay_fmt": "3h",
        "getName": "ValidatorTimelock",
        "owner": "0xE30Dca3047B37dc7d88849dE4A4Dc07937ad5Ab3",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "revertedBlocks": []
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "address": "0x8E2A969f6685e27439D9F25630E62c8A2203B5Db",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ValidiumL1DAValidator",
      "address": "0x907b30407249949521Bf0c89A43558dae200146A",
      "type": "Contract",
      "sourceHashes": [
        "0x9268ac939681805a58626cebbcf26606bf71106922be33c48712e455381762c8"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1739108927,
      "sinceBlock": 21809358,
      "values": { "$immutable": true }
    },
    {
      "address": "0x9A4484BBDae765A84c802Cf0A4777D8b16AB1270",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "UpgradeableBeacon",
      "address": "0xb3618AbcbA795588C43eA602dD0Cd6E952A85a6A",
      "type": "Contract",
      "sourceHashes": [
        "0x07bd11203ec319238e5e2d07edd1d4a4f614224b4774234e0963ed596006eae2"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1739109107,
      "sinceBlock": 21809373,
      "values": {
        "$immutable": true,
        "implementation": "0xEA3c8d61A4B5476310975C13964a6Da6eF1dED49",
        "owner": "0xE30Dca3047B37dc7d88849dE4A4Dc07937ad5Ab3"
      }
    },
    {
      "name": "L1NativeTokenVault",
      "address": "0xbeD1EB542f9a5aA6419Ff3deb921A372681111f6",
      "type": "Contract",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0xcd61d013f1b30811a4dab3d32b43daa9f826ed31663857c1e349c7986cdf2497"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1739109131,
      "sinceBlock": 21809375,
      "values": {
        "$admin": "0xC2a36181fB524a6bEfE639aFEd37A67e77d62cf1",
        "$implementation": "0x40B1060a114380f40faC6869c5B383f47e61530c",
        "$pastUpgrades": [
          [
            "2025-02-09T13:52:11.000Z",
            "0x50619c1506e8e93cc28017847b5690b6a0784bc2b08c1dbb8555b71525b72351",
            ["0x40B1060a114380f40faC6869c5B383f47e61530c"]
          ]
        ],
        "$upgradeCount": 1,
        "ASSET_ROUTER": "0x8829AD80E425C646DAB305381ff105169FeEcE56",
        "BASE_TOKEN_ASSET_ID": "0x05e1c3ae4b9732444ae25217ac7666e46fa365fee1768de00c9fcb65532b7609",
        "bridgedTokenBeacon": "0xb3618AbcbA795588C43eA602dD0Cd6E952A85a6A",
        "L1_CHAIN_ID": 1,
        "L1_NULLIFIER": "0xD7f9f54194C633F36CCD5F3da84ad4a1c38cB2cB",
        "owner": "0xE30Dca3047B37dc7d88849dE4A4Dc07937ad5Ab3",
        "paused": false,
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "WETH_TOKEN": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      }
    },
    {
      "name": "WETH9",
      "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      "type": "Contract",
      "sourceHashes": [
        "0xec8c1fea9a5a10c4c028664a56d678a0776b07cfc510fc7fa54db0aed0978f49"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1513077455,
      "sinceBlock": 4719568,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "name": "Wrapped Ether",
        "symbol": "WETH",
        "totalSupply": "2813056305926332707230496"
      }
    },
    {
      "name": "Verifier",
      "address": "0xdb3300726556AFA413A11aF474a8cFDa4D7fc5a5",
      "type": "Contract",
      "template": "shared-zk-stack/Verifier",
      "sourceHashes": [
        "0xac062c888d75a5e5685f3daea3d381ad10133a719da8fe05d01ec88eca972104"
      ],
      "proxyType": "immutable",
      "description": "Implements the ZK proof verification logic.",
      "sinceTimestamp": 1739108831,
      "sinceBlock": 21809350,
      "values": {
        "$immutable": true,
        "verificationKeyHash": "0x14f97b81e54b35fe673d8708cc1a19e1ea5b5e348e12d31e39824ed4f42bbca2"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "GRVTBridgeProxy",
      "address": "0xE17aeD2fC55f4A876315376ffA49FE6358113a65",
      "type": "Contract",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x79513625ec2b512bdcda0464cd8ee1528e0a641d809e74259c3da9f25766647d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Checks the signature of the DepositApprover for each deposit and, on succeeding, forwards the user's funds and bridging request to the L1SharedBridge contract to deposit to GRVT.",
      "issuedPermissions": [
        {
          "permission": "interact",
          "to": "0x5c8de5821dd9263F124E8ddbff11C3368Ff86a37",
          "description": "approve deposits to GRVT via the GRVTBridgeProxy.",
          "via": []
        },
        {
          "permission": "upgrade",
          "to": "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5",
          "via": []
        }
      ],
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0x3Cd52B238Ac856600b22756133eEb31ECb25109a",
          "description": "address is part of the GRVTTransactionFilterer whitelist."
        }
      ],
      "sinceTimestamp": 1733129219,
      "sinceBlock": 21313725,
      "values": {
        "$admin": "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5",
        "$implementation": "0xf7B67bDDb74B5eD3De49e1a6Da4D1d7460F00780",
        "$pastUpgrades": [
          [
            "2024-12-02T08:46:59.000Z",
            "0x13bbd9e650da0bfed67eca725f0d1e9ed4e868006d455385fb182d0c5618efbb",
            ["0xf7B67bDDb74B5eD3De49e1a6Da4D1d7460F00780"]
          ]
        ],
        "$upgradeCount": 1,
        "baseToken": "0xAB3B124052F0389D1cbED221d912026Ac995bb95",
        "bridgeHub": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "chainID": 325,
        "depositApprover": "0x5c8de5821dd9263F124E8ddbff11C3368Ff86a37",
        "getDepositApprover": "0x5c8de5821dd9263F124E8ddbff11C3368Ff86a37",
        "L2_GAS_LIMIT_DEPOSIT": 1200000,
        "L2_GAS_LIMIT_MINT_BASE_TOKEN": 500000,
        "l2DepositProxyAddressDerivationParams": {
          "exchangeAddress": "0x85deE82d32d78eaa59588B6574Df420ef2A74098",
          "beaconProxyBytecodeHash": "0x0100010965f47574acde5c31b36ada1f247fa8a94744d0fbf7e107c014d2b90a",
          "depositProxyBeacon": "0x8E2A969f6685e27439D9F25630E62c8A2203B5Db"
        },
        "owner": "0xF29bFff344c7ef0186432fE30C39fda0cca0550b",
        "pendingOwner": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "GrvtZkEvm",
      "address": "0xe3e310cd8EE0C808794810AB50FE4BcCC5c7D89E",
      "type": "Contract",
      "template": "shared-zk-stack/Diamond_v26",
      "sourceHashes": [
        "0xcd2dee9d49d75aa37138514c1f32d29c60222002963e0c0a7e1a815dff00444f",
        "0x28719e86c8042765405cbb88205d1fb130f39f3bb0923afe7fef6dd5ef798c31",
        "0x8337740067b4f9278182a83ca83d62ca2611966b8beca6e0a49394204c8f74da",
        "0xf3a1cb3dd9315b2dfa9e9aca6d6b09e987a1eb463588f115e2eb142eaa2a4ac6",
        "0x396f0e8e4bc223f186f87b7eabf2f4b537ce84f8515aa16c86400c4f10af79b1"
      ],
      "proxyType": "EIP2535 diamond proxy",
      "description": "The main contract defining the Layer 2. Operator actions like commiting blocks, providing ZK proofs and executing batches ultimately target this contract which then processes transactions. During batch execution it processes L1 --> L2 and L2 --> L1 transactions.",
      "issuedPermissions": [
        {
          "permission": "interact",
          "to": "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5",
          "description": "manage fees, apply predefined upgrades and manage censorship through a TransactionFilterer (ChainAdmin role).",
          "via": [{ "address": "0x6308ee1Ebdb8D5E60bB88D3EA3b56CE326193e7D" }]
        },
        {
          "permission": "interact",
          "to": "0x3Cd52B238Ac856600b22756133eEb31ECb25109a",
          "description": "define addresses that can send transactions from L1 to L2 (e.g. for deposits, withdrawals, queued transactions). This is enforced in the Mailbox Facet.",
          "via": []
        },
        {
          "permission": "interact",
          "to": "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock.",
          "via": []
        },
        {
          "permission": "interact",
          "to": "0x8c0Bfc04AdA21fd496c55B8C50331f904306F564",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock.",
          "via": []
        }
      ],
      "ignoreInWatchMode": [
        "prepareChainCommitment",
        "getTotalPriorityTxs",
        "getTotalBlocksCommitted",
        "getTotalBlocksExecuted",
        "getTotalBlocksVerified",
        "getTotalBatchesExecuted",
        "getTotalBatchesVerified",
        "getTotalBatchesCommitted",
        "getPriorityTreeStartIndex",
        "getPriorityTreeRoot",
        "getPriorityQueueSize",
        "getFirstUnprocessedPriorityTx",
        "baseTokenGasPriceMultiplierDenominator",
        "baseTokenGasPriceMultiplierNominator"
      ],
      "sinceTimestamp": 1731379871,
      "sinceBlock": 21168735,
      "values": {
        "$immutable": false,
        "$implementation": [
          "0xEaedCF01c0B01C1a10b74cB0A2cDeF78a9540cdb",
          "0x95C45F931946C97D10D9d6e859Fe8D62785ed3C1",
          "0x36b026c39125964D99596CE302866B5A59E4dE27",
          "0x53d0b421BB3e522632ABEB06BB2c4eB15eaD9800"
        ],
        "$pastUpgrades": [
          [
            "2024-11-12T02:51:11.000Z",
            "0x0bbe1288b6184a2f0e7b1205c695f28f5dad249904447e05a841fbfbab1af41d",
            [
              "0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a",
              "0xE60E94fCCb18a81D501a38959E532C0A85A1be89",
              "0xCDB6228b616EEf8Df47D69A372C4f725C43e718C",
              "0xaD193aDe635576d8e9f7ada71Af2137b16c64075"
            ]
          ],
          [
            "2024-11-12T02:51:11.000Z",
            "0x0bbe1288b6184a2f0e7b1205c695f28f5dad249904447e05a841fbfbab1af41d",
            [
              "0xF6F26b416CE7AE5e5FE224Be332C7aE4e1f3450a",
              "0xE60E94fCCb18a81D501a38959E532C0A85A1be89",
              "0xCDB6228b616EEf8Df47D69A372C4f725C43e718C",
              "0xaD193aDe635576d8e9f7ada71Af2137b16c64075"
            ]
          ],
          [
            "2025-01-28T05:38:11.000Z",
            "0x733c89da487edb502dc65f5115ada9cef6b44128a85cf36adbde4821e13abe31",
            [
              "0x90C0A0a63d7ff47BfAA1e9F8fa554dabc986504a",
              "0x81754d2E48e3e553ba6Dfd193FC72B3A0c6076d9",
              "0x5575218cECd370E1d630d1AdB03c254B0B376821",
              "0xBB13642F795014E0EAC2b0d52ECD5162ECb66712"
            ]
          ],
          [
            "2025-03-24T09:29:47.000Z",
            "0xd442b78fb0d2ccccea791f60de88cc4d7214fff454429c552be59c8778cbb9f3",
            [
              "0xEaedCF01c0B01C1a10b74cB0A2cDeF78a9540cdb",
              "0x95C45F931946C97D10D9d6e859Fe8D62785ed3C1",
              "0x36b026c39125964D99596CE302866B5A59E4dE27",
              "0x53d0b421BB3e522632ABEB06BB2c4eB15eaD9800"
            ]
          ]
        ],
        "$upgradeCount": 4,
        "baseTokenGasPriceMultiplierDenominator": 1,
        "baseTokenGasPriceMultiplierNominator": 1,
        "facetAddresses": [
          "0xEaedCF01c0B01C1a10b74cB0A2cDeF78a9540cdb",
          "0x95C45F931946C97D10D9d6e859Fe8D62785ed3C1",
          "0x36b026c39125964D99596CE302866B5A59E4dE27",
          "0x53d0b421BB3e522632ABEB06BB2c4eB15eaD9800"
        ],
        "facets": {
          "0xEaedCF01c0B01C1a10b74cB0A2cDeF78a9540cdb": [
            "acceptAdmin()",
            "unfreezeDiamond()",
            "upgradeChainFromVersion(uint256,((address,uint8,bool,bytes4[])[],address,bytes))",
            "setPorterAvailability(bool)",
            "setTransactionFilterer(address)",
            "setTokenMultiplier(uint128,uint128)",
            "freezeDiamond()",
            "genesisUpgrade(address,address,bytes,bytes[])",
            "forwardedBridgeMint(bytes,bool)",
            "prepareChainCommitment()",
            "setValidator(address,bool)",
            "setPendingAdmin(address)",
            "setDAValidatorPair(address,address)",
            "forwardedBridgeBurn(address,address,bytes)",
            "changeFeeParams((uint8,uint32,uint32,uint32,uint32,uint64))",
            "makePermanentRollup()",
            "executeUpgrade(((address,uint8,bool,bytes4[])[],address,bytes))",
            "forwardedBridgeRecoverFailedTransfer(uint256,bytes32,address,bytes)",
            "setPriorityTxMaxGasLimit(uint256)",
            "setPubdataPricingMode(uint8)"
          ],
          "0x95C45F931946C97D10D9d6e859Fe8D62785ed3C1": [
            "getPubdataPricingMode()",
            "getPriorityTxMaxGasLimit()",
            "getTotalBlocksCommitted()",
            "getVerifierParams()",
            "baseTokenGasPriceMultiplierDenominator()",
            "getTransactionFilterer()",
            "isDiamondStorageFrozen()",
            "getProtocolVersion()",
            "getChainId()",
            "getBridgehub()",
            "getTotalBlocksExecuted()",
            "getPriorityTreeRoot()",
            "getVerifier()",
            "facetAddresses()",
            "getDAValidatorPair()",
            "getPriorityQueueSize()",
            "getSettlementLayer()",
            "getAdmin()",
            "storedBlockHash(uint256)",
            "getFirstUnprocessedPriorityTx()",
            "facets()",
            "getL2SystemContractsUpgradeTxHash()",
            "isPriorityQueueActive()",
            "getChainTypeManager()",
            "getBaseTokenAssetId()",
            "getBaseToken()",
            "l2LogsRootHash(uint256)",
            "getL2SystemContractsUpgradeBlockNumber()",
            "getTotalPriorityTxs()",
            "facetFunctionSelectors(address)",
            "getTotalBlocksVerified()",
            "storedBatchHash(uint256)",
            "getTotalBatchesExecuted()",
            "isEthWithdrawalFinalized(uint256,uint256)",
            "isFacetFreezable(address)",
            "facetAddress(bytes4)",
            "getPendingAdmin()",
            "getL2BootloaderBytecodeHash()",
            "getTotalBatchesCommitted()",
            "getL2SystemContractsUpgradeBatchNumber()",
            "isFunctionFreezable(bytes4)",
            "baseTokenGasPriceMultiplierNominator()",
            "getTotalBatchesVerified()",
            "getPriorityTreeStartIndex()",
            "getSemverProtocolVersion()",
            "isValidator(address)",
            "getL2DefaultAccountBytecodeHash()"
          ],
          "0x36b026c39125964D99596CE302866B5A59E4dE27": [
            "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)",
            "bridgehubRequestL2Transaction((address,address,uint256,uint256,bytes,uint256,uint256,bytes[],address))",
            "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)",
            "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])",
            "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])",
            "proveL2LeafInclusion(uint256,uint256,bytes32,bytes32[])",
            "l2TransactionBaseCost(uint256,uint256,uint256)",
            "requestL2TransactionToGatewayMailbox(uint256,bytes32,uint64)",
            "bridgehubRequestL2TransactionOnGateway(bytes32,uint64)",
            "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"
          ],
          "0x53d0b421BB3e522632ABEB06BB2c4eB15eaD9800": [
            "revertBatchesSharedBridge(uint256,uint256)",
            "proveBatchesSharedBridge(uint256,uint256,uint256,bytes)",
            "commitBatchesSharedBridge(uint256,uint256,uint256,bytes)",
            "executeBatchesSharedBridge(uint256,uint256,uint256,bytes)"
          ]
        },
        "getAdmin": "0x6308ee1Ebdb8D5E60bB88D3EA3b56CE326193e7D",
        "getBaseToken": "0xAB3B124052F0389D1cbED221d912026Ac995bb95",
        "getBaseTokenAssetId": "0x655d55f4565c6519b560cef52332055302203549acc24d046264c1271fa724ae",
        "getBridgehub": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "getChainId": 325,
        "getChainTypeManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "getDAValidatorPair": [
          "0x907b30407249949521Bf0c89A43558dae200146A",
          "0xFa30EAe30351A83809657299F6Cad9557c232e8C"
        ],
        "getFirstUnprocessedPriorityTx": 440,
        "getL2BootloaderBytecodeHash": "0x0100088580465d88420e6369230ee94a32ff356dbcdd407a4be49fc8009b2a81",
        "getL2DefaultAccountBytecodeHash": "0x010004dbf8be36c421254d005352f8245146906919be0099e8a50d0e78df85e0",
        "getL2SystemContractsUpgradeBatchNumber": 1479,
        "getL2SystemContractsUpgradeBlockNumber": 1479,
        "getL2SystemContractsUpgradeTxHash": "0x90ad0eda97ff912115760297113eeee7db980d892d46d454e13f97e1b732da50",
        "getPendingAdmin": "0x0000000000000000000000000000000000000000",
        "getPriorityQueueSize": 1,
        "getPriorityTreeRoot": "0x7fe0794a9492f37dd3194cad0330921cf90b0766f79b953350a298733a193252",
        "getPriorityTreeStartIndex": 440,
        "getPriorityTxMaxGasLimit": 72000000,
        "getProtocolVersion": 111669149696,
        "getPubdataPricingMode": 1,
        "getSemverProtocolVersion": [0, 26, 0],
        "getSettlementLayer": "0x0000000000000000000000000000000000000000",
        "getTotalBatchesCommitted": 1481,
        "getTotalBatchesExecuted": 1467,
        "getTotalBatchesVerified": 1478,
        "getTotalBlocksCommitted": 1481,
        "getTotalBlocksExecuted": 1467,
        "getTotalBlocksVerified": 1478,
        "getTotalPriorityTxs": 441,
        "getTransactionFilterer": "0x3Cd52B238Ac856600b22756133eEb31ECb25109a",
        "getVerifier": "0xdb3300726556AFA413A11aF474a8cFDa4D7fc5a5",
        "getVerifierParams": {
          "recursionNodeLevelVkHash": "0xf520cd5b37e74e19fdb369c8d676a04dce8a19457497ac6686d2bb95d94109c8",
          "recursionLeafLevelVkHash": "0xf9664f4324c1400fa5c3822d667f30e873f53f1b8033180cd15fe41c1e2355c6",
          "recursionCircuitsSetVksHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
        },
        "isDiamondStorageFrozen": false,
        "isPriorityQueueActive": false,
        "prepareChainCommitment": {
          "totalBatchesExecuted": 1467,
          "totalBatchesVerified": 1478,
          "totalBatchesCommitted": 1481,
          "l2SystemContractsUpgradeTxHash": "0x90ad0eda97ff912115760297113eeee7db980d892d46d454e13f97e1b732da50",
          "l2SystemContractsUpgradeBatchNumber": 1479,
          "batchHashes": [
            "0x3706f5cd5bcf1bf154802bde5b508ae5a22c1e2c4d414319e86539ef5691604d",
            "0x7d1dc86489eaedbf64c020a6199606176c019bdd63c6215d37e9b1fec5c2a7d8",
            "0x1b7dbae5cd9bc740e7ed575497ae3f84a99fb9ece6a133fe21a7dbdd92f55555",
            "0x13f7d9807d27ba042ffb6fa89a2b131b6e6ff379b34d152ff11d2b04342614b1",
            "0x7f39541c781e799d821ab71fbc1a9e591a2df6b7d6f9a7433c62bf3ff72c1543",
            "0x3a41d5cc593147574e44d812fa3b099b9037785f902c08ef5db443c54397587a",
            "0x77e2fcbd81fb4d564cae9959ade29333dbe05a8bef917c5d2010cf9c3905171d",
            "0x8b4ed5ba3cfe540961d4ed247a06ade0a952127a86c8fbbae7f8c1da725949d0",
            "0xc37c5440071160f0371f40d76594f410941a06614a7265fd079a7599eef293cb",
            "0x22040bb2532f17f82eb8ec2c82095e2013633be8c002b2f8ac84ae8df655b040",
            "0x145f63eaf6b2c54b59daad80a8d52d619f3089b1c60ac30bc4f3d3e708c989f8",
            "0xa95d1537ca6f3bda00728a06c6db7978ba4a3d9719f8b620f9a3a17b6b691bb9",
            "0x35ed247557f4ef2e14c1df87adc29587ac6d8adbe6a5436cb2bda95dc1947763",
            "0xcfa3d7a6a7b5ec3db72c66865dd83dcc79190d046c9a829e93cabb4f91901299",
            "0x500fa97654d235bdef8f09c5e930002a162104c667dcf2e5ce3ffe106ee9f7a7"
          ],
          "priorityTree": {
            "nextLeafIndex": 1,
            "startIndex": 440,
            "unprocessedIndex": 0,
            "sides": [
              "0x7fe0794a9492f37dd3194cad0330921cf90b0766f79b953350a298733a193252"
            ]
          },
          "isPermanentRollup": false
        },
        "validators": [
          "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E",
          "0x8c0Bfc04AdA21fd496c55B8C50331f904306F564"
        ]
      },
      "fieldMeta": {
        "getAdmin": { "severity": "HIGH" },
        "getTransactionFilterer": {
          "severity": "HIGH",
          "description": "This contract must expose the ITransactionFilterer interface (see Mailbox facet) and is used for censoring transactions pushed from L1 to L2."
        },
        "getDAValidatorPair": { "severity": "HIGH" },
        "getPendingAdmin": { "severity": "HIGH" },
        "getPubdataPricingMode": {
          "severity": "HIGH",
          "description": "0 - Rollup, 1 - Validium"
        },
        "getProtocolVersion": {
          "severity": "HIGH",
          "description": "Protocol version, increments with each protocol upgrade."
        },
        "getVerifierParams": {
          "severity": "LOW",
          "description": "Verifier parameters used for proving batches."
        }
      },
      "derivedName": "DiamondProxy",
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "Governance",
      "address": "0xe81d64195072e4d09639b31Abb257d0096FEa9d1",
      "type": "Contract",
      "sourceHashes": [
        "0x200762223206dfe40a648627db22f3403b1bdb04c59d8753a1e7525591876fda"
      ],
      "proxyType": "immutable",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0x3Cd52B238Ac856600b22756133eEb31ECb25109a",
          "description": "address is part of the GRVTTransactionFilterer whitelist."
        }
      ],
      "sinceTimestamp": 1730964035,
      "sinceBlock": 21134244,
      "values": {
        "$immutable": true,
        "minDelay": 0,
        "owner": "0xF29bFff344c7ef0186432fE30C39fda0cca0550b",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "securityCouncil": "0x0000000000000000000000000000000000000000"
      }
    },
    {
      "name": "BridgedStandardERC20",
      "address": "0xEA3c8d61A4B5476310975C13964a6Da6eF1dED49",
      "type": "Contract",
      "sourceHashes": [
        "0xa21d9461f0ad9e9f88f070b5e6d94fa1d098ecab775ed2ada154b611a436f1a5"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1739109095,
      "sinceBlock": 21809372,
      "values": {
        "$immutable": true,
        "assetId": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "decimals": 0,
        "DOMAIN_SEPARATOR": "0x856daf5683cf78db52d1a923fa06a72262875116af964f05db00be7e1ba3cdd3",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "",
          "version": "",
          "chainId": 1,
          "verifyingContract": "0xEA3c8d61A4B5476310975C13964a6Da6eF1dED49",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "l1Address": "0x0000000000000000000000000000000000000000",
        "l2Bridge": "0x0000000000000000000000000000000000000000",
        "name": "",
        "nativeTokenVault": "0x0000000000000000000000000000000000000000",
        "originToken": "0x0000000000000000000000000000000000000000",
        "symbol": "",
        "totalSupply": 0
      }
    },
    {
      "address": "0xF29bFff344c7ef0186432fE30C39fda0cca0550b",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "0x3Cd52B238Ac856600b22756133eEb31ECb25109a",
          "description": "address is part of the GRVTTransactionFilterer whitelist."
        },
        {
          "permission": "interact",
          "from": "0x3Cd52B238Ac856600b22756133eEb31ECb25109a",
          "description": "manage the whitelist of addresses."
        }
      ]
    },
    {
      "address": "0xFa30EAe30351A83809657299F6Cad9557c232e8C",
      "type": "EOA",
      "proxyType": "EOA"
    }
  ],
  "abis": {
    "0x20E17D0280DeaBb78f7c193E3Ef05F62adC0936E": [
      "constructor(address _l1WethAddress, address _bridgehub, address _l1Nullifier, uint256 _eraChainId, address _eraDiamondProxy)",
      "error AddressAlreadyUsed(address addr)",
      "error AssetHandlerDoesNotExist(bytes32 assetId)",
      "error AssetIdNotSupported(bytes32 assetId)",
      "error IncorrectTokenAddressFromNTV(bytes32 assetId, address tokenAddress)",
      "error InvalidNTVBurnData()",
      "error LegacyBridgeUsesNonNativeToken()",
      "error LegacyEncodingUsedForNonL1Token()",
      "error NativeTokenVaultAlreadySet()",
      "error NonEmptyMsgValue()",
      "error NotInitializedReentrancyGuard()",
      "error Reentrancy()",
      "error SlotOccupied()",
      "error TokenNotSupported(address token)",
      "error TokensWithFeesNotSupported()",
      "error Unauthorized(address caller)",
      "error UnsupportedEncodingVersion()",
      "error ZeroAddress()",
      "event AssetDeploymentTrackerRegistered(bytes32 indexed assetId, bytes32 indexed additionalData, address assetDeploymentTracker)",
      "event AssetDeploymentTrackerSet(bytes32 indexed assetId, address indexed assetDeploymentTracker, bytes32 indexed additionalData)",
      "event AssetHandlerRegistered(bytes32 indexed assetId, address indexed _assetHandlerAddress)",
      "event BridgehubDepositBaseTokenInitiated(uint256 indexed chainId, address indexed from, bytes32 assetId, uint256 amount)",
      "event BridgehubDepositFinalized(uint256 indexed chainId, bytes32 indexed txDataHash, bytes32 indexed l2DepositTxHash)",
      "event BridgehubDepositInitiated(uint256 indexed chainId, bytes32 indexed txDataHash, address indexed from, bytes32 assetId, bytes bridgeMintCalldata)",
      "event BridgehubMintData(bytes bridgeMintData)",
      "event BridgehubWithdrawalInitiated(uint256 chainId, address indexed sender, bytes32 indexed assetId, bytes32 assetDataHash)",
      "event ClaimedFailedDepositAssetRouter(uint256 indexed chainId, bytes32 indexed assetId, bytes assetData)",
      "event DepositFinalizedAssetRouter(uint256 indexed chainId, bytes32 indexed assetId, bytes assetData)",
      "event Initialized(uint8 version)",
      "event LegacyDepositInitiated(uint256 indexed chainId, bytes32 indexed l2DepositTxHash, address indexed from, address to, address l1Token, uint256 amount)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "function BRIDGE_HUB() view returns (address)",
      "function ERA_CHAIN_ID() view returns (uint256)",
      "function ETH_TOKEN_ASSET_ID() view returns (bytes32)",
      "function L1_CHAIN_ID() view returns (uint256)",
      "function L1_NULLIFIER() view returns (address)",
      "function L1_WETH_TOKEN() view returns (address)",
      "function acceptOwnership()",
      "function assetDeploymentTracker(bytes32 assetId) view returns (address assetDeploymentTracker)",
      "function assetHandlerAddress(bytes32 assetId) view returns (address assetHandlerAddress)",
      "function bridgeRecoverFailedTransfer(uint256 _chainId, address _depositSender, bytes32 _assetId, bytes _assetData)",
      "function bridgeRecoverFailedTransfer(uint256 _chainId, address _depositSender, bytes32 _assetId, bytes _assetData, bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof)",
      "function bridgehubConfirmL2Transaction(uint256 _chainId, bytes32 _txDataHash, bytes32 _txHash)",
      "function bridgehubDeposit(uint256 _chainId, address _originalCaller, uint256 _value, bytes _data) payable returns (tuple(bytes32 magicValue, address l2Contract, bytes l2Calldata, bytes[] factoryDeps, bytes32 txDataHash) request)",
      "function bridgehubDepositBaseToken(uint256 _chainId, bytes32 _assetId, address _originalCaller, uint256 _amount) payable",
      "function claimFailedDeposit(uint256 _chainId, address _depositSender, address _l1Token, uint256 _amount, bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof)",
      "function depositLegacyErc20Bridge(address _originalCaller, address _l2Receiver, address _l1Token, uint256 _amount, uint256 _l2TxGasLimit, uint256 _l2TxGasPerPubdataByte, address _refundRecipient) payable returns (bytes32 txHash)",
      "function finalizeDeposit(uint256 _chainId, bytes32 _assetId, bytes _transferData) payable",
      "function finalizeWithdrawal(uint256 _chainId, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes _message, bytes32[] _merkleProof)",
      "function getDepositCalldata(address _sender, bytes32 _assetId, bytes _assetData) view returns (bytes)",
      "function initialize(address _owner)",
      "function isWithdrawalFinalized(uint256 _chainId, uint256 _l2BatchNumber, uint256 _l2MessageIndex) view returns (bool)",
      "function l2BridgeAddress(uint256 _chainId) view returns (address)",
      "function legacyBridge() view returns (address)",
      "function nativeTokenVault() view returns (address)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setAssetDeploymentTracker(bytes32 _assetRegistrationData, address _assetDeploymentTracker)",
      "function setAssetHandlerAddressThisChain(bytes32 _assetRegistrationData, address _assetHandlerAddress)",
      "function setL1Erc20Bridge(address _legacyBridge)",
      "function setNativeTokenVault(address _nativeTokenVault)",
      "function transferFundsToNTV(bytes32 _assetId, uint256 _amount, address _originalCaller) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function unpause()"
    ],
    "0x36b026c39125964D99596CE302866B5A59E4dE27": [
      "constructor(uint256 _eraChainId, uint256 _l1ChainId)",
      "error BaseTokenGasPriceDenominatorNotSet()",
      "error BatchNotExecuted(uint256 batchNumber)",
      "error GasPerPubdataMismatch()",
      "error HashedLogIsDefault()",
      "error InvalidProofLengthForFinalNode()",
      "error LengthIsNotDivisibleBy32(uint256 length)",
      "error LocalRootIsZero()",
      "error LocalRootMustBeZero()",
      "error MalformedBytecode(uint8)",
      "error MerkleIndexOutOfBounds()",
      "error MerklePathEmpty()",
      "error MerklePathOutOfBounds()",
      "error MsgValueTooLow(uint256 required, uint256 provided)",
      "error NotHyperchain()",
      "error NotInitializedReentrancyGuard()",
      "error NotL1(uint256 blockChainId)",
      "error NotSettlementLayer()",
      "error OnlyEraSupported()",
      "error PubdataGreaterThanLimit(uint256 limit, uint256 length)",
      "error Reentrancy()",
      "error TooManyFactoryDeps()",
      "error TooMuchGas()",
      "error TransactionNotAllowed()",
      "error TxnBodyGasLimitNotEnoughGas()",
      "error Unauthorized(address caller)",
      "error UnsupportedProofMetadataVersion(uint256 metadataVersion)",
      "error ValidateTxnNotEnoughGas()",
      "event NewPriorityRequest(uint256 txId, bytes32 txHash, uint64 expirationTimestamp, tuple(uint256 txType, uint256 from, uint256 to, uint256 gasLimit, uint256 gasPerPubdataByteLimit, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas, uint256 paymaster, uint256 nonce, uint256 value, uint256[4] reserved, bytes data, bytes signature, uint256[] factoryDeps, bytes paymasterInput, bytes reservedDynamic) transaction, bytes[] factoryDeps)",
      "event NewRelayedPriorityTransaction(uint256 txId, bytes32 txHash, uint64 expirationTimestamp)",
      "function bridgehubRequestL2Transaction(tuple(address sender, address contractL2, uint256 mintValue, uint256 l2Value, bytes l2Calldata, uint256 l2GasLimit, uint256 l2GasPerPubdataByteLimit, bytes[] factoryDeps, address refundRecipient) _request) returns (bytes32 canonicalTxHash)",
      "function bridgehubRequestL2TransactionOnGateway(bytes32 _canonicalTxHash, uint64 _expirationTimestamp)",
      "function finalizeEthWithdrawal(uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes _message, bytes32[] _merkleProof)",
      "function getName() view returns (string)",
      "function l2TransactionBaseCost(uint256 _gasPrice, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit) view returns (uint256)",
      "function proveL1ToL2TransactionStatus(bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof, uint8 _status) view returns (bool)",
      "function proveL2LeafInclusion(uint256 _batchNumber, uint256 _leafProofMask, bytes32 _leaf, bytes32[] _proof) view returns (bool)",
      "function proveL2LogInclusion(uint256 _batchNumber, uint256 _index, tuple(uint8 l2ShardId, bool isService, uint16 txNumberInBatch, address sender, bytes32 key, bytes32 value) _log, bytes32[] _proof) view returns (bool)",
      "function proveL2MessageInclusion(uint256 _batchNumber, uint256 _index, tuple(uint16 txNumberInBatch, address sender, bytes data) _message, bytes32[] _proof) view returns (bool)",
      "function requestL2Transaction(address _contractL2, uint256 _l2Value, bytes _calldata, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit, bytes[] _factoryDeps, address _refundRecipient) payable returns (bytes32 canonicalTxHash)",
      "function requestL2TransactionToGatewayMailbox(uint256 _chainId, bytes32 _canonicalTxHash, uint64 _expirationTimestamp) returns (bytes32 canonicalTxHash)"
    ],
    "0x3a23919d4aA39e096E9d6420fd6a2861A20B19e5": [
      "constructor(address _singleton)"
    ],
    "0x3Cd52B238Ac856600b22756133eEb31ECb25109a": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x40B1060a114380f40faC6869c5B383f47e61530c": [
      "constructor(address _l1WethAddress, address _l1AssetRouter, address _l1Nullifier)",
      "error AddressMismatch(address expected, address supplied)",
      "error AmountMustBeGreaterThanZero()",
      "error AssetIdAlreadyRegistered()",
      "error AssetIdMismatch(bytes32 expected, bytes32 supplied)",
      "error BurningNativeWETHNotSupported()",
      "error ClaimFailedDepositFailed()",
      "error DeployingBridgedTokenForNativeToken()",
      "error EmptyDeposit()",
      "error EmptyToken()",
      "error InsufficientChainBalance()",
      "error InvalidNTVBurnData()",
      "error NoFundsTransferred()",
      "error NonEmptyMsgValue()",
      "error OriginChainIdNotFound()",
      "error TokenNotSupported(address token)",
      "error TokensWithFeesNotSupported()",
      "error Unauthorized(address caller)",
      "error UnsupportedEncodingVersion()",
      "error ValueMismatch(uint256 expected, uint256 actual)",
      "error WithdrawFailed()",
      "error WrongAmountTransferred(uint256 balance, uint256 nullifierChainBalance)",
      "error WrongCounterpart()",
      "error ZeroAddress()",
      "error ZeroAmountToTransfer()",
      "event BridgeBurn(uint256 indexed chainId, bytes32 indexed assetId, address indexed sender, address receiver, uint256 amount)",
      "event BridgeMint(uint256 indexed chainId, bytes32 indexed assetId, address receiver, uint256 amount)",
      "event BridgedTokenBeaconUpdated(address bridgedTokenBeacon, bytes32 bridgedTokenProxyBytecodeHash)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event TokenBeaconUpdated(address indexed l2TokenBeacon)",
      "event Unpaused(address account)",
      "function ASSET_ROUTER() view returns (address)",
      "function BASE_TOKEN_ASSET_ID() view returns (bytes32)",
      "function L1_CHAIN_ID() view returns (uint256)",
      "function L1_NULLIFIER() view returns (address)",
      "function WETH_TOKEN() view returns (address)",
      "function acceptOwnership()",
      "function assetId(address tokenAddress) view returns (bytes32 assetId)",
      "function bridgeBurn(uint256 _chainId, uint256 _l2MsgValue, bytes32 _assetId, address _originalCaller, bytes _data) payable returns (bytes _bridgeMintData)",
      "function bridgeCheckCounterpartAddress(uint256, bytes32, address, address _assetHandlerAddressOnCounterpart) view",
      "function bridgeMint(uint256 _chainId, bytes32 _assetId, bytes _data) payable",
      "function bridgeRecoverFailedTransfer(uint256 _chainId, bytes32 _assetId, address _depositSender, bytes _data) payable",
      "function bridgedTokenBeacon() view returns (address)",
      "function calculateCreate2TokenAddress(uint256 _originChainId, address _nonNativeToken) view returns (address)",
      "function chainBalance(uint256 chainId, bytes32 assetId) view returns (uint256 balance)",
      "function ensureTokenIsRegistered(address _nativeToken)",
      "function getERC20Getters(address _token, uint256 _originChainId) view returns (bytes)",
      "function initialize(address _owner, address _bridgedTokenBeacon)",
      "function originChainId(bytes32 assetId) view returns (uint256 originChainId)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingOwner() view returns (address)",
      "function registerEthToken()",
      "function registerToken(address _nativeToken)",
      "function renounceOwnership()",
      "function tokenAddress(bytes32 assetId) view returns (address tokenAddress)",
      "function tokenDataOriginChainId(bytes _erc20Data) view returns (uint256 tokenOriginChainId)",
      "function transferFundsFromSharedBridge(address _token)",
      "function transferOwnership(address newOwner)",
      "function tryRegisterTokenFromBurnData(bytes _burnData, bytes32 _expectedAssetId)",
      "function unpause()",
      "function updateChainBalancesFromSharedBridge(address _token, uint256 _targetChainId)"
    ],
    "0x41675C099F32341bf84BFc5382aF534df5C7461a": [
      "constructor()",
      "event AddedOwner(address indexed owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address indexed handler)",
      "event ChangedGuard(address indexed guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address indexed module)",
      "event EnabledModule(address indexed module)",
      "event ExecutionFailure(bytes32 indexed txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 indexed txHash, uint256 payment)",
      "event RemovedOwner(address indexed owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x53d0b421BB3e522632ABEB06BB2c4eB15eaD9800": [
      "constructor(uint256 _l1ChainId)",
      "error BatchHashMismatch(bytes32 expected, bytes32 actual)",
      "error BatchNumberMismatch(uint256 expectedBatchNumber, uint256 providedBatchNumber)",
      "error CanOnlyProcessOneBatch()",
      "error CantExecuteUnprovenBatches()",
      "error CantRevertExecutedBatch()",
      "error EmptyData()",
      "error HashMismatch(bytes32 expected, bytes32 actual)",
      "error IncorrectBatchBounds(uint256 processFromExpected, uint256 processToExpected, uint256 processFromProvided, uint256 processToProvided)",
      "error InvalidBatchesDataLength(uint256 batchesDataLength, uint256 priorityOpsDataLength)",
      "error InvalidLogSender(address sender, uint256 logKey)",
      "error InvalidNumberOfBlobs(uint256 expected, uint256 numCommitments, uint256 numHashes)",
      "error InvalidProof()",
      "error InvalidProtocolVersion()",
      "error InvalidSystemLogsLength()",
      "error L2TimestampTooBig()",
      "error LogAlreadyProcessed(uint8)",
      "error MerkleIndexOrHeightMismatch()",
      "error MerkleNothingToProve()",
      "error MerklePathEmpty()",
      "error MerklePathLengthMismatch(uint256 pathLength, uint256 expectedLength)",
      "error MerklePathOutOfBounds()",
      "error MismatchL2DAValidator()",
      "error MismatchNumberOfLayer1Txs(uint256 numberOfLayer1Txs, uint256 expectedLength)",
      "error MissingSystemLogs(uint256 expected, uint256 actual)",
      "error NonIncreasingTimestamp()",
      "error NonSequentialBatch()",
      "error NotHistoricalRoot()",
      "error NotInitializedReentrancyGuard()",
      "error NotSettlementLayer()",
      "error PriorityOperationsRollingHashMismatch()",
      "error PriorityOpsDataItemHashesLengthIsNotZero()",
      "error PriorityOpsDataLeftPathLengthIsNotZero()",
      "error PriorityOpsDataRightPathLengthIsNotZero()",
      "error QueueIsEmpty()",
      "error Reentrancy()",
      "error RevertedBatchNotAfterNewLastBatch()",
      "error SystemLogsSizeTooBig()",
      "error TimeNotReached(uint256 expectedTimestamp, uint256 actualTimestamp)",
      "error TimestampError()",
      "error TxHashMismatch()",
      "error Unauthorized(address caller)",
      "error UnexpectedSystemLog(uint256 logKey)",
      "error UnsupportedCommitBatchEncoding(uint8 version)",
      "error UnsupportedExecuteBatchEncoding(uint8 version)",
      "error UnsupportedProofBatchEncoding(uint8 version)",
      "error UpgradeBatchNumberIsNotZero()",
      "error ValueMismatch(uint256 expected, uint256 actual)",
      "error VerifiedBatchesExceedsCommittedBatches()",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "function commitBatchesSharedBridge(uint256, uint256 _processFrom, uint256 _processTo, bytes _commitData)",
      "function executeBatchesSharedBridge(uint256, uint256 _processFrom, uint256 _processTo, bytes _executeData)",
      "function getName() view returns (string)",
      "function proveBatchesSharedBridge(uint256, uint256 _processBatchFrom, uint256 _processBatchTo, bytes _proofData)",
      "function revertBatchesSharedBridge(uint256, uint256 _newLastBatch)"
    ],
    "0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E": [
      "constructor(address _initialOwner, uint32 _executionDelay, uint256 _eraChainId)",
      "error AddressAlreadyValidator(uint256 _chainId)",
      "error ValidatorDoesNotExist(uint256 _chainId)",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "event NewExecutionDelay(uint256 _newExecutionDelay)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ValidatorAdded(uint256 indexed _chainId, address _addedValidator)",
      "event ValidatorRemoved(uint256 indexed _chainId, address _removedValidator)",
      "function acceptOwnership()",
      "function addValidator(uint256 _chainId, address _newValidator)",
      "function commitBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, uint64 timestamp, uint64 indexRepeatedStorageChanges, bytes32 newStateRoot, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 bootloaderHeapInitialContentsHash, bytes32 eventsQueueStateHash, bytes systemLogs, bytes pubdataCommitments)[] _newBatchesData)",
      "function commitBatchesSharedBridge(uint256 _chainId, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, uint64 timestamp, uint64 indexRepeatedStorageChanges, bytes32 newStateRoot, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 bootloaderHeapInitialContentsHash, bytes32 eventsQueueStateHash, bytes systemLogs, bytes pubdataCommitments)[] _newBatchesData)",
      "function executeBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _newBatchesData)",
      "function executeBatchesSharedBridge(uint256 _chainId, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[] _newBatchesData)",
      "function executionDelay() view returns (uint32)",
      "function getCommittedBatchTimestamp(uint256 _chainId, uint256 _l2BatchNumber) view returns (uint256)",
      "function getName() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function proveBatches(tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[], tuple(uint256[] recursiveAggregationInput, uint256[] serializedProof))",
      "function proveBatchesSharedBridge(uint256 _chainId, tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment), tuple(uint64 batchNumber, bytes32 batchHash, uint64 indexRepeatedStorageChanges, uint256 numberOfLayer1Txs, bytes32 priorityOperationsHash, bytes32 l2LogsTreeRoot, uint256 timestamp, bytes32 commitment)[], tuple(uint256[] recursiveAggregationInput, uint256[] serializedProof))",
      "function removeValidator(uint256 _chainId, address _validator)",
      "function renounceOwnership()",
      "function revertBatches(uint256)",
      "function revertBatchesSharedBridge(uint256 _chainId, uint256)",
      "function setExecutionDelay(uint32 _executionDelay)",
      "function setStateTransitionManager(address _stateTransitionManager)",
      "function stateTransitionManager() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function validators(uint256 _chainId, address _validator) view returns (bool)"
    ],
    "0x6308ee1Ebdb8D5E60bB88D3EA3b56CE326193e7D": [
      "constructor(address _initialOwner, address _initialTokenMultiplierSetter)",
      "error NoCallsProvided()",
      "error Unauthorized(address caller)",
      "error ZeroAddress()",
      "event CallExecuted(tuple(address target, uint256 value, bytes data) _call, bool _success, bytes _returnData)",
      "event NewTokenMultiplierSetter(address _oldTokenMultiplierSetter, address _newTokenMultiplierSetter)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event UpdateUpgradeTimestamp(uint256 indexed _protocolVersion, uint256 _upgradeTimestamp)",
      "function acceptOwnership()",
      "function multicall(tuple(address target, uint256 value, bytes data)[] _calls, bool _requireSuccess) payable",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function protocolVersionToUpgradeTimestamp(uint256 protocolVersion) view returns (uint256 upgradeTimestamp)",
      "function renounceOwnership()",
      "function setTokenMultiplier(address _chainContract, uint128 _nominator, uint128 _denominator)",
      "function setTokenMultiplierSetter(address _tokenMultiplierSetter)",
      "function setUpgradeTimestamp(uint256 _protocolVersion, uint256 _upgradeTimestamp)",
      "function tokenMultiplierSetter() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x8319feDe99061C6723c86D366a903e8fa3a0f541": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function L2_TX_SENDER_ROLE() view returns (bytes32)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address defaultAdmin)",
      "function isTransactionAllowed(address sender, address, uint256, uint256, bytes, address) view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0x8829AD80E425C646DAB305381ff105169FeEcE56": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x8c0Bfc04AdA21fd496c55B8C50331f904306F564": [
      "constructor(address _initialOwner, uint32 _executionDelay)",
      "error AddressAlreadyValidator(uint256 _chainId)",
      "error TimeNotReached(uint256 expectedTimestamp, uint256 actualTimestamp)",
      "error Unauthorized(address caller)",
      "error ValidatorDoesNotExist(uint256 _chainId)",
      "error ZeroAddress()",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "event NewExecutionDelay(uint256 _newExecutionDelay)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ValidatorAdded(uint256 indexed _chainId, address _addedValidator)",
      "event ValidatorRemoved(uint256 indexed _chainId, address _removedValidator)",
      "function acceptOwnership()",
      "function addValidator(uint256 _chainId, address _newValidator)",
      "function chainTypeManager() view returns (address)",
      "function commitBatchesSharedBridge(uint256 _chainId, uint256 _processBatchFrom, uint256 _processBatchTo, bytes)",
      "function executeBatchesSharedBridge(uint256 _chainId, uint256 _processBatchFrom, uint256 _processBatchTo, bytes)",
      "function executionDelay() view returns (uint32)",
      "function getCommittedBatchTimestamp(uint256 _chainId, uint256 _l2BatchNumber) view returns (uint256)",
      "function getName() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function proveBatchesSharedBridge(uint256 _chainId, uint256, uint256, bytes)",
      "function removeValidator(uint256 _chainId, address _validator)",
      "function renounceOwnership()",
      "function revertBatchesSharedBridge(uint256 _chainId, uint256)",
      "function setChainTypeManager(address _chainTypeManager)",
      "function setExecutionDelay(uint32 _executionDelay)",
      "function transferOwnership(address newOwner)",
      "function validators(uint256 _chainId, address _validator) view returns (bool)"
    ],
    "0x8D231E4097C3cb200Ed62134B466AA615cE60336": [
      "constructor(address _sharedBridge)",
      "error EmptyDeposit()",
      "error NotInitializedReentrancyGuard()",
      "error Reentrancy()",
      "error SlotOccupied()",
      "error TokensWithFeesNotSupported()",
      "error Unauthorized(address caller)",
      "error WithdrawalAlreadyFinalized()",
      "event ClaimedFailedDeposit(address indexed to, address indexed l1Token, uint256 amount)",
      "event DepositInitiated(bytes32 indexed l2DepositTxHash, address indexed from, address indexed to, address l1Token, uint256 amount)",
      "event WithdrawalFinalized(address indexed to, address indexed l1Token, uint256 amount)",
      "function SHARED_BRIDGE() view returns (address)",
      "function claimFailedDeposit(address _depositSender, address _l1Token, bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof)",
      "function deposit(address _l2Receiver, address _l1Token, uint256 _amount, uint256 _l2TxGasLimit, uint256 _l2TxGasPerPubdataByte) payable returns (bytes32 l2TxHash)",
      "function deposit(address _l2Receiver, address _l1Token, uint256 _amount, uint256 _l2TxGasLimit, uint256 _l2TxGasPerPubdataByte, address _refundRecipient) payable returns (bytes32 l2TxHash)",
      "function depositAmount(address account, address l1Token, bytes32 depositL2TxHash) view returns (uint256 amount)",
      "function finalizeWithdrawal(uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes _message, bytes32[] _merkleProof)",
      "function initialize()",
      "function isWithdrawalFinalized(uint256 l2BatchNumber, uint256 l2ToL1MessageNumber) view returns (bool isFinalized)",
      "function l2Bridge() view returns (address)",
      "function l2TokenAddress(address _l1Token) view returns (address)",
      "function l2TokenBeacon() view returns (address)",
      "function l2TokenProxyBytecodeHash() view returns (bytes32)",
      "function transferTokenToSharedBridge(address _token)"
    ],
    "0x907b30407249949521Bf0c89A43558dae200146A": [
      "error ValL1DAWrongInputLength(uint256 inputLength, uint256 expectedLength)",
      "function checkDA(uint256, uint256, bytes32, bytes _operatorDAInput, uint256 maxBlobsSupported) returns (tuple(bytes32 stateDiffHash, bytes32[] blobsLinearHashes, bytes32[] blobsOpeningCommitments) output)"
    ],
    "0x95C45F931946C97D10D9d6e859Fe8D62785ed3C1": [
      "function baseTokenGasPriceMultiplierDenominator() view returns (uint128)",
      "function baseTokenGasPriceMultiplierNominator() view returns (uint128)",
      "function facetAddress(bytes4 _selector) view returns (address)",
      "function facetAddresses() view returns (address[])",
      "function facetFunctionSelectors(address _facet) view returns (bytes4[])",
      "function facets() view returns (tuple(address addr, bytes4[] selectors)[] result)",
      "function getAdmin() view returns (address)",
      "function getBaseToken() view returns (address)",
      "function getBaseTokenAssetId() view returns (bytes32)",
      "function getBridgehub() view returns (address)",
      "function getChainId() view returns (uint256)",
      "function getChainTypeManager() view returns (address)",
      "function getDAValidatorPair() view returns (address, address)",
      "function getFirstUnprocessedPriorityTx() view returns (uint256)",
      "function getL2BootloaderBytecodeHash() view returns (bytes32)",
      "function getL2DefaultAccountBytecodeHash() view returns (bytes32)",
      "function getL2SystemContractsUpgradeBatchNumber() view returns (uint256)",
      "function getL2SystemContractsUpgradeBlockNumber() view returns (uint256)",
      "function getL2SystemContractsUpgradeTxHash() view returns (bytes32)",
      "function getName() view returns (string)",
      "function getPendingAdmin() view returns (address)",
      "function getPriorityQueueSize() view returns (uint256)",
      "function getPriorityTreeRoot() view returns (bytes32)",
      "function getPriorityTreeStartIndex() view returns (uint256)",
      "function getPriorityTxMaxGasLimit() view returns (uint256)",
      "function getProtocolVersion() view returns (uint256)",
      "function getPubdataPricingMode() view returns (uint8)",
      "function getSemverProtocolVersion() view returns (uint32, uint32, uint32)",
      "function getSettlementLayer() view returns (address)",
      "function getTotalBatchesCommitted() view returns (uint256)",
      "function getTotalBatchesExecuted() view returns (uint256)",
      "function getTotalBatchesVerified() view returns (uint256)",
      "function getTotalBlocksCommitted() view returns (uint256)",
      "function getTotalBlocksExecuted() view returns (uint256)",
      "function getTotalBlocksVerified() view returns (uint256)",
      "function getTotalPriorityTxs() view returns (uint256)",
      "function getTransactionFilterer() view returns (address)",
      "function getVerifier() view returns (address)",
      "function getVerifierParams() view returns (tuple(bytes32 recursionNodeLevelVkHash, bytes32 recursionLeafLevelVkHash, bytes32 recursionCircuitsSetVksHash))",
      "function isDiamondStorageFrozen() view returns (bool)",
      "function isEthWithdrawalFinalized(uint256 _l2BatchNumber, uint256 _l2MessageIndex) view returns (bool)",
      "function isFacetFreezable(address _facet) view returns (bool isFreezable)",
      "function isFunctionFreezable(bytes4 _selector) view returns (bool)",
      "function isPriorityQueueActive() view returns (bool)",
      "function isValidator(address _address) view returns (bool)",
      "function l2LogsRootHash(uint256 _batchNumber) view returns (bytes32)",
      "function storedBatchHash(uint256 _batchNumber) view returns (bytes32)",
      "function storedBlockHash(uint256 _batchNumber) view returns (bytes32)"
    ],
    "0xb3618AbcbA795588C43eA602dD0Cd6E952A85a6A": [
      "constructor(address implementation_)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function implementation() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeTo(address newImplementation)"
    ],
    "0xbeD1EB542f9a5aA6419Ff3deb921A372681111f6": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2": [
      "function name() view returns (string)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
      "function withdraw(uint256 wad)",
      "function decimals() view returns (uint8)",
      "function balanceOf(address) view returns (uint256)",
      "function symbol() view returns (string)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function deposit() payable",
      "function allowance(address, address) view returns (uint256)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)"
    ],
    "0xdb3300726556AFA413A11aF474a8cFDa4D7fc5a5": [
      "function verificationKeyHash() pure returns (bytes32 vkHash)",
      "function verify(uint256[], uint256[]) view returns (bool)"
    ],
    "0xE17aeD2fC55f4A876315376ffA49FE6358113a65": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xe3e310cd8EE0C808794810AB50FE4BcCC5c7D89E": [
      "constructor(uint256 _chainId, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)",
      "event DiamondCut(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata)"
    ],
    "0xe81d64195072e4d09639b31Abb257d0096FEa9d1": [
      "constructor(address _admin, address _securityCouncil, uint256 _minDelay)",
      "event ChangeMinDelay(uint256 _delayBefore, uint256 _delayAfter)",
      "event ChangeSecurityCouncil(address _securityCouncilBefore, address _securityCouncilAfter)",
      "event OperationCancelled(bytes32 indexed _id)",
      "event OperationExecuted(bytes32 indexed _id)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ShadowOperationScheduled(bytes32 indexed _id, uint256 delay)",
      "event TransparentOperationScheduled(bytes32 indexed _id, uint256 delay, tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation)",
      "function acceptOwnership()",
      "function cancel(bytes32 _id)",
      "function execute(tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation) payable",
      "function executeInstant(tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation) payable",
      "function getOperationState(bytes32 _id) view returns (uint8)",
      "function hashOperation(tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation) pure returns (bytes32)",
      "function isOperation(bytes32 _id) view returns (bool)",
      "function isOperationDone(bytes32 _id) view returns (bool)",
      "function isOperationPending(bytes32 _id) view returns (bool)",
      "function isOperationReady(bytes32 _id) view returns (bool)",
      "function minDelay() view returns (uint256)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function scheduleShadow(bytes32 _id, uint256 _delay)",
      "function scheduleTransparent(tuple(tuple(address target, uint256 value, bytes data)[] calls, bytes32 predecessor, bytes32 salt) _operation, uint256 _delay)",
      "function securityCouncil() view returns (address)",
      "function timestamps(bytes32 operationId) view returns (uint256 executionTimestamp)",
      "function transferOwnership(address newOwner)",
      "function updateDelay(uint256 _newDelay)",
      "function updateSecurityCouncil(address _newSecurityCouncil)"
    ],
    "0xEA3c8d61A4B5476310975C13964a6Da6eF1dED49": [
      "constructor()",
      "error NonSequentialVersion()",
      "error Unauthorized(address caller)",
      "error UnsupportedEncodingVersion()",
      "error ZeroAddress()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event BeaconUpgraded(address indexed beacon)",
      "event BridgeBurn(address indexed account, uint256 amount)",
      "event BridgeInitialize(address indexed l1Token, string name, string symbol, uint8 decimals)",
      "event BridgeMint(address indexed account, uint256 amount)",
      "event EIP712DomainChanged()",
      "event Initialized(uint8 version)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Upgraded(address indexed implementation)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function assetId() view returns (bytes32)",
      "function balanceOf(address account) view returns (uint256)",
      "function bridgeBurn(address _from, uint256 _amount)",
      "function bridgeInitialize(bytes32 _assetId, address _originToken, bytes _data)",
      "function bridgeMint(address _to, uint256 _amount)",
      "function decimals() view returns (uint8)",
      "function decodeString(bytes _input) pure returns (string result)",
      "function decodeUint8(bytes _input) pure returns (uint8 result)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function l1Address() view returns (address)",
      "function l2Bridge() view returns (address)",
      "function name() view returns (string)",
      "function nativeTokenVault() view returns (address)",
      "function nonces(address owner) view returns (uint256)",
      "function originToken() view returns (address)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function reinitializeToken(tuple(bool ignoreName, bool ignoreSymbol, bool ignoreDecimals) _availableGetters, string _newName, string _newSymbol, uint8 _version)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
    ],
    "0xEaedCF01c0B01C1a10b74cB0A2cDeF78a9540cdb": [
      "constructor(uint256 _l1ChainId, address _rollupDAManager)",
      "error AddressHasNoCode(address)",
      "error AlreadyMigrated()",
      "error AlreadyPermanentRollup()",
      "error ContractNotDeployed()",
      "error DelegateCallFailed(bytes returnData)",
      "error DenominatorIsZero()",
      "error DiamondAlreadyFrozen()",
      "error DiamondNotFrozen()",
      "error ExecutedIsNotConsistentWithVerified(uint256 batchesExecuted, uint256 batchesVerified)",
      "error FacetExists(bytes4 selector, address)",
      "error HashMismatch(bytes32 expected, bytes32 actual)",
      "error InvalidCommitment()",
      "error InvalidDAForPermanentRollup()",
      "error InvalidNextLeafIndex(uint256 treeNextLeafIndex, uint256 commitmentNextLeafIndex)",
      "error InvalidNumberOfBatchHashes(uint256 batchHashesLength, uint256 expected)",
      "error InvalidPubdataPricingMode()",
      "error InvalidStartIndex(uint256 treeStartIndex, uint256 commitmentStartIndex)",
      "error InvalidUnprocessedIndex(uint256 treeUnprocessedIndex, uint256 commitmentUnprocessedIndex)",
      "error L1DAValidatorAddressIsZero()",
      "error L2DAValidatorAddressIsZero()",
      "error NoFunctionsForDiamondCut()",
      "error NonEmptyCalldata()",
      "error NotAllBatchesExecuted()",
      "error NotChainAdmin(address prevMsgSender, address admin)",
      "error NotHistoricalRoot()",
      "error NotL1(uint256 blockChainId)",
      "error NotMigrated()",
      "error NotSettlementLayer()",
      "error OutdatedProtocolVersion(uint256 protocolVersion, uint256 currentProtocolVersion)",
      "error PriorityQueueNotReady()",
      "error PriorityTxPubdataExceedsMaxPubDataPerBatch()",
      "error ProtocolIdMismatch(uint256 expectedProtocolVersion, uint256 providedProtocolId)",
      "error ProtocolIdNotGreater()",
      "error ProtocolVersionNotUpToDate(uint256 currentProtocolVersion, uint256 protocolVersion)",
      "error RemoveFunctionFacetAddressNotZero(address facet)",
      "error RemoveFunctionFacetAddressZero()",
      "error ReplaceFunctionFacetAddressZero()",
      "error SelectorsMustAllHaveSameFreezability()",
      "error TooMuchGas()",
      "error Unauthorized(address caller)",
      "error UndefinedDiamondCutAction()",
      "error VerifiedIsNotConsistentWithCommitted(uint256 batchesVerified, uint256 batchesCommitted)",
      "event BridgeMint(address indexed _account, uint256 _amount)",
      "event DiamondCut(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata)",
      "event ExecuteUpgrade(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) diamondCut)",
      "event Freeze()",
      "event IsPorterAvailableStatusUpdate(bool isPorterAvailable)",
      "event MigrationComplete()",
      "event NewAdmin(address indexed oldAdmin, address indexed newAdmin)",
      "event NewBaseTokenMultiplier(uint128 oldNominator, uint128 oldDenominator, uint128 newNominator, uint128 newDenominator)",
      "event NewFeeParams(tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) oldFeeParams, tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) newFeeParams)",
      "event NewL1DAValidator(address indexed oldL1DAValidator, address indexed newL1DAValidator)",
      "event NewL2DAValidator(address indexed oldL2DAValidator, address indexed newL2DAValidator)",
      "event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin)",
      "event NewPriorityTxMaxGasLimit(uint256 oldPriorityTxMaxGasLimit, uint256 newPriorityTxMaxGasLimit)",
      "event NewTransactionFilterer(address oldTransactionFilterer, address newTransactionFilterer)",
      "event PubdataPricingModeUpdate(uint8 validiumMode)",
      "event Unfreeze()",
      "event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive)",
      "function acceptAdmin()",
      "function changeFeeParams(tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) _newFeeParams)",
      "function executeUpgrade(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)",
      "function forwardedBridgeBurn(address _settlementLayer, address _originalCaller, bytes _data) payable returns (bytes chainBridgeMintData)",
      "function forwardedBridgeMint(bytes _data, bool _contractAlreadyDeployed) payable",
      "function forwardedBridgeRecoverFailedTransfer(uint256, bytes32, address, bytes _chainData) payable",
      "function freezeDiamond()",
      "function genesisUpgrade(address _l1GenesisUpgrade, address _ctmDeployer, bytes _forceDeploymentData, bytes[] _factoryDeps)",
      "function getName() view returns (string)",
      "function makePermanentRollup()",
      "function prepareChainCommitment() view returns (tuple(uint256 totalBatchesExecuted, uint256 totalBatchesVerified, uint256 totalBatchesCommitted, bytes32 l2SystemContractsUpgradeTxHash, uint256 l2SystemContractsUpgradeBatchNumber, bytes32[] batchHashes, tuple(uint256 nextLeafIndex, uint256 startIndex, uint256 unprocessedIndex, bytes32[] sides) priorityTree, bool isPermanentRollup) commitment)",
      "function setDAValidatorPair(address _l1DAValidator, address _l2DAValidator)",
      "function setPendingAdmin(address _newPendingAdmin)",
      "function setPorterAvailability(bool _zkPorterIsAvailable)",
      "function setPriorityTxMaxGasLimit(uint256 _newPriorityTxMaxGasLimit)",
      "function setPubdataPricingMode(uint8 _pricingMode)",
      "function setTokenMultiplier(uint128 _nominator, uint128 _denominator)",
      "function setTransactionFilterer(address _transactionFilterer)",
      "function setValidator(address _validator, bool _active)",
      "function unfreezeDiamond()",
      "function upgradeChainFromVersion(uint256 _oldProtocolVersion, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)"
    ],
    "0xf7B67bDDb74B5eD3De49e1a6Da4D1d7460F00780": [
      "constructor()",
      "event BridgeHubSet(address indexed bridgeHub)",
      "event BridgeProxyDepositInitiated(bytes32 indexed txDataHash, bytes32 indexed l2DepositTxHash, address indexed to, address from, address l1Token, uint256 amount)",
      "event ClaimedFailedDepositBridgeProxy(address indexed to, address indexed l1Token, uint256 amount, bool sharedBridgeClaimSucceeded)",
      "event DepositApproverSet(address indexed depositApprover)",
      "event Initialized(uint8 version)",
      "event Initialized(uint256 chainID, address bridgeHub, address owner, address depositApprover, address baseToken)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event TokenAllowed(address token)",
      "event TokenDisallowed(address token)",
      "function L2_GAS_LIMIT_DEPOSIT() view returns (uint256)",
      "function L2_GAS_LIMIT_MINT_BASE_TOKEN() view returns (uint256)",
      "function acceptOwnership()",
      "function addAllowedToken(address _token)",
      "function approveBaseToken(address to, uint256 amount) returns (bool)",
      "function baseToken() view returns (address)",
      "function bridgeHub() view returns (address)",
      "function chainID() view returns (uint256)",
      "function claimFailedDeposit(address _depositSender, address _l1Token, uint256 _amount, bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof)",
      "function deposit(address _l2Receiver, address _l1Token, uint256 _amount, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s) returns (bytes32 txHash)",
      "function depositApprover() view returns (address)",
      "function depositHappened(bytes32 l2DepositTxHash) view returns (bytes32 depositDataHash)",
      "function getDepositApprover() view returns (address)",
      "function getDepositProxyAddress(address accountID) view returns (address)",
      "function initialize(uint256 _chainID, address _bridgeHub, address _owner, address _depositApprover, address _baseToken)",
      "function isTokenAllowed(address _token) view returns (bool)",
      "function l2DepositProxyAddressDerivationParams() view returns (address exchangeAddress, bytes32 beaconProxyBytecodeHash, address depositProxyBeacon)",
      "function mintBaseTokenL2(address _l2Receiver, uint256 _amount)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function removeAllowedToken(address _token)",
      "function renounceOwnership()",
      "function setBridgeHub(address _bridgeHub)",
      "function setDepositApprover(address _depositApprover)",
      "function setL2DepositProxyAddressDerivationParams(tuple(address exchangeAddress, bytes32 beaconProxyBytecodeHash, address depositProxyBeacon) _params)",
      "function setL2GasPerPubdataByteLimit(uint256 limit)",
      "function transferOwnership(address newOwner)"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0x9d7f7b8b6adea28c4538f12e31b0c59eac5339b4e5c80def637cccc0cfe82106",
    "shared-zk-stack/ChainAdmin": "0x172abf28fc80b16cdf57ce983156416ca3577aa03998cfdfbb25bf89a401f30c",
    "shared-zk-stack/Diamond_v26": "0x5f6579ff4d790a38918f1167eadfb789b3a3b0af9b787633feb9b72e06ed8797",
    "shared-zk-stack/ValidatorTimelock": "0xc4191ea67746b7254716039eec3bc57567706d1da349cd8990ad6511804d9656",
    "shared-zk-stack/Verifier": "0x512886ff2c8cebfc0599cf26b106b2f7cddb5653db9495ddf5a3e2ab346cb68d"
  }
}
