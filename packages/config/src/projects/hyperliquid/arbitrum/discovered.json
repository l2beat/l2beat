{
  "name": "hyperliquid",
  "chain": "arbitrum",
  "timestamp": 1748939714,
  "configHash": "0xb26791e453b8cdc970caa3abb9f73ddeae9530d8caaf7a0686782bf23c0be838",
  "entries": [
    {
      "address": "arb1:0x263294039413B96D25E4173a5F7599F8b3801504",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "hotValidatorHyperliquid",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "role": ".hotAddresses"
        },
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "finalize withdrawals, finalize validator set updates.",
          "role": ".finalizers"
        },
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "vote for locking the bridge contract.",
          "role": ".lockers"
        }
      ]
    },
    {
      "name": "HyperliquidBridge",
      "address": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
      "type": "Contract",
      "template": "hyperliquid/HyperliquidBridge",
      "sourceHashes": [
        "0x8c22d9d0e8dc4b87b77a97aca8a01a2050b5c416ff894e2b0c18daf22c76b122"
      ],
      "proxyType": "immutable",
      "description": "Single contract containing the logic for the Hyperliquid bridge. It manages deposits, withdrawals, the hot and cold validator sets, as well as the lockers, finalizers, and all the permissioned functions. The current locker threshold is 2 and the minimum validator threshold is 2/3*4.",
      "sinceTimestamp": 1701389130,
      "sinceBlock": 155689071,
      "values": {
        "$immutable": true,
        "blockDurationMillis": 350,
        "coldAddresses": [
          "arb1:0x8003FD297a7Aa477B746825E7A506675bF590E91",
          "arb1:0x86d6AE3032732F27239075D77a1317989B52F628",
          "arb1:0xE346B41B47296153A21E64D6bFc857C27874C6e7",
          "arb1:0x5a92b4A6a525445c9B4FFf61C0db71dCfE305ede"
        ],
        "coldValidatorSetHash": "0x7d9ba0065e166ea281f295ab005e63f7bfdf51dea2361a4a5aa34905a4b2b20f",
        "disputePeriodSeconds": 200,
        "epoch": 5,
        "finalizers": [
          "arb1:0x58E1b0E63C905D5982324FCd9108582623b8132e",
          "arb1:0x263294039413B96D25E4173a5F7599F8b3801504",
          "arb1:0xda6816df552c3f9e0FB64979fb357800d690d79B",
          "arb1:0xEF2364dB5db6F5539Aa0bC111771a94Ee47637Fc",
          "arb1:0xf9d2282A4A4C216f624717C0747D23146FC048c5"
        ],
        "getLockersVotingLock": [],
        "hotAddresses": [
          "arb1:0xEF2364dB5db6F5539Aa0bC111771a94Ee47637Fc",
          "arb1:0xda6816df552c3f9e0FB64979fb357800d690d79B",
          "arb1:0x58E1b0E63C905D5982324FCd9108582623b8132e",
          "arb1:0x263294039413B96D25E4173a5F7599F8b3801504"
        ],
        "hotValidatorSetHash": "0xf92fbcc7725c7e78596d75626eee1a05908b653aeededc4927fecca41f35e2d6",
        "lockers": [
          "arb1:0x58E1b0E63C905D5982324FCd9108582623b8132e",
          "arb1:0x263294039413B96D25E4173a5F7599F8b3801504",
          "arb1:0xda6816df552c3f9e0FB64979fb357800d690d79B",
          "arb1:0xEF2364dB5db6F5539Aa0bC111771a94Ee47637Fc",
          "arb1:0xf9d2282A4A4C216f624717C0747D23146FC048c5"
        ],
        "lockerThreshold": 2,
        "nValidators": 4,
        "paused": false,
        "pendingValidatorSetUpdate": {
          "epoch": 5,
          "totalValidatorPower": 4,
          "updateTime": 0,
          "updateBlockNumber": 261233949,
          "nValidators": 4,
          "hotValidatorSetHash": "0xf92fbcc7725c7e78596d75626eee1a05908b653aeededc4927fecca41f35e2d6",
          "coldValidatorSetHash": "0x7d9ba0065e166ea281f295ab005e63f7bfdf51dea2361a4a5aa34905a4b2b20f"
        },
        "totalValidatorPower": 4,
        "usdcToken": "arb1:0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
        "validatorSetUpdates": [
          {
            "epoch": 0,
            "hotValidatorSetHash": "0xb15b2587729ccdb8964a76d16dee10ef93b2d56d128b086a1faba59267daab49",
            "coldValidatorSetHash": "0x8d08d5a33a7a0a2497944c7ac876fff8209aa0599bcabbe46a6799ace4c745e2"
          },
          {
            "epoch": 1,
            "hotValidatorSetHash": "0x31c911ebc19cb679b56d69d79453ce25c2086ec68669b335c5eca3baf4ad70eb",
            "coldValidatorSetHash": "0x1835f56615a1106fdb579d5564c739601e4769b4aadc18ba349aecfa291f2dfc"
          },
          {
            "epoch": 3,
            "hotValidatorSetHash": "0xb60851b8ee9f0a3cdf0561ecaacaefa869421c369570dc983f0b384d013a377a",
            "coldValidatorSetHash": "0xdcf508c02509dc258e2dbafdcf94225b8b1558c0eea7adc1e559597594ddfba1"
          },
          {
            "epoch": 4,
            "hotValidatorSetHash": "0x7972697522860105015057426b352bb4552574635af2613e99c622f5df100f5b",
            "coldValidatorSetHash": "0xf7bfa3b4f93562141e4eed9a8e0cfb203acfe3c97e91d50fd810c4730e117880"
          },
          {
            "epoch": 5,
            "hotValidatorSetHash": "0xf92fbcc7725c7e78596d75626eee1a05908b653aeededc4927fecca41f35e2d6",
            "coldValidatorSetHash": "0x7d9ba0065e166ea281f295ab005e63f7bfdf51dea2361a4a5aa34905a4b2b20f"
          }
        ]
      },
      "fieldMeta": {
        "validatorSetUpdates": {
          "severity": "HIGH",
          "description": "Validator set updates. See config.jsonc and update the hardcoded validator addresses."
        },
        "hotAddresses": {
          "description": "The hot valis can also change the cold valis by adding a finalizer they control and then proposing, finalizing a validator set update."
        }
      },
      "implementationNames": {
        "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7": "Bridge2"
      }
    },
    {
      "address": "arb1:0x58E1b0E63C905D5982324FCd9108582623b8132e",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "hotValidatorHyperliquid",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "role": ".hotAddresses"
        },
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "finalize withdrawals, finalize validator set updates.",
          "role": ".finalizers"
        },
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "vote for locking the bridge contract.",
          "role": ".lockers"
        }
      ]
    },
    {
      "address": "arb1:0x5a92b4A6a525445c9B4FFf61C0db71dCfE305ede",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "coldValidatorHyperliquid",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "role": ".coldAddresses"
        }
      ]
    },
    {
      "address": "arb1:0x8003FD297a7Aa477B746825E7A506675bF590E91",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "coldValidatorHyperliquid",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "role": ".coldAddresses"
        }
      ]
    },
    {
      "address": "arb1:0x86d6AE3032732F27239075D77a1317989B52F628",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "coldValidatorHyperliquid",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "role": ".coldAddresses"
        }
      ]
    },
    {
      "address": "arb1:0xda6816df552c3f9e0FB64979fb357800d690d79B",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "hotValidatorHyperliquid",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "role": ".hotAddresses"
        },
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "finalize withdrawals, finalize validator set updates.",
          "role": ".finalizers"
        },
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "vote for locking the bridge contract.",
          "role": ".lockers"
        }
      ]
    },
    {
      "address": "arb1:0xE346B41B47296153A21E64D6bFc857C27874C6e7",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "coldValidatorHyperliquid",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "role": ".coldAddresses"
        }
      ]
    },
    {
      "address": "arb1:0xEF2364dB5db6F5539Aa0bC111771a94Ee47637Fc",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "hotValidatorHyperliquid",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "role": ".hotAddresses"
        },
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "finalize withdrawals, finalize validator set updates.",
          "role": ".finalizers"
        },
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "vote for locking the bridge contract.",
          "role": ".lockers"
        }
      ]
    },
    {
      "address": "arb1:0xf9d2282A4A4C216f624717C0747D23146FC048c5",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "finalize withdrawals, finalize validator set updates.",
          "role": ".finalizers"
        },
        {
          "permission": "interact",
          "from": "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7",
          "description": "vote for locking the bridge contract.",
          "role": ".lockers"
        }
      ]
    }
  ],
  "abis": {
    "arb1:0x2Df1c51E09aECF9cacB7bc98cB1742757f163dF7": [
      "constructor(address[] hotAddresses, address[] coldAddresses, uint64[] powers, address usdcAddress, uint64 _disputePeriodSeconds, uint64 _blockDurationMillis, uint64 _lockerThreshold)",
      "event ChangedBlockDurationMillis(uint64 newBlockDurationMillis)",
      "event ChangedDisputePeriodSeconds(uint64 newDisputePeriodSeconds)",
      "event ChangedLockerThreshold(uint64 newLockerThreshold)",
      "event Deposit(address indexed user, uint64 usd)",
      "event FailedPermitDeposit(address user, uint64 usd, uint32 errorCode)",
      "event FailedWithdrawal(bytes32 message, uint32 errorCode)",
      "event FinalizedValidatorSetUpdate(uint64 epoch, bytes32 hotValidatorSetHash, bytes32 coldValidatorSetHash)",
      "event FinalizedWithdrawal(address indexed user, address destination, uint64 usd, uint64 nonce, bytes32 message)",
      "event InvalidatedWithdrawal(tuple(address user, address destination, uint64 usd, uint64 nonce, uint64 requestedTime, uint64 requestedBlockNumber, bytes32 message) withdrawal)",
      "event ModifiedFinalizer(address indexed finalizer, bool isFinalizer)",
      "event ModifiedLocker(address indexed locker, bool isLocker)",
      "event Paused(address account)",
      "event RequestedValidatorSetUpdate(uint64 epoch, bytes32 hotValidatorSetHash, bytes32 coldValidatorSetHash, uint64 updateTime)",
      "event RequestedWithdrawal(address indexed user, address destination, uint64 usd, uint64 nonce, bytes32 message, uint64 requestedTime)",
      "event Unpaused(address account)",
      "function batchedDepositWithPermit(tuple(address user, uint64 usd, uint64 deadline, tuple(uint256 r, uint256 s, uint8 v) signature)[] deposits)",
      "function batchedFinalizeWithdrawals(bytes32[] messages)",
      "function batchedRequestWithdrawals(tuple(address user, address destination, uint64 usd, uint64 nonce, tuple(uint256 r, uint256 s, uint8 v)[] signatures)[] withdrawalRequests, tuple(uint64 epoch, address[] validators, uint64[] powers) hotValidatorSet)",
      "function blockDurationMillis() view returns (uint64)",
      "function changeBlockDurationMillis(uint64 newBlockDurationMillis, uint64 nonce, tuple(uint64 epoch, address[] validators, uint64[] powers) activeColdValidatorSet, tuple(uint256 r, uint256 s, uint8 v)[] signatures)",
      "function changeDisputePeriodSeconds(uint64 newDisputePeriodSeconds, uint64 nonce, tuple(uint64 epoch, address[] validators, uint64[] powers) activeColdValidatorSet, tuple(uint256 r, uint256 s, uint8 v)[] signatures)",
      "function changeLockerThreshold(uint64 newLockerThreshold, uint64 nonce, tuple(uint64 epoch, address[] validators, uint64[] powers) activeColdValidatorSet, tuple(uint256 r, uint256 s, uint8 v)[] signatures)",
      "function coldValidatorSetHash() view returns (bytes32)",
      "function disputePeriodSeconds() view returns (uint64)",
      "function emergencyUnlock(tuple(uint64 epoch, address[] hotAddresses, address[] coldAddresses, uint64[] powers) newValidatorSet, tuple(uint64 epoch, address[] validators, uint64[] powers) activeColdValidatorSet, tuple(uint256 r, uint256 s, uint8 v)[] signatures, uint64 nonce)",
      "function epoch() view returns (uint64)",
      "function finalizeValidatorSetUpdate()",
      "function finalizedWithdrawals(bytes32) view returns (bool)",
      "function finalizers(address) view returns (bool)",
      "function getLockersVotingLock() view returns (address[])",
      "function hotValidatorSetHash() view returns (bytes32)",
      "function invalidateWithdrawals(bytes32[] messages, uint64 nonce, tuple(uint64 epoch, address[] validators, uint64[] powers) activeColdValidatorSet, tuple(uint256 r, uint256 s, uint8 v)[] signatures)",
      "function isVotingLock(address locker) view returns (bool)",
      "function lockerThreshold() view returns (uint64)",
      "function lockers(address) view returns (bool)",
      "function modifyFinalizer(address finalizer, bool _isFinalizer, uint64 nonce, tuple(uint64 epoch, address[] validators, uint64[] powers) activeValidatorSet, tuple(uint256 r, uint256 s, uint8 v)[] signatures)",
      "function modifyLocker(address locker, bool _isLocker, uint64 nonce, tuple(uint64 epoch, address[] validators, uint64[] powers) activeValidatorSet, tuple(uint256 r, uint256 s, uint8 v)[] signatures)",
      "function nValidators() view returns (uint64)",
      "function paused() view returns (bool)",
      "function pendingValidatorSetUpdate() view returns (uint64 epoch, uint64 totalValidatorPower, uint64 updateTime, uint64 updateBlockNumber, uint64 nValidators, bytes32 hotValidatorSetHash, bytes32 coldValidatorSetHash)",
      "function requestedWithdrawals(bytes32) view returns (address user, address destination, uint64 usd, uint64 nonce, uint64 requestedTime, uint64 requestedBlockNumber, bytes32 message)",
      "function totalValidatorPower() view returns (uint64)",
      "function unvoteEmergencyLock()",
      "function updateValidatorSet(tuple(uint64 epoch, address[] hotAddresses, address[] coldAddresses, uint64[] powers) newValidatorSet, tuple(uint64 epoch, address[] validators, uint64[] powers) activeHotValidatorSet, tuple(uint256 r, uint256 s, uint8 v)[] signatures)",
      "function usdcToken() view returns (address)",
      "function usedMessages(bytes32) view returns (bool)",
      "function voteEmergencyLock()",
      "function withdrawalsInvalidated(bytes32) view returns (bool)"
    ]
  },
  "usedTemplates": {
    "hyperliquid/HyperliquidBridge": "0x6349c4d94e64347ff4aa348ac6cfad812936cdf0f3ba72b0e7f12d0caf1574c3"
  },
  "usedBlockNumbers": { "arbitrum": 343418957 },
  "permissionsConfigHash": "0xeb6b96c02c6088d31aff9534024005d56b92d7ae18d98115580bdd5b3d00f5de"
}
