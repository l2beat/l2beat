{
  "name": "everclearbridge",
  "chain": "ethereum",
  "blockNumber": 22065300,
  "configHash": "0x262a759db51e7c264a6a0ee5a3e68fb3415ef86d43526c898bb669ae984a9ca8",
  "entries": [
    {
      "name": "Permit2",
      "address": "0x000000000022D473030F116dDEE9F6B43aC78BA3",
      "type": "Contract",
      "sourceHashes": [
        "0x84beffbcb4624fb74fab61c80beeb566023a939418284a8f44357b71cd40b63b"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1668647879,
      "sinceBlock": 15986406,
      "values": {
        "$immutable": true,
        "DOMAIN_SEPARATOR": "0x866a5aba21966af95d6c7ab78eb2b2fc913915c28be3b9aa07cc04ff903e3f28"
      }
    },
    {
      "address": "0x2eEd1440842990Fa61F0c396f981375Fa6004131",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x38f188953f1E3afE83327C78AAeF72e0498da2C6",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "",
      "address": "0x4e2bbbFb10058E0D248a78fe2F469562f4eDbe66",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1726462943,
      "sinceBlock": 20760966,
      "values": { "$immutable": true }
    },
    {
      "address": "0x5d334979C6f565b9646975AEdD2358D01f3db4c1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x6281ea3060B26352b558C4F45767C90db482c4fd",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x7fB1B8D2C4a8186426Fb12a4Ae483f0093ED2315",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "",
      "address": "0x9ADA72CCbAfe94248aFaDE6B604D1bEAacc899A7",
      "type": "Contract",
      "unverified": true,
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0xa02a88F0bbD47045001Bd460Ad186C30F9a974d6",
          "via": []
        }
      ],
      "sinceTimestamp": 1726462895,
      "sinceBlock": 20760962,
      "values": {
        "$admin": "0xa02a88F0bbD47045001Bd460Ad186C30F9a974d6",
        "$implementation": "0xe0F010e465f15dcD42098dF9b99F1038c11B3056",
        "$pastUpgrades": [
          [
            "2024-09-16T05:01:35.000Z",
            "0x717467f872e890315eb796b4392a99bcf02647fc9e598c3cfc303b27bacf7da3",
            ["0xe0F010e465f15dcD42098dF9b99F1038c11B3056"]
          ]
        ],
        "$upgradeCount": 1
      }
    },
    {
      "address": "0x9b903Ae440CB1f01c342466D6DB6b57A5BF98C3f",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GnosisSafe",
      "address": "0xa02a88F0bbD47045001Bd460Ad186C30F9a974d6",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "0x9ADA72CCbAfe94248aFaDE6B604D1bEAacc899A7"
        },
        {
          "permission": "upgrade",
          "from": "0xa05A3380889115bf313f1Db9d5f335157Be4D816"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1726181879,
      "sinceBlock": 20737659,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x2eEd1440842990Fa61F0c396f981375Fa6004131",
          "0x9b903Ae440CB1f01c342466D6DB6b57A5BF98C3f",
          "0x7fB1B8D2C4a8186426Fb12a4Ae483f0093ED2315",
          "0x5d334979C6f565b9646975AEdD2358D01f3db4c1",
          "0xeb19B3Bdad53A775EB2d94d57D5a46c5260B0044"
        ],
        "$threshold": 2,
        "domainSeparator": "0x64412860115383b11fa25f237671c0f1360620ce4cb4483a378e947a2eaf2d69",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 5 (40%)",
        "nonce": 19,
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "EverclearSpoke",
      "address": "0xa05A3380889115bf313f1Db9d5f335157Be4D816",
      "type": "Contract",
      "unverified": true,
      "proxyType": "EIP1967 proxy",
      "issuedPermissions": [
        {
          "permission": "upgrade",
          "to": "0xa02a88F0bbD47045001Bd460Ad186C30F9a974d6",
          "via": []
        }
      ],
      "ignoreInWatchMode": ["intentQueue", "nonce"],
      "sinceTimestamp": 1726462859,
      "sinceBlock": 20760959,
      "values": {
        "$admin": "0xa02a88F0bbD47045001Bd460Ad186C30F9a974d6",
        "$implementation": "0x7e3667D4dE0B592c78cAa70faC8FE6d5853DfAAc",
        "$pastUpgrades": [
          [
            "2024-09-16T05:00:59.000Z",
            "0x0a57cf4df6073bd8c65327851929577a0e711996ed48b5785422168356237b80",
            ["0x255aba6E7f08d40B19872D11313688c2ED65d1C9"]
          ],
          [
            "2024-12-18T10:09:23.000Z",
            "0xe1b76ceaae265ba0c3762b3143858112401f39d49c84020906c3a0f7544d9d74",
            ["0x7e3667D4dE0B592c78cAa70faC8FE6d5853DfAAc"]
          ]
        ],
        "$upgradeCount": 2,
        "callExecutor": "0xeFa6Ac3F931620fD0449eC8c619f2A14A0A78E99",
        "DOMAIN": 1,
        "EVERCLEAR": 25327,
        "FILL_INTENT_FOR_SOLVER_TYPEHASH": "0xce47b2c080dbcd8e420dc92bcf58f25f73f2e008a3b34ac41b9d468d1fb45d5a",
        "fillQueue": { "first": 1, "last": 0 },
        "gateway": "0x9ADA72CCbAfe94248aFaDE6B604D1bEAacc899A7",
        "intentQueue": { "first": 953, "last": 952 },
        "lighthouse": "0x38f188953f1E3afE83327C78AAeF72e0498da2C6",
        "messageGasLimit": 2000000,
        "messageReceiver": "0x4e2bbbFb10058E0D248a78fe2F469562f4eDbe66",
        "nonce": 952,
        "owner": "0xa02a88F0bbD47045001Bd460Ad186C30F9a974d6",
        "paused": false,
        "PERMIT2": "0x000000000022D473030F116dDEE9F6B43aC78BA3",
        "PROCESS_FILL_QUEUE_VIA_RELAYER_TYPEHASH": "0x0afae807991f914b71165fd92589f1dc28648cb9fb1f8558f3a6c7507d56deff",
        "PROCESS_INTENT_QUEUE_VIA_RELAYER_TYPEHASH": "0x8104c8a42e1531612796e696e327ea52a475d9583ee6d64ffdefcafad22c0b24",
        "UPGRADE_INTERFACE_VERSION": "5.0.0",
        "watchtower": "0x6281ea3060B26352b558C4F45767C90db482c4fd"
      }
    },
    {
      "address": "0xeb19B3Bdad53A775EB2d94d57D5a46c5260B0044",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "",
      "address": "0xeFa6Ac3F931620fD0449eC8c619f2A14A0A78E99",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1726462919,
      "sinceBlock": 20760964,
      "values": { "$immutable": true }
    }
  ],
  "abis": {
    "0x000000000022D473030F116dDEE9F6B43aC78BA3": [
      "error AllowanceExpired(uint256 deadline)",
      "error ExcessiveInvalidation()",
      "error InsufficientAllowance(uint256 amount)",
      "error InvalidAmount(uint256 maxAmount)",
      "error InvalidContractSignature()",
      "error InvalidNonce()",
      "error InvalidSignature()",
      "error InvalidSignatureLength()",
      "error InvalidSigner()",
      "error LengthMismatch()",
      "error SignatureExpired(uint256 signatureDeadline)",
      "event Approval(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration)",
      "event Lockdown(address indexed owner, address token, address spender)",
      "event NonceInvalidation(address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce)",
      "event Permit(address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration, uint48 nonce)",
      "event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address, address, address) view returns (uint160 amount, uint48 expiration, uint48 nonce)",
      "function approve(address token, address spender, uint160 amount, uint48 expiration)",
      "function invalidateNonces(address token, address spender, uint48 newNonce)",
      "function invalidateUnorderedNonces(uint256 wordPos, uint256 mask)",
      "function lockdown(tuple(address token, address spender)[] approvals)",
      "function nonceBitmap(address, uint256) view returns (uint256)",
      "function permit(address owner, tuple(tuple(address token, uint160 amount, uint48 expiration, uint48 nonce)[] details, address spender, uint256 sigDeadline) permitBatch, bytes signature)",
      "function permit(address owner, tuple(tuple(address token, uint160 amount, uint48 expiration, uint48 nonce) details, address spender, uint256 sigDeadline) permitSingle, bytes signature)",
      "function permitTransferFrom(tuple(tuple(address token, uint256 amount) permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount) transferDetails, address owner, bytes signature)",
      "function permitTransferFrom(tuple(tuple(address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount)[] transferDetails, address owner, bytes signature)",
      "function permitWitnessTransferFrom(tuple(tuple(address token, uint256 amount) permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount) transferDetails, address owner, bytes32 witness, string witnessTypeString, bytes signature)",
      "function permitWitnessTransferFrom(tuple(tuple(address token, uint256 amount)[] permitted, uint256 nonce, uint256 deadline) permit, tuple(address to, uint256 requestedAmount)[] transferDetails, address owner, bytes32 witness, string witnessTypeString, bytes signature)",
      "function transferFrom(tuple(address from, address to, uint160 amount, address token)[] transferDetails)",
      "function transferFrom(address from, address to, uint160 amount, address token)"
    ],
    "0x7e3667D4dE0B592c78cAa70faC8FE6d5853DfAAc": [
      "constructor()",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error EverclearSpoke_ExecuteIntentCalldata_ExternalCallFailed()",
      "error EverclearSpoke_ExecuteIntentCalldata_InvalidStatus(bytes32 _intentId)",
      "error EverclearSpoke_FillIntent_InsufficientFunds(uint256 _requested, uint256 _available)",
      "error EverclearSpoke_FillIntent_IntentExpired(bytes32 _intentId)",
      "error EverclearSpoke_FillIntent_InvalidStatus(bytes32 _intentId)",
      "error EverclearSpoke_FillIntent_MaxFeeExceeded(uint256 _fee, uint24 _maxFee)",
      "error EverclearSpoke_InvalidMessageType()",
      "error EverclearSpoke_InvalidSignature()",
      "error EverclearSpoke_InvalidVarUpdate()",
      "error EverclearSpoke_NewIntent_CalldataExceedsLimit()",
      "error EverclearSpoke_NewIntent_InvalidIntent()",
      "error EverclearSpoke_NewIntent_MaxFeeExceeded(uint256 _fee, uint24 _maxFee)",
      "error EverclearSpoke_NewIntent_ZeroAmount()",
      "error EverclearSpoke_Pause_NotAuthorized()",
      "error EverclearSpoke_Paused()",
      "error EverclearSpoke_ProcessFillViaRelayer_NotRelayer()",
      "error EverclearSpoke_ProcessFillViaRelayer_TTLExpired()",
      "error EverclearSpoke_ProcessFillViaRelayer_WrongDomain()",
      "error EverclearSpoke_ProcessIntentQueue_NotFound(bytes32 _intentId, uint256 _position)",
      "error EverclearSpoke_ProcessQueue_InvalidAmount(uint256 _first, uint256 _last, uint256 _amount)",
      "error EverclearSpoke_ProcessQueue_ZeroAmount()",
      "error EverclearSpoke_Unauthorized()",
      "error EverclearSpoke_WrongDestination()",
      "error EverclearSpoke_ZeroAddress()",
      "error FailedInnerCall()",
      "error InvalidAccountNonce(address account, uint256 currentNonce)",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error Queue_EmptyQueue()",
      "error SafeERC20FailedOperation(address token)",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event AssetMintFailed(address indexed _asset, address indexed _recipient, uint256 _amount, uint8 _strategy)",
      "event AssetTransferFailed(address indexed _asset, address indexed _recipient, uint256 _amount)",
      "event Deposited(address indexed _depositant, address indexed _asset, uint256 _amount)",
      "event ExternalCalldataExecuted(bytes32 indexed _intentId, bytes _returnData)",
      "event FillQueueProcessed(bytes32 indexed _messageId, uint256 _firstIdx, uint256 _lastIdx, uint256 _quote)",
      "event GatewayUpdated(address _oldGateway, address _newGateway)",
      "event Initialized(uint64 version)",
      "event IntentAdded(bytes32 indexed _intentId, uint256 _queueIdx, tuple(bytes32 initiator, bytes32 receiver, bytes32 inputAsset, bytes32 outputAsset, uint24 maxFee, uint32 origin, uint64 nonce, uint48 timestamp, uint48 ttl, uint256 amount, uint32[] destinations, bytes data) _intent)",
      "event IntentFilled(bytes32 indexed _intentId, address indexed _solver, uint256 _totalFeeDBPS, uint256 _queueIdx, tuple(bytes32 initiator, bytes32 receiver, bytes32 inputAsset, bytes32 outputAsset, uint24 maxFee, uint32 origin, uint64 nonce, uint48 timestamp, uint48 ttl, uint256 amount, uint32[] destinations, bytes data) _intent)",
      "event IntentQueueProcessed(bytes32 indexed _messageId, uint256 _firstIdx, uint256 _lastIdx, uint256 _quote)",
      "event LighthouseUpdated(address _oldLightHouse, address _newLightHouse)",
      "event MessageGasLimitUpdated(uint256 _oldGasLimit, uint256 _newGasLimit)",
      "event MessageReceiverUpdated(address _oldMessageReceiver, address _newMessageReceiver)",
      "event ModuleSetForStrategy(uint8 _strategy, address _module)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused()",
      "event Settled(bytes32 indexed _intentId, address _account, address _asset, uint256 _amount)",
      "event StrategySetForAsset(address _asset, uint8 _strategy)",
      "event Unpaused()",
      "event Upgraded(address indexed implementation)",
      "event WatchtowerUpdated(address _oldWatchtower, address _newWatchtower)",
      "event Withdrawn(address indexed _withdrawer, address indexed _asset, uint256 _amount)",
      "function DOMAIN() view returns (uint32)",
      "function EVERCLEAR() view returns (uint32)",
      "function FILL_INTENT_FOR_SOLVER_TYPEHASH() view returns (bytes32)",
      "function PERMIT2() view returns (address)",
      "function PROCESS_FILL_QUEUE_VIA_RELAYER_TYPEHASH() view returns (bytes32)",
      "function PROCESS_INTENT_QUEUE_VIA_RELAYER_TYPEHASH() view returns (bytes32)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function balances(bytes32 _asset, bytes32 _user) view returns (uint256 _amount)",
      "function callExecutor() view returns (address)",
      "function deposit(address _asset, uint256 _amount)",
      "function executeIntentCalldata(tuple(bytes32 initiator, bytes32 receiver, bytes32 inputAsset, bytes32 outputAsset, uint24 maxFee, uint32 origin, uint64 nonce, uint48 timestamp, uint48 ttl, uint256 amount, uint32[] destinations, bytes data) _intent)",
      "function fillIntent(tuple(bytes32 initiator, bytes32 receiver, bytes32 inputAsset, bytes32 outputAsset, uint24 maxFee, uint32 origin, uint64 nonce, uint48 timestamp, uint48 ttl, uint256 amount, uint32[] destinations, bytes data) _intent, uint24 _fee) returns (tuple(bytes32 intentId, bytes32 solver, bytes32 initiator, uint24 fee, uint48 executionTimestamp) _fillMessage)",
      "function fillIntentForSolver(address _solver, tuple(bytes32 initiator, bytes32 receiver, bytes32 inputAsset, bytes32 outputAsset, uint24 maxFee, uint32 origin, uint64 nonce, uint48 timestamp, uint48 ttl, uint256 amount, uint32[] destinations, bytes data) _intent, uint256 _nonce, uint24 _fee, bytes _signature) returns (tuple(bytes32 intentId, bytes32 solver, bytes32 initiator, uint24 fee, uint48 executionTimestamp) _fillMessage)",
      "function fillQueue() view returns (uint256 first, uint256 last)",
      "function gateway() view returns (address)",
      "function initialize(tuple(address gateway, address callExecutor, address messageReceiver, address lighthouse, address watchtower, uint32 hubDomain, address owner) _init)",
      "function intentQueue() view returns (uint256 first, uint256 last)",
      "function lighthouse() view returns (address)",
      "function messageGasLimit() view returns (uint256)",
      "function messageReceiver() view returns (address)",
      "function modules(uint8 _strategy) view returns (address _module)",
      "function newIntent(uint32[] _destinations, address _receiver, address _inputAsset, address _outputAsset, uint256 _amount, uint24 _maxFee, uint48 _ttl, bytes _data) returns (bytes32 _intentId, tuple(bytes32 initiator, bytes32 receiver, bytes32 inputAsset, bytes32 outputAsset, uint24 maxFee, uint32 origin, uint64 nonce, uint48 timestamp, uint48 ttl, uint256 amount, uint32[] destinations, bytes data) _intent)",
      "function newIntent(uint32[] _destinations, address _receiver, address _inputAsset, address _outputAsset, uint256 _amount, uint24 _maxFee, uint48 _ttl, bytes _data, tuple(uint256 nonce, uint256 deadline, bytes signature) _permit2Params) returns (bytes32 _intentId, tuple(bytes32 initiator, bytes32 receiver, bytes32 inputAsset, bytes32 outputAsset, uint24 maxFee, uint32 origin, uint64 nonce, uint48 timestamp, uint48 ttl, uint256 amount, uint32[] destinations, bytes data) _intent)",
      "function nonce() view returns (uint64)",
      "function nonces(address owner) view returns (uint256)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function processFillQueue(uint32 _amount) payable",
      "function processFillQueueViaRelayer(uint32 _domain, uint32 _amount, address _relayer, uint256 _ttl, uint256 _nonce, uint256 _bufferDBPS, bytes _signature)",
      "function processIntentQueue(tuple(bytes32 initiator, bytes32 receiver, bytes32 inputAsset, bytes32 outputAsset, uint24 maxFee, uint32 origin, uint64 nonce, uint48 timestamp, uint48 ttl, uint256 amount, uint32[] destinations, bytes data)[] _intents) payable",
      "function processIntentQueueViaRelayer(uint32 _domain, tuple(bytes32 initiator, bytes32 receiver, bytes32 inputAsset, bytes32 outputAsset, uint24 maxFee, uint32 origin, uint64 nonce, uint48 timestamp, uint48 ttl, uint256 amount, uint32[] destinations, bytes data)[] _intents, address _relayer, uint256 _ttl, uint256 _nonce, uint256 _bufferDBPS, bytes _signature)",
      "function proxiableUUID() view returns (bytes32)",
      "function receiveMessage(bytes)",
      "function renounceOwnership()",
      "function setModuleForStrategy(uint8 _strategy, address _module)",
      "function setStrategyForAsset(address _asset, uint8 _strategy)",
      "function status(bytes32 _intentId) view returns (uint8 status)",
      "function strategies(address _asset) view returns (uint8 _strategy)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function updateGateway(address _newGateway)",
      "function updateMessageGasLimit(uint256 _newGasLimit)",
      "function updateMessageReceiver(address _newMessageReceiver)",
      "function updateSecurityModule(address _newSecurityModule)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function watchtower() view returns (address)",
      "function withdraw(address _asset, uint256 _amount)"
    ],
    "0xa02a88F0bbD47045001Bd460Ad186C30F9a974d6": [
      "constructor(address _singleton)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0xfb4566a0ca21d11e353b80e51d6cef5b58511545c90ae731afcbad17b5781c1b"
  }
}
