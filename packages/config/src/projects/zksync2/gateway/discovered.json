{
  "name": "zksync2",
  "chain": "gateway",
  "timestamp": 1754118945,
  "configHash": "0xc98676f1b0cce81b2f52fa6e595546a58f08d1912868ea53427d0b02a475338f",
  "sharedModules": ["shared-zk-stack", "gateway"],
  "entries": [
    {
      "name": "Bridgehub",
      "address": "gateway:0x0000000000000000000000000000000000010002",
      "type": "Contract",
      "template": "shared-zk-stack/BridgeHub",
      "sourceHashes": [
        "0x85a0337c9b2db31a1b7e623ed99509d22ead32ce301ae832247ee1240f43eccb"
      ],
      "proxyType": "immutable",
      "description": "The main registry (hub) for all the contracts in the ZK stack cluster and central entrypoint for bridge transactions. Stores important mappings like from chainId to diamond address, from chainId to parent CTM, from chainId to base token etc. A clone of Bridgehub is also deployed on each L2 chain, but this clone is only used on settlement layers.",
      "sinceTimestamp": 1750953821,
      "sinceBlock": 85,
      "values": {
        "$immutable": true,
        "admin": "gateway:0x0000000000000000000000000000000000000000",
        "assetRouter": "gateway:0x0000000000000000000000000000000000010003",
        "chainsCreated": [],
        "getAllZKChainChainIDs": [324],
        "getAllZKChains": [
          "gateway:0xCE7CBd23193d029410b40e0fD8a79a5121f9250C"
        ],
        "L1_CHAIN_ID": 1,
        "l1CtmDeployer": "gateway:0x6078F6B379f103de1Aa912dc46bb8Df0c8809860",
        "MAX_NUMBER_OF_ZK_CHAINS": 100,
        "messageRoot": "gateway:0x0000000000000000000000000000000000010005",
        "migrationPaused": false,
        "migrations": [],
        "owner": "gateway:0xF41EcA3047B37dc7d88849de4a4dc07937Ad6bc4",
        "paused": false,
        "pendingOwner": "gateway:0x0000000000000000000000000000000000000000",
        "settlementLayers": {},
        "sharedBridge": "gateway:0x0000000000000000000000000000000000010003"
      },
      "fieldMeta": {
        "migrationPaused": {
          "severity": "HIGH",
          "description": "If false, chains can migrate to whitelisted settlement layers."
        },
        "chainsCreated": {
          "description": "All new chains created go thorugh the central bridgehub and are stored here with their respective STMs."
        },
        "settlementLayers": {
          "severity": "HIGH",
          "description": "New settlement layers and their whitelist status. Chains can be migrated to whitelisted settlement layers by their chain admin."
        },
        "migrations": {
          "severity": "HIGH",
          "description": "zk chain migrations that were started"
        }
      },
      "implementationNames": {
        "gateway:0x0000000000000000000000000000000000010002": "Bridgehub"
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "L2AssetRouter",
      "address": "gateway:0x0000000000000000000000000000000000010003",
      "type": "Contract",
      "template": "shared-zk-stack/L2AssetRouter",
      "sourceHashes": [
        "0xf172d1bbdbfdc509412a55599c12b6560db7d034e85921bf659002546beba891"
      ],
      "proxyType": "immutable",
      "description": "Bridge routing contract that exists once on every zk stack chain and keeps mappings of assets to their escrows (asset handlers) and deployment trackers.",
      "sinceTimestamp": 1750953821,
      "sinceBlock": 85,
      "values": {
        "$immutable": true,
        "BASE_TOKEN_ASSET_ID": "0x83e2fbc0a739b3c765de4c2b4bf8072a71ea8fbb09c8cf579c71425d8bc8804a",
        "BRIDGE_HUB": "gateway:0x0000000000000000000000000000000000010002",
        "ERA_CHAIN_ID": 324,
        "L1_ASSET_ROUTER": "gateway:0x8829AD80E425C646DAB305381ff105169FeEcE56",
        "L1_CHAIN_ID": 1,
        "l1Bridge": "gateway:0x8829AD80E425C646DAB305381ff105169FeEcE56",
        "L2_LEGACY_SHARED_BRIDGE": "gateway:0x0000000000000000000000000000000000000000",
        "owner": "gateway:0xF41EcA3047B37dc7d88849de4a4dc07937Ad6bc4",
        "paused": false,
        "pendingOwner": "gateway:0x0000000000000000000000000000000000000000"
      },
      "fieldMeta": { "paused": { "severity": "HIGH" } },
      "implementationNames": {
        "gateway:0x0000000000000000000000000000000000010003": "L2AssetRouter"
      }
    },
    {
      "name": "MessageRoot",
      "address": "gateway:0x0000000000000000000000000000000000010005",
      "type": "Contract",
      "template": "shared-zk-stack/MessageRoot",
      "sourceHashes": [
        "0x9fe7372b4f7ead74634ad13ce858c9a6242995f2a40facaa212e524a02b506a2"
      ],
      "proxyType": "immutable",
      "description": "Aggregates remote bridge message roots from all ZK stack chains. To be used with the Gateway when deployed.",
      "ignoreInWatchMode": ["sharedTree"],
      "sinceTimestamp": 1750953821,
      "sinceBlock": 85,
      "values": {
        "$immutable": true,
        "BRIDGE_HUB": "gateway:0x0000000000000000000000000000000000010002",
        "chainCount": 2,
        "getAggregatedRoot": "0x65bc8ad8b41eccd5def25a01cde8e9bb99f19519cdcb3872f67da5cfba44b87b",
        "getChainRoot": [],
        "sharedTree": { "_height": 1, "_leafNumber": 2 }
      },
      "implementationNames": {
        "gateway:0x0000000000000000000000000000000000010005": "MessageRoot"
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "ProxyAdmin",
      "address": "gateway:0x0A8a176B6F5962122C6E8F8815278f873D74021f",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x04a556db1ea1a651e1174247090ad4c7105b455feab1a9672d5c4cd113b9ff0b"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "gateway:0x796b7bDba8B8027Aa79BE96a0D5368FB86df560a",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1747351626,
      "sinceBlock": 45,
      "values": {
        "$immutable": true,
        "owner": "gateway:0xF41EcA3047B37dc7d88849de4a4dc07937Ad6bc4"
      },
      "implementationNames": {
        "gateway:0x0A8a176B6F5962122C6E8F8815278f873D74021f": "ProxyAdmin"
      }
    },
    {
      "address": "gateway:0x30066439887C0a509Cb38E45c9262E6924a29BbD",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "gateway:0xcA027Fa98cdce4515E76ECf8dfb4189B16eE72A2",
          "description": "commit and revert batches but not prove nor execute them.",
          "role": ".validatorsPartialVTL"
        },
        {
          "permission": "validateZkStack",
          "from": "gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa",
          "role": ".validatorsVTL"
        }
      ]
    },
    {
      "name": "L1VerifierFflonk",
      "address": "gateway:0x3CFB3a80Af42cBE4d82C14301690A62D53e870a5",
      "type": "Contract",
      "template": "shared-zk-stack/L1VerifierFflonk",
      "sourceHashes": [
        "0xbdb60551820d621f81243ecaf8ec52d6fb937ab843ab674a3529b2bdefae7154"
      ],
      "proxyType": "immutable",
      "description": "Verifies a zk-SNARK proof using an implementation of the fflonk proof system.",
      "sinceTimestamp": 1753990140,
      "sinceBlock": 15963,
      "values": {
        "$immutable": true,
        "verificationKeyHash": "0x6f36a08c517b060fa97308cdb3e23b04842ff839d451a753ec8fae1a5408304a"
      },
      "fieldMeta": {
        "verificationKeyHash": {
          "severity": "HIGH",
          "description": "keccak256 hash of the verification keys."
        }
      },
      "implementationNames": {
        "gateway:0x3CFB3a80Af42cBE4d82C14301690A62D53e870a5": "L1VerifierFflonk"
      }
    },
    {
      "name": "EraChainAdminProxy_l2Alias",
      "address": "gateway:0x3E04Bd6a9056b39999f3883955E183F655346174",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C",
          "description": "revert batches for any connected chain (ZK cluster Admin role).",
          "role": ".admin"
        },
        {
          "permission": "interact",
          "from": "gateway:0xCE7CBd23193d029410b40e0fD8a79a5121f9250C",
          "description": "manage fees, apply predefined upgrades, manage censorship through a TransactionFilterer, set DA mode, migrate the chain to whitelisted settlement layers (Chain Admin role).",
          "role": ".getAdmin"
        }
      ]
    },
    {
      "name": "L1GenesisUpgrade",
      "address": "gateway:0x540E6ED9FC06dFCbf0a38Dcc7Ed7Ea3F56C551de",
      "type": "Contract",
      "template": "shared-zk-stack/L1GenesisUpgrade",
      "sourceHashes": [
        "0xc75c7be9ac7357405aa86630f69e44a24c26a15d36cb11f64fa4e3c1f9de257e"
      ],
      "proxyType": "immutable",
      "description": "Diamond implementation code to initialize new ZK chains. Used to set their chainID.",
      "ignoreInWatchMode": ["sharedTree"],
      "sinceTimestamp": 1747358439,
      "sinceBlock": 65,
      "values": { "$immutable": true },
      "implementationNames": {
        "gateway:0x540E6ED9FC06dFCbf0a38Dcc7Ed7Ea3F56C551de": "L1GenesisUpgrade"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "name": "RelayedSLDAValidator",
      "address": "gateway:0x595b8C88B9e5f3a4c596C3e81BE6e11D53Bb9200",
      "type": "Contract",
      "template": "shared-zk-stack/RelayedSLDAValidator",
      "sourceHashes": [
        "0x39b38b5615e88c3e2cc2796cf5573be22264743fa599dc310b74825df9e9911b"
      ],
      "proxyType": "immutable",
      "description": "Plugs into the DAValidator interface of zk stack Diamond contracts. This 'DA validator' simply checks correct formatting and encoding of data and relays it via the L1Messenger to L1 to guarantee data availability.",
      "sinceTimestamp": 1747351626,
      "sinceBlock": 45,
      "values": { "$immutable": true },
      "implementationNames": {
        "gateway:0x595b8C88B9e5f3a4c596C3e81BE6e11D53Bb9200": "RelayedSLDAValidator"
      }
    },
    {
      "address": "gateway:0x6078F6B379f103de1Aa912dc46bb8Df0c8809860",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ServerNotifier",
      "address": "gateway:0x796b7bDba8B8027Aa79BE96a0D5368FB86df560a",
      "type": "Contract",
      "template": "shared-zk-stack/ServerNotifier",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0xaa0cbb8dc783cc875167e361de770c7453390b2d56efade2162e85c063f9b386"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "A simple contract that can be called by the ChainAdmin to emit notifications about chain migrations.",
      "sinceTimestamp": 1747351626,
      "sinceBlock": 45,
      "values": {
        "$admin": "gateway:0x0A8a176B6F5962122C6E8F8815278f873D74021f",
        "$implementation": "gateway:0x0241a7F1a1f07644A51394415bD1f44f6FDF26ab",
        "$pastUpgrades": [
          [
            "2025-05-15T23:27:06.000Z",
            "0xd46f8487d3ebc65b02afca382b2a5eca7749ab1b07a69dc4340dafdb9a1998fc",
            ["gateway:0x0241a7F1a1f07644A51394415bD1f44f6FDF26ab"]
          ]
        ],
        "$upgradeCount": 1,
        "chainTypeManager": "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C",
        "owner": "gateway:0xF41EcA3047B37dc7d88849de4a4dc07937Ad6bc4",
        "pendingOwner": "gateway:0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "gateway:0x796b7bDba8B8027Aa79BE96a0D5368FB86df560a": "TransparentUpgradeableProxy",
        "gateway:0x0241a7F1a1f07644A51394415bD1f44f6FDF26ab": "ServerNotifier"
      }
    },
    {
      "address": "gateway:0x8829AD80E425C646DAB305381ff105169FeEcE56",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ChainTypeManager",
      "address": "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C",
      "type": "Contract",
      "template": "shared-zk-stack/ChainTypeManager",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x5462a6c55c6e9f2d98c21f2588b2b9a4de1dc41ba0c10906f8965e21849a3a52"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Defines L2 diamond contract versions, creation and upgrade data and the proof system for all ZK stack chains connected to it. ZK chains are children of this central contract and can only upgrade to versions that were previously registered here. The current protocol version is 0,28,1.",
      "sinceTimestamp": 1747351626,
      "sinceBlock": 45,
      "values": {
        "$admin": "gateway:0x0A8a176B6F5962122C6E8F8815278f873D74021f",
        "$implementation": "gateway:0x6655933e34d8FD8f6d2CC7d5175bFC06112B7474",
        "$pastUpgrades": [
          [
            "2025-05-15T23:27:06.000Z",
            "0xd46f8487d3ebc65b02afca382b2a5eca7749ab1b07a69dc4340dafdb9a1998fc",
            ["gateway:0x6Fa31D4E9dF95a17d929137cdac6C910872947b5"]
          ],
          [
            "2025-06-19T14:27:03.000Z",
            "0x2b898a3dae8760103a739b4aac3f107ca253253ccc3ab7be9e1ba7dda13b9fc9",
            ["gateway:0x6655933e34d8FD8f6d2CC7d5175bFC06112B7474"]
          ]
        ],
        "$upgradeCount": 2,
        "admin": "gateway:0x3E04Bd6a9056b39999f3883955E183F655346174",
        "BRIDGE_HUB": "gateway:0x0000000000000000000000000000000000010002",
        "getSemverProtocolVersion": [0, 28, 1],
        "initialCutHash": "0xd3891c3aee249d0a86bba7198ac35ffc02c7e54e8db6fdd3bd5ae43ea8cd5d06",
        "initialForceDeploymentHash": "0xed1057fbf858575d7348c4f2c82dd034534c62d97d0ac1d46f98ed197403f3d9",
        "l1GenesisUpgrade": "gateway:0x540E6ED9FC06dFCbf0a38Dcc7Ed7Ea3F56C551de",
        "owner": "gateway:0xF41EcA3047B37dc7d88849de4a4dc07937Ad6bc4",
        "pendingOwner": "gateway:0x0000000000000000000000000000000000000000",
        "protocolVersion": 120259084289,
        "serverNotifierAddress": "gateway:0x796b7bDba8B8027Aa79BE96a0D5368FB86df560a",
        "storedBatchZero": "0x9629612e3685846dc5056347758c0f8286fc877383c762aa17b1411758a582d8",
        "validatorTimelock": "gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa"
      },
      "implementationNames": {
        "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C": "TransparentUpgradeableProxy",
        "gateway:0x6655933e34d8FD8f6d2CC7d5175bFC06112B7474": "ChainTypeManager"
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "L1VerifierPlonk",
      "address": "gateway:0x92A9Fd0E84354213D9c3d33128eDd6Ea55ee0717",
      "type": "Contract",
      "template": "shared-zk-stack/L1VerifierPlonk",
      "sourceHashes": [
        "0xeef6daabc71bf67f02da2eebec0939402f99a165f2c3f40225b4b804021b4962"
      ],
      "proxyType": "immutable",
      "description": "Verifies a zk-SNARK proof using an implementation of the PlonK proof system.",
      "sinceTimestamp": 1753990142,
      "sinceBlock": 15964,
      "values": {
        "$immutable": true,
        "verificationKeyHash": "0x64b347c642ea60114c98b3976124ea8a7e0bb778bd7e479aedc02f994486c8a1"
      },
      "fieldMeta": {
        "verificationKeyHash": {
          "severity": "HIGH",
          "description": "keccak256 hash of the verification keys."
        }
      },
      "implementationNames": {
        "gateway:0x92A9Fd0E84354213D9c3d33128eDd6Ea55ee0717": "L1VerifierPlonk"
      }
    },
    {
      "name": "ZKsyncValidatorTimelock",
      "address": "gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa",
      "type": "Contract",
      "template": "shared-zk-stack/ValidatorTimelock",
      "sourceHashes": [
        "0x2221508945ceea880f5d52488af1a7466fcdfadeaf3644dc5e3b82671b7947a3"
      ],
      "proxyType": "immutable",
      "description": "Intermediary contract between the *Validators* and the central diamond contract that delays block execution (ie withdrawals and other L2 --> L1 messages) by 0s.",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "gateway:0xCE7CBd23193d029410b40e0fD8a79a5121f9250C",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock.",
          "role": ".validators"
        }
      ],
      "sinceTimestamp": 1747351626,
      "sinceBlock": 45,
      "values": {
        "$immutable": true,
        "chainTypeManager": "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C",
        "executionDelay": 0,
        "executionDelay_fmt": "0s",
        "getName": "ValidatorTimelock",
        "owner": "gateway:0xF41EcA3047B37dc7d88849de4a4dc07937Ad6bc4",
        "pendingOwner": "gateway:0x0000000000000000000000000000000000000000",
        "revertedBlocks": [],
        "validatorsVTL": [
          "gateway:0xcA027Fa98cdce4515E76ECf8dfb4189B16eE72A2",
          "gateway:0x30066439887C0a509Cb38E45c9262E6924a29BbD"
        ]
      },
      "implementationNames": {
        "gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa": "ValidatorTimelock"
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "PartialValidatorTimelock",
      "address": "gateway:0xcA027Fa98cdce4515E76ECf8dfb4189B16eE72A2",
      "type": "Contract",
      "template": "shared-zk-stack/PartialValidatorTimelock",
      "sourceHashes": [
        "0xd9d75803ad400a022f418f774013872f60ee705b53725d4076fb34c53ea273d6"
      ],
      "proxyType": "immutable",
      "description": "If registrered as a validator in the gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa, forwards calls to it, but restricted to `commit`- and `revertBatchesSharedBridge()`.",
      "receivedPermissions": [
        {
          "permission": "validateZkStack",
          "from": "gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa",
          "role": ".validatorsVTL"
        }
      ],
      "sinceTimestamp": 1753907986,
      "sinceBlock": 15325,
      "values": {
        "$immutable": true,
        "chainTypeManager": "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C",
        "getName": "ValidatorTimelock",
        "owner": "gateway:0x3E04Bd6a9056b39999f3883955E183F655346174",
        "pendingOwner": "gateway:0x0000000000000000000000000000000000000000",
        "validatorsPartialVTL": [
          "gateway:0x30066439887C0a509Cb38E45c9262E6924a29BbD"
        ],
        "validatorTimelock": "gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa"
      },
      "implementationNames": {
        "gateway:0xcA027Fa98cdce4515E76ECf8dfb4189B16eE72A2": "PartialValidatorTimelock"
      }
    },
    {
      "name": "DiamondProxy",
      "address": "gateway:0xCE7CBd23193d029410b40e0fD8a79a5121f9250C",
      "type": "Contract",
      "template": "shared-zk-stack/Diamond",
      "sourceHashes": [
        "0xc18e3ec7d4fda7be44236a2bff585089b85466b00d09a1c3a2529c604f99143b",
        "0xbc2380479529743c27e6ab96cdf08210319fadcbca0856cf50c6b1b54bf8437f"
      ],
      "proxyType": "EIP2535 diamond proxy",
      "description": "The main contract defining the Layer 2. Operator actions like commiting blocks, providing ZK proofs and executing batches ultimately target this contract which then processes transactions. During batch execution it processes L1 --> L2 and L2 --> L1 transactions. isPermanentRollup was set to true in this contract which prevents changing the DA mode to Validium in the future.",
      "ignoreInWatchMode": [
        "getTotalPriorityTxs",
        "getTotalBlocksCommitted",
        "getTotalBlocksExecuted",
        "getTotalBlocksVerified",
        "getTotalBatchesExecuted",
        "getTotalBatchesVerified",
        "getTotalBatchesCommitted",
        "getPriorityTreeStartIndex",
        "getPriorityTreeRoot",
        "getPriorityQueueSize",
        "getFirstUnprocessedPriorityTx",
        "baseTokenGasPriceMultiplierDenominator",
        "baseTokenGasPriceMultiplierNominator"
      ],
      "sinceTimestamp": 1753710939,
      "sinceBlock": 13759,
      "values": {
        "$immutable": false,
        "$implementation": [
          "gateway:0xa365401Dc76d077c702965ECc39CfbfE436A6167",
          "gateway:0xEE7f08400FDa3A46D32Ae78eBEC2D3841CeC53b7",
          "gateway:0x7f124F72fB4f978798ffdedAD3332b0ce750F399",
          "gateway:0x4659780be9E0863eFB2BAE5DD77E31e371f2d3C8"
        ],
        "$pastUpgrades": [
          [
            "2025-07-28T13:55:39.000Z",
            "0xbe495dd2ec45bc9c95dcb3c1134d3893af4ef2791df7a5f768f00d72c397ce4d",
            [
              "gateway:0xa365401Dc76d077c702965ECc39CfbfE436A6167",
              "gateway:0xEE7f08400FDa3A46D32Ae78eBEC2D3841CeC53b7",
              "gateway:0x7f124F72fB4f978798ffdedAD3332b0ce750F399",
              "gateway:0x4659780be9E0863eFB2BAE5DD77E31e371f2d3C8"
            ]
          ],
          [
            "2025-08-01T23:57:13.000Z",
            "0x317f561c5cc2944ec00a48e69c538f79bb6f519f8cbdea88005f484cfdd8daa0",
            [
              "gateway:0xa365401Dc76d077c702965ECc39CfbfE436A6167",
              "gateway:0xEE7f08400FDa3A46D32Ae78eBEC2D3841CeC53b7",
              "gateway:0x7f124F72fB4f978798ffdedAD3332b0ce750F399",
              "gateway:0x4659780be9E0863eFB2BAE5DD77E31e371f2d3C8"
            ]
          ]
        ],
        "$upgradeCount": 2,
        "baseTokenGasPriceMultiplierDenominator": 0,
        "baseTokenGasPriceMultiplierNominator": 0,
        "facetAddresses": [
          "gateway:0xa365401Dc76d077c702965ECc39CfbfE436A6167",
          "gateway:0xEE7f08400FDa3A46D32Ae78eBEC2D3841CeC53b7",
          "gateway:0x7f124F72fB4f978798ffdedAD3332b0ce750F399",
          "gateway:0x4659780be9E0863eFB2BAE5DD77E31e371f2d3C8"
        ],
        "facets": {
          "gateway:0xa365401Dc76d077c702965ECc39CfbfE436A6167": [
            "acceptAdmin()",
            "unfreezeDiamond()",
            "upgradeChainFromVersion(uint256,((address,uint8,bool,bytes4[])[],address,bytes))",
            "setPorterAvailability(bool)",
            "setTransactionFilterer(address)",
            "setTokenMultiplier(uint128,uint128)",
            "freezeDiamond()",
            "genesisUpgrade(address,address,bytes,bytes[])",
            "forwardedBridgeMint(bytes,bool)",
            "prepareChainCommitment()",
            "setValidator(address,bool)",
            "setPendingAdmin(address)",
            "allowEvmEmulation()",
            "setDAValidatorPair(address,address)",
            "forwardedBridgeBurn(address,address,bytes)",
            "changeFeeParams((uint8,uint32,uint32,uint32,uint32,uint64))",
            "makePermanentRollup()",
            "executeUpgrade(((address,uint8,bool,bytes4[])[],address,bytes))",
            "forwardedBridgeRecoverFailedTransfer(uint256,bytes32,address,bytes)",
            "setPriorityTxMaxGasLimit(uint256)",
            "setPubdataPricingMode(uint8)"
          ],
          "gateway:0xEE7f08400FDa3A46D32Ae78eBEC2D3841CeC53b7": [
            "getPubdataPricingMode()",
            "getPriorityTxMaxGasLimit()",
            "getTotalBlocksCommitted()",
            "getVerifierParams()",
            "baseTokenGasPriceMultiplierDenominator()",
            "getTransactionFilterer()",
            "isDiamondStorageFrozen()",
            "getProtocolVersion()",
            "getChainId()",
            "getBridgehub()",
            "getTotalBlocksExecuted()",
            "getPriorityTreeRoot()",
            "getVerifier()",
            "facetAddresses()",
            "getDAValidatorPair()",
            "getPriorityQueueSize()",
            "getSettlementLayer()",
            "getAdmin()",
            "storedBlockHash(uint256)",
            "getFirstUnprocessedPriorityTx()",
            "facets()",
            "getL2SystemContractsUpgradeTxHash()",
            "isPriorityQueueActive()",
            "getChainTypeManager()",
            "getBaseTokenAssetId()",
            "getBaseToken()",
            "l2LogsRootHash(uint256)",
            "getL2SystemContractsUpgradeBlockNumber()",
            "getTotalPriorityTxs()",
            "facetFunctionSelectors(address)",
            "getTotalBlocksVerified()",
            "storedBatchHash(uint256)",
            "getTotalBatchesExecuted()",
            "isEthWithdrawalFinalized(uint256,uint256)",
            "isFacetFreezable(address)",
            "facetAddress(bytes4)",
            "getPendingAdmin()",
            "getL2BootloaderBytecodeHash()",
            "getTotalBatchesCommitted()",
            "getL2EvmEmulatorBytecodeHash()",
            "getL2SystemContractsUpgradeBatchNumber()",
            "isFunctionFreezable(bytes4)",
            "baseTokenGasPriceMultiplierNominator()",
            "getTotalBatchesVerified()",
            "getPriorityTreeStartIndex()",
            "getSemverProtocolVersion()",
            "isValidator(address)",
            "getL2DefaultAccountBytecodeHash()"
          ],
          "gateway:0x7f124F72fB4f978798ffdedAD3332b0ce750F399": [
            "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)",
            "bridgehubRequestL2Transaction((address,address,uint256,uint256,bytes,uint256,uint256,bytes[],address))",
            "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)",
            "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])",
            "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])",
            "proveL2LeafInclusion(uint256,uint256,bytes32,bytes32[])",
            "l2TransactionBaseCost(uint256,uint256,uint256)",
            "requestL2TransactionToGatewayMailbox(uint256,bytes32,uint64)",
            "requestL2ServiceTransaction(address,bytes)",
            "bridgehubRequestL2TransactionOnGateway(bytes32,uint64)",
            "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"
          ],
          "gateway:0x4659780be9E0863eFB2BAE5DD77E31e371f2d3C8": [
            "revertBatchesSharedBridge(uint256,uint256)",
            "proveBatchesSharedBridge(uint256,uint256,uint256,bytes)",
            "commitBatchesSharedBridge(uint256,uint256,uint256,bytes)",
            "executeBatchesSharedBridge(uint256,uint256,uint256,bytes)"
          ]
        },
        "getAdmin": "gateway:0x3E04Bd6a9056b39999f3883955E183F655346174",
        "getBaseTokenAssetId": "0x05e1c3ae4b9732444ae25217ac7666e46fa365fee1768de00c9fcb65532b7609",
        "getBridgehub": "gateway:0x0000000000000000000000000000000000010002",
        "getChainId": 324,
        "getChainTypeManager": "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C",
        "getDAValidatorPair": [
          "gateway:0x595b8C88B9e5f3a4c596C3e81BE6e11D53Bb9200",
          "gateway:0xfa96A3Da88f201433911bEFf3Ecc434CB1222731"
        ],
        "getFirstUnprocessedPriorityTx": 3278900,
        "getL2BootloaderBytecodeHash": "0x0100085f9382a7928dd83bfc529121827b5f29f18b9aa10d18aa68e1be7ddc35",
        "getL2DefaultAccountBytecodeHash": "0x010005f72e443c94460f4583fb38ef5d0c5cd9897021c41df840f91465c0392e",
        "getL2EvmEmulatorBytecodeHash": "0x01000d83e0329d9144ad041430fafcbc2b388e5434db8cb8a96e80157738a1da",
        "getL2SystemContractsUpgradeBatchNumber": 0,
        "getL2SystemContractsUpgradeBlockNumber": 0,
        "getL2SystemContractsUpgradeTxHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getPendingAdmin": "gateway:0x0000000000000000000000000000000000000000",
        "getPriorityQueueSize": 5,
        "getPriorityTreeRoot": "0xf1949726e45a3360863a7c217ccdd334dee24eee21b249d29f9a373a3a50ccf0",
        "getPriorityTreeStartIndex": 3270719,
        "getPriorityTxMaxGasLimit": 72000000,
        "getProtocolVersion": 120259084289,
        "getPubdataPricingMode": 0,
        "getSemverProtocolVersion": [0, 28, 1],
        "getSettlementLayer": "gateway:0x0000000000000000000000000000000000000000",
        "getTotalBatchesCommitted": 501387,
        "getTotalBatchesExecuted": 501385,
        "getTotalBatchesVerified": 501386,
        "getTotalBlocksCommitted": 501387,
        "getTotalBlocksExecuted": 501385,
        "getTotalBlocksVerified": 501386,
        "getTotalPriorityTxs": 3278905,
        "getTransactionFilterer": "gateway:0x0000000000000000000000000000000000000000",
        "getVerifier": "gateway:0xE841B98E524D827bBA664d19CB736C817707E730",
        "getVerifierParams": {
          "recursionNodeLevelVkHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "recursionLeafLevelVkHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "recursionCircuitsSetVksHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
        },
        "isDiamondStorageFrozen": false,
        "isPermanentRollup": 1,
        "isPermanentRollupString": ". isPermanentRollup was set to true in this contract which prevents changing the DA mode to Validium in the future.",
        "isPriorityQueueActive": false,
        "validators": ["gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa"]
      },
      "fieldMeta": {
        "getAdmin": { "severity": "HIGH" },
        "getTransactionFilterer": {
          "severity": "HIGH",
          "description": "This contract must expose the ITransactionFilterer interface (see Mailbox facet) and is used for censoring transactions pushed from L1 to L2."
        },
        "IsPorterAvailableStatus": {
          "severity": "HIGH",
          "description": "zkPorter is a volition-like contruction and changes the zk proof input requirements."
        },
        "isPermanentRollup": {
          "severity": "HIGH",
          "description": "true means that the DA mode cannot be changed to Validium in the future. compliant DAValidator pairs for the permanent rollup mode are defined/enforced by the RollupDAManager contract."
        },
        "getDAValidatorPair": { "severity": "HIGH" },
        "getPendingAdmin": { "severity": "HIGH" },
        "getPubdataPricingMode": {
          "severity": "HIGH",
          "description": "0 - Rollup, 1 - Validium"
        },
        "getProtocolVersion": {
          "severity": "HIGH",
          "description": "Protocol version, increments with each protocol upgrade."
        },
        "getVerifierParams": {
          "severity": "LOW",
          "description": "Verifier parameters used for proving batches."
        }
      },
      "implementationNames": {
        "gateway:0xCE7CBd23193d029410b40e0fD8a79a5121f9250C": "DiamondProxy",
        "gateway:0xa365401Dc76d077c702965ECc39CfbfE436A6167": "AdminFacet",
        "gateway:0xEE7f08400FDa3A46D32Ae78eBEC2D3841CeC53b7": "GettersFacet",
        "gateway:0x7f124F72fB4f978798ffdedAD3332b0ce750F399": "MailboxFacet",
        "gateway:0x4659780be9E0863eFB2BAE5DD77E31e371f2d3C8": "ExecutorFacet"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "0": ".",
            "1": ". isPermanentRollup was set to true in this contract which prevents changing the DA mode to Validium in the future."
          }
        }
      ],
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "DualVerifier",
      "address": "gateway:0xE841B98E524D827bBA664d19CB736C817707E730",
      "type": "Contract",
      "template": "shared-zk-stack/DualVerifier",
      "sourceHashes": [
        "0x3053378d5ee24f71669b27b5b3cd0d74206379e6b43a9af084c2eb886712773e"
      ],
      "proxyType": "immutable",
      "description": "A router contract for verifiers. Routes verification requests to gateway:0x3CFB3a80Af42cBE4d82C14301690A62D53e870a5 or gateway:0x92A9Fd0E84354213D9c3d33128eDd6Ea55ee0717 depending on the supplied proof type.",
      "sinceTimestamp": 1754054182,
      "sinceBlock": 16487,
      "values": {
        "$immutable": true,
        "FFLONK_VERIFIER": "gateway:0x3CFB3a80Af42cBE4d82C14301690A62D53e870a5",
        "PLONK_VERIFIER": "gateway:0x92A9Fd0E84354213D9c3d33128eDd6Ea55ee0717",
        "verificationKeyHash": "0x64b347c642ea60114c98b3976124ea8a7e0bb778bd7e479aedc02f994486c8a1"
      },
      "fieldMeta": {
        "verificationKeyHash": {
          "description": "Verification key hash for the PLONK verifier ONLY (backwards compatibility)."
        }
      },
      "implementationNames": {
        "gateway:0xE841B98E524D827bBA664d19CB736C817707E730": "DualVerifier"
      }
    },
    {
      "name": "ProtocolUpgradeHandler_l2Alias",
      "address": "gateway:0xF41EcA3047B37dc7d88849de4a4dc07937Ad6bc4",
      "type": "EOA",
      "proxyType": "EOA",
      "controlsMajorityOfUpgradePermissions": true,
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "gateway:0x0000000000000000000000000000000000010002",
          "description": "set critical system contract addresses, register settlement layers, pause and unpause and manage zk chain registration.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C",
          "description": "manage the shared ValidatorTimelock contract address and the admin role, register and execute upgrades (and set their deadlines), freeze, revert batches and set permissioned validators and fee params for all connected chains.",
          "role": ".owner"
        },
        {
          "permission": "upgrade",
          "from": "gateway:0x796b7bDba8B8027Aa79BE96a0D5368FB86df560a",
          "role": "admin",
          "via": [
            { "address": "gateway:0x0A8a176B6F5962122C6E8F8815278f873D74021f" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C",
          "role": "admin",
          "via": [
            { "address": "gateway:0x0A8a176B6F5962122C6E8F8815278f873D74021f" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "gateway:0x0A8a176B6F5962122C6E8F8815278f873D74021f",
          "role": ".owner"
        }
      ]
    },
    {
      "address": "gateway:0xfa96A3Da88f201433911bEFf3Ecc434CB1222731",
      "type": "EOA",
      "proxyType": "EOA"
    }
  ],
  "abis": {
    "gateway:0x0000000000000000000000000000000000010002": [
      "constructor(uint256 _l1ChainId, address _owner, uint256 _maxNumberOfZKChains)",
      "error AlreadyCurrentSL(uint256 blockChainId)",
      "error AssetHandlerNotRegistered(bytes32 assetId)",
      "error AssetIdAlreadyRegistered()",
      "error AssetIdNotSupported(bytes32 assetId)",
      "error BridgeHubAlreadyRegistered()",
      "error CTMAlreadyRegistered()",
      "error CTMNotRegistered()",
      "error ChainIdAlreadyExists()",
      "error ChainIdAlreadyPresent()",
      "error ChainIdCantBeCurrentChain()",
      "error ChainIdMismatch()",
      "error ChainIdNotRegistered(uint256 chainId)",
      "error ChainIdTooBig()",
      "error ChainNotLegacy()",
      "error ChainNotPresentInCTM()",
      "error EmptyAssetId()",
      "error HyperchainNotRegistered()",
      "error IncorrectBridgeHubAddress(address bridgehub)",
      "error IncorrectChainAssetId(bytes32 assetId, bytes32 assetIdFromChainId)",
      "error IncorrectSender(address prevMsgSender, address chainAdmin)",
      "error MigrationPaused()",
      "error MsgValueMismatch(uint256 expectedMsgValue, uint256 providedMsgValue)",
      "error NoCTMForAssetId(bytes32 assetId)",
      "error NonEmptyMsgValue()",
      "error NotAssetRouter(address msgSender, address sharedBridge)",
      "error NotCurrentSL(uint256 settlementLayerChainId, uint256 blockChainId)",
      "error NotInGatewayMode()",
      "error NotInitializedReentrancyGuard()",
      "error NotL1(uint256 l1ChainId, uint256 blockChainId)",
      "error NotRelayedSender(address msgSender, address settlementLayerRelaySender)",
      "error Reentrancy()",
      "error SLNotWhitelisted()",
      "error SecondBridgeAddressTooLow(address secondBridgeAddress, address minSecondBridgeAddress)",
      "error SettlementLayersMustSettleOnL1()",
      "error SharedBridgeNotSet()",
      "error SlotOccupied()",
      "error Unauthorized(address caller)",
      "error WrongMagicValue(uint256 expectedMagicValue, uint256 providedMagicValue)",
      "error ZKChainLimitReached()",
      "error ZeroAddress()",
      "error ZeroChainId()",
      "event AssetRegistered(bytes32 indexed assetInfo, address indexed _assetAddress, bytes32 indexed additionalData, address sender)",
      "event BaseTokenAssetIdRegistered(bytes32 indexed assetId)",
      "event BridgeBurn(uint256 indexed chainId, bytes32 indexed assetId, address indexed sender, address receiver, uint256 amount)",
      "event BridgeMint(uint256 indexed chainId, bytes32 indexed assetId, address receiver, uint256 amount)",
      "event ChainTypeManagerAdded(address indexed chainTypeManager)",
      "event ChainTypeManagerRemoved(address indexed chainTypeManager)",
      "event Initialized(uint8 version)",
      "event MigrationFinalized(uint256 indexed chainId, bytes32 indexed assetId, address indexed zkChain)",
      "event MigrationStarted(uint256 indexed chainId, bytes32 indexed assetId, uint256 indexed settlementLayerChainId)",
      "event NewAdmin(address indexed oldAdmin, address indexed newAdmin)",
      "event NewChain(uint256 indexed chainId, address chainTypeManager, address indexed chainGovernance)",
      "event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event SettlementLayerRegistered(uint256 indexed chainId, bool indexed isWhitelisted)",
      "event Unpaused(address account)",
      "function L1_CHAIN_ID() view returns (uint256)",
      "function MAX_NUMBER_OF_ZK_CHAINS() view returns (uint256)",
      "function __DEPRECATED_baseToken(uint256 chainId) view returns (address)",
      "function __DEPRECATED_tokenIsRegistered(address baseToken) view returns (bool)",
      "function acceptAdmin()",
      "function acceptOwnership()",
      "function addChainTypeManager(address _chainTypeManager)",
      "function addTokenAssetId(bytes32 _baseTokenAssetId)",
      "function admin() view returns (address)",
      "function assetIdIsRegistered(bytes32 baseTokenAssetId) view returns (bool)",
      "function assetRouter() view returns (address)",
      "function baseToken(uint256 _chainId) view returns (address)",
      "function baseTokenAssetId(uint256 chainId) view returns (bytes32)",
      "function bridgeBurn(uint256 _settlementChainId, uint256 _l2MsgValue, bytes32 _assetId, address _originalCaller, bytes _data) payable returns (bytes bridgehubMintData)",
      "function bridgeMint(uint256, bytes32 _assetId, bytes _bridgehubMintData) payable",
      "function bridgeRecoverFailedTransfer(uint256, bytes32 _assetId, address _depositSender, bytes _data) payable",
      "function chainTypeManager(uint256 chainId) view returns (address)",
      "function chainTypeManagerIsRegistered(address chainTypeManager) view returns (bool)",
      "function createNewChain(uint256 _chainId, address _chainTypeManager, bytes32 _baseTokenAssetId, uint256 _salt, address _admin, bytes _initData, bytes[] _factoryDeps) returns (uint256)",
      "function ctmAssetIdFromAddress(address ctmAddress) view returns (bytes32 ctmAssetId)",
      "function ctmAssetIdFromChainId(uint256 _chainId) view returns (bytes32)",
      "function ctmAssetIdToAddress(bytes32 ctmAssetId) view returns (address ctmAddress)",
      "function forwardTransactionOnGateway(uint256 _chainId, bytes32 _canonicalTxHash, uint64 _expirationTimestamp)",
      "function getAllZKChainChainIDs() view returns (uint256[])",
      "function getAllZKChains() view returns (address[] chainAddresses)",
      "function getHyperchain(uint256 _chainId) view returns (address)",
      "function getZKChain(uint256 _chainId) view returns (address chainAddress)",
      "function initialize(address _owner)",
      "function initializeV2()",
      "function l1CtmDeployer() view returns (address)",
      "function l2TransactionBaseCost(uint256 _chainId, uint256 _gasPrice, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit) view returns (uint256)",
      "function messageRoot() view returns (address)",
      "function migrationPaused() view returns (bool)",
      "function owner() view returns (address)",
      "function pause()",
      "function pauseMigration()",
      "function paused() view returns (bool)",
      "function pendingOwner() view returns (address)",
      "function proveL1ToL2TransactionStatus(uint256 _chainId, bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof, uint8 _status) view returns (bool)",
      "function proveL2LogInclusion(uint256 _chainId, uint256 _batchNumber, uint256 _index, tuple(uint8 l2ShardId, bool isService, uint16 txNumberInBatch, address sender, bytes32 key, bytes32 value) _log, bytes32[] _proof) view returns (bool)",
      "function proveL2MessageInclusion(uint256 _chainId, uint256 _batchNumber, uint256 _index, tuple(uint16 txNumberInBatch, address sender, bytes data) _message, bytes32[] _proof) view returns (bool)",
      "function registerAlreadyDeployedZKChain(uint256 _chainId, address _zkChain)",
      "function registerLegacyChain(uint256 _chainId)",
      "function registerSettlementLayer(uint256 _newSettlementLayerChainId, bool _isWhitelisted)",
      "function removeChainTypeManager(address _chainTypeManager)",
      "function renounceOwnership()",
      "function requestL2TransactionDirect(tuple(uint256 chainId, uint256 mintValue, address l2Contract, uint256 l2Value, bytes l2Calldata, uint256 l2GasLimit, uint256 l2GasPerPubdataByteLimit, bytes[] factoryDeps, address refundRecipient) _request) payable returns (bytes32 canonicalTxHash)",
      "function requestL2TransactionTwoBridges(tuple(uint256 chainId, uint256 mintValue, uint256 l2Value, uint256 l2GasLimit, uint256 l2GasPerPubdataByteLimit, address refundRecipient, address secondBridgeAddress, uint256 secondBridgeValue, bytes secondBridgeCalldata) _request) payable returns (bytes32 canonicalTxHash)",
      "function setAddresses(address _assetRouter, address _l1CtmDeployer, address _messageRoot)",
      "function setCTMAssetAddress(bytes32 _additionalData, address _assetAddress)",
      "function setPendingAdmin(address _newPendingAdmin)",
      "function settlementLayer(uint256 chainId) view returns (uint256 activeSettlementLayerChainId)",
      "function sharedBridge() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function unpauseMigration()",
      "function whitelistedSettlementLayers(uint256 chainId) view returns (bool isWhitelistedSettlementLayer)"
    ],
    "gateway:0x0000000000000000000000000000000000010003": [
      "constructor(uint256 _l1ChainId, uint256 _eraChainId, address _l1AssetRouter, address _legacySharedBridge, bytes32 _baseTokenAssetId, address _aliasedOwner)",
      "error AmountMustBeGreaterThanZero()",
      "error AssetIdNotSupported(bytes32 assetId)",
      "error EmptyAddress()",
      "error InvalidCaller(address)",
      "error InvalidNTVBurnData()",
      "error NotInitializedReentrancyGuard()",
      "error Reentrancy()",
      "error SlotOccupied()",
      "error TokenNotLegacy()",
      "error Unauthorized(address caller)",
      "event AssetDeploymentTrackerRegistered(bytes32 indexed assetId, bytes32 indexed additionalData, address assetDeploymentTracker)",
      "event AssetHandlerRegistered(bytes32 indexed assetId, address indexed _assetHandlerAddress)",
      "event BridgehubDepositBaseTokenInitiated(uint256 indexed chainId, address indexed from, bytes32 assetId, uint256 amount)",
      "event BridgehubDepositInitiated(uint256 indexed chainId, bytes32 indexed txDataHash, address indexed from, bytes32 assetId, bytes bridgeMintCalldata)",
      "event BridgehubWithdrawalInitiated(uint256 chainId, address indexed sender, bytes32 indexed assetId, bytes32 assetDataHash)",
      "event DepositFinalizedAssetRouter(uint256 indexed chainId, bytes32 indexed assetId, bytes assetData)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "event WithdrawalInitiatedAssetRouter(uint256 chainId, address indexed l2Sender, bytes32 indexed assetId, bytes assetData)",
      "function BASE_TOKEN_ASSET_ID() view returns (bytes32)",
      "function BRIDGE_HUB() view returns (address)",
      "function ERA_CHAIN_ID() view returns (uint256)",
      "function L1_ASSET_ROUTER() view returns (address)",
      "function L1_CHAIN_ID() view returns (uint256)",
      "function L2_LEGACY_SHARED_BRIDGE() view returns (address)",
      "function acceptOwnership()",
      "function assetDeploymentTracker(bytes32 assetId) view returns (address assetDeploymentTracker)",
      "function assetHandlerAddress(bytes32 assetId) view returns (address assetHandlerAddress)",
      "function finalizeDeposit(uint256, bytes32 _assetId, bytes _transferData) payable",
      "function finalizeDeposit(address _l1Sender, address _l2Receiver, address _l1Token, uint256 _amount, bytes _data) payable",
      "function finalizeDepositLegacyBridge(address _l1Sender, address _l2Receiver, address _l1Token, uint256 _amount, bytes _data)",
      "function l1Bridge() view returns (address)",
      "function l1TokenAddress(address _l2Token) view returns (address)",
      "function l2TokenAddress(address _l1Token) view returns (address)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setAssetHandlerAddress(uint256 _originChainId, bytes32 _assetId, address _assetHandlerAddress)",
      "function setAssetHandlerAddressThisChain(bytes32 _assetRegistrationData, address _assetHandlerAddress)",
      "function setLegacyTokenAssetHandler(bytes32 _assetId)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function withdraw(bytes32 _assetId, bytes _assetData) returns (bytes32)",
      "function withdraw(address _l1Receiver, address _l2Token, uint256 _amount)",
      "function withdrawLegacyBridge(address _l1Receiver, address _l2Token, uint256 _amount, address _sender)"
    ],
    "gateway:0x0000000000000000000000000000000000010005": [
      "constructor(address _bridgehub)",
      "error ChainExists()",
      "error MerkleWrongIndex(uint256 index, uint256 maxNodeNumber)",
      "error MerkleWrongLength(uint256 newLeavesLength, uint256 leafNumber)",
      "error MessageRootNotRegistered()",
      "error OnlyBridgehub(address msgSender, address bridgehub)",
      "error OnlyChain(address msgSender, address zkChainAddress)",
      "event AddedChain(uint256 indexed chainId, uint256 indexed chainIndex)",
      "event AppendedChainBatchRoot(uint256 indexed chainId, uint256 indexed batchNumber, bytes32 batchRoot)",
      "event Initialized(uint8 version)",
      "event Preimage(bytes32 one, bytes32 two)",
      "function BRIDGE_HUB() view returns (address)",
      "function addChainBatchRoot(uint256 _chainId, uint256 _batchNumber, bytes32 _chainBatchRoot)",
      "function addNewChain(uint256 _chainId)",
      "function chainCount() view returns (uint256)",
      "function chainIndex(uint256 chainId) view returns (uint256 chainIndex)",
      "function chainIndexToId(uint256 chainIndex) view returns (uint256 chainId)",
      "function chainRegistered(uint256 _chainId) view returns (bool)",
      "function getAggregatedRoot() view returns (bytes32)",
      "function getChainRoot(uint256 _chainId) view returns (bytes32)",
      "function initialize()",
      "function sharedTree() view returns (uint256 _height, uint256 _leafNumber)",
      "function updateFullTree()"
    ],
    "gateway:0x0241a7F1a1f07644A51394415bD1f44f6FDF26ab": [
      "constructor()",
      "error SlotOccupied()",
      "error Unauthorized(address caller)",
      "error ZeroAddress()",
      "event Initialized(uint8 version)",
      "event MigrateFromGateway(uint256 indexed chainId)",
      "event MigrateToGateway(uint256 indexed chainId)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function acceptOwnership()",
      "function chainTypeManager() view returns (address)",
      "function initialize(address _initialOwner)",
      "function migrateFromGateway(uint256 _chainId)",
      "function migrateToGateway(uint256 _chainId)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function renounceOwnership()",
      "function setChainTypeManager(address _chainTypeManager)",
      "function transferOwnership(address newOwner)"
    ],
    "gateway:0x0A8a176B6F5962122C6E8F8815278f873D74021f": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "gateway:0x3CFB3a80Af42cBE4d82C14301690A62D53e870a5": [
      "function verificationKeyHash() pure returns (bytes32 vkHash)",
      "function verify(uint256[], uint256[]) view returns (bool)"
    ],
    "gateway:0x4659780be9E0863eFB2BAE5DD77E31e371f2d3C8": [
      "constructor(uint256 _l1ChainId)",
      "error BatchHashMismatch(bytes32 expected, bytes32 actual)",
      "error BatchNumberMismatch(uint256 expectedBatchNumber, uint256 providedBatchNumber)",
      "error CanOnlyProcessOneBatch()",
      "error CantExecuteUnprovenBatches()",
      "error CantRevertExecutedBatch()",
      "error EmptyData()",
      "error HashMismatch(bytes32 expected, bytes32 actual)",
      "error IncorrectBatchBounds(uint256 processFromExpected, uint256 processToExpected, uint256 processFromProvided, uint256 processToProvided)",
      "error InvalidBatchesDataLength(uint256 batchesDataLength, uint256 priorityOpsDataLength)",
      "error InvalidLogSender(address sender, uint256 logKey)",
      "error InvalidNumberOfBlobs(uint256 expected, uint256 numCommitments, uint256 numHashes)",
      "error InvalidProof()",
      "error InvalidProtocolVersion()",
      "error InvalidSystemLogsLength()",
      "error L2TimestampTooBig()",
      "error LogAlreadyProcessed(uint8)",
      "error MerkleIndexOrHeightMismatch()",
      "error MerkleNothingToProve()",
      "error MerklePathEmpty()",
      "error MerklePathLengthMismatch(uint256 pathLength, uint256 expectedLength)",
      "error MerklePathOutOfBounds()",
      "error MismatchL2DAValidator()",
      "error MismatchNumberOfLayer1Txs(uint256 numberOfLayer1Txs, uint256 expectedLength)",
      "error MissingSystemLogs(uint256 expected, uint256 actual)",
      "error NonIncreasingTimestamp()",
      "error NonSequentialBatch()",
      "error NotHistoricalRoot()",
      "error NotInitializedReentrancyGuard()",
      "error NotSettlementLayer()",
      "error PriorityOperationsRollingHashMismatch()",
      "error PriorityOpsDataItemHashesLengthIsNotZero()",
      "error PriorityOpsDataLeftPathLengthIsNotZero()",
      "error PriorityOpsDataRightPathLengthIsNotZero()",
      "error QueueIsEmpty()",
      "error Reentrancy()",
      "error RevertedBatchNotAfterNewLastBatch()",
      "error SystemLogsSizeTooBig()",
      "error TimeNotReached(uint256 expectedTimestamp, uint256 actualTimestamp)",
      "error TimestampError()",
      "error TxHashMismatch()",
      "error Unauthorized(address caller)",
      "error UnexpectedSystemLog(uint256 logKey)",
      "error UnsupportedCommitBatchEncoding(uint8 version)",
      "error UnsupportedExecuteBatchEncoding(uint8 version)",
      "error UnsupportedProofBatchEncoding(uint8 version)",
      "error UpgradeBatchNumberIsNotZero()",
      "error ValueMismatch(uint256 expected, uint256 actual)",
      "error VerifiedBatchesExceedsCommittedBatches()",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "function commitBatchesSharedBridge(uint256, uint256 _processFrom, uint256 _processTo, bytes _commitData)",
      "function executeBatchesSharedBridge(uint256, uint256 _processFrom, uint256 _processTo, bytes _executeData)",
      "function getName() view returns (string)",
      "function proveBatchesSharedBridge(uint256, uint256 _processBatchFrom, uint256 _processBatchTo, bytes _proofData)",
      "function revertBatchesSharedBridge(uint256, uint256 _newLastBatch)"
    ],
    "gateway:0x540E6ED9FC06dFCbf0a38Dcc7Ed7Ea3F56C551de": [
      "error AddressHasNoCode(address)",
      "error DelegateCallFailed(bytes returnData)",
      "error FacetExists(bytes4 selector, address)",
      "error GenesisUpgradeExpectedOnSettlementLayer()",
      "error InvalidTxType(uint256 txType)",
      "error InvalidUpgradeTxn(uint8)",
      "error L2UpgradeNonceNotEqualToNewProtocolVersion(uint256 nonce, uint256 protocolVersion)",
      "error LengthIsNotDivisibleBy32(uint256 length)",
      "error MalformedBytecode(uint8)",
      "error NoFunctionsForDiamondCut()",
      "error NonEmptyCalldata()",
      "error PatchCantSetUpgradeTxn()",
      "error PatchUpgradeCantSetBootloader()",
      "error PatchUpgradeCantSetDefaultAccount()",
      "error PatchUpgradeCantSetEvmEmulator()",
      "error PreviousUpgradeBatchNotCleared()",
      "error PreviousUpgradeNotFinalized(bytes32 txHash)",
      "error ProtocolMajorVersionNotZero()",
      "error ProtocolVersionDeltaTooLarge(uint256 _proposedDelta, uint256 _maxDelta)",
      "error ProtocolVersionTooSmall()",
      "error PubdataGreaterThanLimit(uint256 limit, uint256 length)",
      "error RemoveFunctionFacetAddressNotZero(address facet)",
      "error RemoveFunctionFacetAddressZero()",
      "error ReplaceFunctionFacetAddressZero()",
      "error SelectorsMustAllHaveSameFreezability()",
      "error TimeNotReached(uint256 expectedTimestamp, uint256 actualTimestamp)",
      "error TooManyFactoryDeps()",
      "error TooMuchGas()",
      "error TxnBodyGasLimitNotEnoughGas()",
      "error UndefinedDiamondCutAction()",
      "error ValidateTxnNotEnoughGas()",
      "event DiamondCut(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata)",
      "event GenesisUpgrade(address indexed _zkChain, tuple(uint256 txType, uint256 from, uint256 to, uint256 gasLimit, uint256 gasPerPubdataByteLimit, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas, uint256 paymaster, uint256 nonce, uint256 value, uint256[4] reserved, bytes data, bytes signature, uint256[] factoryDeps, bytes paymasterInput, bytes reservedDynamic) _l2Transaction, uint256 indexed _protocolVersion, bytes[] _factoryDeps)",
      "event NewL2BootloaderBytecodeHash(bytes32 indexed previousBytecodeHash, bytes32 indexed newBytecodeHash)",
      "event NewL2DefaultAccountBytecodeHash(bytes32 indexed previousBytecodeHash, bytes32 indexed newBytecodeHash)",
      "event NewL2EvmEmulatorBytecodeHash(bytes32 indexed previousBytecodeHash, bytes32 indexed newBytecodeHash)",
      "event NewProtocolVersion(uint256 indexed previousProtocolVersion, uint256 indexed newProtocolVersion)",
      "event NewVerifier(address indexed oldVerifier, address indexed newVerifier)",
      "event NewVerifierParams(tuple(bytes32 recursionNodeLevelVkHash, bytes32 recursionLeafLevelVkHash, bytes32 recursionCircuitsSetVksHash) oldVerifierParams, tuple(bytes32 recursionNodeLevelVkHash, bytes32 recursionLeafLevelVkHash, bytes32 recursionCircuitsSetVksHash) newVerifierParams)",
      "event UpgradeComplete(uint256 indexed newProtocolVersion, bytes32 indexed l2UpgradeTxHash, tuple(tuple(uint256 txType, uint256 from, uint256 to, uint256 gasLimit, uint256 gasPerPubdataByteLimit, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas, uint256 paymaster, uint256 nonce, uint256 value, uint256[4] reserved, bytes data, bytes signature, uint256[] factoryDeps, bytes paymasterInput, bytes reservedDynamic) l2ProtocolUpgradeTx, bytes32 bootloaderHash, bytes32 defaultAccountHash, bytes32 evmEmulatorHash, address verifier, tuple(bytes32 recursionNodeLevelVkHash, bytes32 recursionLeafLevelVkHash, bytes32 recursionCircuitsSetVksHash) verifierParams, bytes l1ContractsUpgradeCalldata, bytes postUpgradeCalldata, uint256 upgradeTimestamp, uint256 newProtocolVersion) upgrade)",
      "function genesisUpgrade(address _l1GenesisUpgrade, uint256 _chainId, uint256 _protocolVersion, address _l1CtmDeployerAddress, bytes _fixedForceDeploymentsData, bytes[] _factoryDeps) returns (bytes32)",
      "function upgrade(tuple(tuple(uint256 txType, uint256 from, uint256 to, uint256 gasLimit, uint256 gasPerPubdataByteLimit, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas, uint256 paymaster, uint256 nonce, uint256 value, uint256[4] reserved, bytes data, bytes signature, uint256[] factoryDeps, bytes paymasterInput, bytes reservedDynamic) l2ProtocolUpgradeTx, bytes32 bootloaderHash, bytes32 defaultAccountHash, bytes32 evmEmulatorHash, address verifier, tuple(bytes32 recursionNodeLevelVkHash, bytes32 recursionLeafLevelVkHash, bytes32 recursionCircuitsSetVksHash) verifierParams, bytes l1ContractsUpgradeCalldata, bytes postUpgradeCalldata, uint256 upgradeTimestamp, uint256 newProtocolVersion) _proposedUpgrade) returns (bytes32)"
    ],
    "gateway:0x595b8C88B9e5f3a4c596C3e81BE6e11D53Bb9200": [
      "error BlobHashBlobCommitmentMismatchValue()",
      "error InvalidL2DAOutputHash(bytes32 l2DAValidatorOutputHash)",
      "error InvalidNumberOfBlobs(uint256 blobsProvided, uint256 maxBlobsSupported)",
      "error InvalidPubdataHash(bytes32 fullPubdataHash, bytes32 providedPubdataHash)",
      "error InvalidPubdataSource(uint8 pubdataSource)",
      "error L1DAValidatorInvalidSender(address msgSender)",
      "error OperatorDAInputTooSmall(uint256 operatorDAInputLength, uint256 minAllowedLength)",
      "error PubdataInputTooSmall(uint256 pubdataInputLength, uint256 totalBlobsCommitmentSize)",
      "error PubdataLengthTooBig(uint256 pubdataLength, uint256 totalBlobSizeBytes)",
      "function checkDA(uint256 _chainId, uint256 _batchNumber, bytes32 _l2DAValidatorOutputHash, bytes _operatorDAInput, uint256 _maxBlobsSupported) returns (tuple(bytes32 stateDiffHash, bytes32[] blobsLinearHashes, bytes32[] blobsOpeningCommitments) output)"
    ],
    "gateway:0x6655933e34d8FD8f6d2CC7d5175bFC06112B7474": [
      "constructor(address _bridgehub)",
      "error AdminZero()",
      "error ChainAlreadyLive()",
      "error GenesisBatchCommitmentZero()",
      "error GenesisBatchHashZero()",
      "error GenesisIndexStorageZero()",
      "error GenesisUpgradeZero()",
      "error HashMismatch(bytes32 expected, bytes32 actual)",
      "error InitialForceDeploymentMismatch(bytes32 forceDeploymentHash, bytes32 initialForceDeploymentHash)",
      "error MigrationsNotPaused()",
      "error OutdatedProtocolVersion(uint256 protocolVersion, uint256 currentProtocolVersion)",
      "error SlotOccupied()",
      "error Unauthorized(address caller)",
      "error ZeroAddress()",
      "event GenesisUpgrade(address indexed _zkChain, tuple(uint256 txType, uint256 from, uint256 to, uint256 gasLimit, uint256 gasPerPubdataByteLimit, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas, uint256 paymaster, uint256 nonce, uint256 value, uint256[4] reserved, bytes data, bytes signature, uint256[] factoryDeps, bytes paymasterInput, bytes reservedDynamic) _l2Transaction, uint256 indexed _protocolVersion)",
      "event Initialized(uint8 version)",
      "event NewAdmin(address indexed oldAdmin, address indexed newAdmin)",
      "event NewChainCreationParams(address genesisUpgrade, bytes32 genesisBatchHash, uint64 genesisIndexRepeatedStorageChanges, bytes32 genesisBatchCommitment, bytes32 newInitialCutHash, bytes32 forceDeploymentHash)",
      "event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin)",
      "event NewProtocolVersion(uint256 indexed oldProtocolVersion, uint256 indexed newProtocolVersion)",
      "event NewServerNotifier(address indexed oldServerNotifier, address indexed newServerNotifier)",
      "event NewUpgradeCutData(uint256 indexed protocolVersion, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) diamondCutData)",
      "event NewUpgradeCutHash(uint256 indexed protocolVersion, bytes32 indexed upgradeCutHash)",
      "event NewValidatorTimelock(address indexed oldValidatorTimelock, address indexed newValidatorTimelock)",
      "event NewZKChain(uint256 indexed _chainId, address indexed _zkChainContract)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event UpdateProtocolVersionDeadline(uint256 indexed protocolVersion, uint256 deadline)",
      "function BRIDGE_HUB() view returns (address)",
      "function acceptAdmin()",
      "function acceptOwnership()",
      "function admin() view returns (address)",
      "function changeFeeParams(uint256 _chainId, tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) _newFeeParams)",
      "function createNewChain(uint256 _chainId, bytes32 _baseTokenAssetId, address _admin, bytes _initData, bytes[] _factoryDeps) returns (address zkChainAddress)",
      "function executeUpgrade(uint256 _chainId, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)",
      "function forwardedBridgeBurn(uint256 _chainId, bytes _data) view returns (bytes ctmForwardedBridgeMintData)",
      "function forwardedBridgeMint(uint256 _chainId, bytes _ctmData) returns (address chainAddress)",
      "function forwardedBridgeRecoverFailedTransfer(uint256, bytes32, address, bytes)",
      "function freezeChain(uint256 _chainId)",
      "function getChainAdmin(uint256 _chainId) view returns (address)",
      "function getHyperchain(uint256 _chainId) view returns (address)",
      "function getProtocolVersion(uint256 _chainId) view returns (uint256)",
      "function getSemverProtocolVersion() view returns (uint32, uint32, uint32)",
      "function getZKChain(uint256 _chainId) view returns (address)",
      "function getZKChainLegacy(uint256 _chainId) view returns (address chainAddress)",
      "function initialCutHash() view returns (bytes32)",
      "function initialForceDeploymentHash() view returns (bytes32)",
      "function initialize(tuple(address owner, address validatorTimelock, tuple(address genesisUpgrade, bytes32 genesisBatchHash, uint64 genesisIndexRepeatedStorageChanges, bytes32 genesisBatchCommitment, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) diamondCut, bytes forceDeploymentsData) chainCreationParams, uint256 protocolVersion, address serverNotifier) _initializeData)",
      "function l1GenesisUpgrade() view returns (address)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function protocolVersion() view returns (uint256)",
      "function protocolVersionDeadline(uint256 _protocolVersion) view returns (uint256)",
      "function protocolVersionIsActive(uint256 _protocolVersion) view returns (bool)",
      "function renounceOwnership()",
      "function revertBatches(uint256 _chainId, uint256 _newLastBatch)",
      "function serverNotifierAddress() view returns (address)",
      "function setChainCreationParams(tuple(address genesisUpgrade, bytes32 genesisBatchHash, uint64 genesisIndexRepeatedStorageChanges, bytes32 genesisBatchCommitment, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) diamondCut, bytes forceDeploymentsData) _chainCreationParams)",
      "function setNewVersionUpgrade(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _cutData, uint256 _oldProtocolVersion, uint256 _oldProtocolVersionDeadline, uint256 _newProtocolVersion)",
      "function setPendingAdmin(address _newPendingAdmin)",
      "function setPorterAvailability(uint256 _chainId, bool _zkPorterIsAvailable)",
      "function setPriorityTxMaxGasLimit(uint256 _chainId, uint256 _maxGasLimit)",
      "function setProtocolVersionDeadline(uint256 _protocolVersion, uint256 _timestamp)",
      "function setServerNotifier(address _serverNotifier)",
      "function setTokenMultiplier(uint256 _chainId, uint128 _nominator, uint128 _denominator)",
      "function setUpgradeDiamondCut(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _cutData, uint256 _oldProtocolVersion)",
      "function setValidator(uint256 _chainId, address _validator, bool _active)",
      "function setValidatorTimelock(address _validatorTimelock)",
      "function storedBatchZero() view returns (bytes32)",
      "function transferOwnership(address newOwner)",
      "function unfreezeChain(uint256 _chainId)",
      "function upgradeChainFromVersion(uint256 _chainId, uint256 _oldProtocolVersion, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)",
      "function upgradeCutHash(uint256 protocolVersion) view returns (bytes32 cutHash)",
      "function validatorTimelock() view returns (address)"
    ],
    "gateway:0x796b7bDba8B8027Aa79BE96a0D5368FB86df560a": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "gateway:0x7f124F72fB4f978798ffdedAD3332b0ce750F399": [
      "constructor(uint256 _eraChainId, uint256 _l1ChainId)",
      "error BaseTokenGasPriceDenominatorNotSet()",
      "error BatchNotExecuted(uint256 batchNumber)",
      "error GasPerPubdataMismatch()",
      "error HashedLogIsDefault()",
      "error InvalidProofLengthForFinalNode()",
      "error LengthIsNotDivisibleBy32(uint256 length)",
      "error LocalRootIsZero()",
      "error LocalRootMustBeZero()",
      "error MalformedBytecode(uint8)",
      "error MerkleIndexOutOfBounds()",
      "error MerklePathEmpty()",
      "error MerklePathOutOfBounds()",
      "error MsgValueTooLow(uint256 required, uint256 provided)",
      "error NotHyperchain()",
      "error NotInitializedReentrancyGuard()",
      "error NotL1(uint256 blockChainId)",
      "error NotSettlementLayer()",
      "error OnlyEraSupported()",
      "error PubdataGreaterThanLimit(uint256 limit, uint256 length)",
      "error Reentrancy()",
      "error TooManyFactoryDeps()",
      "error TooMuchGas()",
      "error TransactionNotAllowed()",
      "error TxnBodyGasLimitNotEnoughGas()",
      "error Unauthorized(address caller)",
      "error UnsupportedProofMetadataVersion(uint256 metadataVersion)",
      "error ValidateTxnNotEnoughGas()",
      "event NewPriorityRequest(uint256 txId, bytes32 txHash, uint64 expirationTimestamp, tuple(uint256 txType, uint256 from, uint256 to, uint256 gasLimit, uint256 gasPerPubdataByteLimit, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas, uint256 paymaster, uint256 nonce, uint256 value, uint256[4] reserved, bytes data, bytes signature, uint256[] factoryDeps, bytes paymasterInput, bytes reservedDynamic) transaction, bytes[] factoryDeps)",
      "event NewRelayedPriorityTransaction(uint256 txId, bytes32 txHash, uint64 expirationTimestamp)",
      "function bridgehubRequestL2Transaction(tuple(address sender, address contractL2, uint256 mintValue, uint256 l2Value, bytes l2Calldata, uint256 l2GasLimit, uint256 l2GasPerPubdataByteLimit, bytes[] factoryDeps, address refundRecipient) _request) returns (bytes32 canonicalTxHash)",
      "function bridgehubRequestL2TransactionOnGateway(bytes32 _canonicalTxHash, uint64 _expirationTimestamp)",
      "function finalizeEthWithdrawal(uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes _message, bytes32[] _merkleProof)",
      "function getName() view returns (string)",
      "function l2TransactionBaseCost(uint256 _gasPrice, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit) view returns (uint256)",
      "function proveL1ToL2TransactionStatus(bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof, uint8 _status) view returns (bool)",
      "function proveL2LeafInclusion(uint256 _batchNumber, uint256 _leafProofMask, bytes32 _leaf, bytes32[] _proof) view returns (bool)",
      "function proveL2LogInclusion(uint256 _batchNumber, uint256 _index, tuple(uint8 l2ShardId, bool isService, uint16 txNumberInBatch, address sender, bytes32 key, bytes32 value) _log, bytes32[] _proof) view returns (bool)",
      "function proveL2MessageInclusion(uint256 _batchNumber, uint256 _index, tuple(uint16 txNumberInBatch, address sender, bytes data) _message, bytes32[] _proof) view returns (bool)",
      "function requestL2ServiceTransaction(address _contractL2, bytes _l2Calldata) returns (bytes32 canonicalTxHash)",
      "function requestL2Transaction(address _contractL2, uint256 _l2Value, bytes _calldata, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit, bytes[] _factoryDeps, address _refundRecipient) payable returns (bytes32 canonicalTxHash)",
      "function requestL2TransactionToGatewayMailbox(uint256 _chainId, bytes32 _canonicalTxHash, uint64 _expirationTimestamp) returns (bytes32 canonicalTxHash)"
    ],
    "gateway:0x912B84EEEEBeca74d307b9a2b09c68332aa5426C": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "gateway:0x92A9Fd0E84354213D9c3d33128eDd6Ea55ee0717": [
      "function verificationKeyHash() pure returns (bytes32 vkHash)",
      "function verify(uint256[], uint256[]) view returns (bool)"
    ],
    "gateway:0xa365401Dc76d077c702965ECc39CfbfE436A6167": [
      "constructor(uint256 _l1ChainId, address _rollupDAManager)",
      "error AddressHasNoCode(address)",
      "error AlreadyMigrated()",
      "error AlreadyPermanentRollup()",
      "error ContractNotDeployed()",
      "error DelegateCallFailed(bytes returnData)",
      "error DenominatorIsZero()",
      "error DiamondAlreadyFrozen()",
      "error DiamondNotFrozen()",
      "error ExecutedIsNotConsistentWithVerified(uint256 batchesExecuted, uint256 batchesVerified)",
      "error FacetExists(bytes4 selector, address)",
      "error HashMismatch(bytes32 expected, bytes32 actual)",
      "error InvalidCommitment()",
      "error InvalidDAForPermanentRollup()",
      "error InvalidNextLeafIndex(uint256 treeNextLeafIndex, uint256 commitmentNextLeafIndex)",
      "error InvalidNumberOfBatchHashes(uint256 batchHashesLength, uint256 expected)",
      "error InvalidPubdataPricingMode()",
      "error InvalidStartIndex(uint256 treeStartIndex, uint256 commitmentStartIndex)",
      "error InvalidUnprocessedIndex(uint256 treeUnprocessedIndex, uint256 commitmentUnprocessedIndex)",
      "error L1DAValidatorAddressIsZero()",
      "error L2DAValidatorAddressIsZero()",
      "error NoFunctionsForDiamondCut()",
      "error NonEmptyCalldata()",
      "error NotAllBatchesExecuted()",
      "error NotChainAdmin(address prevMsgSender, address admin)",
      "error NotHistoricalRoot()",
      "error NotL1(uint256 blockChainId)",
      "error NotMigrated()",
      "error NotSettlementLayer()",
      "error OutdatedProtocolVersion(uint256 protocolVersion, uint256 currentProtocolVersion)",
      "error PriorityQueueNotReady()",
      "error PriorityTxPubdataExceedsMaxPubDataPerBatch()",
      "error ProtocolIdMismatch(uint256 expectedProtocolVersion, uint256 providedProtocolId)",
      "error ProtocolIdNotGreater()",
      "error ProtocolVersionNotUpToDate(uint256 currentProtocolVersion, uint256 protocolVersion)",
      "error RemoveFunctionFacetAddressNotZero(address facet)",
      "error RemoveFunctionFacetAddressZero()",
      "error ReplaceFunctionFacetAddressZero()",
      "error SelectorsMustAllHaveSameFreezability()",
      "error TooMuchGas()",
      "error Unauthorized(address caller)",
      "error UndefinedDiamondCutAction()",
      "error VerifiedIsNotConsistentWithCommitted(uint256 batchesVerified, uint256 batchesCommitted)",
      "event BridgeMint(address indexed _account, uint256 _amount)",
      "event DiamondCut(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata)",
      "event EnableEvmEmulator()",
      "event ExecuteUpgrade(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) diamondCut)",
      "event Freeze()",
      "event IsPorterAvailableStatusUpdate(bool isPorterAvailable)",
      "event MigrationComplete()",
      "event NewAdmin(address indexed oldAdmin, address indexed newAdmin)",
      "event NewBaseTokenMultiplier(uint128 oldNominator, uint128 oldDenominator, uint128 newNominator, uint128 newDenominator)",
      "event NewFeeParams(tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) oldFeeParams, tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) newFeeParams)",
      "event NewL1DAValidator(address indexed oldL1DAValidator, address indexed newL1DAValidator)",
      "event NewL2DAValidator(address indexed oldL2DAValidator, address indexed newL2DAValidator)",
      "event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin)",
      "event NewPriorityTxMaxGasLimit(uint256 oldPriorityTxMaxGasLimit, uint256 newPriorityTxMaxGasLimit)",
      "event NewTransactionFilterer(address oldTransactionFilterer, address newTransactionFilterer)",
      "event PubdataPricingModeUpdate(uint8 validiumMode)",
      "event Unfreeze()",
      "event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive)",
      "function acceptAdmin()",
      "function allowEvmEmulation() returns (bytes32 canonicalTxHash)",
      "function changeFeeParams(tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) _newFeeParams)",
      "function executeUpgrade(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)",
      "function forwardedBridgeBurn(address _settlementLayer, address _originalCaller, bytes _data) payable returns (bytes chainBridgeMintData)",
      "function forwardedBridgeMint(bytes _data, bool _contractAlreadyDeployed) payable",
      "function forwardedBridgeRecoverFailedTransfer(uint256, bytes32, address, bytes _chainData) payable",
      "function freezeDiamond()",
      "function genesisUpgrade(address _l1GenesisUpgrade, address _ctmDeployer, bytes _forceDeploymentData, bytes[] _factoryDeps)",
      "function getName() view returns (string)",
      "function makePermanentRollup()",
      "function prepareChainCommitment() view returns (tuple(uint256 totalBatchesExecuted, uint256 totalBatchesVerified, uint256 totalBatchesCommitted, bytes32 l2SystemContractsUpgradeTxHash, uint256 l2SystemContractsUpgradeBatchNumber, bytes32[] batchHashes, tuple(uint256 nextLeafIndex, uint256 startIndex, uint256 unprocessedIndex, bytes32[] sides) priorityTree, bool isPermanentRollup) commitment)",
      "function setDAValidatorPair(address _l1DAValidator, address _l2DAValidator)",
      "function setPendingAdmin(address _newPendingAdmin)",
      "function setPorterAvailability(bool _zkPorterIsAvailable)",
      "function setPriorityTxMaxGasLimit(uint256 _newPriorityTxMaxGasLimit)",
      "function setPubdataPricingMode(uint8 _pricingMode)",
      "function setTokenMultiplier(uint128 _nominator, uint128 _denominator)",
      "function setTransactionFilterer(address _transactionFilterer)",
      "function setValidator(address _validator, bool _active)",
      "function unfreezeDiamond()",
      "function upgradeChainFromVersion(uint256 _oldProtocolVersion, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)"
    ],
    "gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa": [
      "constructor(address _initialOwner, uint32 _executionDelay)",
      "error AddressAlreadyValidator(uint256 _chainId)",
      "error TimeNotReached(uint256 expectedTimestamp, uint256 actualTimestamp)",
      "error Unauthorized(address caller)",
      "error ValidatorDoesNotExist(uint256 _chainId)",
      "error ZeroAddress()",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "event NewExecutionDelay(uint256 _newExecutionDelay)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ValidatorAdded(uint256 indexed _chainId, address _addedValidator)",
      "event ValidatorRemoved(uint256 indexed _chainId, address _removedValidator)",
      "function acceptOwnership()",
      "function addValidator(uint256 _chainId, address _newValidator)",
      "function chainTypeManager() view returns (address)",
      "function commitBatchesSharedBridge(uint256 _chainId, uint256 _processBatchFrom, uint256 _processBatchTo, bytes)",
      "function executeBatchesSharedBridge(uint256 _chainId, uint256 _processBatchFrom, uint256 _processBatchTo, bytes)",
      "function executionDelay() view returns (uint32)",
      "function getCommittedBatchTimestamp(uint256 _chainId, uint256 _l2BatchNumber) view returns (uint256)",
      "function getName() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function proveBatchesSharedBridge(uint256 _chainId, uint256, uint256, bytes)",
      "function removeValidator(uint256 _chainId, address _validator)",
      "function renounceOwnership()",
      "function revertBatchesSharedBridge(uint256 _chainId, uint256)",
      "function setChainTypeManager(address _chainTypeManager)",
      "function setExecutionDelay(uint32 _executionDelay)",
      "function transferOwnership(address newOwner)",
      "function validators(uint256 _chainId, address _validator) view returns (bool)"
    ],
    "gateway:0xcA027Fa98cdce4515E76ECf8dfb4189B16eE72A2": [
      "constructor(address _initialOwner)",
      "error AddressAlreadyValidator(uint256 _chainId)",
      "error Unauthorized(address caller)",
      "error ValidatorDoesNotExist(uint256 _chainId)",
      "error ZeroAddress()",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ValidatorAdded(uint256 indexed _chainId, address _addedValidator)",
      "event ValidatorRemoved(uint256 indexed _chainId, address _removedValidator)",
      "function acceptOwnership()",
      "function addValidator(uint256 _chainId, address _newValidator)",
      "function chainTypeManager() view returns (address)",
      "function commitBatchesSharedBridge(uint256 _chainId, uint256 _processBatchFrom, uint256 _processBatchTo, bytes)",
      "function getName() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function removeValidator(uint256 _chainId, address _validator)",
      "function renounceOwnership()",
      "function revertBatchesSharedBridge(uint256 _chainId, uint256)",
      "function setChainTypeManager(address _chainTypeManager)",
      "function setValidatorTimelock(address _validatorTimelock)",
      "function transferOwnership(address newOwner)",
      "function validatorTimelock() view returns (address)",
      "function validators(uint256 _chainId, address _validator) view returns (bool)"
    ],
    "gateway:0xCE7CBd23193d029410b40e0fD8a79a5121f9250C": [
      "constructor(uint256 _chainId, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)",
      "error AddressHasNoCode(address)",
      "error DelegateCallFailed(bytes returnData)",
      "error FacetExists(bytes4 selector, address)",
      "error NoFunctionsForDiamondCut()",
      "error NonEmptyCalldata()",
      "error RemoveFunctionFacetAddressNotZero(address facet)",
      "error RemoveFunctionFacetAddressZero()",
      "error ReplaceFunctionFacetAddressZero()",
      "error SelectorsMustAllHaveSameFreezability()",
      "error UndefinedDiamondCutAction()",
      "event DiamondCut(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata)"
    ],
    "gateway:0xE841B98E524D827bBA664d19CB736C817707E730": [
      "constructor(address _fflonkVerifier, address _plonkVerifier)",
      "error EmptyProofLength()",
      "error UnknownVerifierType()",
      "function FFLONK_VERIFIER() view returns (address)",
      "function PLONK_VERIFIER() view returns (address)",
      "function verificationKeyHash() view returns (bytes32)",
      "function verificationKeyHash(uint256 _verifierType) view returns (bytes32)",
      "function verify(uint256[] _publicInputs, uint256[] _proof) view returns (bool)"
    ],
    "gateway:0xEE7f08400FDa3A46D32Ae78eBEC2D3841CeC53b7": [
      "function baseTokenGasPriceMultiplierDenominator() view returns (uint128)",
      "function baseTokenGasPriceMultiplierNominator() view returns (uint128)",
      "function facetAddress(bytes4 _selector) view returns (address)",
      "function facetAddresses() view returns (address[])",
      "function facetFunctionSelectors(address _facet) view returns (bytes4[])",
      "function facets() view returns (tuple(address addr, bytes4[] selectors)[] result)",
      "function getAdmin() view returns (address)",
      "function getBaseToken() view returns (address)",
      "function getBaseTokenAssetId() view returns (bytes32)",
      "function getBridgehub() view returns (address)",
      "function getChainId() view returns (uint256)",
      "function getChainTypeManager() view returns (address)",
      "function getDAValidatorPair() view returns (address, address)",
      "function getFirstUnprocessedPriorityTx() view returns (uint256)",
      "function getL2BootloaderBytecodeHash() view returns (bytes32)",
      "function getL2DefaultAccountBytecodeHash() view returns (bytes32)",
      "function getL2EvmEmulatorBytecodeHash() view returns (bytes32)",
      "function getL2SystemContractsUpgradeBatchNumber() view returns (uint256)",
      "function getL2SystemContractsUpgradeBlockNumber() view returns (uint256)",
      "function getL2SystemContractsUpgradeTxHash() view returns (bytes32)",
      "function getName() view returns (string)",
      "function getPendingAdmin() view returns (address)",
      "function getPriorityQueueSize() view returns (uint256)",
      "function getPriorityTreeRoot() view returns (bytes32)",
      "function getPriorityTreeStartIndex() view returns (uint256)",
      "function getPriorityTxMaxGasLimit() view returns (uint256)",
      "function getProtocolVersion() view returns (uint256)",
      "function getPubdataPricingMode() view returns (uint8)",
      "function getSemverProtocolVersion() view returns (uint32, uint32, uint32)",
      "function getSettlementLayer() view returns (address)",
      "function getTotalBatchesCommitted() view returns (uint256)",
      "function getTotalBatchesExecuted() view returns (uint256)",
      "function getTotalBatchesVerified() view returns (uint256)",
      "function getTotalBlocksCommitted() view returns (uint256)",
      "function getTotalBlocksExecuted() view returns (uint256)",
      "function getTotalBlocksVerified() view returns (uint256)",
      "function getTotalPriorityTxs() view returns (uint256)",
      "function getTransactionFilterer() view returns (address)",
      "function getVerifier() view returns (address)",
      "function getVerifierParams() view returns (tuple(bytes32 recursionNodeLevelVkHash, bytes32 recursionLeafLevelVkHash, bytes32 recursionCircuitsSetVksHash))",
      "function isDiamondStorageFrozen() view returns (bool)",
      "function isEthWithdrawalFinalized(uint256 _l2BatchNumber, uint256 _l2MessageIndex) view returns (bool)",
      "function isFacetFreezable(address _facet) view returns (bool isFreezable)",
      "function isFunctionFreezable(bytes4 _selector) view returns (bool)",
      "function isPriorityQueueActive() view returns (bool)",
      "function isValidator(address _address) view returns (bool)",
      "function l2LogsRootHash(uint256 _batchNumber) view returns (bytes32)",
      "function storedBatchHash(uint256 _batchNumber) view returns (bytes32)",
      "function storedBlockHash(uint256 _batchNumber) view returns (bytes32)"
    ]
  },
  "usedTemplates": {
    "global/ProxyAdmin": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "shared-zk-stack/BridgeHub": "0xf014e4d30ee25cd14594d8255fb3576318fbe9b5eba6bbbec917528cdd8c07fc",
    "shared-zk-stack/ChainTypeManager": "0xbe2d88a172590cb3a629ad843086d648ed322c86eb23d4da6a7f43dfe04b8f0c",
    "shared-zk-stack/Diamond": "0xf58468847183a89ea73709ca00dc1bd45baad858f179c87fa0b9a9a3099edb25",
    "shared-zk-stack/DualVerifier": "0xa5872f4279977d125fbe7de800bcc56565d1b14b2acb9736ec9ef0be291ccc24",
    "shared-zk-stack/L1GenesisUpgrade": "0xeb9db9a349a757fe90088c401a5cf10b7da6a7dbd22abd4e0c21ad9a95292ef1",
    "shared-zk-stack/L1VerifierFflonk": "0xa5872f4279977d125fbe7de800bcc56565d1b14b2acb9736ec9ef0be291ccc24",
    "shared-zk-stack/L1VerifierPlonk": "0xa5872f4279977d125fbe7de800bcc56565d1b14b2acb9736ec9ef0be291ccc24",
    "shared-zk-stack/L2AssetRouter": "0x135f3f175975582aabfd47f5af1c6b1c153fe6813d69cfb72d631ba725379300",
    "shared-zk-stack/MessageRoot": "0xeb9db9a349a757fe90088c401a5cf10b7da6a7dbd22abd4e0c21ad9a95292ef1",
    "shared-zk-stack/PartialValidatorTimelock": "0xad56890aa1b84f78772b5886b726fe79be5da2152a9a65d5b67321bc69f41551",
    "shared-zk-stack/RelayedSLDAValidator": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "shared-zk-stack/ServerNotifier": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "shared-zk-stack/ValidatorTimelock": "0xc605499cf1c033abb2a1ee7a146ab364bfcbc9722b13bea57f2def8905bb409f"
  },
  "usedBlockNumbers": { "gateway": 17025 },
  "permissionsConfigHash": "0x9c1fe20cab2350396904a94b0812d699200d8adce8d1746a4e18a45feb6f9d93"
}
