{
  "$schema": "../../../../discovery/schemas/config.v2.schema.json",
  "name": "zksync2",
  "import": ["../globalConfig.jsonc"],
  "initialAddresses": [
    "eth:0x32400084C286CF3E17e7B677ea9583e60a000324",
    "eth:0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063",
    "eth:0x41527B2d03844dB6b0945f25702cB958b6d55989",
    "gateway:0xCE7CBd23193d029410b40e0fD8a79a5121f9250C", // zksync diamond
    "gateway:0x0000000000000000000000000000000000010002" // bridgehub
  ],
  "sharedModules": ["shared-zk-stack", "gateway"],
  "names": {
    "eth:0x32400084C286CF3E17e7B677ea9583e60a000324": "ZKsync",
    "eth:0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063": "L1ERC20Bridge",
    "eth:0x41527B2d03844dB6b0945f25702cB958b6d55989": "L1ERC20Bridge_wstETH",
    "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": "LidoAgent",
    "eth:0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E": "ValidatorTimelock2",
    "eth:0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD": "ValidatorTimelock3",
    "eth:0x0b622A2061EaccAE1c664eBC3E868b8438e03F61": "Governance",
    "eth:0x62F3376E73cF96A0C3232682a88dbe31B8D2FA4f": "TransactionFilterer",
    "gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa": "ZKsyncValidatorTimelock",
    "gateway:0xF41EcA3047B37dc7d88849de4a4dc07937Ad6bc4": "ProtocolUpgradeHandler_l2Alias",
    "gateway:0x3E04Bd6a9056b39999f3883955E183F655346174": "EraChainAdminProxy_l2Alias"
  },
  "overrides": {
    "gateway:0xb83fdD24F40cb2AA5CC9c2A2A0c06E50fA9B4CEa": {
      // validatorTimelock
      "fields": {
        "validatorsVTL": {
          "handler": {
            "type": "event",
            "select": ["validator"],
            "add": {
              "event": "event ValidatorAdded(uint256 indexed chainId, address validator)",
              "where": ["=", "#chainId", 324]
            },
            "remove": {
              "event": "event ValidatorRemoved(uint256 indexed chainId, address validator)",
              "where": ["=", "#chainId", 324]
            }
          },
          "permissions": [{ "type": "validateZkStack" }]
        }
      }
    },
    "gateway:0xCE7CBd23193d029410b40e0fD8a79a5121f9250C": {
      // template override
      "ignoreMethods": [
        "getBaseToken", // this one reverts on the gateway
        "storedBlockHash",
        "storedBatchHash",
        "l2LogsRootHash",
        "getName",
        "prepareChainCommitment"
      ]
    },
    "gateway:0x0000000000000000000000000000000000000000": {
      "ignoreDiscovery": true
    },
    "eth:0x62F3376E73cF96A0C3232682a88dbe31B8D2FA4f": {
      "canActIndependently": false
    },
    // "eth:0x8c0Bfc04AdA21fd496c55B8C50331f904306F564": {
    //   "fields": {
    //     "validatorsVTL": {
    //       "handler": {
    //         "type": "event",
    //         "select": ["validator"],
    //         "add": {
    //           "event": "event ValidatorAdded(uint256 indexed chainId, address validator)",
    //           "where": ["=", "#chainId", 324]
    //         },
    //         "remove": {
    //           "event": "event ValidatorRemoved(uint256 indexed chainId, address validator)",
    //           "where": ["=", "#chainId", 324]
    //         }
    //       },
    //       "permissions": [{ "type": "validateZkStack" }]
    //     }
    //   }
    // },
    // "eth:0x5D8ba173Dc6C3c90C8f7C04C9288BeF5FDbAd06E": {
    //   "category": "spam",
    //   "fields": {
    //     "validatorsVTL": {
    //       "handler": {
    //         "type": "event",
    //         "select": ["validator"],
    //         "add": {
    //           "event": "event ValidatorAdded(uint256 indexed chainId, address validator)",
    //           "where": ["=", "#chainId", 324]
    //         },
    //         "remove": {
    //           "event": "event ValidatorRemoved(uint256 indexed chainId, address validator)",
    //           "where": ["=", "#chainId", 324]
    //         }
    //       },
    //       "permissions": [{ "type": "validateZkStack" }]
    //     }
    //   }
    // },
    "eth:0xa8CB082A5a689E0d594d7da1E2d72A3D63aDc1bD": {
      "category": "spam",
      "description": "Intermediary contract between the *Validators* and the ZKsync Era diamond that delays block execution (ie withdrawals and other L2 --> L1 messages) by {{executionDelay_formatted}}. This contract is a remnant from pre Elastic Chain times.",
      "ignoreMethods": [
        "committedBlockTimestamp",
        "getCommittedBatchTimestamp"
      ],
      "fields": {
        "owner": {
          "permissions": [
            {
              "type": "interact",
              "description": "set addresses (validators) that can commit, prove, execute, revert batches through this contract."
            }
          ]
        },
        "executionDelay_formatted": {
          "handler": { "type": "call", "method": "executionDelay", "args": [] },
          "edit": ["format", "FormatSeconds"]
        },
        "revertedBlocks": {
          "handler": {
            "type": "event",
            "select": [
              "totalBlocksCommitted",
              "totalBlocksVerified",
              "totalBlocksExecuted"
            ],
            "add": { "event": "BlocksRevert" }
          }
        },
        "constructorArgs": {
          "handler": { "type": "constructorArgs", "nameArgs": true }
        },
        "validatorsVTLold": {
          "handler": {
            "type": "event",
            "select": ["validator"],
            "add": { "event": "event ValidatorAdded(address validator)" },
            "remove": { "event": "event ValidatorRemoved(address validator)" }
          },
          "permissions": [{ "type": "validateZkStack" }]
        }
      }
    },
    "eth:0x0b622A2061EaccAE1c664eBC3E868b8438e03F61": {
      "category": "gov",
      "description": "Old Governance contract for ZKsync Era allowing for proposals in form of transactions. The minimum delay is {{minDelay_formatted}}.",
      "fields": {
        "minDelay_formatted": {
          "handler": { "type": "call", "method": "minDelay", "args": [] },
          "edit": ["format", "FormatSeconds"]
        },
        "owner": { "permissions": [{ "type": "act" }] }
      }
    },
    "eth:0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063": {
      "category": "bridge-canonical",
      "description": "Legacy bridge for depositing ERC20 tokens to ZKsync Era. Forwards deposits and withdrawals to the BridgeHub.",
      "ignoreRelatives": ["l2Bridge", "l2TokenBeacon"]
    },
    "eth:0x41527B2d03844dB6b0945f25702cB958b6d55989": {
      "category": "bridge-external",
      "description": "Bridge for depositing wrapped stETH (Lido) to ZKsync Era. These deposits and withdrawals do not go through the shared Bridge.",
      "ignoreRelatives": [
        "l1Token",
        "l2Token",
        "l2Bridge",
        "l2TokenAddress",
        "proxy__getAdmin"
      ]
    },
    "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": {
      "ignoreDiscovery": true
    }
  }
}
