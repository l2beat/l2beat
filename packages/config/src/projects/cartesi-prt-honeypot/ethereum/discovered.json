{
  "name": "cartesi-prt-honeypot",
  "chain": "ethereum",
  "timestamp": 1750257587,
  "configHash": "0x96b9e7274ae02e5ff46efce01ef04557d7e31826c2a85095c3dbbe9ee1be4105",
  "entries": [
    {
      "name": "TopTournament",
      "address": "eth:0x09114973AE4bf3Af3896E4e541082C73f224F8Aa",
      "type": "Contract",
      "template": "cartesi/TopTournament_clone",
      "sourceHashes": [
        "0x976361e02c2df05a95903383085693af7d145dba8f85e21971dcc485ca89d55e"
      ],
      "proxyType": "immutable",
      "description": "Represents the entry point and highest level of a dispute in PRT. Disagreeing validators join this tournament to resolve conflicts over the entire computation trace through a bisection game.",
      "sinceTimestamp": 1749508187,
      "sinceBlock": 22670003,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x09114973AE4bf3Af3896E4e541082C73f224F8Aa": "TopTournament"
      }
    },
    {
      "name": "BottomTournament",
      "address": "eth:0x18256941eC7B661F9F46C228b74e775b581e63f8",
      "type": "Contract",
      "template": "cartesi/BottomTournament_clone",
      "sourceHashes": [
        "0x6b6cbba3169b7d3ac68d947550768c2706ae97d1c4c8bb97d6d0cf6951349236"
      ],
      "proxyType": "immutable",
      "description": "Referees the dispute over a single contested Cartesi machine step as the final stage of arbitration in a dispute. It calls the CartesiStateTransition contract to get a definitive on-chain ruling and identify the winner.",
      "sinceTimestamp": 1749508139,
      "sinceBlock": 22669999,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x18256941eC7B661F9F46C228b74e775b581e63f8": "BottomTournament"
      }
    },
    {
      "name": "MiddleTournamentFactory",
      "address": "eth:0x2B3272E7Bcf06d36b9A902dfc0dD0d9384F2A4c4",
      "type": "Contract",
      "template": "cartesi/MiddleTournamentFactory",
      "sourceHashes": [
        "0x92ef63615b5b5a7d557d4c53c42a5ffac816aca8411b41bf16297f1fd763cee5"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1749508235,
      "sinceBlock": 22670007,
      "values": {
        "$immutable": true,
        "constructorArgs": {
          "impl": "eth:0xe49E4CB0Ab5c0E5792E762807329B420Cc4FF1AE"
        }
      },
      "implementationNames": {
        "eth:0x2B3272E7Bcf06d36b9A902dfc0dD0d9384F2A4c4": "MiddleTournamentFactory"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "name": "Application",
      "address": "eth:0x4c1E74EF88a75C24e49eddD9f70D82A94D19251c",
      "type": "Contract",
      "template": "cartesi/Application",
      "sourceHashes": [
        "0x040a3525c8ccc1fbd5fef3a9e0b3087a477f2f7d77e358637619e3c8702615ac"
      ],
      "proxyType": "immutable",
      "description": "Main dApp contract that escrows assets and executes the verified results (outputs) from off-chain computation. It relies on the eth:0x6CE590b9F0697327f18c601DF6f0baE4a0801B68 contract to validate outputs before releasing assets or triggering on-chain actions. The immutable template hash of the dApp is `0x615acc9fb8ae058d0e45c0d12fa10e1a6c9e645222c6fd94dfeda194ee427c14`.",
      "sinceTimestamp": 1749510467,
      "sinceBlock": 22670193,
      "values": {
        "$immutable": true,
        "getDataAvailability": "0xb12c9ede000000000000000000000000c70074bdd26d8cf983ca6a5b89b8db52d5850051",
        "getDeploymentBlockNumber": 22670193,
        "getOutputsMerkleRootValidator": "eth:0x6CE590b9F0697327f18c601DF6f0baE4a0801B68",
        "getTemplateHash": "0x615acc9fb8ae058d0e45c0d12fa10e1a6c9e645222c6fd94dfeda194ee427c14",
        "owner": "eth:0x0000000000000000000000000000000000000000",
        "withdrawer": "eth:0x60247492F1538Ed4520e61aE41ca2A8447592Ff5"
      },
      "implementationNames": {
        "eth:0x4c1E74EF88a75C24e49eddD9f70D82A94D19251c": "Application"
      }
    },
    {
      "name": "BottomTournamentFactory",
      "address": "eth:0x4C7ab101e9B114A253475485b301E0D0c9e20647",
      "type": "Contract",
      "template": "cartesi/BottomTournamentFactory",
      "sourceHashes": [
        "0xf08e842ede6e859b7253cbd468c2e8909b5743fed73e190dc467607e94c07f94"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1749508199,
      "sinceBlock": 22670004,
      "values": {
        "$immutable": true,
        "constructorArgs": {
          "impl": "eth:0x18256941eC7B661F9F46C228b74e775b581e63f8"
        }
      },
      "implementationNames": {
        "eth:0x4C7ab101e9B114A253475485b301E0D0c9e20647": "BottomTournamentFactory"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "address": "eth:0x53cfaE10bb087bd67288eCA9e7d58E216aEbD961",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Cartesi Multisig",
      "address": "eth:0x60247492F1538Ed4520e61aE41ca2A8447592Ff5",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xd5a33441170541b7df25812e0e3dff6562b2f09ab835a6b431cb9e7198a47605",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x4c1E74EF88a75C24e49eddD9f70D82A94D19251c",
          "description": "withdraw the entire balance in the escrow.",
          "role": ".withdrawer"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1634112168,
      "sinceBlock": 13408863,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0xD91C0C2fC065a2e094129066D2683ef16E6F6032",
          "eth:0x53cfaE10bb087bd67288eCA9e7d58E216aEbD961",
          "eth:0xF4554F08Ed918893996DC36428Cb9DCbF2De990E",
          "eth:0xA7Dd0A6AF60ae9Accc7533d016dc7B68Db3324b1",
          "eth:0xccD54bae0DfadA083F590f9aA16285f3eE4b5325",
          "eth:0xC826D6061b5C62237932c834B60a5eFf04D80F30"
        ],
        "$threshold": 3,
        "domainSeparator": "0x5da08fdea0dbcc8c2e5ff2167841877be4e4105aceec36114c391bed58448056",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 6 (50%)",
        "nonce": 322,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0x60247492F1538Ed4520e61aE41ca2A8447592Ff5": "Proxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "DaveConsensus",
      "address": "eth:0x6CE590b9F0697327f18c601DF6f0baE4a0801B68",
      "type": "Contract",
      "template": "cartesi/DaveConsensus",
      "sourceHashes": [
        "0xb13283139a2042d5619daf0269b24aaddc9650e7851dcce40e24ebf4bf13632c"
      ],
      "proxyType": "immutable",
      "description": "Contract managing PRT fraud-proof tournaments, managing application epochs and input validation, as well as settlement and challenge periods. Dispute tournaments are started here and the final, verified computation result (as an `outputsMerkleRoot`) is recorded when they are resolved.",
      "ignoreInWatchMode": ["canSettle", "getCurrentSealedEpoch"],
      "sinceTimestamp": 1749510479,
      "sinceBlock": 22670194,
      "values": {
        "$immutable": true,
        "canSettle": {
          "isFinished": false,
          "epochNumber": 1,
          "winnerCommitment": "0x0000000000000000000000000000000000000000000000000000000000000000"
        },
        "getApplicationContract": "eth:0x4c1E74EF88a75C24e49eddD9f70D82A94D19251c",
        "getCurrentSealedEpoch": {
          "epochNumber": 1,
          "inputIndexLowerBound": 0,
          "inputIndexUpperBound": 3,
          "tournament": "eth:0x907d1A3092F63400FDA8E0bd33Fe774FE6a62399"
        },
        "getInputBox": "eth:0xc70074BDD26d8cF983Ca6A5b89b8db52D5850051",
        "getTournamentFactory": "eth:0xA31C2aCfF3464658866960c0fBD3d798310272D7"
      },
      "implementationNames": {
        "eth:0x6CE590b9F0697327f18c601DF6f0baE4a0801B68": "DaveConsensus"
      }
    },
    {
      "name": "TopTournamentFactory",
      "address": "eth:0x71C6A5fF7f4f31451CcB5bE312Fa1C5F2a060d5c",
      "type": "Contract",
      "template": "cartesi/TopTournamentFactory",
      "sourceHashes": [
        "0xe052c2a0aba497d7180bf0cc26ad2be121158040020ffaaa3c9266cb3986351b"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1749508247,
      "sinceBlock": 22670008,
      "values": {
        "$immutable": true,
        "constructorArgs": {
          "impl": "eth:0x09114973AE4bf3Af3896E4e541082C73f224F8Aa"
        }
      },
      "implementationNames": {
        "eth:0x71C6A5fF7f4f31451CcB5bE312Fa1C5F2a060d5c": "TopTournamentFactory"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "name": "CartesiStateTransition",
      "address": "eth:0x772732EFbDE6559B2960327276ed33d707fF057f",
      "type": "Contract",
      "template": "cartesi/CartesiStateTransition",
      "sourceHashes": [
        "0xc742ba941fb8f350e4f2f41efd06418dfd193404fc7c5022815b47b9f775e558"
      ],
      "proxyType": "immutable",
      "description": "Onchain verifier that can execute a single, disputed instruction of the Cartesi machine. It is the ultimate arbiter that BottomTournament calls to determine which party's claimed state transition is correct.",
      "sinceTimestamp": 1749508211,
      "sinceBlock": 22670005,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x772732EFbDE6559B2960327276ed33d707fF057f": "CartesiStateTransition"
      }
    },
    {
      "name": "MultiLevelTournamentFactory",
      "address": "eth:0xA31C2aCfF3464658866960c0fBD3d798310272D7",
      "type": "Contract",
      "template": "cartesi/MultiLevelTournamentFactory",
      "sourceHashes": [
        "0xb56d0fd498dabd92ee9ab164394860f9bbb68ea74e4c639f8b1c1f6864eef878"
      ],
      "proxyType": "immutable",
      "description": "Responsible for creating and orchestrating the multi-stage dispute process. It instantiates the correct tournament contract (Top, Middle, or Bottom) depending on the current stage of the dispute game.",
      "sinceTimestamp": 1749508271,
      "sinceBlock": 22670010,
      "values": {
        "$immutable": true,
        "constructorArgs": {
          "_topFactory": "eth:0x71C6A5fF7f4f31451CcB5bE312Fa1C5F2a060d5c",
          "_middleFactory": "eth:0x2B3272E7Bcf06d36b9A902dfc0dD0d9384F2A4c4",
          "_bottomFactory": "eth:0x4C7ab101e9B114A253475485b301E0D0c9e20647",
          "_tournamentParametersProvider": "eth:0xcC0a49320891Bf35bca834aF1045ab89Ecd44c0c",
          "_stateTransition": "eth:0x772732EFbDE6559B2960327276ed33d707fF057f"
        }
      },
      "implementationNames": {
        "eth:0xA31C2aCfF3464658866960c0fBD3d798310272D7": "MultiLevelTournamentFactory"
      }
    },
    {
      "address": "eth:0xA7Dd0A6AF60ae9Accc7533d016dc7B68Db3324b1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "InputBox",
      "address": "eth:0xc70074BDD26d8cF983Ca6A5b89b8db52D5850051",
      "type": "Contract",
      "template": "cartesi/InputBox",
      "sourceHashes": [
        "0xd6dc854c1f4207b23c80cab9cf5de1d72978dd86677fe8c8ace07ee5fdfa33c0"
      ],
      "proxyType": "immutable",
      "description": "Serves as both the canonical log for arbitrary dApp inputs and a portal for depositing assets (one possible type of input). It ensures data availability and that all off-chain participants process the same inputs in the same order.",
      "sinceTimestamp": 1748610851,
      "sinceBlock": 22595776,
      "values": { "$immutable": true, "getDeploymentBlockNumber": 22595776 },
      "implementationNames": {
        "eth:0xc70074BDD26d8cF983Ca6A5b89b8db52D5850051": "InputBox"
      }
    },
    {
      "name": "ERC20Portal",
      "address": "eth:0xc700D6aDd016eECd59d989C028214Eaa0fCC0051",
      "type": "Contract",
      "template": "cartesi/ERC20Portal",
      "sourceHashes": [
        "0x4d9461f610606f687a0d0180aa13890df326becb8f2e8ff8acdd713c311ceae9"
      ],
      "proxyType": "immutable",
      "description": "Contract that allows anyone to perform transfers of ERC-20 tokens to Cartesi DApps.",
      "sinceTimestamp": 1748610923,
      "sinceBlock": 22595782,
      "values": {
        "$immutable": true,
        "getInputBox": "eth:0xc70074BDD26d8cF983Ca6A5b89b8db52D5850051"
      },
      "implementationNames": {
        "eth:0xc700D6aDd016eECd59d989C028214Eaa0fCC0051": "ERC20Portal"
      }
    },
    {
      "address": "eth:0xC826D6061b5C62237932c834B60a5eFf04D80F30",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "CanonicalTournamentParametersProvider",
      "address": "eth:0xcC0a49320891Bf35bca834aF1045ab89Ecd44c0c",
      "type": "Contract",
      "template": "cartesi/CanonicalTournamentParametersProvider",
      "sourceHashes": [
        "0x7ed0779ae4b12f1654a45c0513dde6eea5def66d068f43599eccfb05b69c71b5"
      ],
      "proxyType": "immutable",
      "description": "Provides constant configuration data for the tournament system. It defines parameters like the number of levels (3), the minimum challenge period of ~7d, and the size of computation segments at each stage of a dispute.",
      "sinceTimestamp": 1749508259,
      "sinceBlock": 22670009,
      "values": {
        "$immutable": true,
        "minChallengePeriodBlocks": 50700,
        "topTournamentParameters": {
          "levels": 3,
          "log2step": 44,
          "height": 48,
          "matchEffort": 2300,
          "maxAllowance": 50700
        }
      },
      "fieldMeta": {
        "topTournamentParameters": {
          "description": "levels: number of levels for the tournament, maxAllowance: minimum challenge period in L1 blocks, log2step: sparsity of the machine hash (every 2^x cycles), height: height of the machine hash merkle tree, matchEffort: time bonus in L1 blocks granted to participants when they enter a match."
        }
      },
      "implementationNames": {
        "eth:0xcC0a49320891Bf35bca834aF1045ab89Ecd44c0c": "CanonicalTournamentParametersProvider"
      }
    },
    {
      "address": "eth:0xccD54bae0DfadA083F590f9aA16285f3eE4b5325",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xD91C0C2fC065a2e094129066D2683ef16E6F6032",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "MiddleTournament",
      "address": "eth:0xe49E4CB0Ab5c0E5792E762807329B420Cc4FF1AE",
      "type": "Contract",
      "template": "cartesi/MiddleTournament_clone",
      "sourceHashes": [
        "0xae62ff1fdcc1be0d64d4c17798c0bf6c133a9bdee804f44c19bf2cf045464843"
      ],
      "proxyType": "immutable",
      "description": "Handles the intermediate stages of a dispute following the TopTournament targeting a more granular bisection game.",
      "sinceTimestamp": 1749508163,
      "sinceBlock": 22670001,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xe49E4CB0Ab5c0E5792E762807329B420Cc4FF1AE": "MiddleTournament"
      }
    },
    {
      "address": "eth:0xF4554F08Ed918893996DC36428Cb9DCbF2De990E",
      "type": "EOA",
      "proxyType": "EOA"
    }
  ],
  "abis": {
    "eth:0x09114973AE4bf3Af3896E4e541082C73f224F8Aa": [
      "error ChildTournamentCannotBeEliminated()",
      "error ChildTournamentMustBeEliminated()",
      "error ChildTournamentNotFinished()",
      "error CommitmentMismatch(bytes32 received, bytes32 expected)",
      "error EliminateByTimeout()",
      "error IncorrectAgreeState(bytes32 initialState, bytes32 agreeState)",
      "error InvalidContestedFinalState(bytes32 contestedFinalStateOne, bytes32 contestedFinalStateTwo, bytes32 finalState)",
      "error LengthMismatch(uint64 treeHeight, uint64 siblingsLength)",
      "error TournamentIsClosed()",
      "error TournamentIsFinished()",
      "error WinByTimeout()",
      "error WrongChildren(uint256 commitment, bytes32 parent, bytes32 left, bytes32 right)",
      "error WrongTournamentWinner(bytes32 commitmentRoot, bytes32 winner)",
      "event commitmentJoined(bytes32 root)",
      "event matchAdvanced(bytes32 indexed, bytes32 parent, bytes32 left)",
      "event matchCreated(bytes32 indexed one, bytes32 indexed two, bytes32 leftOfTwo)",
      "event matchDeleted(bytes32)",
      "event newInnerTournament(bytes32 indexed, address)",
      "function advanceMatch(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftNode, bytes32 _rightNode, bytes32 _newLeftNode, bytes32 _newRightNode)",
      "function arbitrationResult() view returns (bool, bytes32, bytes32)",
      "function canWinMatchByTimeout(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId) view returns (bool)",
      "function eliminateInnerTournament(address _childTournament)",
      "function eliminateMatchByTimeout(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId)",
      "function getCommitment(bytes32 _commitmentRoot) view returns (tuple(uint64 allowance, uint64 startInstant), bytes32)",
      "function getMatch(bytes32 _matchIdHash) view returns (tuple(bytes32 otherParent, bytes32 leftNode, bytes32 rightNode, uint256 runningLeafPosition, uint64 currentHeight, uint64 log2step, uint64 height))",
      "function getMatchCycle(bytes32 _matchIdHash) view returns (uint256)",
      "function isClosed() view returns (bool)",
      "function isFinished() view returns (bool)",
      "function joinTournament(bytes32 _finalState, bytes32[] _proof, bytes32 _leftNode, bytes32 _rightNode)",
      "function sealInnerMatchAndCreateInnerTournament(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftLeaf, bytes32 _rightLeaf, bytes32 _agreeHash, bytes32[] _agreeHashProof)",
      "function timeFinished() view returns (bool, uint64)",
      "function tournamentLevelConstants() view returns (uint64 _maxLevel, uint64 _level, uint64 _log2step, uint64 _height)",
      "function winInnerTournament(address _childTournament, bytes32 _leftNode, bytes32 _rightNode)",
      "function winMatchByTimeout(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftNode, bytes32 _rightNode)"
    ],
    "eth:0x18256941eC7B661F9F46C228b74e775b581e63f8": [
      "error CommitmentMismatch(bytes32 received, bytes32 expected)",
      "error EliminateByTimeout()",
      "error IncorrectAgreeState(bytes32 initialState, bytes32 agreeState)",
      "error InvalidContestedFinalState(bytes32 contestedFinalStateOne, bytes32 contestedFinalStateTwo, bytes32 finalState)",
      "error LengthMismatch(uint64 treeHeight, uint64 siblingsLength)",
      "error TournamentIsClosed()",
      "error TournamentIsFinished()",
      "error WinByTimeout()",
      "error WrongChildren(uint256 commitment, bytes32 parent, bytes32 left, bytes32 right)",
      "error WrongFinalState(uint256 commitment, bytes32 computed, bytes32 claimed)",
      "error WrongNodesForStep()",
      "event commitmentJoined(bytes32 root)",
      "event matchAdvanced(bytes32 indexed, bytes32 parent, bytes32 left)",
      "event matchCreated(bytes32 indexed one, bytes32 indexed two, bytes32 leftOfTwo)",
      "event matchDeleted(bytes32)",
      "function advanceMatch(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftNode, bytes32 _rightNode, bytes32 _newLeftNode, bytes32 _newRightNode)",
      "function canBeEliminated() view returns (bool)",
      "function canWinMatchByTimeout(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId) view returns (bool)",
      "function eliminateMatchByTimeout(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId)",
      "function getCommitment(bytes32 _commitmentRoot) view returns (tuple(uint64 allowance, uint64 startInstant), bytes32)",
      "function getMatch(bytes32 _matchIdHash) view returns (tuple(bytes32 otherParent, bytes32 leftNode, bytes32 rightNode, uint256 runningLeafPosition, uint64 currentHeight, uint64 log2step, uint64 height))",
      "function getMatchCycle(bytes32 _matchIdHash) view returns (uint256)",
      "function innerTournamentWinner() view returns (bool, bytes32, bytes32, tuple(uint64 allowance, uint64 startInstant))",
      "function isClosed() view returns (bool)",
      "function isFinished() view returns (bool)",
      "function joinTournament(bytes32 _finalState, bytes32[] _proof, bytes32 _leftNode, bytes32 _rightNode)",
      "function sealLeafMatch(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftLeaf, bytes32 _rightLeaf, bytes32 _agreeHash, bytes32[] _agreeHashProof)",
      "function timeFinished() view returns (bool, uint64)",
      "function tournamentLevelConstants() view returns (uint64 _maxLevel, uint64 _level, uint64 _log2step, uint64 _height)",
      "function winLeafMatch(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftNode, bytes32 _rightNode, bytes proofs)",
      "function winMatchByTimeout(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftNode, bytes32 _rightNode)"
    ],
    "eth:0x2B3272E7Bcf06d36b9A902dfc0dD0d9384F2A4c4": [
      "constructor(address impl)",
      "error CloneArgumentsTooLong()",
      "error FailedDeployment()",
      "error InsufficientBalance(uint256 balance, uint256 needed)",
      "function instantiate(bytes32 initialHash, bytes32 contestedCommitmentOne, bytes32 contestedFinalStateOne, bytes32 contestedCommitmentTwo, bytes32 contestedFinalStateTwo, uint64 allowance, uint256 startCycle, uint64 level, tuple(uint64 levels, uint64 log2step, uint64 height, uint64 matchEffort, uint64 maxAllowance) tournamentParameters, address provider, address tournamentFactory) returns (address)"
    ],
    "eth:0x4c1E74EF88a75C24e49eddD9f70D82A94D19251c": [
      "constructor(address outputsMerkleRootValidator, address initialOwner, bytes32 templateHash, bytes dataAvailability)",
      "error InsufficientFunds(uint256 value, uint256 balance)",
      "error InvalidOutputHashesSiblingsArrayLength()",
      "error InvalidOutputsMerkleRoot(bytes32 outputsMerkleRoot)",
      "error OutputNotExecutable(bytes output)",
      "error OutputNotReexecutable(bytes output)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ReentrancyGuardReentrantCall()",
      "event OutputExecuted(uint64 outputIndex, bytes output)",
      "event OutputsMerkleRootValidatorChanged(address newOutputsMerkleRootValidator)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function executeOutput(bytes output, tuple(uint64 outputIndex, bytes32[] outputHashesSiblings) proof)",
      "function getDataAvailability() view returns (bytes)",
      "function getDeploymentBlockNumber() view returns (uint256)",
      "function getOutputsMerkleRootValidator() view returns (address)",
      "function getTemplateHash() view returns (bytes32)",
      "function migrateToOutputsMerkleRootValidator(address newOutputsMerkleRootValidator)",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) returns (bytes4)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function validateOutput(bytes output, tuple(uint64 outputIndex, bytes32[] outputHashesSiblings) proof) view",
      "function validateOutputHash(bytes32 outputHash, tuple(uint64 outputIndex, bytes32[] outputHashesSiblings) proof) view",
      "function wasOutputExecuted(uint256 outputIndex) view returns (bool)"
    ],
    "eth:0x4C7ab101e9B114A253475485b301E0D0c9e20647": [
      "constructor(address impl)",
      "error CloneArgumentsTooLong()",
      "error FailedDeployment()",
      "error InsufficientBalance(uint256 balance, uint256 needed)",
      "function instantiate(bytes32 initialHash, bytes32 contestedCommitmentOne, bytes32 contestedFinalStateOne, bytes32 contestedCommitmentTwo, bytes32 contestedFinalStateTwo, uint64 allowance, uint256 startCycle, uint64 level, tuple(uint64 levels, uint64 log2step, uint64 height, uint64 matchEffort, uint64 maxAllowance) tournamentParameters, address provider, address stateTransition) returns (address)"
    ],
    "eth:0x60247492F1538Ed4520e61aE41ca2A8447592Ff5": [
      "constructor(address _masterCopy)"
    ],
    "eth:0x6CE590b9F0697327f18c601DF6f0baE4a0801B68": [
      "constructor(address inputBox, address appContract, address tournamentFactory, bytes32 initialMachineStateHash)",
      "error ApplicationMismatch(address expected, address received)",
      "error IncorrectEpochNumber(uint256 received, uint256 actual)",
      "error InputHashMismatch(bytes32 fromReceivedInput, bytes32 fromInputBox)",
      "error InvalidOutputsMerkleRootProof(bytes32 settledState)",
      "error InvalidOutputsMerkleRootProofSize(uint256 suppliedProofSize)",
      "error TournamentNotFinishedYet()",
      "event ConsensusCreation(address inputBox, address appContract, address tournamentFactory)",
      "event EpochSealed(uint256 epochNumber, uint256 inputIndexLowerBound, uint256 inputIndexUpperBound, bytes32 initialMachineStateHash, bytes32 outputsMerkleRoot, address tournament)",
      "function canSettle() view returns (bool isFinished, uint256 epochNumber, bytes32 winnerCommitment)",
      "function getApplicationContract() view returns (address)",
      "function getCurrentSealedEpoch() view returns (uint256 epochNumber, uint256 inputIndexLowerBound, uint256 inputIndexUpperBound, address tournament)",
      "function getInputBox() view returns (address)",
      "function getTournamentFactory() view returns (address)",
      "function isOutputsMerkleRootValid(address appContract, bytes32 outputsMerkleRoot) view returns (bool)",
      "function provideMerkleRootOfInput(uint256 inputIndexWithinEpoch, bytes input) view returns (bytes32)",
      "function settle(uint256 epochNumber, bytes32 outputsMerkleRoot, bytes32[] proof)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "eth:0x71C6A5fF7f4f31451CcB5bE312Fa1C5F2a060d5c": [
      "constructor(address impl)",
      "error CloneArgumentsTooLong()",
      "error FailedDeployment()",
      "error InsufficientBalance(uint256 balance, uint256 needed)",
      "function instantiate(bytes32 initialHash, tuple(uint64 levels, uint64 log2step, uint64 height, uint64 matchEffort, uint64 maxAllowance) tournamentParameters, address provider, address tournamentFactory) returns (address)"
    ],
    "eth:0x772732EFbDE6559B2960327276ed33d707fF057f": [
      "constructor(address _riscVStateTransition, address _cmioStateTransition)",
      "function transitionState(bytes32 machineState, uint256 counter, bytes proofs, address provider) view returns (bytes32)"
    ],
    "eth:0xA31C2aCfF3464658866960c0fBD3d798310272D7": [
      "constructor(address _topFactory, address _middleFactory, address _bottomFactory, address _tournamentParametersProvider, address _stateTransition)",
      "event tournamentCreated(address tournament)",
      "function instantiate(bytes32 _initialHash, address _provider) returns (address)",
      "function instantiateBottom(bytes32 _initialHash, bytes32 _contestedCommitmentOne, bytes32 _contestedFinalStateOne, bytes32 _contestedCommitmentTwo, bytes32 _contestedFinalStateTwo, uint64 _allowance, uint256 _startCycle, uint64 _level, address _provider) returns (address)",
      "function instantiateMiddle(bytes32 _initialHash, bytes32 _contestedCommitmentOne, bytes32 _contestedFinalStateOne, bytes32 _contestedCommitmentTwo, bytes32 _contestedFinalStateTwo, uint64 _allowance, uint256 _startCycle, uint64 _level, address _provider) returns (address)",
      "function instantiateTop(bytes32 _initialHash, address _provider) returns (address)"
    ],
    "eth:0xc70074BDD26d8cF983Ca6A5b89b8db52D5850051": [
      "error InputTooLarge(address appContract, uint256 inputLength, uint256 maxInputLength)",
      "event InputAdded(address indexed appContract, uint256 indexed index, bytes input)",
      "function addInput(address appContract, bytes payload) returns (bytes32)",
      "function getDeploymentBlockNumber() view returns (uint256)",
      "function getInputHash(address appContract, uint256 index) view returns (bytes32)",
      "function getNumberOfInputs(address appContract) view returns (uint256)"
    ],
    "eth:0xc700D6aDd016eECd59d989C028214Eaa0fCC0051": [
      "constructor(address inputBox)",
      "error ERC20TransferFailed()",
      "function depositERC20Tokens(address token, address appContract, uint256 value, bytes execLayerData)",
      "function getInputBox() view returns (address)"
    ],
    "eth:0xcC0a49320891Bf35bca834aF1045ab89Ecd44c0c": [
      "constructor(uint64 matchEffort, uint64 maxAllowance)",
      "function tournamentParameters(uint64 level) view returns (tuple(uint64 levels, uint64 log2step, uint64 height, uint64 matchEffort, uint64 maxAllowance))"
    ],
    "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0xe49E4CB0Ab5c0E5792E762807329B420Cc4FF1AE": [
      "error ChildTournamentCannotBeEliminated()",
      "error ChildTournamentMustBeEliminated()",
      "error ChildTournamentNotFinished()",
      "error CommitmentMismatch(bytes32 received, bytes32 expected)",
      "error EliminateByTimeout()",
      "error IncorrectAgreeState(bytes32 initialState, bytes32 agreeState)",
      "error InvalidContestedFinalState(bytes32 contestedFinalStateOne, bytes32 contestedFinalStateTwo, bytes32 finalState)",
      "error LengthMismatch(uint64 treeHeight, uint64 siblingsLength)",
      "error TournamentIsClosed()",
      "error TournamentIsFinished()",
      "error WinByTimeout()",
      "error WrongChildren(uint256 commitment, bytes32 parent, bytes32 left, bytes32 right)",
      "error WrongTournamentWinner(bytes32 commitmentRoot, bytes32 winner)",
      "event commitmentJoined(bytes32 root)",
      "event matchAdvanced(bytes32 indexed, bytes32 parent, bytes32 left)",
      "event matchCreated(bytes32 indexed one, bytes32 indexed two, bytes32 leftOfTwo)",
      "event matchDeleted(bytes32)",
      "event newInnerTournament(bytes32 indexed, address)",
      "function advanceMatch(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftNode, bytes32 _rightNode, bytes32 _newLeftNode, bytes32 _newRightNode)",
      "function canBeEliminated() view returns (bool)",
      "function canWinMatchByTimeout(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId) view returns (bool)",
      "function eliminateInnerTournament(address _childTournament)",
      "function eliminateMatchByTimeout(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId)",
      "function getCommitment(bytes32 _commitmentRoot) view returns (tuple(uint64 allowance, uint64 startInstant), bytes32)",
      "function getMatch(bytes32 _matchIdHash) view returns (tuple(bytes32 otherParent, bytes32 leftNode, bytes32 rightNode, uint256 runningLeafPosition, uint64 currentHeight, uint64 log2step, uint64 height))",
      "function getMatchCycle(bytes32 _matchIdHash) view returns (uint256)",
      "function innerTournamentWinner() view returns (bool, bytes32, bytes32, tuple(uint64 allowance, uint64 startInstant))",
      "function isClosed() view returns (bool)",
      "function isFinished() view returns (bool)",
      "function joinTournament(bytes32 _finalState, bytes32[] _proof, bytes32 _leftNode, bytes32 _rightNode)",
      "function sealInnerMatchAndCreateInnerTournament(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftLeaf, bytes32 _rightLeaf, bytes32 _agreeHash, bytes32[] _agreeHashProof)",
      "function timeFinished() view returns (bool, uint64)",
      "function tournamentLevelConstants() view returns (uint64 _maxLevel, uint64 _level, uint64 _log2step, uint64 _height)",
      "function winInnerTournament(address _childTournament, bytes32 _leftNode, bytes32 _rightNode)",
      "function winMatchByTimeout(tuple(bytes32 commitmentOne, bytes32 commitmentTwo) _matchId, bytes32 _leftNode, bytes32 _rightNode)"
    ]
  },
  "usedTemplates": {
    "cartesi/Application": "0x25cf6358cdb4ce6f1ad6666a17c67fa6597c997ad826e59ea5d26b4e22371d98",
    "cartesi/BottomTournament_clone": "0x579b475804c11d95a09655ad2b7f9a176d93ea4aae5cc7b7072c629053dc4761",
    "cartesi/BottomTournamentFactory": "0x923d60afe222ac83f542612d719320f16646244a35b371e99bcc8add0e00f072",
    "cartesi/CanonicalTournamentParametersProvider": "0x8364633bedcaf40a3dffcf8d3f6a21ef89b781e066a844406cde84f2538e8ca3",
    "cartesi/CartesiStateTransition": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "cartesi/DaveConsensus": "0xada999c77c97d3602c1a6045a54d53e8a0393b1726ad34bda9ba2b71d6662384",
    "cartesi/ERC20Portal": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "cartesi/InputBox": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "cartesi/MiddleTournament_clone": "0x579b475804c11d95a09655ad2b7f9a176d93ea4aae5cc7b7072c629053dc4761",
    "cartesi/MiddleTournamentFactory": "0x923d60afe222ac83f542612d719320f16646244a35b371e99bcc8add0e00f072",
    "cartesi/MultiLevelTournamentFactory": "0x923d60afe222ac83f542612d719320f16646244a35b371e99bcc8add0e00f072",
    "cartesi/TopTournament_clone": "0xb3113cf8b0ceb9ccca162d233905f35087fec6eebea36f8be30ba2539120ad3c",
    "cartesi/TopTournamentFactory": "0x923d60afe222ac83f542612d719320f16646244a35b371e99bcc8add0e00f072",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c"
  },
  "usedBlockNumbers": { "ethereum": 22732019 },
  "permissionsConfigHash": "0xeb5b65494022006b366d9813f45a340050c6c497467585273bdc743c858f147a"
}
