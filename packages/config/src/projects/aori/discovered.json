{
  "name": "aori",
  "timestamp": 1760705070,
  "configHash": "0xd1ba01296dfbe4121033e1748c75c9a71bf90f16cf4e935ebdff0530784aa835",
  "entries": [
    {
      "address": "base:0x0cb72C1F6a36c225A7E2B21712E8853A4A1acc47",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ReadLib1002",
      "address": "base:0x1273141a3f7923AA2d9edDfA402440cE075ed8Ff",
      "type": "Contract",
      "template": "layerzero/ReadLib1002",
      "sourceHashes": [
        "0xf7800be6fd99520201da1404c35bac8a1ed826bbc2134f0a77547e0d7a74c9c1"
      ],
      "proxyType": "immutable",
      "description": "LayerZero library used to read state from remote blockchains.",
      "sinceTimestamp": 1730484379,
      "sinceBlock": 21847516,
      "values": {
        "$immutable": true,
        "getTreasuryAndNativeFeeCap": [
          "base:0x0000000000000000000000000000000000000000",
          450000000000000
        ],
        "messageLibType": 2,
        "owner": "base:0xa0392d116D71ED3b75086194aBa6De3CD1e39B7E",
        "version": { "major": 10, "minor": 0, "endpointVersion": 2 }
      },
      "implementationNames": {
        "base:0x1273141a3f7923AA2d9edDfA402440cE075ed8Ff": "ReadLib1002"
      }
    },
    {
      "name": "EndpointV2",
      "address": "base:0x1a44076050125825900e736c501f859c50fE728c",
      "type": "Contract",
      "template": "layerzero/EndpointV2",
      "sourceHashes": [
        "0x399160e7d36a21fca31097d7875daed8f421f788b77f2a71974d51938c3ea520"
      ],
      "proxyType": "immutable",
      "description": "Part of the LayerZero messaging protocol. OApp owners can configure custom verification (MessageLib) and execution settings here.",
      "sinceTimestamp": 1706303225,
      "sinceBlock": 9756939,
      "values": {
        "$immutable": true,
        "blockedLibrary": "base:0x1ccBf0db9C192d969de57E25B3fF09A25bb1D862",
        "eid": 30184,
        "EMPTY_PAYLOAD_HASH": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getRegisteredLibraries": [
          "base:0x1ccBf0db9C192d969de57E25B3fF09A25bb1D862",
          "base:0xB5320B0B3a13cC860893E2Bd79FCd7e13484Dda2",
          "base:0xc70AB6f32772f59fBfc23889Caf4Ba3376C84bAf",
          "base:0x1273141a3f7923AA2d9edDfA402440cE075ed8Ff"
        ],
        "getSendContext": [
          0,
          "base:0x0000000000000000000000000000000000000000"
        ],
        "isSendingMessage": false,
        "lzToken": "base:0x0000000000000000000000000000000000000000",
        "nativeToken": "base:0x0000000000000000000000000000000000000000",
        "NIL_PAYLOAD_HASH": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "owner": "base:0xa0392d116D71ED3b75086194aBa6De3CD1e39B7E"
      },
      "implementationNames": {
        "base:0x1a44076050125825900e736c501f859c50fE728c": "EndpointV2"
      }
    },
    {
      "name": "",
      "address": "base:0x1ccBf0db9C192d969de57E25B3fF09A25bb1D862",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1706303225,
      "sinceBlock": 9756939,
      "values": { "$immutable": true },
      "implementationNames": {
        "base:0x1ccBf0db9C192d969de57E25B3fF09A25bb1D862": ""
      }
    },
    {
      "address": "base:0x39f86ECef62c5bcE23428d6b7c7050D9Ecb0e346",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "base:0x5bC6AA6ad117A8B50ABf9E1658971f5DA1968c5c",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "base:0x73E9c017Ad37e2113e709D8070Cc9E1b28180e1e",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "base:0x771dcAcB96024d1e55Fd21Fe8a8187AA7EC9e77e",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "base:0x941327E206b8d8cfe1014A8A95B05E1536dFD00d",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OneSig",
      "address": "base:0xa0392d116D71ED3b75086194aBa6De3CD1e39B7E",
      "type": "Contract",
      "template": "layerzero/OneSigMultisig",
      "sourceHashes": [
        "0x6a2feeb0055614ee29c746b6052e64dc677ffa602b25dfeb74cbf948bc6d9b74"
      ],
      "proxyType": "immutable",
      "description": "Custom multisignature contract allowing offchain signing and execution on multiple target chains.",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "base:0x1273141a3f7923AA2d9edDfA402440cE075ed8Ff",
          "description": "configure the settings of this library, affecting all OApps that have not set up a custom security config.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "base:0x1a44076050125825900e736c501f859c50fE728c",
          "description": "configure the default send/receive libraries used for verification, affecting all OApps that have not set up a custom security config.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "base:0xB5320B0B3a13cC860893E2Bd79FCd7e13484Dda2",
          "description": "configure the settings of this library, affecting all OApps that have not set up a custom security config.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "base:0xc70AB6f32772f59fBfc23889Caf4Ba3376C84bAf",
          "description": "configure the settings of this library, affecting all OApps that have not set up a custom security config.",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747963507,
      "sinceBlock": 30587080,
      "values": {
        "$immutable": true,
        "$members": [
          "base:0x0cb72C1F6a36c225A7E2B21712E8853A4A1acc47",
          "base:0x5bC6AA6ad117A8B50ABf9E1658971f5DA1968c5c",
          "base:0x73E9c017Ad37e2113e709D8070Cc9E1b28180e1e",
          "base:0x771dcAcB96024d1e55Fd21Fe8a8187AA7EC9e77e",
          "base:0xe67DB04d7eFF4e9ec282eD929632D4FF058112d7"
        ],
        "$threshold": 3,
        "executorRequired": true,
        "getExecutors": ["base:0x39f86ECef62c5bcE23428d6b7c7050D9Ecb0e346"],
        "LEAF_ENCODING_VERSION": 1,
        "nonce": 15,
        "ONE_SIG_ID": 30184,
        "seed": "0xa8c6099081c03ac4c11ed511690f296077e94d44cf99bebc8c349cf972f87340",
        "totalExecutors": 1,
        "totalSigners": 5,
        "VERSION": "0.0.1"
      },
      "fieldMeta": {
        "executorRequired": {
          "description": "if true, only executor OR any signer can execute a correctly signed tx. else anyone can."
        }
      },
      "implementationNames": {
        "base:0xa0392d116D71ED3b75086194aBa6De3CD1e39B7E": "OneSig"
      }
    },
    {
      "name": "SendUln302",
      "address": "base:0xB5320B0B3a13cC860893E2Bd79FCd7e13484Dda2",
      "type": "Contract",
      "template": "layerzero/SendUln302",
      "sourceHashes": [
        "0x159d8f84a5100285a7401e1ccb3d40a64fe944d9beb951c81749de40279a5876"
      ],
      "proxyType": "immutable",
      "description": "Send Library used by LayerZero, defining the protocol/execution of sent messages.",
      "sinceTimestamp": 1706303279,
      "sinceBlock": 9756966,
      "values": {
        "$immutable": true,
        "messageLibType": 0,
        "owner": "base:0xa0392d116D71ED3b75086194aBa6De3CD1e39B7E",
        "treasury": "base:0xCcD558d6839e128320bBC932CBBa2c890a5518E8",
        "version": { "major": 3, "minor": 0, "endpointVersion": 2 }
      },
      "implementationNames": {
        "base:0xB5320B0B3a13cC860893E2Bd79FCd7e13484Dda2": "SendUln302"
      }
    },
    {
      "name": "Aori",
      "address": "base:0xc6868eDF1D2a7A8b759856cb8Afa333210dFEda6",
      "type": "Contract",
      "sourceHashes": [
        "0x2caf29a6687c5e040834931a578b76f753d41712bfca7b36265865ad3a9fb660"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1754669755,
      "sinceBlock": 33940204,
      "values": {
        "$immutable": true,
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Aori",
          "version": "0.3.1",
          "chainId": 8453,
          "verifyingContract": "base:0xc6868eDF1D2a7A8b759856cb8Afa333210dFEda6",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "endpoint": "base:0x1a44076050125825900e736c501f859c50fE728c",
        "ENDPOINT_ID": 30184,
        "MAX_FILLS_PER_SETTLE": 100,
        "oAppVersion": { "senderVersion": 1, "receiverVersion": 2 },
        "owner": "base:0x941327E206b8d8cfe1014A8A95B05E1536dFD00d",
        "paused": false
      },
      "implementationNames": {
        "base:0xc6868eDF1D2a7A8b759856cb8Afa333210dFEda6": "Aori"
      }
    },
    {
      "name": "ReceiveUln302",
      "address": "base:0xc70AB6f32772f59fBfc23889Caf4Ba3376C84bAf",
      "type": "Contract",
      "template": "layerzero/ReceiveUln302",
      "sourceHashes": [
        "0x3904c78c7b0abf91f9544ebb9f08f2d2bc83028df65c912a7f7a6ca1ca109dde"
      ],
      "proxyType": "immutable",
      "description": "Receive Library used by LayerZero, defining the validation of received messages.",
      "sinceTimestamp": 1706303285,
      "sinceBlock": 9756969,
      "values": {
        "$immutable": true,
        "messageLibType": 1,
        "owner": "base:0xa0392d116D71ED3b75086194aBa6De3CD1e39B7E",
        "version": { "major": 3, "minor": 0, "endpointVersion": 2 }
      },
      "implementationNames": {
        "base:0xc70AB6f32772f59fBfc23889Caf4Ba3376C84bAf": "ReceiveUln302"
      }
    },
    {
      "name": "Treasury",
      "address": "base:0xCcD558d6839e128320bBC932CBBa2c890a5518E8",
      "type": "Contract",
      "sourceHashes": [
        "0x79f573a9d94def8dc0b4319d44595f806685b0ca5875891eff1ed40a9ff6b6e0"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1706303271,
      "sinceBlock": 9756962,
      "values": {
        "$immutable": true,
        "lzTokenEnabled": false,
        "lzTokenFee": 0,
        "nativeBP": 0,
        "owner": "base:0xa0392d116D71ED3b75086194aBa6De3CD1e39B7E"
      },
      "implementationNames": {
        "base:0xCcD558d6839e128320bBC932CBBa2c890a5518E8": "Treasury"
      }
    },
    {
      "address": "base:0xe67DB04d7eFF4e9ec282eD929632D4FF058112d7",
      "type": "EOA",
      "proxyType": "EOA"
    }
  ],
  "abis": {
    "base:0x1273141a3f7923AA2d9edDfA402440cE075ed8Ff": [
      "constructor(address _endpoint, uint256 _treasuryGasLimit, uint256 _treasuryGasForFeeCap)",
      "error DVN_InvalidDVNIdx()",
      "error DVN_InvalidDVNOptions(uint256 cursor)",
      "error LZ_MessageLib_OnlyEndpoint()",
      "error LZ_RL_AtLeastOneDVN()",
      "error LZ_RL_CannotWithdrawAltToken()",
      "error LZ_RL_InvalidAmount(uint256 requested, uint256 available)",
      "error LZ_RL_InvalidCmdHash()",
      "error LZ_RL_InvalidConfigType(uint32 configType)",
      "error LZ_RL_InvalidEid()",
      "error LZ_RL_InvalidExecutor()",
      "error LZ_RL_InvalidOptionalDVNCount()",
      "error LZ_RL_InvalidOptionalDVNThreshold()",
      "error LZ_RL_InvalidPacketHeader()",
      "error LZ_RL_InvalidPacketVersion()",
      "error LZ_RL_InvalidReceiver()",
      "error LZ_RL_InvalidRequiredDVNCount()",
      "error LZ_RL_NotTreasury()",
      "error LZ_RL_Unsorted()",
      "error LZ_RL_UnsupportedEid(uint32 eid)",
      "error LZ_RL_Verifying()",
      "error LZ_ULN_InvalidLegacyType1Option()",
      "error LZ_ULN_InvalidLegacyType2Option()",
      "error LZ_ULN_InvalidWorkerId(uint8 workerId)",
      "error LZ_ULN_InvalidWorkerOptions(uint256 cursor)",
      "error LZ_ULN_UnsupportedOptionType(uint16 optionType)",
      "error Transfer_NativeFailed(address _to, uint256 _value)",
      "error Transfer_ToAddressIsZero()",
      "event DVNFeePaid(address[] requiredDVNs, address[] optionalDVNs, uint256[] fees)",
      "event DefaultReadLibConfigsSet(tuple(uint32 eid, tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] params)",
      "event ExecutorFeePaid(address executor, uint256 fee)",
      "event LzTokenFeeWithdrawn(address lzToken, address receiver, uint256 amount)",
      "event NativeFeeWithdrawn(address worker, address receiver, uint256 amount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PayloadVerified(address dvn, bytes header, bytes32 cmdHash, bytes32 payloadHash)",
      "event ReadLibConfigSet(address oapp, uint32 eid, tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)",
      "event TreasuryNativeFeeCapSet(uint256 newTreasuryNativeFeeCap)",
      "event TreasurySet(address treasury)",
      "function cmdHashLookup(address oapp, uint32 eid, uint64 nonce) view returns (bytes32 cmdHash)",
      "function commitVerification(bytes _packetHeader, bytes32 _cmdHash, bytes32 _payloadHash)",
      "function fees(address worker) view returns (uint256 fee)",
      "function getAppReadLibConfig(address _oapp, uint32 _remoteEid) view returns (tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs))",
      "function getConfig(uint32 _eid, address _oapp, uint32 _configType) view returns (bytes)",
      "function getReadLibConfig(address _oapp, uint32 _remoteEid) view returns (tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) rtnConfig)",
      "function getTreasuryAndNativeFeeCap() view returns (address, uint256)",
      "function hashLookup(bytes32 headerHash, bytes32 cmdHash, address dvn) view returns (bytes32 payloadHash)",
      "function isSupportedEid(uint32 _eid) view returns (bool)",
      "function messageLibType() pure returns (uint8)",
      "function owner() view returns (address)",
      "function quote(tuple(uint64 nonce, uint32 srcEid, address sender, uint32 dstEid, bytes32 receiver, bytes32 guid, bytes message) _packet, bytes _options, bool _payInLzToken) view returns (tuple(uint256 nativeFee, uint256 lzTokenFee))",
      "function renounceOwnership()",
      "function send(tuple(uint64 nonce, uint32 srcEid, address sender, uint32 dstEid, bytes32 receiver, bytes32 guid, bytes message) _packet, bytes _options, bool _payInLzToken) returns (tuple(uint256 nativeFee, uint256 lzTokenFee), bytes)",
      "function setConfig(address _oapp, tuple(uint32 eid, uint32 configType, bytes config)[] _params)",
      "function setDefaultReadLibConfigs(tuple(uint32 eid, tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] _params)",
      "function setTreasury(address _treasury)",
      "function setTreasuryNativeFeeCap(uint256 _newTreasuryNativeFeeCap)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function verifiable(tuple(address executor, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) _config, bytes32 _headerHash, bytes32 _cmdHash, bytes32 _payloadHash) view returns (bool)",
      "function verify(bytes _packetHeader, bytes32 _cmdHash, bytes32 _payloadHash)",
      "function version() pure returns (uint64 major, uint8 minor, uint8 endpointVersion)",
      "function withdrawFee(address _to, uint256 _amount)",
      "function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount)"
    ],
    "base:0x1a44076050125825900e736c501f859c50fE728c": [
      "constructor(uint32 _eid, address _owner)",
      "error LZ_AlreadyRegistered()",
      "error LZ_ComposeExists()",
      "error LZ_ComposeNotFound(bytes32 expected, bytes32 actual)",
      "error LZ_DefaultReceiveLibUnavailable()",
      "error LZ_DefaultSendLibUnavailable()",
      "error LZ_InsufficientFee(uint256 requiredNative, uint256 suppliedNative, uint256 requiredLzToken, uint256 suppliedLzToken)",
      "error LZ_InvalidExpiry()",
      "error LZ_InvalidNonce(uint64 nonce)",
      "error LZ_InvalidPayloadHash()",
      "error LZ_InvalidReceiveLibrary()",
      "error LZ_LzTokenUnavailable()",
      "error LZ_OnlyNonDefaultLib()",
      "error LZ_OnlyReceiveLib()",
      "error LZ_OnlyRegisteredLib()",
      "error LZ_OnlyRegisteredOrDefaultLib()",
      "error LZ_OnlySendLib()",
      "error LZ_PathNotInitializable()",
      "error LZ_PathNotVerifiable()",
      "error LZ_PayloadHashNotFound(bytes32 expected, bytes32 actual)",
      "error LZ_SameValue()",
      "error LZ_SendReentrancy()",
      "error LZ_Unauthorized()",
      "error LZ_UnsupportedEid()",
      "error LZ_UnsupportedInterface()",
      "error LZ_ZeroLzTokenFee()",
      "error Transfer_NativeFailed(address _to, uint256 _value)",
      "error Transfer_ToAddressIsZero()",
      "event ComposeDelivered(address from, address to, bytes32 guid, uint16 index)",
      "event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message)",
      "event DefaultReceiveLibrarySet(uint32 eid, address newLib)",
      "event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry)",
      "event DefaultSendLibrarySet(uint32 eid, address newLib)",
      "event DelegateSet(address sender, address delegate)",
      "event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce)",
      "event LibraryRegistered(address newLib)",
      "event LzComposeAlert(address indexed from, address indexed to, address indexed executor, bytes32 guid, uint16 index, uint256 gas, uint256 value, bytes message, bytes extraData, bytes reason)",
      "event LzReceiveAlert(address indexed receiver, address indexed executor, tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin, bytes32 guid, uint256 gas, uint256 value, bytes message, bytes extraData, bytes reason)",
      "event LzTokenSet(address token)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash)",
      "event PacketDelivered(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin, address receiver)",
      "event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash)",
      "event PacketSent(bytes encodedPayload, bytes options, address sendLibrary)",
      "event PacketVerified(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin, address receiver, bytes32 payloadHash)",
      "event ReceiveLibrarySet(address receiver, uint32 eid, address newLib)",
      "event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout)",
      "event SendLibrarySet(address sender, uint32 eid, address newLib)",
      "function EMPTY_PAYLOAD_HASH() view returns (bytes32)",
      "function NIL_PAYLOAD_HASH() view returns (bytes32)",
      "function blockedLibrary() view returns (address)",
      "function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash)",
      "function clear(address _oapp, tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, bytes32 _guid, bytes _message)",
      "function composeQueue(address from, address to, bytes32 guid, uint16 index) view returns (bytes32 messageHash)",
      "function defaultReceiveLibrary(uint32 srcEid) view returns (address lib)",
      "function defaultReceiveLibraryTimeout(uint32 srcEid) view returns (address lib, uint256 expiry)",
      "function defaultSendLibrary(uint32 dstEid) view returns (address lib)",
      "function delegates(address oapp) view returns (address delegate)",
      "function eid() view returns (uint32)",
      "function getConfig(address _oapp, address _lib, uint32 _eid, uint32 _configType) view returns (bytes config)",
      "function getReceiveLibrary(address _receiver, uint32 _srcEid) view returns (address lib, bool isDefault)",
      "function getRegisteredLibraries() view returns (address[])",
      "function getSendContext() view returns (uint32, address)",
      "function getSendLibrary(address _sender, uint32 _dstEid) view returns (address lib)",
      "function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) view returns (uint64)",
      "function inboundPayloadHash(address receiver, uint32 srcEid, bytes32 sender, uint64 inboundNonce) view returns (bytes32 payloadHash)",
      "function initializable(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver) view returns (bool)",
      "function isDefaultSendLibrary(address _sender, uint32 _dstEid) view returns (bool)",
      "function isRegisteredLibrary(address lib) view returns (bool)",
      "function isSendingMessage() view returns (bool)",
      "function isSupportedEid(uint32 _eid) view returns (bool)",
      "function isValidReceiveLibrary(address _receiver, uint32 _srcEid, address _actualReceiveLib) view returns (bool)",
      "function lazyInboundNonce(address receiver, uint32 srcEid, bytes32 sender) view returns (uint64 nonce)",
      "function lzCompose(address _from, address _to, bytes32 _guid, uint16 _index, bytes _message, bytes _extraData) payable",
      "function lzComposeAlert(address _from, address _to, bytes32 _guid, uint16 _index, uint256 _gas, uint256 _value, bytes _message, bytes _extraData, bytes _reason)",
      "function lzReceive(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver, bytes32 _guid, bytes _message, bytes _extraData) payable",
      "function lzReceiveAlert(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver, bytes32 _guid, uint256 _gas, uint256 _value, bytes _message, bytes _extraData, bytes _reason)",
      "function lzToken() view returns (address)",
      "function nativeToken() view returns (address)",
      "function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) view returns (bytes32)",
      "function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash)",
      "function outboundNonce(address sender, uint32 dstEid, bytes32 receiver) view returns (uint64 nonce)",
      "function owner() view returns (address)",
      "function quote(tuple(uint32 dstEid, bytes32 receiver, bytes message, bytes options, bool payInLzToken) _params, address _sender) view returns (tuple(uint256 nativeFee, uint256 lzTokenFee))",
      "function receiveLibraryTimeout(address receiver, uint32 srcEid) view returns (address lib, uint256 expiry)",
      "function recoverToken(address _token, address _to, uint256 _amount)",
      "function registerLibrary(address _lib)",
      "function renounceOwnership()",
      "function send(tuple(uint32 dstEid, bytes32 receiver, bytes message, bytes options, bool payInLzToken) _params, address _refundAddress) payable returns (tuple(bytes32 guid, uint64 nonce, tuple(uint256 nativeFee, uint256 lzTokenFee) fee))",
      "function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes _message)",
      "function setConfig(address _oapp, address _lib, tuple(uint32 eid, uint32 configType, bytes config)[] _params)",
      "function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod)",
      "function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry)",
      "function setDefaultSendLibrary(uint32 _eid, address _newLib)",
      "function setDelegate(address _delegate)",
      "function setLzToken(address _lzToken)",
      "function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod)",
      "function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry)",
      "function setSendLibrary(address _oapp, uint32 _eid, address _newLib)",
      "function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce)",
      "function transferOwnership(address newOwner)",
      "function verifiable(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver) view returns (bool)",
      "function verify(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, address _receiver, bytes32 _payloadHash)"
    ],
    "base:0xa0392d116D71ED3b75086194aBa6De3CD1e39B7E": [
      "constructor(uint64 _oneSigId, address[] _signers, uint256 _threshold, address[] _executors, bool _executorRequired, bytes32 _seed)",
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error ExecutionFailed(uint256 index)",
      "error ExecutorAlreadyActive(address executor)",
      "error ExecutorNotFound(address executor)",
      "error InvalidExecutor()",
      "error InvalidProofOrNonce()",
      "error InvalidSigner()",
      "error MerkleRootExpired()",
      "error OnlyExecutorOrSigner()",
      "error OnlySelfCall()",
      "error ReentrancyGuardReentrantCall()",
      "error SignatureError()",
      "error SignerAlreadyAdded(address signer)",
      "error SignerNotFound(address signer)",
      "error TotalSignersLessThanThreshold(uint256 totalSigners, uint256 threshold)",
      "error UnsortedSigners()",
      "error ZeroThreshold()",
      "event ExecutorRequiredSet(bool required)",
      "event ExecutorSet(address indexed executor, bool active)",
      "event SeedSet(bytes32 seed)",
      "event SignerSet(address indexed signer, bool active)",
      "event ThresholdSet(uint256 threshold)",
      "event TransactionExecuted(bytes32 merkleRoot, uint256 nonce)",
      "function LEAF_ENCODING_VERSION() view returns (uint8)",
      "function ONE_SIG_ID() view returns (uint64)",
      "function VERSION() view returns (string)",
      "function canExecuteTransaction(address _sender) view returns (bool)",
      "function encodeLeaf(uint64 _nonce, tuple(address to, uint256 value, bytes data)[] _calls) view returns (bytes32)",
      "function executeTransaction(tuple(tuple(address to, uint256 value, bytes data)[] calls, bytes32[] proof) _transaction, bytes32 _merkleRoot, uint256 _expiry, bytes _signatures) payable",
      "function executorRequired() view returns (bool)",
      "function getExecutors() view returns (address[])",
      "function getSigners() view returns (address[])",
      "function isExecutor(address _executor) view returns (bool)",
      "function isSigner(address _signer) view returns (bool)",
      "function nonce() view returns (uint64)",
      "function seed() view returns (bytes32)",
      "function setExecutor(address _executor, bool _active)",
      "function setExecutorRequired(bool _executorRequired)",
      "function setSeed(bytes32 _seed)",
      "function setSigner(address _signer, bool _active)",
      "function setThreshold(uint256 _threshold)",
      "function threshold() view returns (uint256)",
      "function totalExecutors() view returns (uint256)",
      "function totalSigners() view returns (uint256)",
      "function verifyMerkleRoot(bytes32 _merkleRoot, uint256 _expiry, bytes _signatures) view",
      "function verifyNSignatures(bytes32 _digest, bytes _signatures, uint256 _threshold) view",
      "function verifySignatures(bytes32 _digest, bytes _signatures) view",
      "function verifyTransactionProof(bytes32 _merkleRoot, tuple(tuple(address to, uint256 value, bytes data)[] calls, bytes32[] proof) _transaction) view"
    ],
    "base:0xB5320B0B3a13cC860893E2Bd79FCd7e13484Dda2": [
      "constructor(address _endpoint, uint256 _treasuryGasLimit, uint256 _treasuryGasForFeeCap)",
      "error DVN_InvalidDVNIdx()",
      "error DVN_InvalidDVNOptions(uint256 cursor)",
      "error LZ_MessageLib_CannotWithdrawAltToken()",
      "error LZ_MessageLib_InvalidAmount(uint256 requested, uint256 available)",
      "error LZ_MessageLib_InvalidExecutor()",
      "error LZ_MessageLib_InvalidMessageSize(uint256 actual, uint256 max)",
      "error LZ_MessageLib_NotTreasury()",
      "error LZ_MessageLib_OnlyEndpoint()",
      "error LZ_MessageLib_TransferFailed()",
      "error LZ_MessageLib_ZeroMessageSize()",
      "error LZ_ULN_AtLeastOneDVN()",
      "error LZ_ULN_InvalidConfigType(uint32 configType)",
      "error LZ_ULN_InvalidConfirmations()",
      "error LZ_ULN_InvalidLegacyType1Option()",
      "error LZ_ULN_InvalidLegacyType2Option()",
      "error LZ_ULN_InvalidOptionalDVNCount()",
      "error LZ_ULN_InvalidOptionalDVNThreshold()",
      "error LZ_ULN_InvalidRequiredDVNCount()",
      "error LZ_ULN_InvalidWorkerId(uint8 workerId)",
      "error LZ_ULN_InvalidWorkerOptions(uint256 cursor)",
      "error LZ_ULN_Unsorted()",
      "error LZ_ULN_UnsupportedEid(uint32 eid)",
      "error LZ_ULN_UnsupportedOptionType(uint16 optionType)",
      "error Transfer_NativeFailed(address _to, uint256 _value)",
      "error Transfer_ToAddressIsZero()",
      "event DVNFeePaid(address[] requiredDVNs, address[] optionalDVNs, uint256[] fees)",
      "event DefaultExecutorConfigsSet(tuple(uint32 eid, tuple(uint32 maxMessageSize, address executor) config)[] params)",
      "event DefaultUlnConfigsSet(tuple(uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] params)",
      "event ExecutorConfigSet(address oapp, uint32 eid, tuple(uint32 maxMessageSize, address executor) config)",
      "event ExecutorFeePaid(address executor, uint256 fee)",
      "event LzTokenFeeWithdrawn(address lzToken, address receiver, uint256 amount)",
      "event NativeFeeWithdrawn(address worker, address receiver, uint256 amount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event TreasuryNativeFeeCapSet(uint256 newTreasuryNativeFeeCap)",
      "event TreasurySet(address treasury)",
      "event UlnConfigSet(address oapp, uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)",
      "function executorConfigs(address oapp, uint32 eid) view returns (uint32 maxMessageSize, address executor)",
      "function fees(address worker) view returns (uint256)",
      "function getAppUlnConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs))",
      "function getConfig(uint32 _eid, address _oapp, uint32 _configType) view returns (bytes)",
      "function getExecutorConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint32 maxMessageSize, address executor) rtnConfig)",
      "function getUlnConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) rtnConfig)",
      "function isSupportedEid(uint32 _eid) view returns (bool)",
      "function messageLibType() pure returns (uint8)",
      "function owner() view returns (address)",
      "function quote(tuple(uint64 nonce, uint32 srcEid, address sender, uint32 dstEid, bytes32 receiver, bytes32 guid, bytes message) _packet, bytes _options, bool _payInLzToken) view returns (tuple(uint256 nativeFee, uint256 lzTokenFee))",
      "function renounceOwnership()",
      "function send(tuple(uint64 nonce, uint32 srcEid, address sender, uint32 dstEid, bytes32 receiver, bytes32 guid, bytes message) _packet, bytes _options, bool _payInLzToken) returns (tuple(uint256 nativeFee, uint256 lzTokenFee), bytes)",
      "function setConfig(address _oapp, tuple(uint32 eid, uint32 configType, bytes config)[] _params)",
      "function setDefaultExecutorConfigs(tuple(uint32 eid, tuple(uint32 maxMessageSize, address executor) config)[] _params)",
      "function setDefaultUlnConfigs(tuple(uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] _params)",
      "function setTreasury(address _treasury)",
      "function setTreasuryNativeFeeCap(uint256 _newTreasuryNativeFeeCap)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function treasury() view returns (address)",
      "function version() pure returns (uint64 major, uint8 minor, uint8 endpointVersion)",
      "function withdrawFee(address _to, uint256 _amount)",
      "function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount)"
    ],
    "base:0xc6868eDF1D2a7A8b759856cb8Afa333210dFEda6": [
      "constructor(address _endpoint, address _owner, uint32 _eid, uint16 _maxFillsPerSettle)",
      "error EnforcedPause()",
      "error ExpectedPause()",
      "error InvalidDelegate()",
      "error InvalidEndpointCall()",
      "error LzTokenUnavailable()",
      "error NoPeer(uint32 eid)",
      "error NotEnoughNative(uint256 msgValue)",
      "error OnlyEndpoint(address addr)",
      "error OnlyPeer(uint32 eid, bytes32 sender)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ReentrancyGuardReentrantCall()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SafeERC20FailedOperation(address token)",
      "event Cancel(bytes32 indexed orderId)",
      "event CancelSent(bytes32 indexed orderId, bytes32 guid, uint64 nonce, uint256 fee)",
      "event ChainRemoved(uint32 indexed eid)",
      "event ChainSupported(uint32 indexed eid)",
      "event Deposit(bytes32 indexed orderId, tuple(uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient) order)",
      "event DstHookExecuted(bytes32 indexed orderId, address indexed preferredToken, uint256 amountReceived)",
      "event Fill(bytes32 indexed orderId, tuple(uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient) order)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event PeerSet(uint32 eid, bytes32 peer)",
      "event Settle(bytes32 indexed orderId)",
      "event SettleSent(uint32 indexed srcEid, address indexed filler, bytes payload, bytes32 guid, uint64 nonce, uint256 fee)",
      "event SrcHookExecuted(bytes32 indexed orderId, address indexed preferredToken, uint256 amountReceived)",
      "event Unpaused(address account)",
      "event Withdraw(address indexed holder, address indexed token, uint256 amount)",
      "event settlementFailed(bytes32 indexed orderId, uint32 expectedEid, uint32 submittedEid, string reason)",
      "function ENDPOINT_ID() view returns (uint32)",
      "function MAX_FILLS_PER_SETTLE() view returns (uint16)",
      "function addAllowedHook(address hook)",
      "function addAllowedSolver(address solver)",
      "function addSupportedChain(uint32 eid)",
      "function addSupportedChains(uint32[] eids) returns (bool[] results)",
      "function allowInitializePath(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin) view returns (bool)",
      "function cancel(bytes32 orderId, tuple(uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient) orderToCancel, bytes extraOptions) payable",
      "function cancel(bytes32 orderId)",
      "function deposit(tuple(uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient) order, bytes signature, tuple(address hookAddress, address preferredToken, uint256 minPreferedTokenAmountOut, bytes instructions) hook)",
      "function deposit(tuple(uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient) order, bytes signature)",
      "function depositNative(tuple(uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient) order) payable",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function emergencyCancel(bytes32 orderId, address recipient)",
      "function emergencyWithdraw(address token, uint256 amount, address user, bool isLocked, address recipient)",
      "function emergencyWithdraw(address token, uint256 amount)",
      "function endpoint() view returns (address)",
      "function fill(tuple(uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient) order) payable",
      "function fill(tuple(uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient) order, tuple(address hookAddress, address preferredToken, bytes instructions, uint256 preferedDstInputAmount) hook) payable",
      "function getLockedBalances(address offerer, address token) view returns (uint256)",
      "function getUnlockedBalances(address offerer, address token) view returns (uint256)",
      "function hash(tuple(uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient) order) pure returns (bytes32)",
      "function isAllowedHook(address) view returns (bool)",
      "function isAllowedSolver(address) view returns (bool)",
      "function isComposeMsgSender(tuple(uint32 srcEid, bytes32 sender, uint64 nonce), bytes, address _sender) view returns (bool)",
      "function isSupportedChain(uint32) view returns (bool)",
      "function lzReceive(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, bytes32 _guid, bytes _message, address _executor, bytes _extraData) payable",
      "function nextNonce(uint32, bytes32) view returns (uint64 nonce)",
      "function oAppVersion() pure returns (uint64 senderVersion, uint64 receiverVersion)",
      "function orderStatus(bytes32) view returns (uint8)",
      "function orders(bytes32) view returns (uint128 inputAmount, uint128 outputAmount, address inputToken, address outputToken, uint32 startTime, uint32 endTime, uint32 srcEid, uint32 dstEid, address offerer, address recipient)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function peers(uint32 eid) view returns (bytes32 peer)",
      "function quote(uint32 _dstEid, uint8 _msgType, bytes _options, bool _payInLzToken, uint32 _srcEid, address _filler) view returns (uint256 fee)",
      "function removeAllowedHook(address hook)",
      "function removeAllowedSolver(address solver)",
      "function removeSupportedChain(uint32 eid)",
      "function renounceOwnership()",
      "function setDelegate(address _delegate)",
      "function setPeer(uint32 _eid, bytes32 _peer)",
      "function settle(uint32 srcEid, address filler, bytes extraOptions) payable",
      "function srcEidToFillerFills(uint32, address, uint256) view returns (bytes32)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function withdraw(address token, uint256 amount)"
    ],
    "base:0xc70AB6f32772f59fBfc23889Caf4Ba3376C84bAf": [
      "constructor(address _endpoint)",
      "error LZ_MessageLib_OnlyEndpoint()",
      "error LZ_ULN_AtLeastOneDVN()",
      "error LZ_ULN_InvalidConfigType(uint32 configType)",
      "error LZ_ULN_InvalidConfirmations()",
      "error LZ_ULN_InvalidEid()",
      "error LZ_ULN_InvalidOptionalDVNCount()",
      "error LZ_ULN_InvalidOptionalDVNThreshold()",
      "error LZ_ULN_InvalidPacketHeader()",
      "error LZ_ULN_InvalidPacketVersion()",
      "error LZ_ULN_InvalidRequiredDVNCount()",
      "error LZ_ULN_Unsorted()",
      "error LZ_ULN_UnsupportedEid(uint32 eid)",
      "error LZ_ULN_Verifying()",
      "event DefaultUlnConfigsSet(tuple(uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] params)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PayloadVerified(address dvn, bytes header, uint256 confirmations, bytes32 proofHash)",
      "event UlnConfigSet(address oapp, uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)",
      "function assertHeader(bytes _packetHeader, uint32 _localEid) pure",
      "function commitVerification(bytes _packetHeader, bytes32 _payloadHash)",
      "function getAppUlnConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs))",
      "function getConfig(uint32 _eid, address _oapp, uint32 _configType) view returns (bytes)",
      "function getUlnConfig(address _oapp, uint32 _remoteEid) view returns (tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) rtnConfig)",
      "function hashLookup(bytes32 headerHash, bytes32 payloadHash, address dvn) view returns (bool submitted, uint64 confirmations)",
      "function isSupportedEid(uint32 _eid) view returns (bool)",
      "function messageLibType() pure returns (uint8)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setConfig(address _oapp, tuple(uint32 eid, uint32 configType, bytes config)[] _params)",
      "function setDefaultUlnConfigs(tuple(uint32 eid, tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) config)[] _params)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function verifiable(tuple(uint64 confirmations, uint8 requiredDVNCount, uint8 optionalDVNCount, uint8 optionalDVNThreshold, address[] requiredDVNs, address[] optionalDVNs) _config, bytes32 _headerHash, bytes32 _payloadHash) view returns (bool)",
      "function verify(bytes _packetHeader, bytes32 _payloadHash, uint64 _confirmations)",
      "function version() pure returns (uint64 major, uint8 minor, uint8 endpointVersion)"
    ],
    "base:0xCcD558d6839e128320bBC932CBBa2c890a5518E8": [
      "error LZ_Treasury_LzTokenNotEnabled()",
      "error Transfer_NativeFailed(address _to, uint256 _value)",
      "error Transfer_ToAddressIsZero()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getFee(address, uint32, uint256 _totalFee, bool _payInLzToken) view returns (uint256)",
      "function lzTokenEnabled() view returns (bool)",
      "function lzTokenFee() view returns (uint256)",
      "function nativeBP() view returns (uint256)",
      "function owner() view returns (address)",
      "function payFee(address, uint32, uint256 _totalFee, bool _payInLzToken) payable returns (uint256)",
      "function renounceOwnership()",
      "function setLzTokenEnabled(bool _lzTokenEnabled)",
      "function setLzTokenFee(uint256 _lzTokenFee)",
      "function setNativeFeeBP(uint256 _nativeBP)",
      "function transferOwnership(address newOwner)",
      "function withdrawLzToken(address _messageLib, address _lzToken, address _to, uint256 _amount)",
      "function withdrawNativeFee(address _messageLib, address _to, uint256 _amount)",
      "function withdrawToken(address _token, address _to, uint256 _amount)"
    ]
  },
  "usedTemplates": {
    "layerzero/EndpointV2": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "layerzero/OneSigMultisig": "0xc11771171058a9b7b769e672624ae0e1bc69bd278173d8b2fd0260d666354861",
    "layerzero/ReadLib1002": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "layerzero/ReceiveUln302": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "layerzero/SendUln302": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d"
  },
  "usedBlockNumbers": { "base": 36957861 },
  "permissionsConfigHash": "0xe27f975b5ed5531f7a61f697aa9576f67268ebbbf09e5f85c35cbd15e7902bad"
}
