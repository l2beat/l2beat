{
  "name": "appchain",
  "chain": "ethereum",
  "timestamp": 1754901900,
  "configHash": "0xd1eb0c0a2b75d03bff765bd453c80cefe9b84ddc8ffb3ab9008106a72754e761",
  "entries": [
    {
      "name": "Inbox",
      "address": "eth:0x010aDE5d8F9DC340531140802438798C189c36E0",
      "type": "Contract",
      "template": "orbitstack/Inbox",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x84cd273689e720a0b7c657b57d9fb127684f3abb87fc4b337a2f0decd9464120"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.",
      "sinceTimestamp": 1731100211,
      "sinceBlock": 21145520,
      "values": {
        "$admin": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
        "$implementation": "eth:0x74110Fb401469FEA31A10680e28c9C4c17aFdd36",
        "$pastUpgrades": [
          [
            "2024-11-08T21:10:11.000Z",
            "0xffb5df6495a1e5fed0a0d1f3664f16e7b22739ac99d29a381a722f76a825107f",
            ["eth:0x0e76997707dd87D80d39597e3D2253453A3A02Fc"]
          ],
          [
            "2025-04-07T16:39:59.000Z",
            "0xf5f5d49d05e0d3979c352dcd9e7f81b36131a5e9ce6891fe1c51beeb251e8dcd",
            ["eth:0x74110Fb401469FEA31A10680e28c9C4c17aFdd36"]
          ]
        ],
        "$upgradeCount": 2,
        "allowListEnabled": false,
        "bridge": "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E",
        "getProxyAdmin": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
        "maxDataSize": 117964,
        "paused": false,
        "sequencerInbox": "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473"
      },
      "implementationNames": {
        "eth:0x010aDE5d8F9DC340531140802438798C189c36E0": "TransparentUpgradeableProxy",
        "eth:0x74110Fb401469FEA31A10680e28c9C4c17aFdd36": "Inbox"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "eth:0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x15D5fF2dEc328a1cF3D64413caaBdcE29bff050A",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Outbox",
      "address": "eth:0x190C720892d0786BF75B77B4acD21c726ea8FDEd",
      "type": "Contract",
      "template": "orbitstack/Outbox",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x9e054d18af00f58f7fa36e7a0fd5b04b9dacfb8c411d84c3591e57aa72faff9d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Facilitates L2 to L1 contract calls: Messages initiated from L2 (for example withdrawal messages) eventually resolve in execution on L1.",
      "sinceTimestamp": 1731100211,
      "sinceBlock": 21145520,
      "values": {
        "$admin": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
        "$implementation": "eth:0xf2078f19A9322E2e0Dfd02839C7D74215F2E7512",
        "$pastUpgrades": [
          [
            "2024-11-08T21:10:11.000Z",
            "0xffb5df6495a1e5fed0a0d1f3664f16e7b22739ac99d29a381a722f76a825107f",
            ["eth:0xf2078f19A9322E2e0Dfd02839C7D74215F2E7512"]
          ]
        ],
        "$upgradeCount": 1,
        "bridge": "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E",
        "l2ToL1BatchNum": 0,
        "l2ToL1Block": 0,
        "l2ToL1EthBlock": 0,
        "l2ToL1OutputId": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "l2ToL1Sender": "eth:0x0000000000000000000000000000000000000000",
        "l2ToL1Timestamp": 0,
        "OUTBOX_VERSION": 2,
        "rollup": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B"
      },
      "implementationNames": {
        "eth:0x190C720892d0786BF75B77B4acD21c726ea8FDEd": "TransparentUpgradeableProxy",
        "eth:0xf2078f19A9322E2e0Dfd02839C7D74215F2E7512": "Outbox"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "Bridge",
      "address": "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E",
      "type": "Contract",
      "template": "orbitstack/Bridge",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x51c0020e16ab14fa334bbb0c637103c261dee3865d1816e88356aaaa5b629bb9"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Escrow contract for the project's gas token (can be different from ETH). Keeps a list of allowed Inboxes and Outboxes for canonical bridge messaging.",
      "ignoreInWatchMode": [
        "delayedMessageCount",
        "sequencerMessageCount",
        "sequencerReportedSubMessageCount"
      ],
      "sinceTimestamp": 1731100211,
      "sinceBlock": 21145520,
      "values": {
        "$admin": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
        "$implementation": "eth:0x480214c3B0707a1e083A3Ae97209FCb671471109",
        "$pastUpgrades": [
          [
            "2024-11-08T21:10:11.000Z",
            "0xffb5df6495a1e5fed0a0d1f3664f16e7b22739ac99d29a381a722f76a825107f",
            ["eth:0x480214c3B0707a1e083A3Ae97209FCb671471109"]
          ]
        ],
        "$upgradeCount": 1,
        "activeOutbox": "eth:0x0000000000000000000000000000000000000000",
        "allowedDelayedInboxList": [
          "eth:0x010aDE5d8F9DC340531140802438798C189c36E0",
          "eth:0x269F6f6FC8177a5A8c475AE0e2487508634EC8Ed"
        ],
        "allowedOutboxList": ["eth:0x190C720892d0786BF75B77B4acD21c726ea8FDEd"],
        "delayedMessageCount": 5088,
        "inboxHistory": [
          "eth:0x010aDE5d8F9DC340531140802438798C189c36E0",
          "eth:0x269F6f6FC8177a5A8c475AE0e2487508634EC8Ed"
        ],
        "outboxHistory": ["eth:0x190C720892d0786BF75B77B4acD21c726ea8FDEd"],
        "rollup": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B",
        "sequencerInbox": "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473",
        "sequencerMessageCount": 2507,
        "sequencerReportedSubMessageCount": 487210
      },
      "fieldMeta": {
        "allowedOutboxList": {
          "severity": "HIGH",
          "description": "Can make calls as the bridge, steal all funds."
        },
        "outboxHistory": {
          "severity": "HIGH",
          "description": "All Outboxes that were ever set as allowed in the bridge."
        },
        "allowedDelayedInboxList": {
          "severity": "HIGH",
          "description": "Allowed to mint the gastoken on L2 and call `enqueueDelayedMessage()` on the bridge."
        },
        "inboxHistory": {
          "severity": "HIGH",
          "description": "All Inboxes that were ever set as allowed in the bridge."
        }
      },
      "implementationNames": {
        "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E": "TransparentUpgradeableProxy",
        "eth:0x480214c3B0707a1e083A3Ae97209FCb671471109": "Bridge"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "CertManager",
      "address": "eth:0x1Ff280d8B34E97E2CcA0bdb461F4bA2CF9b8E494",
      "type": "Contract",
      "sourceHashes": [
        "0xe2fe482c8972a84ccf0c6bb6c2b0d3540f1fcf9b21bb5ec08a14cd11659e3e9d"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1750699271,
      "sinceBlock": 22768583,
      "values": {
        "$immutable": true,
        "BASIC_CONSTRAINTS_OID": "0x6351d72a43cb42fb9a2531a28608c278c89629f8f025b5f5dc705f3fe45e950a",
        "CERT_ALGO_OID": "0x53ce037f0dfaa43ef13b095f04e68a6b5e3f1519a01a3203a1e6440ba915b87e",
        "EC_PUB_KEY_OID": "0xb60fee1fd85f867dd7c8d16884a49a20287ebe4c0fb49294e9825988aa8e42b4",
        "KEY_USAGE_OID": "0x45529d8772b07ebd6d507a1680da791f4a2192882bf89d518801579f7a5167d2",
        "ROOT_CA_CERT_HASH": "0x311d96fcd5c5e0ccf72ef548e2ea7d4c0cd53ad7c4cc49e67471aed41d61f185",
        "ROOT_CA_CERT_MAX_PATH_LEN": -1,
        "ROOT_CA_CERT_NOT_AFTER": 2519044085,
        "ROOT_CA_CERT_PUB_KEY": "0xfc0254eba608c1f36870e29ada90be46383292736e894bfff672d989444b5051e534a4b1f6dbe3c0bc581a32b7b176070ede12d69a3fea211b66e752cf7dd1dd095f6f1370f4170843d9dc100121e4cf63012809664487c9796284304dc53ff4",
        "ROOT_CA_CERT_SUBJECT_HASH": "0x3c3e2e5f1dd14dee5db88341ba71521e939afdb7881aa24c9f1e1c007a2fa8b6",
        "SECP_384_R1_OID": "0xbd74344bb507daeb9ed315bc535f24a236ccab72c5cd6945fb0efe5c037e2097"
      },
      "implementationNames": {
        "eth:0x1Ff280d8B34E97E2CcA0bdb461F4bA2CF9b8E494": "CertManager"
      }
    },
    {
      "name": "RollupEventInbox",
      "address": "eth:0x269F6f6FC8177a5A8c475AE0e2487508634EC8Ed",
      "type": "Contract",
      "template": "orbitstack/RollupEventInbox",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x6ce471861570d55dc6e9a09337d990c13efb0c7abb47f36a5de48a9a7086f6e8"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Helper contract sending configuration data over the bridge during the systems initialization.",
      "sinceTimestamp": 1731100211,
      "sinceBlock": 21145520,
      "values": {
        "$admin": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
        "$implementation": "eth:0x1c48b5526071EB2c89ccA3F8afC061b12944eED5",
        "$pastUpgrades": [
          [
            "2024-11-08T21:10:11.000Z",
            "0xffb5df6495a1e5fed0a0d1f3664f16e7b22739ac99d29a381a722f76a825107f",
            ["eth:0x1c48b5526071EB2c89ccA3F8afC061b12944eED5"]
          ]
        ],
        "$upgradeCount": 1,
        "bridge": "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E",
        "rollup": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B"
      },
      "implementationNames": {
        "eth:0x269F6f6FC8177a5A8c475AE0e2487508634EC8Ed": "TransparentUpgradeableProxy",
        "eth:0x1c48b5526071EB2c89ccA3F8afC061b12944eED5": "RollupEventInbox"
      }
    },
    {
      "name": "RollupProxy",
      "address": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B",
      "type": "Contract",
      "template": "orbitstack/RollupProxy_fastConfirm",
      "sourceHashes": [
        "0xb8da0b3748daac768860783e8555198fd2d1bbdffb775b81557a7124890c7eca",
        "0x86c7032e0f4b5468f1eb92c79b73ab4c7f053fc7bdfc88fdd360e2fe7baa1072"
      ],
      "proxyType": "Arbitrum proxy",
      "description": "Central contract for the project's configuration like its execution logic hash (`wasmModuleRoot`) and addresses of the other system contracts. Entry point for Proposers creating new Rollup Nodes (state commitments) and Challengers submitting fraud proofs (In the Orbit stack, these two roles are both held by the Validators).",
      "ignoreInWatchMode": [
        "firstUnresolvedNode",
        "latestConfirmed",
        "latestNodeCreated",
        "lastStakeBlock"
      ],
      "sinceTimestamp": 1731100211,
      "sinceBlock": 21145520,
      "values": {
        "$admin": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3",
        "$implementation": [
          "eth:0xD6DC5196b9E1c3fcA62CCDA876ebFFb3eDA384Ea",
          "eth:0xa8Ae2ed62A978e2108a1C7CBfdb43a5CBfdd2aD0"
        ],
        "$pastUpgrades": [
          [
            "2024-11-08T21:10:11.000Z",
            "0xffb5df6495a1e5fed0a0d1f3664f16e7b22739ac99d29a381a722f76a825107f",
            [
              "eth:0xD6DC5196b9E1c3fcA62CCDA876ebFFb3eDA384Ea",
              "eth:0xa8Ae2ed62A978e2108a1C7CBfdb43a5CBfdd2aD0"
            ]
          ]
        ],
        "$upgradeCount": 1,
        "anyTrustFastConfirmer": "eth:0x0000000000000000000000000000000000000000",
        "arbOsFromWmRoot": "ArbOS v32 wasmModuleRoot",
        "baseStake": "100000000000000000",
        "bridge": "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E",
        "chainId": 466,
        "challengeManager": "eth:0xB9B007aE55B81dd1498Bc500a54ad9Ae53234c9C",
        "challenges": [],
        "confirmPeriodBlocks": 45818,
        "currentRequiredStake": "100000000000000000",
        "extraChallengeTimeBlocks": 200,
        "firstUnresolvedNode": 588,
        "inbox": "eth:0x010aDE5d8F9DC340531140802438798C189c36E0",
        "isERC20Enabled": false,
        "isPostBoLD": false,
        "lastStakeBlock": 21145825,
        "latestConfirmed": 587,
        "latestNodeCreated": 591,
        "loserStakeEscrow": "eth:0x4fb280195D13e352CE8a9b9b0B41f3e3756066A4",
        "minimumAssertionPeriod": 75,
        "outbox": "eth:0x190C720892d0786BF75B77B4acD21c726ea8FDEd",
        "owner": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3",
        "paused": false,
        "rollupDeploymentBlock": 21145520,
        "rollupEventInbox": "eth:0x269F6f6FC8177a5A8c475AE0e2487508634EC8Ed",
        "sequencerInbox": "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473",
        "setValidatorCount": 1,
        "stakerCount": 1,
        "stakeToken": "eth:0x0000000000000000000000000000000000000000",
        "totalWithdrawableFunds": 0,
        "VALIDATOR_AFK_BLOCKS": 45818,
        "validators": ["eth:0xef6Ef32bcC96B9D94f50A51A42dB4825D6337780"],
        "validatorUtils": "eth:0xA79305c7D5Ad6F8AF0292c863957a2488F13f0d1",
        "validatorWalletCreator": "eth:0x6FB4500c12E1303aD174085FDEce0a097f578ED7",
        "validatorWhitelistDisabled": false,
        "wasmModuleRoot": "0x184884e1eb9fefdc158f6c8ac912bb183bf3cf83f0090317e0bc4ac5860baa39",
        "zombieAddress": [],
        "zombieCount": 0,
        "zombieLatestStakedNode": []
      },
      "fieldMeta": {
        "minimumAssertionPeriod": {
          "description": "Minimum time delta between newly created nodes (stateUpdates). This is checked on `stakeOnNewNode()`. Format is number of ETHEREUM blocks, even for L3s. "
        },
        "confirmPeriodBlocks": {
          "description": "Challenge period. (Number of ETHEREUM blocks until a node is confirmed, even for L3s)."
        },
        "wasmModuleRoot": {
          "description": "Root hash of the WASM module used for execution, like a fingerprint of the L2 logic. Can be associated with ArbOS versions."
        },
        "arbOsFromWmRoot": {
          "description": "ArbOS version derived from known wasmModuleRoots."
        },
        "setValidatorCount": {
          "description": "Increments on each Validator change."
        },
        "challenges": {
          "description": "Emitted on createChallenge() in RollupUserLogic."
        }
      },
      "implementationNames": {
        "eth:0x28293c7855797B0441000EF144119727f3cBCA9B": "RollupProxy",
        "eth:0xD6DC5196b9E1c3fcA62CCDA876ebFFb3eDA384Ea": "RollupAdminLogic",
        "eth:0xa8Ae2ed62A978e2108a1C7CBfdb43a5CBfdd2aD0": "RollupUserLogic"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "0xbb9d58e9527566138b682f3a207c0976d5359837f6e330f4017434cca983ff41": "ArbOS v1-rc1 wasmModuleRoot",
            "0x9d68e40c47e3b87a8a7e6368cc52915720a6484bb2f47ceabad7e573e3a11232": "ArbOS v2.1 wasmModuleRoot",
            "0x53c288a0ca7100c0f2db8ab19508763a51c7fd1be125d376d940a65378acaee7": "ArbOS v3 wasmModuleRoot",
            "0x588762be2f364be15d323df2aa60ffff60f2b14103b34823b6f7319acd1ae7a3": "ArbOS v3.1 wasmModuleRoot",
            "0xcfba6a883c50a1b4475ab909600fa88fc9cceed9e3ff6f43dccd2d27f6bd57cf": "ArbOS v3.2 wasmModuleRoot",
            "0xa24ccdb052d92c5847e8ea3ce722442358db4b00985a9ee737c4e601b6ed9876": "ArbOS v4 wasmModuleRoot",
            "0x1e09e6d9e35b93f33ed22b2bc8dc10bbcf63fdde5e8a1fb8cc1bcd1a52f14bd0": "ArbOS v5 wasmModuleRoot",
            "0x3848eff5e0356faf1fc9cafecb789584c5e7f4f8f817694d842ada96613d8bab": "ArbOS v6 wasmModuleRoot",
            "0x53dd4b9a3d807a8cbb4d58fbfc6a0857c3846d46956848cae0a1cc7eca2bb5a8": "ArbOS v7 wasmModuleRoot",
            "0x2b20e1490d1b06299b222f3239b0ae07e750d8f3b4dedd19f500a815c1548bbc": "ArbOS v7.1 wasmModuleRoot",
            "0xd1842bfbe047322b3f3b3635b5fe62eb611557784d17ac1d2b1ce9c170af6544": "ArbOS v9 wasmModuleRoot",
            "0x6b94a7fc388fd8ef3def759297828dc311761e88d8179c7ee8d3887dc554f3c3": "ArbOS v10 wasmModuleRoot",
            "0xda4e3ad5e7feacb817c21c8d0220da7650fe9051ece68a3f0b1c5d38bbb27b21": "ArbOS v10.1 wasmModuleRoot",
            "0x0754e09320c381566cc0449904c377a52bd34a6b9404432e80afd573b67f7b17": "ArbOS v10.2 wasmModuleRoot",
            "0xf559b6d4fa869472dabce70fe1c15221bdda837533dfd891916836975b434dec": "ArbOS v10.3 wasmModuleRoot",
            "0xf4389b835497a910d7ba3ebfb77aa93da985634f3c052de1290360635be40c4a": "ArbOS v11 wasmModuleRoot",
            "0x68e4fe5023f792d4ef584796c84d710303a5e12ea02d6e37e2b5e9c4332507c4": "ArbOS v11.1 wasmModuleRoot",
            "0x8b104a2e80ac6165dc58b9048de12f301d70b02a0ab51396c22b4b4b802a16a4": "ArbOS v20 wasmModuleRoot",
            "0xb0de9cb89e4d944ae6023a3b62276e54804c242fd8c4c2d8e6cc4450f5fa8b1b": "ArbOS v30 wasmModuleRoot",
            "0x260f5fa5c3176a856893642e149cf128b5a8de9f828afec8d11184415dd8dc69": "ArbOS v31 wasmModuleRoot",
            "0x184884e1eb9fefdc158f6c8ac912bb183bf3cf83f0090317e0bc4ac5860baa39": "ArbOS v32 wasmModuleRoot",
            "0xdb698a2576298f25448bc092e52cf13b1e24141c997135d70f217d674bbeb69a": "ArbOS v40 wasmModuleRoot",
            "0xe81f986823a85105c5fd91bb53b4493d38c0c26652d23f76a7405ac889908287": "Celestia Nitro 3.2.1 wasmModuleRoot",
            "0xaf1dbdfceb871c00bfbb1675983133df04f0ed04e89647812513c091e3a982b3": "Celestia Nitro 3.3.2 wasmModuleRoot"
          }
        }
      ],
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "Caldera Multisig 3",
      "address": "eth:0x2bf43034b9559643e986A2fE3cE015a18247b904",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B",
          "description": "Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability, DACs and the fastConfirmer role, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes.",
          "role": ".owner",
          "via": [
            { "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x010aDE5d8F9DC340531140802438798C189c36E0",
          "role": "admin",
          "via": [
            { "address": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E" },
            { "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x190C720892d0786BF75B77B4acD21c726ea8FDEd",
          "role": "admin",
          "via": [
            { "address": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E" },
            { "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E",
          "role": "admin",
          "via": [
            { "address": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E" },
            { "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x269F6f6FC8177a5A8c475AE0e2487508634EC8Ed",
          "role": "admin",
          "via": [
            { "address": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E" },
            { "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B",
          "role": "admin",
          "via": [
            { "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3",
          "role": "admin",
          "via": [
            { "address": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E" },
            { "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473",
          "role": "admin",
          "via": [
            { "address": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E" },
            { "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xB9B007aE55B81dd1498Bc500a54ad9Ae53234c9C",
          "role": "admin",
          "via": [
            { "address": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E" },
            { "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3",
          "role": ".executors"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1721713139,
      "sinceBlock": 20367195,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0xc4548687682246e5B6ee8f914635c9f47836eDFe",
          "eth:0x2F2d46D3dD36c8d1ae2Cb81c0cD2c05C68DBA675",
          "eth:0xe62a4A1e6D237d6fc40d88F819D5cE580a996A6b",
          "eth:0x12ee26aD74d50a1f6BDD90811387d1e0f3e7C76A",
          "eth:0x356000Cec4fC967f8FC372381D983426760A0391",
          "eth:0xbf853295743511e8DC5F03809d209C33fC136d24",
          "eth:0x15D5fF2dEc328a1cF3D64413caaBdcE29bff050A"
        ],
        "$threshold": 4,
        "domainSeparator": "0xd91194ba8cca06b67a77df9ba8745b666c7af26af03b914ede155b940b307d6b",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 7 (57%)",
        "nonce": 24,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0x2bf43034b9559643e986A2fE3cE015a18247b904": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "address": "eth:0x2F2d46D3dD36c8d1ae2Cb81c0cD2c05C68DBA675",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Caldera",
      "address": "eth:0x356000Cec4fC967f8FC372381D983426760A0391",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x4fb280195D13e352CE8a9b9b0B41f3e3756066A4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OneStepProofEntry",
      "address": "eth:0x5F8FE936F629AF71e7af6C7844692f98019d6163",
      "type": "Contract",
      "template": "orbitstack/OneStepProofEntry",
      "sourceHashes": [
        "0x96f85480073b58d0e985cd6c68956f4a52f5ed8b2ce751b18868e2e830be3678"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1723493255,
      "sinceBlock": 20514818,
      "values": {
        "$immutable": true,
        "prover0": "eth:0xFe95b1f7cf7D7D14E9e38dEE0EFE1c9D3AaA3e69",
        "proverHostIo": "eth:0xd79fd59b73c814D9607aB93C4A1aDCea06F91692",
        "proverMath": "eth:0xFe53F58bAd7B83B01C47CC86471507911263ac91",
        "proverMem": "eth:0xf6a307A5868eB9c4a00F5efbD1EF8462AC63783f"
      },
      "implementationNames": {
        "eth:0x5F8FE936F629AF71e7af6C7844692f98019d6163": "OneStepProofEntry"
      }
    },
    {
      "name": "UpgradeExecutor",
      "address": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3",
      "type": "Contract",
      "template": "orbitstack/UpgradeExecutor",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0xa7ff878cfd433a428d567d3b90fe1df400a048a1af5298f22cd4cd4fc25bdecd"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Central contract defining the access control permissions for upgrading the system contract implementations.",
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B",
          "description": "Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability, DACs and the fastConfirmer role, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes.",
          "role": ".owner"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1731100211,
      "sinceBlock": 21145520,
      "values": {
        "$admin": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
        "$implementation": "eth:0x31c97a0A216CCd730bd8ab3ecAA97eACbA27b11a",
        "$pastUpgrades": [
          [
            "2024-11-08T21:10:11.000Z",
            "0xffb5df6495a1e5fed0a0d1f3664f16e7b22739ac99d29a381a722f76a825107f",
            ["eth:0x31c97a0A216CCd730bd8ab3ecAA97eACbA27b11a"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "ADMIN_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3"]
          },
          "EXECUTOR_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["eth:0x2bf43034b9559643e986A2fE3cE015a18247b904"]
          }
        },
        "ADMIN_ROLE": "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
        "executors": ["eth:0x2bf43034b9559643e986A2fE3cE015a18247b904"]
      },
      "implementationNames": {
        "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3": "TransparentUpgradeableProxy",
        "eth:0x31c97a0A216CCd730bd8ab3ecAA97eACbA27b11a": "UpgradeExecutor"
      },
      "category": { "name": "Governance", "priority": 3 }
    },
    {
      "name": "SequencerInbox",
      "address": "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473",
      "type": "Contract",
      "template": "orbitstack/SequencerInbox_Espresso",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x724a7b4f0fa3a5ce6b00cc932e70b6b83a05d1a846a341cbf8477dc95f6c916c"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The Espresso TEE sequencer (registered in this contract) can submit transaction batches or commitments here.",
      "ignoreInWatchMode": [
        "batchCount",
        "totalDelayedMessagesRead",
        "postsBlobs"
      ],
      "sinceTimestamp": 1731100211,
      "sinceBlock": 21145520,
      "values": {
        "$admin": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
        "$implementation": "eth:0x2C381da225148f7d6390f0EE4A162F958ec40e7A",
        "$pastUpgrades": [
          [
            "2024-11-08T21:10:11.000Z",
            "0xffb5df6495a1e5fed0a0d1f3664f16e7b22739ac99d29a381a722f76a825107f",
            ["eth:0xA9e877a129d0b77d11876184fe6eE38A7CeAffc8"]
          ],
          [
            "2025-04-07T16:39:59.000Z",
            "0xf5f5d49d05e0d3979c352dcd9e7f81b36131a5e9ce6891fe1c51beeb251e8dcd",
            ["eth:0x5EE6B586F1F8651dFd5432DEcd6D4dF1EbAdD203"]
          ],
          [
            "2025-05-29T19:59:23.000Z",
            "0x976f69fdd0d71817fd2f2f2b177c3dc0b5f8a2128730cafd1bcc9b84b16b848c",
            ["eth:0x2948690217F3C2fDD6166343da8A7Ac2B7f5c134"]
          ],
          [
            "2025-08-08T06:20:59.000Z",
            "0xfb159898c69ee602cf7e18b6c24e60b05cddb75a74c11050dc3600650c0ab7f0",
            ["eth:0x2C381da225148f7d6390f0EE4A162F958ec40e7A"]
          ]
        ],
        "$upgradeCount": 4,
        "batchCount": 2507,
        "batchPosterManager": "eth:0xC5dD640885cE582464e2fCa7b169581417822e6C",
        "batchPosters": ["eth:0xC5dD640885cE582464e2fCa7b169581417822e6C"],
        "bridge": "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E",
        "BROTLI_MESSAGE_HEADER_FLAG": "0x00",
        "dacKeyset": {
          "requiredSignatures": 1,
          "membersCount": 1,
          "blsSignatures": [
            "YAfIyvypiucu7xiEgrATvyLZBn8idjbVcn5znqRMSD8tlphh4MlB7pOSAb9ZA4W2phazbQ8k25lyCdfwah/B1pRfQPCcPcDEauIjY6XncSDNs2g7P3q/dyx0UOVOZ+7iuwyQ9J1JNCvaPjGXjo1tMU1usrREWaAENe+zYYDskbQBRlm8iLqOzKNWdIruW0K4OAz65D0pgy6vKe3hTqZzxibvyl9Uee/ussI4T3USkg3u/eHA0LX3oU6cR9OMjeCvuAv6g+KEJuIr+eS37A8OMxcp+jSM200kLJd4xEFCJS7wH756MNPUKOyv4DQxFylUSAocRNl4KZ2ZoJlDUv8vCVssP8nBEZlrh7+qs0ulErN+dkuSY65dx6O9tLcSXX65ag=="
          ]
        },
        "DAS_MESSAGE_HEADER_FLAG": "0x80",
        "DATA_AUTHENTICATED_FLAG": "0x40",
        "DATA_BLOB_HEADER_FLAG": "0x50",
        "espressoTEEVerifier": "eth:0xcC758349CBd99bAA7fAD0558634dAaB176c777D0",
        "HEADER_LENGTH": 40,
        "isUsingFeeToken": false,
        "keySetUpdates": 1,
        "maxDataSize": 117964,
        "maxTimeVariation": {
          "delayBlocks": 21600,
          "futureBlocks": 300,
          "delaySeconds": 259200,
          "futureSeconds": 3600
        },
        "postsBlobs": false,
        "reader4844": "eth:0x988d097EcB1d416ff9b0f2E4D8cEC4661F9E1871",
        "rollup": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B",
        "sequencerVersion": "0x88",
        "setIsBatchPosterCount": 5,
        "totalDelayedMessagesRead": 5087,
        "TREE_DAS_MESSAGE_HEADER_FLAG": "0x08",
        "ZERO_HEAVY_MESSAGE_HEADER_FLAG": "0x20"
      },
      "fieldMeta": {
        "maxTimeVariation": {
          "description": "Settable by the Rollup Owner. Transactions can only be force-included after the `delayBlocks` window (Sequencer-only) has passed."
        }
      },
      "implementationNames": {
        "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473": "TransparentUpgradeableProxy",
        "eth:0x2C381da225148f7d6390f0EE4A162F958ec40e7A": "SequencerInbox"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "QuoteVerifier",
      "address": "eth:0x816ADa3B63F3c643fb04152eA32B58Db89aadd89",
      "type": "Contract",
      "template": "espresso/Sequencing/QuoteVerifier",
      "sourceHashes": [
        "0x2ce21f391e19a4d7b963b79fced06804cb79a44416a35e9e11b229a9a6957b2e"
      ],
      "proxyType": "immutable",
      "description": "The QuoteVerifier contract is used by the EspressoTEEVerifier to verify the validity of the TEE quote. It references a PCCSRouter (eth:0xe20C4d54afBbea5123728d5b7dAcD9CB3c65C39a), an access point for Intel SGX 'collateral', crucial references of which some modular contracts are unverified.",
      "sinceTimestamp": 1742466119,
      "sinceBlock": 22087444,
      "values": {
        "$immutable": true,
        "P256_VERIFIER": "eth:0xc2b78104907F722DABAc4C69f826a522B2754De4",
        "pccsRouter": "eth:0xe20C4d54afBbea5123728d5b7dAcD9CB3c65C39a",
        "quoteVersion": 3
      },
      "implementationNames": {
        "eth:0x816ADa3B63F3c643fb04152eA32B58Db89aadd89": "V3QuoteVerifier"
      }
    },
    {
      "name": "EspressoSGXTEEVerifier",
      "address": "eth:0x98206aBE6bdB21765458f27F199fd813343a3C3b",
      "type": "Contract",
      "template": "espresso/Sequencing/EspressoSGXTEEVerifier",
      "sourceHashes": [
        "0xb506b0038120d7c5021a0964fa2fa3ac35c16fe8c6d8942f99102c158074d57a"
      ],
      "proxyType": "immutable",
      "description": "Verifies attestations of an Intel SGX TEE.",
      "ignoreInWatchMode": ["registeredSigners", "validEnclaveHashes"],
      "sinceTimestamp": 1753737047,
      "sinceBlock": 23020234,
      "values": {
        "$immutable": true,
        "owner": "eth:0xDA8E38FEf4d5cF1997061e51945775a393E4965B",
        "pendingOwner": "eth:0x0000000000000000000000000000000000000000",
        "quoteVerifier": "eth:0x816ADa3B63F3c643fb04152eA32B58Db89aadd89",
        "registeredSigners": ["eth:0xFBd5a6E3850e1B65FBB664Fe17a4626bc1A379D0"],
        "validEnclaveHashes": [
          "0x57a4c42c7ef6538e9343b87d9ddbac17439fd0269f0ed8913651f22ab4f71c2b"
        ]
      },
      "fieldMeta": { "owner": { "severity": "HIGH" } },
      "implementationNames": {
        "eth:0x98206aBE6bdB21765458f27F199fd813343a3C3b": "EspressoSGXTEEVerifier"
      }
    },
    {
      "name": "ValidatorUtils",
      "address": "eth:0xA79305c7D5Ad6F8AF0292c863957a2488F13f0d1",
      "type": "Contract",
      "template": "orbitstack/ValidatorUtils",
      "sourceHashes": [
        "0xd9b36ec321be937cc727b5bdb0afa0e1a0a28448ef1a202d4f181a01ce57bdc8"
      ],
      "proxyType": "immutable",
      "description": "This contract implements view only utilities for validators.",
      "sinceTimestamp": 1723493639,
      "sinceBlock": 20514850,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xA79305c7D5Ad6F8AF0292c863957a2488F13f0d1": "ValidatorUtils"
      }
    },
    {
      "name": "ChallengeManager",
      "address": "eth:0xB9B007aE55B81dd1498Bc500a54ad9Ae53234c9C",
      "type": "Contract",
      "template": "orbitstack/ChallengeManager",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x1a095768302d7d1c3d02375eaa3341833b4f1aaac707e1c608bce478c87cbf27"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract that allows challenging state roots. Can be called through the RollupProxy by Validators or the UpgradeExecutor.",
      "sinceTimestamp": 1731100211,
      "sinceBlock": 21145520,
      "values": {
        "$admin": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
        "$implementation": "eth:0xE97d5ae76694836D2e016D80469B45D7aFb2ebaB",
        "$pastUpgrades": [
          [
            "2024-11-08T21:10:11.000Z",
            "0xffb5df6495a1e5fed0a0d1f3664f16e7b22739ac99d29a381a722f76a825107f",
            ["eth:0xE97d5ae76694836D2e016D80469B45D7aFb2ebaB"]
          ]
        ],
        "$upgradeCount": 1,
        "bridge": "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E",
        "osp": "eth:0x5F8FE936F629AF71e7af6C7844692f98019d6163",
        "resultReceiver": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B",
        "sequencerInbox": "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473",
        "totalChallengesCreated": 0
      },
      "implementationNames": {
        "eth:0xB9B007aE55B81dd1498Bc500a54ad9Ae53234c9C": "TransparentUpgradeableProxy",
        "eth:0xE97d5ae76694836D2e016D80469B45D7aFb2ebaB": "ChallengeManager"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "address": "eth:0xbf853295743511e8DC5F03809d209C33fC136d24",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xc4548687682246e5B6ee8f914635c9f47836eDFe",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xC5dD640885cE582464e2fCa7b169581417822e6C",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473",
          "description": "Add/remove batchPosters (Sequencers).",
          "role": ".batchPosterManager"
        },
        {
          "permission": "sequence",
          "from": "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473",
          "description": "Can submit transaction batches or commitments to the SequencerInbox contract on the host chain.",
          "role": ".batchPosters"
        }
      ]
    },
    {
      "name": "EspressoTEEVerifier",
      "address": "eth:0xcC758349CBd99bAA7fAD0558634dAaB176c777D0",
      "type": "Contract",
      "template": "espresso/Sequencing/EspressoTEEVerifier_gateway",
      "sourceHashes": [
        "0x6ccdd5bbf0ec94df446cc0d8fb3fc929c373c8d1dcbaced844d6e39997b294cb"
      ],
      "proxyType": "immutable",
      "description": "TEE gateway contract that can be used to 1) register signers that were generated inside a TEE and 2) verify the signatures of such signers. It supports both Intel SGX and AWS Nitro TEEs through modular contracts.",
      "sinceTimestamp": 1753737275,
      "sinceBlock": 23020253,
      "values": {
        "$immutable": true,
        "espressoNitroTEEVerifier": "eth:0xDa72802AaF0a7af96d9FF7d0D94A7388B85f9f24",
        "espressoSGXTEEVerifier": "eth:0x98206aBE6bdB21765458f27F199fd813343a3C3b",
        "owner": "eth:0xDA8E38FEf4d5cF1997061e51945775a393E4965B",
        "pendingOwner": "eth:0x0000000000000000000000000000000000000000"
      },
      "fieldMeta": {
        "owner": { "severity": "HIGH" },
        "espressoNitroTEEVerifier": { "severity": "HIGH" },
        "espressoSGXTEEVerifier": { "severity": "HIGH" }
      },
      "implementationNames": {
        "eth:0xcC758349CBd99bAA7fAD0558634dAaB176c777D0": "EspressoTEEVerifier"
      }
    },
    {
      "name": "OneStepProverHostIo",
      "address": "eth:0xd79fd59b73c814D9607aB93C4A1aDCea06F91692",
      "type": "Contract",
      "template": "orbitstack/OneStepProverHostIo",
      "sourceHashes": [
        "0x2e969e0e83aea53307795f6826413e39bb416a64bc6da18f3a339ffeef444d32"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1723493159,
      "sinceBlock": 20514810,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xd79fd59b73c814D9607aB93C4A1aDCea06F91692": "OneStepProverHostIo"
      }
    },
    {
      "name": "EspressoNitroTEEVerifier",
      "address": "eth:0xDa72802AaF0a7af96d9FF7d0D94A7388B85f9f24",
      "type": "Contract",
      "template": "espresso/Sequencing/EspressoNitroTEEVerifier",
      "sourceHashes": [
        "0x9a0f84345e9dc0b83470c088eba1df01ac6baf465d028aff97b004efb39f7054"
      ],
      "proxyType": "immutable",
      "description": "Verifies attestations of an AWS Nitro TEE.",
      "sinceTimestamp": 1753736531,
      "sinceBlock": 23020192,
      "values": {
        "$immutable": true,
        "ATTESTATION_DIGEST": "0x501a3a7a4e0cf54b03f2488098bdd59bc1c2e8d741a300d6b25926d531733fef",
        "ATTESTATION_TBS_PREFIX": "0x63ce814bd924c1ef12c43686e4cbf48ed1639a78387b0570c23ca921e8ce071c",
        "CABUNDLE_KEY": "0x8a8cb7aa1da17ada103546ae6b4e13ccc2fafa17adf5f93925e0a0a4e5681a6a",
        "CERTIFICATE_KEY": "0x925cec779426f44d8d555e01d2683a3a765ce2fa7562ca7352aeb09dfc57ea6a",
        "certManager": "eth:0x1Ff280d8B34E97E2CcA0bdb461F4bA2CF9b8E494",
        "DIGEST_KEY": "0x682a7e258d80bd2421d3103cbe71e3e3b82138116756b97b8256f061dc2f11fb",
        "MODULE_ID_KEY": "0x8ce577cf664c36ba5130242bf5790c2675e9f4e6986a842b607821bee25372ee",
        "NONCE_KEY": "0x7ab1577440dd7bedf920cb6de2f9fc6bf7ba98c78c85a3fa1f8311aac95e1759",
        "owner": "eth:0xDA8E38FEf4d5cF1997061e51945775a393E4965B",
        "PCRS_KEY": "0x61585f8bc67a4b6d5891a4639a074964ac66fc2241dc0b36c157dc101325367a",
        "pendingOwner": "eth:0x0000000000000000000000000000000000000000",
        "PUBLIC_KEY_KEY": "0xc7b28019ccfdbd30ffc65951d94bb85c9e2b8434111a000b5afd533ce65f57a4",
        "registeredSigners": [],
        "TIMESTAMP_KEY": "0x4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
        "USER_DATA_KEY": "0x5e4ea5393e4327b3014bc32f2264336b0d1ee84a4cfd197c8ad7e1e16829a16a",
        "validEnclaveHashes": []
      },
      "fieldMeta": {
        "owner": { "severity": "HIGH" },
        "validEnclaveHashes": { "severity": "HIGH" }
      },
      "implementationNames": {
        "eth:0xDa72802AaF0a7af96d9FF7d0D94A7388B85f9f24": "EspressoNitroTEEVerifier"
      }
    },
    {
      "address": "eth:0xDA8E38FEf4d5cF1997061e51945775a393E4965B",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x98206aBE6bdB21765458f27F199fd813343a3C3b",
          "description": "set the enclaveHash (hash of enclave's code and initial data) and delete all registered signers.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0xcC758349CBd99bAA7fAD0558634dAaB176c777D0",
          "description": "change the modular TEE verifier contracts.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0xDa72802AaF0a7af96d9FF7d0D94A7388B85f9f24",
          "description": "set the enclaveHash (hash of enclave's code and initial data) and delete all registered signers.",
          "role": ".owner"
        }
      ]
    },
    {
      "address": "eth:0xe62a4A1e6D237d6fc40d88F819D5cE580a996A6b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xef6Ef32bcC96B9D94f50A51A42dB4825D6337780",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "validate",
          "from": "eth:0x28293c7855797B0441000EF144119727f3cBCA9B",
          "description": "Can propose new state roots (called nodes) and challenge state roots on the host chain.",
          "role": ".validators"
        }
      ]
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0xf944f88083f41ff959fefbdcd6fc3ae633692b072b8497fb14cbdd843eded490"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x010aDE5d8F9DC340531140802438798C189c36E0",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x190C720892d0786BF75B77B4acD21c726ea8FDEd",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x269F6f6FC8177a5A8c475AE0e2487508634EC8Ed",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xB9B007aE55B81dd1498Bc500a54ad9Ae53234c9C",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1731100211,
      "sinceBlock": 21145520,
      "values": {
        "$immutable": true,
        "owner": "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3"
      },
      "implementationNames": {
        "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E": "ProxyAdmin"
      }
    },
    {
      "name": "OneStepProverMemory",
      "address": "eth:0xf6a307A5868eB9c4a00F5efbD1EF8462AC63783f",
      "type": "Contract",
      "template": "orbitstack/OneStepProverMemory",
      "sourceHashes": [
        "0x3955092d1dbd80f0910d7782a25da1e3da45533c7890928a1c6c63cbf5def5bf"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1723492979,
      "sinceBlock": 20514795,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xf6a307A5868eB9c4a00F5efbD1EF8462AC63783f": "OneStepProverMemory"
      }
    },
    {
      "address": "eth:0xFBd5a6E3850e1B65FBB664Fe17a4626bc1A379D0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OneStepProverMath",
      "address": "eth:0xFe53F58bAd7B83B01C47CC86471507911263ac91",
      "type": "Contract",
      "template": "orbitstack/OneStepProverMath",
      "sourceHashes": [
        "0x3de1ddc210fe283d7298c5f06879df577c6a475329a206b1928c74d10db656d5"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1723493075,
      "sinceBlock": 20514803,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xFe53F58bAd7B83B01C47CC86471507911263ac91": "OneStepProverMath"
      }
    },
    {
      "name": "OneStepProver0",
      "address": "eth:0xFe95b1f7cf7D7D14E9e38dEE0EFE1c9D3AaA3e69",
      "type": "Contract",
      "template": "orbitstack/OneStepProver0",
      "sourceHashes": [
        "0x642d283934aef1189cf62e1bcd34a5081762b33fdd3ec8e823f304f874e48748"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1723492895,
      "sinceBlock": 20514788,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xFe95b1f7cf7D7D14E9e38dEE0EFE1c9D3AaA3e69": "OneStepProver0"
      }
    }
  ],
  "abis": {
    "eth:0x010aDE5d8F9DC340531140802438798C189c36E0": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x190C720892d0786BF75B77B4acD21c726ea8FDEd": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x19df42E085e2c3fC4497172E412057F54D9f013E": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x1c48b5526071EB2c89ccA3F8afC061b12944eED5": [
      "constructor()",
      "error AlreadyInit()",
      "error HadZeroInit()",
      "error NotOwner(address sender, address owner)",
      "error RollupNotChanged()",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "function bridge() view returns (address)",
      "function initialize(address _bridge)",
      "function rollup() view returns (address)",
      "function rollupInitialized(uint256 chainId, string chainConfig)",
      "function updateRollupAddress()"
    ],
    "eth:0x1Ff280d8B34E97E2CcA0bdb461F4bA2CF9b8E494": [
      "constructor()",
      "event CertVerified(bytes32 indexed certHash)",
      "function BASIC_CONSTRAINTS_OID() view returns (bytes32)",
      "function CERT_ALGO_OID() view returns (bytes32)",
      "function EC_PUB_KEY_OID() view returns (bytes32)",
      "function KEY_USAGE_OID() view returns (bytes32)",
      "function ROOT_CA_CERT_HASH() view returns (bytes32)",
      "function ROOT_CA_CERT_MAX_PATH_LEN() view returns (int64)",
      "function ROOT_CA_CERT_NOT_AFTER() view returns (uint64)",
      "function ROOT_CA_CERT_PUB_KEY() view returns (bytes)",
      "function ROOT_CA_CERT_SUBJECT_HASH() view returns (bytes32)",
      "function SECP_384_R1_OID() view returns (bytes32)",
      "function verified(bytes32) view returns (bytes)",
      "function verifyCACert(bytes cert, bytes32 parentCertHash) returns (bytes32)",
      "function verifyClientCert(bytes cert, bytes32 parentCertHash) returns (tuple(bool ca, uint64 notAfter, int64 maxPathLen, bytes32 subjectHash, bytes pubKey))"
    ],
    "eth:0x269F6f6FC8177a5A8c475AE0e2487508634EC8Ed": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x28293c7855797B0441000EF144119727f3cBCA9B": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "function initializeProxy(tuple(uint64 confirmPeriodBlocks, uint64 extraChallengeTimeBlocks, address stakeToken, uint256 baseStake, bytes32 wasmModuleRoot, address owner, address loserStakeEscrow, uint256 chainId, string chainConfig, uint64 genesisBlockNum, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) sequencerInboxMaxTimeVariation) config, tuple(address bridge, address sequencerInbox, address inbox, address outbox, address rollupEventInbox, address challengeManager, address rollupAdminLogic, address rollupUserLogic, address validatorUtils, address validatorWalletCreator) connectedContracts)"
    ],
    "eth:0x2bf43034b9559643e986A2fE3cE015a18247b904": [
      "constructor(address _singleton)"
    ],
    "eth:0x2C381da225148f7d6390f0EE4A162F958ec40e7A": [
      "constructor(uint256 _maxDataSize, address reader4844_, bool _isUsingFeeToken)",
      "error AlreadyInit()",
      "error AlreadyValidDASKeyset(bytes32)",
      "error BadMaxTimeVariation()",
      "error BadPostUpgradeInit()",
      "error BadSequencerNumber(uint256 stored, uint256 received)",
      "error DataBlobsNotSupported()",
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error DelayedBackwards()",
      "error DelayedTooFar()",
      "error Deprecated()",
      "error ForceIncludeBlockTooSoon()",
      "error ForceIncludeTimeTooSoon()",
      "error HadZeroInit()",
      "error IncorrectMessagePreimage()",
      "error InitParamZero(string name)",
      "error InvalidHeaderFlag(bytes1)",
      "error MissingDataHashes()",
      "error NativeTokenMismatch()",
      "error NoSuchKeyset(bytes32)",
      "error NotBatchPoster()",
      "error NotBatchPosterManager(address)",
      "error NotCodelessOrigin()",
      "error NotForked()",
      "error NotOwner(address sender, address owner)",
      "error RollupNotChanged()",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event InvalidateKeyset(bytes32 indexed keysetHash)",
      "event OwnerFunctionCalled(uint256 indexed id)",
      "event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data)",
      "event SequencerBatchDelivered(uint256 indexed batchSequenceNumber, bytes32 indexed beforeAcc, bytes32 indexed afterAcc, bytes32 delayedAcc, uint256 afterDelayedMessagesRead, tuple(uint64 minTimestamp, uint64 maxTimestamp, uint64 minBlockNumber, uint64 maxBlockNumber) timeBounds, uint8 dataLocation)",
      "event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes)",
      "event TEESignatureVerified(uint256 indexed sequenceNumber, uint256 indexed hotshotHeight)",
      "function BROTLI_MESSAGE_HEADER_FLAG() view returns (bytes1)",
      "function DAS_MESSAGE_HEADER_FLAG() view returns (bytes1)",
      "function DATA_AUTHENTICATED_FLAG() view returns (bytes1)",
      "function DATA_BLOB_HEADER_FLAG() view returns (bytes1)",
      "function HEADER_LENGTH() view returns (uint256)",
      "function TREE_DAS_MESSAGE_HEADER_FLAG() view returns (bytes1)",
      "function ZERO_HEAVY_MESSAGE_HEADER_FLAG() view returns (bytes1)",
      "function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata)",
      "function addSequencerL2Batch(uint256, bytes, uint256, address gasRefunder, uint256, uint256)",
      "function addSequencerL2BatchFromBlobs(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount)",
      "function addSequencerL2BatchFromBlobs(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata)",
      "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, bytes espressoMetadata)",
      "function addSequencerL2BatchFromOrigin(uint256 sequencerNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder) pure",
      "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount)",
      "function batchCount() view returns (uint256)",
      "function batchPosterManager() view returns (address)",
      "function bridge() view returns (address)",
      "function dasKeySetInfo(bytes32) view returns (bool isValidKeyset, uint64 creationBlock)",
      "function espressoTEEVerifier() view returns (address)",
      "function forceInclusion(uint256 _totalDelayedMessagesRead, uint8 kind, uint64[2] l1BlockAndTime, uint256 baseFeeL1, address sender, bytes32 messageDataHash)",
      "function getKeysetCreationBlock(bytes32 ksHash) view returns (uint256)",
      "function inboxAccs(uint256 index) view returns (bytes32)",
      "function initialize(address bridge_, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation_)",
      "function initialize(address bridge_, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation_, address _espressoTEEVerifier)",
      "function invalidateKeysetHash(bytes32 ksHash)",
      "function isBatchPoster(address) view returns (bool)",
      "function isSequencer(address) view returns (bool)",
      "function isUsingFeeToken() view returns (bool)",
      "function isValidKeysetHash(bytes32 ksHash) view returns (bool)",
      "function maxDataSize() view returns (uint256)",
      "function maxTimeVariation() view returns (uint256, uint256, uint256, uint256)",
      "function postUpgradeInit()",
      "function reader4844() view returns (address)",
      "function removeDelayAfterFork()",
      "function rollup() view returns (address)",
      "function setBatchPosterManager(address newBatchPosterManager)",
      "function setEspressoTEEVerifier(address _espressoTEEVerifier)",
      "function setIsBatchPoster(address addr, bool isBatchPoster_)",
      "function setIsSequencer(address addr, bool isSequencer_)",
      "function setMaxTimeVariation(tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation_)",
      "function setValidKeyset(bytes keysetBytes)",
      "function totalDelayedMessagesRead() view returns (uint256)",
      "function updateRollupAddress()"
    ],
    "eth:0x31c97a0A216CCd730bd8ab3ecAA97eACbA27b11a": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TargetCallExecuted(address indexed target, uint256 value, bytes data)",
      "event UpgradeExecuted(address indexed upgrade, uint256 value, bytes data)",
      "function ADMIN_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function execute(address upgrade, bytes upgradeCallData) payable",
      "function executeCall(address target, bytes targetCallData) payable",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address[] executors)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "eth:0x480214c3B0707a1e083A3Ae97209FCb671471109": [
      "error BadSequencerMessageNumber(uint256 stored, uint256 received)",
      "error InvalidOutboxSet(address outbox)",
      "error NotContract(address addr)",
      "error NotDelayedInbox(address sender)",
      "error NotOutbox(address sender)",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error NotSequencerInbox(address sender)",
      "event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)",
      "event DepositMessageDelivered(address indexed sender)",
      "event InboxToggle(address indexed inbox, bool enabled)",
      "event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)",
      "event OutboxToggle(address indexed outbox, bool enabled)",
      "event RollupUpdated(address rollup)",
      "event SequencerInboxUpdated(address newSequencerInbox)",
      "function acceptFundsFromOldBridge() payable",
      "function activeOutbox() view returns (address)",
      "function allowedDelayedInboxList(uint256) view returns (address)",
      "function allowedDelayedInboxes(address inbox) view returns (bool)",
      "function allowedOutboxList(uint256) view returns (address)",
      "function allowedOutboxes(address outbox) view returns (bool)",
      "function delayedInboxAccs(uint256) view returns (bytes32)",
      "function delayedMessageCount() view returns (uint256)",
      "function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash) payable returns (uint256)",
      "function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns (uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)",
      "function executeCall(address to, uint256 value, bytes data) returns (bool success, bytes returnData)",
      "function initialize(address rollup_)",
      "function rollup() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function sequencerInboxAccs(uint256) view returns (bytes32)",
      "function sequencerMessageCount() view returns (uint256)",
      "function sequencerReportedSubMessageCount() view returns (uint256)",
      "function setDelayedInbox(address inbox, bool enabled)",
      "function setOutbox(address outbox, bool enabled)",
      "function setSequencerInbox(address _sequencerInbox)",
      "function setSequencerReportedSubMessageCount(uint256 newMsgCount)",
      "function submitBatchSpendingReport(address sender, bytes32 messageDataHash) returns (uint256)",
      "function updateRollupAddress(address _rollup)"
    ],
    "eth:0x5F8FE936F629AF71e7af6C7844692f98019d6163": [
      "constructor(address prover0_, address proverMem_, address proverMath_, address proverHostIo_)",
      "function getEndMachineHash(uint8 status, bytes32 globalStateHash) pure returns (bytes32)",
      "function getStartMachineHash(bytes32 globalStateHash, bytes32 wasmModuleRoot) pure returns (bytes32)",
      "function proveOneStep(tuple(uint256 maxInboxMessagesRead, address bridge) execCtx, uint256 machineStep, bytes32 beforeHash, bytes proof) view returns (bytes32 afterHash)",
      "function prover0() view returns (address)",
      "function proverHostIo() view returns (address)",
      "function proverMath() view returns (address)",
      "function proverMem() view returns (address)"
    ],
    "eth:0x74110Fb401469FEA31A10680e28c9C4c17aFdd36": [
      "constructor(uint256 _maxDataSize)",
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error GasLimitTooLarge()",
      "error InsufficientSubmissionCost(uint256 expected, uint256 actual)",
      "error InsufficientValue(uint256 expected, uint256 actual)",
      "error L1Forked()",
      "error NotAllowedOrigin(address origin)",
      "error NotCodelessOrigin()",
      "error NotForked()",
      "error NotOrigin()",
      "error NotOwner(address sender, address owner)",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error RetryableData(address from, address to, uint256 l2CallValue, uint256 deposit, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data)",
      "event AllowListAddressSet(address indexed user, bool val)",
      "event AllowListEnabledUpdated(bool isEnabled)",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "function allowListEnabled() view returns (bool)",
      "function bridge() view returns (address)",
      "function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee) view returns (uint256)",
      "function createRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)",
      "function createRetryableTicketNoRefundAliasRewrite(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)",
      "function depositEth(uint256) payable returns (uint256)",
      "function depositEth() payable returns (uint256)",
      "function getProxyAdmin() view returns (address)",
      "function initialize(address _bridge, address _sequencerInbox)",
      "function isAllowed(address) view returns (bool)",
      "function maxDataSize() view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function postUpgradeInit(address)",
      "function sendContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, uint256 value, bytes data) returns (uint256)",
      "function sendL1FundedContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, bytes data) payable returns (uint256)",
      "function sendL1FundedUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, bytes data) payable returns (uint256)",
      "function sendL1FundedUnsignedTransactionToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, bytes data) payable returns (uint256)",
      "function sendL2Message(bytes messageData) returns (uint256)",
      "function sendL2MessageFromOrigin(bytes messageData) returns (uint256)",
      "function sendUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sendUnsignedTransactionToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sendWithdrawEthToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, uint256 value, address withdrawTo) returns (uint256)",
      "function sequencerInbox() view returns (address)",
      "function setAllowList(address[] user, bool[] val)",
      "function setAllowListEnabled(bool _allowListEnabled)",
      "function unpause()",
      "function unsafeCreateRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)"
    ],
    "eth:0x7c4e8195FB560D1557C52f051dCdA4724a2894b3": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x8045B2aa6b823CbA8f99ef3D3404F711619d3473": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x816ADa3B63F3c643fb04152eA32B58Db89aadd89": [
      "constructor(address _ecdsaVerifier, address _router)",
      "function P256_VERIFIER() view returns (address)",
      "function pccsRouter() view returns (address)",
      "function quoteVersion() view returns (uint16)",
      "function verifyQuote(tuple(uint16 version, bytes2 attestationKeyType, bytes4 teeType, bytes2 qeSvn, bytes2 pceSvn, bytes16 qeVendorId, bytes20 userData) header, bytes rawQuote) view returns (bool success, bytes output)",
      "function verifyZkOutput(bytes outputBytes) view returns (bool success, bytes output)"
    ],
    "eth:0x98206aBE6bdB21765458f27F199fd813343a3C3b": [
      "constructor(bytes32 enclaveHash, address _quoteVerifier)",
      "error FailedToParseEnclaveReport()",
      "error InvalidDataLength()",
      "error InvalidEnclaveHash()",
      "error InvalidHeaderVersion()",
      "error InvalidQuote()",
      "error InvalidQuoteVerifierAddress()",
      "error InvalidReportDataHash()",
      "error InvalidSignerAddress()",
      "error ReportDataTooShort()",
      "event DeletedRegisteredSigner(address signer)",
      "event EnclaveHashSet(bytes32 enclaveHash, bool valid)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event SignerRegistered(address signer, bytes32 enclaveHash)",
      "function acceptOwnership()",
      "function deleteRegisteredSigners(address[] signers)",
      "function owner() view returns (address)",
      "function parseEnclaveReport(bytes rawEnclaveReport) pure returns (bool success, tuple(bytes16 cpuSvn, bytes4 miscSelect, bytes28 reserved1, bytes16 attributes, bytes32 mrEnclave, bytes32 reserved2, bytes32 mrSigner, bytes reserved3, uint16 isvProdId, uint16 isvSvn, bytes reserved4, bytes reportData) enclaveReport)",
      "function parseQuoteHeader(bytes rawQuote) pure returns (tuple(uint16 version, bytes2 attestationKeyType, bytes4 teeType, bytes2 qeSvn, bytes2 pceSvn, bytes16 qeVendorId, bytes20 userData) header)",
      "function pendingOwner() view returns (address)",
      "function quoteVerifier() view returns (address)",
      "function registerSigner(bytes attestation, bytes data)",
      "function registeredEnclaveHash(bytes32) view returns (bool)",
      "function registeredSigners(address) view returns (bool)",
      "function renounceOwnership()",
      "function setEnclaveHash(bytes32 enclaveHash, bool valid)",
      "function transferOwnership(address newOwner)",
      "function verify(bytes rawQuote, bytes32 reportDataHash) view returns (tuple(bytes16 cpuSvn, bytes4 miscSelect, bytes28 reserved1, bytes16 attributes, bytes32 mrEnclave, bytes32 reserved2, bytes32 mrSigner, bytes reserved3, uint16 isvProdId, uint16 isvSvn, bytes reserved4, bytes reportData))"
    ],
    "eth:0xA79305c7D5Ad6F8AF0292c863957a2488F13f0d1": [
      "function areUnresolvedNodesLinear(address rollup) view returns (bool)",
      "function checkDecidableNextNode(address rollup) view returns (uint8)",
      "function findNodeConflict(address rollup, uint64 node1, uint64 node2, uint256 maxDepth) view returns (tuple(uint8 ty, uint64 node1, uint64 node2))",
      "function findStakerConflict(address rollup, address staker1, address staker2, uint256 maxDepth) view returns (tuple(uint8 ty, uint64 node1, uint64 node2))",
      "function getStakers(address rollup, uint64 startIndex, uint64 max) view returns (address[], bool hasMore)",
      "function latestStaked(address rollup, address staker) view returns (uint64, tuple(bytes32 stateHash, bytes32 challengeHash, bytes32 confirmData, uint64 prevNum, uint64 deadlineBlock, uint64 noChildConfirmedBeforeBlock, uint64 stakerCount, uint64 childStakerCount, uint64 firstChildBlock, uint64 latestChildNumber, uint64 createdAtBlock, bytes32 nodeHash))",
      "function refundableStakers(address rollup) view returns (address[])",
      "function requireConfirmable(address rollup) view",
      "function requireRejectable(address rollup) view",
      "function stakedNodes(address rollup, address staker) view returns (uint64[])",
      "function timedOutChallenges(address rollup, uint64 startIndex, uint64 max) view returns (uint64[], bool hasMore)"
    ],
    "eth:0xa8Ae2ed62A978e2108a1C7CBfdb43a5CBfdd2aD0": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)",
      "event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)",
      "event NodeRejected(uint64 indexed nodeNum)",
      "event Paused(address account)",
      "event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)",
      "event RollupInitialized(bytes32 machineHash, uint256 chainId)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "function VALIDATOR_AFK_BLOCKS() view returns (uint256)",
      "function _stakerMap(address) view returns (uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)",
      "function addToDeposit(address stakerAddress) payable",
      "function amountStaked(address staker) view returns (uint256)",
      "function anyTrustFastConfirmer() view returns (address)",
      "function baseStake() view returns (uint256)",
      "function bridge() view returns (address)",
      "function chainId() view returns (uint256)",
      "function challengeManager() view returns (address)",
      "function completeChallenge(uint256 challengeIndex, address winningStaker, address losingStaker)",
      "function confirmNextNode(bytes32 blockHash, bytes32 sendRoot)",
      "function confirmPeriodBlocks() view returns (uint64)",
      "function countStakedZombies(uint64 nodeNum) view returns (uint256)",
      "function countZombiesStakedOnChildren(uint64 nodeNum) view returns (uint256)",
      "function createChallenge(address[2] stakers, uint64[2] nodeNums, uint8[2] machineStatuses, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals)[2] globalStates, uint64 numBlocks, bytes32 secondExecutionHash, uint256[2] proposedBlocks, bytes32[2] wasmModuleRoots)",
      "function currentChallenge(address staker) view returns (uint64)",
      "function currentRequiredStake() view returns (uint256)",
      "function extraChallengeTimeBlocks() view returns (uint64)",
      "function fastConfirmNextNode(bytes32 blockHash, bytes32 sendRoot, bytes32 nodeHash)",
      "function firstUnresolvedNode() view returns (uint64)",
      "function getNode(uint64 nodeNum) view returns (tuple(bytes32 stateHash, bytes32 challengeHash, bytes32 confirmData, uint64 prevNum, uint64 deadlineBlock, uint64 noChildConfirmedBeforeBlock, uint64 stakerCount, uint64 childStakerCount, uint64 firstChildBlock, uint64 latestChildNumber, uint64 createdAtBlock, bytes32 nodeHash))",
      "function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns (uint256)",
      "function getStaker(address staker) view returns (tuple(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked))",
      "function getStakerAddress(uint64 stakerNum) view returns (address)",
      "function inbox() view returns (address)",
      "function initialize(address _stakeToken) view",
      "function isERC20Enabled() view returns (bool)",
      "function isStaked(address staker) view returns (bool)",
      "function isStakedOnLatestConfirmed(address staker) view returns (bool)",
      "function isValidator(address) view returns (bool)",
      "function isZombie(address staker) view returns (bool)",
      "function lastStakeBlock() view returns (uint64)",
      "function latestConfirmed() view returns (uint64)",
      "function latestNodeCreated() view returns (uint64)",
      "function latestStakedNode(address staker) view returns (uint64)",
      "function loserStakeEscrow() view returns (address)",
      "function minimumAssertionPeriod() view returns (uint256)",
      "function newStakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash) payable",
      "function newStakeOnNewNode(tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount) payable",
      "function nodeHasStaker(uint64 nodeNum, address staker) view returns (bool)",
      "function outbox() view returns (address)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function reduceDeposit(uint256 target)",
      "function rejectNextNode(address stakerAddress)",
      "function removeOldZombies(uint256 startIndex)",
      "function removeWhitelistAfterFork()",
      "function removeWhitelistAfterValidatorAfk()",
      "function removeZombie(uint256 zombieNum, uint256 maxNodes)",
      "function requireUnresolved(uint256 nodeNum) view",
      "function requireUnresolvedExists() view",
      "function requiredStake(uint256 blockNumber, uint64 firstUnresolvedNodeNum, uint64 latestCreatedNode) view returns (uint256)",
      "function returnOldDeposit(address stakerAddress)",
      "function rollupDeploymentBlock() view returns (uint256)",
      "function rollupEventInbox() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function stakeOnExistingNode(uint64 nodeNum, bytes32 nodeHash)",
      "function stakeOnNewNode(tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 expectedNodeHash, uint256 prevNodeInboxMaxCount)",
      "function stakeToken() view returns (address)",
      "function stakerCount() view returns (uint64)",
      "function totalWithdrawableFunds() view returns (uint256)",
      "function validatorUtils() view returns (address)",
      "function validatorWalletCreator() view returns (address)",
      "function validatorWhitelistDisabled() view returns (bool)",
      "function wasmModuleRoot() view returns (bytes32)",
      "function withdrawStakerFunds() returns (uint256)",
      "function withdrawableFunds(address user) view returns (uint256)",
      "function zombieAddress(uint256 zombieNum) view returns (address)",
      "function zombieCount() view returns (uint256)",
      "function zombieLatestStakedNode(uint256 zombieNum) view returns (uint64)"
    ],
    "eth:0xB9B007aE55B81dd1498Bc500a54ad9Ae53234c9C": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0xcC758349CBd99bAA7fAD0558634dAaB176c777D0": [
      "constructor(address _espressoSGXTEEVerifier, address _espressoNitroTEEVerifier)",
      "error InvalidSignature()",
      "error UnsupportedTeeType()",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function acceptOwnership()",
      "function espressoNitroTEEVerifier() view returns (address)",
      "function espressoSGXTEEVerifier() view returns (address)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function registerSigner(bytes attestation, bytes data, uint8 teeType)",
      "function registeredEnclaveHashes(bytes32 enclaveHash, uint8 teeType) view returns (bool)",
      "function registeredSigners(address signer, uint8 teeType) view returns (bool)",
      "function renounceOwnership()",
      "function setEspressoNitroTEEVerifier(address _espressoNitroTEEVerifier)",
      "function setEspressoSGXTEEVerifier(address _espressoSGXTEEVerifier)",
      "function transferOwnership(address newOwner)",
      "function verify(bytes signature, bytes32 userDataHash, uint8 teeType) view returns (bool)"
    ],
    "eth:0xD6DC5196b9E1c3fcA62CCDA876ebFFb3eDA384Ea": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event NodeConfirmed(uint64 indexed nodeNum, bytes32 blockHash, bytes32 sendRoot)",
      "event NodeCreated(uint64 indexed nodeNum, bytes32 indexed parentNodeHash, bytes32 indexed nodeHash, bytes32 executionHash, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 afterInboxBatchAcc, bytes32 wasmModuleRoot, uint256 inboxMaxCount)",
      "event NodeRejected(uint64 indexed nodeNum)",
      "event OwnerFunctionCalled(uint256 indexed id)",
      "event Paused(address account)",
      "event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedNode)",
      "event RollupInitialized(bytes32 machineHash, uint256 chainId)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "event UserStakeUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "function _stakerMap(address) view returns (uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked)",
      "function amountStaked(address staker) view returns (uint256)",
      "function anyTrustFastConfirmer() view returns (address)",
      "function baseStake() view returns (uint256)",
      "function bridge() view returns (address)",
      "function chainId() view returns (uint256)",
      "function challengeManager() view returns (address)",
      "function confirmPeriodBlocks() view returns (uint64)",
      "function createNitroMigrationGenesis(tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion)",
      "function currentChallenge(address staker) view returns (uint64)",
      "function extraChallengeTimeBlocks() view returns (uint64)",
      "function firstUnresolvedNode() view returns (uint64)",
      "function forceConfirmNode(uint64 nodeNum, bytes32 blockHash, bytes32 sendRoot)",
      "function forceCreateNode(uint64 prevNode, uint256 prevNodeInboxMaxCount, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) afterState, uint64 numBlocks) assertion, bytes32 expectedNodeHash)",
      "function forceRefundStaker(address[] staker)",
      "function forceResolveChallenge(address[] stakerA, address[] stakerB)",
      "function getNode(uint64 nodeNum) view returns (tuple(bytes32 stateHash, bytes32 challengeHash, bytes32 confirmData, uint64 prevNum, uint64 deadlineBlock, uint64 noChildConfirmedBeforeBlock, uint64 stakerCount, uint64 childStakerCount, uint64 firstChildBlock, uint64 latestChildNumber, uint64 createdAtBlock, bytes32 nodeHash))",
      "function getNodeCreationBlockForLogLookup(uint64 nodeNum) view returns (uint256)",
      "function getStaker(address staker) view returns (tuple(uint256 amountStaked, uint64 index, uint64 latestStakedNode, uint64 currentChallenge, bool isStaked))",
      "function getStakerAddress(uint64 stakerNum) view returns (address)",
      "function inbox() view returns (address)",
      "function initialize(tuple(uint64 confirmPeriodBlocks, uint64 extraChallengeTimeBlocks, address stakeToken, uint256 baseStake, bytes32 wasmModuleRoot, address owner, address loserStakeEscrow, uint256 chainId, string chainConfig, uint64 genesisBlockNum, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) sequencerInboxMaxTimeVariation) config, tuple(address bridge, address sequencerInbox, address inbox, address outbox, address rollupEventInbox, address challengeManager, address rollupAdminLogic, address rollupUserLogic, address validatorUtils, address validatorWalletCreator) connectedContracts)",
      "function isStaked(address staker) view returns (bool)",
      "function isStakedOnLatestConfirmed(address staker) view returns (bool)",
      "function isValidator(address) view returns (bool)",
      "function isZombie(address staker) view returns (bool)",
      "function lastStakeBlock() view returns (uint64)",
      "function latestConfirmed() view returns (uint64)",
      "function latestNodeCreated() view returns (uint64)",
      "function latestStakedNode(address staker) view returns (uint64)",
      "function loserStakeEscrow() view returns (address)",
      "function minimumAssertionPeriod() view returns (uint256)",
      "function nodeHasStaker(uint64 nodeNum, address staker) view returns (bool)",
      "function outbox() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function removeOldOutbox(address _outbox)",
      "function resume()",
      "function rollupDeploymentBlock() view returns (uint256)",
      "function rollupEventInbox() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer)",
      "function setBaseStake(uint256 newBaseStake)",
      "function setConfirmPeriodBlocks(uint64 newConfirmPeriod)",
      "function setDelayedInbox(address _inbox, bool _enabled)",
      "function setExtraChallengeTimeBlocks(uint64 newExtraTimeBlocks)",
      "function setInbox(address newInbox)",
      "function setLoserStakeEscrow(address newLoserStakerEscrow)",
      "function setMinimumAssertionPeriod(uint256 newPeriod)",
      "function setOutbox(address _outbox)",
      "function setOwner(address newOwner)",
      "function setSequencerInbox(address _sequencerInbox)",
      "function setStakeToken(address newStakeToken)",
      "function setValidator(address[] _validator, bool[] _val)",
      "function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled)",
      "function setWasmModuleRoot(bytes32 newWasmModuleRoot)",
      "function stakeToken() view returns (address)",
      "function stakerCount() view returns (uint64)",
      "function totalWithdrawableFunds() view returns (uint256)",
      "function upgradeBeacon(address beacon, address newImplementation)",
      "function upgradeSecondaryTo(address newImplementation)",
      "function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function validatorUtils() view returns (address)",
      "function validatorWalletCreator() view returns (address)",
      "function validatorWhitelistDisabled() view returns (bool)",
      "function wasmModuleRoot() view returns (bytes32)",
      "function withdrawableFunds(address user) view returns (uint256)",
      "function zombieAddress(uint256 zombieNum) view returns (address)",
      "function zombieCount() view returns (uint256)",
      "function zombieLatestStakedNode(uint256 zombieNum) view returns (uint64)"
    ],
    "eth:0xd79fd59b73c814D9607aB93C4A1aDCea06F91692": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge) execCtx, tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) view returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) mod)"
    ],
    "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0xDa72802AaF0a7af96d9FF7d0D94A7388B85f9f24": [
      "constructor(bytes32 enclaveHash, address certManager)",
      "error InvalidAWSEnclaveHash()",
      "event AWSEnclaveHashSet(bytes32 enclaveHash, bool valid)",
      "event AWSSignerRegistered(address signer, bytes32 enclaveHash)",
      "event DeletedAWSRegisteredSigner(address signer)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function ATTESTATION_DIGEST() view returns (bytes32)",
      "function ATTESTATION_TBS_PREFIX() view returns (bytes32)",
      "function CABUNDLE_KEY() view returns (bytes32)",
      "function CERTIFICATE_KEY() view returns (bytes32)",
      "function DIGEST_KEY() view returns (bytes32)",
      "function MODULE_ID_KEY() view returns (bytes32)",
      "function NONCE_KEY() view returns (bytes32)",
      "function PCRS_KEY() view returns (bytes32)",
      "function PUBLIC_KEY_KEY() view returns (bytes32)",
      "function TIMESTAMP_KEY() view returns (bytes32)",
      "function USER_DATA_KEY() view returns (bytes32)",
      "function acceptOwnership()",
      "function certManager() view returns (address)",
      "function certVerified(bytes32 certHash) view returns (bool)",
      "function decodeAttestationTbs(bytes attestation) pure returns (bytes attestationTbs, bytes signature)",
      "function deleteRegisteredSigners(address[] signers)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function registerSigner(bytes attestation, bytes signature)",
      "function registeredEnclaveHash(bytes32) view returns (bool)",
      "function registeredSigners(address) view returns (bool)",
      "function renounceOwnership()",
      "function setEnclaveHash(bytes32 enclaveHash, bool valid)",
      "function transferOwnership(address newOwner)",
      "function validateAttestation(bytes attestationTbs, bytes signature) returns (tuple(uint256 moduleID, uint64 timestamp, uint256 digest, uint256[] pcrs, uint256 cert, uint256[] cabundle, uint256 publicKey, uint256 userData, uint256 nonce))",
      "function verifyCACert(bytes certificate, bytes32 parentCertHash)",
      "function verifyClientCert(bytes certificate, bytes32 parentCertHash)"
    ],
    "eth:0xE97d5ae76694836D2e016D80469B45D7aFb2ebaB": [
      "error NotOwner(address sender, address owner)",
      "event Bisected(uint64 indexed challengeIndex, bytes32 indexed challengeRoot, uint256 challengedSegmentStart, uint256 challengedSegmentLength, bytes32[] chainHashes)",
      "event ChallengeEnded(uint64 indexed challengeIndex, uint8 kind)",
      "event ExecutionChallengeBegun(uint64 indexed challengeIndex, uint256 blockSteps)",
      "event InitiatedChallenge(uint64 indexed challengeIndex, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) startState, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) endState)",
      "event OneStepProofCompleted(uint64 indexed challengeIndex)",
      "function bisectExecution(uint64 challengeIndex, tuple(uint256 oldSegmentsStart, uint256 oldSegmentsLength, bytes32[] oldSegments, uint256 challengePosition) selection, bytes32[] newSegments)",
      "function bridge() view returns (address)",
      "function challengeExecution(uint64 challengeIndex, tuple(uint256 oldSegmentsStart, uint256 oldSegmentsLength, bytes32[] oldSegments, uint256 challengePosition) selection, uint8[2] machineStatuses, bytes32[2] globalStateHashes, uint256 numSteps)",
      "function challengeInfo(uint64 challengeIndex) view returns (tuple(tuple(address addr, uint256 timeLeft) current, tuple(address addr, uint256 timeLeft) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode))",
      "function challenges(uint256) view returns (tuple(address addr, uint256 timeLeft) current, tuple(address addr, uint256 timeLeft) next, uint256 lastMoveTimestamp, bytes32 wasmModuleRoot, bytes32 challengeStateHash, uint64 maxInboxMessages, uint8 mode)",
      "function clearChallenge(uint64 challengeIndex)",
      "function createChallenge(bytes32 wasmModuleRoot_, uint8[2] startAndEndMachineStatuses_, tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals)[2] startAndEndGlobalStates_, uint64 numBlocks, address asserter_, address challenger_, uint256 asserterTimeLeft_, uint256 challengerTimeLeft_) returns (uint64)",
      "function currentResponder(uint64 challengeIndex) view returns (address)",
      "function getOsp(bytes32 wasmModuleRoot) view returns (address)",
      "function initialize(address resultReceiver_, address sequencerInbox_, address bridge_, address osp_)",
      "function isTimedOut(uint64 challengeIndex) view returns (bool)",
      "function oneStepProveExecution(uint64 challengeIndex, tuple(uint256 oldSegmentsStart, uint256 oldSegmentsLength, bytes32[] oldSegments, uint256 challengePosition) selection, bytes proof)",
      "function osp() view returns (address)",
      "function ospCond(bytes32) view returns (address)",
      "function postUpgradeInit(address osp_, bytes32 condRoot, address condOsp)",
      "function resultReceiver() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function timeout(uint64 challengeIndex)",
      "function totalChallengesCreated() view returns (uint64)"
    ],
    "eth:0xF025D25aE360D0D33a275dF74863CCc6600E6f8E": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0xf2078f19A9322E2e0Dfd02839C7D74215F2E7512": [
      "error AlreadyInit()",
      "error AlreadySpent(uint256 index)",
      "error BadPostUpgradeInit()",
      "error BridgeCallFailed()",
      "error HadZeroInit()",
      "error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength)",
      "error NotOwner(address sender, address owner)",
      "error NotRollup(address sender, address rollup)",
      "error PathNotMinimal(uint256 index, uint256 maxIndex)",
      "error ProofTooLong(uint256 proofLength)",
      "error RollupNotChanged()",
      "error SimulationOnlyEntrypoint()",
      "error UnknownRoot(bytes32 root)",
      "event OutBoxTransactionExecuted(address indexed to, address indexed l2Sender, uint256 indexed zero, uint256 transactionIndex)",
      "event SendRootUpdated(bytes32 indexed outputRoot, bytes32 indexed l2BlockHash)",
      "function OUTBOX_VERSION() view returns (uint128)",
      "function bridge() view returns (address)",
      "function calculateItemHash(address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data) pure returns (bytes32)",
      "function calculateMerkleRoot(bytes32[] proof, uint256 path, bytes32 item) pure returns (bytes32)",
      "function executeTransaction(bytes32[] proof, uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)",
      "function executeTransactionSimulation(uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)",
      "function initialize(address _bridge)",
      "function isSpent(uint256 index) view returns (bool)",
      "function l2ToL1BatchNum() pure returns (uint256)",
      "function l2ToL1Block() view returns (uint256)",
      "function l2ToL1EthBlock() view returns (uint256)",
      "function l2ToL1OutputId() view returns (bytes32)",
      "function l2ToL1Sender() view returns (address)",
      "function l2ToL1Timestamp() view returns (uint256)",
      "function postUpgradeInit()",
      "function rollup() view returns (address)",
      "function roots(bytes32) view returns (bytes32)",
      "function spent(uint256) view returns (bytes32)",
      "function updateRollupAddress()",
      "function updateSendRoot(bytes32 root, bytes32 l2BlockHash)"
    ],
    "eth:0xf6a307A5868eB9c4a00F5efbD1EF8462AC63783f": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge), tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) pure returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) mod)"
    ],
    "eth:0xFe53F58bAd7B83B01C47CC86471507911263ac91": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge), tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) pure returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) mod)"
    ],
    "eth:0xFe95b1f7cf7D7D14E9e38dEE0EFE1c9D3AaA3e69": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge), tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) pure returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) mod)"
    ]
  },
  "usedTemplates": {
    "espresso/Sequencing/EspressoNitroTEEVerifier": "0xcfbcf143ae6576f201097bd2db629a4fbdc20ae286e1555faf44db61111d2eab",
    "espresso/Sequencing/EspressoSGXTEEVerifier": "0x62bb42822457b8146a3651a1d679d850d8a71b735dea0dd125493dd81cf1c23e",
    "espresso/Sequencing/EspressoTEEVerifier_gateway": "0x7d9c15aef19b3644fef05d35c978c01dce14e16ba55e9fd3c6326394607401e3",
    "espresso/Sequencing/QuoteVerifier": "0xb7f636cfce72573f7409bc600a4b5d138f2dd0b21892e2f0b670471967df4837",
    "global/ProxyAdmin": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "orbitstack/Bridge": "0x021d1c558348a8ac876fad0f0af08c828492fdfc313056db0a923dec120b1f09",
    "orbitstack/ChallengeManager": "0x8760ed03abe46cb507ea6364ccb9aad7e04b5e32c39a48cb81efd7277e495054",
    "orbitstack/Inbox": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/OneStepProofEntry": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/OneStepProver0": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/OneStepProverHostIo": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/OneStepProverMath": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/OneStepProverMemory": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/Outbox": "0x8dbaaf653890815197f4c39ef9d1000a8dfc0338ef34b273788a6d2087d4cfec",
    "orbitstack/RollupEventInbox": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/RollupProxy_fastConfirm": "0x44444b0ddf0730808af44c1a9ff9b9295a98d4ce2f5d1f6c550448dbd39a6c72",
    "orbitstack/SequencerInbox_Espresso": "0x7652f5e8fb9924eee81c6f067f2c2447575233e52bff6752146c910af2b070e2",
    "orbitstack/UpgradeExecutor": "0xf65e73e609a464b657011e80920c1852ae19b0e3d493e4678f74b99052ee87fe",
    "orbitstack/ValidatorUtils": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c"
  },
  "usedBlockNumbers": { "ethereum": 23116694 },
  "permissionsConfigHash": "0x3817a3d516194d22c6edb2607228b146ea7c1c9002eebefe1d93a097f9b0109a"
}
