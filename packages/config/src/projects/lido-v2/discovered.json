{
  "name": "lido-v2",
  "timestamp": 1761645351,
  "configHash": "0x13c9baf792c3a12453f62702809fb9824f45eef1bf5c1fa5e60ac98f41ee1d8b",
  "entries": [
    {
      "address": "eth:0x0000000000000000000000000000000000000001",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "DepositContract",
      "address": "eth:0x00000000219ab540356cBB839Cbe05303d7705Fa",
      "type": "Contract",
      "template": "global/DepositContract",
      "sourceHashes": [
        "0x50e829416130215b875975340a7567d915ecf66f25070a50813ca972a4322191"
      ],
      "proxyType": "immutable",
      "description": "Ethereum Beacon Chain deposit contract.",
      "ignoreInWatchMode": ["get_deposit_count", "get_deposit_root"],
      "sinceTimestamp": 1602667372,
      "sinceBlock": 11052984,
      "values": {
        "$immutable": true,
        "get_deposit_count": "0x100e230000000000",
        "get_deposit_root": "0x99fa46d3fd34e20ecf6f7e519d317e01d7d18d78a3845039f2d1d404bd8f7927"
      },
      "implementationNames": {
        "eth:0x00000000219ab540356cBB839Cbe05303d7705Fa": "DepositContract"
      }
    },
    {
      "name": "",
      "address": "eth:0x00000961Ef480Eb55e80D19ad83579A64c007002",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1739979863,
      "sinceBlock": 21881389,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x00000961Ef480Eb55e80D19ad83579A64c007002": ""
      }
    },
    {
      "name": "",
      "address": "eth:0x000F3df6D732807Ef1319fB7B8bB8522d0Beac02",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1705610111,
      "sinceBlock": 19036164,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x000F3df6D732807Ef1319fB7B8bB8522d0Beac02": ""
      }
    },
    {
      "address": "eth:0x007DE4a5F7bc37E2F26c0cb2E8A95006EE9B89b5",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "CSExitPenalties",
      "address": "eth:0x06cd61045f958A209a0f8D746e103eCc625f4193",
      "type": "Contract",
      "sourceHashes": [
        "0x0e9e628d137fa4b53b03ce51b1b0e0122d524ca323f45751894d2e62c91c2651",
        "0x50b1f029cbc9832f0464c9fb50f05553e7d8689e5bf07c118c523edd42acff5d"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1758112595,
      "sinceBlock": 23382844,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0xDa22fA1CEa40d05Fe4CD536967afdD839586D546",
        "$pastUpgrades": [
          [
            "2025-09-17T12:36:35.000Z",
            "0xee0e9d3615ca2adf655423758cbee63d18002bd818c01363a9e1c470315c3730",
            ["eth:0x8ff828860A67658C39d89809457a97D81AAd418b"]
          ],
          [
            "2025-09-17T12:37:47.000Z",
            "0xaa82b3430ee68cccb797d319594d9d67cfc9aaca8e70e0079ca4e4df75d9f072",
            ["eth:0xDa22fA1CEa40d05Fe4CD536967afdD839586D546"]
          ]
        ],
        "$upgradeCount": 2,
        "ACCOUNTING": "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da",
        "MODULE": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
        "PARAMETERS_REGISTRY": "eth:0x9D28ad303C90DF524BA960d7a2DAC56DcC31e428",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0xDa22fA1CEa40d05Fe4CD536967afdD839586D546",
        "proxy__getIsOssified": false,
        "STRIKES": "eth:0xaa328816027F2D32B9F56d190BC9Fa4A5C07637f",
        "STRIKES_EXIT_TYPE_ID": 1,
        "VOLUNTARY_EXIT_TYPE_ID": 0
      },
      "implementationNames": {
        "eth:0x06cd61045f958A209a0f8D746e103eCc625f4193": "OssifiableProxy",
        "eth:0xDa22fA1CEa40d05Fe4CD536967afdD839586D546": "CSExitPenalties"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "eth:0x08637515E85A4633E23dfc7861e2A9f53af640f7",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1702038227,
      "sinceBlock": 18741518,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0x19aC7c69e5F1AC95b8d49b30Cbb79e81f1ab0dba",
          "eth:0xBc1cFd2BeC23a0cDc555AE8D31EEa06BE3B5186A",
          "eth:0xE3e34FA93575AF41BEF3476236E1A3CDb3F60B85",
          "eth:0x7962cFa46B15BAb1aE798d927FAE83CC73a0E64D",
          "eth:0x62CeDec8B7c81bEe91d97725c9a14dC23C3227E2",
          "eth:0xfAd931F268dc5f8E5cdc3000baAaC0cbdb4E0a9C",
          "eth:0x912e21CdA3D7012146da4Df33309d860a9eb0bEb"
        ],
        "$threshold": 4,
        "domainSeparator": "0xd61346bd19789fed93cdb86a926e1975e2eb9d81e07475aa55a231bf7b7de035",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 7 (57%)",
        "nonce": 84,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0x08637515E85A4633E23dfc7861e2A9f53af640f7": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "ValidatorsExitBusOracle",
      "address": "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e",
      "type": "Contract",
      "template": "tokens/Lido/ValidatorsExitBusOracle",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0xe4c526720601a291e152819a6b6a28a60b7aa74dfc163dcdda0848713449d95d"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": [
        "getConsensusReport",
        "getProcessingState",
        "getResumeSinceTimestamp",
        "getTotalRequestsProcessed"
      ],
      "sinceTimestamp": 1683024035,
      "sinceBlock": 17172556,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x905A211eD6830Cfc95643f0bE2ff64E7f3bf9b94",
        "$pastUpgrades": [
          [
            "2023-05-02T10:40:35.000Z",
            "0xef3eea1523d2161c2f36ba61e327e3520231614c055b8a88c7f5928d18e423ea",
            ["eth:0x6F6541C2203196fEeDd14CD2C09550dA1CbEDa31"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["eth:0xA89Ea51FddE660f67d1850e03C9c9862d33Bc42c"]
          ],
          [
            "2025-10-02T15:52:47.000Z",
            "0xfff774d519ec1afd4358d4858672578437e815dc1652245a2ffb7bde1bfff2ad",
            ["eth:0x905A211eD6830Cfc95643f0bE2ff64E7f3bf9b94"]
          ]
        ],
        "$upgradeCount": 3,
        "DATA_FORMAT_LIST": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXIT_REQUEST_LIMIT_MANAGER_ROLE": "0x9c616dd118785b2e2fccf45a4ff151a335ff7b6a84cd1c4d7fd9f97f39ea9342",
        "EXIT_TYPE": 2,
        "GENESIS_TIME": 1606824023,
        "getConsensusContract": "eth:0x7FaDB6358950c5fAA66Cb5EB8eE5147De3df355a",
        "getConsensusReport": {
          "hash": "0x4bb445e971632e796858a70b61ec61747decbd1562d9bbe93d39ce7dddcbd597",
          "refSlot": 12899999,
          "processingDeadlineTime": 1761652811,
          "processingStarted": true
        },
        "getConsensusVersion": 4,
        "getContractVersion": 2,
        "getExitRequestLimitFullInfo": {
          "maxExitRequestsLimit": 11200,
          "exitsPerFrame": 1,
          "frameDurationInSec": 48,
          "prevExitRequestsLimit": 11200,
          "currentExitRequestsLimit": 11200
        },
        "getMaxValidatorsPerReport": 600,
        "getProcessingState": {
          "currentFrameRefSlot": 12899999,
          "processingDeadlineTime": 1761652811,
          "dataHash": "0x4bb445e971632e796858a70b61ec61747decbd1562d9bbe93d39ce7dddcbd597",
          "dataSubmitted": true,
          "dataFormat": 1,
          "requestsCount": 0,
          "requestsSubmitted": 0
        },
        "getResumeSinceTimestamp": 1684163759,
        "getTotalRequestsProcessed": 112133,
        "isPaused": false,
        "MANAGE_CONSENSUS_CONTRACT_ROLE": "0x04a0afbbd09d5ad397fc858789da4f8edd59f5ca5098d70faa490babee945c3b",
        "MANAGE_CONSENSUS_VERSION_ROLE": "0xc31b1e4b732c5173dc51d519dfa432bad95550ecc4b0f9a61c2a558a2a8e4341",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0x905A211eD6830Cfc95643f0bE2ff64E7f3bf9b94",
        "proxy__getIsOssified": false,
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "SECONDS_PER_SLOT": 12,
        "SUBMIT_DATA_ROLE": "0x65fa0c17458517c727737e4153dd477fa3e328cf706640b0f68b1a285c5990da",
        "SUBMIT_REPORT_HASH_ROLE": "0x22ebb4dbafb72948800c1e1afa1688772a1a4cfc54d5ebfcec8163b1139c082e"
      },
      "implementationNames": {
        "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e": "OssifiableProxy",
        "eth:0x905A211eD6830Cfc95643f0bE2ff64E7f3bf9b94": "ValidatorsExitBusOracle"
      }
    },
    {
      "name": "Escrow",
      "address": "eth:0x165813A31446a98c84E20Dda8C101BB3C8228e1c",
      "type": "Contract",
      "template": "lido-v2/Escrow",
      "sourceHashes": [
        "0xd9f9991c7842b006c55969b68ed493f4b070e84ae43add94e11a7cfb65a25505",
        "0xd9f9991c7842b006c55969b68ed493f4b070e84ae43add94e11a7cfb65a25505"
      ],
      "proxyType": "EIP1167 proxy",
      "sinceTimestamp": 1754648507,
      "sinceBlock": 23095715,
      "values": {
        "$implementation": "eth:0xd6A67636c05BeB5B4a5c90D408b03A63c4e39426",
        "DUAL_GOVERNANCE": "eth:0xC1db28B3301331277e307FDCfF8DE28242A4486E",
        "ESCROW_MASTER_COPY": "eth:0xd6A67636c05BeB5B4a5c90D408b03A63c4e39426",
        "getEscrowState": 1,
        "getMinAssetsLockDuration": 18000,
        "getNextWithdrawalBatch": [],
        "getRageQuitSupport": 0,
        "getSignallingEscrowDetails": {
          "totalStETHLockedShares": 0,
          "totalStETHClaimedETH": 0,
          "totalUnstETHUnfinalizedShares": 0,
          "totalUnstETHFinalizedETH": 0
        },
        "MAX_MIN_ASSETS_LOCK_DURATION": 4147200,
        "MIN_TRANSFERRABLE_ST_ETH_AMOUNT": 100,
        "MIN_WITHDRAWALS_BATCH_SIZE": 4,
        "ST_ETH": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "WITHDRAWAL_QUEUE": "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
        "WST_ETH": "eth:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0"
      },
      "implementationNames": {
        "eth:0x165813A31446a98c84E20Dda8C101BB3C8228e1c": "Escrow",
        "eth:0xd6A67636c05BeB5B4a5c90D408b03A63c4e39426": "Escrow"
      }
    },
    {
      "address": "eth:0x19aC7c69e5F1AC95b8d49b30Cbb79e81f1ab0dba",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x237Cddf3aA765260cf6b60E064065Da7c3Aa1559",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Executor",
      "address": "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
      "type": "Contract",
      "sourceHashes": [
        "0x33176713c8bc53d9f46325ccec5fe1c649339680136f0c8194b4aedba2d51720"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1747910939,
      "sinceBlock": 22537920,
      "values": {
        "$immutable": true,
        "owner": "eth:0xCE0425301C85c5Ea2A0873A2dEe44d78E02D2316"
      },
      "implementationNames": {
        "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021": "Executor"
      }
    },
    {
      "address": "eth:0x285f8537e1dAeEdaf617e96C742F2Cf36d63CcfB",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x294ED1f214F4e0ecAE31C3Eae4F04EBB3b36C9d0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Voting",
      "address": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
      "type": "Contract",
      "template": "tokens/Lido/Voting",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0xa842994a8949a7342519ad27871fef42aa9cb51c4a52846aed4a726af01590b4"
      ],
      "proxyType": "EIP897 proxy",
      "ignoreInWatchMode": ["votesLength"],
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xf165148978Fa3cE74d76043f833463c340CFB704",
        "appId": "0x0abcd104777321a82b010357f20887d61247493d89d2e987ff57bcecbde00e1e",
        "CREATE_VOTES_ROLE": "0xe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc",
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "eth:0xf165148978Fa3cE74d76043f833463c340CFB704",
        "isDepositable": false,
        "isForwarder": true,
        "isPetrified": false,
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "minAcceptQuorumPct": "50000000000000000",
        "MODIFY_QUORUM_ROLE": "0xad15e7261800b4bb73f1b69d3864565ffb1fd00cb93cf14fe48da8f1f2149f39",
        "MODIFY_SUPPORT_ROLE": "0xda3972983e62bdf826c4b807c4c9c2b8a941e1f83dfa76d53d6aeac11e1be650",
        "objectionPhaseTime": 172800,
        "PCT_BASE": "1000000000000000000",
        "proxyType": 2,
        "supportRequiredPct": "500000000000000000",
        "token": "eth:0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",
        "UNSAFELY_MODIFY_VOTE_TIME_ROLE": "0x068ca51c9d69625c7add396c98ca4f3b27d894c3b973051ad3ee53017d7094ea",
        "votesLength": 194,
        "voteTime": 432000
      },
      "implementationNames": {
        "eth:0x2e59A20f205bB85a89C53f1936454680651E618e": "AppProxyUpgradeable",
        "eth:0xf165148978Fa3cE74d76043f833463c340CFB704": "Voting"
      }
    },
    {
      "name": "LidoExecutionLayerRewardsVault",
      "address": "eth:0x388C818CA8B9251b393131C08a736A67ccB19297",
      "type": "Contract",
      "sourceHashes": [
        "0xd7305a2d008e26be8f8e72e060e9781b7b5e8b3037fad9d367b5ae5d624d08c1"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1653382011,
      "sinceBlock": 14834805,
      "values": {
        "$immutable": true,
        "LIDO": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "TREASURY": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"
      },
      "implementationNames": {
        "eth:0x388C818CA8B9251b393131C08a736A67ccB19297": "LidoExecutionLayerRewardsVault"
      }
    },
    {
      "name": "TiebreakerSubCommittee",
      "address": "eth:0x3D3ba54D54bbFF40F2Dfa2A8e27bD4dE3dab2951",
      "type": "Contract",
      "template": "lido-v2/TiebreakerSubCommittee",
      "sourceHashes": [
        "0x4adcce95826015839acfaae5b9c6e7e7d48d7130177fa3720ce9bc31332c6b72"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1754648531,
      "sinceBlock": 23095717,
      "values": {
        "$immutable": true,
        "getMembers": [
          "eth:0x805fa0f79DC0DDCD73dCBc23487d2D5bd77de598",
          "eth:0x49769C3443c74f144991cA560ba5F635581B8176",
          "eth:0x9A921867EbB579D137184b397E7D087f1ae716fd",
          "eth:0x81000e270B4f66B8666544E8FEc073e0a23FFf00",
          "eth:0xD8a9072D82a28307279aC0aD3c97Cb61bEe67952"
        ],
        "getProposalAt": [],
        "getProposalsLength": 0,
        "getQuorum": 3,
        "getTimelockDuration": 0,
        "owner": "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
        "TIEBREAKER_CORE_COMMITTEE": "eth:0xf65614d73952Be91ce0aE7Dd9cFf25Ba15bEE2f5"
      },
      "implementationNames": {
        "eth:0x3D3ba54D54bbFF40F2Dfa2A8e27bD4dE3dab2951": "TiebreakerSubCommittee"
      }
    },
    {
      "name": "Lido Dao Agent",
      "address": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
      "type": "Contract",
      "template": "tokens/Lido/LidoDaoAgent",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0xa2a0001d171ac04fee445851ab0e1c994c3b76a49ae877c1b3d2b563ae8b8178"
      ],
      "proxyType": "EIP897 proxy",
      "description": "Custom role-based operations entrypoint for Lido.",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x06cd61045f958A209a0f8D746e103eCc625f4193",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x4D4074628678Bd302921c20573EEa1ed38DdF7FB",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x852deD011285fe67063a08005c71a85690503Cee",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x9D28ad303C90DF524BA960d7a2DAC56DcC31e428",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xaa328816027F2D32B9F56d190BC9Fa4A5C07637f",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xB314D4A76C457c93150d308787939063F4Cc67E0",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xD99CC66fEC647E68294C6477B40fC7E0F6F618D0",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37",
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          }
        },
        "ADD_PRESIGNED_HASH_ROLE": "0x0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c",
        "ADD_PROTECTED_TOKEN_ROLE": "0x6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa",
        "appId": "0x701a4fd1f5174d12a0f1d9ad2c88d0ad11ab6aad0ac72b7d9ce621815f8016a9",
        "DESIGNATE_SIGNER_ROLE": "0x23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c",
        "designatedSigner": "eth:0x0000000000000000000000000000000000000000",
        "ERC1271_INTERFACE_ID": "0xfb855dc9",
        "ERC1271_RETURN_INVALID_SIGNATURE": "0x00000000",
        "ERC1271_RETURN_VALID_SIGNATURE": "0x20c13b0b",
        "EXECUTE_ROLE": "0xcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4",
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getProtectedTokensLength": 0,
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "eth:0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37",
        "isDepositable": true,
        "isForwarder": true,
        "isPetrified": false,
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "PROTECTED_TOKENS_CAP": 10,
        "protectedTokens": [],
        "proxyType": 2,
        "REMOVE_PROTECTED_TOKEN_ROLE": "0x71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a",
        "RUN_SCRIPT_ROLE": "0xb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f",
        "SAFE_EXECUTE_ROLE": "0x0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b7933694",
        "TRANSFER_ROLE": "0x8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c"
      },
      "implementationNames": {
        "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": "AppProxyUpgradeable",
        "eth:0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37": "Agent"
      }
    },
    {
      "address": "eth:0x404335BcE530400a5814375E7Ec1FB55fAff3eA2",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x4118DAD7f348A4063bD15786c299De2f3B1333F3",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "LegacyOracle",
      "address": "eth:0x442af784A788A5bd6F42A01Ebe9F287a871243fb",
      "type": "Contract",
      "template": "tokens/Lido/LegacyOracle",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0xacfebcd69dc18081773b5b8a5526a62a7653f6b71894e95de0ee1c661eb3a5d4"
      ],
      "proxyType": "EIP897 proxy",
      "ignoreInWatchMode": [
        "getBeaconSpec",
        "getCurrentEpochId",
        "getCurrentFrame",
        "getLastCompletedEpochId",
        "getLastCompletedReportDelta"
      ],
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xa29b819654cE6224A222bb5f586920105E2D7E0E",
        "appId": "0x8b47ba2a8454ec799cd91646e7ec47168e91fd139b23f017455f3e5898aaba93",
        "getAccountingOracle": "eth:0x852deD011285fe67063a08005c71a85690503Cee",
        "getBeaconSpec": {
          "epochsPerFrame": 225,
          "slotsPerEpoch": 32,
          "secondsPerSlot": 12,
          "genesisTime": 1606824023
        },
        "getContractVersion": 4,
        "getCurrentEpochId": 403180,
        "getCurrentFrame": {
          "frameEpochId": 402975,
          "frameStartTime": 1761566423,
          "frameEndTime": 1761652822
        },
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getLastCompletedEpochId": 402975,
        "getLastCompletedReportDelta": {
          "postTotalPooledEther": "9712033027760740633827249",
          "preTotalPooledEther": "9750705483524764079948551",
          "timeElapsed": 86400
        },
        "getLido": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "getVersion": 4,
        "hasInitialized": true,
        "implementation": "eth:0xa29b819654cE6224A222bb5f586920105E2D7E0E",
        "isDepositable": false,
        "isPetrified": false,
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "proxyType": 2
      },
      "implementationNames": {
        "eth:0x442af784A788A5bd6F42A01Ebe9F287a871243fb": "AppProxyUpgradeable",
        "eth:0xa29b819654cE6224A222bb5f586920105E2D7E0E": "LegacyOracle"
      }
    },
    {
      "address": "eth:0x49769C3443c74f144991cA560ba5F635581B8176",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "CSFeeOracle",
      "address": "eth:0x4D4074628678Bd302921c20573EEa1ed38DdF7FB",
      "type": "Contract",
      "template": "tokens/Lido/CSFeeOracle",
      "sourceHashes": [
        "0x0e9e628d137fa4b53b03ce51b1b0e0122d524ca323f45751894d2e62c91c2651",
        "0xe9044668de5a790902b6bfed112ac2d764965db11a13b730c985ceff09edff4d"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1728566339,
      "sinceBlock": 20935462,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0xe0B234f99E413E27D9Bc31aBba9A49A3e570Da97",
        "$pastUpgrades": [
          [
            "2024-10-10T13:18:59.000Z",
            "0x3dfff1bb9a5dd98d252ab44ae3ef8a002a4ab84ef6f35f5b7aeeae60f91ec32e",
            ["eth:0x919ac5C6c62B6ef7B05cF05070080525a7B0381E"]
          ],
          [
            "2025-10-02T15:52:47.000Z",
            "0xfff774d519ec1afd4358d4858672578437e815dc1652245a2ffb7bde1bfff2ad",
            ["eth:0xe0B234f99E413E27D9Bc31aBba9A49A3e570Da97"]
          ]
        ],
        "$upgradeCount": 2,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "FEE_DISTRIBUTOR": "eth:0xD99CC66fEC647E68294C6477B40fC7E0F6F618D0",
        "GENESIS_TIME": 1606824023,
        "getConsensusContract": "eth:0x71093efF8D8599b5fA340D665Ad60fA7C80688e4",
        "getConsensusVersion": 3,
        "getContractVersion": 2,
        "getResumeSinceTimestamp": 0,
        "isPaused": false,
        "MANAGE_CONSENSUS_CONTRACT_ROLE": "0x04a0afbbd09d5ad397fc858789da4f8edd59f5ca5098d70faa490babee945c3b",
        "MANAGE_CONSENSUS_VERSION_ROLE": "0xc31b1e4b732c5173dc51d519dfa432bad95550ecc4b0f9a61c2a558a2a8e4341",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0xe0B234f99E413E27D9Bc31aBba9A49A3e570Da97",
        "proxy__getIsOssified": false,
        "RECOVERER_ROLE": "0xb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc",
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "SECONDS_PER_SLOT": 12,
        "STRIKES": "eth:0xaa328816027F2D32B9F56d190BC9Fa4A5C07637f",
        "SUBMIT_DATA_ROLE": "0x65fa0c17458517c727737e4153dd477fa3e328cf706640b0f68b1a285c5990da"
      },
      "implementationNames": {
        "eth:0x4D4074628678Bd302921c20573EEa1ed38DdF7FB": "OssifiableProxy",
        "eth:0xe0B234f99E413E27D9Bc31aBba9A49A3e570Da97": "CSFeeOracle"
      }
    },
    {
      "name": "CSAccounting",
      "address": "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da",
      "type": "Contract",
      "template": "tokens/Lido/CSAccounting",
      "sourceHashes": [
        "0x0e9e628d137fa4b53b03ce51b1b0e0122d524ca323f45751894d2e62c91c2651",
        "0xa3793b129329502d6009f7a85359b308a4c6469ce911caf16b24083bdc712519"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["getBondLockRetentionPeriod", "totalBondShares"],
      "sinceTimestamp": 1728566339,
      "sinceBlock": 20935462,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x6f09d2426c7405C5546413e6059F884D2D03f449",
        "$pastUpgrades": [
          [
            "2024-10-10T13:18:59.000Z",
            "0x94ce92b9b05768e1908e5eab2097dc80da33715a37de5ffb149fc6142fa2a93b",
            ["eth:0x71FCD2a6F38B644641B0F46c345Ea03Daabf2758"]
          ],
          [
            "2025-10-02T15:52:47.000Z",
            "0xfff774d519ec1afd4358d4858672578437e815dc1652245a2ffb7bde1bfff2ad",
            ["eth:0x6f09d2426c7405C5546413e6059F884D2D03f449"]
          ]
        ],
        "$upgradeCount": 2,
        "chargePenaltyRecipient": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DEFAULT_BOND_CURVE_ID": 0,
        "FEE_DISTRIBUTOR": "eth:0xD99CC66fEC647E68294C6477B40fC7E0F6F618D0",
        "feeDistributor": "eth:0xD99CC66fEC647E68294C6477B40fC7E0F6F618D0",
        "getBondLockPeriod": 4838400,
        "getCurvesCount": 3,
        "getInitializedVersion": 2,
        "getResumeSinceTimestamp": 0,
        "isPaused": false,
        "LIDO": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "LIDO_LOCATOR": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "MANAGE_BOND_CURVES_ROLE": "0xd35e4a788498271198ec69c34f1dc762a1eee8200c111f598da1b3dde946783d",
        "MAX_BOND_LOCK_PERIOD": 31536000,
        "MAX_CURVE_LENGTH": 100,
        "MIN_BOND_LOCK_PERIOD": 2419200,
        "MIN_CURVE_LENGTH": 1,
        "MODULE": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0x6f09d2426c7405C5546413e6059F884D2D03f449",
        "proxy__getIsOssified": false,
        "RECOVERER_ROLE": "0xb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc",
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "SET_BOND_CURVE_ROLE": "0x645c9e6d2a86805cb5a28b1e4751c0dab493df7cf935070ce405489ba1a7bf72",
        "totalBondShares": "12510085745306821043754",
        "WITHDRAWAL_QUEUE": "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
        "WSTETH": "eth:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0"
      },
      "implementationNames": {
        "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da": "OssifiableProxy",
        "eth:0x6f09d2426c7405C5546413e6059F884D2D03f449": "CSAccounting"
      }
    },
    {
      "name": "CuratedModule",
      "address": "eth:0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5",
      "type": "Contract",
      "template": "tokens/Lido/NodeOperatorsRegistry",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0x7e3615bebdb8e2033c00916316355965e076187f136311105c57e4ab8eed8911"
      ],
      "proxyType": "EIP897 proxy",
      "ignoreInWatchMode": [
        "getStakingModuleSummary",
        "getActiveNodeOperatorsCount",
        "getNodeOperatorsCount"
      ],
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x6828b023e737f96B168aCd0b5c6351971a4F81aE",
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          }
        },
        "appId": "0x7071f283424072341f856ac9e947e7ec0eb68719f757a7e785979b6b8717579d",
        "exitPenaltyCutoffTimestamp": 1759074767,
        "getActiveNodeOperatorsCount": 37,
        "getContractVersion": 4,
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getLocator": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "getNodeOperatorsCount": 39,
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "getRewardDistributionState": 2,
        "getStakingModuleSummary": {
          "totalExitedValidators": 137891,
          "totalDepositedValidators": 384744,
          "depositableValidatorsCount": 45260
        },
        "getStuckPenaltyDelay": 0,
        "getType": "0x637572617465642d6f6e636861696e2d76310000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "eth:0x6828b023e737f96B168aCd0b5c6351971a4F81aE",
        "isDepositable": false,
        "isPetrified": false,
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "MANAGE_NODE_OPERATOR_ROLE": "0x78523850fdd761612f46e844cf5a16bda6b3151d6ae961fd7e8e7b92bfbca7f8",
        "MANAGE_SIGNING_KEYS": "0x75abc64490e17b40ea1e66691c3eb493647b24430b358bd87ec3e5127f1621ee",
        "MAX_NODE_OPERATOR_NAME_LENGTH": 255,
        "MAX_NODE_OPERATORS_COUNT": 200,
        "MAX_STUCK_PENALTY_DELAY": 31536000,
        "proxyType": 2,
        "SET_NODE_OPERATOR_LIMIT_ROLE": "0x07b39e0faf2521001ae4e58cb9ffd3840a63e205d288dc9c93c3774f0d794754",
        "STAKING_ROUTER_ROLE": "0xbb75b874360e0bfd87f964eadd8276d8efb7c942134fc329b513032d0803e0c6"
      },
      "implementationNames": {
        "eth:0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5": "AppProxyUpgradeable",
        "eth:0x6828b023e737f96B168aCd0b5c6351971a4F81aE": "NodeOperatorsRegistry"
      }
    },
    {
      "name": "TimelockedGovernance",
      "address": "eth:0x553337946F2FAb8911774b20025fa776B76a7CcE",
      "type": "Contract",
      "template": "lido-v2/TimelockedGovernance",
      "sourceHashes": [
        "0xd5ab5e5d61cea4ae48fec930df5df92eb34a59ac8b74a091780141bcffc18b04"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1747912007,
      "sinceBlock": 22538009,
      "values": {
        "$immutable": true,
        "GOVERNANCE": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
        "TIMELOCK": "eth:0xCE0425301C85c5Ea2A0873A2dEe44d78E02D2316"
      },
      "implementationNames": {
        "eth:0x553337946F2FAb8911774b20025fa776B76a7CcE": "TimelockedGovernance"
      }
    },
    {
      "name": "SetNodeOperatorRewardAddresses",
      "address": "eth:0x589e298964b9181D9938B84bB034C3BB9024E2C0",
      "type": "Contract",
      "sourceHashes": [
        "0x9bd05b85f9526ca4373a5fd3b1ad7dab287c78661c60b5b5a3f6acdda3168ebe"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1703582915,
      "sinceBlock": 18868977,
      "values": {
        "$immutable": true,
        "lido": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "nodeOperatorsRegistry": "eth:0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
        "trustedCaller": "eth:0x08637515E85A4633E23dfc7861e2A9f53af640f7"
      },
      "implementationNames": {
        "eth:0x589e298964b9181D9938B84bB034C3BB9024E2C0": "SetNodeOperatorRewardAddresses"
      }
    },
    {
      "address": "eth:0x59F8D74Fe49d5ebEAc069E3baf07eB4b614BD5A7",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x5a409567bCa7459b3aC7e6E5a3F1a3C278071b71",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Lido DAO Token",
      "address": "eth:0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",
      "type": "Contract",
      "template": "tokens/Lido/MiniMeToken",
      "sourceHashes": [
        "0x1098670857010f37e15b128a92baa1ccb42e961bd5e02b478a0c69fd8d66eb46"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": true,
        "controller": "eth:0xf73a1260d222f447210581DDf212D915c09a3249",
        "creationBlock": 11473216,
        "decimals": 18,
        "name": "Lido DAO Token",
        "parentSnapShotBlock": 0,
        "parentToken": "eth:0x0000000000000000000000000000000000000000",
        "symbol": "LDO",
        "tokenFactory": "eth:0x909d05F384D0663eD4BE59863815aB43b4f347Ec",
        "totalSupply": "1000000000000000000000000000",
        "transfersEnabled": true,
        "version": "MMT_0.1"
      },
      "implementationNames": {
        "eth:0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32": "MiniMeToken"
      }
    },
    {
      "name": "CallsScript",
      "address": "eth:0x5cEb19e1890f677c3676d5ecDF7c501eBA01A054",
      "type": "Contract",
      "sourceHashes": [
        "0xd780d735cdf68817096b080a062ea4f0205c452cdc60b6727cb9381ceccda19c"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1567696172,
      "sinceBlock": 8490792,
      "values": {
        "$immutable": true,
        "executorType": "0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302",
        "getInitializationBlock": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "hasInitialized": false,
        "isPetrified": true
      },
      "implementationNames": {
        "eth:0x5cEb19e1890f677c3676d5ecDF7c501eBA01A054": "CallsScript"
      }
    },
    {
      "address": "eth:0x5d60F5d653Cc318d1f0ABacd83eD4feeAa6e5804",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x5fd0dDbC3351d009eb3f88DE7Cd081a614C519F1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x60BDa95a40d5536303BFcf84D679ca461A23398d",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x61c91ECd902EB56e314bB2D5c5C07785444Ea1c8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OracleReportSanityChecker",
      "address": "eth:0x6232397ebac4f5772e53285B26c47914E9461E75",
      "type": "Contract",
      "template": "lido-v2/OracleReportSanityChecker",
      "sourceHashes": [
        "0xd50222dc8dfe7cd169366ab34979e2962975f9b018fa27dc1443d09a8698dc92"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1728395495,
      "sinceBlock": 20921274,
      "values": {
        "$immutable": true,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "EXITED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "APPEARED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "INITIAL_SLASHING_AND_PENALTIES_MANAGER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          }
        },
        "ALL_LIMITS_MANAGER_ROLE": "0x5bf88568a012dfc9fe67407ad6775052bddc4ac89902dea1f4373ef5d9f1e35b",
        "ANNUAL_BALANCE_INCREASE_LIMIT_MANAGER_ROLE": "0x12c02753cd3d584dc4bb965eb0c88392c4c4d7c00433fdb7490d33c61ea57622",
        "APPEARED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE": "0x14ca7b84baa11a976283347b0159b8ddf2dcf5fd5cf613cc567a3423cf510119",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXITED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE": "0x60b9982471bc0620c7b74959f48a86c55c92c11876fddc5b0b54d1ec47153e5d",
        "getLidoLocator": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "getMaxPositiveTokenRebase": 750000,
        "getOracleReportLimits": {
          "exitedValidatorsPerDayLimit": 3600,
          "appearedValidatorsPerDayLimit": 1800,
          "annualBalanceIncreaseBPLimit": 1000,
          "simulatedShareRateDeviationBPLimit": 50,
          "maxValidatorExitRequestsPerReport": 600,
          "maxItemsPerExtraDataTransaction": 8,
          "maxNodeOperatorsPerExtraDataItem": 24,
          "requestTimestampMargin": 7680,
          "maxPositiveTokenRebase": 750000,
          "initialSlashingAmountPWei": 8,
          "inactivityPenaltiesAmountPWei": 101,
          "clBalanceOraclesErrorUpperBPLimit": 50
        },
        "getReportDataCount": 367,
        "INITIAL_SLASHING_AND_PENALTIES_MANAGER_ROLE": "0xebfa317a5d279811b024586b17a50f48924bce86f6293b233927322d7209b507",
        "MAX_ITEMS_PER_EXTRA_DATA_TRANSACTION_ROLE": "0x13445b811594f3a8800b82296d63f371c695d2f86c1069c899ded3d73f523d2e",
        "MAX_NODE_OPERATORS_PER_EXTRA_DATA_ITEM_ROLE": "0xb3f2d16385bde8a7121e101a021aff43bbe4d4137a587832caf1f583b9d34395",
        "MAX_POSITIVE_TOKEN_REBASE_MANAGER_ROLE": "0x78de2bab4a3a0c88f50b6bb7c2290e0eb46bc61d575eae694d8bffbc2ca98c92",
        "MAX_VALIDATOR_EXIT_REQUESTS_PER_REPORT_ROLE": "0x9925400e72399e0a89e9b346878fc47ac0031526d0e060e33ff372d7a5d11ba8",
        "reportData": [
          [1729944011, 75489, 0],
          [1730030411, 75489, 0],
          [1730116811, 75489, 0],
          [1730203211, 75741, 0],
          [1730289611, 75784, 0]
        ],
        "REQUEST_TIMESTAMP_MARGIN_MANAGER_ROLE": "0x2f8719116fbba3aba2a39759e34dcd29ea3516f7568c8321695aaea208280cd3",
        "SECOND_OPINION_MANAGER_ROLE": "0xaa0e0f619f5a9368ee035bae759cfe7da8958f44bd71456a05198effc68ea647",
        "secondOpinionOracle": "eth:0x0000000000000000000000000000000000000000",
        "SHARE_RATE_DEVIATION_LIMIT_MANAGER_ROLE": "0x7b21c0949109e9e143f66d6aa1f8a065b3f4ab47ee9f84f6837fd0490eace4d5"
      },
      "errors": { "reportData": "Processing error occurred." },
      "implementationNames": {
        "eth:0x6232397ebac4f5772e53285B26c47914E9461E75": "OracleReportSanityChecker"
      }
    },
    {
      "address": "eth:0x62c89F5768D0FeC0915fb614C5eDd9fdeaA2A3fd",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x62CeDec8B7c81bEe91d97725c9a14dC23C3227E2",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x6aC2dF117C82F51BfdEF1A249672b9A9cA6b3d86",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x6d22aE126eB2c37F67a1391B37FF4f2863e61389",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "HashConsensus",
      "address": "eth:0x71093efF8D8599b5fA340D665Ad60fA7C80688e4",
      "type": "Contract",
      "template": "tokens/Lido/HashConsensus",
      "sourceHashes": [
        "0xd7c073e5462dc74227ab219c6db299253e6a83e1a470f27a9d5dcff04fd6b46f"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "getConsensusState",
        "getCurrentFrame",
        "getFastLaneMembers",
        "getFrameConfig",
        "getMembers",
        "getReportVariants"
      ],
      "sinceTimestamp": 1728566351,
      "sinceBlock": 20935463,
      "values": {
        "$immutable": true,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "MANAGE_MEMBERS_AND_QUORUM_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DISABLE_CONSENSUS_ROLE": "0x10b016346186602d93fc7a27ace09ba944baf9453611b186d36acd3d3d667dc0",
        "getChainConfig": {
          "slotsPerEpoch": 32,
          "secondsPerSlot": 12,
          "genesisTime": 1606824023
        },
        "getConsensusState": {
          "refSlot": 12874079,
          "consensusReport": "0x32edfabd5939792aa90683b5ebbdf22392dc3815b5093886df53a9d48942fc81",
          "isReportProcessing": true
        },
        "getCurrentFrame": {
          "refSlot": 12874079,
          "reportProcessingDeadlineSlot": 13075679
        },
        "getFastLaneMembers": {
          "addresses": [
            "eth:0x946D3b081ed19173dC83Cd974fC69e1e760B7d78",
            "eth:0x007DE4a5F7bc37E2F26c0cb2E8A95006EE9B89b5",
            "eth:0xc79F702202E3A6B0B6310B537E786B9ACAA19BAf",
            "eth:0x61c91ECd902EB56e314bB2D5c5C07785444Ea1c8",
            "eth:0xe57B3792aDCc5da47EF4fF588883F0ee0c9835C9"
          ],
          "lastReportedRefSlots": [
            12672479, 12874079, 12470879, 11261279, 12470879
          ]
        },
        "getFrameConfig": {
          "initialEpoch": 326715,
          "epochsPerFrame": 6300,
          "fastLaneLengthSlots": 1800
        },
        "getInitialRefSlot": 10454879,
        "getMembers": {
          "addresses": [
            "eth:0x73181107c8D9ED4ce0bbeF7A0b4ccf3320C41d12",
            "eth:0x285f8537e1dAeEdaf617e96C742F2Cf36d63CcfB",
            "eth:0x404335BcE530400a5814375E7Ec1FB55fAff3eA2",
            "eth:0x946D3b081ed19173dC83Cd974fC69e1e760B7d78",
            "eth:0x007DE4a5F7bc37E2F26c0cb2E8A95006EE9B89b5",
            "eth:0xc79F702202E3A6B0B6310B537E786B9ACAA19BAf",
            "eth:0x61c91ECd902EB56e314bB2D5c5C07785444Ea1c8",
            "eth:0xe57B3792aDCc5da47EF4fF588883F0ee0c9835C9",
            "eth:0x4118DAD7f348A4063bD15786c299De2f3B1333F3"
          ],
          "lastReportedRefSlots": [
            12874079, 12874079, 12874079, 12672479, 12874079, 12470879,
            11261279, 12470879, 12874079
          ]
        },
        "getQuorum": 5,
        "getReportProcessor": "eth:0x4D4074628678Bd302921c20573EEa1ed38DdF7FB",
        "getReportVariants": {
          "variants": [
            "0x32edfabd5939792aa90683b5ebbdf22392dc3815b5093886df53a9d48942fc81"
          ],
          "support": [5]
        },
        "MANAGE_FAST_LANE_CONFIG_ROLE": "0x4af6faa30fabb2c4d8d567d06168f9be8adb583156c1ecb424b4832a7e4d6717",
        "MANAGE_FRAME_CONFIG_ROLE": "0x921f40f434e049d23969cbe68d9cf3ac1013fbe8945da07963af6f3142de6afe",
        "MANAGE_MEMBERS_AND_QUORUM_ROLE": "0x66a484cf1a3c6ef8dfd59d24824943d2853a29d96f34a01271efc55774452a51",
        "MANAGE_REPORT_PROCESSOR_ROLE": "0xc5219a8d2d0107a57aad00b22081326d173df87bad251126f070df2659770c3e"
      },
      "implementationNames": {
        "eth:0x71093efF8D8599b5fA340D665Ad60fA7C80688e4": "HashConsensus"
      }
    },
    {
      "address": "eth:0x73181107c8D9ED4ce0bbeF7A0b4ccf3320C41d12",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x7912Fa976BcDe9c2cf728e213e892AD7588E6AaF",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ResealManager",
      "address": "eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24",
      "type": "Contract",
      "sourceHashes": [
        "0xdfcb340b0911e932beca1372a5d9805e86c51d062aefc944bca6bcce419dae75"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1747910963,
      "sinceBlock": 22537922,
      "values": {
        "$immutable": true,
        "EMERGENCY_PROTECTED_TIMELOCK": "eth:0xCE0425301C85c5Ea2A0873A2dEe44d78E02D2316",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
      },
      "implementationNames": {
        "eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24": "ResealManager"
      }
    },
    {
      "address": "eth:0x7962cFa46B15BAb1aE798d927FAE83CC73a0E64D",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x7aFd3C7f16FdBB3AdF331Fcc20A585d768ECf60d",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x7d32EDD94Ce35dE727d7Df60D582da2cBa55FB25",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Wrapped liquid staked Ether 2.0 Token",
      "address": "eth:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
      "type": "Contract",
      "template": "tokens/Lido/wstETH",
      "sourceHashes": [
        "0x6b938c3d38678ebb00f3860def4bdf9d5d8ab7008a6d598cc109fdf7a6c34e0e"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["tokensPerStEth", "stEthPerToken", "totalSupply"],
      "sinceTimestamp": 1613752640,
      "sinceBlock": 11888477,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0xd4a8ff90a402dc7d4fcbf60f5488291263c743ccff180e139f47d139cedfd5fe",
        "name": "Wrapped liquid staked Ether 2.0",
        "stETH": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "stEthPerToken": "1217608678668834935",
        "symbol": "wstETH",
        "tokensPerStEth": "821281925399268513",
        "totalSupply": "3340936794687758956060769"
      },
      "implementationNames": {
        "eth:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0": "WstETH"
      }
    },
    {
      "name": "HashConsensus",
      "address": "eth:0x7FaDB6358950c5fAA66Cb5EB8eE5147De3df355a",
      "type": "Contract",
      "template": "tokens/Lido/HashConsensus",
      "sourceHashes": [
        "0xdcb2da84a44fbac1b8d7ea814fd34325ac06bb8169fad7507a00835a3ffb25de"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "getConsensusState",
        "getCurrentFrame",
        "getFastLaneMembers",
        "getFrameConfig",
        "getMembers",
        "getReportVariants"
      ],
      "sinceTimestamp": 1683024059,
      "sinceBlock": 17172558,
      "values": {
        "$immutable": true,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "MANAGE_MEMBERS_AND_QUORUM_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DISABLE_CONSENSUS_ROLE": "0x10b016346186602d93fc7a27ace09ba944baf9453611b186d36acd3d3d667dc0",
        "getChainConfig": {
          "slotsPerEpoch": 32,
          "secondsPerSlot": 12,
          "genesisTime": 1606824023
        },
        "getConsensusState": {
          "refSlot": 12899999,
          "consensusReport": "0x4bb445e971632e796858a70b61ec61747decbd1562d9bbe93d39ce7dddcbd597",
          "isReportProcessing": true
        },
        "getCurrentFrame": {
          "refSlot": 12899999,
          "reportProcessingDeadlineSlot": 12902399
        },
        "getFastLaneMembers": {
          "addresses": [
            "eth:0xc79F702202E3A6B0B6310B537E786B9ACAA19BAf",
            "eth:0x61c91ECd902EB56e314bB2D5c5C07785444Ea1c8",
            "eth:0xe57B3792aDCc5da47EF4fF588883F0ee0c9835C9",
            "eth:0x4118DAD7f348A4063bD15786c299De2f3B1333F3",
            "eth:0x73181107c8D9ED4ce0bbeF7A0b4ccf3320C41d12"
          ],
          "lastReportedRefSlots": [
            12899999, 12899999, 12899999, 12899999, 12899999
          ]
        },
        "getFrameConfig": {
          "initialEpoch": 201600,
          "epochsPerFrame": 75,
          "fastLaneLengthSlots": 100
        },
        "getInitialRefSlot": 6451199,
        "getMembers": {
          "addresses": [
            "eth:0x73181107c8D9ED4ce0bbeF7A0b4ccf3320C41d12",
            "eth:0x285f8537e1dAeEdaf617e96C742F2Cf36d63CcfB",
            "eth:0x404335BcE530400a5814375E7Ec1FB55fAff3eA2",
            "eth:0x946D3b081ed19173dC83Cd974fC69e1e760B7d78",
            "eth:0x007DE4a5F7bc37E2F26c0cb2E8A95006EE9B89b5",
            "eth:0xc79F702202E3A6B0B6310B537E786B9ACAA19BAf",
            "eth:0x61c91ECd902EB56e314bB2D5c5C07785444Ea1c8",
            "eth:0xe57B3792aDCc5da47EF4fF588883F0ee0c9835C9",
            "eth:0x4118DAD7f348A4063bD15786c299De2f3B1333F3"
          ],
          "lastReportedRefSlots": [
            12899999, 12892799, 12892799, 12895199, 12897599, 12899999,
            12899999, 12899999, 12899999
          ]
        },
        "getQuorum": 5,
        "getReportProcessor": "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e",
        "getReportVariants": {
          "variants": [
            "0x4bb445e971632e796858a70b61ec61747decbd1562d9bbe93d39ce7dddcbd597"
          ],
          "support": [5]
        },
        "MANAGE_FAST_LANE_CONFIG_ROLE": "0x4af6faa30fabb2c4d8d567d06168f9be8adb583156c1ecb424b4832a7e4d6717",
        "MANAGE_FRAME_CONFIG_ROLE": "0x921f40f434e049d23969cbe68d9cf3ac1013fbe8945da07963af6f3142de6afe",
        "MANAGE_MEMBERS_AND_QUORUM_ROLE": "0x66a484cf1a3c6ef8dfd59d24824943d2853a29d96f34a01271efc55774452a51",
        "MANAGE_REPORT_PROCESSOR_ROLE": "0xc5219a8d2d0107a57aad00b22081326d173df87bad251126f070df2659770c3e"
      },
      "implementationNames": {
        "eth:0x7FaDB6358950c5fAA66Cb5EB8eE5147De3df355a": "HashConsensus"
      }
    },
    {
      "address": "eth:0x805fa0f79DC0DDCD73dCBc23487d2D5bd77de598",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x80B2D9FA613c35Ec52B0dA5D84e6A819bcc5e369",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x81000e270B4f66B8666544E8FEc073e0a23FFf00",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x8103E9eDC04d87F6DA24A3a0c7778daE689E9D63",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x83EecCAf434AC9Da6132aB1124aFb755A2eA9266",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "AccountingOracle",
      "address": "eth:0x852deD011285fe67063a08005c71a85690503Cee",
      "type": "Contract",
      "template": "tokens/Lido/AccountingOracle",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0x90b97d1cb45e9893fa400657a6d60368adbd83c194db38ea948219e3cab9fb7b"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["getConsensusReport", "getProcessingState"],
      "sinceTimestamp": 1683023999,
      "sinceBlock": 17172553,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0xE9906E543274cebcd335d2C560094089e9547e8d",
        "$pastUpgrades": [
          [
            "2023-05-02T10:39:59.000Z",
            "0x3def88f27741216b131de2861cf89af2ca2ac4242b384ee33dca8cc70c51c8dd",
            ["eth:0x6F6541C2203196fEeDd14CD2C09550dA1CbEDa31"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["eth:0xF3c5E0A67f32CF1dc07a8817590efa102079a1aF"]
          ],
          [
            "2024-10-25T16:03:23.000Z",
            "0x0078b3e0cecb3b50c78a22e0b1a985e6cde3bf431e9cb3b2ba4e50260122d542",
            ["eth:0x0e65898527E77210fB0133D00dd4C0E86Dc29bC7"]
          ],
          [
            "2025-10-02T15:52:47.000Z",
            "0xfff774d519ec1afd4358d4858672578437e815dc1652245a2ffb7bde1bfff2ad",
            ["eth:0xE9906E543274cebcd335d2C560094089e9547e8d"]
          ]
        ],
        "$upgradeCount": 4,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "MANAGE_CONSENSUS_VERSION_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXTRA_DATA_FORMAT_EMPTY": 0,
        "EXTRA_DATA_FORMAT_LIST": 1,
        "EXTRA_DATA_TYPE_EXITED_VALIDATORS": 2,
        "EXTRA_DATA_TYPE_STUCK_VALIDATORS": 1,
        "GENESIS_TIME": 1606824023,
        "getConsensusContract": "eth:0xD624B08C83bAECF0807Dd2c6880C3154a5F0B288",
        "getConsensusReport": {
          "hash": "0x4055321480d87baa2250de03daebd9cc72c4250251a669318841f367bf46d104",
          "refSlot": 12895199,
          "processingDeadlineTime": 1761652811,
          "processingStarted": true
        },
        "getConsensusVersion": 4,
        "getContractVersion": 3,
        "getProcessingState": {
          "currentFrameRefSlot": 12895199,
          "processingDeadlineTime": 1761652811,
          "mainDataHash": "0x4055321480d87baa2250de03daebd9cc72c4250251a669318841f367bf46d104",
          "mainDataSubmitted": true,
          "extraDataHash": "0x0d61c82276c487a2918017230e73fbfcaf09511012faea64f680457032abefcb",
          "extraDataFormat": 1,
          "extraDataSubmitted": true,
          "extraDataItemsCount": 1,
          "extraDataItemsSubmitted": 1
        },
        "LEGACY_ORACLE": "eth:0x442af784A788A5bd6F42A01Ebe9F287a871243fb",
        "LIDO": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "LOCATOR": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "MANAGE_CONSENSUS_CONTRACT_ROLE": "0x04a0afbbd09d5ad397fc858789da4f8edd59f5ca5098d70faa490babee945c3b",
        "MANAGE_CONSENSUS_VERSION_ROLE": "0xc31b1e4b732c5173dc51d519dfa432bad95550ecc4b0f9a61c2a558a2a8e4341",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0xE9906E543274cebcd335d2C560094089e9547e8d",
        "proxy__getIsOssified": false,
        "roles": [
          {
            "role": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "account": "eth:0xa818fF9EC93122Bf9401ab4340C42De638CD600a"
          },
          {
            "role": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "account": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"
          },
          {
            "role": "0xc31b1e4b732c5173dc51d519dfa432bad95550ecc4b0f9a61c2a558a2a8e4341",
            "account": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"
          }
        ],
        "SECONDS_PER_SLOT": 12,
        "SUBMIT_DATA_ROLE": "0x65fa0c17458517c727737e4153dd477fa3e328cf706640b0f68b1a285c5990da"
      },
      "implementationNames": {
        "eth:0x852deD011285fe67063a08005c71a85690503Cee": "OssifiableProxy",
        "eth:0xE9906E543274cebcd335d2C560094089e9547e8d": "AccountingOracle"
      }
    },
    {
      "name": "EVMScriptRegistry",
      "address": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
      "type": "Contract",
      "template": "tokens/Lido/EVMScriptRegistry",
      "sourceHashes": [
        "0x3cab9c9a12a52c625f55b2d3d9693f8eb062cb0d41841589b557888ad01afced",
        "0x00350407c4a32b62d60dbac5ac3093bf4bffd482f40b2df2a9cd3268365b84e5"
      ],
      "proxyType": "EIP897 proxy",
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": true,
        "$implementation": "eth:0xBF1Ce0Bc4EdaAD8e576b3b55e19c4C15Cf6999eb",
        "appId": "0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61",
        "executors": [
          ["eth:0x0000000000000000000000000000000000000000", false],
          ["eth:0x5cEb19e1890f677c3676d5ecDF7c501eBA01A054", true],
          ["eth:0x0000000000000000000000000000000000000000", false],
          ["eth:0x0000000000000000000000000000000000000000", false],
          ["eth:0x0000000000000000000000000000000000000000", false]
        ],
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "eth:0xBF1Ce0Bc4EdaAD8e576b3b55e19c4C15Cf6999eb",
        "isDepositable": false,
        "isPetrified": false,
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "proxyType": 1,
        "REGISTRY_ADD_EXECUTOR_ROLE": "0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2",
        "REGISTRY_MANAGER_ROLE": "0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3"
      },
      "errors": { "executors": "Processing error occurred." },
      "implementationNames": {
        "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A": "AppProxyPinned",
        "eth:0xBF1Ce0Bc4EdaAD8e576b3b55e19c4C15Cf6999eb": "EVMScriptRegistry"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "eth:0x8772E3a2D86B9347A2688f9bc1808A6d8917760C",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1682983211,
      "sinceBlock": 17169197,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0x5a409567bCa7459b3aC7e6E5a3F1a3C278071b71",
          "eth:0xA39a62304d8d43B35114ad7bd1258B0E50e139b3",
          "eth:0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
          "eth:0x59F8D74Fe49d5ebEAc069E3baf07eB4b614BD5A7",
          "eth:0x912e21CdA3D7012146da4Df33309d860a9eb0bEb",
          "eth:0x9A3f38AF97b791C85c043D46a64f56f87E0283D4"
        ],
        "$threshold": 3,
        "domainSeparator": "0x4c7e2a60f9a91c42bc0a80fc6cf84899dcac85acaf7e8f90375d0ccf037dae98",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 6 (50%)",
        "nonce": 10,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0x8772E3a2D86B9347A2688f9bc1808A6d8917760C": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "WithdrawalQueueERC721",
      "address": "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
      "type": "Contract",
      "template": "tokens/Lido/WithdrawalQueueERC721",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0x700596a656c09529255fe261db91a5a98b3795dc7aac6bd680e1b9d5ad5f2f5f"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": [
        "getLastFinalizedRequestId",
        "getLastRequestId",
        "getLockedEtherAmount",
        "unfinalizedRequestNumber",
        "unfinalizedStETH"
      ],
      "sinceTimestamp": 1683023927,
      "sinceBlock": 17172547,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0xE42C659Dc09109566720EA8b2De186c2Be7D94D9",
        "$pastUpgrades": [
          [
            "2023-05-02T10:38:47.000Z",
            "0x98c2170be034f750f5006cb69ea0aeeaf0858b11f6324ee53d582fa4dd49bc1a",
            ["eth:0x6F6541C2203196fEeDd14CD2C09550dA1CbEDa31"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["eth:0xE42C659Dc09109566720EA8b2De186c2Be7D94D9"]
          ]
        ],
        "$upgradeCount": 2,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "PAUSE_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24",
              "eth:0x8A854C4E750CDf24f138f34A9061b2f556066912"
            ]
          },
          "FINALIZE_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84"]
          },
          "ORACLE_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x852deD011285fe67063a08005c71a85690503Cee"]
          },
          "RESUME_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24"]
          },
          "MANAGE_TOKEN_URI_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          }
        },
        "BUNKER_MODE_DISABLED_TIMESTAMP": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "bunkerModeSinceTimestamp": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "FINALIZE_ROLE": "0x485191a2ef18512555bd4426d18a716ce8e98c80ec2de16394dcf86d7d91bc80",
        "getBaseURI": "https://wq-api.lido.fi/v1/nft",
        "getContractVersion": 1,
        "getLastFinalizedRequestId": 102727,
        "getLastRequestId": 102855,
        "getLockedEtherAmount": "36078358783945488040922",
        "getNFTDescriptorAddress": "eth:0x0000000000000000000000000000000000000000",
        "getResumeSinceTimestamp": 1684163759,
        "isBunkerModeActive": false,
        "isPaused": false,
        "MANAGE_TOKEN_URI_ROLE": "0xbe882725f03f148e7c5a5e63ec45f182f7dcdb6bb8b92311ade5a6d138e0ee0f",
        "MAX_BATCHES_LENGTH": 36,
        "MAX_STETH_WITHDRAWAL_AMOUNT": "1000000000000000000000",
        "MIN_STETH_WITHDRAWAL_AMOUNT": 100,
        "name": "Lido: stETH Withdrawal NFT",
        "ORACLE_ROLE": "0x68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef1",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0xE42C659Dc09109566720EA8b2De186c2Be7D94D9",
        "proxy__getIsOssified": false,
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "STETH": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "symbol": "unstETH",
        "unfinalizedRequestNumber": 128,
        "unfinalizedStETH": "19683251567069261327910",
        "WSTETH": "eth:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0"
      },
      "implementationNames": {
        "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1": "OssifiableProxy",
        "eth:0xE42C659Dc09109566720EA8b2De186c2Be7D94D9": "WithdrawalQueueERC721"
      }
    },
    {
      "name": "GateSeal",
      "address": "eth:0x8A854C4E750CDf24f138f34A9061b2f556066912",
      "type": "Contract",
      "sourceHashes": [
        "0xb3ab659870cff0a086082fa6fc937c759a5709a5c748dcb4bea88945715f56b6"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1757671295,
      "sinceBlock": 23346252,
      "values": {
        "$immutable": true,
        "get_expiry_timestamp": 1789207187,
        "get_seal_duration_seconds": 1209600,
        "get_sealables": ["eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1"],
        "get_sealing_committee": "eth:0x8772E3a2D86B9347A2688f9bc1808A6d8917760C",
        "is_expired": false
      },
      "implementationNames": {
        "eth:0x8A854C4E750CDf24f138f34A9061b2f556066912": "GateSeal"
      }
    },
    {
      "name": "Safe",
      "address": "eth:0x8B7854488Fde088d686Ea672B6ba1A5242515f45",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747659839,
      "sinceBlock": 22517184,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x9bdFf3B294400A6a5D56647872d4035C944C10ce",
          "eth:0xA032E9E70c6200b7e51fCdeF15B611fC38833Cc1",
          "eth:0x8f929Defb7638B5ee6390bdd3bf87B266Df5EDf4",
          "eth:0x237Cddf3aA765260cf6b60E064065Da7c3Aa1559",
          "eth:0xcfc7834eb929e7E621F0Ba71d421A27Eddf6DDA1",
          "eth:0x62c89F5768D0FeC0915fb614C5eDd9fdeaA2A3fd",
          "eth:0xAe0E06b1B5ecB80f157A7DB8A7c9E83fC1720711"
        ],
        "$threshold": 4,
        "domainSeparator": "0x849b73bbf1c7a8c8e2ecaf33d5127fe4a58a2fed9389d90868b20baacfaae86e",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 7 (57%)",
        "nonce": 1,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0x8B7854488Fde088d686Ea672B6ba1A5242515f45": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "name": "Safe",
      "address": "eth:0x8ed4dfd3A610CCF1FB45e797bf5D8e0f93084F22",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1738249127,
      "sinceBlock": 21738101,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x7d32EDD94Ce35dE727d7Df60D582da2cBa55FB25",
          "eth:0xE21a08C60b065cE42FD5b0BD99a98A0FAe6ddA23",
          "eth:0xF37FeF00Fe67956E9870114815c42F0Cc18373ce"
        ],
        "$threshold": 2,
        "domainSeparator": "0x5a27a5235c90bb7540469f50dccc35bf2383002e98358faed640fd42dcc9eb02",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 3 (67%)",
        "nonce": 4,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0x8ed4dfd3A610CCF1FB45e797bf5D8e0f93084F22": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "name": "EIP712StETH",
      "address": "eth:0x8F73e4C2A6D852bb4ab2A45E6a9CF5715b3228B7",
      "type": "Contract",
      "sourceHashes": [
        "0x15185b2d9f11dcf2ea4d005741fa941922e233e89fc5742793ebfb0ca05897c4"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1683023915,
      "sinceBlock": 17172546,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x8F73e4C2A6D852bb4ab2A45E6a9CF5715b3228B7": "EIP712StETH"
      }
    },
    {
      "address": "eth:0x8f929Defb7638B5ee6390bdd3bf87B266Df5EDf4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "MiniMeTokenFactory",
      "address": "eth:0x909d05F384D0663eD4BE59863815aB43b4f347Ec",
      "type": "Contract",
      "sourceHashes": [
        "0xab441847b55bfdc5cf90792906cf0effcd43d3390a7cc05e690aad5fb349c19b"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1540644725,
      "sinceBlock": 6593191,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x909d05F384D0663eD4BE59863815aB43b4f347Ec": "MiniMeTokenFactory"
      }
    },
    {
      "address": "eth:0x912e21CdA3D7012146da4Df33309d860a9eb0bEb",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x946D3b081ed19173dC83Cd974fC69e1e760B7d78",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x9837b0Db0b733DED04D96a0A25Ba1E414A6C4c08",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ACL",
      "address": "eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb",
      "type": "Contract",
      "template": "tokens/Lido/ACL",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0x766bf5f8bd85cd18a36ec23449bcbb22c66fbc01f44a2e38ff2a06dd5919eb4b"
      ],
      "proxyType": "EIP897 proxy",
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x9f3b9198911054B122fDb865f8A5Ac516201c339",
        "ANY_ENTITY": "eth:0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF",
        "appId": "0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a",
        "BURN_ENTITY": "eth:0x0000000000000000000000000000000000000001",
        "CREATE_PERMISSIONS_ROLE": "0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a",
        "EMPTY_PARAM_HASH": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "eth:0x9f3b9198911054B122fDb865f8A5Ac516201c339",
        "isDepositable": false,
        "isPetrified": false,
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "NO_PERMISSION": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "permissions": [
          {
            "app": "eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb",
            "permissions": [
              {
                "entity": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
                "role": "CREATE_PERMISSIONS_ROLE"
              }
            ]
          },
          {
            "app": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
            "permissions": []
          },
          {
            "app": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
            "permissions": []
          },
          {
            "app": "eth:0xf73a1260d222f447210581DDf212D915c09a3249",
            "permissions": [
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "ASSIGN_ROLE"
              },
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "MINT_ROLE"
              },
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "REVOKE_VESTINGS_ROLE"
              }
            ]
          },
          {
            "app": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
            "permissions": []
          },
          {
            "app": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
            "permissions": [
              {
                "entity": "eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86",
                "role": "TRANSFER_ROLE"
              },
              {
                "entity": "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
                "role": "RUN_SCRIPT_ROLE"
              },
              {
                "entity": "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
                "role": "EXECUTE_ROLE"
              }
            ]
          },
          {
            "app": "eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86",
            "permissions": [
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "EXECUTE_PAYMENTS_ROLE"
              },
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "MANAGE_PAYMENTS_ROLE"
              },
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "CREATE_PAYMENTS_ROLE"
              },
              {
                "entity": "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977",
                "role": "CREATE_PAYMENTS_ROLE"
              },
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "CHANGE_PERIOD_ROLE"
              },
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "CHANGE_BUDGET_ROLE"
              }
            ]
          },
          {
            "app": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
            "permissions": [
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "MODIFY_QUORUM_ROLE"
              },
              {
                "entity": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
                "role": "MODIFY_SUPPORT_ROLE"
              },
              {
                "entity": "eth:0xf73a1260d222f447210581DDf212D915c09a3249",
                "role": "CREATE_VOTES_ROLE"
              }
            ]
          },
          {
            "app": "eth:0x442af784A788A5bd6F42A01Ebe9F287a871243fb",
            "permissions": []
          },
          {
            "app": "eth:0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5",
            "permissions": [
              {
                "entity": "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977",
                "role": "SET_NODE_OPERATOR_LIMIT_ROLE"
              },
              {
                "entity": "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
                "role": "STAKING_ROUTER_ROLE"
              },
              {
                "entity": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
                "role": "MANAGE_NODE_OPERATOR_ROLE"
              }
            ]
          },
          {
            "app": "eth:0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
            "permissions": [
              {
                "entity": "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
                "role": "STAKING_ROUTER_ROLE"
              },
              {
                "entity": "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977",
                "role": "MANAGE_NODE_OPERATOR_ROLE"
              },
              {
                "entity": "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977",
                "role": "SET_NODE_OPERATOR_LIMIT_ROLE"
              },
              {
                "entity": "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977",
                "role": "STAKING_ROUTER_ROLE"
              },
              {
                "entity": "eth:0x83D3DCEE0289cE96aF4051Ab50f01E5E8cE7677C",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x94890C2E0E98F149985f0444f01B36D1D37Cb182",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x8C1699304F4eac58077B1648e5b80bD0B41ec9F1",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x63e8a52995EDdcE799De72163Cdf688f1B16f347",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xd058AfF17a61e51404d205a84c6B5F73F0788E4b",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x64397E9dB5d9f0Ba15c58dd377FC258b4505e7d9",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x0606c73F51CAe370F11085E19506d59a8c86f889",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xa9c48f5B6227Ee15842DD24e0E3128fCA28aa65C",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x35E3c61c3d7F1786C1C12dbDE2AC7B7E204f5034",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x92F0339F592C58d3881789E3e2Aef6861Cf022b2",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x2A0d2Ed8a47d818BD430a355C4090CaB9EEDF8B1",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xBe511Fa89011fC8C90259C5D1fAFF9F8fd92c3EF",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x3b3BCa3D0296F3e3a2A10197bdB8515DDF59F2eb",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xc4c04aDd0Fe21ECc4F186893Bfc714Da0cFD5Ac3",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x9ea5C73eEF6FE5b1dF238930C5A3B8dd82Ff1422",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x1DdB4e46810806b5fbf67AC69b84CA48B8CBEd1F",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x1C4EDa5E2be9055126B9833dB4eA99A30822f751",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x75f9aF7483EF01635A6b80eC1B1F51c2024e22c8",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x1d9903f7B14f6E12a278Bb2e83F51bd9429ab482",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xe468a9e3d1fc6983D6Aea9266D99a5daeEbaC58A",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xF97365034279D638d0094EdC638075096bcBF373",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x2cB72bC8176e6056F5090BDF5f6497AcAb327a5F",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x0BACB8024F58add1b22641a791d47Aa9eB752ACF",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x5ED21077adEF79628516B7628839c0CD2B44ca5F",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x80Dee92dD859DeAc0DC580EeA86B40917354bCBC",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xdBFd08B7B1e6dBb057FcE140b74a06351c4A157d",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x1E938E83e8B3daA03a4bD0298cEc8EcFB534975f",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xfb668D6C258e37267C124130C77D824471F84DBC",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x6519DA1Bb0a4Be96FEc435A482a221CC7E4952a1",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x8167FA100d768EEaEC642279603a40054F26ce29",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x871872c461bCEFfABc527D73d279C33C05A4E73F",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xAf72da734303C8187ecF3701D74255c481A48593",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x2e990b8dbC3ABC4539B848feC9b5151041650E84",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x6fEd41080283A4ea4B238f3b2b8aA5Db28Af8D49",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xDE388E04f893AFd12BDa0f80b0C750e6d9f7A47D",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x257A6f40e7E93461D249096fa9cfCd117d505707",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xB2530002565f2b9E598657b18B752c03217662ca",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x8b37B36adeB7E3e69a17B93F6aF3Da1823655Ba0",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xc9adc7184C2817b084fbd768f0073C6e4eB8dB63",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x88fD4D0F2342b079a3ef2b709b567e4cFE4C143d",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x29Fc7A8768949A2A9130Fa7500512De14112d337",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xbe8d0149f8ab1BDf394379ae0adD6A9103633FbE",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x4c3d31aB3c7e31FBaab548b6F3aDF46fEcf59895",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x8B87D5d4CCaBc26a99d44BeC19C5f25f0A0d6019",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x8682982Ad244efc789dc60EEB6a4823FD883319A",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x36c930FeCEB25DC4418438d171C4a4dbf6712896",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x7BF6945430017AeFea7dd0cd450382aae01220F5",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x5FaE2734CD11029D8BCcbcdC3752bF0299C0934c",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x4c46FeCc566a196cD3196D19899D9a9d73dF5b56",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xc8D12601f8680EF2408dD4FD17C008817dBC36e0",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x306b5C7475b97BF6Df43dFeD00a268e5DdcAe75e",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xCA787cdb322dF3aD5B9e230BABa8346f1Bf8fE8b",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x37eD9424465F9ff2f6A012E688DE8735cb9e2aFb",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xfc23dd69B6968c8623db910984886C94cc2236AA",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x6706A45D13685950308EFF93B45D1A4Ebb054f84",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x2ec75Fd873860151EEeeC4da50E9594bD168eF98",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x6E809aaDF0e4686322D53c611e9facf9cFB0F636",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x7F34d125Aec27Cb22f923b2354C4114341047dc0",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x49cBEe5e1b9857b82e01AF0755Ee563F3B190769",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x5987A1fDF5d7C24Ba7074EF9DC5fB36A1F0acd44",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x12E804Caf53dBB9ee1Db85AD8483deaAd5dd457D",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x512489b537c38e04f231e797BA9F76d5108Bfd48",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x560630a67307593D0c55E2a0284EB14E0A00D77d",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x70003FD8d8c405F767a49336c349777A66497d01",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x88676DeAc738Ad9397c305FFc5AbAD2e9952FD93",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xa9feDcAec979d6e6B20d026B3790115970B66412",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x585C0b0B9e0F3f649C6c7E4dcF4d44BA348c018a",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xB962865ACc35256dB89edf5C25Da1988326F939D",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xc407e117738f1f7002105262E4e625CB8Ba6e1da",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xB39b6AB2d93328a96EfEea19175D95D833ba378d",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x3aEAd7ef230851487173F944a4Fa1A7B4ec6da7f",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xc1659aAad93c1dCc4Cc62D5D0c9f0E0Da6229536",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xf2415cDb4A4A45AF77D7dD77154a245f37cDC449",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xAF1beC9B5A0A35199529E8B8e7bC5B74C9bFd252",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x1D3F689dea4105029Ebb8E8F6cad3A6efbf43fD0",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xEC730Ca6e0555626bfc641c8465D2B5335f41c89",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x45345ea372E3DA5753684B546682ba035a3f7ceC",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x553BCf02058310ef1ac91a1588ea114C436EAFAa",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x57ceA99437a5e01EabB137134F1CED8BdbA974F8",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xd30EBE002f4e8D27b4121a9229fDbc9d069AAd86",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0x7C4E5fCd974702c7a4F23F9782dBD80A63638216",
                "role": "MANAGE_SIGNING_KEYS"
              },
              {
                "entity": "eth:0xDD10e17AfA24BD6ED9CF8650c631C5dF8E7FA290",
                "role": "MANAGE_SIGNING_KEYS"
              }
            ]
          }
        ],
        "proxyType": 2
      },
      "implementationNames": {
        "eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb": "AppProxyUpgradeable",
        "eth:0x9f3b9198911054B122fDb865f8A5Ac516201c339": "ACL"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d": "PAUSE_ROLE",
            "0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a": "CREATE_PERMISSIONS_ROLE",
            "0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0": "APP_MANAGER_ROLE",
            "0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2": "REGISTRY_ADD_EXECUTOR_ROLE",
            "0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3": "REGISTRY_MANAGER_ROLE",
            "0xf5a08927c847d7a29dc35e105208dbde5ce951392105d712761cc5d17440e2ff": "ASSIGN_ROLE",
            "0xe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22": "BURN_ROLE",
            "0x2406f1e99f79cea012fb88c5c36566feaeefee0f4b98d3a376b49310222b53c4": "ISSUE_ROLE",
            "0x154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686": "MINT_ROLE",
            "0x95ffc68daedf1eb334cfcd22ee24a5eeb5a8e58aa40679f2ad247a84140f8d6e": "REVOKE_VESTINGS_ROLE",
            "0x71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a": "REMOVE_PROTECTED_TOKEN_ROLE",
            "0xb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f": "RUN_SCRIPT_ROLE",
            "0x0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b7933694": "SAFE_EXECUTE_ROLE",
            "0x8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c": "TRANSFER_ROLE",
            "0xcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4": "EXECUTE_ROLE",
            "0xd79730e82bfef7d2f9639b9d10bf37ebb662b22ae2211502a00bdf7b2cc3a23a": "CHANGE_BUDGET_ROLE",
            "0xd35e458bacdd5343c2f050f574554b2f417a8ea38d6a9a65ce2225dbe8bb9a9d": "CHANGE_PERIOD_ROLE",
            "0x5de467a460382d13defdc02aacddc9c7d6605d6d4e0b8bd2f70732cae8ea17bc": "CREATE_PAYMENTS_ROLE",
            "0x563165d3eae48bcb0a092543ca070d989169c98357e9a1b324ec5da44bab75fd": "EXECUTE_PAYMENTS_ROLE",
            "0x30597dd103acfaef0649675953d9cb22faadab7e9d9ed57acc1c429d04b80777": "MANAGE_PAYMENTS_ROLE",
            "0xad15e7261800b4bb73f1b69d3864565ffb1fd00cb93cf14fe48da8f1f2149f39": "MODIFY_QUORUM_ROLE",
            "0xe7dcd7275292e064d090fbc5f3bd7995be23b502c1fed5cd94cfddbbdcd32bbc": "CREATE_VOTES_ROLE",
            "0xda3972983e62bdf826c4b807c4c9c2b8a941e1f83dfa76d53d6aeac11e1be650": "MODIFY_SUPPORT_ROLE",
            "0x068ca51c9d69625c7add396c98ca4f3b27d894c3b973051ad3ee53017d7094ea": "UNSAFELY_MODIFY_VOTE_TIME_ROLE",
            "0x78523850fdd761612f46e844cf5a16bda6b3151d6ae961fd7e8e7b92bfbca7f8": "MANAGE_NODE_OPERATOR_ROLE",
            "0x75abc64490e17b40ea1e66691c3eb493647b24430b358bd87ec3e5127f1621ee": "MANAGE_SIGNING_KEYS",
            "0x07b39e0faf2521001ae4e58cb9ffd3840a63e205d288dc9c93c3774f0d794754": "SET_NODE_OPERATOR_LIMIT_ROLE",
            "0xbb75b874360e0bfd87f964eadd8276d8efb7c942134fc329b513032d0803e0c6": "STAKING_ROUTER_ROLE",
            "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7": "RESUME_ROLE",
            "0x84ea57490227bc2be925c684e2a367071d69890b629590198f4125a018eb1de8": "STAKING_PAUSE_ROLE",
            "0xa42eee1333c0758ba72be38e728b6dadb32ea767de5b4ddbaea1dae85b1b051f": "STAKING_CONTROL_ROLE",
            "0xe6dc5d79630c61871e99d341ad72c5a052bed2fc8c79e5a4480a7cd31117576c": "UNSAFE_CHANGE_DEPOSITED_VALIDATORS_ROLE"
          }
        }
      ]
    },
    {
      "address": "eth:0x9A3f38AF97b791C85c043D46a64f56f87E0283D4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x9A921867EbB579D137184b397E7D087f1ae716fd",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x9bdFf3B294400A6a5D56647872d4035C944C10ce",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "CSParametersRegistry",
      "address": "eth:0x9D28ad303C90DF524BA960d7a2DAC56DcC31e428",
      "type": "Contract",
      "template": "tokens/Lido/CSParametersRegistry",
      "sourceHashes": [
        "0x0e9e628d137fa4b53b03ce51b1b0e0122d524ca323f45751894d2e62c91c2651",
        "0xc1deebfbd111e2f8e2157336320630099bc5658e2dac19d1ff99e0c76d95e5fd"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1758112319,
      "sinceBlock": 23382821,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x25fdC3BE9977CD4da679dF72A64C8B6Bd5216A78",
        "$pastUpgrades": [
          [
            "2025-09-17T12:31:59.000Z",
            "0xd40178939134c7e6eb244f0bb678e63459aa2c952a948ecd7789ffdbf37d7c43",
            ["eth:0x25fdC3BE9977CD4da679dF72A64C8B6Bd5216A78"]
          ]
        ],
        "$upgradeCount": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "defaultAllowedExitDelay": 345600,
        "defaultBadPerformancePenalty": "258000000000000000",
        "defaultElRewardsStealingAdditionalFine": "100000000000000000",
        "defaultExitDelayPenalty": "100000000000000000",
        "defaultKeyRemovalCharge": "20000000000000000",
        "defaultKeysLimit": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "defaultMaxWithdrawalRequestFee": "100000000000000000",
        "defaultPerformanceCoefficients": {
          "attestationsWeight": 54,
          "blocksWeight": 8,
          "syncWeight": 2
        },
        "defaultPerformanceLeeway": 300,
        "defaultQueueConfig": { "priority": 5, "maxDeposits": 4294967295 },
        "defaultRewardShare": 5834,
        "defaultStrikesParams": { "lifetime": 6, "threshold": 3 },
        "getInitializedVersion": 1,
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0x25fdC3BE9977CD4da679dF72A64C8B6Bd5216A78",
        "proxy__getIsOssified": false,
        "QUEUE_LEGACY_PRIORITY": 4,
        "QUEUE_LOWEST_PRIORITY": 5
      },
      "implementationNames": {
        "eth:0x9D28ad303C90DF524BA960d7a2DAC56DcC31e428": "OssifiableProxy",
        "eth:0x25fdC3BE9977CD4da679dF72A64C8B6Bd5216A78": "CSParametersRegistry"
      }
    },
    {
      "address": "eth:0xA032E9E70c6200b7e51fCdeF15B611fC38833Cc1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ImmutableDualGovernanceConfigProvider",
      "address": "eth:0xa1692Af6FDfdD1030E4E9c4Bc429986FA64CB5EF",
      "type": "Contract",
      "sourceHashes": [
        "0x65742f7d33e77fcb4e7f876106c1ee002eead9ee23dc3819bebda39eb714b37d"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1747910975,
      "sinceBlock": 22537923,
      "values": {
        "$immutable": true,
        "FIRST_SEAL_RAGE_QUIT_SUPPORT": "10000000000000000",
        "getDualGovernanceConfig": {
          "firstSealRageQuitSupport": "10000000000000000",
          "secondSealRageQuitSupport": "100000000000000000",
          "minAssetsLockDuration": 18000,
          "vetoSignallingMinDuration": 432000,
          "vetoSignallingMaxDuration": 3888000,
          "vetoSignallingMinActiveDuration": 18000,
          "vetoSignallingDeactivationMaxDuration": 259200,
          "vetoCooldownDuration": 18000,
          "rageQuitExtensionPeriodDuration": 604800,
          "rageQuitEthWithdrawalsMinDelay": 5184000,
          "rageQuitEthWithdrawalsMaxDelay": 15552000,
          "rageQuitEthWithdrawalsDelayGrowth": 1296000
        },
        "MIN_ASSETS_LOCK_DURATION": 18000,
        "RAGE_QUIT_ETH_WITHDRAWALS_DELAY_GROWTH": 1296000,
        "RAGE_QUIT_ETH_WITHDRAWALS_MAX_DELAY": 15552000,
        "RAGE_QUIT_ETH_WITHDRAWALS_MIN_DELAY": 5184000,
        "RAGE_QUIT_EXTENSION_PERIOD_DURATION": 604800,
        "SECOND_SEAL_RAGE_QUIT_SUPPORT": "100000000000000000",
        "VETO_COOLDOWN_DURATION": 18000,
        "VETO_SIGNALLING_DEACTIVATION_MAX_DURATION": 259200,
        "VETO_SIGNALLING_MAX_DURATION": 3888000,
        "VETO_SIGNALLING_MIN_ACTIVE_DURATION": 18000,
        "VETO_SIGNALLING_MIN_DURATION": 432000
      },
      "implementationNames": {
        "eth:0xa1692Af6FDfdD1030E4E9c4Bc429986FA64CB5EF": "ImmutableDualGovernanceConfigProvider"
      }
    },
    {
      "address": "eth:0xA39a62304d8d43B35114ad7bd1258B0E50e139b3",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xa56b128Ea2Ea237052b0fA2a96a387C0E43157d8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GateSeal",
      "address": "eth:0xA6BC802fAa064414AA62117B4a53D27fFfF741F1",
      "type": "Contract",
      "sourceHashes": [
        "0xb3ab659870cff0a086082fa6fc937c759a5709a5c748dcb4bea88945715f56b6"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1757671307,
      "sinceBlock": 23346253,
      "values": {
        "$immutable": true,
        "get_expiry_timestamp": 1789207187,
        "get_seal_duration_seconds": 1209600,
        "get_sealables": [
          "eth:0xDC00116a0D3E064427dA2600449cfD2566B3037B",
          "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e"
        ],
        "get_sealing_committee": "eth:0x8772E3a2D86B9347A2688f9bc1808A6d8917760C",
        "is_expired": false
      },
      "implementationNames": {
        "eth:0xA6BC802fAa064414AA62117B4a53D27fFfF741F1": "GateSeal"
      }
    },
    {
      "name": "CSStrikes",
      "address": "eth:0xaa328816027F2D32B9F56d190BC9Fa4A5C07637f",
      "type": "Contract",
      "sourceHashes": [
        "0x0e9e628d137fa4b53b03ce51b1b0e0122d524ca323f45751894d2e62c91c2651",
        "0x85df3ccf87b902aa07f9bfedaabda68d3ac37ad2524de995d9caa2cd8aa41086"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1758112631,
      "sinceBlock": 23382847,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x3E5021424c9e13FC853e523Cd68ebBec848956a0",
        "$pastUpgrades": [
          [
            "2025-09-17T12:37:11.000Z",
            "0xce2dc07d9ed8201b98d438819ba4c3ef2b1d236e017c949d6af9dbc8a509d9d0",
            ["eth:0x3E5021424c9e13FC853e523Cd68ebBec848956a0"]
          ]
        ],
        "$upgradeCount": 1,
        "ACCOUNTING": "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "ejector": "eth:0xc72b58aa02E0e98cF8A4a0E9Dce75e763800802C",
        "EXIT_PENALTIES": "eth:0x06cd61045f958A209a0f8D746e103eCc625f4193",
        "getInitializedVersion": 1,
        "MODULE": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
        "ORACLE": "eth:0x4D4074628678Bd302921c20573EEa1ed38DdF7FB",
        "PARAMETERS_REGISTRY": "eth:0x9D28ad303C90DF524BA960d7a2DAC56DcC31e428",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0x3E5021424c9e13FC853e523Cd68ebBec848956a0",
        "proxy__getIsOssified": false,
        "treeCid": "QmVstCopuHw3snTahsiByEKUPhQNggqfKkEWLYVjwZgcf5",
        "treeRoot": "0x7e5e0b38711865ea64d75d5d3efdefe4ff383161f34d4c9785a7b95eccf3eaa9"
      },
      "implementationNames": {
        "eth:0xaa328816027F2D32B9F56d190BC9Fa4A5C07637f": "OssifiableProxy",
        "eth:0x3E5021424c9e13FC853e523Cd68ebBec848956a0": "CSStrikes"
      }
    },
    {
      "address": "eth:0xAe0E06b1B5ecB80f157A7DB8A7c9E83fC1720711",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Liquid staked Ether 2.0 Token",
      "address": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
      "type": "Contract",
      "template": "tokens/Lido/stETH",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0xdc88f413a8e8c93a3ee2d7f0ca94090b4b1feb8393663061d7bccedc81812975"
      ],
      "proxyType": "EIP897 proxy",
      "ignoreInWatchMode": [
        "getFeeDistribution",
        "totalSupply",
        "getBeaconStat",
        "getBufferedEther",
        "getDepositableEther",
        "getStakeLimitFullInfo",
        "getTotalPooledEther",
        "getTotalShares",
        "getCurrentStakeLimit"
      ],
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb",
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          }
        },
        "appId": "0x3ca7c3e38968823ccb4c78ea688df41356f182ae1d159e4ee608d30d68cef320",
        "bufferedEtherPosition": "6363363210198477230527",
        "canDeposit": true,
        "clBalancePosition": "8454503988472598000000000",
        "clValidatorsPosition": 403105,
        "decimals": 18,
        "depositedValidatorsPosition": 407279,
        "DOMAIN_SEPARATOR": "0x260e7e1a220ea89b9454cbcdc1fcc44087325df199a3986e560d75db18b2e253",
        "eip712Domain": {
          "name": "Liquid staked Ether 2.0",
          "version": "2",
          "chainId": 1,
          "verifyingContract": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84"
        },
        "getBeaconStat": {
          "depositedValidators": 407279,
          "beaconValidators": 403105,
          "beaconBalance": "8454503988472598000000000"
        },
        "getBufferedEther": "6363363210198477230527",
        "getContractVersion": 2,
        "getCurrentStakeLimit": "150000000000000000000000",
        "getDepositableEther": 0,
        "getEIP712StETH": "eth:0x8F73e4C2A6D852bb4ab2A45E6a9CF5715b3228B7",
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getFee": 999,
        "getFeeDistribution": {
          "treasuryFeeBasisPoints": 5155,
          "insuranceFeeBasisPoints": 0,
          "operatorsFeeBasisPoints": 4844
        },
        "getInitializationBlock": 11473216,
        "getLidoLocator": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "getOracle": "eth:0x442af784A788A5bd6F42A01Ebe9F287a871243fb",
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "getStakeLimitFullInfo": {
          "isStakingPaused": false,
          "isStakingLimitSet": true,
          "currentStakeLimit": "150000000000000000000000",
          "maxStakeLimit": "150000000000000000000000",
          "maxStakeLimitGrowthBlocks": 6400,
          "prevStakeLimit": "149999999946436000000000",
          "prevStakeBlockNumber": 23675137
        },
        "getTotalPooledEther": "8594435351682796477230527",
        "getTotalShares": "7058454413349586506471329",
        "getTreasury": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "getWithdrawalCredentials": "0x010000000000000000000000b9d7934878b5fb9610b3fe8a5e441e8fad7e293f",
        "hasInitialized": true,
        "implementation": "eth:0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb",
        "isDepositable": false,
        "isPetrified": false,
        "isStakingPaused": false,
        "isStopped": false,
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "lidoLocator": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "name": "Liquid staked Ether 2.0",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxyType": 2,
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "STAKING_CONTROL_ROLE": "0xa42eee1333c0758ba72be38e728b6dadb32ea767de5b4ddbaea1dae85b1b051f",
        "STAKING_PAUSE_ROLE": "0x84ea57490227bc2be925c684e2a367071d69890b629590198f4125a018eb1de8",
        "storageStakeLimit": "0x00001fc3842bd1f071c000000000190000001fc3842ba1391a8ea80001694101",
        "symbol": "stETH",
        "totalElRewardsCollectedPosition": "224913769530845971333940",
        "totalSupply": "8594435351682796477230527",
        "UNSAFE_CHANGE_DEPOSITED_VALIDATORS_ROLE": "0xe6dc5d79630c61871e99d341ad72c5a052bed2fc8c79e5a4480a7cd31117576c"
      },
      "implementationNames": {
        "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84": "AppProxyUpgradeable",
        "eth:0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb": "Lido"
      }
    },
    {
      "name": "SimpleDVTModule",
      "address": "eth:0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
      "type": "Contract",
      "template": "tokens/Lido/NodeOperatorsRegistry",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0x7e3615bebdb8e2033c00916316355965e076187f136311105c57e4ab8eed8911"
      ],
      "proxyType": "EIP897 proxy",
      "ignoreInWatchMode": [
        "getStakingModuleSummary",
        "getActiveNodeOperatorsCount",
        "getNodeOperatorsCount"
      ],
      "sinceTimestamp": 1701921935,
      "sinceBlock": 18731922,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x6828b023e737f96B168aCd0b5c6351971a4F81aE",
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          }
        },
        "appId": "0xe1635b63b5f7b5e545f2a637558a4029dea7905361a2f0fc28c66e9136cf86a4",
        "exitPenaltyCutoffTimestamp": 1759074767,
        "getActiveNodeOperatorsCount": 82,
        "getContractVersion": 4,
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 19291056,
        "getLocator": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "getNodeOperatorsCount": 82,
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "getRewardDistributionState": 2,
        "getStakingModuleSummary": {
          "totalExitedValidators": 759,
          "totalDepositedValidators": 11279,
          "depositableValidatorsCount": 0
        },
        "getStuckPenaltyDelay": 0,
        "getType": "0x637572617465642d6f6e636861696e2d76310000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "eth:0x6828b023e737f96B168aCd0b5c6351971a4F81aE",
        "isDepositable": false,
        "isPetrified": false,
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "MANAGE_NODE_OPERATOR_ROLE": "0x78523850fdd761612f46e844cf5a16bda6b3151d6ae961fd7e8e7b92bfbca7f8",
        "MANAGE_SIGNING_KEYS": "0x75abc64490e17b40ea1e66691c3eb493647b24430b358bd87ec3e5127f1621ee",
        "MAX_NODE_OPERATOR_NAME_LENGTH": 255,
        "MAX_NODE_OPERATORS_COUNT": 200,
        "MAX_STUCK_PENALTY_DELAY": 31536000,
        "proxyType": 2,
        "SET_NODE_OPERATOR_LIMIT_ROLE": "0x07b39e0faf2521001ae4e58cb9ffd3840a63e205d288dc9c93c3774f0d794754",
        "STAKING_ROUTER_ROLE": "0xbb75b874360e0bfd87f964eadd8276d8efb7c942134fc329b513032d0803e0c6"
      },
      "implementationNames": {
        "eth:0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433": "AppProxyUpgradeable",
        "eth:0x6828b023e737f96B168aCd0b5c6351971a4F81aE": "NodeOperatorsRegistry"
      }
    },
    {
      "address": "eth:0xb04b6fB471E766D7F21A6AA0E4E25B2AEA0a75AB",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "VettedGate",
      "address": "eth:0xB314D4A76C457c93150d308787939063F4Cc67E0",
      "type": "Contract",
      "sourceHashes": [
        "0x0e9e628d137fa4b53b03ce51b1b0e0122d524ca323f45751894d2e62c91c2651",
        "0x793d8d00ede92cded08251ce3bf045334a7a3b5c05794a69a036dd121f521e62"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1758112391,
      "sinceBlock": 23382827,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x65D4D92Cd0EabAa05cD5A46269C24b71C21cfdc4",
        "$pastUpgrades": [
          [
            "2025-09-17T12:33:11.000Z",
            "0x34c17146c21269afdad518c3d057bcfe8e9fe674743598ac04943111c88c47fb",
            ["eth:0x65D4D92Cd0EabAa05cD5A46269C24b71C21cfdc4"]
          ]
        ],
        "$upgradeCount": 1,
        "ACCOUNTING": "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da",
        "curveId": 2,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "END_REFERRAL_SEASON_ROLE": "0x4a1304957825c6a76938ccf907b92b9b872c8348083e23dae57e7e6111105d0c",
        "getInitializedVersion": 1,
        "getResumeSinceTimestamp": 0,
        "isPaused": false,
        "isReferralProgramSeasonActive": false,
        "MODULE": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0x65D4D92Cd0EabAa05cD5A46269C24b71C21cfdc4",
        "proxy__getIsOssified": false,
        "RECOVERER_ROLE": "0xb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc",
        "referralCurveId": 0,
        "referralProgramSeasonNumber": 0,
        "referralsThreshold": 0,
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "SET_TREE_ROLE": "0x932ff8b4c99f097090996a04c43547e4ab5096f3d09b9d577303a7f3c1c1de56",
        "START_REFERRAL_SEASON_ROLE": "0xc0bd4bb446c4ce6fd2289aa78c8ea233de3ad2b870bc787b2ba154e19c271f12",
        "treeCid": "bafkreiamyumbk3j36i2tjwcqntaqtbpbbzdrmy7nxihyw3dlxndy54yzay",
        "treeRoot": "0xccaf26a017279736705e4c3214966f7ba8c0421562b980421a0b4fd1282aec23"
      },
      "implementationNames": {
        "eth:0xB314D4A76C457c93150d308787939063F4Cc67E0": "OssifiableProxy",
        "eth:0x65D4D92Cd0EabAa05cD5A46269C24b71C21cfdc4": "VettedGate"
      }
    },
    {
      "name": "Kernel",
      "address": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
      "type": "Contract",
      "sourceHashes": [
        "0x3ef00bf119dbb1f46a05a35111f35da84bb45cac1abfa574989211677d16787a",
        "0x452458b35204910fe71376b423bd8d2887a1e82d22843fd79880d4ac0dce2a33"
      ],
      "proxyType": "EIP897 proxy",
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x2b33CF282f867A7FF693A66e11B0FcC5552e4425",
        "acl": "eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb",
        "APP_ADDR_NAMESPACE": "0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb",
        "APP_BASES_NAMESPACE": "0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f",
        "APP_MANAGER_ROLE": "0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0",
        "CORE_NAMESPACE": "0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8",
        "DEFAULT_ACL_APP_ID": "0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a",
        "getInitializationBlock": 11473216,
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "eth:0x2b33CF282f867A7FF693A66e11B0FcC5552e4425",
        "isDepositable": false,
        "isPetrified": false,
        "KERNEL_APP_ID": "0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c",
        "proxyType": 2,
        "recoveryVaultAppId": "0x0000000000000000000000000000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc": "KernelProxy",
        "eth:0x2b33CF282f867A7FF693A66e11B0FcC5552e4425": "Kernel"
      }
    },
    {
      "name": "WithdrawalVault",
      "address": "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f",
      "type": "Contract",
      "sourceHashes": [
        "0x5cbdf8b8bb204120168ae7790c42ca01a3c365626be04e051f3be6c99a63d794",
        "0x02a7455341d351b5cf754695894d7496179272403e2b811db5202057c6373cad"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1626093401,
      "sinceBlock": 12812480,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x7D2BAa6094E1C4B60Da4cbAF4A77C3f4694fD53D",
        "$pastUpgrades": [
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["eth:0xCC52f17756C04bBa7E377716d7062fC36D7f69Fd"]
          ],
          [
            "2025-10-02T15:52:47.000Z",
            "0xfff774d519ec1afd4358d4858672578437e815dc1652245a2ffb7bde1bfff2ad",
            ["eth:0x7D2BAa6094E1C4B60Da4cbAF4A77C3f4694fD53D"]
          ]
        ],
        "$upgradeCount": 2,
        "getContractVersion": 2,
        "getWithdrawalRequestFee": 1,
        "implementation": "eth:0x7D2BAa6094E1C4B60Da4cbAF4A77C3f4694fD53D",
        "LIDO": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "proxy_getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy_getIsOssified": false,
        "TREASURY": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "TRIGGERABLE_WITHDRAWALS_GATEWAY": "eth:0xDC00116a0D3E064427dA2600449cfD2566B3037B",
        "WITHDRAWAL_REQUEST": "eth:0x00000961Ef480Eb55e80D19ad83579A64c007002"
      },
      "implementationNames": {
        "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f": "WithdrawalsManagerProxy",
        "eth:0x7D2BAa6094E1C4B60Da4cbAF4A77C3f4694fD53D": "WithdrawalVault"
      }
    },
    {
      "name": "Finance",
      "address": "eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86",
      "type": "Contract",
      "template": "lido-v2/Finance",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0x79c0482c98e90ac27211d4389c4cbff1ab6353a3813cd331290e7a92134e2994"
      ],
      "proxyType": "EIP897 proxy",
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x836835289A2E81B66AE5d95b7c8dBC0480dCf9da",
        "appId": "0x5c9918c99c4081ca9459c178381be71d9da40e49e151687da55099c49a4237f1",
        "CHANGE_BUDGETS_ROLE": "0xd79730e82bfef7d2f9639b9d10bf37ebb662b22ae2211502a00bdf7b2cc3a23a",
        "CHANGE_PERIOD_ROLE": "0xd35e458bacdd5343c2f050f574554b2f417a8ea38d6a9a65ce2225dbe8bb9a9d",
        "CREATE_PAYMENTS_ROLE": "0x5de467a460382d13defdc02aacddc9c7d6605d6d4e0b8bd2f70732cae8ea17bc",
        "currentPeriodId": 59,
        "EXECUTE_PAYMENTS_ROLE": "0x563165d3eae48bcb0a092543ca070d989169c98357e9a1b324ec5da44bab75fd",
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getPayment": [],
        "getPeriodDuration": 2592000,
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "eth:0x836835289A2E81B66AE5d95b7c8dBC0480dCf9da",
        "isDepositable": false,
        "isPetrified": false,
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "MANAGE_PAYMENTS_ROLE": "0x30597dd103acfaef0649675953d9cb22faadab7e9d9ed57acc1c429d04b80777",
        "nextPaymentTime": [],
        "paymentsNextIndex": 1,
        "periodsLength": 60,
        "proxyType": 2,
        "transactionsNextIndex": 649,
        "vault": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"
      },
      "implementationNames": {
        "eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86": "AppProxyUpgradeable",
        "eth:0x836835289A2E81B66AE5d95b7c8dBC0480dCf9da": "Finance"
      }
    },
    {
      "address": "eth:0xBc1cFd2BeC23a0cDc555AE8D31EEa06BE3B5186A",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ValidatorExitDelayVerifier",
      "address": "eth:0xbDb567672c867DB533119C2dcD4FB9d8b44EC82f",
      "type": "Contract",
      "sourceHashes": [
        "0x04d8a8a48b4238c64fe27aef387c89bd9d925104d58ae9f3a471fe4684f9dd2e"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1757671259,
      "sinceBlock": 23346249,
      "values": {
        "$immutable": true,
        "BEACON_ROOTS": "eth:0x000F3df6D732807Ef1319fB7B8bB8522d0Beac02",
        "CAPELLA_SLOT": 6209536,
        "FIRST_SUPPORTED_SLOT": 11649024,
        "GENESIS_TIME": 1606824023,
        "GI_FIRST_BLOCK_ROOT_IN_SUMMARY_CURR": "0x000000000000000000000000000000000000000000000000000000000040000d",
        "GI_FIRST_BLOCK_ROOT_IN_SUMMARY_PREV": "0x000000000000000000000000000000000000000000000000000000000040000d",
        "GI_FIRST_HISTORICAL_SUMMARY_CURR": "0x000000000000000000000000000000000000000000000000000000b600000018",
        "GI_FIRST_HISTORICAL_SUMMARY_PREV": "0x000000000000000000000000000000000000000000000000000000b600000018",
        "GI_FIRST_VALIDATOR_CURR": "0x0000000000000000000000000000000000000000000000000096000000000028",
        "GI_FIRST_VALIDATOR_PREV": "0x0000000000000000000000000000000000000000000000000096000000000028",
        "LOCATOR": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "PIVOT_SLOT": 11649024,
        "SECONDS_PER_SLOT": 12,
        "SHARD_COMMITTEE_PERIOD_IN_SECONDS": 98304,
        "SLOTS_PER_EPOCH": 32,
        "SLOTS_PER_HISTORICAL_ROOT": 8192
      },
      "implementationNames": {
        "eth:0xbDb567672c867DB533119C2dcD4FB9d8b44EC82f": "ValidatorExitDelayVerifier"
      }
    },
    {
      "name": "TiebreakerSubCommittee",
      "address": "eth:0xBF048f2111497B6Df5E062811f5fC422804D4baE",
      "type": "Contract",
      "template": "lido-v2/TiebreakerSubCommittee",
      "sourceHashes": [
        "0x4adcce95826015839acfaae5b9c6e7e7d48d7130177fa3720ce9bc31332c6b72"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1754648555,
      "sinceBlock": 23095719,
      "values": {
        "$immutable": true,
        "getMembers": [
          "eth:0x80B2D9FA613c35Ec52B0dA5D84e6A819bcc5e369",
          "eth:0xEC7ABf73f339361ecCA951E1746C90a3e6205BFC",
          "eth:0xb04b6fB471E766D7F21A6AA0E4E25B2AEA0a75AB",
          "eth:0x60BDa95a40d5536303BFcf84D679ca461A23398d",
          "eth:0x5d60F5d653Cc318d1f0ABacd83eD4feeAa6e5804"
        ],
        "getProposalAt": [],
        "getProposalsLength": 0,
        "getQuorum": 3,
        "getTimelockDuration": 0,
        "owner": "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
        "TIEBREAKER_CORE_COMMITTEE": "eth:0xf65614d73952Be91ce0aE7Dd9cFf25Ba15bEE2f5"
      },
      "implementationNames": {
        "eth:0xBF048f2111497B6Df5E062811f5fC422804D4baE": "TiebreakerSubCommittee"
      }
    },
    {
      "name": "OracleDaemonConfig",
      "address": "eth:0xbf05A929c3D7885a6aeAd833a992dA6E5ac23b09",
      "type": "Contract",
      "sourceHashes": [
        "0x6f38bad385eb6769def612742a8a4ab65d19921bffe96d1ee9241121e2ae1aba"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1683022991,
      "sinceBlock": 17172469,
      "values": {
        "$immutable": true,
        "CONFIG_MANAGER_ROLE": "0xbbfb55d933c2bfa638763473275b1d84c4418e58d26cf9d2cd5758237756d9f0",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "eth:0xbf05A929c3D7885a6aeAd833a992dA6E5ac23b09": "OracleDaemonConfig"
      }
    },
    {
      "name": "LidoLocator",
      "address": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
      "type": "Contract",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0xd9bec8b380e332257d788916e194c7e66df309019cb2e5a19afa74e31d6a1890"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1681295123,
      "sinceBlock": 17031323,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x2C298963FB763f74765829722a1ebe0784f4F5Cf",
        "$pastUpgrades": [
          [
            "2023-04-12T10:25:23.000Z",
            "0x3a2910624533935cc8c21837b1705bcb159a760796930097016186be705cc455",
            ["eth:0xEC3B38EDc7878Ad3f18cFddcd341aa94Fc57d20B"]
          ],
          [
            "2023-04-13T09:33:35.000Z",
            "0x299b401a2312fa081a6cb5012797a0f5a23b07394a96d505ebf7f4ab6420ff63",
            ["eth:0x2faE8f0A4D8D11B6EC35d04d3Ea6a0d195EB6D3F"]
          ],
          [
            "2023-04-14T07:17:47.000Z",
            "0x20aab9de778f007c034b35a11206f7e17ec8b28f9c8beabc26a8551ecab8f9f6",
            ["eth:0xc601E93D9F48D5E374820957CdA57516e2523d6C"]
          ],
          [
            "2023-04-18T11:24:23.000Z",
            "0x6105c893856a2528347ff1b2efd0838097b8c562670116f60bb76eb54cb80ce6",
            ["eth:0xd4f6BEF8DdBc7306684b8D7c836269e0E6f8B6D0"]
          ],
          [
            "2023-05-10T15:04:35.000Z",
            "0x3b419bde1ce29392444d861c02f3846ce0ea65b0caa50dbd5136f1ff46cddf4f",
            ["eth:0x1D920cc5bACf7eE506a271a5259f2417CaDeCE1d"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["eth:0x1D920cc5bACf7eE506a271a5259f2417CaDeCE1d"]
          ],
          [
            "2024-10-11T16:21:11.000Z",
            "0xc7bc3019721ecf320698f2897b329d1930f64661100a5fa159181146088e03c2",
            ["eth:0x39aFE23cE59e8Ef196b81F0DCb165E9aD38b9463"]
          ],
          [
            "2024-10-25T16:03:23.000Z",
            "0x0078b3e0cecb3b50c78a22e0b1a985e6cde3bf431e9cb3b2ba4e50260122d542",
            ["eth:0x3ABc4764f0237923d52056CFba7E9AEBf87113D3"]
          ],
          [
            "2025-10-02T15:52:47.000Z",
            "0xfff774d519ec1afd4358d4858672578437e815dc1652245a2ffb7bde1bfff2ad",
            ["eth:0x2C298963FB763f74765829722a1ebe0784f4F5Cf"]
          ]
        ],
        "$upgradeCount": 9,
        "accountingOracle": "eth:0x852deD011285fe67063a08005c71a85690503Cee",
        "burner": "eth:0xD15a672319Cf0352560eE76d9e89eAB0889046D3",
        "coreComponents": [
          "eth:0x388C818CA8B9251b393131C08a736A67ccB19297",
          "eth:0x6232397ebac4f5772e53285B26c47914E9461E75",
          "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
          "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
          "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
          "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f"
        ],
        "depositSecurityModule": "eth:0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD",
        "elRewardsVault": "eth:0x388C818CA8B9251b393131C08a736A67ccB19297",
        "legacyOracle": "eth:0x442af784A788A5bd6F42A01Ebe9F287a871243fb",
        "lido": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "oracleDaemonConfig": "eth:0xbf05A929c3D7885a6aeAd833a992dA6E5ac23b09",
        "oracleReportComponentsForLido": [
          "eth:0x852deD011285fe67063a08005c71a85690503Cee",
          "eth:0x388C818CA8B9251b393131C08a736A67ccB19297",
          "eth:0x6232397ebac4f5772e53285B26c47914E9461E75",
          "eth:0xD15a672319Cf0352560eE76d9e89eAB0889046D3",
          "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
          "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f",
          "eth:0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823"
        ],
        "oracleReportSanityChecker": "eth:0x6232397ebac4f5772e53285B26c47914E9461E75",
        "postTokenRebaseReceiver": "eth:0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0x2C298963FB763f74765829722a1ebe0784f4F5Cf",
        "proxy__getIsOssified": false,
        "stakingRouter": "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
        "treasury": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "triggerableWithdrawalsGateway": "eth:0xDC00116a0D3E064427dA2600449cfD2566B3037B",
        "validatorExitDelayVerifier": "eth:0xbDb567672c867DB533119C2dcD4FB9d8b44EC82f",
        "validatorsExitBusOracle": "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e",
        "withdrawalQueue": "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
        "withdrawalVault": "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f"
      },
      "implementationNames": {
        "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb": "OssifiableProxy",
        "eth:0x2C298963FB763f74765829722a1ebe0784f4F5Cf": "LidoLocator"
      }
    },
    {
      "name": "DualGovernance",
      "address": "eth:0xC1db28B3301331277e307FDCfF8DE28242A4486E",
      "type": "Contract",
      "sourceHashes": [
        "0x1938738e494a39adfa9bea9a845db8cd9d362efc3d059616aec94a3c5d06c48c"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1754648507,
      "sinceBlock": 23095715,
      "values": {
        "$immutable": true,
        "canCancelAllPendingProposals": false,
        "canScheduleProposal": [false, false, false, false],
        "canSubmitProposal": true,
        "getConfigProvider": "eth:0xa1692Af6FDfdD1030E4E9c4Bc429986FA64CB5EF",
        "getEffectiveState": 1,
        "getPersistedState": 1,
        "getProposalsCanceller": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
        "getProposers": [
          {
            "account": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e",
            "executor": "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021"
          }
        ],
        "getRageQuitEscrow": "eth:0x0000000000000000000000000000000000000000",
        "getResealCommittee": "eth:0xFFe21561251c49AdccFad065C94Fb4931dF49081",
        "getResealManager": "eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24",
        "getStateDetails": {
          "effectiveState": 1,
          "persistedState": 1,
          "persistedStateEnteredAt": 1754648507,
          "vetoSignallingActivatedAt": 0,
          "vetoSignallingReactivationTime": 0,
          "normalOrVetoCooldownExitedAt": 0,
          "rageQuitRound": 0,
          "vetoSignallingDuration": 0
        },
        "getTiebreakerDetails": {
          "isTie": false,
          "tiebreakerCommittee": "eth:0xf65614d73952Be91ce0aE7Dd9cFf25Ba15bEE2f5",
          "tiebreakerActivationTimeout": 31536000,
          "sealableWithdrawalBlockers": [
            "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
            "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e",
            "eth:0xDC00116a0D3E064427dA2600449cfD2566B3037B"
          ]
        },
        "getVetoSignallingEscrow": "eth:0x165813A31446a98c84E20Dda8C101BB3C8228e1c",
        "MAX_SEALABLE_WITHDRAWAL_BLOCKERS_COUNT": 255,
        "MAX_TIEBREAKER_ACTIVATION_TIMEOUT": 63072000,
        "MIN_TIEBREAKER_ACTIVATION_TIMEOUT": 15768000,
        "TIMELOCK": "eth:0xCE0425301C85c5Ea2A0873A2dEe44d78E02D2316"
      },
      "implementationNames": {
        "eth:0xC1db28B3301331277e307FDCfF8DE28242A4486E": "DualGovernance"
      }
    },
    {
      "name": "GnosisSafe",
      "address": "eth:0xC52fC3081123073078698F1EAc2f1Dc7Bd71880f",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1726652819,
      "sinceBlock": 20776677,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0xdac96e602fbb38De089DaB03f7a37B70C4234221",
          "eth:0x83EecCAf434AC9Da6132aB1124aFb755A2eA9266",
          "eth:0xfcfbafa0d5f5512C65DbB4C073fE4Ee6Dc3c4779",
          "eth:0x6aC2dF117C82F51BfdEF1A249672b9A9cA6b3d86",
          "eth:0x7aFd3C7f16FdBB3AdF331Fcc20A585d768ECf60d",
          "eth:0xCbC39c37Ee315E4A504Cc1AD0D7956A76e20D90d"
        ],
        "$threshold": 4,
        "domainSeparator": "0xcec75e76fcd10e962bc2a22fc210748e3d5f9f66233cda95f7d5b51fe89638e7",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 6 (67%)",
        "nonce": 12,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0xC52fC3081123073078698F1EAc2f1Dc7Bd71880f": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "CSEjector",
      "address": "eth:0xc72b58aa02E0e98cF8A4a0E9Dce75e763800802C",
      "type": "Contract",
      "sourceHashes": [
        "0xa2a2abe99fefa83e09c282ce11527c7eccc31adfa7d899e7f8e3a633550a260d"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758112691,
      "sinceBlock": 23382852,
      "values": {
        "$immutable": true,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getResumeSinceTimestamp": 0,
        "isPaused": false,
        "MODULE": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "RECOVERER_ROLE": "0xb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc",
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "STAKING_MODULE_ID": 3,
        "STRIKES": "eth:0xaa328816027F2D32B9F56d190BC9Fa4A5C07637f",
        "STRIKES_EXIT_TYPE_ID": 1,
        "triggerableWithdrawalsGateway": "eth:0xDC00116a0D3E064427dA2600449cfD2566B3037B",
        "VOLUNTARY_EXIT_TYPE_ID": 0
      },
      "implementationNames": {
        "eth:0xc72b58aa02E0e98cF8A4a0E9Dce75e763800802C": "CSEjector"
      }
    },
    {
      "name": "Safe",
      "address": "eth:0xC7792b3F2B399bB0EdF53fECDceCeB97FBEB18AF",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747660931,
      "sinceBlock": 22517274,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x8f929Defb7638B5ee6390bdd3bf87B266Df5EDf4",
          "eth:0x9bdFf3B294400A6a5D56647872d4035C944C10ce",
          "eth:0xA032E9E70c6200b7e51fCdeF15B611fC38833Cc1",
          "eth:0x237Cddf3aA765260cf6b60E064065Da7c3Aa1559",
          "eth:0xAe0E06b1B5ecB80f157A7DB8A7c9E83fC1720711",
          "eth:0x62c89F5768D0FeC0915fb614C5eDd9fdeaA2A3fd",
          "eth:0xcfc7834eb929e7E621F0Ba71d421A27Eddf6DDA1"
        ],
        "$threshold": 5,
        "domainSeparator": "0x4ef09a28a971ca58fdef72343eb3dc34bce2f87619adea9a6b45f8587eafbd86",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "5 of 7 (71%)",
        "nonce": 1,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0xC7792b3F2B399bB0EdF53fECDceCeB97FBEB18AF": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "address": "eth:0xc79F702202E3A6B0B6310B537E786B9ACAA19BAf",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xCbC39c37Ee315E4A504Cc1AD0D7956A76e20D90d",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "EmergencyProtectedTimelock",
      "address": "eth:0xCE0425301C85c5Ea2A0873A2dEe44d78E02D2316",
      "type": "Contract",
      "template": "lido-v2/EmergencyProtectedTimelock",
      "sourceHashes": [
        "0xc072640ec43225f4ed6f75f709b42258de2263b75d7c3c79ed19ce045f624e39"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1747910951,
      "sinceBlock": 22537921,
      "values": {
        "$immutable": true,
        "getAdminExecutor": "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
        "getAfterScheduleDelay": 86400,
        "getAfterSubmitDelay": 259200,
        "getEmergencyActivationCommittee": "eth:0x8B7854488Fde088d686Ea672B6ba1A5242515f45",
        "getEmergencyExecutionCommittee": "eth:0xC7792b3F2B399bB0EdF53fECDceCeB97FBEB18AF",
        "getEmergencyGovernance": "eth:0x553337946F2FAb8911774b20025fa776B76a7CcE",
        "getEmergencyProtectionDetails": {
          "emergencyModeDuration": 2592000,
          "emergencyModeEndsAfter": 0,
          "emergencyProtectionEndsAfter": 1781913600
        },
        "getGovernance": "eth:0xC1db28B3301331277e307FDCfF8DE28242A4486E",
        "getProposalDetails": [
          [
            1,
            "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
            1748527019,
            1748863175,
            3
          ],
          [
            2,
            "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
            1751292287,
            1751551559,
            3
          ],
          [
            3,
            "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
            1753696223,
            1753957355,
            3
          ],
          [
            4,
            "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
            1757355419,
            1757614643,
            3
          ]
        ],
        "getProposalsCount": 5,
        "isEmergencyModeActive": false,
        "isEmergencyProtectionEnabled": true,
        "MAX_AFTER_SCHEDULE_DELAY": 864000,
        "MAX_AFTER_SUBMIT_DELAY": 2592000,
        "MAX_EMERGENCY_MODE_DURATION": 31536000,
        "MAX_EMERGENCY_PROTECTION_DURATION": 94608000,
        "MIN_EXECUTION_DELAY": 259200
      },
      "implementationNames": {
        "eth:0xCE0425301C85c5Ea2A0873A2dEe44d78E02D2316": "EmergencyProtectedTimelock"
      }
    },
    {
      "name": "PermissionlessGate",
      "address": "eth:0xcF33a38111d0B1246A3F38a838fb41D626B454f0",
      "type": "Contract",
      "sourceHashes": [
        "0xdaad61d8317d7931c255b1c3690c852637a0a11c4d8b9aff03fda0560e321d9c"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758112355,
      "sinceBlock": 23382824,
      "values": {
        "$immutable": true,
        "CURVE_ID": 0,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "MODULE": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
        "RECOVERER_ROLE": "0xb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc"
      },
      "implementationNames": {
        "eth:0xcF33a38111d0B1246A3F38a838fb41D626B454f0": "PermissionlessGate"
      }
    },
    {
      "address": "eth:0xcfc7834eb929e7E621F0Ba71d421A27Eddf6DDA1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Burner",
      "address": "eth:0xD15a672319Cf0352560eE76d9e89eAB0889046D3",
      "type": "Contract",
      "template": "tokens/Lido/Burner",
      "sourceHashes": [
        "0x10157e5d64980dbfd1f7d94307306bb86c3e3a9bb481af9253f4df368a6542f2"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "getCoverSharesBurnt",
        "getExcessStETH",
        "getNonCoverSharesBurnt",
        "getSharesRequestedToBurn"
      ],
      "sinceTimestamp": 1683024071,
      "sinceBlock": 17172559,
      "values": {
        "$immutable": true,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getCoverSharesBurnt": "14684898881648297203",
        "getExcessStETH": 0,
        "getNonCoverSharesBurnt": "11182565928019166749626373",
        "getSharesRequestedToBurn": { "coverShares": 0, "nonCoverShares": 0 },
        "REQUEST_BURN_MY_STETH_ROLE": "0x28186f938b759084eea36948ef1cd8b40ec8790a98d5f1a09b70879fe054e5cc",
        "REQUEST_BURN_SHARES_ROLE": "0x4be29e0e4eb91f98f709d98803cba271592782e293b84a625e025cbb40197ba8",
        "STETH": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "TREASURY": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"
      },
      "implementationNames": {
        "eth:0xD15a672319Cf0352560eE76d9e89eAB0889046D3": "Burner"
      }
    },
    {
      "address": "eth:0xd4EF84b638B334699bcf5AF4B0410B8CCD71943f",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OpStackTokenRatePusher",
      "address": "eth:0xd54c1c6413caac3477AC14b2a80D5398E3c32FfE",
      "type": "Contract",
      "template": "tokens/Lido/OpStackTokenRatePusher",
      "sourceHashes": [
        "0x914444eb1e15eba41dafc9099a1e9e51a554ff786ce9f7b5159cb306f4779477"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1724328047,
      "sinceBlock": 20584007,
      "values": {
        "$immutable": true,
        "ACCOUNTING_ORACLE": "eth:0x852deD011285fe67063a08005c71a85690503Cee",
        "GENESIS_TIME": 1606824023,
        "L2_GAS_LIMIT_FOR_PUSHING_TOKEN_RATE": 300000,
        "L2_TOKEN_RATE_ORACLE": "eth:0x294ED1f214F4e0ecAE31C3Eae4F04EBB3b36C9d0",
        "MESSENGER": "eth:0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "SECONDS_PER_SLOT": 12,
        "TOKEN_RATE_DECIMALS": 27,
        "WSTETH": "eth:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0"
      },
      "implementationNames": {
        "eth:0xd54c1c6413caac3477AC14b2a80D5398E3c32FfE": "OpStackTokenRatePusher"
      }
    },
    {
      "name": "HashConsensus",
      "address": "eth:0xD624B08C83bAECF0807Dd2c6880C3154a5F0B288",
      "type": "Contract",
      "template": "tokens/Lido/HashConsensus",
      "sourceHashes": [
        "0xdcb2da84a44fbac1b8d7ea814fd34325ac06bb8169fad7507a00835a3ffb25de"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "getConsensusState",
        "getCurrentFrame",
        "getFastLaneMembers",
        "getFrameConfig",
        "getMembers",
        "getReportVariants"
      ],
      "sinceTimestamp": 1683024023,
      "sinceBlock": 17172555,
      "values": {
        "$immutable": true,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "MANAGE_MEMBERS_AND_QUORUM_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DISABLE_CONSENSUS_ROLE": "0x10b016346186602d93fc7a27ace09ba944baf9453611b186d36acd3d3d667dc0",
        "getChainConfig": {
          "slotsPerEpoch": 32,
          "secondsPerSlot": 12,
          "genesisTime": 1606824023
        },
        "getConsensusState": {
          "refSlot": 12895199,
          "consensusReport": "0x4055321480d87baa2250de03daebd9cc72c4250251a669318841f367bf46d104",
          "isReportProcessing": true
        },
        "getCurrentFrame": {
          "refSlot": 12895199,
          "reportProcessingDeadlineSlot": 12902399
        },
        "getFastLaneMembers": {
          "addresses": [
            "eth:0x007DE4a5F7bc37E2F26c0cb2E8A95006EE9B89b5",
            "eth:0xc79F702202E3A6B0B6310B537E786B9ACAA19BAf",
            "eth:0x61c91ECd902EB56e314bB2D5c5C07785444Ea1c8",
            "eth:0xe57B3792aDCc5da47EF4fF588883F0ee0c9835C9",
            "eth:0x4118DAD7f348A4063bD15786c299De2f3B1333F3"
          ],
          "lastReportedRefSlots": [
            12895199, 12895199, 12520799, 12895199, 12895199
          ]
        },
        "getFrameConfig": {
          "initialEpoch": 201600,
          "epochsPerFrame": 225,
          "fastLaneLengthSlots": 100
        },
        "getInitialRefSlot": 6451199,
        "getMembers": {
          "addresses": [
            "eth:0x73181107c8D9ED4ce0bbeF7A0b4ccf3320C41d12",
            "eth:0x285f8537e1dAeEdaf617e96C742F2Cf36d63CcfB",
            "eth:0x404335BcE530400a5814375E7Ec1FB55fAff3eA2",
            "eth:0x946D3b081ed19173dC83Cd974fC69e1e760B7d78",
            "eth:0x007DE4a5F7bc37E2F26c0cb2E8A95006EE9B89b5",
            "eth:0xc79F702202E3A6B0B6310B537E786B9ACAA19BAf",
            "eth:0x61c91ECd902EB56e314bB2D5c5C07785444Ea1c8",
            "eth:0xe57B3792aDCc5da47EF4fF588883F0ee0c9835C9",
            "eth:0x4118DAD7f348A4063bD15786c299De2f3B1333F3"
          ],
          "lastReportedRefSlots": [
            12887999, 12895199, 12895199, 12815999, 12895199, 12895199,
            12520799, 12895199, 12895199
          ]
        },
        "getQuorum": 5,
        "getReportProcessor": "eth:0x852deD011285fe67063a08005c71a85690503Cee",
        "getReportVariants": {
          "variants": [
            "0x4055321480d87baa2250de03daebd9cc72c4250251a669318841f367bf46d104"
          ],
          "support": [6]
        },
        "MANAGE_FAST_LANE_CONFIG_ROLE": "0x4af6faa30fabb2c4d8d567d06168f9be8adb583156c1ecb424b4832a7e4d6717",
        "MANAGE_FRAME_CONFIG_ROLE": "0x921f40f434e049d23969cbe68d9cf3ac1013fbe8945da07963af6f3142de6afe",
        "MANAGE_MEMBERS_AND_QUORUM_ROLE": "0x66a484cf1a3c6ef8dfd59d24824943d2853a29d96f34a01271efc55774452a51",
        "MANAGE_REPORT_PROCESSOR_ROLE": "0xc5219a8d2d0107a57aad00b22081326d173df87bad251126f070df2659770c3e"
      },
      "implementationNames": {
        "eth:0xD624B08C83bAECF0807Dd2c6880C3154a5F0B288": "HashConsensus"
      }
    },
    {
      "name": "SetVettedValidatorsLimits",
      "address": "eth:0xD75778b855886Fc5e1eA7D6bFADA9EB68b35C19D",
      "type": "Contract",
      "sourceHashes": [
        "0xd3d6cb1e9c3aa5514f3bae249d653446551cb003ac86068eaf0a982d6e53a1a0"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1703582879,
      "sinceBlock": 18868974,
      "values": {
        "$immutable": true,
        "nodeOperatorsRegistry": "eth:0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
        "trustedCaller": "eth:0x08637515E85A4633E23dfc7861e2A9f53af640f7"
      },
      "implementationNames": {
        "eth:0xD75778b855886Fc5e1eA7D6bFADA9EB68b35C19D": "SetVettedValidatorsLimits"
      }
    },
    {
      "address": "eth:0xD7cABE01709c7E36e9D1fb3248A19b525578a1Fc",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xD8a9072D82a28307279aC0aD3c97Cb61bEe67952",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "CSFeeDistributor",
      "address": "eth:0xD99CC66fEC647E68294C6477B40fC7E0F6F618D0",
      "type": "Contract",
      "template": "tokens/Lido/CSFeeDistributor",
      "sourceHashes": [
        "0x0e9e628d137fa4b53b03ce51b1b0e0122d524ca323f45751894d2e62c91c2651",
        "0x881e365358bb714cd1d4c59279039f33010f934835d0bd8406443a9bb43c5b9f"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": [
        "treeRoot",
        "totalClaimableShares",
        "pendingSharesToDistribute"
      ],
      "sinceTimestamp": 1728566351,
      "sinceBlock": 20935463,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x5DCF7cF7c6645E9E822a379dF046a8b0390251A1",
        "$pastUpgrades": [
          [
            "2024-10-10T13:19:11.000Z",
            "0xee7781fe84a8d09249d1d882c3e1f4dbb82f8dd743a15d4b27df35c4959e17b3",
            ["eth:0x17Fc610ecbbAc3f99751b3B2aAc1bA2b22E444f0"]
          ],
          [
            "2025-10-02T15:52:47.000Z",
            "0xfff774d519ec1afd4358d4858672578437e815dc1652245a2ffb7bde1bfff2ad",
            ["eth:0x5DCF7cF7c6645E9E822a379dF046a8b0390251A1"]
          ]
        ],
        "$upgradeCount": 2,
        "ACCOUNTING": "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "distributionDataHistoryCount": 1,
        "getInitializedVersion": 2,
        "ORACLE": "eth:0x4D4074628678Bd302921c20573EEa1ed38DdF7FB",
        "pendingSharesToDistribute": "3964554886061241237",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0x5DCF7cF7c6645E9E822a379dF046a8b0390251A1",
        "proxy__getIsOssified": false,
        "rebateRecipient": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "RECOVERER_ROLE": "0xb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc",
        "STETH": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "totalClaimableShares": "71824316454442983351",
        "treeRoot": "0xf95e66ef356ac51b161bd7c544eb9326364aa154bd3573e83c70ceb64682c366"
      },
      "implementationNames": {
        "eth:0xD99CC66fEC647E68294C6477B40fC7E0F6F618D0": "OssifiableProxy",
        "eth:0x5DCF7cF7c6645E9E822a379dF046a8b0390251A1": "CSFeeDistributor"
      }
    },
    {
      "name": "CSModule",
      "address": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
      "type": "Contract",
      "template": "tokens/Lido/CSModule",
      "sourceHashes": [
        "0x0e9e628d137fa4b53b03ce51b1b0e0122d524ca323f45751894d2e62c91c2651",
        "0xde753d771c3a4dc27e58e529b2dfd70871547d49e71ecd3478353ec02e995aa8"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": [
        "getActiveNodeOperatorsCount",
        "depositQueue",
        "getStakingModuleSummary",
        "getNodeOperatorsCount"
      ],
      "sinceTimestamp": 1728566339,
      "sinceBlock": 20935462,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x1eB6d4da13ca9566c17F526aE0715325d7a07665",
        "$pastUpgrades": [
          [
            "2024-10-10T13:18:59.000Z",
            "0xf5330dbcf09885ed145c4435e356b5d8a10054751bb8009d3a2605d476ac173f",
            ["eth:0x8daEa53b17a629918CDFAB785C5c74077c1D895B"]
          ],
          [
            "2025-10-02T15:52:47.000Z",
            "0xfff774d519ec1afd4358d4858672578437e815dc1652245a2ffb7bde1bfff2ad",
            ["eth:0x1eB6d4da13ca9566c17F526aE0715325d7a07665"]
          ]
        ],
        "$upgradeCount": 2,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "STAKING_ROUTER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999"]
          },
          "PAUSE_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24",
              "eth:0xE1686C2E90eb41a48356c1cC7FaA17629af3ADB3"
            ]
          },
          "REPORT_EL_REWARDS_STEALING_PENALTY_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xC52fC3081123073078698F1EAc2f1Dc7Bd71880f"]
          },
          "SETTLE_EL_REWARDS_STEALING_PENALTY_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977"]
          },
          "VERIFIER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xdC5FE1782B6943f318E05230d688713a560063DC"]
          },
          "RESUME_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24"]
          },
          "0x79dfcec784e591aafcf60db7db7b029a5c8b12aac4afd4e8c4eb740430405fa6": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "CREATE_NODE_OPERATOR_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0xcF33a38111d0B1246A3F38a838fb41D626B454f0",
              "eth:0xB314D4A76C457c93150d308787939063F4Cc67E0"
            ]
          }
        },
        "accounting": "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da",
        "ACCOUNTING": "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da",
        "CREATE_NODE_OPERATOR_ROLE": "0xc72a21b38830f4d6418a239e17db78b945cc7cfee674bac97fd596eaf0438478",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DEPOSIT_SIZE": "32000000000000000000",
        "EXIT_PENALTIES": "eth:0x06cd61045f958A209a0f8D746e103eCc625f4193",
        "FEE_DISTRIBUTOR": "eth:0xD99CC66fEC647E68294C6477B40fC7E0F6F618D0",
        "getActiveNodeOperatorsCount": 489,
        "getInitializedVersion": 2,
        "getNodeOperatorsCount": 489,
        "getResumeSinceTimestamp": 1729872203,
        "getStakingModuleSummary": {
          "totalExitedValidators": 406,
          "totalDepositedValidators": 11256,
          "depositableValidatorsCount": 642
        },
        "getType": "0x636f6d6d756e6974792d6f6e636861696e2d7631000000000000000000000000",
        "isPaused": false,
        "LIDO_LOCATOR": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "PARAMETERS_REGISTRY": "eth:0x9D28ad303C90DF524BA960d7a2DAC56DcC31e428",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0x1eB6d4da13ca9566c17F526aE0715325d7a07665",
        "proxy__getIsOssified": false,
        "QUEUE_LEGACY_PRIORITY": 4,
        "QUEUE_LOWEST_PRIORITY": 5,
        "RECOVERER_ROLE": "0xb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc",
        "REPORT_EL_REWARDS_STEALING_PENALTY_ROLE": "0x59911a6aa08a72fe3824aec4500dc42335c6d0702b6d5c5c72ceb265a0de9302",
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "SETTLE_EL_REWARDS_STEALING_PENALTY_ROLE": "0xe85fdec10fe0f93d0792364051df7c3d73e37c17b3a954bffe593960e3cd3012",
        "STAKING_ROUTER_ROLE": "0xbb75b874360e0bfd87f964eadd8276d8efb7c942134fc329b513032d0803e0c6",
        "STETH": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "VERIFIER_ROLE": "0x0ce23c3e399818cfee81a7ab0880f714e53d7672b08df0fa62f2843416e1ea09"
      },
      "implementationNames": {
        "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F": "OssifiableProxy",
        "eth:0x1eB6d4da13ca9566c17F526aE0715325d7a07665": "CSModule"
      }
    },
    {
      "address": "eth:0xdac96e602fbb38De089DaB03f7a37B70C4234221",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xDBD124e898839ec8C829d806C0328f069d1bB810",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "TiebreakerSubCommittee",
      "address": "eth:0xDBfa0B8A15a503f25224fcA5F84a3853230A715C",
      "type": "Contract",
      "template": "lido-v2/TiebreakerSubCommittee",
      "sourceHashes": [
        "0x4adcce95826015839acfaae5b9c6e7e7d48d7130177fa3720ce9bc31332c6b72"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1754648543,
      "sinceBlock": 23095718,
      "values": {
        "$immutable": true,
        "getMembers": [
          "eth:0x9837b0Db0b733DED04D96a0A25Ba1E414A6C4c08",
          "eth:0xDBD124e898839ec8C829d806C0328f069d1bB810",
          "eth:0xf8Bfa395744Cb25fa4368Ffe2344Dc35546092d9",
          "eth:0x8103E9eDC04d87F6DA24A3a0c7778daE689E9D63",
          "eth:0xFCD02C040ceA45DC6CEC3E24F1D3946FCE7077b0",
          "eth:0xD7cABE01709c7E36e9D1fb3248A19b525578a1Fc",
          "eth:0x8ed4dfd3A610CCF1FB45e797bf5D8e0f93084F22"
        ],
        "getProposalAt": [],
        "getProposalsLength": 0,
        "getQuorum": 5,
        "getTimelockDuration": 0,
        "owner": "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021",
        "TIEBREAKER_CORE_COMMITTEE": "eth:0xf65614d73952Be91ce0aE7Dd9cFf25Ba15bEE2f5"
      },
      "implementationNames": {
        "eth:0xDBfa0B8A15a503f25224fcA5F84a3853230A715C": "TiebreakerSubCommittee"
      }
    },
    {
      "name": "TriggerableWithdrawalsGateway",
      "address": "eth:0xDC00116a0D3E064427dA2600449cfD2566B3037B",
      "type": "Contract",
      "template": "lido-v2/TriggerableWithdrawalsGateway",
      "sourceHashes": [
        "0x6e0f1e9ab2993ef59e29bff788073adafb044d30f822762a9085b18062c36002"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1757671211,
      "sinceBlock": 23346245,
      "values": {
        "$immutable": true,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "ADD_FULL_WITHDRAWAL_REQUEST_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0xc72b58aa02E0e98cF8A4a0E9Dce75e763800802C",
              "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e"
            ]
          },
          "PAUSE_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0xA6BC802fAa064414AA62117B4a53D27fFfF741F1",
              "eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24"
            ]
          },
          "RESUME_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24"]
          }
        },
        "ADD_FULL_WITHDRAWAL_REQUEST_ROLE": "0x15fac8ba7fe8dd5344b88c1915452ce66976f270d1cd793c3b0ab579cecd33c0",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getExitRequestLimitFullInfo": {
          "maxExitRequestsLimit": 11200,
          "exitsPerFrame": 1,
          "frameDurationInSec": 48,
          "prevExitRequestsLimit": 11200,
          "currentExitRequestsLimit": 11200
        },
        "getResumeSinceTimestamp": 0,
        "isPaused": false,
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "TW_EXIT_LIMIT_MANAGER_ROLE": "0x03c30da9b9e4d4789ac88a294d39a63058ca4a498804c2aa823e381df59d0cf4",
        "TWR_LIMIT_POSITION": "0x3a69583d449251314fd68e4e68fe89ca455d27f2701d2fdee1b16c585fc4e2d6",
        "VERSION": 1
      },
      "implementationNames": {
        "eth:0xDC00116a0D3E064427dA2600449cfD2566B3037B": "TriggerableWithdrawalsGateway"
      }
    },
    {
      "name": "CSVerifier",
      "address": "eth:0xdC5FE1782B6943f318E05230d688713a560063DC",
      "type": "Contract",
      "sourceHashes": [
        "0xbfaa931b478a62077390cb930727c826d3d65f736d5489b1c68b8326749aef0f"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758112715,
      "sinceBlock": 23382854,
      "values": {
        "$immutable": true,
        "BEACON_ROOTS": "eth:0x000F3df6D732807Ef1319fB7B8bB8522d0Beac02",
        "CAPELLA_SLOT": 6209536,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "FIRST_SUPPORTED_SLOT": 11649024,
        "getResumeSinceTimestamp": 0,
        "GI_FIRST_BLOCK_ROOT_IN_SUMMARY_CURR": "0x000000000000000000000000000000000000000000000000000000000040000d",
        "GI_FIRST_BLOCK_ROOT_IN_SUMMARY_PREV": "0x000000000000000000000000000000000000000000000000000000000040000d",
        "GI_FIRST_HISTORICAL_SUMMARY_CURR": "0x000000000000000000000000000000000000000000000000000000b600000018",
        "GI_FIRST_HISTORICAL_SUMMARY_PREV": "0x000000000000000000000000000000000000000000000000000000b600000018",
        "GI_FIRST_VALIDATOR_CURR": "0x0000000000000000000000000000000000000000000000000096000000000028",
        "GI_FIRST_VALIDATOR_PREV": "0x0000000000000000000000000000000000000000000000000096000000000028",
        "GI_FIRST_WITHDRAWAL_CURR": "0x000000000000000000000000000000000000000000000000000000000161c004",
        "GI_FIRST_WITHDRAWAL_PREV": "0x000000000000000000000000000000000000000000000000000000000161c004",
        "isPaused": false,
        "MODULE": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "PIVOT_SLOT": 11649024,
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "SLOTS_PER_EPOCH": 32,
        "SLOTS_PER_HISTORICAL_ROOT": 8192,
        "WITHDRAWAL_ADDRESS": "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f"
      },
      "implementationNames": {
        "eth:0xdC5FE1782B6943f318E05230d688713a560063DC": "CSVerifier"
      }
    },
    {
      "address": "eth:0xddD80BC94975C10A2f613511F80bd860FcB76818",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GateSeal",
      "address": "eth:0xE1686C2E90eb41a48356c1cC7FaA17629af3ADB3",
      "type": "Contract",
      "sourceHashes": [
        "0xb3ab659870cff0a086082fa6fc937c759a5709a5c748dcb4bea88945715f56b6"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1758112727,
      "sinceBlock": 23382855,
      "values": {
        "$immutable": true,
        "get_expiry_timestamp": 1789648283,
        "get_seal_duration_seconds": 950400,
        "get_sealables": [
          "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
          "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da",
          "eth:0x4D4074628678Bd302921c20573EEa1ed38DdF7FB",
          "eth:0xdC5FE1782B6943f318E05230d688713a560063DC",
          "eth:0xB314D4A76C457c93150d308787939063F4Cc67E0",
          "eth:0xc72b58aa02E0e98cF8A4a0E9Dce75e763800802C"
        ],
        "get_sealing_committee": "eth:0xC52fC3081123073078698F1EAc2f1Dc7Bd71880f",
        "is_expired": false
      },
      "implementationNames": {
        "eth:0xE1686C2E90eb41a48356c1cC7FaA17629af3ADB3": "GateSeal"
      }
    },
    {
      "address": "eth:0xE21a08C60b065cE42FD5b0BD99a98A0FAe6ddA23",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xE3e34FA93575AF41BEF3476236E1A3CDb3F60B85",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xe57B3792aDCc5da47EF4fF588883F0ee0c9835C9",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "TokenRateNotifier",
      "address": "eth:0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823",
      "type": "Contract",
      "sourceHashes": [
        "0x6f6c2b5fe89e476b4a6700268156a2f5e028a4e7607ae4e93223d77f95fcb7d2"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1724328035,
      "sinceBlock": 20584006,
      "values": {
        "$immutable": true,
        "INDEX_NOT_FOUND": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "LIDO": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "MAX_OBSERVERS_COUNT": 32,
        "observers": ["eth:0xd54c1c6413caac3477AC14b2a80D5398E3c32FfE"],
        "observersLength": 1,
        "owner": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "REQUIRED_INTERFACE": "0xa16ba44d"
      },
      "implementationNames": {
        "eth:0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823": "TokenRateNotifier"
      }
    },
    {
      "address": "eth:0xEC7ABf73f339361ecCA951E1746C90a3e6205BFC",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "EasyTrack",
      "address": "eth:0xF0211b7660680B49De1A7E9f25C65660F0a13Fea",
      "type": "Contract",
      "template": "lido-v2/EasyTrack",
      "sourceHashes": [
        "0xd2ecc9bd292526b7b152d0080059664e9dc393525f2d141ec86ae20d3823a6d6"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1637750137,
      "sinceBlock": 13676729,
      "values": {
        "$immutable": true,
        "CANCEL_ROLE": "0x9f959e00d95122f5cbd677010436cf273ef535b86b056afc172852144b9491d7",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "evmScriptExecutor": "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977",
        "evmScriptFactories": [
          "eth:0xFeBd8FAC16De88206d4b18764e826AF38546AfE0",
          "eth:0x7E8eFfAb3083fB26aCE6832bFcA4C377905F97d7",
          "eth:0x9721c0f77E3Ea40eD592B9DCf3032DaF269c0306",
          "eth:0xF6B6E7997338C48Ea3a8BCfa4BB64a315fDa76f4",
          "eth:0xBd2b6dC189EefD51B273F5cb2d99BA1ce565fb8C"
        ],
        "getEVMScriptFactories": [
          "eth:0xFeBd8FAC16De88206d4b18764e826AF38546AfE0",
          "eth:0x7E8eFfAb3083fB26aCE6832bFcA4C377905F97d7",
          "eth:0x9721c0f77E3Ea40eD592B9DCf3032DaF269c0306",
          "eth:0xF6B6E7997338C48Ea3a8BCfa4BB64a315fDa76f4",
          "eth:0xBd2b6dC189EefD51B273F5cb2d99BA1ce565fb8C",
          "eth:0x48c135Ff690C2Aa7F5B11C539104B5855A4f9252",
          "eth:0x200dA0b6a9905A377CF8D469664C65dB267009d1",
          "eth:0x00A3D6260f70b1660c8646Ef25D0820EFFd7bE60",
          "eth:0x00caAeF11EC545B192f16313F53912E453c91458",
          "eth:0x22010d1747CaFc370b1f1FBBa61022A313c5693b",
          "eth:0x935cb3366Faf2cFC415B2099d1F974Fd27202b77",
          "eth:0x1F2b79FE297B7098875930bBA6dd17068103897E",
          "eth:0xE1f6BaBb445F809B97e3505Ea91749461050F780",
          "eth:0xbD08f9D6BF1D25Cc7407E4855dF1d46C2043B3Ea",
          "eth:0x1F809D2cb72a5Ab13778811742050eDa876129b6",
          "eth:0xd30Dc38EdEfc21875257e8A3123503075226E14B",
          "eth:0xf2476f967C826722F5505eDfc4b2561A34033477",
          "eth:0x6b7863f2c7dEE99D3b744fDAEDbEB1aeCC025535",
          "eth:0x6AB39a8Be67D9305799c3F8FdFc95Caf3150d17c",
          "eth:0xcAa3AF7460E83E665EEFeC73a7a542E5005C9639",
          "eth:0xCBb418F6f9BFd3525CE6aADe8F74ECFEfe2DB5C8",
          "eth:0x8B82C1546D47330335a48406cc3a50Da732672E7",
          "eth:0xD75778b855886Fc5e1eA7D6bFADA9EB68b35C19D",
          "eth:0xe5656eEe7eeD02bdE009d77C88247BC8271e26Eb",
          "eth:0x7d509BFF310d9460b1F613e4e40d342201a83Ae4",
          "eth:0x589e298964b9181D9938B84bB034C3BB9024E2C0",
          "eth:0xE31A0599A6772BCf9b2bFc9e25cf941e793c9a7D",
          "eth:0x6e04aED774B7c89BB43721AcDD7D03C872a51B69",
          "eth:0x0d2aefA542aFa8d9D1Ec35376068B88042FEF5f6",
          "eth:0x161a4552A625844c822954C5AcBac928ee0f399B",
          "eth:0xBc5642bDD6F2a54b01A75605aAe9143525D97308",
          "eth:0xB7668B5485d0f826B86a75b0115e088bB9ee03eE",
          "eth:0x8aa34dAaF0fC263203A15Bcfa0Ed926D466e59F3"
        ],
        "getMotion": [],
        "getMotions": [
          {
            "id": 879,
            "evmScriptFactory": "eth:0xD75778b855886Fc5e1eA7D6bFADA9EB68b35C19D",
            "creator": "eth:0x08637515E85A4633E23dfc7861e2A9f53af640f7",
            "duration": 259200,
            "startDate": 1761563759,
            "snapshotBlock": 23668422,
            "objectionsThreshold": 50,
            "objectionsAmount": 0,
            "evmScriptHash": "0x942aa40b80a862a729bdcbb7425fc453bfc1c3041336a8a27191793450296084"
          },
          {
            "id": 880,
            "evmScriptFactory": "eth:0x589e298964b9181D9938B84bB034C3BB9024E2C0",
            "creator": "eth:0x08637515E85A4633E23dfc7861e2A9f53af640f7",
            "duration": 259200,
            "startDate": 1761563795,
            "snapshotBlock": 23668425,
            "objectionsThreshold": 50,
            "objectionsAmount": 0,
            "evmScriptHash": "0x0cd0bd436884c8d09802819a606b4da9560f0592ae252d749751035bd1e60490"
          }
        ],
        "governanceToken": "eth:0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",
        "MAX_MOTIONS_LIMIT": 24,
        "MAX_OBJECTIONS_THRESHOLD": 500,
        "MIN_MOTION_DURATION": 172800,
        "motionDuration": 259200,
        "motions": [
          [
            879,
            "eth:0xD75778b855886Fc5e1eA7D6bFADA9EB68b35C19D",
            "eth:0x08637515E85A4633E23dfc7861e2A9f53af640f7",
            259200,
            1761563759,
            23668422,
            50,
            0,
            "0x942aa40b80a862a729bdcbb7425fc453bfc1c3041336a8a27191793450296084"
          ],
          [
            880,
            "eth:0x589e298964b9181D9938B84bB034C3BB9024E2C0",
            "eth:0x08637515E85A4633E23dfc7861e2A9f53af640f7",
            259200,
            1761563795,
            23668425,
            50,
            0,
            "0x0cd0bd436884c8d09802819a606b4da9560f0592ae252d749751035bd1e60490"
          ]
        ],
        "motionsCountLimit": 20,
        "objectionsThreshold": 50,
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "paused": false,
        "UNPAUSE_ROLE": "0x265b220c5a8891efdd9e1b1b7fa72f257bd5169f8d87e319cf3dad6ff52b94ae"
      },
      "errors": { "evmScriptFactories": "Processing error occurred." },
      "implementationNames": {
        "eth:0xF0211b7660680B49De1A7E9f25C65660F0a13Fea": "EasyTrack"
      }
    },
    {
      "address": "eth:0xF37FeF00Fe67956E9870114815c42F0Cc18373ce",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "TiebreakerCoreCommittee",
      "address": "eth:0xf65614d73952Be91ce0aE7Dd9cFf25Ba15bEE2f5",
      "type": "Contract",
      "template": "lido-v2/TiebreakerCoreCommittee",
      "sourceHashes": [
        "0x02acc7713ac5a15e76280822769d1b6a9fa490c5667ca3622d41499a7bb0d1ee"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1754648519,
      "sinceBlock": 23095716,
      "values": {
        "$immutable": true,
        "DUAL_GOVERNANCE": "eth:0xC1db28B3301331277e307FDCfF8DE28242A4486E",
        "getMembers": [
          "eth:0x3D3ba54D54bbFF40F2Dfa2A8e27bD4dE3dab2951",
          "eth:0xDBfa0B8A15a503f25224fcA5F84a3853230A715C",
          "eth:0xBF048f2111497B6Df5E062811f5fC422804D4baE"
        ],
        "getProposalAt": [],
        "getProposalsLength": 0,
        "getQuorum": 2,
        "getTimelockDuration": 2592000,
        "owner": "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021"
      },
      "implementationNames": {
        "eth:0xf65614d73952Be91ce0aE7Dd9cFf25Ba15bEE2f5": "TiebreakerCoreCommittee"
      }
    },
    {
      "name": "TokenManager",
      "address": "eth:0xf73a1260d222f447210581DDf212D915c09a3249",
      "type": "Contract",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0x07aae7f3026cf9986df7e9587978c4a61f37310b62ac418c63e182d2fdb51fef"
      ],
      "proxyType": "EIP897 proxy",
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xde3A93028F2283cc28756B3674BD657eaFB992f4",
        "appId": "0xcd567bdf93dd0f6acc3bc7f2155f83244d56a65abbfbefb763e015420102c67b",
        "ASSIGN_ROLE": "0xf5a08927c847d7a29dc35e105208dbde5ce951392105d712761cc5d17440e2ff",
        "BURN_ROLE": "0xe97b137254058bd94f28d2f3eb79e2d34074ffb488d042e3bc958e0a57d2fa22",
        "getEVMScriptRegistry": "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getRecoveryVault": "eth:0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "eth:0xde3A93028F2283cc28756B3674BD657eaFB992f4",
        "isDepositable": false,
        "isForwarder": true,
        "isPetrified": false,
        "ISSUE_ROLE": "0x2406f1e99f79cea012fb88c5c36566feaeefee0f4b98d3a376b49310222b53c4",
        "kernel": "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "MAX_VESTINGS_PER_ADDRESS": 50,
        "maxAccountTokens": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "MINT_ROLE": "0x154c00819833dac601ee5ddded6fda79d9d8b506b911b3dbd54cdb95fe6c3686",
        "proxyType": 2,
        "REVOKE_VESTINGS_ROLE": "0x95ffc68daedf1eb334cfcd22ee24a5eeb5a8e58aa40679f2ad247a84140f8d6e",
        "token": "eth:0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32"
      },
      "implementationNames": {
        "eth:0xf73a1260d222f447210581DDf212D915c09a3249": "AppProxyUpgradeable",
        "eth:0xde3A93028F2283cc28756B3674BD657eaFB992f4": "TokenManager"
      }
    },
    {
      "address": "eth:0xf82D88217C249297C6037BA77CE34b3d8a90ab43",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Safe",
      "address": "eth:0xf8Bfa395744Cb25fa4368Ffe2344Dc35546092d9",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747590179,
      "sinceBlock": 22511432,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": ["eth:0xddD80BC94975C10A2f613511F80bd860FcB76818"],
        "$threshold": 1,
        "domainSeparator": "0x246976a3858717ca5c66deb29457fb477890c17fbfc7bef4b173b64b71cee2d8",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "1 of 1 (100%)",
        "nonce": 1,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0xf8Bfa395744Cb25fa4368Ffe2344Dc35546092d9": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "address": "eth:0xfAd931F268dc5f8E5cdc3000baAaC0cbdb4E0a9C",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xFCD02C040ceA45DC6CEC3E24F1D3946FCE7077b0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xfcfbafa0d5f5512C65DbB4C073fE4Ee6Dc3c4779",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "StakingRouter",
      "address": "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
      "type": "Contract",
      "template": "tokens/Lido/StakingRouter",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0xfff62cfc156b3379b99f876fed184d721dcaa8f2c185eb5267d7f0609085e688"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": [
        "getAllStakingModuleDigests",
        "getStakingFeeAggregateDistribution",
        "getStakingModuleActiveValidatorsCount",
        "getStakingModuleLastDepositBlock",
        "getStakingModuleNonce",
        "getStakingModules",
        "getStakingRewardsDistribution"
      ],
      "sinceTimestamp": 1683023963,
      "sinceBlock": 17172550,
      "values": {
        "$admin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "eth:0x226f9265CBC37231882b7409658C18bB7738173A",
        "$pastUpgrades": [
          [
            "2023-05-02T10:39:23.000Z",
            "0xb8620f04a8db6bb52cfd0978c6677a5f16011e03d4622e5d660ea6ba34c2b122",
            ["eth:0x6F6541C2203196fEeDd14CD2C09550dA1CbEDa31"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["eth:0xD8784e748f59Ba711fB5643191Ec3fAdD50Fb6df"]
          ],
          [
            "2024-10-25T16:03:23.000Z",
            "0x0078b3e0cecb3b50c78a22e0b1a985e6cde3bf431e9cb3b2ba4e50260122d542",
            ["eth:0x89eDa99C0551d4320b56F82DDE8dF2f8D2eF81aA"]
          ],
          [
            "2025-10-02T15:52:47.000Z",
            "0xfff774d519ec1afd4358d4858672578437e815dc1652245a2ffb7bde1bfff2ad",
            ["eth:0x226f9265CBC37231882b7409658C18bB7738173A"]
          ]
        ],
        "$upgradeCount": 4,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "0x00b1e70095ba5bacc3202c3db9faf1f7873186f0ed7b6c84e80c0018dcc6e38e": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "0x9a2f67efb89489040f2c48c3b2c38f719fba1276678d2ced3bd9049fb5edc6b2": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "REPORT_EXITED_VALIDATORS_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x852deD011285fe67063a08005c71a85690503Cee"]
          },
          "REPORT_REWARDS_MINTED_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84"]
          },
          "STAKING_MODULE_MANAGE_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"]
          },
          "STAKING_MODULE_UNVETTING_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD"]
          },
          "REPORT_VALIDATOR_EXITING_STATUS_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xbDb567672c867DB533119C2dcD4FB9d8b44EC82f"]
          },
          "REPORT_VALIDATOR_EXIT_TRIGGERED_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xDC00116a0D3E064427dA2600449cfD2566B3037B"]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DEPOSIT_CONTRACT": "eth:0x00000000219ab540356cBB839Cbe05303d7705Fa",
        "FEE_PRECISION_POINTS": "100000000000000000000",
        "formattedWithdrawalCredential": "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f",
        "getAllStakingModuleDigests": [
          {
            "nodeOperatorsCount": 39,
            "activeNodeOperatorsCount": 37,
            "state": {
              "id": 1,
              "stakingModuleAddress": "eth:0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5",
              "stakingModuleFee": 500,
              "treasuryFee": 500,
              "stakeShareLimit": 10000,
              "status": 0,
              "name": "curated-onchain-v1",
              "lastDepositAt": 1761278159,
              "lastDepositBlock": 23644785,
              "exitedValidatorsCount": 137891,
              "priorityExitShareThreshold": 10000,
              "maxDepositsPerBlock": 150,
              "minDepositBlockDistance": 25
            },
            "summary": {
              "totalExitedValidators": 137891,
              "totalDepositedValidators": 384744,
              "depositableValidatorsCount": 45260
            }
          },
          {
            "nodeOperatorsCount": 82,
            "activeNodeOperatorsCount": 82,
            "state": {
              "id": 2,
              "stakingModuleAddress": "eth:0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
              "stakingModuleFee": 800,
              "treasuryFee": 200,
              "stakeShareLimit": 400,
              "status": 0,
              "name": "SimpleDVT",
              "lastDepositAt": 1761270719,
              "lastDepositBlock": 23644174,
              "exitedValidatorsCount": 759,
              "priorityExitShareThreshold": 444,
              "maxDepositsPerBlock": 150,
              "minDepositBlockDistance": 25
            },
            "summary": {
              "totalExitedValidators": 759,
              "totalDepositedValidators": 11279,
              "depositableValidatorsCount": 0
            }
          },
          {
            "nodeOperatorsCount": 489,
            "activeNodeOperatorsCount": 489,
            "state": {
              "id": 3,
              "stakingModuleAddress": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
              "stakingModuleFee": 600,
              "treasuryFee": 400,
              "stakeShareLimit": 500,
              "status": 0,
              "name": "Community Staking",
              "lastDepositAt": 1761567827,
              "lastDepositBlock": 23668757,
              "exitedValidatorsCount": 406,
              "priorityExitShareThreshold": 625,
              "maxDepositsPerBlock": 30,
              "minDepositBlockDistance": 25
            },
            "summary": {
              "totalExitedValidators": 406,
              "totalDepositedValidators": 11256,
              "depositableValidatorsCount": 642
            }
          }
        ],
        "getContractVersion": 3,
        "getLido": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "getStakingFeeAggregateDistribution": {
          "modulesFee": "5158114703064241320",
          "treasuryFee": "4841885296935758676",
          "basePrecision": "100000000000000000000"
        },
        "getStakingModuleActiveValidatorsCount": [246853, 10520, 10850],
        "getStakingModuleIds": [1, 2, 3],
        "getStakingModuleIsActive": [true, true, true],
        "getStakingModuleIsDepositsPaused": [false, false, false],
        "getStakingModuleIsStopped": [false, false, false],
        "getStakingModuleLastDepositBlock": [23644785, 23644174, 23668757],
        "getStakingModuleMaxDepositsPerBlock": [150, 150, 30],
        "getStakingModuleMinDepositBlockDistance": [25, 25, 25],
        "getStakingModuleNonce": [16382, 1033, 1838],
        "getStakingModules": [
          {
            "id": 1,
            "stakingModuleAddress": "eth:0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5",
            "stakingModuleFee": 500,
            "treasuryFee": 500,
            "stakeShareLimit": 10000,
            "status": 0,
            "name": "curated-onchain-v1",
            "lastDepositAt": 1761278159,
            "lastDepositBlock": 23644785,
            "exitedValidatorsCount": 137891,
            "priorityExitShareThreshold": 10000,
            "maxDepositsPerBlock": 150,
            "minDepositBlockDistance": 25
          },
          {
            "id": 2,
            "stakingModuleAddress": "eth:0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
            "stakingModuleFee": 800,
            "treasuryFee": 200,
            "stakeShareLimit": 400,
            "status": 0,
            "name": "SimpleDVT",
            "lastDepositAt": 1761270719,
            "lastDepositBlock": 23644174,
            "exitedValidatorsCount": 759,
            "priorityExitShareThreshold": 444,
            "maxDepositsPerBlock": 150,
            "minDepositBlockDistance": 25
          },
          {
            "id": 3,
            "stakingModuleAddress": "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
            "stakingModuleFee": 600,
            "treasuryFee": 400,
            "stakeShareLimit": 500,
            "status": 0,
            "name": "Community Staking",
            "lastDepositAt": 1761567827,
            "lastDepositBlock": 23668757,
            "exitedValidatorsCount": 406,
            "priorityExitShareThreshold": 625,
            "maxDepositsPerBlock": 30,
            "minDepositBlockDistance": 25
          }
        ],
        "getStakingModulesCount": 3,
        "getStakingModuleStatus": [0, 0, 0],
        "getStakingRewardsDistribution": {
          "recipients": [
            "eth:0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5",
            "eth:0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
            "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F"
          ],
          "stakingModuleIds": [1, 2, 3],
          "stakingModuleFees": [
            "4601637443470545031",
            "313768767033401311",
            "242708492560294978"
          ],
          "totalFee": "9999999999999999996",
          "precisionPoints": "100000000000000000000"
        },
        "getTotalFeeE4Precision": 999,
        "getWithdrawalCredentials": "0x010000000000000000000000b9d7934878b5fb9610b3fe8a5e441e8fad7e293f",
        "MANAGE_WITHDRAWAL_CREDENTIALS_ROLE": "0xe7c742a54cd11fc9749a47ab34bdcd7327820908e8d0d48b4a5c7f17b0294098",
        "MAX_STAKING_MODULE_NAME_LENGTH": 31,
        "MAX_STAKING_MODULES_COUNT": 32,
        "proxy__getAdmin": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "eth:0x226f9265CBC37231882b7409658C18bB7738173A",
        "proxy__getIsOssified": false,
        "REPORT_EXITED_VALIDATORS_ROLE": "0xc23292b191d95d2a7dd94fc6436eb44338fda9e1307d9394fd27c28157c1b33c",
        "REPORT_REWARDS_MINTED_ROLE": "0x779e5c23cb7a5bcb9bfe1e9a5165a00057f12bcdfd13e374540fdf1a1cd91137",
        "REPORT_VALIDATOR_EXIT_TRIGGERED_ROLE": "0x0766e72e5c008b3df8129fb356d9176eef8544f6241e078b7d61aff604f8812b",
        "REPORT_VALIDATOR_EXITING_STATUS_ROLE": "0xbe1bd143a0dde8a867d58aab054bfdb25250951665c4570e39abc3b3de3c2d6c",
        "STAKING_MODULE_MANAGE_ROLE": "0x3105bcbf19d4417b73ae0e58d508a65ecf75665e46c2622d8521732de6080c48",
        "STAKING_MODULE_UNVETTING_ROLE": "0x240525496a9dc32284b17ce03b43e539e4bd81414634ee54395030d793463b57",
        "TOTAL_BASIS_POINTS": 10000,
        "UNSAFE_SET_EXITED_VALIDATORS_ROLE": "0x55180e25fcacf9af017d35d497765476319b23896daa1f9bc2b38fa80b36a163"
      },
      "implementationNames": {
        "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999": "OssifiableProxy",
        "eth:0x226f9265CBC37231882b7409658C18bB7738173A": "StakingRouter"
      }
    },
    {
      "address": "eth:0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "EVMScriptExecutor",
      "address": "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977",
      "type": "Contract",
      "sourceHashes": [
        "0xedf0a4eca5504314e2492fa8b003d4646b794d7d99eae801e3c478b713c1a609"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1637750159,
      "sinceBlock": 13676731,
      "values": {
        "$immutable": true,
        "callsScript": "eth:0x5cEb19e1890f677c3676d5ecDF7c501eBA01A054",
        "easyTrack": "eth:0xF0211b7660680B49De1A7E9f25C65660F0a13Fea",
        "owner": "eth:0x2e59A20f205bB85a89C53f1936454680651E618e"
      },
      "implementationNames": {
        "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977": "EVMScriptExecutor"
      }
    },
    {
      "name": "DepositSecurityModule",
      "address": "eth:0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD",
      "type": "Contract",
      "template": "tokens/Lido/DepositSecurityModule",
      "sourceHashes": [
        "0xec602317aa2fc4de0a89b5c910911635f678fb88b51a6a46f12d8b1148d95d71"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1728395471,
      "sinceBlock": 20921272,
      "values": {
        "$immutable": true,
        "ATTEST_MESSAGE_PREFIX": "0x420b649044eb23ce1540808ba8ed5d375094551acd77ba36b6ba87b78b7b655b",
        "DEPOSIT_CONTRACT": "eth:0x00000000219ab540356cBB839Cbe05303d7705Fa",
        "getGuardianQuorum": 4,
        "getGuardians": [
          "eth:0x5fd0dDbC3351d009eb3f88DE7Cd081a614C519F1",
          "eth:0x7912Fa976BcDe9c2cf728e213e892AD7588E6AaF",
          "eth:0xd4EF84b638B334699bcf5AF4B0410B8CCD71943f",
          "eth:0xf82D88217C249297C6037BA77CE34b3d8a90ab43",
          "eth:0xa56b128Ea2Ea237052b0fA2a96a387C0E43157d8",
          "eth:0x6d22aE126eB2c37F67a1391B37FF4f2863e61389"
        ],
        "getMaxOperatorsPerUnvetting": 200,
        "getOwner": "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "getPauseIntentValidityPeriodBlocks": 6646,
        "isDepositsPaused": false,
        "LIDO": "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "PAUSE_MESSAGE_PREFIX": "0x6b3c04956358bd57f0df35a391531933a5f35bbeb297822abaa44d6b55b38d35",
        "STAKING_ROUTER": "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
        "UNVET_MESSAGE_PREFIX": "0x7f941492e2f49621da669504b9b681d897c2d2917c1edc4009f4121a0a25ed9c",
        "VERSION": 3
      },
      "implementationNames": {
        "eth:0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD": "DepositSecurityModule"
      }
    },
    {
      "name": "Safe",
      "address": "eth:0xFFe21561251c49AdccFad065C94Fb4931dF49081",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747390199,
      "sinceBlock": 22494950,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x5a409567bCa7459b3aC7e6E5a3F1a3C278071b71",
          "eth:0xA39a62304d8d43B35114ad7bd1258B0E50e139b3",
          "eth:0xFe45baf0F18c207152A807c1b05926583CFE2e4b",
          "eth:0x59F8D74Fe49d5ebEAc069E3baf07eB4b614BD5A7",
          "eth:0x912e21CdA3D7012146da4Df33309d860a9eb0bEb",
          "eth:0x9A3f38AF97b791C85c043D46a64f56f87E0283D4"
        ],
        "$threshold": 5,
        "domainSeparator": "0xa8c13cba5089ae8e21765ed822034863c8d92e6009dd08d4432f81cbccddb01a",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "5 of 6 (83%)",
        "nonce": 0,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0xFFe21561251c49AdccFad065C94Fb4931dF49081": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "address": "eth:0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF",
      "type": "EOA",
      "proxyType": "EOA"
    }
  ],
  "abis": {
    "eth:0x00000000219ab540356cBB839Cbe05303d7705Fa": [
      "constructor()",
      "event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index)",
      "function deposit(bytes pubkey, bytes withdrawal_credentials, bytes signature, bytes32 deposit_data_root) payable",
      "function get_deposit_count() view returns (bytes)",
      "function get_deposit_root() view returns (bytes32)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)"
    ],
    "eth:0x06cd61045f958A209a0f8D746e103eCc625f4193": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_)"
    ],
    "eth:0x08637515E85A4633E23dfc7861e2A9f53af640f7": [
      "constructor(address _singleton)"
    ],
    "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "eth:0x165813A31446a98c84E20Dda8C101BB3C8228e1c": [
      "constructor(address stETH, address wstETH, address withdrawalQueue, address dualGovernance, uint256 minWithdrawalsBatchSize, uint32 maxMinAssetsLockDuration)",
      "error AddressInsufficientBalance(address account)",
      "error BatchesQueueIsNotClosed()",
      "error CallerIsNotDualGovernance(address caller)",
      "error ClaimingIsFinished()",
      "error DivisionByZero()",
      "error DurationOverflow()",
      "error ETHValueOverflow()",
      "error ETHValueUnderflow()",
      "error EmptyBatch()",
      "error EmptyUnstETHIds()",
      "error EthWithdrawalsDelayNotPassed()",
      "error FailedInnerCall()",
      "error IndexOneBasedOverflow()",
      "error IndexOneBasedUnderflow()",
      "error InvalidBatchSize(uint256 size)",
      "error InvalidClaimableAmount(uint256 unstETHId, uint128 claimableAmount)",
      "error InvalidETHSender(address actual, address expected)",
      "error InvalidFromUnstETHId(uint256 unstETHId)",
      "error InvalidHintsLength(uint256 actual, uint256 expected)",
      "error InvalidMinAssetsLockDuration(uint32 newMinAssetsLockDuration)",
      "error InvalidSharesValue(uint128 value)",
      "error InvalidUnstETHHolder(uint256 unstETHId, address holder)",
      "error InvalidUnstETHIdsSequence()",
      "error InvalidUnstETHStatus(uint256 unstETHId, uint8 status)",
      "error MinAssetsLockDurationNotPassed(uint40 lockDurationExpiresAt)",
      "error NonProxyCallsForbidden()",
      "error PercentD16Overflow()",
      "error RageQuitExtensionPeriodAlreadyStarted()",
      "error RageQuitExtensionPeriodNotStarted()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SharesValueOverflow()",
      "error SharesValueUnderflow()",
      "error TimestampOverflow()",
      "error UnclaimedBatches()",
      "error UnexpectedEscrowState(uint8 state)",
      "error UnexpectedWithdrawalsBatchesQueueState(uint8 state)",
      "error UnfinalizedUnstETHIds()",
      "event ETHClaimed(uint128 amount)",
      "event ETHWithdrawn(address indexed holder, uint128 shares, uint128 value)",
      "event EscrowStateChanged(uint8 indexed from, uint8 indexed to)",
      "event MinAssetsLockDurationSet(uint32 newAssetsLockDuration)",
      "event RageQuitExtensionPeriodStarted(uint40 startedAt)",
      "event RageQuitStarted(uint32 rageQuitExtensionPeriodDuration, uint32 rageQuitEthWithdrawalsDelay)",
      "event StETHSharesLocked(address indexed holder, uint128 shares)",
      "event StETHSharesUnlocked(address indexed holder, uint128 shares)",
      "event UnstETHClaimed(uint256[] unstETHIds, uint128 totalAmountClaimed)",
      "event UnstETHFinalized(uint256[] ids, uint128[] finalizedShares, uint128[] finalizedAmount)",
      "event UnstETHIdsAdded(uint256[] unstETHIds)",
      "event UnstETHIdsClaimed(uint256[] unstETHIds)",
      "event UnstETHLocked(address indexed holder, uint256[] ids, uint128 shares)",
      "event UnstETHUnlocked(address indexed holder, uint256[] ids, uint128 finalizedSharesIncrement, uint128 finalizedAmountIncrement)",
      "event UnstETHWithdrawn(uint256[] unstETHIds, uint128 amountWithdrawn)",
      "event WithdrawalsBatchesQueueClosed()",
      "event WithdrawalsBatchesQueueOpened(uint256 boundaryUnstETHId)",
      "function DUAL_GOVERNANCE() view returns (address)",
      "function ESCROW_MASTER_COPY() view returns (address)",
      "function MAX_MIN_ASSETS_LOCK_DURATION() view returns (uint32)",
      "function MIN_TRANSFERRABLE_ST_ETH_AMOUNT() view returns (uint256)",
      "function MIN_WITHDRAWALS_BATCH_SIZE() view returns (uint256)",
      "function ST_ETH() view returns (address)",
      "function WITHDRAWAL_QUEUE() view returns (address)",
      "function WST_ETH() view returns (address)",
      "function claimNextWithdrawalsBatch(uint256 fromUnstETHId, uint256[] hints)",
      "function claimNextWithdrawalsBatch(uint256 maxUnstETHIdsCount)",
      "function claimUnstETH(uint256[] unstETHIds, uint256[] hints)",
      "function getEscrowState() view returns (uint8)",
      "function getLockedUnstETHDetails(uint256[] unstETHIds) view returns (tuple(uint256 id, uint8 status, address lockedBy, uint128 shares, uint128 claimableAmount)[] unstETHDetails)",
      "function getMinAssetsLockDuration() view returns (uint32 minAssetsLockDuration)",
      "function getNextWithdrawalBatch(uint256 limit) view returns (uint256[] unstETHIds)",
      "function getRageQuitEscrowDetails() view returns (tuple(uint32 rageQuitEthWithdrawalsDelay, uint32 rageQuitExtensionPeriodDuration, uint40 rageQuitExtensionPeriodStartedAt, bool isRageQuitExtensionPeriodStarted) details)",
      "function getRageQuitSupport() view returns (uint128)",
      "function getSignallingEscrowDetails() view returns (tuple(uint128 totalStETHLockedShares, uint128 totalStETHClaimedETH, uint128 totalUnstETHUnfinalizedShares, uint128 totalUnstETHFinalizedETH) details)",
      "function getUnclaimedUnstETHIdsCount() view returns (uint256)",
      "function getVetoerDetails(address vetoer) view returns (tuple(uint256 unstETHIdsCount, uint128 stETHLockedShares, uint128 unstETHLockedShares, uint40 lastAssetsLockTimestamp) details)",
      "function getVetoerUnstETHIds(address vetoer) view returns (uint256[] unstETHIds)",
      "function initialize(uint32 minAssetsLockDuration)",
      "function isRageQuitFinalized() view returns (bool)",
      "function isWithdrawalsBatchesClosed() view returns (bool)",
      "function lockStETH(uint256 amount) returns (uint256 lockedStETHShares)",
      "function lockUnstETH(uint256[] unstETHIds)",
      "function lockWstETH(uint256 amount) returns (uint256 lockedStETHShares)",
      "function markUnstETHFinalized(uint256[] unstETHIds, uint256[] hints)",
      "function requestNextWithdrawalsBatch(uint256 batchSize)",
      "function setMinAssetsLockDuration(uint32 newMinAssetsLockDuration)",
      "function startRageQuit(uint32 rageQuitExtensionPeriodDuration, uint32 rageQuitEthWithdrawalsDelay)",
      "function startRageQuitExtensionPeriod()",
      "function unlockStETH() returns (uint256 unlockedStETHShares)",
      "function unlockUnstETH(uint256[] unstETHIds)",
      "function unlockWstETH() returns (uint256 wstETHUnlocked)",
      "function withdrawETH(uint256[] unstETHIds)",
      "function withdrawETH()"
    ],
    "eth:0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb": [
      "function resume()",
      "function name() pure returns (string)",
      "function stop()",
      "function hasInitialized() view returns (bool)",
      "function approve(address _spender, uint256 _amount) returns (bool)",
      "function STAKING_CONTROL_ROLE() view returns (bytes32)",
      "function totalSupply() view returns (uint256)",
      "function getSharesByPooledEth(uint256 _ethAmount) view returns (uint256)",
      "function isStakingPaused() view returns (bool)",
      "function transferFrom(address _sender, address _recipient, uint256 _amount) returns (bool)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function setStakingLimit(uint256 _maxStakeLimit, uint256 _stakeLimitIncreasePerBlock)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function finalizeUpgrade_v2(address _lidoLocator, address _eip712StETH)",
      "function decimals() pure returns (uint8)",
      "function getRecoveryVault() view returns (address)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function getTotalPooledEther() view returns (uint256)",
      "function unsafeChangeDepositedValidators(uint256 _newDepositedValidators)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function increaseAllowance(address _spender, uint256 _addedValue) returns (bool)",
      "function getTreasury() view returns (address)",
      "function isStopped() view returns (bool)",
      "function getBufferedEther() view returns (uint256)",
      "function initialize(address _lidoLocator, address _eip712StETH) payable",
      "function receiveELRewards() payable",
      "function getWithdrawalCredentials() view returns (bytes32)",
      "function getCurrentStakeLimit() view returns (uint256)",
      "function getStakeLimitFullInfo() view returns (bool isStakingPaused, bool isStakingLimitSet, uint256 currentStakeLimit, uint256 maxStakeLimit, uint256 maxStakeLimitGrowthBlocks, uint256 prevStakeLimit, uint256 prevStakeBlockNumber)",
      "function transferSharesFrom(address _sender, address _recipient, uint256 _sharesAmount) returns (uint256)",
      "function balanceOf(address _account) view returns (uint256)",
      "function resumeStaking()",
      "function getFeeDistribution() view returns (uint16 treasuryFeeBasisPoints, uint16 insuranceFeeBasisPoints, uint16 operatorsFeeBasisPoints)",
      "function receiveWithdrawals() payable",
      "function getPooledEthByShares(uint256 _sharesAmount) view returns (uint256)",
      "function allowRecoverability(address token) view returns (bool)",
      "function nonces(address owner) view returns (uint256)",
      "function appId() view returns (bytes32)",
      "function getOracle() view returns (address)",
      "function eip712Domain() view returns (string name, string version, uint256 chainId, address verifyingContract)",
      "function getContractVersion() view returns (uint256)",
      "function getInitializationBlock() view returns (uint256)",
      "function transferShares(address _recipient, uint256 _sharesAmount) returns (uint256)",
      "function symbol() pure returns (string)",
      "function getEIP712StETH() view returns (address)",
      "function transferToVault(address)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function submit(address _referral) payable returns (uint256)",
      "function decreaseAllowance(address _spender, uint256 _subtractedValue) returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function transfer(address _recipient, uint256 _amount) returns (bool)",
      "function deposit(uint256 _maxDepositsCount, uint256 _stakingModuleId, bytes _depositCalldata)",
      "function UNSAFE_CHANGE_DEPOSITED_VALIDATORS_ROLE() view returns (bytes32)",
      "function getBeaconStat() view returns (uint256 depositedValidators, uint256 beaconValidators, uint256 beaconBalance)",
      "function removeStakingLimit()",
      "function handleOracleReport(uint256 _reportTimestamp, uint256 _timeElapsed, uint256 _clValidators, uint256 _clBalance, uint256 _withdrawalVaultBalance, uint256 _elRewardsVaultBalance, uint256 _sharesRequestedToBurn, uint256[] _withdrawalFinalizationBatches, uint256 _simulatedShareRate) returns (uint256[4] postRebaseAmounts)",
      "function getFee() view returns (uint16 totalFee)",
      "function kernel() view returns (address)",
      "function getTotalShares() view returns (uint256)",
      "function permit(address _owner, address _spender, uint256 _value, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s)",
      "function allowance(address _owner, address _spender) view returns (uint256)",
      "function isPetrified() view returns (bool)",
      "function getLidoLocator() view returns (address)",
      "function canDeposit() view returns (bool)",
      "function STAKING_PAUSE_ROLE() view returns (bytes32)",
      "function getDepositableEther() view returns (uint256)",
      "function sharesOf(address _account) view returns (uint256)",
      "function pauseStaking()",
      "function getTotalELRewardsCollected() view returns (uint256)",
      "event StakingPaused()",
      "event StakingResumed()",
      "event StakingLimitSet(uint256 maxStakeLimit, uint256 stakeLimitIncreasePerBlock)",
      "event StakingLimitRemoved()",
      "event CLValidatorsUpdated(uint256 indexed reportTimestamp, uint256 preCLValidators, uint256 postCLValidators)",
      "event DepositedValidatorsChanged(uint256 depositedValidators)",
      "event ETHDistributed(uint256 indexed reportTimestamp, uint256 preCLBalance, uint256 postCLBalance, uint256 withdrawalsWithdrawn, uint256 executionLayerRewardsWithdrawn, uint256 postBufferedEther)",
      "event TokenRebased(uint256 indexed reportTimestamp, uint256 timeElapsed, uint256 preTotalShares, uint256 preTotalEther, uint256 postTotalShares, uint256 postTotalEther, uint256 sharesMintedAsFees)",
      "event LidoLocatorSet(address lidoLocator)",
      "event ELRewardsReceived(uint256 amount)",
      "event WithdrawalsReceived(uint256 amount)",
      "event Submitted(address indexed sender, uint256 amount, address referral)",
      "event Unbuffered(uint256 amount)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)",
      "event EIP712StETHInitialized(address eip712StETH)",
      "event TransferShares(address indexed from, address indexed to, uint256 sharesValue)",
      "event SharesBurnt(address indexed account, uint256 preRebaseTokenAmount, uint256 postRebaseTokenAmount, uint256 sharesAmount)",
      "event Stopped()",
      "event Resumed()",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event ContractVersionSet(uint256 version)"
    ],
    "eth:0x1eB6d4da13ca9566c17F526aE0715325d7a07665": [
      "constructor(bytes32 moduleType, address lidoLocator, address parametersRegistry, address _accounting, address exitPenalties)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AlreadyProposed()",
      "error CannotAddKeys()",
      "error EmptyKey()",
      "error ExitedKeysDecrease()",
      "error ExitedKeysHigherThanTotalDeposited()",
      "error FailedToSendEther()",
      "error InvalidAmount()",
      "error InvalidInitialization()",
      "error InvalidInput()",
      "error InvalidKeysCount()",
      "error InvalidLength()",
      "error InvalidReportData()",
      "error InvalidVetKeysPointer()",
      "error KeysLimitExceeded()",
      "error MethodCallIsNotAllowed()",
      "error NoQueuedKeysToMigrate()",
      "error NodeOperatorDoesNotExist()",
      "error NotAllowedToRecover()",
      "error NotEligibleForPriorityQueue()",
      "error NotEnoughKeys()",
      "error NotInitializing()",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error PriorityQueueAlreadyUsed()",
      "error PriorityQueueMaxDepositsUsed()",
      "error QueueIsEmpty()",
      "error QueueLookupNoLimit()",
      "error ResumedExpected()",
      "error SameAddress()",
      "error SenderIsNotEligible()",
      "error SenderIsNotManagerAddress()",
      "error SenderIsNotProposedAddress()",
      "error SenderIsNotRewardAddress()",
      "error SigningKeysInvalidOffset()",
      "error ZeroAccountingAddress()",
      "error ZeroAdminAddress()",
      "error ZeroExitPenaltiesAddress()",
      "error ZeroLocatorAddress()",
      "error ZeroParametersRegistryAddress()",
      "error ZeroPauseDuration()",
      "error ZeroRewardAddress()",
      "error ZeroSenderAddress()",
      "event BatchEnqueued(uint256 indexed queuePriority, uint256 indexed nodeOperatorId, uint256 count)",
      "event DepositableSigningKeysCountChanged(uint256 indexed nodeOperatorId, uint256 depositableKeysCount)",
      "event DepositedSigningKeysCountChanged(uint256 indexed nodeOperatorId, uint256 depositedKeysCount)",
      "event ELRewardsStealingPenaltyCancelled(uint256 indexed nodeOperatorId, uint256 amount)",
      "event ELRewardsStealingPenaltyCompensated(uint256 indexed nodeOperatorId, uint256 amount)",
      "event ELRewardsStealingPenaltyReported(uint256 indexed nodeOperatorId, bytes32 proposedBlockHash, uint256 stolenAmount)",
      "event ELRewardsStealingPenaltySettled(uint256 indexed nodeOperatorId)",
      "event ERC1155Recovered(address indexed token, uint256 tokenId, address indexed recipient, uint256 amount)",
      "event ERC20Recovered(address indexed token, address indexed recipient, uint256 amount)",
      "event ERC721Recovered(address indexed token, uint256 tokenId, address indexed recipient)",
      "event EtherRecovered(address indexed recipient, uint256 amount)",
      "event ExitedSigningKeysCountChanged(uint256 indexed nodeOperatorId, uint256 exitedKeysCount)",
      "event Initialized(uint64 version)",
      "event KeyRemovalChargeApplied(uint256 indexed nodeOperatorId)",
      "event NodeOperatorAdded(uint256 indexed nodeOperatorId, address indexed managerAddress, address indexed rewardAddress, bool extendedManagerPermissions)",
      "event NodeOperatorManagerAddressChangeProposed(uint256 indexed nodeOperatorId, address indexed oldProposedAddress, address indexed newProposedAddress)",
      "event NodeOperatorManagerAddressChanged(uint256 indexed nodeOperatorId, address indexed oldAddress, address indexed newAddress)",
      "event NodeOperatorRewardAddressChangeProposed(uint256 indexed nodeOperatorId, address indexed oldProposedAddress, address indexed newProposedAddress)",
      "event NodeOperatorRewardAddressChanged(uint256 indexed nodeOperatorId, address indexed oldAddress, address indexed newAddress)",
      "event NonceChanged(uint256 nonce)",
      "event Paused(uint256 duration)",
      "event ReferrerSet(uint256 indexed nodeOperatorId, address indexed referrer)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SigningKeyAdded(uint256 indexed nodeOperatorId, bytes pubkey)",
      "event SigningKeyRemoved(uint256 indexed nodeOperatorId, bytes pubkey)",
      "event StETHSharesRecovered(address indexed recipient, uint256 shares)",
      "event TargetValidatorsCountChanged(uint256 indexed nodeOperatorId, uint256 targetLimitMode, uint256 targetValidatorsCount)",
      "event TotalSigningKeysCountChanged(uint256 indexed nodeOperatorId, uint256 totalKeysCount)",
      "event VettedSigningKeysCountChanged(uint256 indexed nodeOperatorId, uint256 vettedKeysCount)",
      "event VettedSigningKeysCountDecreased(uint256 indexed nodeOperatorId)",
      "event WithdrawalSubmitted(uint256 indexed nodeOperatorId, uint256 keyIndex, uint256 amount, bytes pubkey)",
      "function ACCOUNTING() view returns (address)",
      "function CREATE_NODE_OPERATOR_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DEPOSIT_SIZE() view returns (uint256)",
      "function EXIT_PENALTIES() view returns (address)",
      "function FEE_DISTRIBUTOR() view returns (address)",
      "function LIDO_LOCATOR() view returns (address)",
      "function PARAMETERS_REGISTRY() view returns (address)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function QUEUE_LEGACY_PRIORITY() view returns (uint256)",
      "function QUEUE_LOWEST_PRIORITY() view returns (uint256)",
      "function RECOVERER_ROLE() view returns (bytes32)",
      "function REPORT_EL_REWARDS_STEALING_PENALTY_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function SETTLE_EL_REWARDS_STEALING_PENALTY_ROLE() view returns (bytes32)",
      "function STAKING_ROUTER_ROLE() view returns (bytes32)",
      "function STETH() view returns (address)",
      "function VERIFIER_ROLE() view returns (bytes32)",
      "function accounting() view returns (address)",
      "function addValidatorKeysETH(address from, uint256 nodeOperatorId, uint256 keysCount, bytes publicKeys, bytes signatures) payable",
      "function addValidatorKeysStETH(address from, uint256 nodeOperatorId, uint256 keysCount, bytes publicKeys, bytes signatures, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit)",
      "function addValidatorKeysWstETH(address from, uint256 nodeOperatorId, uint256 keysCount, bytes publicKeys, bytes signatures, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit)",
      "function cancelELRewardsStealingPenalty(uint256 nodeOperatorId, uint256 amount)",
      "function changeNodeOperatorRewardAddress(uint256 nodeOperatorId, address newAddress)",
      "function cleanDepositQueue(uint256 maxItems) returns (uint256 removed, uint256 lastRemovedAtDepth)",
      "function compensateELRewardsStealingPenalty(uint256 nodeOperatorId) payable",
      "function confirmNodeOperatorManagerAddressChange(uint256 nodeOperatorId)",
      "function confirmNodeOperatorRewardAddressChange(uint256 nodeOperatorId)",
      "function createNodeOperator(address from, tuple(address managerAddress, address rewardAddress, bool extendedManagerPermissions) managementProperties, address referrer) returns (uint256 nodeOperatorId)",
      "function decreaseVettedSigningKeysCount(bytes nodeOperatorIds, bytes vettedSigningKeysCounts)",
      "function depositQueueItem(uint256 queuePriority, uint128 index) view returns (uint256)",
      "function depositQueuePointers(uint256 queuePriority) view returns (uint128 head, uint128 tail)",
      "function exitDeadlineThreshold(uint256 nodeOperatorId) view returns (uint256)",
      "function finalizeUpgradeV2()",
      "function getActiveNodeOperatorsCount() view returns (uint256)",
      "function getInitializedVersion() view returns (uint64)",
      "function getNodeOperator(uint256 nodeOperatorId) view returns (tuple(uint32 totalAddedKeys, uint32 totalWithdrawnKeys, uint32 totalDepositedKeys, uint32 totalVettedKeys, uint32 stuckValidatorsCount, uint32 depositableValidatorsCount, uint32 targetLimit, uint8 targetLimitMode, uint32 totalExitedKeys, uint32 enqueuedCount, address managerAddress, address proposedManagerAddress, address rewardAddress, address proposedRewardAddress, bool extendedManagerPermissions, bool usedPriorityQueue))",
      "function getNodeOperatorIds(uint256 offset, uint256 limit) view returns (uint256[] nodeOperatorIds)",
      "function getNodeOperatorIsActive(uint256 nodeOperatorId) view returns (bool)",
      "function getNodeOperatorManagementProperties(uint256 nodeOperatorId) view returns (tuple(address managerAddress, address rewardAddress, bool extendedManagerPermissions))",
      "function getNodeOperatorNonWithdrawnKeys(uint256 nodeOperatorId) view returns (uint256)",
      "function getNodeOperatorOwner(uint256 nodeOperatorId) view returns (address)",
      "function getNodeOperatorSummary(uint256 nodeOperatorId) view returns (uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount)",
      "function getNodeOperatorTotalDepositedKeys(uint256 nodeOperatorId) view returns (uint256 totalDepositedKeys)",
      "function getNodeOperatorsCount() view returns (uint256)",
      "function getNonce() view returns (uint256)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getSigningKeys(uint256 nodeOperatorId, uint256 startIndex, uint256 keysCount) view returns (bytes)",
      "function getSigningKeysWithSignatures(uint256 nodeOperatorId, uint256 startIndex, uint256 keysCount) view returns (bytes keys, bytes signatures)",
      "function getStakingModuleSummary() view returns (uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount)",
      "function getType() view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin)",
      "function isPaused() view returns (bool)",
      "function isValidatorExitDelayPenaltyApplicable(uint256 nodeOperatorId, uint256, bytes publicKey, uint256 eligibleToExitInSec) view returns (bool)",
      "function isValidatorWithdrawn(uint256 nodeOperatorId, uint256 keyIndex) view returns (bool)",
      "function migrateToPriorityQueue(uint256 nodeOperatorId)",
      "function obtainDepositData(uint256 depositsCount, bytes) returns (bytes publicKeys, bytes signatures)",
      "function onExitedAndStuckValidatorsCountsUpdated()",
      "function onRewardsMinted(uint256 totalShares)",
      "function onValidatorExitTriggered(uint256 nodeOperatorId, bytes publicKey, uint256 withdrawalRequestPaidFee, uint256 exitType)",
      "function onWithdrawalCredentialsChanged()",
      "function pauseFor(uint256 duration)",
      "function proposeNodeOperatorManagerAddressChange(uint256 nodeOperatorId, address proposedAddress)",
      "function proposeNodeOperatorRewardAddressChange(uint256 nodeOperatorId, address proposedAddress)",
      "function recoverERC1155(address token, uint256 tokenId)",
      "function recoverERC20(address token, uint256 amount)",
      "function recoverERC721(address token, uint256 tokenId)",
      "function recoverEther()",
      "function removeKeys(uint256 nodeOperatorId, uint256 startIndex, uint256 keysCount)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function reportELRewardsStealingPenalty(uint256 nodeOperatorId, bytes32 blockHash, uint256 amount)",
      "function reportValidatorExitDelay(uint256 nodeOperatorId, uint256, bytes publicKey, uint256 eligibleToExitInSec)",
      "function resetNodeOperatorManagerAddress(uint256 nodeOperatorId)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function settleELRewardsStealingPenalty(uint256[] nodeOperatorIds)",
      "function submitWithdrawals(tuple(uint256 nodeOperatorId, uint256 keyIndex, uint256 amount)[] withdrawalsInfo)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unsafeUpdateValidatorsCount(uint256 nodeOperatorId, uint256 exitedValidatorsKeysCount)",
      "function updateDepositableValidatorsCount(uint256 nodeOperatorId)",
      "function updateExitedValidatorsCount(bytes nodeOperatorIds, bytes exitedValidatorsCounts)",
      "function updateTargetValidatorsLimits(uint256 nodeOperatorId, uint256 targetLimitMode, uint256 targetLimit)"
    ],
    "eth:0x226f9265CBC37231882b7409658C18bB7738173A": [
      "constructor(address _depositContract)",
      "error AppAuthLidoFailed()",
      "error ArraysLengthMismatch(uint256 firstArrayLength, uint256 secondArrayLength)",
      "error DepositContractZeroAddress()",
      "error DirectETHTransfer()",
      "error EmptyWithdrawalsCredentials()",
      "error ExitedValidatorsCountCannotDecrease()",
      "error InvalidContractVersionIncrement()",
      "error InvalidDepositsValue(uint256 etherValue, uint256 depositsCount)",
      "error InvalidFeeSum()",
      "error InvalidMaxDepositPerBlockValue()",
      "error InvalidMinDepositBlockDistance()",
      "error InvalidPriorityExitShareThreshold()",
      "error InvalidPublicKeysBatchLength(uint256 actual, uint256 expected)",
      "error InvalidReportData(uint256 code)",
      "error InvalidSignaturesBatchLength(uint256 actual, uint256 expected)",
      "error InvalidStakeShareLimit()",
      "error NonZeroContractVersionOnInit()",
      "error ReportedExitedValidatorsExceedDeposited(uint256 reportedExitedValidatorsCount, uint256 depositedValidatorsCount)",
      "error StakingModuleAddressExists()",
      "error StakingModuleNotActive()",
      "error StakingModuleStatusTheSame()",
      "error StakingModuleUnregistered()",
      "error StakingModuleWrongName()",
      "error StakingModulesLimitExceeded()",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error UnexpectedCurrentValidatorsCount(uint256 currentModuleExitedValidatorsCount, uint256 currentNodeOpExitedValidatorsCount)",
      "error UnexpectedFinalExitedValidatorsCount(uint256 newModuleTotalExitedValidatorsCount, uint256 newModuleTotalExitedValidatorsCountInStakingRouter)",
      "error UnrecoverableModuleError()",
      "error ZeroAddressAdmin()",
      "error ZeroAddressLido()",
      "error ZeroAddressStakingModule()",
      "event ContractVersionSet(uint256 version)",
      "event ExitedAndStuckValidatorsCountsUpdateFailed(uint256 indexed stakingModuleId, bytes lowLevelRevertData)",
      "event RewardsMintedReportFailed(uint256 indexed stakingModuleId, bytes lowLevelRevertData)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StakingModuleAdded(uint256 indexed stakingModuleId, address stakingModule, string name, address createdBy)",
      "event StakingModuleExitNotificationFailed(uint256 indexed stakingModuleId, uint256 indexed nodeOperatorId, bytes _publicKey)",
      "event StakingModuleExitedValidatorsIncompleteReporting(uint256 indexed stakingModuleId, uint256 unreportedExitedValidatorsCount)",
      "event StakingModuleFeesSet(uint256 indexed stakingModuleId, uint256 stakingModuleFee, uint256 treasuryFee, address setBy)",
      "event StakingModuleMaxDepositsPerBlockSet(uint256 indexed stakingModuleId, uint256 maxDepositsPerBlock, address setBy)",
      "event StakingModuleMinDepositBlockDistanceSet(uint256 indexed stakingModuleId, uint256 minDepositBlockDistance, address setBy)",
      "event StakingModuleShareLimitSet(uint256 indexed stakingModuleId, uint256 stakeShareLimit, uint256 priorityExitShareThreshold, address setBy)",
      "event StakingModuleStatusSet(uint256 indexed stakingModuleId, uint8 status, address setBy)",
      "event StakingRouterETHDeposited(uint256 indexed stakingModuleId, uint256 amount)",
      "event WithdrawalCredentialsSet(bytes32 withdrawalCredentials, address setBy)",
      "event WithdrawalsCredentialsChangeFailed(uint256 indexed stakingModuleId, bytes lowLevelRevertData)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DEPOSIT_CONTRACT() view returns (address)",
      "function FEE_PRECISION_POINTS() view returns (uint256)",
      "function MANAGE_WITHDRAWAL_CREDENTIALS_ROLE() view returns (bytes32)",
      "function MAX_STAKING_MODULES_COUNT() view returns (uint256)",
      "function MAX_STAKING_MODULE_NAME_LENGTH() view returns (uint256)",
      "function REPORT_EXITED_VALIDATORS_ROLE() view returns (bytes32)",
      "function REPORT_REWARDS_MINTED_ROLE() view returns (bytes32)",
      "function REPORT_VALIDATOR_EXITING_STATUS_ROLE() view returns (bytes32)",
      "function REPORT_VALIDATOR_EXIT_TRIGGERED_ROLE() view returns (bytes32)",
      "function STAKING_MODULE_MANAGE_ROLE() view returns (bytes32)",
      "function STAKING_MODULE_UNVETTING_ROLE() view returns (bytes32)",
      "function TOTAL_BASIS_POINTS() view returns (uint256)",
      "function UNSAFE_SET_EXITED_VALIDATORS_ROLE() view returns (bytes32)",
      "function addStakingModule(string _name, address _stakingModuleAddress, uint256 _stakeShareLimit, uint256 _priorityExitShareThreshold, uint256 _stakingModuleFee, uint256 _treasuryFee, uint256 _maxDepositsPerBlock, uint256 _minDepositBlockDistance)",
      "function decreaseStakingModuleVettedKeysCountByNodeOperator(uint256 _stakingModuleId, bytes _nodeOperatorIds, bytes _vettedSigningKeysCounts)",
      "function deposit(uint256 _depositsCount, uint256 _stakingModuleId, bytes _depositCalldata) payable",
      "function finalizeUpgrade_v3()",
      "function getAllNodeOperatorDigests(uint256 _stakingModuleId) view returns (tuple(uint256 id, bool isActive, tuple(uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[])",
      "function getAllStakingModuleDigests() view returns (tuple(uint256 nodeOperatorsCount, uint256 activeNodeOperatorsCount, tuple(uint24 id, address stakingModuleAddress, uint16 stakingModuleFee, uint16 treasuryFee, uint16 stakeShareLimit, uint8 status, string name, uint64 lastDepositAt, uint256 lastDepositBlock, uint256 exitedValidatorsCount, uint16 priorityExitShareThreshold, uint64 maxDepositsPerBlock, uint64 minDepositBlockDistance) state, tuple(uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[])",
      "function getContractVersion() view returns (uint256)",
      "function getDepositsAllocation(uint256 _depositsCount) view returns (uint256 allocated, uint256[] allocations)",
      "function getLido() view returns (address)",
      "function getNodeOperatorDigests(uint256 _stakingModuleId, uint256[] _nodeOperatorIds) view returns (tuple(uint256 id, bool isActive, tuple(uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[] digests)",
      "function getNodeOperatorDigests(uint256 _stakingModuleId, uint256 _offset, uint256 _limit) view returns (tuple(uint256 id, bool isActive, tuple(uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[])",
      "function getNodeOperatorSummary(uint256 _stakingModuleId, uint256 _nodeOperatorId) view returns (tuple(uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getStakingFeeAggregateDistribution() view returns (uint96 modulesFee, uint96 treasuryFee, uint256 basePrecision)",
      "function getStakingFeeAggregateDistributionE4Precision() view returns (uint16 modulesFee, uint16 treasuryFee)",
      "function getStakingModule(uint256 _stakingModuleId) view returns (tuple(uint24 id, address stakingModuleAddress, uint16 stakingModuleFee, uint16 treasuryFee, uint16 stakeShareLimit, uint8 status, string name, uint64 lastDepositAt, uint256 lastDepositBlock, uint256 exitedValidatorsCount, uint16 priorityExitShareThreshold, uint64 maxDepositsPerBlock, uint64 minDepositBlockDistance))",
      "function getStakingModuleActiveValidatorsCount(uint256 _stakingModuleId) view returns (uint256 activeValidatorsCount)",
      "function getStakingModuleDigests(uint256[] _stakingModuleIds) view returns (tuple(uint256 nodeOperatorsCount, uint256 activeNodeOperatorsCount, tuple(uint24 id, address stakingModuleAddress, uint16 stakingModuleFee, uint16 treasuryFee, uint16 stakeShareLimit, uint8 status, string name, uint64 lastDepositAt, uint256 lastDepositBlock, uint256 exitedValidatorsCount, uint16 priorityExitShareThreshold, uint64 maxDepositsPerBlock, uint64 minDepositBlockDistance) state, tuple(uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[] digests)",
      "function getStakingModuleIds() view returns (uint256[] stakingModuleIds)",
      "function getStakingModuleIsActive(uint256 _stakingModuleId) view returns (bool)",
      "function getStakingModuleIsDepositsPaused(uint256 _stakingModuleId) view returns (bool)",
      "function getStakingModuleIsStopped(uint256 _stakingModuleId) view returns (bool)",
      "function getStakingModuleLastDepositBlock(uint256 _stakingModuleId) view returns (uint256)",
      "function getStakingModuleMaxDepositsCount(uint256 _stakingModuleId, uint256 _maxDepositsValue) view returns (uint256)",
      "function getStakingModuleMaxDepositsPerBlock(uint256 _stakingModuleId) view returns (uint256)",
      "function getStakingModuleMinDepositBlockDistance(uint256 _stakingModuleId) view returns (uint256)",
      "function getStakingModuleNonce(uint256 _stakingModuleId) view returns (uint256)",
      "function getStakingModuleStatus(uint256 _stakingModuleId) view returns (uint8)",
      "function getStakingModuleSummary(uint256 _stakingModuleId) view returns (tuple(uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)",
      "function getStakingModules() view returns (tuple(uint24 id, address stakingModuleAddress, uint16 stakingModuleFee, uint16 treasuryFee, uint16 stakeShareLimit, uint8 status, string name, uint64 lastDepositAt, uint256 lastDepositBlock, uint256 exitedValidatorsCount, uint16 priorityExitShareThreshold, uint64 maxDepositsPerBlock, uint64 minDepositBlockDistance)[] res)",
      "function getStakingModulesCount() view returns (uint256)",
      "function getStakingRewardsDistribution() view returns (address[] recipients, uint256[] stakingModuleIds, uint96[] stakingModuleFees, uint96 totalFee, uint256 precisionPoints)",
      "function getTotalFeeE4Precision() view returns (uint16 totalFee)",
      "function getWithdrawalCredentials() view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hasStakingModule(uint256 _stakingModuleId) view returns (bool)",
      "function initialize(address _admin, address _lido, bytes32 _withdrawalCredentials)",
      "function onValidatorExitTriggered(tuple(uint256 stakingModuleId, uint256 nodeOperatorId, bytes pubkey)[] validatorExitData, uint256 _withdrawalRequestPaidFee, uint256 _exitType)",
      "function onValidatorsCountsByNodeOperatorReportingFinished()",
      "function renounceRole(bytes32 role, address account)",
      "function reportRewardsMinted(uint256[] _stakingModuleIds, uint256[] _totalShares)",
      "function reportStakingModuleExitedValidatorsCountByNodeOperator(uint256 _stakingModuleId, bytes _nodeOperatorIds, bytes _exitedValidatorsCounts)",
      "function reportValidatorExitDelay(uint256 _stakingModuleId, uint256 _nodeOperatorId, uint256 _proofSlotTimestamp, bytes _publicKey, uint256 _eligibleToExitInSec)",
      "function revokeRole(bytes32 role, address account)",
      "function setStakingModuleStatus(uint256 _stakingModuleId, uint8 _status)",
      "function setWithdrawalCredentials(bytes32 _withdrawalCredentials)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unsafeSetExitedValidatorsCount(uint256 _stakingModuleId, uint256 _nodeOperatorId, bool _triggerUpdateFinish, tuple(uint256 currentModuleExitedValidatorsCount, uint256 currentNodeOperatorExitedValidatorsCount, uint256 newModuleExitedValidatorsCount, uint256 newNodeOperatorExitedValidatorsCount) _correction)",
      "function updateExitedValidatorsCountByStakingModule(uint256[] _stakingModuleIds, uint256[] _exitedValidatorsCounts) returns (uint256)",
      "function updateStakingModule(uint256 _stakingModuleId, uint256 _stakeShareLimit, uint256 _priorityExitShareThreshold, uint256 _stakingModuleFee, uint256 _treasuryFee, uint256 _maxDepositsPerBlock, uint256 _minDepositBlockDistance)",
      "function updateTargetValidatorsLimits(uint256 _stakingModuleId, uint256 _nodeOperatorId, uint256 _targetLimitMode, uint256 _targetLimit)"
    ],
    "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021": [
      "constructor(address owner)",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error FailedInnerCall()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event ETHReceived(address sender, uint256 value)",
      "event Executed(address indexed target, uint256 ethValue, bytes data, bytes returndata)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function execute(address target, uint256 value, bytes payload) payable",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0x25fdC3BE9977CD4da679dF72A64C8B6Bd5216A78": [
      "constructor(uint256 queueLowestPriority)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error InvalidAllowedExitDelay()",
      "error InvalidInitialization()",
      "error InvalidKeyNumberValueIntervals()",
      "error InvalidPerformanceCoefficients()",
      "error InvalidPerformanceLeewayData()",
      "error InvalidRewardShareData()",
      "error InvalidStrikesParams()",
      "error NotInitializing()",
      "error QueueCannotBeUsed()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error ZeroAdminAddress()",
      "error ZeroMaxDeposits()",
      "error ZeroQueueLowestPriority()",
      "event AllowedExitDelaySet(uint256 indexed curveId, uint256 delay)",
      "event AllowedExitDelayUnset(uint256 indexed curveId)",
      "event BadPerformancePenaltySet(uint256 indexed curveId, uint256 penalty)",
      "event BadPerformancePenaltyUnset(uint256 indexed curveId)",
      "event DefaultAllowedExitDelaySet(uint256 delay)",
      "event DefaultBadPerformancePenaltySet(uint256 value)",
      "event DefaultElRewardsStealingAdditionalFineSet(uint256 value)",
      "event DefaultExitDelayPenaltySet(uint256 penalty)",
      "event DefaultKeyRemovalChargeSet(uint256 value)",
      "event DefaultKeysLimitSet(uint256 value)",
      "event DefaultMaxWithdrawalRequestFeeSet(uint256 fee)",
      "event DefaultPerformanceCoefficientsSet(uint256 attestationsWeight, uint256 blocksWeight, uint256 syncWeight)",
      "event DefaultPerformanceLeewaySet(uint256 value)",
      "event DefaultQueueConfigSet(uint256 priority, uint256 maxDeposits)",
      "event DefaultRewardShareSet(uint256 value)",
      "event DefaultStrikesParamsSet(uint256 lifetime, uint256 threshold)",
      "event ElRewardsStealingAdditionalFineSet(uint256 indexed curveId, uint256 fine)",
      "event ElRewardsStealingAdditionalFineUnset(uint256 indexed curveId)",
      "event ExitDelayPenaltySet(uint256 indexed curveId, uint256 penalty)",
      "event ExitDelayPenaltyUnset(uint256 indexed curveId)",
      "event Initialized(uint64 version)",
      "event KeyRemovalChargeSet(uint256 indexed curveId, uint256 keyRemovalCharge)",
      "event KeyRemovalChargeUnset(uint256 indexed curveId)",
      "event KeysLimitSet(uint256 indexed curveId, uint256 limit)",
      "event KeysLimitUnset(uint256 indexed curveId)",
      "event MaxWithdrawalRequestFeeSet(uint256 indexed curveId, uint256 fee)",
      "event MaxWithdrawalRequestFeeUnset(uint256 indexed curveId)",
      "event PerformanceCoefficientsSet(uint256 indexed curveId, uint256 attestationsWeight, uint256 blocksWeight, uint256 syncWeight)",
      "event PerformanceCoefficientsUnset(uint256 indexed curveId)",
      "event PerformanceLeewayDataSet(uint256 indexed curveId, tuple(uint256 minKeyNumber, uint256 value)[] data)",
      "event PerformanceLeewayDataUnset(uint256 indexed curveId)",
      "event QueueConfigSet(uint256 indexed curveId, uint256 priority, uint256 maxDeposits)",
      "event QueueConfigUnset(uint256 indexed curveId)",
      "event RewardShareDataSet(uint256 indexed curveId, tuple(uint256 minKeyNumber, uint256 value)[] data)",
      "event RewardShareDataUnset(uint256 indexed curveId)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StrikesParamsSet(uint256 indexed curveId, uint256 lifetime, uint256 threshold)",
      "event StrikesParamsUnset(uint256 indexed curveId)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function QUEUE_LEGACY_PRIORITY() view returns (uint256)",
      "function QUEUE_LOWEST_PRIORITY() view returns (uint256)",
      "function defaultAllowedExitDelay() view returns (uint256)",
      "function defaultBadPerformancePenalty() view returns (uint256)",
      "function defaultElRewardsStealingAdditionalFine() view returns (uint256)",
      "function defaultExitDelayPenalty() view returns (uint256)",
      "function defaultKeyRemovalCharge() view returns (uint256)",
      "function defaultKeysLimit() view returns (uint256)",
      "function defaultMaxWithdrawalRequestFee() view returns (uint256)",
      "function defaultPerformanceCoefficients() view returns (uint32 attestationsWeight, uint32 blocksWeight, uint32 syncWeight)",
      "function defaultPerformanceLeeway() view returns (uint256)",
      "function defaultQueueConfig() view returns (uint32 priority, uint32 maxDeposits)",
      "function defaultRewardShare() view returns (uint256)",
      "function defaultStrikesParams() view returns (uint32 lifetime, uint32 threshold)",
      "function getAllowedExitDelay(uint256 curveId) view returns (uint256 delay)",
      "function getBadPerformancePenalty(uint256 curveId) view returns (uint256 penalty)",
      "function getElRewardsStealingAdditionalFine(uint256 curveId) view returns (uint256 fine)",
      "function getExitDelayPenalty(uint256 curveId) view returns (uint256 penalty)",
      "function getInitializedVersion() view returns (uint64)",
      "function getKeyRemovalCharge(uint256 curveId) view returns (uint256 keyRemovalCharge)",
      "function getKeysLimit(uint256 curveId) view returns (uint256 limit)",
      "function getMaxWithdrawalRequestFee(uint256 curveId) view returns (uint256 fee)",
      "function getPerformanceCoefficients(uint256 curveId) view returns (uint256 attestationsWeight, uint256 blocksWeight, uint256 syncWeight)",
      "function getPerformanceLeewayData(uint256 curveId) view returns (tuple(uint256 minKeyNumber, uint256 value)[] data)",
      "function getQueueConfig(uint256 curveId) view returns (uint32 queuePriority, uint32 maxDeposits)",
      "function getRewardShareData(uint256 curveId) view returns (tuple(uint256 minKeyNumber, uint256 value)[] data)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getStrikesParams(uint256 curveId) view returns (uint256 lifetime, uint256 threshold)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, tuple(uint256 keyRemovalCharge, uint256 elRewardsStealingAdditionalFine, uint256 keysLimit, uint256 rewardShare, uint256 performanceLeeway, uint256 strikesLifetime, uint256 strikesThreshold, uint256 defaultQueuePriority, uint256 defaultQueueMaxDeposits, uint256 badPerformancePenalty, uint256 attestationsWeight, uint256 blocksWeight, uint256 syncWeight, uint256 defaultAllowedExitDelay, uint256 defaultExitDelayPenalty, uint256 defaultMaxWithdrawalRequestFee) data)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function setAllowedExitDelay(uint256 curveId, uint256 delay)",
      "function setBadPerformancePenalty(uint256 curveId, uint256 penalty)",
      "function setDefaultAllowedExitDelay(uint256 delay)",
      "function setDefaultBadPerformancePenalty(uint256 penalty)",
      "function setDefaultElRewardsStealingAdditionalFine(uint256 fine)",
      "function setDefaultExitDelayPenalty(uint256 penalty)",
      "function setDefaultKeyRemovalCharge(uint256 keyRemovalCharge)",
      "function setDefaultKeysLimit(uint256 limit)",
      "function setDefaultMaxWithdrawalRequestFee(uint256 fee)",
      "function setDefaultPerformanceCoefficients(uint256 attestationsWeight, uint256 blocksWeight, uint256 syncWeight)",
      "function setDefaultPerformanceLeeway(uint256 leeway)",
      "function setDefaultQueueConfig(uint256 priority, uint256 maxDeposits)",
      "function setDefaultRewardShare(uint256 share)",
      "function setDefaultStrikesParams(uint256 lifetime, uint256 threshold)",
      "function setElRewardsStealingAdditionalFine(uint256 curveId, uint256 fine)",
      "function setExitDelayPenalty(uint256 curveId, uint256 penalty)",
      "function setKeyRemovalCharge(uint256 curveId, uint256 keyRemovalCharge)",
      "function setKeysLimit(uint256 curveId, uint256 limit)",
      "function setMaxWithdrawalRequestFee(uint256 curveId, uint256 fee)",
      "function setPerformanceCoefficients(uint256 curveId, uint256 attestationsWeight, uint256 blocksWeight, uint256 syncWeight)",
      "function setPerformanceLeewayData(uint256 curveId, tuple(uint256 minKeyNumber, uint256 value)[] data)",
      "function setQueueConfig(uint256 curveId, uint256 priority, uint256 maxDeposits)",
      "function setRewardShareData(uint256 curveId, tuple(uint256 minKeyNumber, uint256 value)[] data)",
      "function setStrikesParams(uint256 curveId, uint256 lifetime, uint256 threshold)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unsetAllowedExitDelay(uint256 curveId)",
      "function unsetBadPerformancePenalty(uint256 curveId)",
      "function unsetElRewardsStealingAdditionalFine(uint256 curveId)",
      "function unsetExitDelayPenalty(uint256 curveId)",
      "function unsetKeyRemovalCharge(uint256 curveId)",
      "function unsetKeysLimit(uint256 curveId)",
      "function unsetMaxWithdrawalRequestFee(uint256 curveId)",
      "function unsetPerformanceCoefficients(uint256 curveId)",
      "function unsetPerformanceLeewayData(uint256 curveId)",
      "function unsetQueueConfig(uint256 curveId)",
      "function unsetRewardShareData(uint256 curveId)",
      "function unsetStrikesParams(uint256 curveId)"
    ],
    "eth:0x2b33CF282f867A7FF693A66e11B0FcC5552e4425": [
      "function hasInitialized() view returns (bool)",
      "function KERNEL_APP_ID() pure returns (bytes32)",
      "function APP_ADDR_NAMESPACE() pure returns (bytes32)",
      "function getRecoveryVault() view returns (address)",
      "function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault) returns (address appProxy)",
      "function apps(bytes32, bytes32) view returns (address)",
      "function initialize(address _baseAcl, address _permissionsCreator)",
      "function CORE_NAMESPACE() pure returns (bytes32)",
      "function allowRecoverability(address token) view returns (bool)",
      "function newAppInstance(bytes32 _appId, address _appBase) returns (address appProxy)",
      "function recoveryVaultAppId() view returns (bytes32)",
      "function getInitializationBlock() view returns (uint256)",
      "function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)",
      "function APP_MANAGER_ROLE() view returns (bytes32)",
      "function newPinnedAppInstance(bytes32 _appId, address _appBase) returns (address appProxy)",
      "function transferToVault(address _token)",
      "function setApp(bytes32 _namespace, bytes32 _appId, address _app)",
      "function getApp(bytes32 _namespace, bytes32 _appId) view returns (address)",
      "function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault) returns (address appProxy)",
      "function newAppProxyPinned(address _kernel, bytes32 _appId, bytes _initializePayload) returns (address)",
      "function APP_BASES_NAMESPACE() pure returns (bytes32)",
      "function acl() view returns (address)",
      "function isPetrified() view returns (bool)",
      "function newAppProxy(address _kernel, bytes32 _appId) returns (address)",
      "function DEFAULT_ACL_APP_ID() pure returns (bytes32)",
      "function newAppProxy(address _kernel, bytes32 _appId, bytes _initializePayload) returns (address)",
      "function hasPermission(address _who, address _where, bytes32 _what, bytes _how) view returns (bool)",
      "function newAppProxyPinned(address _kernel, bytes32 _appId) returns (address)",
      "constructor(bool _shouldPetrify)",
      "event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)",
      "event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app)"
    ],
    "eth:0x2C298963FB763f74765829722a1ebe0784f4F5Cf": [
      "constructor(tuple(address accountingOracle, address depositSecurityModule, address elRewardsVault, address legacyOracle, address lido, address oracleReportSanityChecker, address postTokenRebaseReceiver, address burner, address stakingRouter, address treasury, address validatorsExitBusOracle, address withdrawalQueue, address withdrawalVault, address oracleDaemonConfig, address validatorExitDelayVerifier, address triggerableWithdrawalsGateway) _config)",
      "error ZeroAddress()",
      "function accountingOracle() view returns (address)",
      "function burner() view returns (address)",
      "function coreComponents() view returns (address, address, address, address, address, address)",
      "function depositSecurityModule() view returns (address)",
      "function elRewardsVault() view returns (address)",
      "function legacyOracle() view returns (address)",
      "function lido() view returns (address)",
      "function oracleDaemonConfig() view returns (address)",
      "function oracleReportComponentsForLido() view returns (address, address, address, address, address, address, address)",
      "function oracleReportSanityChecker() view returns (address)",
      "function postTokenRebaseReceiver() view returns (address)",
      "function stakingRouter() view returns (address)",
      "function treasury() view returns (address)",
      "function triggerableWithdrawalsGateway() view returns (address)",
      "function validatorExitDelayVerifier() view returns (address)",
      "function validatorsExitBusOracle() view returns (address)",
      "function withdrawalQueue() view returns (address)",
      "function withdrawalVault() view returns (address)"
    ],
    "eth:0x2e59A20f205bB85a89C53f1936454680651E618e": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0x388C818CA8B9251b393131C08a736A67ccB19297": [
      "constructor(address _lido, address _treasury)",
      "event ERC20Recovered(address indexed requestedBy, address indexed token, uint256 amount)",
      "event ERC721Recovered(address indexed requestedBy, address indexed token, uint256 tokenId)",
      "event ETHReceived(uint256 amount)",
      "function LIDO() view returns (address)",
      "function TREASURY() view returns (address)",
      "function recoverERC20(address _token, uint256 _amount)",
      "function recoverERC721(address _token, uint256 _tokenId)",
      "function withdrawRewards(uint256 _maxAmount) returns (uint256 amount)"
    ],
    "eth:0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37": [
      "function ADD_PROTECTED_TOKEN_ROLE() view returns (bytes32)",
      "function supportsInterface(bytes4 _interfaceId) pure returns (bool)",
      "function hasInitialized() view returns (bool)",
      "function ERC1271_INTERFACE_ID() view returns (bytes4)",
      "function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) returns (bytes4)",
      "function isValidSignature(bytes32 _hash, bytes _signature) view returns (bytes4)",
      "function ERC1271_RETURN_INVALID_SIGNATURE() view returns (bytes4)",
      "function TRANSFER_ROLE() view returns (bytes32)",
      "function isValidSignature(bytes _data, bytes _signature) view returns (bytes4)",
      "function getProtectedTokensLength() view returns (uint256)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function RUN_SCRIPT_ROLE() view returns (bytes32)",
      "function SAFE_EXECUTE_ROLE() view returns (bytes32)",
      "function REMOVE_PROTECTED_TOKEN_ROLE() view returns (bytes32)",
      "function deposit(address _token, uint256 _value) payable",
      "function isDepositable() view returns (bool)",
      "function presignHash(bytes32 _hash)",
      "function DESIGNATE_SIGNER_ROLE() view returns (bytes32)",
      "function removeProtectedToken(address _token)",
      "function EXECUTE_ROLE() view returns (bytes32)",
      "function addProtectedToken(address _token)",
      "function allowRecoverability(address) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function initialize()",
      "function protectedTokens(uint256) view returns (address)",
      "function getInitializationBlock() view returns (uint256)",
      "function ERC1271_RETURN_VALID_SIGNATURE() view returns (bytes4)",
      "function transferToVault(address _token)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function setDesignatedSigner(address _designatedSigner)",
      "function designatedSigner() view returns (address)",
      "function safeExecute(address _target, bytes _data)",
      "function PROTECTED_TOKENS_CAP() view returns (uint256)",
      "function ADD_PRESIGNED_HASH_ROLE() view returns (bytes32)",
      "function isPresigned(bytes32) view returns (bool)",
      "function execute(address _target, uint256 _ethValue, bytes _data)",
      "function transfer(address _token, address _to, uint256 _value)",
      "function canForward(address _sender, bytes _evmScript) view returns (bool)",
      "function kernel() view returns (address)",
      "function forward(bytes _evmScript)",
      "function isPetrified() view returns (bool)",
      "function balance(address _token) view returns (uint256)",
      "function isForwarder() pure returns (bool)",
      "event SafeExecute(address indexed sender, address indexed target, bytes data)",
      "event Execute(address indexed sender, address indexed target, uint256 ethValue, bytes data)",
      "event AddProtectedToken(address indexed token)",
      "event RemoveProtectedToken(address indexed token)",
      "event PresignHash(address indexed sender, bytes32 indexed hash)",
      "event SetDesignatedSigner(address indexed sender, address indexed oldSigner, address indexed newSigner)",
      "event ReceiveERC721(address indexed token, address indexed operator, address indexed from, uint256 tokenId, bytes data)",
      "event VaultTransfer(address indexed token, address indexed to, uint256 amount)",
      "event VaultDeposit(address indexed token, address indexed sender, uint256 amount)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)"
    ],
    "eth:0x3D3ba54D54bbFF40F2Dfa2A8e27bD4dE3dab2951": [
      "constructor(address owner, address[] committeeMembers, uint256 executionQuorum, address tiebreakerCoreCommittee)",
      "error AccountIsNotMember(address account)",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error CallerIsNotMember(address caller)",
      "error DuplicatedMember(address account)",
      "error FailedInnerCall()",
      "error HashAlreadyScheduled(bytes32 hash)",
      "error HashAlreadyUsed(bytes32 hash)",
      "error HashIsNotScheduled(bytes32 hash)",
      "error InvalidMemberAccount(address account)",
      "error InvalidQuorum()",
      "error InvalidTimelockDuration(uint32 timelock)",
      "error OffsetOutOfBounds()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ProposalDoesNotExist(bytes32 key)",
      "error QuorumIsNotReached()",
      "error TimelockNotPassed()",
      "error TimestampOverflow()",
      "event HashScheduled(bytes32 hash)",
      "event HashUsed(bytes32 hash)",
      "event MemberAdded(address indexed member)",
      "event MemberRemoved(address indexed member)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QuorumSet(uint256 quorum)",
      "event TimelockDurationSet(uint32 timelockDuration)",
      "event Voted(address indexed signer, bytes32 hash, bool support)",
      "function TIEBREAKER_CORE_COMMITTEE() view returns (address)",
      "function addMembers(address[] newMembers, uint256 executionQuorum)",
      "function approves(address signer, bytes32 hash) view returns (bool approve)",
      "function executeScheduleProposal(uint256 proposalId)",
      "function executeSealableResume(address sealable)",
      "function getMembers() view returns (address[])",
      "function getOrderedKeys(uint256 offset, uint256 limit) view returns (bytes32[])",
      "function getProposal(bytes32 key) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data))",
      "function getProposalAt(uint256 index) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data))",
      "function getProposals(uint256 offset, uint256 limit) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data)[] proposals)",
      "function getProposalsLength() view returns (uint256)",
      "function getQuorum() view returns (uint256)",
      "function getScheduleProposalState(uint256 proposalId) view returns (uint256 support, uint256 executionQuorum, uint40 quorumAt, bool isExecuted)",
      "function getSealableResumeState(address sealable) view returns (uint256 support, uint256 executionQuorum, uint40 quorumAt, bool isExecuted)",
      "function getTimelockDuration() view returns (uint32)",
      "function isMember(address member) view returns (bool)",
      "function owner() view returns (address)",
      "function removeMembers(address[] membersToRemove, uint256 executionQuorum)",
      "function renounceOwnership()",
      "function schedule(bytes32 hash)",
      "function scheduleProposal(uint256 proposalId)",
      "function sealableResume(address sealable)",
      "function setQuorum(uint256 newQuorum)",
      "function setTimelockDuration(uint32 newTimelock)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0x3E5021424c9e13FC853e523Cd68ebBec848956a0": [
      "constructor(address module, address oracle, address exitPenalties, address parametersRegistry)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error EmptyKeyStrikesList()",
      "error InvalidInitialization()",
      "error InvalidProof()",
      "error InvalidReportData()",
      "error MerkleProofInvalidMultiproof()",
      "error NotEnoughStrikesToEject()",
      "error NotInitializing()",
      "error SenderIsNotOracle()",
      "error ValueNotEvenlyDivisible()",
      "error ZeroAdminAddress()",
      "error ZeroEjectorAddress()",
      "error ZeroExitPenaltiesAddress()",
      "error ZeroModuleAddress()",
      "error ZeroMsgValue()",
      "error ZeroOracleAddress()",
      "error ZeroParametersRegistryAddress()",
      "event EjectorSet(address ejector)",
      "event Initialized(uint64 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StrikesDataUpdated(bytes32 treeRoot, string treeCid)",
      "event StrikesDataWiped()",
      "function ACCOUNTING() view returns (address)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXIT_PENALTIES() view returns (address)",
      "function MODULE() view returns (address)",
      "function ORACLE() view returns (address)",
      "function PARAMETERS_REGISTRY() view returns (address)",
      "function ejector() view returns (address)",
      "function getInitializedVersion() view returns (uint64)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hashLeaf(tuple(uint256 nodeOperatorId, uint256 keyIndex, uint256[] data) keyStrikes, bytes pubkey) pure returns (bytes32)",
      "function initialize(address admin, address _ejector)",
      "function processBadPerformanceProof(tuple(uint256 nodeOperatorId, uint256 keyIndex, uint256[] data)[] keyStrikesList, bytes32[] proof, bool[] proofFlags, address refundRecipient) payable",
      "function processOracleReport(bytes32 _treeRoot, string _treeCid)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function setEjector(address _ejector)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function treeCid() view returns (string)",
      "function treeRoot() view returns (bytes32)",
      "function verifyProof(tuple(uint256 nodeOperatorId, uint256 keyIndex, uint256[] data)[] keyStrikesList, bytes[] pubkeys, bytes32[] proof, bool[] proofFlags) view returns (bool)"
    ],
    "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": [
      "constructor()",
      "event AddedOwner(address indexed owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address indexed handler)",
      "event ChangedGuard(address indexed guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address indexed module)",
      "event EnabledModule(address indexed module)",
      "event ExecutionFailure(bytes32 indexed txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 indexed txHash, uint256 payment)",
      "event RemovedOwner(address indexed owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0x442af784A788A5bd6F42A01Ebe9F287a871243fb": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0x4D4074628678Bd302921c20573EEa1ed38DdF7FB": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_)"
    ],
    "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_)"
    ],
    "eth:0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0x553337946F2FAb8911774b20025fa776B76a7CcE": [
      "constructor(address governance, address timelock)",
      "error CallerIsNotGovernance(address caller)",
      "error InvalidGovernance(address governance)",
      "error InvalidTimelock(address timelock)",
      "event ProposalSubmitted(address indexed proposerAccount, uint256 indexed proposalId, string metadata)",
      "function GOVERNANCE() view returns (address)",
      "function TIMELOCK() view returns (address)",
      "function canScheduleProposal(uint256 proposalId) view returns (bool)",
      "function cancelAllPendingProposals() returns (bool)",
      "function scheduleProposal(uint256 proposalId)",
      "function submitProposal(tuple(address target, uint96 value, bytes payload)[] calls, string metadata) returns (uint256 proposalId)"
    ],
    "eth:0x589e298964b9181D9938B84bB034C3BB9024E2C0": [
      "constructor(address _trustedCaller, address _nodeOperatorsRegistry, address _lido)",
      "function createEVMScript(address _creator, bytes _evmScriptCallData) view returns (bytes)",
      "function decodeEVMScriptCallData(bytes _evmScriptCallData) pure returns (tuple(uint256 nodeOperatorId, address rewardAddress)[])",
      "function lido() view returns (address)",
      "function nodeOperatorsRegistry() view returns (address)",
      "function trustedCaller() view returns (address)"
    ],
    "eth:0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32": [
      "function name() view returns (string)",
      "function approve(address _spender, uint256 _amount) returns (bool success)",
      "function creationBlock() view returns (uint256)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address _from, address _to, uint256 _amount) returns (bool success)",
      "function decimals() view returns (uint8)",
      "function changeController(address _newController)",
      "function balanceOfAt(address _owner, uint256 _blockNumber) view returns (uint256)",
      "function version() view returns (string)",
      "function createCloneToken(string _cloneTokenName, uint8 _cloneDecimalUnits, string _cloneTokenSymbol, uint256 _snapshotBlock, bool _transfersEnabled) returns (address)",
      "function balanceOf(address _owner) view returns (uint256 balance)",
      "function parentToken() view returns (address)",
      "function generateTokens(address _owner, uint256 _amount) returns (bool)",
      "function symbol() view returns (string)",
      "function totalSupplyAt(uint256 _blockNumber) view returns (uint256)",
      "function transfer(address _to, uint256 _amount) returns (bool success)",
      "function transfersEnabled() view returns (bool)",
      "function parentSnapShotBlock() view returns (uint256)",
      "function approveAndCall(address _spender, uint256 _amount, bytes _extraData) returns (bool success)",
      "function destroyTokens(address _owner, uint256 _amount) returns (bool)",
      "function allowance(address _owner, address _spender) view returns (uint256 remaining)",
      "function claimTokens(address _token)",
      "function tokenFactory() view returns (address)",
      "function enableTransfers(bool _transfersEnabled)",
      "function controller() view returns (address)",
      "constructor(address _tokenFactory, address _parentToken, uint256 _parentSnapShotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled)",
      "event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount)",
      "event Transfer(address indexed _from, address indexed _to, uint256 _amount)",
      "event NewCloneToken(address indexed _cloneToken, uint256 _snapshotBlock)",
      "event Approval(address indexed _owner, address indexed _spender, uint256 _amount)"
    ],
    "eth:0x5cEb19e1890f677c3676d5ecDF7c501eBA01A054": [
      "function hasInitialized() view returns (bool)",
      "function execScript(bytes _script, bytes, address[] _blacklist) returns (bytes)",
      "function executorType() pure returns (bytes32)",
      "function getInitializationBlock() view returns (uint256)",
      "function isPetrified() view returns (bool)",
      "event LogScriptCall(address indexed sender, address indexed src, address indexed dst)"
    ],
    "eth:0x5DCF7cF7c6645E9E822a379dF046a8b0390251A1": [
      "constructor(address stETH, address accounting, address oracle)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error FailedToSendEther()",
      "error FeeSharesDecrease()",
      "error InvalidInitialization()",
      "error InvalidLogCID()",
      "error InvalidProof()",
      "error InvalidReportData()",
      "error InvalidShares()",
      "error InvalidTreeCid()",
      "error InvalidTreeRoot()",
      "error NotAllowedToRecover()",
      "error NotEnoughShares()",
      "error NotInitializing()",
      "error SenderIsNotAccounting()",
      "error SenderIsNotOracle()",
      "error ZeroAccountingAddress()",
      "error ZeroAdminAddress()",
      "error ZeroOracleAddress()",
      "error ZeroRebateRecipientAddress()",
      "error ZeroStEthAddress()",
      "event DistributionDataUpdated(uint256 totalClaimableShares, bytes32 treeRoot, string treeCid)",
      "event DistributionLogUpdated(string logCid)",
      "event ERC1155Recovered(address indexed token, uint256 tokenId, address indexed recipient, uint256 amount)",
      "event ERC20Recovered(address indexed token, address indexed recipient, uint256 amount)",
      "event ERC721Recovered(address indexed token, uint256 tokenId, address indexed recipient)",
      "event EtherRecovered(address indexed recipient, uint256 amount)",
      "event Initialized(uint64 version)",
      "event ModuleFeeDistributed(uint256 shares)",
      "event OperatorFeeDistributed(uint256 indexed nodeOperatorId, uint256 shares)",
      "event RebateRecipientSet(address recipient)",
      "event RebateTransferred(uint256 shares)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StETHSharesRecovered(address indexed recipient, uint256 shares)",
      "function ACCOUNTING() view returns (address)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function ORACLE() view returns (address)",
      "function RECOVERER_ROLE() view returns (bytes32)",
      "function STETH() view returns (address)",
      "function distributeFees(uint256 nodeOperatorId, uint256 cumulativeFeeShares, bytes32[] proof) returns (uint256 sharesToDistribute)",
      "function distributedShares(uint256 nodeOperatorId) view returns (uint256 distributed)",
      "function distributionDataHistoryCount() view returns (uint256)",
      "function finalizeUpgradeV2(address _rebateRecipient)",
      "function getFeesToDistribute(uint256 nodeOperatorId, uint256 cumulativeFeeShares, bytes32[] proof) view returns (uint256 sharesToDistribute)",
      "function getHistoricalDistributionData(uint256 index) view returns (tuple(uint256 refSlot, bytes32 treeRoot, string treeCid, string logCid, uint256 distributed, uint256 rebate))",
      "function getInitializedVersion() view returns (uint64)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hashLeaf(uint256 nodeOperatorId, uint256 shares) pure returns (bytes32)",
      "function initialize(address admin, address _rebateRecipient)",
      "function logCid() view returns (string)",
      "function pendingSharesToDistribute() view returns (uint256)",
      "function processOracleReport(bytes32 _treeRoot, string _treeCid, string _logCid, uint256 distributed, uint256 rebate, uint256 refSlot)",
      "function rebateRecipient() view returns (address)",
      "function recoverERC1155(address token, uint256 tokenId)",
      "function recoverERC20(address token, uint256 amount)",
      "function recoverERC721(address token, uint256 tokenId)",
      "function recoverEther()",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function setRebateRecipient(address _rebateRecipient)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function totalClaimableShares() view returns (uint256)",
      "function treeCid() view returns (string)",
      "function treeRoot() view returns (bytes32)"
    ],
    "eth:0x6232397ebac4f5772e53285B26c47914E9461E75": [
      "constructor(address _lidoLocator, address _admin, tuple(uint256 exitedValidatorsPerDayLimit, uint256 appearedValidatorsPerDayLimit, uint256 annualBalanceIncreaseBPLimit, uint256 simulatedShareRateDeviationBPLimit, uint256 maxValidatorExitRequestsPerReport, uint256 maxItemsPerExtraDataTransaction, uint256 maxNodeOperatorsPerExtraDataItem, uint256 requestTimestampMargin, uint256 maxPositiveTokenRebase, uint256 initialSlashingAmountPWei, uint256 inactivityPenaltiesAmountPWei, uint256 clBalanceOraclesErrorUpperBPLimit) _limitsList)",
      "error ActualShareRateIsZero()",
      "error AdminCannotBeZero()",
      "error CalledNotFromLido()",
      "error ExitedValidatorsLimitExceeded(uint256 limitPerDay, uint256 exitedPerDay)",
      "error IncorrectAppearedValidators(uint256 appearedValidatorsLimit)",
      "error IncorrectCLBalanceDecrease(uint256 negativeCLRebaseSum, uint256 maxNegativeCLRebaseSum)",
      "error IncorrectCLBalanceIncrease(uint256 annualBalanceDiff)",
      "error IncorrectELRewardsVaultBalance(uint256 actualELRewardsVaultBalance)",
      "error IncorrectExitedValidators(uint256 exitedValidatorsLimit)",
      "error IncorrectLimitValue(uint256 value, uint256 minAllowedValue, uint256 maxAllowedValue)",
      "error IncorrectNumberOfExitRequestsPerReport(uint256 maxRequestsCount)",
      "error IncorrectRequestFinalization(uint256 requestCreationBlock)",
      "error IncorrectSharesRequestedToBurn(uint256 actualSharesToBurn)",
      "error IncorrectSimulatedShareRate(uint256 simulatedShareRate, uint256 actualShareRate)",
      "error IncorrectWithdrawalsVaultBalance(uint256 actualWithdrawalVaultBalance)",
      "error NegativeRebaseFailedCLBalanceMismatch(uint256 reportedValue, uint256 provedValue, uint256 limitBP)",
      "error NegativeRebaseFailedSecondOpinionReportIsNotReady()",
      "error NegativeRebaseFailedWithdrawalVaultBalanceMismatch(uint256 reportedValue, uint256 provedValue)",
      "error NegativeTotalPooledEther()",
      "error TooHighTokenRebaseLimit()",
      "error TooLowTokenRebaseLimit()",
      "error TooManyItemsPerExtraDataTransaction(uint256 maxItemsCount, uint256 receivedItemsCount)",
      "error TooManyNodeOpsPerExtraDataItem(uint256 itemIndex, uint256 nodeOpsCount)",
      "event AnnualBalanceIncreaseBPLimitSet(uint256 annualBalanceIncreaseBPLimit)",
      "event AppearedValidatorsPerDayLimitSet(uint256 appearedValidatorsPerDayLimit)",
      "event CLBalanceOraclesErrorUpperBPLimitSet(uint256 clBalanceOraclesErrorUpperBPLimit)",
      "event ExitedValidatorsPerDayLimitSet(uint256 exitedValidatorsPerDayLimit)",
      "event InactivityPenaltiesAmountSet(uint256 inactivityPenaltiesAmountPWei)",
      "event InitialSlashingAmountSet(uint256 initialSlashingAmountPWei)",
      "event MaxItemsPerExtraDataTransactionSet(uint256 maxItemsPerExtraDataTransaction)",
      "event MaxNodeOperatorsPerExtraDataItemSet(uint256 maxNodeOperatorsPerExtraDataItem)",
      "event MaxPositiveTokenRebaseSet(uint256 maxPositiveTokenRebase)",
      "event MaxValidatorExitRequestsPerReportSet(uint256 maxValidatorExitRequestsPerReport)",
      "event NegativeCLRebaseAccepted(uint256 refSlot, uint256 clTotalBalance, uint256 clBalanceDecrease, uint256 maxAllowedCLRebaseNegativeSum)",
      "event NegativeCLRebaseConfirmed(uint256 refSlot, uint256 clBalanceWei, uint256 withdrawalVaultBalance)",
      "event RequestTimestampMarginSet(uint256 requestTimestampMargin)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SecondOpinionOracleChanged(address indexed secondOpinionOracle)",
      "event SimulatedShareRateDeviationBPLimitSet(uint256 simulatedShareRateDeviationBPLimit)",
      "function ALL_LIMITS_MANAGER_ROLE() view returns (bytes32)",
      "function ANNUAL_BALANCE_INCREASE_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function APPEARED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXITED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function INITIAL_SLASHING_AND_PENALTIES_MANAGER_ROLE() view returns (bytes32)",
      "function MAX_ITEMS_PER_EXTRA_DATA_TRANSACTION_ROLE() view returns (bytes32)",
      "function MAX_NODE_OPERATORS_PER_EXTRA_DATA_ITEM_ROLE() view returns (bytes32)",
      "function MAX_POSITIVE_TOKEN_REBASE_MANAGER_ROLE() view returns (bytes32)",
      "function MAX_VALIDATOR_EXIT_REQUESTS_PER_REPORT_ROLE() view returns (bytes32)",
      "function REQUEST_TIMESTAMP_MARGIN_MANAGER_ROLE() view returns (bytes32)",
      "function SECOND_OPINION_MANAGER_ROLE() view returns (bytes32)",
      "function SHARE_RATE_DEVIATION_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function checkAccountingOracleReport(uint256 _timeElapsed, uint256 _preCLBalance, uint256 _postCLBalance, uint256 _withdrawalVaultBalance, uint256 _elRewardsVaultBalance, uint256 _sharesRequestedToBurn, uint256 _preCLValidators, uint256 _postCLValidators)",
      "function checkExitBusOracleReport(uint256 _exitRequestsCount) view",
      "function checkExitedValidatorsRatePerDay(uint256 _exitedValidatorsCount) view",
      "function checkExtraDataItemsCountPerTransaction(uint256 _extraDataListItemsCount) view",
      "function checkNodeOperatorsPerExtraDataItemCount(uint256 _itemIndex, uint256 _nodeOperatorsCount) view",
      "function checkSimulatedShareRate(uint256 _postTotalPooledEther, uint256 _postTotalShares, uint256 _etherLockedOnWithdrawalQueue, uint256 _sharesBurntDueToWithdrawals, uint256 _simulatedShareRate) view",
      "function checkWithdrawalQueueOracleReport(uint256 _lastFinalizableRequestId, uint256 _reportTimestamp) view",
      "function getLidoLocator() view returns (address)",
      "function getMaxPositiveTokenRebase() view returns (uint256)",
      "function getOracleReportLimits() view returns (tuple(uint256 exitedValidatorsPerDayLimit, uint256 appearedValidatorsPerDayLimit, uint256 annualBalanceIncreaseBPLimit, uint256 simulatedShareRateDeviationBPLimit, uint256 maxValidatorExitRequestsPerReport, uint256 maxItemsPerExtraDataTransaction, uint256 maxNodeOperatorsPerExtraDataItem, uint256 requestTimestampMargin, uint256 maxPositiveTokenRebase, uint256 initialSlashingAmountPWei, uint256 inactivityPenaltiesAmountPWei, uint256 clBalanceOraclesErrorUpperBPLimit))",
      "function getReportDataCount() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function reportData(uint256) view returns (uint64 timestamp, uint64 totalExitedValidators, uint128 negativeCLRebaseWei)",
      "function revokeRole(bytes32 role, address account)",
      "function secondOpinionOracle() view returns (address)",
      "function setAnnualBalanceIncreaseBPLimit(uint256 _annualBalanceIncreaseBPLimit)",
      "function setAppearedValidatorsPerDayLimit(uint256 _appearedValidatorsPerDayLimit)",
      "function setExitedValidatorsPerDayLimit(uint256 _exitedValidatorsPerDayLimit)",
      "function setInitialSlashingAndPenaltiesAmount(uint256 _initialSlashingAmountPWei, uint256 _inactivityPenaltiesAmountPWei)",
      "function setMaxExitRequestsPerOracleReport(uint256 _maxValidatorExitRequestsPerReport)",
      "function setMaxItemsPerExtraDataTransaction(uint256 _maxItemsPerExtraDataTransaction)",
      "function setMaxNodeOperatorsPerExtraDataItem(uint256 _maxNodeOperatorsPerExtraDataItem)",
      "function setMaxPositiveTokenRebase(uint256 _maxPositiveTokenRebase)",
      "function setOracleReportLimits(tuple(uint256 exitedValidatorsPerDayLimit, uint256 appearedValidatorsPerDayLimit, uint256 annualBalanceIncreaseBPLimit, uint256 simulatedShareRateDeviationBPLimit, uint256 maxValidatorExitRequestsPerReport, uint256 maxItemsPerExtraDataTransaction, uint256 maxNodeOperatorsPerExtraDataItem, uint256 requestTimestampMargin, uint256 maxPositiveTokenRebase, uint256 initialSlashingAmountPWei, uint256 inactivityPenaltiesAmountPWei, uint256 clBalanceOraclesErrorUpperBPLimit) _limitsList, address _secondOpinionOracle)",
      "function setRequestTimestampMargin(uint256 _requestTimestampMargin)",
      "function setSecondOpinionOracleAndCLBalanceUpperMargin(address _secondOpinionOracle, uint256 _clBalanceOraclesErrorUpperBPLimit)",
      "function setSimulatedShareRateDeviationBPLimit(uint256 _simulatedShareRateDeviationBPLimit)",
      "function smoothenTokenRebase(uint256 _preTotalPooledEther, uint256 _preTotalShares, uint256 _preCLBalance, uint256 _postCLBalance, uint256 _withdrawalVaultBalance, uint256 _elRewardsVaultBalance, uint256 _sharesRequestedToBurn, uint256 _etherToLockForWithdrawals, uint256 _newSharesToBurnForWithdrawals) view returns (uint256 withdrawals, uint256 elRewards, uint256 simulatedSharesToBurn, uint256 sharesToBurn)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "eth:0x65D4D92Cd0EabAa05cD5A46269C24b71C21cfdc4": [
      "constructor(address module)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AlreadyConsumed()",
      "error InvalidCurveId()",
      "error InvalidInitialization()",
      "error InvalidProof()",
      "error InvalidReferralsThreshold()",
      "error InvalidTreeCid()",
      "error InvalidTreeRoot()",
      "error NodeOperatorDoesNotExist()",
      "error NotAllowedToClaim()",
      "error NotEnoughReferrals()",
      "error NotInitializing()",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error ReferralProgramIsActive()",
      "error ReferralProgramIsNotActive()",
      "error ResumedExpected()",
      "error ZeroAdminAddress()",
      "error ZeroModuleAddress()",
      "error ZeroPauseDuration()",
      "event Consumed(address indexed member)",
      "event Initialized(uint64 version)",
      "event Paused(uint256 duration)",
      "event ReferralProgramSeasonEnded(uint256 indexed season)",
      "event ReferralProgramSeasonStarted(uint256 indexed season, uint256 referralCurveId, uint256 referralsThreshold)",
      "event ReferralRecorded(address indexed referrer, uint256 indexed season, uint256 indexed referralNodeOperatorId)",
      "event ReferrerConsumed(address indexed referrer, uint256 indexed season)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TreeSet(bytes32 indexed treeRoot, string treeCid)",
      "function ACCOUNTING() view returns (address)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function END_REFERRAL_SEASON_ROLE() view returns (bytes32)",
      "function MODULE() view returns (address)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function RECOVERER_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function SET_TREE_ROLE() view returns (bytes32)",
      "function START_REFERRAL_SEASON_ROLE() view returns (bytes32)",
      "function addNodeOperatorETH(uint256 keysCount, bytes publicKeys, bytes signatures, tuple(address managerAddress, address rewardAddress, bool extendedManagerPermissions) managementProperties, bytes32[] proof, address referrer) payable returns (uint256 nodeOperatorId)",
      "function addNodeOperatorStETH(uint256 keysCount, bytes publicKeys, bytes signatures, tuple(address managerAddress, address rewardAddress, bool extendedManagerPermissions) managementProperties, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit, bytes32[] proof, address referrer) returns (uint256 nodeOperatorId)",
      "function addNodeOperatorWstETH(uint256 keysCount, bytes publicKeys, bytes signatures, tuple(address managerAddress, address rewardAddress, bool extendedManagerPermissions) managementProperties, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit, bytes32[] proof, address referrer) returns (uint256 nodeOperatorId)",
      "function claimBondCurve(uint256 nodeOperatorId, bytes32[] proof)",
      "function claimReferrerBondCurve(uint256 nodeOperatorId, bytes32[] proof)",
      "function curveId() view returns (uint256)",
      "function endCurrentReferralProgramSeason()",
      "function getInitializedVersion() view returns (uint64)",
      "function getReferralsCount(address referrer) view returns (uint256)",
      "function getReferralsCount(address referrer, uint256 season) view returns (uint256)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hashLeaf(address member) pure returns (bytes32)",
      "function initialize(uint256 _curveId, bytes32 _treeRoot, string _treeCid, address admin)",
      "function isConsumed(address member) view returns (bool)",
      "function isPaused() view returns (bool)",
      "function isReferralProgramSeasonActive() view returns (bool)",
      "function isReferrerConsumed(address referrer) view returns (bool)",
      "function pauseFor(uint256 duration)",
      "function recoverERC1155(address token, uint256 tokenId)",
      "function recoverERC20(address token, uint256 amount)",
      "function recoverERC721(address token, uint256 tokenId)",
      "function recoverEther()",
      "function referralCurveId() view returns (uint256)",
      "function referralProgramSeasonNumber() view returns (uint256)",
      "function referralsThreshold() view returns (uint256)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function setTreeParams(bytes32 _treeRoot, string _treeCid)",
      "function startNewReferralProgramSeason(uint256 _referralCurveId, uint256 _referralsThreshold) returns (uint256 season)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function treeCid() view returns (string)",
      "function treeRoot() view returns (bytes32)",
      "function verifyProof(address member, bytes32[] proof) view returns (bool)"
    ],
    "eth:0x6828b023e737f96B168aCd0b5c6351971a4F81aE": [
      "function hasInitialized() view returns (bool)",
      "function updateTargetValidatorsLimits(uint256 _nodeOperatorId, uint256 _targetLimitMode, uint256 _targetLimit)",
      "function addSigningKeys(uint256 _nodeOperatorId, uint256 _keysCount, bytes _publicKeys, bytes _signatures)",
      "function getType() view returns (bytes32)",
      "function exitDeadlineThreshold(uint256) view returns (uint256)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function getNodeOperatorIds(uint256 _offset, uint256 _limit) view returns (uint256[] nodeOperatorIds)",
      "function reportValidatorExitDelay(uint256 _nodeOperatorId, uint256 _proofSlotTimestamp, bytes _publicKey, uint256 _eligibleToExitInSec)",
      "function getSigningKeys(uint256 _nodeOperatorId, uint256 _offset, uint256 _limit) view returns (bytes pubkeys, bytes signatures, bool[] used)",
      "function removeSigningKeysOperatorBH(uint256 _nodeOperatorId, uint256 _fromIndex, uint256 _keysCount)",
      "function getNodeOperatorIsActive(uint256 _nodeOperatorId) view returns (bool)",
      "function setNodeOperatorName(uint256 _nodeOperatorId, string _name)",
      "function getRewardsDistribution(uint256 _totalRewardShares) view returns (address[] recipients, uint256[] shares, bool[] penalized)",
      "function invalidateReadyToDepositKeysRange(uint256 _indexFrom, uint256 _indexTo)",
      "function initialize(address _locator, bytes32 _type, uint256 _exitDeadlineThresholdInSeconds)",
      "function onValidatorExitTriggered(uint256 _nodeOperatorId, bytes _publicKey, uint256 _withdrawalRequestPaidFee, uint256 _exitType)",
      "function getStuckPenaltyDelay() pure returns (uint256)",
      "function removeSigningKey(uint256 _nodeOperatorId, uint256 _index)",
      "function getRewardDistributionState() view returns (uint8)",
      "function removeSigningKeys(uint256 _nodeOperatorId, uint256 _fromIndex, uint256 _keysCount)",
      "function isOperatorPenalized(uint256) pure returns (bool)",
      "function deactivateNodeOperator(uint256 _nodeOperatorId)",
      "function allowRecoverability(address token) view returns (bool)",
      "function STAKING_ROUTER_ROLE() view returns (bytes32)",
      "function addSigningKeysOperatorBH(uint256 _nodeOperatorId, uint256 _keysCount, bytes _publicKeys, bytes _signatures)",
      "function appId() view returns (bytes32)",
      "function isValidatorExitDelayPenaltyApplicable(uint256, uint256 _proofSlotTimestamp, bytes _publicKey, uint256 _eligibleToExitInSec) view returns (bool)",
      "function getActiveNodeOperatorsCount() view returns (uint256)",
      "function addNodeOperator(string _name, address _rewardAddress) returns (uint256 id)",
      "function getContractVersion() view returns (uint256)",
      "function getInitializationBlock() view returns (uint256)",
      "function getUnusedSigningKeyCount(uint256 _nodeOperatorId) view returns (uint256)",
      "function onRewardsMinted(uint256)",
      "function MANAGE_NODE_OPERATOR_ROLE() view returns (bytes32)",
      "function finalizeUpgrade_v4(uint256 _exitDeadlineThresholdInSeconds)",
      "function distributeReward()",
      "function onWithdrawalCredentialsChanged()",
      "function activateNodeOperator(uint256 _nodeOperatorId)",
      "function unsafeUpdateValidatorsCount(uint256 _nodeOperatorId, uint256 _exitedValidatorsCount)",
      "function setNodeOperatorRewardAddress(uint256 _nodeOperatorId, address _rewardAddress)",
      "function getNodeOperator(uint256 _nodeOperatorId, bool _fullInfo) view returns (bool active, string name, address rewardAddress, uint64 totalVettedValidators, uint64 totalExitedValidators, uint64 totalAddedValidators, uint64 totalDepositedValidators)",
      "function getStakingModuleSummary() view returns (uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount)",
      "function updateExitedValidatorsCount(bytes _nodeOperatorIds, bytes _exitedValidatorsCounts)",
      "function transferToVault(address _token)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function getNodeOperatorsCount() view returns (uint256)",
      "function updateTargetValidatorsLimits(uint256 _nodeOperatorId, bool _isTargetLimitActive, uint256 _targetLimit)",
      "function setNodeOperatorStakingLimit(uint256 _nodeOperatorId, uint64 _vettedSigningKeysCount)",
      "function getNodeOperatorSummary(uint256 _nodeOperatorId) view returns (uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount)",
      "function getSigningKey(uint256 _nodeOperatorId, uint256 _index) view returns (bytes key, bytes depositSignature, bool used)",
      "function MAX_NODE_OPERATOR_NAME_LENGTH() view returns (uint256)",
      "function decreaseVettedSigningKeysCount(bytes _nodeOperatorIds, bytes _vettedSigningKeysCounts)",
      "function isValidatorExitingKeyReported(bytes _publicKey) view returns (bool)",
      "function setExitDeadlineThreshold(uint256 _threshold, uint256 _lateReportingWindow)",
      "function obtainDepositData(uint256 _depositsCount, bytes) returns (bytes publicKeys, bytes signatures)",
      "function exitPenaltyCutoffTimestamp() view returns (uint256)",
      "function getKeysOpIndex() view returns (uint256)",
      "function getNonce() view returns (uint256)",
      "function kernel() view returns (address)",
      "function getLocator() view returns (address)",
      "function SET_NODE_OPERATOR_LIMIT_ROLE() view returns (bytes32)",
      "function getTotalSigningKeyCount(uint256 _nodeOperatorId) view returns (uint256)",
      "function isPetrified() view returns (bool)",
      "function MAX_STUCK_PENALTY_DELAY() view returns (uint256)",
      "function onExitedAndStuckValidatorsCountsUpdated()",
      "function MAX_NODE_OPERATORS_COUNT() view returns (uint256)",
      "function removeSigningKeyOperatorBH(uint256 _nodeOperatorId, uint256 _index)",
      "function MANAGE_SIGNING_KEYS() view returns (bytes32)",
      "function isOperatorPenaltyCleared(uint256) pure returns (bool)",
      "event NodeOperatorAdded(uint256 nodeOperatorId, string name, address rewardAddress, uint64 stakingLimit)",
      "event NodeOperatorActiveSet(uint256 indexed nodeOperatorId, bool active)",
      "event NodeOperatorNameSet(uint256 indexed nodeOperatorId, string name)",
      "event NodeOperatorRewardAddressSet(uint256 indexed nodeOperatorId, address rewardAddress)",
      "event NodeOperatorTotalKeysTrimmed(uint256 indexed nodeOperatorId, uint64 totalKeysTrimmed)",
      "event KeysOpIndexSet(uint256 keysOpIndex)",
      "event StakingModuleTypeSet(bytes32 moduleType)",
      "event RewardsDistributed(address indexed rewardAddress, uint256 sharesAmount)",
      "event RewardDistributionStateChanged(uint8 state)",
      "event LocatorContractSet(address locatorAddress)",
      "event VettedSigningKeysCountChanged(uint256 indexed nodeOperatorId, uint256 approvedValidatorsCount)",
      "event DepositedSigningKeysCountChanged(uint256 indexed nodeOperatorId, uint256 depositedValidatorsCount)",
      "event ExitedSigningKeysCountChanged(uint256 indexed nodeOperatorId, uint256 exitedValidatorsCount)",
      "event TotalSigningKeysCountChanged(uint256 indexed nodeOperatorId, uint256 totalValidatorsCount)",
      "event NonceChanged(uint256 nonce)",
      "event TargetValidatorsCountChanged(uint256 indexed nodeOperatorId, uint256 targetValidatorsCount, uint256 targetLimitMode)",
      "event ValidatorExitStatusUpdated(uint256 indexed nodeOperatorId, bytes publicKey, uint256 eligibleToExitInSec, uint256 proofSlotTimestamp)",
      "event ValidatorExitTriggered(uint256 indexed nodeOperatorId, bytes publicKey, uint256 withdrawalRequestPaidFee, uint256 exitType)",
      "event ExitDeadlineThresholdChanged(uint256 threshold, uint256 reportingWindow)",
      "event ContractVersionSet(uint256 version)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)"
    ],
    "eth:0x6f09d2426c7405C5546413e6059F884D2D03f449": [
      "constructor(address lidoLocator, address module, address _feeDistributor, uint256 minBondLockPeriod, uint256 maxBondLockPeriod)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error ElRewardsVaultReceiveFailed()",
      "error FailedToSendEther()",
      "error InvalidBondCurveId()",
      "error InvalidBondCurveLength()",
      "error InvalidBondCurveValues()",
      "error InvalidBondCurvesLength()",
      "error InvalidBondLockAmount()",
      "error InvalidBondLockPeriod()",
      "error InvalidInitialization()",
      "error InvalidInitializationCurveId()",
      "error NodeOperatorDoesNotExist()",
      "error NotAllowedToRecover()",
      "error NotInitializing()",
      "error NothingToClaim()",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error ResumedExpected()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SenderIsNotEligible()",
      "error SenderIsNotModule()",
      "error ZeroAdminAddress()",
      "error ZeroChargePenaltyRecipientAddress()",
      "error ZeroFeeDistributorAddress()",
      "error ZeroLocatorAddress()",
      "error ZeroModuleAddress()",
      "error ZeroPauseDuration()",
      "event BondBurned(uint256 indexed nodeOperatorId, uint256 amountToBurn, uint256 burnedAmount)",
      "event BondCharged(uint256 indexed nodeOperatorId, uint256 toChargeAmount, uint256 chargedAmount)",
      "event BondClaimedStETH(uint256 indexed nodeOperatorId, address to, uint256 amount)",
      "event BondClaimedUnstETH(uint256 indexed nodeOperatorId, address to, uint256 amount, uint256 requestId)",
      "event BondClaimedWstETH(uint256 indexed nodeOperatorId, address to, uint256 amount)",
      "event BondCurveAdded(uint256 indexed curveId, tuple(uint256 minKeysCount, uint256 trend)[] bondCurveIntervals)",
      "event BondCurveSet(uint256 indexed nodeOperatorId, uint256 curveId)",
      "event BondCurveUpdated(uint256 indexed curveId, tuple(uint256 minKeysCount, uint256 trend)[] bondCurveIntervals)",
      "event BondDepositedETH(uint256 indexed nodeOperatorId, address from, uint256 amount)",
      "event BondDepositedStETH(uint256 indexed nodeOperatorId, address from, uint256 amount)",
      "event BondDepositedWstETH(uint256 indexed nodeOperatorId, address from, uint256 amount)",
      "event BondLockChanged(uint256 indexed nodeOperatorId, uint256 newAmount, uint256 until)",
      "event BondLockCompensated(uint256 indexed nodeOperatorId, uint256 amount)",
      "event BondLockPeriodChanged(uint256 period)",
      "event BondLockRemoved(uint256 indexed nodeOperatorId)",
      "event ChargePenaltyRecipientSet(address chargePenaltyRecipient)",
      "event ERC1155Recovered(address indexed token, uint256 tokenId, address indexed recipient, uint256 amount)",
      "event ERC20Recovered(address indexed token, address indexed recipient, uint256 amount)",
      "event ERC721Recovered(address indexed token, uint256 tokenId, address indexed recipient)",
      "event EtherRecovered(address indexed recipient, uint256 amount)",
      "event Initialized(uint64 version)",
      "event Paused(uint256 duration)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StETHSharesRecovered(address indexed recipient, uint256 shares)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DEFAULT_BOND_CURVE_ID() view returns (uint256)",
      "function FEE_DISTRIBUTOR() view returns (address)",
      "function LIDO() view returns (address)",
      "function LIDO_LOCATOR() view returns (address)",
      "function MANAGE_BOND_CURVES_ROLE() view returns (bytes32)",
      "function MAX_BOND_LOCK_PERIOD() view returns (uint256)",
      "function MAX_CURVE_LENGTH() view returns (uint256)",
      "function MIN_BOND_LOCK_PERIOD() view returns (uint256)",
      "function MIN_CURVE_LENGTH() view returns (uint256)",
      "function MODULE() view returns (address)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function RECOVERER_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function SET_BOND_CURVE_ROLE() view returns (bytes32)",
      "function WITHDRAWAL_QUEUE() view returns (address)",
      "function WSTETH() view returns (address)",
      "function addBondCurve(tuple(uint256 minKeysCount, uint256 trend)[] bondCurve) returns (uint256 id)",
      "function chargeFee(uint256 nodeOperatorId, uint256 amount)",
      "function chargePenaltyRecipient() view returns (address)",
      "function claimRewardsStETH(uint256 nodeOperatorId, uint256 stETHAmount, uint256 cumulativeFeeShares, bytes32[] rewardsProof) returns (uint256 claimedShares)",
      "function claimRewardsUnstETH(uint256 nodeOperatorId, uint256 stETHAmount, uint256 cumulativeFeeShares, bytes32[] rewardsProof) returns (uint256 requestId)",
      "function claimRewardsWstETH(uint256 nodeOperatorId, uint256 wstETHAmount, uint256 cumulativeFeeShares, bytes32[] rewardsProof) returns (uint256 claimedWstETH)",
      "function compensateLockedBondETH(uint256 nodeOperatorId) payable",
      "function depositETH(address from, uint256 nodeOperatorId) payable",
      "function depositETH(uint256 nodeOperatorId) payable",
      "function depositStETH(address from, uint256 nodeOperatorId, uint256 stETHAmount, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit)",
      "function depositStETH(uint256 nodeOperatorId, uint256 stETHAmount, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit)",
      "function depositWstETH(uint256 nodeOperatorId, uint256 wstETHAmount, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit)",
      "function depositWstETH(address from, uint256 nodeOperatorId, uint256 wstETHAmount, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit)",
      "function feeDistributor() view returns (address)",
      "function finalizeUpgradeV2(tuple(uint256 minKeysCount, uint256 trend)[][] bondCurvesInputs)",
      "function getActualLockedBond(uint256 nodeOperatorId) view returns (uint256)",
      "function getBond(uint256 nodeOperatorId) view returns (uint256)",
      "function getBondAmountByKeysCount(uint256 keys, uint256 curveId) view returns (uint256)",
      "function getBondAmountByKeysCountWstETH(uint256 keysCount, uint256 curveId) view returns (uint256)",
      "function getBondCurve(uint256 nodeOperatorId) view returns (tuple(tuple(uint256 minKeysCount, uint256 minBond, uint256 trend)[] intervals))",
      "function getBondCurveId(uint256 nodeOperatorId) view returns (uint256)",
      "function getBondLockPeriod() view returns (uint256)",
      "function getBondShares(uint256 nodeOperatorId) view returns (uint256)",
      "function getBondSummary(uint256 nodeOperatorId) view returns (uint256 current, uint256 required)",
      "function getBondSummaryShares(uint256 nodeOperatorId) view returns (uint256 current, uint256 required)",
      "function getClaimableBondShares(uint256 nodeOperatorId) view returns (uint256)",
      "function getClaimableRewardsAndBondShares(uint256 nodeOperatorId, uint256 cumulativeFeeShares, bytes32[] rewardsProof) view returns (uint256 claimableShares)",
      "function getCurveInfo(uint256 curveId) view returns (tuple(tuple(uint256 minKeysCount, uint256 minBond, uint256 trend)[] intervals))",
      "function getCurvesCount() view returns (uint256)",
      "function getInitializedVersion() view returns (uint64)",
      "function getKeysCountByBondAmount(uint256 amount, uint256 curveId) view returns (uint256)",
      "function getLockedBondInfo(uint256 nodeOperatorId) view returns (tuple(uint128 amount, uint128 until))",
      "function getRequiredBondForNextKeys(uint256 nodeOperatorId, uint256 additionalKeys) view returns (uint256)",
      "function getRequiredBondForNextKeysWstETH(uint256 nodeOperatorId, uint256 additionalKeys) view returns (uint256)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getUnbondedKeysCount(uint256 nodeOperatorId) view returns (uint256)",
      "function getUnbondedKeysCountToEject(uint256 nodeOperatorId) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(tuple(uint256 minKeysCount, uint256 trend)[] bondCurve, address admin, uint256 bondLockPeriod, address _chargePenaltyRecipient)",
      "function isPaused() view returns (bool)",
      "function lockBondETH(uint256 nodeOperatorId, uint256 amount)",
      "function pauseFor(uint256 duration)",
      "function penalize(uint256 nodeOperatorId, uint256 amount)",
      "function pullFeeRewards(uint256 nodeOperatorId, uint256 cumulativeFeeShares, bytes32[] rewardsProof)",
      "function recoverERC1155(address token, uint256 tokenId)",
      "function recoverERC20(address token, uint256 amount)",
      "function recoverERC721(address token, uint256 tokenId)",
      "function recoverEther()",
      "function recoverStETHShares()",
      "function releaseLockedBondETH(uint256 nodeOperatorId, uint256 amount)",
      "function renewBurnerAllowance()",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function setBondCurve(uint256 nodeOperatorId, uint256 curveId)",
      "function setBondLockPeriod(uint256 period)",
      "function setChargePenaltyRecipient(address _chargePenaltyRecipient)",
      "function settleLockedBondETH(uint256 nodeOperatorId) returns (bool applied)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function totalBondShares() view returns (uint256)",
      "function updateBondCurve(uint256 curveId, tuple(uint256 minKeysCount, uint256 trend)[] bondCurve)"
    ],
    "eth:0x71093efF8D8599b5fA340D665Ad60fA7C80688e4": [
      "constructor(uint256 slotsPerEpoch, uint256 secondsPerSlot, uint256 genesisTime, uint256 epochsPerFrame, uint256 fastLaneLengthSlots, address admin, address reportProcessor)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AddressCannotBeZero()",
      "error AdminCannotBeZero()",
      "error ConsensusReportAlreadyProcessing()",
      "error DuplicateMember()",
      "error DuplicateReport()",
      "error EmptyReport()",
      "error EpochsPerFrameCannotBeZero()",
      "error FastLanePeriodCannotBeLongerThanFrame()",
      "error InitialEpochAlreadyArrived()",
      "error InitialEpochIsYetToArrive()",
      "error InitialEpochRefSlotCannotBeEarlierThanProcessingSlot()",
      "error InvalidChainConfig()",
      "error InvalidInitialization()",
      "error InvalidSlot()",
      "error NewProcessorCannotBeTheSame()",
      "error NonFastLaneMemberCannotReportWithinFastLaneInterval()",
      "error NonMember()",
      "error NotInitializing()",
      "error NumericOverflow()",
      "error QuorumTooSmall(uint256 minQuorum, uint256 receivedQuorum)",
      "error ReportProcessorCannotBeZero()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error StaleReport()",
      "error UnexpectedConsensusVersion(uint256 expected, uint256 received)",
      "event ConsensusLost(uint256 indexed refSlot)",
      "event ConsensusReached(uint256 indexed refSlot, bytes32 report, uint256 support)",
      "event FastLaneConfigSet(uint256 fastLaneLengthSlots)",
      "event FrameConfigSet(uint256 newInitialEpoch, uint256 newEpochsPerFrame)",
      "event Initialized(uint64 version)",
      "event MemberAdded(address indexed addr, uint256 newTotalMembers, uint256 newQuorum)",
      "event MemberRemoved(address indexed addr, uint256 newTotalMembers, uint256 newQuorum)",
      "event QuorumSet(uint256 newQuorum, uint256 totalMembers, uint256 prevQuorum)",
      "event ReportProcessorSet(address indexed processor, address indexed prevProcessor)",
      "event ReportReceived(uint256 indexed refSlot, address indexed member, bytes32 report)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DISABLE_CONSENSUS_ROLE() view returns (bytes32)",
      "function MANAGE_FAST_LANE_CONFIG_ROLE() view returns (bytes32)",
      "function MANAGE_FRAME_CONFIG_ROLE() view returns (bytes32)",
      "function MANAGE_MEMBERS_AND_QUORUM_ROLE() view returns (bytes32)",
      "function MANAGE_REPORT_PROCESSOR_ROLE() view returns (bytes32)",
      "function addMember(address addr, uint256 quorum)",
      "function disableConsensus()",
      "function getChainConfig() view returns (uint256 slotsPerEpoch, uint256 secondsPerSlot, uint256 genesisTime)",
      "function getConsensusState() view returns (uint256 refSlot, bytes32 consensusReport, bool isReportProcessing)",
      "function getConsensusStateForMember(address addr) view returns (tuple(uint256 currentFrameRefSlot, bytes32 currentFrameConsensusReport, bool isMember, bool isFastLane, bool canReport, uint256 lastMemberReportRefSlot, bytes32 currentFrameMemberReport) result)",
      "function getCurrentFrame() view returns (uint256 refSlot, uint256 reportProcessingDeadlineSlot)",
      "function getFastLaneMembers() view returns (address[] addresses, uint256[] lastReportedRefSlots)",
      "function getFrameConfig() view returns (uint256 initialEpoch, uint256 epochsPerFrame, uint256 fastLaneLengthSlots)",
      "function getInitialRefSlot() view returns (uint256)",
      "function getIsFastLaneMember(address addr) view returns (bool)",
      "function getIsMember(address addr) view returns (bool)",
      "function getMembers() view returns (address[] addresses, uint256[] lastReportedRefSlots)",
      "function getQuorum() view returns (uint256)",
      "function getReportProcessor() view returns (address)",
      "function getReportVariants() view returns (bytes32[] variants, uint256[] support)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function removeMember(address addr, uint256 quorum)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function setFastLaneLengthSlots(uint256 fastLaneLengthSlots)",
      "function setFrameConfig(uint256 epochsPerFrame, uint256 fastLaneLengthSlots)",
      "function setQuorum(uint256 quorum)",
      "function setReportProcessor(address newProcessor)",
      "function submitReport(uint256 slot, bytes32 report, uint256 consensusVersion)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateInitialEpoch(uint256 initialEpoch)"
    ],
    "eth:0x7914b5a1539b97Bd0bbd155757F25FD79A522d24": [
      "constructor(address emergencyProtectedTimelock)",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error CallerIsNotGovernance(address caller)",
      "error FailedInnerCall()",
      "error SealableWrongPauseState()",
      "function EMERGENCY_PROTECTED_TIMELOCK() view returns (address)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function reseal(address sealable)",
      "function resume(address sealable)"
    ],
    "eth:0x7D2BAa6094E1C4B60Da4cbAF4A77C3f4694fD53D": [
      "constructor(address _lido, address _treasury, address _triggerableWithdrawalsGateway)",
      "error ArraysLengthMismatch(uint256 firstArrayLength, uint256 secondArrayLength)",
      "error FeeInvalidData()",
      "error FeeReadFailed()",
      "error IncorrectFee(uint256 requiredFee, uint256 providedFee)",
      "error InvalidContractVersionIncrement()",
      "error NonZeroContractVersionOnInit()",
      "error NotEnoughEther(uint256 requested, uint256 balance)",
      "error NotLido()",
      "error NotTriggerableWithdrawalsGateway()",
      "error RequestAdditionFailed(bytes callData)",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error ZeroAddress()",
      "error ZeroAmount()",
      "error ZeroArgument(string name)",
      "event ContractVersionSet(uint256 version)",
      "event ERC20Recovered(address indexed requestedBy, address indexed token, uint256 amount)",
      "event ERC721Recovered(address indexed requestedBy, address indexed token, uint256 tokenId)",
      "event WithdrawalRequestAdded(bytes request)",
      "function LIDO() view returns (address)",
      "function TREASURY() view returns (address)",
      "function TRIGGERABLE_WITHDRAWALS_GATEWAY() view returns (address)",
      "function WITHDRAWAL_REQUEST() view returns (address)",
      "function addWithdrawalRequests(bytes[] pubkeys, uint64[] amounts) payable",
      "function finalizeUpgrade_v2()",
      "function getContractVersion() view returns (uint256)",
      "function getWithdrawalRequestFee() view returns (uint256)",
      "function initialize()",
      "function recoverERC20(address _token, uint256 _amount)",
      "function recoverERC721(address _token, uint256 _tokenId)",
      "function withdrawWithdrawals(uint256 _amount)"
    ],
    "eth:0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0": [
      "constructor(address _stETH)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function getStETHByWstETH(uint256 _wstETHAmount) view returns (uint256)",
      "function getWstETHByStETH(uint256 _stETHAmount) view returns (uint256)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function stETH() view returns (address)",
      "function stEthPerToken() view returns (uint256)",
      "function symbol() view returns (string)",
      "function tokensPerStEth() view returns (uint256)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function unwrap(uint256 _wstETHAmount) returns (uint256)",
      "function wrap(uint256 _stETHAmount) returns (uint256)"
    ],
    "eth:0x7FaDB6358950c5fAA66Cb5EB8eE5147De3df355a": [
      "constructor(uint256 slotsPerEpoch, uint256 secondsPerSlot, uint256 genesisTime, uint256 epochsPerFrame, uint256 fastLaneLengthSlots, address admin, address reportProcessor)",
      "error AddressCannotBeZero()",
      "error AdminCannotBeZero()",
      "error ConsensusReportAlreadyProcessing()",
      "error DuplicateMember()",
      "error DuplicateReport()",
      "error EmptyReport()",
      "error EpochsPerFrameCannotBeZero()",
      "error FastLanePeriodCannotBeLongerThanFrame()",
      "error InitialEpochAlreadyArrived()",
      "error InitialEpochIsYetToArrive()",
      "error InitialEpochRefSlotCannotBeEarlierThanProcessingSlot()",
      "error InvalidChainConfig()",
      "error InvalidSlot()",
      "error NewProcessorCannotBeTheSame()",
      "error NonFastLaneMemberCannotReportWithinFastLaneInterval()",
      "error NonMember()",
      "error NumericOverflow()",
      "error QuorumTooSmall(uint256 minQuorum, uint256 receivedQuorum)",
      "error ReportProcessorCannotBeZero()",
      "error StaleReport()",
      "error UnexpectedConsensusVersion(uint256 expected, uint256 received)",
      "event ConsensusLost(uint256 indexed refSlot)",
      "event ConsensusReached(uint256 indexed refSlot, bytes32 report, uint256 support)",
      "event FastLaneConfigSet(uint256 fastLaneLengthSlots)",
      "event FrameConfigSet(uint256 newInitialEpoch, uint256 newEpochsPerFrame)",
      "event MemberAdded(address indexed addr, uint256 newTotalMembers, uint256 newQuorum)",
      "event MemberRemoved(address indexed addr, uint256 newTotalMembers, uint256 newQuorum)",
      "event QuorumSet(uint256 newQuorum, uint256 totalMembers, uint256 prevQuorum)",
      "event ReportProcessorSet(address indexed processor, address indexed prevProcessor)",
      "event ReportReceived(uint256 indexed refSlot, address indexed member, bytes32 report)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DISABLE_CONSENSUS_ROLE() view returns (bytes32)",
      "function MANAGE_FAST_LANE_CONFIG_ROLE() view returns (bytes32)",
      "function MANAGE_FRAME_CONFIG_ROLE() view returns (bytes32)",
      "function MANAGE_MEMBERS_AND_QUORUM_ROLE() view returns (bytes32)",
      "function MANAGE_REPORT_PROCESSOR_ROLE() view returns (bytes32)",
      "function addMember(address addr, uint256 quorum)",
      "function disableConsensus()",
      "function getChainConfig() view returns (uint256 slotsPerEpoch, uint256 secondsPerSlot, uint256 genesisTime)",
      "function getConsensusState() view returns (uint256 refSlot, bytes32 consensusReport, bool isReportProcessing)",
      "function getConsensusStateForMember(address addr) view returns (tuple(uint256 currentFrameRefSlot, bytes32 currentFrameConsensusReport, bool isMember, bool isFastLane, bool canReport, uint256 lastMemberReportRefSlot, bytes32 currentFrameMemberReport) result)",
      "function getCurrentFrame() view returns (uint256 refSlot, uint256 reportProcessingDeadlineSlot)",
      "function getFastLaneMembers() view returns (address[] addresses, uint256[] lastReportedRefSlots)",
      "function getFrameConfig() view returns (uint256 initialEpoch, uint256 epochsPerFrame, uint256 fastLaneLengthSlots)",
      "function getInitialRefSlot() view returns (uint256)",
      "function getIsFastLaneMember(address addr) view returns (bool)",
      "function getIsMember(address addr) view returns (bool)",
      "function getMembers() view returns (address[] addresses, uint256[] lastReportedRefSlots)",
      "function getQuorum() view returns (uint256)",
      "function getReportProcessor() view returns (address)",
      "function getReportVariants() view returns (bytes32[] variants, uint256[] support)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function removeMember(address addr, uint256 quorum)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setFastLaneLengthSlots(uint256 fastLaneLengthSlots)",
      "function setFrameConfig(uint256 epochsPerFrame, uint256 fastLaneLengthSlots)",
      "function setQuorum(uint256 quorum)",
      "function setReportProcessor(address newProcessor)",
      "function submitReport(uint256 slot, bytes32 report, uint256 consensusVersion)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateInitialEpoch(uint256 initialEpoch)"
    ],
    "eth:0x836835289A2E81B66AE5d95b7c8dBC0480dCf9da": [
      "function hasInitialized() view returns (bool)",
      "function CREATE_PAYMENTS_ROLE() view returns (bytes32)",
      "function newScheduledPayment(address _token, address _receiver, uint256 _amount, uint64 _initialPaymentTime, uint64 _interval, uint64 _maxExecutions, string _reference) returns (uint256 paymentId)",
      "function executePayment(uint256 _paymentId)",
      "function initialize(address _vault, uint64 _periodDuration)",
      "function removeBudget(address _token)",
      "function getBudget(address _token) view returns (uint256 budget, bool hasBudget)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function setPaymentStatus(uint256 _paymentId, bool _active)",
      "function getPayment(uint256 _paymentId) view returns (address token, address receiver, uint256 amount, uint64 initialPaymentTime, uint64 interval, uint64 maxExecutions, bool inactive, uint64 executions, address createdBy)",
      "function getRecoveryVault() view returns (address)",
      "function getTransaction(uint256 _transactionId) view returns (uint64 periodId, uint256 amount, uint256 paymentId, uint64 paymentExecutionNumber, address token, address entity, bool isIncoming, uint64 date)",
      "function CHANGE_PERIOD_ROLE() view returns (bytes32)",
      "function CHANGE_BUDGETS_ROLE() view returns (bytes32)",
      "function receiverExecutePayment(uint256 _paymentId)",
      "function getPeriod(uint64 _periodId) view returns (bool isCurrent, uint64 startTime, uint64 endTime, uint256 firstTransactionId, uint256 lastTransactionId)",
      "function setPeriodDuration(uint64 _periodDuration)",
      "function periodsLength() view returns (uint64)",
      "function setBudget(address _token, uint256 _amount)",
      "function allowRecoverability(address) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function getInitializationBlock() view returns (uint256)",
      "function recoverToVault(address _token)",
      "function EXECUTE_PAYMENTS_ROLE() view returns (bytes32)",
      "function currentPeriodId() view returns (uint64)",
      "function transferToVault(address _token)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function tryTransitionAccountingPeriod(uint64 _maxTransitions) returns (bool success)",
      "function getPeriodDuration() view returns (uint64)",
      "function deposit(address _token, uint256 _amount, string _reference) payable",
      "function nextPaymentTime(uint256 _paymentId) view returns (uint64)",
      "function getPeriodTokenStatement(uint64 _periodId, address _token) view returns (uint256 expenses, uint256 income)",
      "function kernel() view returns (address)",
      "function paymentsNextIndex() view returns (uint256)",
      "function isPetrified() view returns (bool)",
      "function canMakePayment(address _token, uint256 _amount) view returns (bool)",
      "function MANAGE_PAYMENTS_ROLE() view returns (bytes32)",
      "function transactionsNextIndex() view returns (uint256)",
      "function getRemainingBudget(address _token) view returns (uint256)",
      "function newImmediatePayment(address _token, address _receiver, uint256 _amount, string _reference)",
      "function vault() view returns (address)",
      "event NewPeriod(uint64 indexed periodId, uint64 periodStarts, uint64 periodEnds)",
      "event SetBudget(address indexed token, uint256 amount, bool hasBudget)",
      "event NewPayment(uint256 indexed paymentId, address indexed recipient, uint64 maxExecutions, string reference)",
      "event NewTransaction(uint256 indexed transactionId, bool incoming, address indexed entity, uint256 amount, string reference)",
      "event ChangePaymentState(uint256 indexed paymentId, bool active)",
      "event ChangePeriodDuration(uint64 newDuration)",
      "event PaymentFailure(uint256 paymentId)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)"
    ],
    "eth:0x852deD011285fe67063a08005c71a85690503Cee": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "eth:0x853cc0D5917f49B57B8e9F89e491F5E18919093A": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0x8772E3a2D86B9347A2688f9bc1808A6d8917760C": [
      "constructor(address _singleton)"
    ],
    "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "eth:0x8A854C4E750CDf24f138f34A9061b2f556066912": [
      "event Sealed(address gate_seal, address sealed_by, uint256 sealed_for, address sealable, uint256 sealed_at)",
      "constructor(address _sealing_committee, uint256 _seal_duration_seconds, address[] _sealables, uint256 _expiry_timestamp)",
      "function get_sealing_committee() view returns (address)",
      "function get_seal_duration_seconds() view returns (uint256)",
      "function get_sealables() view returns (address[])",
      "function get_expiry_timestamp() view returns (uint256)",
      "function is_expired() view returns (bool)",
      "function seal(address[] _sealables)"
    ],
    "eth:0x8B7854488Fde088d686Ea672B6ba1A5242515f45": [
      "constructor(address _singleton)"
    ],
    "eth:0x8ed4dfd3A610CCF1FB45e797bf5D8e0f93084F22": [
      "constructor(address _singleton)"
    ],
    "eth:0x8F73e4C2A6D852bb4ab2A45E6a9CF5715b3228B7": [
      "constructor(address _stETH)",
      "error ZeroStETHAddress()",
      "function domainSeparatorV4(address _stETH) view returns (bytes32)",
      "function eip712Domain(address _stETH) view returns (string name, string version, uint256 chainId, address verifyingContract)",
      "function hashTypedDataV4(address _stETH, bytes32 _structHash) view returns (bytes32)"
    ],
    "eth:0x905A211eD6830Cfc95643f0bE2ff64E7f3bf9b94": [
      "constructor(uint256 secondsPerSlot, uint256 genesisTime, address lidoLocator)",
      "error AddressCannotBeSame()",
      "error AddressCannotBeZero()",
      "error AdminCannotBeZero()",
      "error ExitDataIndexOutOfRange(uint256 exitDataIndex, uint256 requestsCount)",
      "error ExitHashAlreadySubmitted()",
      "error ExitHashNotSubmitted()",
      "error ExitRequestsLimitExceeded(uint256 requestsCount, uint256 remainingLimit)",
      "error HashCannotBeZero()",
      "error InitialRefSlotCannotBeLessThanProcessingOne(uint256 initialRefSlot, uint256 processingRefSlot)",
      "error InvalidContractVersionIncrement()",
      "error InvalidExitDataIndexSortOrder()",
      "error InvalidModuleId()",
      "error InvalidRequestsDataLength()",
      "error InvalidRequestsDataSortOrder()",
      "error LimitExceeded()",
      "error NoConsensusReportToProcess()",
      "error NonZeroContractVersionOnInit()",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error ProcessingDeadlineMissed(uint256 deadline)",
      "error RefSlotAlreadyProcessing()",
      "error RefSlotCannotDecrease(uint256 refSlot, uint256 prevRefSlot)",
      "error RefSlotMustBeGreaterThanProcessingOne(uint256 refSlot, uint256 processingRefSlot)",
      "error RequestsAlreadyDelivered()",
      "error RequestsNotDelivered()",
      "error ResumedExpected()",
      "error SecondsPerSlotCannotBeZero()",
      "error SenderIsNotTheConsensusContract()",
      "error SenderNotAllowed()",
      "error TooLargeExitsPerFrame()",
      "error TooLargeFrameDuration()",
      "error TooLargeMaxExitRequestsLimit()",
      "error TooManyExitRequestsInReport(uint256 requestsCount, uint256 maxRequestsPerReport)",
      "error UnexpectedChainConfig()",
      "error UnexpectedConsensusVersion(uint256 expectedVersion, uint256 receivedVersion)",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error UnexpectedDataHash(bytes32 consensusHash, bytes32 receivedHash)",
      "error UnexpectedRefSlot(uint256 consensusRefSlot, uint256 dataRefSlot)",
      "error UnexpectedRequestsDataLength()",
      "error UnsupportedRequestsDataFormat(uint256 format)",
      "error VersionCannotBeSame()",
      "error ZeroArgument(string name)",
      "error ZeroFrameDuration()",
      "error ZeroPauseDuration()",
      "event ConsensusHashContractSet(address indexed addr, address indexed prevAddr)",
      "event ConsensusVersionSet(uint256 indexed version, uint256 indexed prevVersion)",
      "event ContractVersionSet(uint256 version)",
      "event ExitDataProcessing(bytes32 exitRequestsHash)",
      "event ExitRequestsLimitSet(uint256 maxExitRequestsLimit, uint256 exitsPerFrame, uint256 frameDurationInSec)",
      "event Paused(uint256 duration)",
      "event ProcessingStarted(uint256 indexed refSlot, bytes32 hash)",
      "event ReportDiscarded(uint256 indexed refSlot, bytes32 hash)",
      "event ReportSubmitted(uint256 indexed refSlot, bytes32 hash, uint256 processingDeadlineTime)",
      "event RequestsHashSubmitted(bytes32 exitRequestsHash)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SetMaxValidatorsPerReport(uint256 maxValidatorsPerReport)",
      "event ValidatorExitRequest(uint256 indexed stakingModuleId, uint256 indexed nodeOperatorId, uint256 indexed validatorIndex, bytes validatorPubkey, uint256 timestamp)",
      "event WarnDataIncompleteProcessing(uint256 indexed refSlot, uint256 requestsProcessed, uint256 requestsCount)",
      "event WarnProcessingMissed(uint256 indexed refSlot)",
      "function DATA_FORMAT_LIST() view returns (uint256)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXIT_REQUEST_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function EXIT_TYPE() view returns (uint256)",
      "function GENESIS_TIME() view returns (uint256)",
      "function MANAGE_CONSENSUS_CONTRACT_ROLE() view returns (bytes32)",
      "function MANAGE_CONSENSUS_VERSION_ROLE() view returns (bytes32)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function SECONDS_PER_SLOT() view returns (uint256)",
      "function SUBMIT_DATA_ROLE() view returns (bytes32)",
      "function SUBMIT_REPORT_HASH_ROLE() view returns (bytes32)",
      "function discardConsensusReport(uint256 refSlot)",
      "function finalizeUpgrade_v2(uint256 maxValidatorsPerReport, uint256 maxExitRequestsLimit, uint256 exitsPerFrame, uint256 frameDurationInSec)",
      "function getConsensusContract() view returns (address)",
      "function getConsensusReport() view returns (bytes32 hash, uint256 refSlot, uint256 processingDeadlineTime, bool processingStarted)",
      "function getConsensusVersion() view returns (uint256)",
      "function getContractVersion() view returns (uint256)",
      "function getDeliveryTimestamp(bytes32 exitRequestsHash) view returns (uint256 deliveryDateTimestamp)",
      "function getExitRequestLimitFullInfo() view returns (uint256 maxExitRequestsLimit, uint256 exitsPerFrame, uint256 frameDurationInSec, uint256 prevExitRequestsLimit, uint256 currentExitRequestsLimit)",
      "function getLastProcessingRefSlot() view returns (uint256)",
      "function getMaxValidatorsPerReport() view returns (uint256)",
      "function getProcessingState() view returns (tuple(uint256 currentFrameRefSlot, uint256 processingDeadlineTime, bytes32 dataHash, bool dataSubmitted, uint256 dataFormat, uint256 requestsCount, uint256 requestsSubmitted) result)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getTotalRequestsProcessed() view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address consensusContract, uint256 consensusVersion, uint256 lastProcessingRefSlot, uint256 maxValidatorsPerRequest, uint256 maxExitRequestsLimit, uint256 exitsPerFrame, uint256 frameDurationInSec)",
      "function isPaused() view returns (bool)",
      "function pauseFor(uint256 _duration)",
      "function pauseUntil(uint256 _pauseUntilInclusive)",
      "function renounceRole(bytes32 role, address account)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function setConsensusContract(address addr)",
      "function setConsensusVersion(uint256 version)",
      "function setExitRequestLimit(uint256 maxExitRequestsLimit, uint256 exitsPerFrame, uint256 frameDurationInSec)",
      "function setMaxValidatorsPerReport(uint256 maxRequests)",
      "function submitConsensusReport(bytes32 reportHash, uint256 refSlot, uint256 deadline)",
      "function submitExitRequestsData(tuple(bytes data, uint256 dataFormat) request)",
      "function submitExitRequestsHash(bytes32 exitRequestsHash)",
      "function submitReportData(tuple(uint256 consensusVersion, uint256 refSlot, uint256 requestsCount, uint256 dataFormat, bytes data) data, uint256 contractVersion)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function triggerExits(tuple(bytes data, uint256 dataFormat) exitsData, uint256[] exitDataIndexes, address refundRecipient) payable",
      "function unpackExitRequest(bytes exitRequests, uint256 dataFormat, uint256 index) pure returns (bytes pubkey, uint256 nodeOpId, uint256 moduleId, uint256 valIndex)"
    ],
    "eth:0x909d05F384D0663eD4BE59863815aB43b4f347Ec": [
      "function createCloneToken(address _parentToken, uint256 _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled) returns (address)"
    ],
    "eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0x9D28ad303C90DF524BA960d7a2DAC56DcC31e428": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_)"
    ],
    "eth:0x9f3b9198911054B122fDb865f8A5Ac516201c339": [
      "function hasInitialized() view returns (bool)",
      "function createBurnedPermission(address _app, bytes32 _role)",
      "function burnPermissionManager(address _app, bytes32 _role)",
      "function grantPermission(address _entity, address _app, bytes32 _role)",
      "function getPermissionParamsLength(address _entity, address _app, bytes32 _role) view returns (uint256)",
      "function evalParams(bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how) view returns (bool)",
      "function NO_PERMISSION() view returns (bytes32)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function CREATE_PERMISSIONS_ROLE() view returns (bytes32)",
      "function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)",
      "function hasPermission(address _who, address _where, bytes32 _what) view returns (bool)",
      "function allowRecoverability(address token) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function getInitializationBlock() view returns (uint256)",
      "function revokePermission(address _entity, address _app, bytes32 _role)",
      "function transferToVault(address _token)",
      "function getPermissionParam(address _entity, address _app, bytes32 _role, uint256 _index) view returns (uint8, uint8, uint240)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function ANY_ENTITY() view returns (address)",
      "function removePermissionManager(address _app, bytes32 _role)",
      "function setPermissionManager(address _newManager, address _app, bytes32 _role)",
      "function getPermissionManager(address _app, bytes32 _role) view returns (address)",
      "function createPermission(address _entity, address _app, bytes32 _role, address _manager)",
      "function initialize(address _permissionsCreator)",
      "function EMPTY_PARAM_HASH() view returns (bytes32)",
      "function kernel() view returns (address)",
      "function isPetrified() view returns (bool)",
      "function BURN_ENTITY() view returns (address)",
      "function hasPermission(address _who, address _where, bytes32 _what, uint256[] _how) view returns (bool)",
      "function hasPermission(address _who, address _where, bytes32 _what, bytes _how) view returns (bool)",
      "event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed)",
      "event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash)",
      "event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)"
    ],
    "eth:0xa1692Af6FDfdD1030E4E9c4Bc429986FA64CB5EF": [
      "constructor(tuple(uint128 firstSealRageQuitSupport, uint128 secondSealRageQuitSupport, uint32 minAssetsLockDuration, uint32 vetoSignallingMinDuration, uint32 vetoSignallingMaxDuration, uint32 vetoSignallingMinActiveDuration, uint32 vetoSignallingDeactivationMaxDuration, uint32 vetoCooldownDuration, uint32 rageQuitExtensionPeriodDuration, uint32 rageQuitEthWithdrawalsMinDelay, uint32 rageQuitEthWithdrawalsMaxDelay, uint32 rageQuitEthWithdrawalsDelayGrowth) dualGovernanceConfig)",
      "error InvalidMinAssetsLockDuration(uint32 minAssetsLockDuration)",
      "error InvalidRageQuitEthWithdrawalsDelayRange(uint32 rageQuitEthWithdrawalsMinDelay, uint32 rageQuitEthWithdrawalsMaxDelay)",
      "error InvalidRageQuitSupportRange(uint128 firstSealRageQuitSupport, uint128 secondSealRageQuitSupport)",
      "error InvalidSecondSealRageQuitSupport(uint128 secondSealRageQuitSupport)",
      "error InvalidVetoSignallingDurationRange(uint32 vetoSignallingMinDuration, uint32 vetoSignallingMaxDuration)",
      "error PercentD16Overflow()",
      "function FIRST_SEAL_RAGE_QUIT_SUPPORT() view returns (uint128)",
      "function MIN_ASSETS_LOCK_DURATION() view returns (uint32)",
      "function RAGE_QUIT_ETH_WITHDRAWALS_DELAY_GROWTH() view returns (uint32)",
      "function RAGE_QUIT_ETH_WITHDRAWALS_MAX_DELAY() view returns (uint32)",
      "function RAGE_QUIT_ETH_WITHDRAWALS_MIN_DELAY() view returns (uint32)",
      "function RAGE_QUIT_EXTENSION_PERIOD_DURATION() view returns (uint32)",
      "function SECOND_SEAL_RAGE_QUIT_SUPPORT() view returns (uint128)",
      "function VETO_COOLDOWN_DURATION() view returns (uint32)",
      "function VETO_SIGNALLING_DEACTIVATION_MAX_DURATION() view returns (uint32)",
      "function VETO_SIGNALLING_MAX_DURATION() view returns (uint32)",
      "function VETO_SIGNALLING_MIN_ACTIVE_DURATION() view returns (uint32)",
      "function VETO_SIGNALLING_MIN_DURATION() view returns (uint32)",
      "function getDualGovernanceConfig() view returns (tuple(uint128 firstSealRageQuitSupport, uint128 secondSealRageQuitSupport, uint32 minAssetsLockDuration, uint32 vetoSignallingMinDuration, uint32 vetoSignallingMaxDuration, uint32 vetoSignallingMinActiveDuration, uint32 vetoSignallingDeactivationMaxDuration, uint32 vetoCooldownDuration, uint32 rageQuitExtensionPeriodDuration, uint32 rageQuitEthWithdrawalsMinDelay, uint32 rageQuitEthWithdrawalsMaxDelay, uint32 rageQuitEthWithdrawalsDelayGrowth) config)"
    ],
    "eth:0xa29b819654cE6224A222bb5f586920105E2D7E0E": [
      "function hasInitialized() view returns (bool)",
      "function getVersion() view returns (uint256)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function initialize(address _lidoLocator, address _accountingOracleConsensusContract)",
      "function finalizeUpgrade_v4(address _accountingOracle)",
      "function getLastCompletedReportDelta() view returns (uint256 postTotalPooledEther, uint256 preTotalPooledEther, uint256 timeElapsed)",
      "function getLido() view returns (address)",
      "function getCurrentFrame() view returns (uint256 frameEpochId, uint256 frameStartTime, uint256 frameEndTime)",
      "function allowRecoverability(address token) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function handlePostTokenRebase(uint256, uint256 timeElapsed, uint256, uint256 preTotalEther, uint256 postTotalShares, uint256 postTotalEther, uint256)",
      "function getLastCompletedEpochId() view returns (uint256)",
      "function getContractVersion() view returns (uint256)",
      "function getInitializationBlock() view returns (uint256)",
      "function handleConsensusLayerReport(uint256 _refSlot, uint256 _clBalance, uint256 _clValidators)",
      "function transferToVault(address _token)",
      "function getAccountingOracle() view returns (address)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getCurrentEpochId() view returns (uint256)",
      "function getEVMScriptRegistry() view returns (address)",
      "function kernel() view returns (address)",
      "function isPetrified() view returns (bool)",
      "function getBeaconSpec() view returns (uint64 epochsPerFrame, uint64 slotsPerEpoch, uint64 secondsPerSlot, uint64 genesisTime)",
      "event Completed(uint256 epochId, uint128 beaconBalance, uint128 beaconValidators)",
      "event PostTotalShares(uint256 postTotalPooledEther, uint256 preTotalPooledEther, uint256 timeElapsed, uint256 totalShares)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)",
      "event ContractVersionSet(uint256 version)"
    ],
    "eth:0xA6BC802fAa064414AA62117B4a53D27fFfF741F1": [
      "event Sealed(address gate_seal, address sealed_by, uint256 sealed_for, address sealable, uint256 sealed_at)",
      "constructor(address _sealing_committee, uint256 _seal_duration_seconds, address[] _sealables, uint256 _expiry_timestamp)",
      "function get_sealing_committee() view returns (address)",
      "function get_seal_duration_seconds() view returns (uint256)",
      "function get_sealables() view returns (address[])",
      "function get_expiry_timestamp() view returns (uint256)",
      "function is_expired() view returns (bool)",
      "function seal(address[] _sealables)"
    ],
    "eth:0xaa328816027F2D32B9F56d190BC9Fa4A5C07637f": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_)"
    ],
    "eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0xB314D4A76C457c93150d308787939063F4Cc67E0": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_)"
    ],
    "eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function apps(bytes32, bytes32) view returns (address)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function recoveryVaultAppId() view returns (bytes32)",
      "constructor(address _kernelImpl)",
      "event ProxyDeposit(address sender, uint256 value)",
      "event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app)"
    ],
    "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f": [
      "constructor()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function implementation() view returns (address)",
      "function proxy_changeAdmin(address newAdmin)",
      "function proxy_getAdmin() view returns (address)",
      "function proxy_getIsOssified() view returns (bool)",
      "function proxy_upgradeTo(address newImplementation, bytes setupCalldata)"
    ],
    "eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0xbDb567672c867DB533119C2dcD4FB9d8b44EC82f": [
      "constructor(address lidoLocator, tuple(bytes32 gIFirstValidatorPrev, bytes32 gIFirstValidatorCurr, bytes32 gIFirstHistoricalSummaryPrev, bytes32 gIFirstHistoricalSummaryCurr, bytes32 gIFirstBlockRootInSummaryPrev, bytes32 gIFirstBlockRootInSummaryCurr) gIndices, uint64 firstSupportedSlot, uint64 pivotSlot, uint64 capellaSlot, uint64 slotsPerHistoricalRoot, uint32 slotsPerEpoch, uint32 secondsPerSlot, uint64 genesisTime, uint32 shardCommitteePeriodInSeconds)",
      "error ExitIsNotEligibleOnProvableBeaconBlock(uint256 provableBeaconBlockTimestamp, uint256 eligibleExitRequestTimestamp)",
      "error HistoricalSummaryDoesNotExist()",
      "error IndexOutOfRange()",
      "error InvalidBlockHeader()",
      "error InvalidCapellaSlot()",
      "error InvalidGIndex()",
      "error InvalidPerHistoricalRootSlot()",
      "error InvalidPivotSlot()",
      "error RootNotFound()",
      "error UnsupportedSlot(uint64 slot)",
      "error ZeroLidoLocatorAddress()",
      "function BEACON_ROOTS() view returns (address)",
      "function CAPELLA_SLOT() view returns (uint64)",
      "function FIRST_SUPPORTED_SLOT() view returns (uint64)",
      "function GENESIS_TIME() view returns (uint64)",
      "function GI_FIRST_BLOCK_ROOT_IN_SUMMARY_CURR() view returns (bytes32)",
      "function GI_FIRST_BLOCK_ROOT_IN_SUMMARY_PREV() view returns (bytes32)",
      "function GI_FIRST_HISTORICAL_SUMMARY_CURR() view returns (bytes32)",
      "function GI_FIRST_HISTORICAL_SUMMARY_PREV() view returns (bytes32)",
      "function GI_FIRST_VALIDATOR_CURR() view returns (bytes32)",
      "function GI_FIRST_VALIDATOR_PREV() view returns (bytes32)",
      "function LOCATOR() view returns (address)",
      "function PIVOT_SLOT() view returns (uint64)",
      "function SECONDS_PER_SLOT() view returns (uint32)",
      "function SHARD_COMMITTEE_PERIOD_IN_SECONDS() view returns (uint32)",
      "function SLOTS_PER_EPOCH() view returns (uint32)",
      "function SLOTS_PER_HISTORICAL_ROOT() view returns (uint64)",
      "function verifyHistoricalValidatorExitDelay(tuple(tuple(uint64 slot, uint64 proposerIndex, bytes32 parentRoot, bytes32 stateRoot, bytes32 bodyRoot) header, uint64 rootsTimestamp) beaconBlock, tuple(tuple(uint64 slot, uint64 proposerIndex, bytes32 parentRoot, bytes32 stateRoot, bytes32 bodyRoot) header, bytes32[] proof) oldBlock, tuple(uint32 exitRequestIndex, bytes32 withdrawalCredentials, uint64 effectiveBalance, bool slashed, uint64 activationEligibilityEpoch, uint64 activationEpoch, uint64 withdrawableEpoch, bytes32[] validatorProof)[] validatorWitnesses, tuple(bytes data, uint256 dataFormat) exitRequests)",
      "function verifyValidatorExitDelay(tuple(tuple(uint64 slot, uint64 proposerIndex, bytes32 parentRoot, bytes32 stateRoot, bytes32 bodyRoot) header, uint64 rootsTimestamp) beaconBlock, tuple(uint32 exitRequestIndex, bytes32 withdrawalCredentials, uint64 effectiveBalance, bool slashed, uint64 activationEligibilityEpoch, uint64 activationEpoch, uint64 withdrawableEpoch, bytes32[] validatorProof)[] validatorWitnesses, tuple(bytes data, uint256 dataFormat) exitRequests)"
    ],
    "eth:0xBF048f2111497B6Df5E062811f5fC422804D4baE": [
      "constructor(address owner, address[] committeeMembers, uint256 executionQuorum, address tiebreakerCoreCommittee)",
      "error AccountIsNotMember(address account)",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error CallerIsNotMember(address caller)",
      "error DuplicatedMember(address account)",
      "error FailedInnerCall()",
      "error HashAlreadyScheduled(bytes32 hash)",
      "error HashAlreadyUsed(bytes32 hash)",
      "error HashIsNotScheduled(bytes32 hash)",
      "error InvalidMemberAccount(address account)",
      "error InvalidQuorum()",
      "error InvalidTimelockDuration(uint32 timelock)",
      "error OffsetOutOfBounds()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ProposalDoesNotExist(bytes32 key)",
      "error QuorumIsNotReached()",
      "error TimelockNotPassed()",
      "error TimestampOverflow()",
      "event HashScheduled(bytes32 hash)",
      "event HashUsed(bytes32 hash)",
      "event MemberAdded(address indexed member)",
      "event MemberRemoved(address indexed member)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QuorumSet(uint256 quorum)",
      "event TimelockDurationSet(uint32 timelockDuration)",
      "event Voted(address indexed signer, bytes32 hash, bool support)",
      "function TIEBREAKER_CORE_COMMITTEE() view returns (address)",
      "function addMembers(address[] newMembers, uint256 executionQuorum)",
      "function approves(address signer, bytes32 hash) view returns (bool approve)",
      "function executeScheduleProposal(uint256 proposalId)",
      "function executeSealableResume(address sealable)",
      "function getMembers() view returns (address[])",
      "function getOrderedKeys(uint256 offset, uint256 limit) view returns (bytes32[])",
      "function getProposal(bytes32 key) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data))",
      "function getProposalAt(uint256 index) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data))",
      "function getProposals(uint256 offset, uint256 limit) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data)[] proposals)",
      "function getProposalsLength() view returns (uint256)",
      "function getQuorum() view returns (uint256)",
      "function getScheduleProposalState(uint256 proposalId) view returns (uint256 support, uint256 executionQuorum, uint40 quorumAt, bool isExecuted)",
      "function getSealableResumeState(address sealable) view returns (uint256 support, uint256 executionQuorum, uint40 quorumAt, bool isExecuted)",
      "function getTimelockDuration() view returns (uint32)",
      "function isMember(address member) view returns (bool)",
      "function owner() view returns (address)",
      "function removeMembers(address[] membersToRemove, uint256 executionQuorum)",
      "function renounceOwnership()",
      "function schedule(bytes32 hash)",
      "function scheduleProposal(uint256 proposalId)",
      "function sealableResume(address sealable)",
      "function setQuorum(uint256 newQuorum)",
      "function setTimelockDuration(uint32 newTimelock)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0xbf05A929c3D7885a6aeAd833a992dA6E5ac23b09": [
      "constructor(address _admin, address[] _configManagers)",
      "error EmptyValue(string key)",
      "error ValueDoesntExist(string key)",
      "error ValueExists(string key)",
      "error ValueIsSame(string key, bytes value)",
      "error ZeroAddress()",
      "event ConfigValueSet(string key, bytes value)",
      "event ConfigValueUnset(string key)",
      "event ConfigValueUpdated(string key, bytes value)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function CONFIG_MANAGER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function get(string _key) view returns (bytes)",
      "function getList(string[] _keys) view returns (bytes[])",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function set(string _key, bytes _value)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unset(string _key)",
      "function update(string _key, bytes _value)"
    ],
    "eth:0xBF1Ce0Bc4EdaAD8e576b3b55e19c4C15Cf6999eb": [
      "function getScriptExecutor(bytes _script) view returns (address)",
      "function hasInitialized() view returns (bool)",
      "function REGISTRY_ADD_EXECUTOR_ROLE() view returns (bytes32)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function disableScriptExecutor(uint256 _executorId)",
      "function allowRecoverability(address token) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function initialize()",
      "function addScriptExecutor(address _executor) returns (uint256 id)",
      "function getInitializationBlock() view returns (uint256)",
      "function transferToVault(address _token)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function REGISTRY_MANAGER_ROLE() view returns (bytes32)",
      "function enableScriptExecutor(uint256 _executorId)",
      "function kernel() view returns (address)",
      "function isPetrified() view returns (bool)",
      "function executors(uint256) view returns (address executor, bool enabled)",
      "event EnableExecutor(uint256 indexed executorId, address indexed executorAddress)",
      "event DisableExecutor(uint256 indexed executorId, address indexed executorAddress)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)"
    ],
    "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "eth:0xC1db28B3301331277e307FDCfF8DE28242A4486E": [
      "constructor(tuple(address timelock, address resealManager, address configProvider) components, tuple(address stETH, address wstETH, address withdrawalQueue) signallingTokens, tuple(uint256 minWithdrawalsBatchSize, uint32 minTiebreakerActivationTimeout, uint32 maxTiebreakerActivationTimeout, uint256 maxSealableWithdrawalBlockersCount, uint32 maxMinAssetsLockDuration) sanityCheckParams)",
      "error AlreadyInitialized()",
      "error CallerIsNotAdminExecutor(address caller)",
      "error CallerIsNotProposalsCanceller(address caller)",
      "error CallerIsNotResealCommittee(address caller)",
      "error CallerIsNotTiebreakerCommittee(address caller)",
      "error DurationOverflow()",
      "error DurationUnderflow()",
      "error ERC1167FailedCreateClone()",
      "error ExecutorNotRegistered(address executor)",
      "error IndexOneBasedOverflow()",
      "error IndexOneBasedUnderflow()",
      "error InvalidConfigProvider(address configProvider)",
      "error InvalidExecutor(address executor)",
      "error InvalidMinAssetsLockDuration(uint32 minAssetsLockDuration)",
      "error InvalidProposalsCanceller(address canceller)",
      "error InvalidProposerAccount(address proposerAccount)",
      "error InvalidRageQuitEthWithdrawalsDelayRange(uint32 rageQuitEthWithdrawalsMinDelay, uint32 rageQuitEthWithdrawalsMaxDelay)",
      "error InvalidRageQuitSupportRange(uint128 firstSealRageQuitSupport, uint128 secondSealRageQuitSupport)",
      "error InvalidResealCommittee(address resealCommittee)",
      "error InvalidResealManager(address resealManager)",
      "error InvalidSealable(address sealable)",
      "error InvalidSecondSealRageQuitSupport(uint128 secondSealRageQuitSupport)",
      "error InvalidTiebreakerActivationTimeout(uint32 timeout)",
      "error InvalidTiebreakerActivationTimeoutBounds(uint32 minTiebreakerActivationTimeout, uint32 maxTiebreakerActivationTimeout)",
      "error InvalidTiebreakerCommittee(address account)",
      "error InvalidVetoSignallingDurationRange(uint32 vetoSignallingMinDuration, uint32 vetoSignallingMaxDuration)",
      "error PercentD16Overflow()",
      "error PercentD16Underflow()",
      "error ProposalSchedulingBlocked(uint256 proposalId)",
      "error ProposalSubmissionBlocked()",
      "error ProposerAlreadyRegistered(address proposerAccount)",
      "error ProposerNotRegistered(address proposerAccount)",
      "error ResealIsNotAllowedInNormalState()",
      "error SealableWithdrawalBlockerAlreadyAdded(address sealable)",
      "error SealableWithdrawalBlockerNotFound(address sealable)",
      "error SealableWithdrawalBlockersLimitReached()",
      "error TiebreakNotAllowed()",
      "error TimestampOverflow()",
      "event CancelAllPendingProposalsExecuted()",
      "event CancelAllPendingProposalsSkipped()",
      "event ConfigProviderSet(address newConfigProvider)",
      "event DualGovernanceStateChanged(uint8 indexed from, uint8 indexed to, tuple(uint8 state, uint40 enteredAt, uint40 vetoSignallingActivatedAt, address signallingEscrow, uint8 rageQuitRound, uint40 vetoSignallingReactivationTime, uint40 normalOrVetoCooldownExitedAt, address rageQuitEscrow, address configProvider) state)",
      "event EscrowMasterCopyDeployed(address escrowMasterCopy)",
      "event NewSignallingEscrowDeployed(address indexed escrow)",
      "event ProposalSubmitted(address indexed proposerAccount, uint256 indexed proposalId, string metadata)",
      "event ProposalsCancellerSet(address proposalsCanceller)",
      "event ProposerExecutorSet(address indexed proposerAccount, address indexed executor)",
      "event ProposerRegistered(address indexed proposerAccount, address indexed executor)",
      "event ProposerUnregistered(address indexed proposerAccount, address indexed executor)",
      "event ResealCommitteeSet(address resealCommittee)",
      "event ResealManagerSet(address resealManager)",
      "event SealableWithdrawalBlockerAdded(address sealable)",
      "event SealableWithdrawalBlockerRemoved(address sealable)",
      "event TiebreakerActivationTimeoutSet(uint32 newTiebreakerActivationTimeout)",
      "event TiebreakerCommitteeSet(address newTiebreakerCommittee)",
      "function MAX_SEALABLE_WITHDRAWAL_BLOCKERS_COUNT() view returns (uint256)",
      "function MAX_TIEBREAKER_ACTIVATION_TIMEOUT() view returns (uint32)",
      "function MIN_TIEBREAKER_ACTIVATION_TIMEOUT() view returns (uint32)",
      "function TIMELOCK() view returns (address)",
      "function activateNextState()",
      "function addTiebreakerSealableWithdrawalBlocker(address sealableWithdrawalBlocker)",
      "function canCancelAllPendingProposals() view returns (bool)",
      "function canScheduleProposal(uint256 proposalId) view returns (bool)",
      "function canSubmitProposal() view returns (bool)",
      "function cancelAllPendingProposals() returns (bool)",
      "function getConfigProvider() view returns (address)",
      "function getEffectiveState() view returns (uint8 effectiveState)",
      "function getPersistedState() view returns (uint8 persistedState)",
      "function getProposalsCanceller() view returns (address)",
      "function getProposer(address proposerAccount) view returns (tuple(address account, address executor) proposer)",
      "function getProposers() view returns (tuple(address account, address executor)[] proposers)",
      "function getRageQuitEscrow() view returns (address)",
      "function getResealCommittee() view returns (address)",
      "function getResealManager() view returns (address)",
      "function getStateDetails() view returns (tuple(uint8 effectiveState, uint8 persistedState, uint40 persistedStateEnteredAt, uint40 vetoSignallingActivatedAt, uint40 vetoSignallingReactivationTime, uint40 normalOrVetoCooldownExitedAt, uint256 rageQuitRound, uint32 vetoSignallingDuration) stateDetails)",
      "function getTiebreakerDetails() view returns (tuple(bool isTie, address tiebreakerCommittee, uint32 tiebreakerActivationTimeout, address[] sealableWithdrawalBlockers) tiebreakerState)",
      "function getVetoSignallingEscrow() view returns (address)",
      "function isExecutor(address executor) view returns (bool)",
      "function isProposer(address proposerAccount) view returns (bool)",
      "function registerProposer(address proposerAccount, address executor)",
      "function removeTiebreakerSealableWithdrawalBlocker(address sealableWithdrawalBlocker)",
      "function resealSealable(address sealable)",
      "function scheduleProposal(uint256 proposalId)",
      "function setConfigProvider(address newConfigProvider)",
      "function setProposalsCanceller(address newProposalsCanceller)",
      "function setProposerExecutor(address proposerAccount, address newExecutor)",
      "function setResealCommittee(address newResealCommittee)",
      "function setResealManager(address newResealManager)",
      "function setTiebreakerActivationTimeout(uint32 newTiebreakerActivationTimeout)",
      "function setTiebreakerCommittee(address newTiebreakerCommittee)",
      "function submitProposal(tuple(address target, uint96 value, bytes payload)[] calls, string metadata) returns (uint256 proposalId)",
      "function tiebreakerResumeSealable(address sealable)",
      "function tiebreakerScheduleProposal(uint256 proposalId)",
      "function unregisterProposer(address proposerAccount)"
    ],
    "eth:0xC52fC3081123073078698F1EAc2f1Dc7Bd71880f": [
      "constructor(address _singleton)"
    ],
    "eth:0xc72b58aa02E0e98cF8A4a0E9Dce75e763800802C": [
      "constructor(address module, address strikes, uint256 stakingModuleId, address admin)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AlreadyWithdrawn()",
      "error NodeOperatorDoesNotExist()",
      "error NothingToEject()",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error ResumedExpected()",
      "error SenderIsNotEligible()",
      "error SenderIsNotStrikes()",
      "error SigningKeysInvalidOffset()",
      "error ZeroAdminAddress()",
      "error ZeroModuleAddress()",
      "error ZeroPauseDuration()",
      "error ZeroStrikesAddress()",
      "event Paused(uint256 duration)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MODULE() view returns (address)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function RECOVERER_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function STAKING_MODULE_ID() view returns (uint256)",
      "function STRIKES() view returns (address)",
      "function STRIKES_EXIT_TYPE_ID() view returns (uint8)",
      "function VOLUNTARY_EXIT_TYPE_ID() view returns (uint8)",
      "function ejectBadPerformer(uint256 nodeOperatorId, uint256 keyIndex, address refundRecipient) payable",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function isPaused() view returns (bool)",
      "function pauseFor(uint256 duration)",
      "function recoverERC1155(address token, uint256 tokenId)",
      "function recoverERC20(address token, uint256 amount)",
      "function recoverERC721(address token, uint256 tokenId)",
      "function recoverEther()",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function triggerableWithdrawalsGateway() view returns (address)",
      "function voluntaryEject(uint256 nodeOperatorId, uint256 startFrom, uint256 keysCount, address refundRecipient) payable",
      "function voluntaryEjectByArray(uint256 nodeOperatorId, uint256[] keyIndices, address refundRecipient) payable"
    ],
    "eth:0xC7792b3F2B399bB0EdF53fECDceCeB97FBEB18AF": [
      "constructor(address _singleton)"
    ],
    "eth:0xCE0425301C85c5Ea2A0873A2dEe44d78E02D2316": [
      "constructor(tuple(uint32 minExecutionDelay, uint32 maxAfterSubmitDelay, uint32 maxAfterScheduleDelay, uint32 maxEmergencyModeDuration, uint32 maxEmergencyProtectionDuration) sanityCheckParams, address adminExecutor, uint32 afterSubmitDelay, uint32 afterScheduleDelay)",
      "error AfterScheduleDelayNotPassed(uint256 proposalId)",
      "error AfterSubmitDelayNotPassed(uint256 proposalId)",
      "error CallerIsNotAdminExecutor(address caller)",
      "error CallerIsNotEmergencyActivationCommittee(address caller)",
      "error CallerIsNotEmergencyExecutionCommittee(address caller)",
      "error CallerIsNotGovernance(address caller)",
      "error DurationOverflow()",
      "error EmergencyProtectionExpired(uint40 protectedTill)",
      "error EmptyCalls()",
      "error InvalidAdminExecutor(address adminExecutor)",
      "error InvalidAfterScheduleDelay(uint32 afterScheduleDelay)",
      "error InvalidAfterSubmitDelay(uint32 afterSubmitDelay)",
      "error InvalidEmergencyActivationCommittee(address committee)",
      "error InvalidEmergencyExecutionCommittee(address committee)",
      "error InvalidEmergencyGovernance(address governance)",
      "error InvalidEmergencyModeDuration(uint32 value)",
      "error InvalidEmergencyProtectionEndDate(uint40 value)",
      "error InvalidExecutionDelay(uint32 executionDelay)",
      "error InvalidGovernance(address governance)",
      "error MinExecutionDelayNotPassed(uint256 proposalId)",
      "error TimestampOverflow()",
      "error UnexpectedEmergencyModeState(bool state)",
      "error UnexpectedProposalStatus(uint256 proposalId, uint8 status)",
      "event AdminExecutorSet(address newAdminExecutor)",
      "event AfterScheduleDelaySet(uint32 newAfterScheduleDelay)",
      "event AfterSubmitDelaySet(uint32 newAfterSubmitDelay)",
      "event EmergencyActivationCommitteeSet(address newActivationCommittee)",
      "event EmergencyExecutionCommitteeSet(address newExecutionCommittee)",
      "event EmergencyGovernanceSet(address newEmergencyGovernance)",
      "event EmergencyModeActivated()",
      "event EmergencyModeDeactivated()",
      "event EmergencyModeDurationSet(uint32 newEmergencyModeDuration)",
      "event EmergencyProtectionEndDateSet(uint40 newEmergencyProtectionEndDate)",
      "event GovernanceSet(address newGovernance)",
      "event ProposalExecuted(uint256 indexed id)",
      "event ProposalScheduled(uint256 indexed id)",
      "event ProposalSubmitted(uint256 indexed id, address indexed executor, tuple(address target, uint96 value, bytes payload)[] calls)",
      "event ProposalsCancelledTill(uint256 proposalId)",
      "function MAX_AFTER_SCHEDULE_DELAY() view returns (uint32)",
      "function MAX_AFTER_SUBMIT_DELAY() view returns (uint32)",
      "function MAX_EMERGENCY_MODE_DURATION() view returns (uint32)",
      "function MAX_EMERGENCY_PROTECTION_DURATION() view returns (uint32)",
      "function MIN_EXECUTION_DELAY() view returns (uint32)",
      "function activateEmergencyMode()",
      "function canExecute(uint256 proposalId) view returns (bool)",
      "function canSchedule(uint256 proposalId) view returns (bool)",
      "function cancelAllNonExecutedProposals()",
      "function deactivateEmergencyMode()",
      "function emergencyExecute(uint256 proposalId)",
      "function emergencyReset()",
      "function execute(uint256 proposalId)",
      "function getAdminExecutor() view returns (address)",
      "function getAfterScheduleDelay() view returns (uint32)",
      "function getAfterSubmitDelay() view returns (uint32)",
      "function getEmergencyActivationCommittee() view returns (address)",
      "function getEmergencyExecutionCommittee() view returns (address)",
      "function getEmergencyGovernance() view returns (address)",
      "function getEmergencyProtectionDetails() view returns (tuple(uint32 emergencyModeDuration, uint40 emergencyModeEndsAfter, uint40 emergencyProtectionEndsAfter) details)",
      "function getGovernance() view returns (address)",
      "function getProposal(uint256 proposalId) view returns (tuple(uint256 id, address executor, uint40 submittedAt, uint40 scheduledAt, uint8 status) proposalDetails, tuple(address target, uint96 value, bytes payload)[] calls)",
      "function getProposalCalls(uint256 proposalId) view returns (tuple(address target, uint96 value, bytes payload)[] calls)",
      "function getProposalDetails(uint256 proposalId) view returns (tuple(uint256 id, address executor, uint40 submittedAt, uint40 scheduledAt, uint8 status) proposalDetails)",
      "function getProposalsCount() view returns (uint256 count)",
      "function isEmergencyModeActive() view returns (bool)",
      "function isEmergencyProtectionEnabled() view returns (bool)",
      "function schedule(uint256 proposalId)",
      "function setAdminExecutor(address newAdminExecutor)",
      "function setAfterScheduleDelay(uint32 newAfterScheduleDelay)",
      "function setAfterSubmitDelay(uint32 newAfterSubmitDelay)",
      "function setEmergencyGovernance(address newEmergencyGovernance)",
      "function setEmergencyModeDuration(uint32 newEmergencyModeDuration)",
      "function setEmergencyProtectionActivationCommittee(address newEmergencyActivationCommittee)",
      "function setEmergencyProtectionEndDate(uint40 newEmergencyProtectionEndDate)",
      "function setEmergencyProtectionExecutionCommittee(address newEmergencyExecutionCommittee)",
      "function setGovernance(address newGovernance)",
      "function submit(address executor, tuple(address target, uint96 value, bytes payload)[] calls) returns (uint256 newProposalId)",
      "function transferExecutorOwnership(address executor, address owner)"
    ],
    "eth:0xcF33a38111d0B1246A3F38a838fb41D626B454f0": [
      "constructor(address module, address admin)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error ZeroAdminAddress()",
      "error ZeroModuleAddress()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function CURVE_ID() view returns (uint256)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MODULE() view returns (address)",
      "function RECOVERER_ROLE() view returns (bytes32)",
      "function addNodeOperatorETH(uint256 keysCount, bytes publicKeys, bytes signatures, tuple(address managerAddress, address rewardAddress, bool extendedManagerPermissions) managementProperties, address referrer) payable returns (uint256 nodeOperatorId)",
      "function addNodeOperatorStETH(uint256 keysCount, bytes publicKeys, bytes signatures, tuple(address managerAddress, address rewardAddress, bool extendedManagerPermissions) managementProperties, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit, address referrer) returns (uint256 nodeOperatorId)",
      "function addNodeOperatorWstETH(uint256 keysCount, bytes publicKeys, bytes signatures, tuple(address managerAddress, address rewardAddress, bool extendedManagerPermissions) managementProperties, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) permit, address referrer) returns (uint256 nodeOperatorId)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function recoverERC1155(address token, uint256 tokenId)",
      "function recoverERC20(address token, uint256 amount)",
      "function recoverERC721(address token, uint256 tokenId)",
      "function recoverEther()",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "eth:0xD15a672319Cf0352560eE76d9e89eAB0889046D3": [
      "constructor(address _admin, address _treasury, address _stETH, uint256 _totalCoverSharesBurnt, uint256 _totalNonCoverSharesBurnt)",
      "error AppAuthLidoFailed()",
      "error BurnAmountExceedsActual(uint256 requestedAmount, uint256 actualAmount)",
      "error DirectETHTransfer()",
      "error StETHRecoveryWrongFunc()",
      "error ZeroAddress(string field)",
      "error ZeroBurnAmount()",
      "error ZeroRecoveryAmount()",
      "event ERC20Recovered(address indexed requestedBy, address indexed token, uint256 amount)",
      "event ERC721Recovered(address indexed requestedBy, address indexed token, uint256 tokenId)",
      "event ExcessStETHRecovered(address indexed requestedBy, uint256 amountOfStETH, uint256 amountOfShares)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StETHBurnRequested(bool indexed isCover, address indexed requestedBy, uint256 amountOfStETH, uint256 amountOfShares)",
      "event StETHBurnt(bool indexed isCover, uint256 amountOfStETH, uint256 amountOfShares)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function REQUEST_BURN_MY_STETH_ROLE() view returns (bytes32)",
      "function REQUEST_BURN_SHARES_ROLE() view returns (bytes32)",
      "function STETH() view returns (address)",
      "function TREASURY() view returns (address)",
      "function commitSharesToBurn(uint256 _sharesToBurn)",
      "function getCoverSharesBurnt() view returns (uint256)",
      "function getExcessStETH() view returns (uint256)",
      "function getNonCoverSharesBurnt() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getSharesRequestedToBurn() view returns (uint256 coverShares, uint256 nonCoverShares)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function recoverERC20(address _token, uint256 _amount)",
      "function recoverERC721(address _token, uint256 _tokenId)",
      "function recoverExcessStETH()",
      "function renounceRole(bytes32 role, address account)",
      "function requestBurnMyStETH(uint256 _stETHAmountToBurn)",
      "function requestBurnMyStETHForCover(uint256 _stETHAmountToBurn)",
      "function requestBurnShares(address _from, uint256 _sharesAmountToBurn)",
      "function requestBurnSharesForCover(address _from, uint256 _sharesAmountToBurn)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "eth:0xd54c1c6413caac3477AC14b2a80D5398E3c32FfE": [
      "constructor(address messenger_, address wstETH_, address accountingOracle_, address tokenRateOracle_, uint32 l2GasLimitForPushingTokenRate_)",
      "error ErrorUnauthorizedMessenger()",
      "error ErrorWrongCrossDomainSender()",
      "error ErrorZeroAddressAccountingOracle()",
      "error ErrorZeroAddressMessenger()",
      "error ErrorZeroAddressTokenRateOracle()",
      "error ErrorZeroAddressWstETH()",
      "function ACCOUNTING_ORACLE() view returns (address)",
      "function GENESIS_TIME() view returns (uint256)",
      "function L2_GAS_LIMIT_FOR_PUSHING_TOKEN_RATE() view returns (uint32)",
      "function L2_TOKEN_RATE_ORACLE() view returns (address)",
      "function MESSENGER() view returns (address)",
      "function SECONDS_PER_SLOT() view returns (uint256)",
      "function TOKEN_RATE_DECIMALS() view returns (uint256)",
      "function WSTETH() view returns (address)",
      "function pushTokenRate()",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)"
    ],
    "eth:0xD624B08C83bAECF0807Dd2c6880C3154a5F0B288": [
      "constructor(uint256 slotsPerEpoch, uint256 secondsPerSlot, uint256 genesisTime, uint256 epochsPerFrame, uint256 fastLaneLengthSlots, address admin, address reportProcessor)",
      "error AddressCannotBeZero()",
      "error AdminCannotBeZero()",
      "error ConsensusReportAlreadyProcessing()",
      "error DuplicateMember()",
      "error DuplicateReport()",
      "error EmptyReport()",
      "error EpochsPerFrameCannotBeZero()",
      "error FastLanePeriodCannotBeLongerThanFrame()",
      "error InitialEpochAlreadyArrived()",
      "error InitialEpochIsYetToArrive()",
      "error InitialEpochRefSlotCannotBeEarlierThanProcessingSlot()",
      "error InvalidChainConfig()",
      "error InvalidSlot()",
      "error NewProcessorCannotBeTheSame()",
      "error NonFastLaneMemberCannotReportWithinFastLaneInterval()",
      "error NonMember()",
      "error NumericOverflow()",
      "error QuorumTooSmall(uint256 minQuorum, uint256 receivedQuorum)",
      "error ReportProcessorCannotBeZero()",
      "error StaleReport()",
      "error UnexpectedConsensusVersion(uint256 expected, uint256 received)",
      "event ConsensusLost(uint256 indexed refSlot)",
      "event ConsensusReached(uint256 indexed refSlot, bytes32 report, uint256 support)",
      "event FastLaneConfigSet(uint256 fastLaneLengthSlots)",
      "event FrameConfigSet(uint256 newInitialEpoch, uint256 newEpochsPerFrame)",
      "event MemberAdded(address indexed addr, uint256 newTotalMembers, uint256 newQuorum)",
      "event MemberRemoved(address indexed addr, uint256 newTotalMembers, uint256 newQuorum)",
      "event QuorumSet(uint256 newQuorum, uint256 totalMembers, uint256 prevQuorum)",
      "event ReportProcessorSet(address indexed processor, address indexed prevProcessor)",
      "event ReportReceived(uint256 indexed refSlot, address indexed member, bytes32 report)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DISABLE_CONSENSUS_ROLE() view returns (bytes32)",
      "function MANAGE_FAST_LANE_CONFIG_ROLE() view returns (bytes32)",
      "function MANAGE_FRAME_CONFIG_ROLE() view returns (bytes32)",
      "function MANAGE_MEMBERS_AND_QUORUM_ROLE() view returns (bytes32)",
      "function MANAGE_REPORT_PROCESSOR_ROLE() view returns (bytes32)",
      "function addMember(address addr, uint256 quorum)",
      "function disableConsensus()",
      "function getChainConfig() view returns (uint256 slotsPerEpoch, uint256 secondsPerSlot, uint256 genesisTime)",
      "function getConsensusState() view returns (uint256 refSlot, bytes32 consensusReport, bool isReportProcessing)",
      "function getConsensusStateForMember(address addr) view returns (tuple(uint256 currentFrameRefSlot, bytes32 currentFrameConsensusReport, bool isMember, bool isFastLane, bool canReport, uint256 lastMemberReportRefSlot, bytes32 currentFrameMemberReport) result)",
      "function getCurrentFrame() view returns (uint256 refSlot, uint256 reportProcessingDeadlineSlot)",
      "function getFastLaneMembers() view returns (address[] addresses, uint256[] lastReportedRefSlots)",
      "function getFrameConfig() view returns (uint256 initialEpoch, uint256 epochsPerFrame, uint256 fastLaneLengthSlots)",
      "function getInitialRefSlot() view returns (uint256)",
      "function getIsFastLaneMember(address addr) view returns (bool)",
      "function getIsMember(address addr) view returns (bool)",
      "function getMembers() view returns (address[] addresses, uint256[] lastReportedRefSlots)",
      "function getQuorum() view returns (uint256)",
      "function getReportProcessor() view returns (address)",
      "function getReportVariants() view returns (bytes32[] variants, uint256[] support)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function removeMember(address addr, uint256 quorum)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setFastLaneLengthSlots(uint256 fastLaneLengthSlots)",
      "function setFrameConfig(uint256 epochsPerFrame, uint256 fastLaneLengthSlots)",
      "function setQuorum(uint256 quorum)",
      "function setReportProcessor(address newProcessor)",
      "function submitReport(uint256 slot, bytes32 report, uint256 consensusVersion)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateInitialEpoch(uint256 initialEpoch)"
    ],
    "eth:0xd6A67636c05BeB5B4a5c90D408b03A63c4e39426": [
      "constructor(address stETH, address wstETH, address withdrawalQueue, address dualGovernance, uint256 minWithdrawalsBatchSize, uint32 maxMinAssetsLockDuration)",
      "error AddressInsufficientBalance(address account)",
      "error BatchesQueueIsNotClosed()",
      "error CallerIsNotDualGovernance(address caller)",
      "error ClaimingIsFinished()",
      "error DivisionByZero()",
      "error DurationOverflow()",
      "error ETHValueOverflow()",
      "error ETHValueUnderflow()",
      "error EmptyBatch()",
      "error EmptyUnstETHIds()",
      "error EthWithdrawalsDelayNotPassed()",
      "error FailedInnerCall()",
      "error IndexOneBasedOverflow()",
      "error IndexOneBasedUnderflow()",
      "error InvalidBatchSize(uint256 size)",
      "error InvalidClaimableAmount(uint256 unstETHId, uint128 claimableAmount)",
      "error InvalidETHSender(address actual, address expected)",
      "error InvalidFromUnstETHId(uint256 unstETHId)",
      "error InvalidHintsLength(uint256 actual, uint256 expected)",
      "error InvalidMinAssetsLockDuration(uint32 newMinAssetsLockDuration)",
      "error InvalidSharesValue(uint128 value)",
      "error InvalidUnstETHHolder(uint256 unstETHId, address holder)",
      "error InvalidUnstETHIdsSequence()",
      "error InvalidUnstETHStatus(uint256 unstETHId, uint8 status)",
      "error MinAssetsLockDurationNotPassed(uint40 lockDurationExpiresAt)",
      "error NonProxyCallsForbidden()",
      "error PercentD16Overflow()",
      "error RageQuitExtensionPeriodAlreadyStarted()",
      "error RageQuitExtensionPeriodNotStarted()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SharesValueOverflow()",
      "error SharesValueUnderflow()",
      "error TimestampOverflow()",
      "error UnclaimedBatches()",
      "error UnexpectedEscrowState(uint8 state)",
      "error UnexpectedWithdrawalsBatchesQueueState(uint8 state)",
      "error UnfinalizedUnstETHIds()",
      "event ETHClaimed(uint128 amount)",
      "event ETHWithdrawn(address indexed holder, uint128 shares, uint128 value)",
      "event EscrowStateChanged(uint8 indexed from, uint8 indexed to)",
      "event MinAssetsLockDurationSet(uint32 newAssetsLockDuration)",
      "event RageQuitExtensionPeriodStarted(uint40 startedAt)",
      "event RageQuitStarted(uint32 rageQuitExtensionPeriodDuration, uint32 rageQuitEthWithdrawalsDelay)",
      "event StETHSharesLocked(address indexed holder, uint128 shares)",
      "event StETHSharesUnlocked(address indexed holder, uint128 shares)",
      "event UnstETHClaimed(uint256[] unstETHIds, uint128 totalAmountClaimed)",
      "event UnstETHFinalized(uint256[] ids, uint128[] finalizedShares, uint128[] finalizedAmount)",
      "event UnstETHIdsAdded(uint256[] unstETHIds)",
      "event UnstETHIdsClaimed(uint256[] unstETHIds)",
      "event UnstETHLocked(address indexed holder, uint256[] ids, uint128 shares)",
      "event UnstETHUnlocked(address indexed holder, uint256[] ids, uint128 finalizedSharesIncrement, uint128 finalizedAmountIncrement)",
      "event UnstETHWithdrawn(uint256[] unstETHIds, uint128 amountWithdrawn)",
      "event WithdrawalsBatchesQueueClosed()",
      "event WithdrawalsBatchesQueueOpened(uint256 boundaryUnstETHId)",
      "function DUAL_GOVERNANCE() view returns (address)",
      "function ESCROW_MASTER_COPY() view returns (address)",
      "function MAX_MIN_ASSETS_LOCK_DURATION() view returns (uint32)",
      "function MIN_TRANSFERRABLE_ST_ETH_AMOUNT() view returns (uint256)",
      "function MIN_WITHDRAWALS_BATCH_SIZE() view returns (uint256)",
      "function ST_ETH() view returns (address)",
      "function WITHDRAWAL_QUEUE() view returns (address)",
      "function WST_ETH() view returns (address)",
      "function claimNextWithdrawalsBatch(uint256 fromUnstETHId, uint256[] hints)",
      "function claimNextWithdrawalsBatch(uint256 maxUnstETHIdsCount)",
      "function claimUnstETH(uint256[] unstETHIds, uint256[] hints)",
      "function getEscrowState() view returns (uint8)",
      "function getLockedUnstETHDetails(uint256[] unstETHIds) view returns (tuple(uint256 id, uint8 status, address lockedBy, uint128 shares, uint128 claimableAmount)[] unstETHDetails)",
      "function getMinAssetsLockDuration() view returns (uint32 minAssetsLockDuration)",
      "function getNextWithdrawalBatch(uint256 limit) view returns (uint256[] unstETHIds)",
      "function getRageQuitEscrowDetails() view returns (tuple(uint32 rageQuitEthWithdrawalsDelay, uint32 rageQuitExtensionPeriodDuration, uint40 rageQuitExtensionPeriodStartedAt, bool isRageQuitExtensionPeriodStarted) details)",
      "function getRageQuitSupport() view returns (uint128)",
      "function getSignallingEscrowDetails() view returns (tuple(uint128 totalStETHLockedShares, uint128 totalStETHClaimedETH, uint128 totalUnstETHUnfinalizedShares, uint128 totalUnstETHFinalizedETH) details)",
      "function getUnclaimedUnstETHIdsCount() view returns (uint256)",
      "function getVetoerDetails(address vetoer) view returns (tuple(uint256 unstETHIdsCount, uint128 stETHLockedShares, uint128 unstETHLockedShares, uint40 lastAssetsLockTimestamp) details)",
      "function getVetoerUnstETHIds(address vetoer) view returns (uint256[] unstETHIds)",
      "function initialize(uint32 minAssetsLockDuration)",
      "function isRageQuitFinalized() view returns (bool)",
      "function isWithdrawalsBatchesClosed() view returns (bool)",
      "function lockStETH(uint256 amount) returns (uint256 lockedStETHShares)",
      "function lockUnstETH(uint256[] unstETHIds)",
      "function lockWstETH(uint256 amount) returns (uint256 lockedStETHShares)",
      "function markUnstETHFinalized(uint256[] unstETHIds, uint256[] hints)",
      "function requestNextWithdrawalsBatch(uint256 batchSize)",
      "function setMinAssetsLockDuration(uint32 newMinAssetsLockDuration)",
      "function startRageQuit(uint32 rageQuitExtensionPeriodDuration, uint32 rageQuitEthWithdrawalsDelay)",
      "function startRageQuitExtensionPeriod()",
      "function unlockStETH() returns (uint256 unlockedStETHShares)",
      "function unlockUnstETH(uint256[] unstETHIds)",
      "function unlockWstETH() returns (uint256 wstETHUnlocked)",
      "function withdrawETH(uint256[] unstETHIds)",
      "function withdrawETH()"
    ],
    "eth:0xD75778b855886Fc5e1eA7D6bFADA9EB68b35C19D": [
      "constructor(address _trustedCaller, address _nodeOperatorsRegistry)",
      "function createEVMScript(address _creator, bytes _evmScriptCallData) view returns (bytes)",
      "function decodeEVMScriptCallData(bytes _evmScriptCallData) pure returns (tuple(uint256 nodeOperatorId, uint256 stakingLimit)[])",
      "function nodeOperatorsRegistry() view returns (address)",
      "function trustedCaller() view returns (address)"
    ],
    "eth:0xD99CC66fEC647E68294C6477B40fC7E0F6F618D0": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_)"
    ],
    "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0xDa22fA1CEa40d05Fe4CD536967afdD839586D546": [
      "constructor(address module, address parametersRegistry, address strikes)",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SenderIsNotModule()",
      "error SenderIsNotStrikes()",
      "error ValidatorExitDelayNotApplicable()",
      "error ZeroModuleAddress()",
      "error ZeroParametersRegistryAddress()",
      "error ZeroStrikesAddress()",
      "event StrikesPenaltyProcessed(uint256 indexed nodeOperatorId, bytes pubkey, uint256 strikesPenalty)",
      "event TriggeredExitFeeRecorded(uint256 indexed nodeOperatorId, uint256 indexed exitType, bytes pubkey, uint256 withdrawalRequestPaidFee, uint256 withdrawalRequestRecordedFee)",
      "event ValidatorExitDelayProcessed(uint256 indexed nodeOperatorId, bytes pubkey, uint256 delayPenalty)",
      "function ACCOUNTING() view returns (address)",
      "function MODULE() view returns (address)",
      "function PARAMETERS_REGISTRY() view returns (address)",
      "function STRIKES() view returns (address)",
      "function STRIKES_EXIT_TYPE_ID() view returns (uint8)",
      "function VOLUNTARY_EXIT_TYPE_ID() view returns (uint8)",
      "function getExitPenaltyInfo(uint256 nodeOperatorId, bytes publicKey) view returns (tuple(tuple(uint248 value, bool isValue) delayPenalty, tuple(uint248 value, bool isValue) strikesPenalty, tuple(uint248 value, bool isValue) withdrawalRequestFee))",
      "function isValidatorExitDelayPenaltyApplicable(uint256 nodeOperatorId, bytes publicKey, uint256 eligibleToExitInSec) view returns (bool)",
      "function processExitDelayReport(uint256 nodeOperatorId, bytes publicKey, uint256 eligibleToExitInSec)",
      "function processStrikesReport(uint256 nodeOperatorId, bytes publicKey)",
      "function processTriggeredExit(uint256 nodeOperatorId, bytes publicKey, uint256 withdrawalRequestPaidFee, uint256 exitType)"
    ],
    "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_)"
    ],
    "eth:0xDBfa0B8A15a503f25224fcA5F84a3853230A715C": [
      "constructor(address owner, address[] committeeMembers, uint256 executionQuorum, address tiebreakerCoreCommittee)",
      "error AccountIsNotMember(address account)",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error CallerIsNotMember(address caller)",
      "error DuplicatedMember(address account)",
      "error FailedInnerCall()",
      "error HashAlreadyScheduled(bytes32 hash)",
      "error HashAlreadyUsed(bytes32 hash)",
      "error HashIsNotScheduled(bytes32 hash)",
      "error InvalidMemberAccount(address account)",
      "error InvalidQuorum()",
      "error InvalidTimelockDuration(uint32 timelock)",
      "error OffsetOutOfBounds()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ProposalDoesNotExist(bytes32 key)",
      "error QuorumIsNotReached()",
      "error TimelockNotPassed()",
      "error TimestampOverflow()",
      "event HashScheduled(bytes32 hash)",
      "event HashUsed(bytes32 hash)",
      "event MemberAdded(address indexed member)",
      "event MemberRemoved(address indexed member)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QuorumSet(uint256 quorum)",
      "event TimelockDurationSet(uint32 timelockDuration)",
      "event Voted(address indexed signer, bytes32 hash, bool support)",
      "function TIEBREAKER_CORE_COMMITTEE() view returns (address)",
      "function addMembers(address[] newMembers, uint256 executionQuorum)",
      "function approves(address signer, bytes32 hash) view returns (bool approve)",
      "function executeScheduleProposal(uint256 proposalId)",
      "function executeSealableResume(address sealable)",
      "function getMembers() view returns (address[])",
      "function getOrderedKeys(uint256 offset, uint256 limit) view returns (bytes32[])",
      "function getProposal(bytes32 key) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data))",
      "function getProposalAt(uint256 index) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data))",
      "function getProposals(uint256 offset, uint256 limit) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data)[] proposals)",
      "function getProposalsLength() view returns (uint256)",
      "function getQuorum() view returns (uint256)",
      "function getScheduleProposalState(uint256 proposalId) view returns (uint256 support, uint256 executionQuorum, uint40 quorumAt, bool isExecuted)",
      "function getSealableResumeState(address sealable) view returns (uint256 support, uint256 executionQuorum, uint40 quorumAt, bool isExecuted)",
      "function getTimelockDuration() view returns (uint32)",
      "function isMember(address member) view returns (bool)",
      "function owner() view returns (address)",
      "function removeMembers(address[] membersToRemove, uint256 executionQuorum)",
      "function renounceOwnership()",
      "function schedule(bytes32 hash)",
      "function scheduleProposal(uint256 proposalId)",
      "function sealableResume(address sealable)",
      "function setQuorum(uint256 newQuorum)",
      "function setTimelockDuration(uint32 newTimelock)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0xDC00116a0D3E064427dA2600449cfD2566B3037B": [
      "constructor(address admin, address lidoLocator, uint256 maxExitRequestsLimit, uint256 exitsPerFrame, uint256 frameDurationInSec)",
      "error AdminCannotBeZero()",
      "error ExitRequestsLimitExceeded(uint256 requestsCount, uint256 remainingLimit)",
      "error FeeRefundFailed()",
      "error InsufficientFee(uint256 feeRequired, uint256 passedValue)",
      "error LimitExceeded()",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error ResumedExpected()",
      "error TooLargeExitsPerFrame()",
      "error TooLargeFrameDuration()",
      "error TooLargeMaxExitRequestsLimit()",
      "error ZeroArgument(string name)",
      "error ZeroFrameDuration()",
      "error ZeroPauseDuration()",
      "event ExitRequestsLimitSet(uint256 maxExitRequestsLimit, uint256 exitsPerFrame, uint256 frameDurationInSec)",
      "event Paused(uint256 duration)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function ADD_FULL_WITHDRAWAL_REQUEST_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function TWR_LIMIT_POSITION() view returns (bytes32)",
      "function TW_EXIT_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function VERSION() view returns (uint256)",
      "function getExitRequestLimitFullInfo() view returns (uint256 maxExitRequestsLimit, uint256 exitsPerFrame, uint256 frameDurationInSec, uint256 prevExitRequestsLimit, uint256 currentExitRequestsLimit)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function isPaused() view returns (bool)",
      "function pauseFor(uint256 _duration)",
      "function pauseUntil(uint256 _pauseUntilInclusive)",
      "function renounceRole(bytes32 role, address account)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function setExitRequestLimit(uint256 maxExitRequestsLimit, uint256 exitsPerFrame, uint256 frameDurationInSec)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function triggerFullWithdrawals(tuple(uint256 stakingModuleId, uint256 nodeOperatorId, bytes pubkey)[] validatorsData, address refundRecipient, uint256 exitType) payable"
    ],
    "eth:0xdC5FE1782B6943f318E05230d688713a560063DC": [
      "constructor(address withdrawalAddress, address module, uint64 slotsPerEpoch, uint64 slotsPerHistoricalRoot, tuple(bytes32 gIFirstWithdrawalPrev, bytes32 gIFirstWithdrawalCurr, bytes32 gIFirstValidatorPrev, bytes32 gIFirstValidatorCurr, bytes32 gIFirstHistoricalSummaryPrev, bytes32 gIFirstHistoricalSummaryCurr, bytes32 gIFirstBlockRootInSummaryPrev, bytes32 gIFirstBlockRootInSummaryCurr) gindices, uint64 firstSupportedSlot, uint64 pivotSlot, uint64 capellaSlot, address admin)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error HistoricalSummaryDoesNotExist()",
      "error IndexOutOfRange()",
      "error InvalidBlockHeader()",
      "error InvalidCapellaSlot()",
      "error InvalidChainConfig()",
      "error InvalidPivotSlot()",
      "error InvalidWithdrawalAddress()",
      "error PartialWithdrawal()",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error ResumedExpected()",
      "error RootNotFound()",
      "error UnsupportedSlot(uint64 slot)",
      "error ValidatorNotWithdrawn()",
      "error ZeroAdminAddress()",
      "error ZeroModuleAddress()",
      "error ZeroPauseDuration()",
      "error ZeroWithdrawalAddress()",
      "event Paused(uint256 duration)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function BEACON_ROOTS() view returns (address)",
      "function CAPELLA_SLOT() view returns (uint64)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function FIRST_SUPPORTED_SLOT() view returns (uint64)",
      "function GI_FIRST_BLOCK_ROOT_IN_SUMMARY_CURR() view returns (bytes32)",
      "function GI_FIRST_BLOCK_ROOT_IN_SUMMARY_PREV() view returns (bytes32)",
      "function GI_FIRST_HISTORICAL_SUMMARY_CURR() view returns (bytes32)",
      "function GI_FIRST_HISTORICAL_SUMMARY_PREV() view returns (bytes32)",
      "function GI_FIRST_VALIDATOR_CURR() view returns (bytes32)",
      "function GI_FIRST_VALIDATOR_PREV() view returns (bytes32)",
      "function GI_FIRST_WITHDRAWAL_CURR() view returns (bytes32)",
      "function GI_FIRST_WITHDRAWAL_PREV() view returns (bytes32)",
      "function MODULE() view returns (address)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function PIVOT_SLOT() view returns (uint64)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function SLOTS_PER_EPOCH() view returns (uint64)",
      "function SLOTS_PER_HISTORICAL_ROOT() view returns (uint64)",
      "function WITHDRAWAL_ADDRESS() view returns (address)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function isPaused() view returns (bool)",
      "function pauseFor(uint256 duration)",
      "function processHistoricalWithdrawalProof(tuple(tuple(uint64 slot, uint64 proposerIndex, bytes32 parentRoot, bytes32 stateRoot, bytes32 bodyRoot) header, uint64 rootsTimestamp) beaconBlock, tuple(tuple(uint64 slot, uint64 proposerIndex, bytes32 parentRoot, bytes32 stateRoot, bytes32 bodyRoot) header, bytes32[] proof) oldBlock, tuple(uint8 withdrawalOffset, uint64 withdrawalIndex, uint64 validatorIndex, uint64 amount, bytes32 withdrawalCredentials, uint64 effectiveBalance, bool slashed, uint64 activationEligibilityEpoch, uint64 activationEpoch, uint64 exitEpoch, uint64 withdrawableEpoch, bytes32[] withdrawalProof, bytes32[] validatorProof) witness, uint256 nodeOperatorId, uint256 keyIndex)",
      "function processWithdrawalProof(tuple(tuple(uint64 slot, uint64 proposerIndex, bytes32 parentRoot, bytes32 stateRoot, bytes32 bodyRoot) header, uint64 rootsTimestamp) beaconBlock, tuple(uint8 withdrawalOffset, uint64 withdrawalIndex, uint64 validatorIndex, uint64 amount, bytes32 withdrawalCredentials, uint64 effectiveBalance, bool slashed, uint64 activationEligibilityEpoch, uint64 activationEpoch, uint64 exitEpoch, uint64 withdrawableEpoch, bytes32[] withdrawalProof, bytes32[] validatorProof) witness, uint256 nodeOperatorId, uint256 keyIndex)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "eth:0xde3A93028F2283cc28756B3674BD657eaFB992f4": [
      "function hasInitialized() view returns (bool)",
      "function MAX_VESTINGS_PER_ADDRESS() view returns (uint256)",
      "function spendableBalanceOf(address _holder) view returns (uint256)",
      "function assignVested(address _receiver, uint256 _amount, uint64 _start, uint64 _cliff, uint64 _vested, bool _revokable) returns (uint256)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function getVesting(address _recipient, uint256 _vestingId) view returns (uint256 amount, uint64 start, uint64 cliff, uint64 vesting, bool revokable)",
      "function mint(address _receiver, uint256 _amount)",
      "function onTransfer(address _from, address _to, uint256 _amount) returns (bool)",
      "function transferableBalance(address _holder, uint256 _time) view returns (uint256)",
      "function allowRecoverability(address _token) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function ISSUE_ROLE() view returns (bytes32)",
      "function getInitializationBlock() view returns (uint256)",
      "function vestingsLengths(address) view returns (uint256)",
      "function transferToVault(address _token)",
      "function burn(address _holder, uint256 _amount)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function ASSIGN_ROLE() view returns (bytes32)",
      "function BURN_ROLE() view returns (bytes32)",
      "function assign(address _receiver, uint256 _amount)",
      "function canForward(address _sender, bytes) view returns (bool)",
      "function issue(uint256 _amount)",
      "function kernel() view returns (address)",
      "function forward(bytes _evmScript)",
      "function onApprove(address, address, uint256) returns (bool)",
      "function isPetrified() view returns (bool)",
      "function initialize(address _token, bool _transferable, uint256 _maxAccountTokens)",
      "function MINT_ROLE() view returns (bytes32)",
      "function maxAccountTokens() view returns (uint256)",
      "function REVOKE_VESTINGS_ROLE() view returns (bytes32)",
      "function proxyPayment(address) payable returns (bool)",
      "function revokeVesting(address _holder, uint256 _vestingId)",
      "function token() view returns (address)",
      "function isForwarder() pure returns (bool)",
      "event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount)",
      "event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)"
    ],
    "eth:0xe0B234f99E413E27D9Bc31aBba9A49A3e570Da97": [
      "constructor(address feeDistributor, address strikes, uint256 secondsPerSlot, uint256 genesisTime)",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AddressCannotBeSame()",
      "error AddressCannotBeZero()",
      "error FailedToSendEther()",
      "error HashCannotBeZero()",
      "error InitialRefSlotCannotBeLessThanProcessingOne(uint256 initialRefSlot, uint256 processingRefSlot)",
      "error InvalidContractVersion()",
      "error InvalidContractVersionIncrement()",
      "error InvalidInitialization()",
      "error NoConsensusReportToProcess()",
      "error NonZeroContractVersionOnInit()",
      "error NotAllowedToRecover()",
      "error NotInitializing()",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error ProcessingDeadlineMissed(uint256 deadline)",
      "error RefSlotAlreadyProcessing()",
      "error RefSlotCannotDecrease(uint256 refSlot, uint256 prevRefSlot)",
      "error RefSlotMustBeGreaterThanProcessingOne(uint256 refSlot, uint256 processingRefSlot)",
      "error ResumedExpected()",
      "error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value)",
      "error SecondsPerSlotCannotBeZero()",
      "error SenderIsNotTheConsensusContract()",
      "error SenderNotAllowed()",
      "error UnexpectedChainConfig()",
      "error UnexpectedConsensusVersion(uint256 expectedVersion, uint256 receivedVersion)",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error UnexpectedDataHash(bytes32 consensusHash, bytes32 receivedHash)",
      "error UnexpectedRefSlot(uint256 consensusRefSlot, uint256 dataRefSlot)",
      "error VersionCannotBeSame()",
      "error VersionCannotBeZero()",
      "error ZeroAdminAddress()",
      "error ZeroFeeDistributorAddress()",
      "error ZeroPauseDuration()",
      "error ZeroStrikesAddress()",
      "event ConsensusHashContractSet(address indexed addr, address indexed prevAddr)",
      "event ConsensusVersionSet(uint256 indexed version, uint256 indexed prevVersion)",
      "event ContractVersionSet(uint256 version)",
      "event ERC1155Recovered(address indexed token, uint256 tokenId, address indexed recipient, uint256 amount)",
      "event ERC20Recovered(address indexed token, address indexed recipient, uint256 amount)",
      "event ERC721Recovered(address indexed token, uint256 tokenId, address indexed recipient)",
      "event EtherRecovered(address indexed recipient, uint256 amount)",
      "event Initialized(uint64 version)",
      "event Paused(uint256 duration)",
      "event ProcessingStarted(uint256 indexed refSlot, bytes32 hash)",
      "event ReportDiscarded(uint256 indexed refSlot, bytes32 hash)",
      "event ReportSubmitted(uint256 indexed refSlot, bytes32 hash, uint256 processingDeadlineTime)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StETHSharesRecovered(address indexed recipient, uint256 shares)",
      "event WarnProcessingMissed(uint256 indexed refSlot)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function FEE_DISTRIBUTOR() view returns (address)",
      "function GENESIS_TIME() view returns (uint256)",
      "function MANAGE_CONSENSUS_CONTRACT_ROLE() view returns (bytes32)",
      "function MANAGE_CONSENSUS_VERSION_ROLE() view returns (bytes32)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function RECOVERER_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function SECONDS_PER_SLOT() view returns (uint256)",
      "function STRIKES() view returns (address)",
      "function SUBMIT_DATA_ROLE() view returns (bytes32)",
      "function discardConsensusReport(uint256 refSlot)",
      "function finalizeUpgradeV2(uint256 consensusVersion)",
      "function getConsensusContract() view returns (address)",
      "function getConsensusReport() view returns (bytes32 hash, uint256 refSlot, uint256 processingDeadlineTime, bool processingStarted)",
      "function getConsensusVersion() view returns (uint256)",
      "function getContractVersion() view returns (uint256)",
      "function getLastProcessingRefSlot() view returns (uint256)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address consensusContract, uint256 consensusVersion)",
      "function isPaused() view returns (bool)",
      "function pauseFor(uint256 duration)",
      "function recoverERC1155(address token, uint256 tokenId)",
      "function recoverERC20(address token, uint256 amount)",
      "function recoverERC721(address token, uint256 tokenId)",
      "function recoverEther()",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function setConsensusContract(address addr)",
      "function setConsensusVersion(uint256 version)",
      "function submitConsensusReport(bytes32 reportHash, uint256 refSlot, uint256 deadline)",
      "function submitReportData(tuple(uint256 consensusVersion, uint256 refSlot, bytes32 treeRoot, string treeCid, string logCid, uint256 distributed, uint256 rebate, bytes32 strikesTreeRoot, string strikesTreeCid) data, uint256 contractVersion)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "eth:0xE1686C2E90eb41a48356c1cC7FaA17629af3ADB3": [
      "event Sealed(address gate_seal, address sealed_by, uint256 sealed_for, address sealable, uint256 sealed_at)",
      "constructor(address _sealing_committee, uint256 _seal_duration_seconds, address[] _sealables, uint256 _expiry_timestamp)",
      "function get_sealing_committee() view returns (address)",
      "function get_seal_duration_seconds() view returns (uint256)",
      "function get_sealables() view returns (address[])",
      "function get_expiry_timestamp() view returns (uint256)",
      "function is_expired() view returns (bool)",
      "function seal(address[] _sealables)"
    ],
    "eth:0xE42C659Dc09109566720EA8b2De186c2Be7D94D9": [
      "constructor(address _wstETH, string _name, string _symbol)",
      "error AdminZeroAddress()",
      "error ApprovalToOwner()",
      "error ApproveToCaller()",
      "error ArraysLengthMismatch(uint256 _firstArrayLength, uint256 _secondArrayLength)",
      "error BatchesAreNotSorted()",
      "error CantSendValueRecipientMayHaveReverted()",
      "error EmptyBatches()",
      "error InvalidContractVersionIncrement()",
      "error InvalidHint(uint256 _hint)",
      "error InvalidOwnerAddress(address)",
      "error InvalidReportTimestamp()",
      "error InvalidRequestId(uint256 _requestId)",
      "error InvalidRequestIdRange(uint256 startId, uint256 endId)",
      "error InvalidState()",
      "error NonZeroContractVersionOnInit()",
      "error NotEnoughEther()",
      "error NotOwner(address _sender, address _owner)",
      "error NotOwnerOrApproved(address sender)",
      "error NotOwnerOrApprovedForAll(address sender)",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error RequestAlreadyClaimed(uint256 _requestId)",
      "error RequestAmountTooLarge(uint256 _amountOfStETH)",
      "error RequestAmountTooSmall(uint256 _amountOfStETH)",
      "error RequestIdsNotSorted()",
      "error RequestNotFoundOrNotFinalized(uint256 _requestId)",
      "error ResumedExpected()",
      "error StringTooLong(string str)",
      "error TooMuchEtherToFinalize(uint256 sent, uint256 maxExpected)",
      "error TransferFromIncorrectOwner(address from, address realOwner)",
      "error TransferFromZeroAddress()",
      "error TransferToNonIERC721Receiver(address)",
      "error TransferToThemselves()",
      "error TransferToZeroAddress()",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error ZeroAmountOfETH()",
      "error ZeroMetadata()",
      "error ZeroPauseDuration()",
      "error ZeroRecipient()",
      "error ZeroShareRate()",
      "error ZeroTimestamp()",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event BaseURISet(string baseURI)",
      "event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)",
      "event BunkerModeDisabled()",
      "event BunkerModeEnabled(uint256 _sinceTimestamp)",
      "event ContractVersionSet(uint256 version)",
      "event InitializedV1(address _admin)",
      "event MetadataUpdate(uint256 _tokenId)",
      "event NftDescriptorAddressSet(address nftDescriptorAddress)",
      "event Paused(uint256 duration)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "event WithdrawalClaimed(uint256 indexed requestId, address indexed owner, address indexed receiver, uint256 amountOfETH)",
      "event WithdrawalRequested(uint256 indexed requestId, address indexed requestor, address indexed owner, uint256 amountOfStETH, uint256 amountOfShares)",
      "event WithdrawalsFinalized(uint256 indexed from, uint256 indexed to, uint256 amountOfETHLocked, uint256 sharesToBurn, uint256 timestamp)",
      "function BUNKER_MODE_DISABLED_TIMESTAMP() view returns (uint256)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function FINALIZE_ROLE() view returns (bytes32)",
      "function MANAGE_TOKEN_URI_ROLE() view returns (bytes32)",
      "function MAX_BATCHES_LENGTH() view returns (uint256)",
      "function MAX_STETH_WITHDRAWAL_AMOUNT() view returns (uint256)",
      "function MIN_STETH_WITHDRAWAL_AMOUNT() view returns (uint256)",
      "function ORACLE_ROLE() view returns (bytes32)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function STETH() view returns (address)",
      "function WSTETH() view returns (address)",
      "function approve(address _to, uint256 _requestId)",
      "function balanceOf(address _owner) view returns (uint256)",
      "function bunkerModeSinceTimestamp() view returns (uint256)",
      "function calculateFinalizationBatches(uint256 _maxShareRate, uint256 _maxTimestamp, uint256 _maxRequestsPerCall, tuple(uint256 remainingEthBudget, bool finished, uint256[36] batches, uint256 batchesLength) _state) view returns (tuple(uint256 remainingEthBudget, bool finished, uint256[36] batches, uint256 batchesLength))",
      "function claimWithdrawal(uint256 _requestId)",
      "function claimWithdrawals(uint256[] _requestIds, uint256[] _hints)",
      "function claimWithdrawalsTo(uint256[] _requestIds, uint256[] _hints, address _recipient)",
      "function finalize(uint256 _lastRequestIdToBeFinalized, uint256 _maxShareRate) payable",
      "function findCheckpointHints(uint256[] _requestIds, uint256 _firstIndex, uint256 _lastIndex) view returns (uint256[] hintIds)",
      "function getApproved(uint256 _requestId) view returns (address)",
      "function getBaseURI() view returns (string)",
      "function getClaimableEther(uint256[] _requestIds, uint256[] _hints) view returns (uint256[] claimableEthValues)",
      "function getContractVersion() view returns (uint256)",
      "function getLastCheckpointIndex() view returns (uint256)",
      "function getLastFinalizedRequestId() view returns (uint256)",
      "function getLastRequestId() view returns (uint256)",
      "function getLockedEtherAmount() view returns (uint256)",
      "function getNFTDescriptorAddress() view returns (address)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getWithdrawalRequests(address _owner) view returns (uint256[] requestsIds)",
      "function getWithdrawalStatus(uint256[] _requestIds) view returns (tuple(uint256 amountOfStETH, uint256 amountOfShares, address owner, uint256 timestamp, bool isFinalized, bool isClaimed)[] statuses)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin)",
      "function isApprovedForAll(address _owner, address _operator) view returns (bool)",
      "function isBunkerModeActive() view returns (bool)",
      "function isPaused() view returns (bool)",
      "function name() view returns (string)",
      "function onOracleReport(bool _isBunkerModeNow, uint256 _bunkerStartTimestamp, uint256 _currentReportTimestamp)",
      "function ownerOf(uint256 _requestId) view returns (address)",
      "function pauseFor(uint256 _duration)",
      "function pauseUntil(uint256 _pauseUntilInclusive)",
      "function prefinalize(uint256[] _batches, uint256 _maxShareRate) view returns (uint256 ethToLock, uint256 sharesToBurn)",
      "function renounceRole(bytes32 role, address account)",
      "function requestWithdrawals(uint256[] _amounts, address _owner) returns (uint256[] requestIds)",
      "function requestWithdrawalsWithPermit(uint256[] _amounts, address _owner, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) _permit) returns (uint256[] requestIds)",
      "function requestWithdrawalsWstETH(uint256[] _amounts, address _owner) returns (uint256[] requestIds)",
      "function requestWithdrawalsWstETHWithPermit(uint256[] _amounts, address _owner, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) _permit) returns (uint256[] requestIds)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function safeTransferFrom(address _from, address _to, uint256 _requestId)",
      "function safeTransferFrom(address _from, address _to, uint256 _requestId, bytes _data)",
      "function setApprovalForAll(address _operator, bool _approved)",
      "function setBaseURI(string _baseURI)",
      "function setNFTDescriptorAddress(address _nftDescriptorAddress)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function tokenURI(uint256 _requestId) view returns (string)",
      "function transferFrom(address _from, address _to, uint256 _requestId)",
      "function unfinalizedRequestNumber() view returns (uint256)",
      "function unfinalizedStETH() view returns (uint256)"
    ],
    "eth:0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823": [
      "constructor(address initialOwner_, address lido_)",
      "error ErrorAddExistedObserver()",
      "error ErrorBadObserverInterface()",
      "error ErrorMaxObserversCountExceeded()",
      "error ErrorNoObserverToRemove()",
      "error ErrorNotAuthorizedRebaseCaller()",
      "error ErrorTokenRateNotifierRevertedWithNoData()",
      "error ErrorZeroAddressLido()",
      "error ErrorZeroAddressObserver()",
      "error ErrorZeroAddressOwner()",
      "event ObserverAdded(address indexed observer)",
      "event ObserverRemoved(address indexed observer)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PushTokenRateFailed(address indexed observer, bytes lowLevelRevertData)",
      "function INDEX_NOT_FOUND() view returns (uint256)",
      "function LIDO() view returns (address)",
      "function MAX_OBSERVERS_COUNT() view returns (uint256)",
      "function REQUIRED_INTERFACE() view returns (bytes4)",
      "function addObserver(address observer_)",
      "function handlePostTokenRebase(uint256, uint256, uint256, uint256, uint256, uint256, uint256)",
      "function observers(uint256) view returns (address)",
      "function observersLength() view returns (uint256)",
      "function owner() view returns (address)",
      "function removeObserver(address observer_)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0xE9906E543274cebcd335d2C560094089e9547e8d": [
      "constructor(address lidoLocator, address lido, address legacyOracle, uint256 secondsPerSlot, uint256 genesisTime)",
      "error AddressCannotBeSame()",
      "error AddressCannotBeZero()",
      "error AdminCannotBeZero()",
      "error CannotSubmitExtraDataBeforeMainData()",
      "error DeprecatedExtraDataType(uint256 itemIndex, uint256 dataType)",
      "error ExtraDataAlreadyProcessed()",
      "error ExtraDataHashCannotBeZeroForNonEmptyData()",
      "error ExtraDataItemsCountCannotBeZeroForNonEmptyData()",
      "error HashCannotBeZero()",
      "error IncorrectOracleMigration(uint256 code)",
      "error InitialRefSlotCannotBeLessThanProcessingOne(uint256 initialRefSlot, uint256 processingRefSlot)",
      "error InvalidContractVersionIncrement()",
      "error InvalidExitedValidatorsData()",
      "error InvalidExtraDataItem(uint256 itemIndex)",
      "error InvalidExtraDataSortOrder(uint256 itemIndex)",
      "error LegacyOracleCannotBeZero()",
      "error LidoCannotBeZero()",
      "error LidoLocatorCannotBeZero()",
      "error NoConsensusReportToProcess()",
      "error NonZeroContractVersionOnInit()",
      "error ProcessingDeadlineMissed(uint256 deadline)",
      "error RefSlotAlreadyProcessing()",
      "error RefSlotCannotDecrease(uint256 refSlot, uint256 prevRefSlot)",
      "error RefSlotMustBeGreaterThanProcessingOne(uint256 refSlot, uint256 processingRefSlot)",
      "error SecondsPerSlotCannotBeZero()",
      "error SenderIsNotTheConsensusContract()",
      "error SenderNotAllowed()",
      "error UnexpectedChainConfig()",
      "error UnexpectedConsensusVersion(uint256 expectedVersion, uint256 receivedVersion)",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error UnexpectedDataHash(bytes32 consensusHash, bytes32 receivedHash)",
      "error UnexpectedExtraDataFormat(uint256 expectedFormat, uint256 receivedFormat)",
      "error UnexpectedExtraDataHash(bytes32 consensusHash, bytes32 receivedHash)",
      "error UnexpectedExtraDataIndex(uint256 expectedIndex, uint256 receivedIndex)",
      "error UnexpectedExtraDataItemsCount(uint256 expectedCount, uint256 receivedCount)",
      "error UnexpectedRefSlot(uint256 consensusRefSlot, uint256 dataRefSlot)",
      "error UnsupportedExtraDataFormat(uint256 format)",
      "error UnsupportedExtraDataType(uint256 itemIndex, uint256 dataType)",
      "error VersionCannotBeSame()",
      "event ConsensusHashContractSet(address indexed addr, address indexed prevAddr)",
      "event ConsensusVersionSet(uint256 indexed version, uint256 indexed prevVersion)",
      "event ContractVersionSet(uint256 version)",
      "event ExtraDataSubmitted(uint256 indexed refSlot, uint256 itemsProcessed, uint256 itemsCount)",
      "event ProcessingStarted(uint256 indexed refSlot, bytes32 hash)",
      "event ReportDiscarded(uint256 indexed refSlot, bytes32 hash)",
      "event ReportSubmitted(uint256 indexed refSlot, bytes32 hash, uint256 processingDeadlineTime)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event WarnExtraDataIncompleteProcessing(uint256 indexed refSlot, uint256 processedItemsCount, uint256 itemsCount)",
      "event WarnProcessingMissed(uint256 indexed refSlot)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXTRA_DATA_FORMAT_EMPTY() view returns (uint256)",
      "function EXTRA_DATA_FORMAT_LIST() view returns (uint256)",
      "function EXTRA_DATA_TYPE_EXITED_VALIDATORS() view returns (uint256)",
      "function EXTRA_DATA_TYPE_STUCK_VALIDATORS() view returns (uint256)",
      "function GENESIS_TIME() view returns (uint256)",
      "function LEGACY_ORACLE() view returns (address)",
      "function LIDO() view returns (address)",
      "function LOCATOR() view returns (address)",
      "function MANAGE_CONSENSUS_CONTRACT_ROLE() view returns (bytes32)",
      "function MANAGE_CONSENSUS_VERSION_ROLE() view returns (bytes32)",
      "function SECONDS_PER_SLOT() view returns (uint256)",
      "function SUBMIT_DATA_ROLE() view returns (bytes32)",
      "function discardConsensusReport(uint256 refSlot)",
      "function finalizeUpgrade_v2(uint256 consensusVersion)",
      "function finalizeUpgrade_v3()",
      "function getConsensusContract() view returns (address)",
      "function getConsensusReport() view returns (bytes32 hash, uint256 refSlot, uint256 processingDeadlineTime, bool processingStarted)",
      "function getConsensusVersion() view returns (uint256)",
      "function getContractVersion() view returns (uint256)",
      "function getLastProcessingRefSlot() view returns (uint256)",
      "function getProcessingState() view returns (tuple(uint256 currentFrameRefSlot, uint256 processingDeadlineTime, bytes32 mainDataHash, bool mainDataSubmitted, bytes32 extraDataHash, uint256 extraDataFormat, bool extraDataSubmitted, uint256 extraDataItemsCount, uint256 extraDataItemsSubmitted) result)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address consensusContract, uint256 consensusVersion)",
      "function initializeWithoutMigration(address admin, address consensusContract, uint256 consensusVersion, uint256 lastProcessingRefSlot)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setConsensusContract(address addr)",
      "function setConsensusVersion(uint256 version)",
      "function submitConsensusReport(bytes32 reportHash, uint256 refSlot, uint256 deadline)",
      "function submitReportData(tuple(uint256 consensusVersion, uint256 refSlot, uint256 numValidators, uint256 clBalanceGwei, uint256[] stakingModuleIdsWithNewlyExitedValidators, uint256[] numExitedValidatorsByStakingModule, uint256 withdrawalVaultBalance, uint256 elRewardsVaultBalance, uint256 sharesRequestedToBurn, uint256[] withdrawalFinalizationBatches, uint256 simulatedShareRate, bool isBunkerMode, uint256 extraDataFormat, bytes32 extraDataHash, uint256 extraDataItemsCount) data, uint256 contractVersion)",
      "function submitReportExtraDataEmpty()",
      "function submitReportExtraDataList(bytes data)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "eth:0xF0211b7660680B49De1A7E9f25C65660F0a13Fea": [
      "constructor(address _governanceToken, address _admin, uint256 _motionDuration, uint256 _motionsCountLimit, uint256 _objectionsThreshold)",
      "event EVMScriptExecutorChanged(address indexed _evmScriptExecutor)",
      "event EVMScriptFactoryAdded(address indexed _evmScriptFactory, bytes _permissions)",
      "event EVMScriptFactoryRemoved(address indexed _evmScriptFactory)",
      "event MotionCanceled(uint256 indexed _motionId)",
      "event MotionCreated(uint256 indexed _motionId, address _creator, address indexed _evmScriptFactory, bytes _evmScriptCallData, bytes _evmScript)",
      "event MotionDurationChanged(uint256 _motionDuration)",
      "event MotionEnacted(uint256 indexed _motionId)",
      "event MotionObjected(uint256 indexed _motionId, address indexed _objector, uint256 _weight, uint256 _newObjectionsAmount, uint256 _newObjectionsAmountPct)",
      "event MotionRejected(uint256 indexed _motionId)",
      "event MotionsCountLimitChanged(uint256 _newMotionsCountLimit)",
      "event ObjectionsThresholdChanged(uint256 _newThreshold)",
      "event Paused(address account)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Unpaused(address account)",
      "function CANCEL_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MAX_MOTIONS_LIMIT() view returns (uint256)",
      "function MAX_OBJECTIONS_THRESHOLD() view returns (uint256)",
      "function MIN_MOTION_DURATION() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function UNPAUSE_ROLE() view returns (bytes32)",
      "function addEVMScriptFactory(address _evmScriptFactory, bytes _permissions)",
      "function canObjectToMotion(uint256 _motionId, address _objector) view returns (bool)",
      "function cancelAllMotions()",
      "function cancelMotion(uint256 _motionId)",
      "function cancelMotions(uint256[] _motionIds)",
      "function createMotion(address _evmScriptFactory, bytes _evmScriptCallData) returns (uint256 _newMotionId)",
      "function enactMotion(uint256 _motionId, bytes _evmScriptCallData)",
      "function evmScriptExecutor() view returns (address)",
      "function evmScriptFactories(uint256) view returns (address)",
      "function evmScriptFactoryPermissions(address) view returns (bytes)",
      "function getEVMScriptFactories() view returns (address[])",
      "function getMotion(uint256 _motionId) view returns (tuple(uint256 id, address evmScriptFactory, address creator, uint256 duration, uint256 startDate, uint256 snapshotBlock, uint256 objectionsThreshold, uint256 objectionsAmount, bytes32 evmScriptHash))",
      "function getMotions() view returns (tuple(uint256 id, address evmScriptFactory, address creator, uint256 duration, uint256 startDate, uint256 snapshotBlock, uint256 objectionsThreshold, uint256 objectionsAmount, bytes32 evmScriptHash)[])",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function governanceToken() view returns (address)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function isEVMScriptFactory(address _maybeEVMScriptFactory) view returns (bool)",
      "function motionDuration() view returns (uint256)",
      "function motions(uint256) view returns (uint256 id, address evmScriptFactory, address creator, uint256 duration, uint256 startDate, uint256 snapshotBlock, uint256 objectionsThreshold, uint256 objectionsAmount, bytes32 evmScriptHash)",
      "function motionsCountLimit() view returns (uint256)",
      "function objectToMotion(uint256 _motionId)",
      "function objections(uint256, address) view returns (bool)",
      "function objectionsThreshold() view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function removeEVMScriptFactory(address _evmScriptFactory)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setEVMScriptExecutor(address _evmScriptExecutor)",
      "function setMotionDuration(uint256 _motionDuration)",
      "function setMotionsCountLimit(uint256 _motionsCountLimit)",
      "function setObjectionsThreshold(uint256 _objectionsThreshold)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unpause()"
    ],
    "eth:0xf165148978Fa3cE74d76043f833463c340CFB704": [
      "function hasInitialized() view returns (bool)",
      "function assignDelegate(address _delegate)",
      "function unassignDelegate()",
      "function unsafelyChangeObjectionPhaseTime(uint64 _objectionPhaseTime)",
      "function initialize(address _token, uint64 _supportRequiredPct, uint64 _minAcceptQuorumPct, uint64 _voteTime, uint64 _objectionPhaseTime)",
      "function UNSAFELY_MODIFY_VOTE_TIME_ROLE() view returns (bytes32)",
      "function unsafelyChangeVoteTime(uint64 _voteTime)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function MODIFY_QUORUM_ROLE() view returns (bytes32)",
      "function objectionPhaseTime() view returns (uint64)",
      "function getVoterState(uint256 _voteId, address _voter) view returns (uint8)",
      "function getDelegate(address _voter) view returns (address)",
      "function getVote(uint256 _voteId) view returns (bool open, bool executed, uint64 startDate, uint64 snapshotBlock, uint64 supportRequired, uint64 minAcceptQuorum, uint256 yea, uint256 nay, uint256 votingPower, bytes script, uint8 phase)",
      "function getDelegatedVoters(address _delegate, uint256 _offset, uint256 _limit) view returns (address[] voters)",
      "function changeMinAcceptQuorumPct(uint64 _minAcceptQuorumPct)",
      "function MODIFY_SUPPORT_ROLE() view returns (bytes32)",
      "function getVotingPowerMultipleAtVote(uint256 _voteId, address[] _voters) view returns (uint256[] balances)",
      "function attemptVoteFor(uint256 _voteId, bool _supports, address _voter)",
      "function attemptVoteForMultiple(uint256 _voteId, bool _supports, address[] _voters)",
      "function changeSupportRequiredPct(uint64 _supportRequiredPct)",
      "function allowRecoverability(address token) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function getDelegatedVotersCount(address _delegate) view returns (uint256)",
      "function getInitializationBlock() view returns (uint256)",
      "function transferToVault(address _token)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function getVoterStateMultipleAtVote(uint256 _voteId, address[] _voters) view returns (uint8[] voterStatesList)",
      "function getVotingPowerMultiple(address[] _voters) view returns (uint256[] balances)",
      "function voteTime() view returns (uint64)",
      "function CREATE_VOTES_ROLE() view returns (bytes32)",
      "function canForward(address _sender, bytes) view returns (bool)",
      "function canExecute(uint256 _voteId) view returns (bool)",
      "function canVote(uint256 _voteId, address _voter) view returns (bool)",
      "function kernel() view returns (address)",
      "function newVote(bytes _executionScript, string _metadata) returns (uint256 voteId)",
      "function forward(bytes _evmScript)",
      "function minAcceptQuorumPct() view returns (uint64)",
      "function isPetrified() view returns (bool)",
      "function votesLength() view returns (uint256)",
      "function vote(uint256 _voteId, bool _supports, bool)",
      "function newVote(bytes _executionScript, string _metadata, bool, bool) returns (uint256 voteId)",
      "function getVotePhase(uint256 _voteId) view returns (uint8)",
      "function executeVote(uint256 _voteId)",
      "function supportRequiredPct() view returns (uint64)",
      "function token() view returns (address)",
      "function PCT_BASE() view returns (uint64)",
      "function isForwarder() pure returns (bool)",
      "event StartVote(uint256 indexed voteId, address indexed creator, string metadata)",
      "event CastVote(uint256 indexed voteId, address indexed voter, bool supports, uint256 stake)",
      "event CastObjection(uint256 indexed voteId, address indexed voter, uint256 stake)",
      "event ExecuteVote(uint256 indexed voteId)",
      "event ChangeSupportRequired(uint64 supportRequiredPct)",
      "event ChangeMinQuorum(uint64 minAcceptQuorumPct)",
      "event ChangeVoteTime(uint64 voteTime)",
      "event ChangeObjectionPhaseTime(uint64 objectionPhaseTime)",
      "event AssignDelegate(address indexed voter, address indexed assignedDelegate)",
      "event UnassignDelegate(address indexed voter, address indexed unassignedDelegate)",
      "event AttemptCastVoteAsDelegate(uint256 indexed voteId, address indexed delegate, address[] voters)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)"
    ],
    "eth:0xf65614d73952Be91ce0aE7Dd9cFf25Ba15bEE2f5": [
      "constructor(address owner, address dualGovernance, uint32 timelock)",
      "error AccountIsNotMember(address account)",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error CallerIsNotMember(address caller)",
      "error DuplicatedMember(address account)",
      "error FailedInnerCall()",
      "error HashAlreadyScheduled(bytes32 hash)",
      "error HashAlreadyUsed(bytes32 hash)",
      "error HashIsNotScheduled(bytes32 hash)",
      "error InvalidMemberAccount(address account)",
      "error InvalidQuorum()",
      "error InvalidSealable(address sealable)",
      "error InvalidTimelockDuration(uint32 timelock)",
      "error OffsetOutOfBounds()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ProposalDoesNotExist(uint256 proposalId)",
      "error ProposalDoesNotExist(bytes32 key)",
      "error QuorumIsNotReached()",
      "error ResumeSealableNonceMismatch()",
      "error SealableIsNotPaused(address sealable)",
      "error TimelockNotPassed()",
      "error TimestampOverflow()",
      "event HashScheduled(bytes32 hash)",
      "event HashUsed(bytes32 hash)",
      "event MemberAdded(address indexed member)",
      "event MemberRemoved(address indexed member)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QuorumSet(uint256 quorum)",
      "event TimelockDurationSet(uint32 timelockDuration)",
      "event Voted(address indexed signer, bytes32 hash, bool support)",
      "function DUAL_GOVERNANCE() view returns (address)",
      "function addMembers(address[] newMembers, uint256 executionQuorum)",
      "function approves(address signer, bytes32 hash) view returns (bool approve)",
      "function checkProposalExists(uint256 proposalId) view",
      "function checkSealableIsPaused(address sealable) view",
      "function executeScheduleProposal(uint256 proposalId)",
      "function executeSealableResume(address sealable)",
      "function getMembers() view returns (address[])",
      "function getOrderedKeys(uint256 offset, uint256 limit) view returns (bytes32[])",
      "function getProposal(bytes32 key) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data))",
      "function getProposalAt(uint256 index) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data))",
      "function getProposals(uint256 offset, uint256 limit) view returns (tuple(uint40 submittedAt, uint256 proposalType, bytes data)[] proposals)",
      "function getProposalsLength() view returns (uint256)",
      "function getQuorum() view returns (uint256)",
      "function getScheduleProposalState(uint256 proposalId) view returns (uint256 support, uint256 executionQuorum, uint40 quorumAt, bool isExecuted)",
      "function getSealableResumeNonce(address sealable) view returns (uint256)",
      "function getSealableResumeState(address sealable, uint256 nonce) view returns (uint256 support, uint256 executionQuorum, uint40 quorumAt, bool isExecuted)",
      "function getTimelockDuration() view returns (uint32)",
      "function isMember(address member) view returns (bool)",
      "function owner() view returns (address)",
      "function removeMembers(address[] membersToRemove, uint256 executionQuorum)",
      "function renounceOwnership()",
      "function schedule(bytes32 hash)",
      "function scheduleProposal(uint256 proposalId)",
      "function sealableResume(address sealable, uint256 nonce)",
      "function setQuorum(uint256 newQuorum)",
      "function setTimelockDuration(uint32 newTimelock)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0xf73a1260d222f447210581DDf212D915c09a3249": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "eth:0xf8Bfa395744Cb25fa4368Ffe2344Dc35546092d9": [
      "constructor(address _singleton)"
    ],
    "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "eth:0xFE5986E06210aC1eCC1aDCafc0cc7f8D63B3F977": [
      "constructor(address _callsScript, address _easyTrack)",
      "event EasyTrackChanged(address indexed _previousEasyTrack, address indexed _newEasyTrack)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ScriptExecuted(address indexed _caller, bytes _evmScript)",
      "function callsScript() view returns (address)",
      "function easyTrack() view returns (address)",
      "function executeEVMScript(bytes _evmScript) returns (bytes)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setEasyTrack(address _easyTrack)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD": [
      "constructor(address _lido, address _depositContract, address _stakingRouter, uint256 _pauseIntentValidityPeriodBlocks, uint256 _maxOperatorsPerUnvetting)",
      "error DepositInactiveModule()",
      "error DepositNoQuorum()",
      "error DepositRootChanged()",
      "error DepositTooFrequent()",
      "error DepositUnexpectedBlockHash()",
      "error DepositsArePaused()",
      "error DepositsNotPaused()",
      "error DuplicateAddress(address addr)",
      "error InvalidSignature()",
      "error ModuleNonceChanged()",
      "error NotAGuardian(address addr)",
      "error NotAnOwner(address caller)",
      "error PauseIntentExpired()",
      "error SignaturesNotSorted()",
      "error UnvetPayloadInvalid()",
      "error UnvetUnexpectedBlockHash()",
      "error ZeroAddress(string field)",
      "error ZeroParameter(string parameter)",
      "event DepositsPaused(address indexed guardian)",
      "event DepositsUnpaused()",
      "event GuardianAdded(address guardian)",
      "event GuardianQuorumChanged(uint256 newValue)",
      "event GuardianRemoved(address guardian)",
      "event LastDepositBlockChanged(uint256 newValue)",
      "event MaxOperatorsPerUnvettingChanged(uint256 newValue)",
      "event OwnerChanged(address newValue)",
      "event PauseIntentValidityPeriodBlocksChanged(uint256 newValue)",
      "function ATTEST_MESSAGE_PREFIX() view returns (bytes32)",
      "function DEPOSIT_CONTRACT() view returns (address)",
      "function LIDO() view returns (address)",
      "function PAUSE_MESSAGE_PREFIX() view returns (bytes32)",
      "function STAKING_ROUTER() view returns (address)",
      "function UNVET_MESSAGE_PREFIX() view returns (bytes32)",
      "function VERSION() view returns (uint256)",
      "function addGuardian(address addr, uint256 newQuorum)",
      "function addGuardians(address[] addresses, uint256 newQuorum)",
      "function canDeposit(uint256 stakingModuleId) view returns (bool)",
      "function depositBufferedEther(uint256 blockNumber, bytes32 blockHash, bytes32 depositRoot, uint256 stakingModuleId, uint256 nonce, bytes depositCalldata, tuple(bytes32 r, bytes32 vs)[] sortedGuardianSignatures)",
      "function getGuardianIndex(address addr) view returns (int256)",
      "function getGuardianQuorum() view returns (uint256)",
      "function getGuardians() view returns (address[])",
      "function getLastDepositBlock() view returns (uint256)",
      "function getMaxOperatorsPerUnvetting() view returns (uint256)",
      "function getOwner() view returns (address)",
      "function getPauseIntentValidityPeriodBlocks() view returns (uint256)",
      "function isDepositsPaused() view returns (bool)",
      "function isGuardian(address addr) view returns (bool)",
      "function isMinDepositDistancePassed(uint256 stakingModuleId) view returns (bool)",
      "function pauseDeposits(uint256 blockNumber, tuple(bytes32 r, bytes32 vs) sig)",
      "function removeGuardian(address addr, uint256 newQuorum)",
      "function setGuardianQuorum(uint256 newValue)",
      "function setMaxOperatorsPerUnvetting(uint256 newValue)",
      "function setOwner(address newValue)",
      "function setPauseIntentValidityPeriodBlocks(uint256 newValue)",
      "function unpauseDeposits()",
      "function unvetSigningKeys(uint256 blockNumber, bytes32 blockHash, uint256 stakingModuleId, uint256 nonce, bytes nodeOperatorIds, bytes vettedSigningKeysCounts, tuple(bytes32 r, bytes32 vs) sig)"
    ],
    "eth:0xFFe21561251c49AdccFad065C94Fb4931dF49081": [
      "constructor(address _singleton)"
    ]
  },
  "usedTemplates": {
    "global/DepositContract": "0xfc77f1d7412b523d27d6db22532ffaa54e0026a15c868272f2f454514cab5df5",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "lido-v2/EasyTrack": "0xef8c5eba4aa3fd1cd3df8e56f4ecb4d1ee27dc246df035faf71e3e46de9f1706",
    "lido-v2/EmergencyProtectedTimelock": "0xa5fb3ce977e79ed102afad7b356950cc0880da7a04644d65b62f53b07a6cd455",
    "lido-v2/Escrow": "0xbec2e38f6a4f818aaaeeb008804b4649ed7d5280a53930b7be63ce209ed933ec",
    "lido-v2/Finance": "0x96f8dbda6c5a4a54a470c990e42cdf1d702547719fbaaf28bc56294dcb4881c6",
    "lido-v2/OracleReportSanityChecker": "0xf0db03721cc15af078d6a93a1b8d8f8e438c2611fdb2fb5c22d599e6c939a384",
    "lido-v2/TiebreakerCoreCommittee": "0xea30e6d9e569822706f78f9d87ca4389b0f8ca4724c9240b9374be70baa20d76",
    "lido-v2/TiebreakerSubCommittee": "0xea30e6d9e569822706f78f9d87ca4389b0f8ca4724c9240b9374be70baa20d76",
    "lido-v2/TimelockedGovernance": "0x420e7058beccda9213a7d203a9a194e7a8f4728522cc3d76acfad7abb7d5eb0c",
    "lido-v2/TriggerableWithdrawalsGateway": "0xf0db03721cc15af078d6a93a1b8d8f8e438c2611fdb2fb5c22d599e6c939a384",
    "tokens/Lido/AccountingOracle": "0xa737574a3429dc849fdc7c42c42a4ea3d16eec8a301ff248b28a3f95daa2de87",
    "tokens/Lido/ACL": "0x5e8fb58e5938caadf8fabd19853d88dd0f4dc32b536d084bca146be6087c1942",
    "tokens/Lido/Burner": "0xf6c8cf6cb60ea799f5de86286c9080914905458749bb49c535b87e53b5a0247d",
    "tokens/Lido/CSAccounting": "0x8af482360812b36721426ee5602c036f78274ac0a1c4c72914da2de993ec8e18",
    "tokens/Lido/CSFeeDistributor": "0x7071809bbc0a7729e4a1838112ee8c32323144951342f911477c1b7a2674bd3c",
    "tokens/Lido/CSFeeOracle": "0xedff44ab6d2a997500f30983e462cdc2403bbe006060357d49a5265cb8a42c28",
    "tokens/Lido/CSModule": "0xe049774b0cf1b6b24e9644c96b0c447bb511bd667b9b2bf48719e27b31a0c9f9",
    "tokens/Lido/CSParametersRegistry": "0x91abf839c7ba95f0c664ed3c10d7670f06b49a0edebb70ef23bdbf2ff7dc9dcb",
    "tokens/Lido/DepositSecurityModule": "0x99ae4ecad8b09875ad720b21d7a45c1e420639eb19bb5cb3311f71c2c9e872c8",
    "tokens/Lido/EVMScriptRegistry": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "tokens/Lido/HashConsensus": "0x714206285494e40177e6727e5d9af271f182e4d67f965befb1fa9a53329f9a00",
    "tokens/Lido/LegacyOracle": "0xd4c2b7792d1aa8bda3a9e6605109fdfd535626c0735212849251027e9c9678f9",
    "tokens/Lido/LidoDaoAgent": "0xf0db03721cc15af078d6a93a1b8d8f8e438c2611fdb2fb5c22d599e6c939a384",
    "tokens/Lido/MiniMeToken": "0x4477605aa619c192084296dec31b5dc3ef87585bb125619bf0732705aa9b8500",
    "tokens/Lido/NodeOperatorsRegistry": "0xe7998a3d16a66518764c4ed39e42d9e4c686ab433f69ab3cc04266651aca2bcc",
    "tokens/Lido/OpStackTokenRatePusher": "0x0803b1e88c67bebc35eefc187ea1d4d767067c1b9a88db89e2a7ca732f48acca",
    "tokens/Lido/StakingRouter": "0x3b8deac80914582607e6b92707925aa8457611db826cca0ad5cf7085e62cacb1",
    "tokens/Lido/stETH": "0x7f5ae107bccaebd6f82f68a717c01c505f08fad1375810e9f0cbb70152f86bc2",
    "tokens/Lido/ValidatorsExitBusOracle": "0x11365707f780cd17f5f0f1cc48c59745a28a1f5725b533c928cdaac71c9e3938",
    "tokens/Lido/Voting": "0xfe60c9f930249cf52507a6861a5f27ba4d2b0e05965376084669ce656fa4565f",
    "tokens/Lido/WithdrawalQueueERC721": "0x999efd80759927a26a9874cb287cd2c4f3dee48b81a311228a9bf4cfb2fcfc52",
    "tokens/Lido/wstETH": "0x9b708a05879c062566a96f737bd9998af0ceda3a51a54456a93cd24fd4c4dfdf"
  },
  "usedBlockNumbers": { "ethereum": 23675166 },
  "permissionsConfigHash": "0xf25f017e4953d4791ffa44a6fb39b4e2c17d3358ccbbcc6e1fca8eb7cd4cc6e9"
}
