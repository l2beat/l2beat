{
  "name": "nova",
  "timestamp": 1758758549,
  "configHash": "0xdedbec42e60b6a6459396c1c3442481dbf105921e3878d479202fe3ac95b2fc4",
  "entries": [
    {
      "name": "bartek.eth-L2BEAT",
      "address": "arb-nova:0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L2GatewayRouter",
      "address": "arb-nova:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8",
      "type": "Contract",
      "template": "orbitstack/layer2/L2GatewayRouter",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x6b2f9c454049196975edab9674208890663911ceebf0cf2c64d3c26a32aa300c"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Router managing token <â€“> gateway mapping on L2.",
      "sinceTimestamp": 1656313073,
      "sinceBlock": 12,
      "values": {
        "$admin": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C",
        "$implementation": "arb-nova:0x8f377770289863DF73Fe665B74460579F82321fb",
        "$pastUpgrades": [
          [
            "2022-06-27T06:57:53.000Z",
            "0xf3cdbd24cf85ce120e1846c278011da74771b6063423bf0cdccf8d9ab497dc88",
            ["arb-nova:0x09854610F48462a7029fF192FA0AfB7F00133F54"]
          ],
          [
            "2022-08-08T17:57:32.000Z",
            "0x9549dff9595eda9d452479b4ccc2092d2dd01a12f3c2db8165bec365d54128f1",
            ["arb-nova:0x8f377770289863DF73Fe665B74460579F82321fb"]
          ]
        ],
        "$upgradeCount": 2,
        "counterpartGateway": "arb-nova:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48",
        "defaultGateway": "arb-nova:0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257",
        "router": "arb-nova:0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "arb-nova:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8": "TransparentUpgradeableProxy",
        "arb-nova:0x8f377770289863DF73Fe665B74460579F82321fb": "L2GatewayRouter"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "EmilianoBonassi-Conduit",
      "address": "arb-nova:0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "yoav.eth-EF",
      "address": "arb-nova:0x475816ca2a31D601B4e336f5c2418A67978aBf09",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L2SurplusFee",
      "address": "arb-nova:0x509386DbF5C0BE6fd68Df97A05fdB375136c32De",
      "type": "Contract",
      "template": "orbitstack/layer2/L2SurplusFee",
      "sourceHashes": [
        "0xef8d56213b60d676b88afce25cb17bb89c7c3fc10c4ec06f77fe4820529e409b"
      ],
      "proxyType": "immutable",
      "description": "This contract receives all SurplusFees: Transaction fee component that covers the cost beyond that covered by the L2 Base Fee during chain congestion. They are withdrawable to a configurable set of recipients.",
      "sinceTimestamp": 1678990053,
      "sinceBlock": 3162027,
      "values": {
        "$immutable": true,
        "currentRecipientGroup": "0xf282fbf81236cb85617464bf2345689bad849c6122d8725eeef1a4cf78e8d9a3",
        "currentRecipientWeights": "0x1d460b64f7b8ba0be629afe9b4ae65333b379985d7ea823ff4c0b8c3b5102153",
        "MAX_RECIPIENTS": 64,
        "owner": "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482",
        "PER_RECIPIENT_GAS": 100000,
        "recipientsData": [
          {
            "recipients": [
              "arb-nova:0xf7951D92B0C345144506576eC13Ecf5103aC905a"
            ],
            "weights": [10000]
          },
          {
            "recipients": [
              "arb-nova:0x36D0170D92F66e8949eB276C3AC4FEA64f83704d"
            ],
            "weights": [10000]
          }
        ]
      },
      "fieldMeta": {
        "recipientsData": {
          "description": "Lists recipients and weights using events, while the latest represents the current state."
        }
      },
      "implementationNames": {
        "arb-nova:0x509386DbF5C0BE6fd68Df97A05fdB375136c32De": "RewardDistributor"
      }
    },
    {
      "name": "StandardArbERC20",
      "address": "arb-nova:0x53923A0d1f4805463584c91b2E55d6c600A94E91",
      "type": "Contract",
      "sourceHashes": [
        "0xf98882c836bb8026b07fe0c6af0e5fc52578e78078c523fcd7974fb69b833732"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1656313093,
      "sinceBlock": 19,
      "values": {
        "$immutable": true,
        "decimals": 0,
        "DOMAIN_SEPARATOR": "0xf1612a54a0f8523514e61ce4b6c4514c7c95d7e898270c3ee0fdb14c6735f04d",
        "isMaster": true,
        "l1Address": "arb-nova:0x0000000000000000000000000000000000000000",
        "l2Gateway": "arb-nova:0x0000000000000000000000000000000000000000",
        "name": "",
        "symbol": "",
        "totalSupply": 0
      },
      "implementationNames": {
        "arb-nova:0x53923A0d1f4805463584c91b2E55d6c600A94E91": "StandardArbERC20"
      }
    },
    {
      "name": "DennisonBertram-Tally",
      "address": "arb-nova:0x59c8535419BbCb8AdFFDB3C835435E907e3B183B",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L2WethGateway",
      "address": "arb-nova:0x7626841cB6113412F9c88D3ADC720C9FAC88D9eD",
      "type": "Contract",
      "template": "orbitstack/layer2/L2WethGateway",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0xadf7f548448c8cfc2273cb5feeb31bcdd088e2d60e9be8756da94535ef5667d7"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Counterpart to the Bridge on L1. Mints and burns WETH on L2.",
      "sinceTimestamp": 1656314863,
      "sinceBlock": 32,
      "values": {
        "$admin": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C",
        "$implementation": "arb-nova:0xbe04Ab2728c924D678f9FC833E379688c6eFA317",
        "$pastUpgrades": [
          [
            "2022-06-27T07:27:43.000Z",
            "0x33df4b772bad38d87a6d0d5a9af01ff0c98ea3296c40e03d9aa02b381a17cc0a",
            ["arb-nova:0x3525f734fcE1a26a6CEffFca43538290DC239771"]
          ],
          [
            "2022-08-08T17:59:07.000Z",
            "0x20a549a861bb33f3fe522e14752416f2aebdb31747987b8bcc0ae81ecb36b3d5",
            ["arb-nova:0x190C993Db842097df8b8d71c910f1802df0724C3"]
          ],
          [
            "2023-02-10T03:19:59.000Z",
            "0x9ce025df640cca593a80fdad6d1f9e6f4ba8b226f9b296cc83c247f50407bea3",
            ["arb-nova:0x190C993Db842097df8b8d71c910f1802df0724C3"]
          ],
          [
            "2023-02-10T18:07:59.000Z",
            "0x66547238f43682dabc33c021b70f02ffdb62510399f42a174b43498c8065cff6",
            ["arb-nova:0xbe04Ab2728c924D678f9FC833E379688c6eFA317"]
          ]
        ],
        "$upgradeCount": 4,
        "counterpartGateway": "arb-nova:0xE4E2121b479017955Be0b175305B35f312330BaE",
        "l1Weth": "arb-nova:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "l2Weth": "arb-nova:0x722E8BdD2ce80A4422E880164f2079488e115365",
        "router": "arb-nova:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8"
      },
      "implementationNames": {
        "arb-nova:0x7626841cB6113412F9c88D3ADC720C9FAC88D9eD": "TransparentUpgradeableProxy",
        "arb-nova:0xbe04Ab2728c924D678f9FC833E379688c6eFA317": "L2WethGateway"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "JohnMorrow-Gauntlet",
      "address": "arb-nova:0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L2UpgradeExecutor",
      "address": "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482",
      "type": "Contract",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x5b1abdc6dea1e28ed7625a5840c5e44c9a0e33a01b15db9b8604c9e587986e85"
      ],
      "proxyType": "EIP1967 proxy",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "arb-nova:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8",
          "role": "admin",
          "via": [
            { "address": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "arb-nova:0x7626841cB6113412F9c88D3ADC720C9FAC88D9eD",
          "role": "admin",
          "via": [
            { "address": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482",
          "role": "admin",
          "via": [
            { "address": "arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "arb-nova:0xbf544970E6BD77b21C6492C281AB60d0770451F4",
          "role": "admin",
          "via": [
            { "address": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "arb-nova:0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257",
          "role": "admin",
          "via": [
            { "address": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "arb-nova:0xf823C3cD3CeBE0a1fA952ba88Dc9EEf8e0Bf46AD",
          "role": "admin",
          "via": [
            { "address": "arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C",
          "role": ".owner"
        },
        {
          "permission": "act",
          "from": "arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9",
          "role": ".owner"
        }
      ],
      "sinceTimestamp": 1678968483,
      "sinceBlock": 3154416,
      "values": {
        "$admin": "arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9",
        "$implementation": "arb-nova:0x3d745b8815F9be5BF053858165f8aB1F58c77932",
        "$pastUpgrades": [
          [
            "2023-03-16T12:08:03.000Z",
            "0xdf073ab55f4ee86b52d0a511575cc76e5abb5e65e36c23a9fe4f685bb620d807",
            ["arb-nova:0x3096EAEdcb3A3B665552660F4d921E565D0073cB"]
          ],
          [
            "2025-09-23T16:32:04.000Z",
            "0x06d23bf7c4f6d2744a60b2767eeb155cc463c64cdb7c12eb4d474e7b9b62d847",
            ["arb-nova:0x3d745b8815F9be5BF053858165f8aB1F58c77932"]
          ]
        ],
        "$upgradeCount": 2,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "ADMIN_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": ["arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482"]
          },
          "EXECUTOR_ROLE": {
            "adminRole": "ADMIN_ROLE",
            "members": [
              "arb-nova:0xf7951D92B0C345144506576eC13Ecf5103aC905a",
              "arb-nova:0xc232ee726E3C51B86778BB4dBe61C52cC07A60F3"
            ]
          }
        },
        "ADMIN_ROLE": "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63"
      },
      "implementationNames": {
        "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482": "TransparentUpgradeableProxy",
        "arb-nova:0x3d745b8815F9be5BF053858165f8aB1F58c77932": "UpgradeExecutor"
      }
    },
    {
      "name": "GriffGreen-Giveth",
      "address": "arb-nova:0x882c6FCb3D358b9d70B97c6999159cea64168B6F",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "StevenThornton-OpenZeppelin",
      "address": "arb-nova:0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GoncaloMagalhaes-Immunefi",
      "address": "arb-nova:0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L2BaseFee",
      "address": "arb-nova:0x9fCB6F75D99029f28F6F4a1d277bae49c5CAC79f",
      "type": "Contract",
      "template": "orbitstack/layer2/L2SurplusFee",
      "sourceHashes": [
        "0xef8d56213b60d676b88afce25cb17bb89c7c3fc10c4ec06f77fe4820529e409b"
      ],
      "proxyType": "immutable",
      "description": "This contract receives all SurplusFees: Transaction fee component that covers the cost beyond that covered by the L2 Base Fee during chain congestion. They are withdrawable to a configurable set of recipients.",
      "sinceTimestamp": 1678990053,
      "sinceBlock": 3162026,
      "values": {
        "$immutable": true,
        "currentRecipientGroup": "0xc21cdeb0278022eeb6305048d7d033ce165b518e371bc91c58b76175e4f7fc2b",
        "currentRecipientWeights": "0x27c5930fa5bbbf9423b2d7e7555073eb37787a62eb8ffeac867b84726ed94af8",
        "MAX_RECIPIENTS": 64,
        "owner": "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482",
        "PER_RECIPIENT_GAS": 100000,
        "recipientsData": [
          {
            "recipients": [
              "arb-nova:0xf7951D92B0C345144506576eC13Ecf5103aC905a",
              "arb-nova:0xD0749b3e537Ed52DE4e6a3Ae1eB6fc26059d0895",
              "arb-nova:0x41C327d5fc9e29680CcD45e5E52446E0DB3DAdFd",
              "arb-nova:0x02C2599aa929e2509741b44F3a13029745aB1AB2",
              "arb-nova:0xA221f29236996BDEfA5C585acdD407Ec84D78447",
              "arb-nova:0x0fB1f1a31429F1A90a19Ab5486a6DFb384179641",
              "arb-nova:0xb814441ed86e98e8B83d31eEC095e4a5A36Fc3c2"
            ],
            "weights": [8000, 375, 373, 373, 373, 373, 133]
          },
          {
            "recipients": [
              "arb-nova:0x36D0170D92F66e8949eB276C3AC4FEA64f83704d",
              "arb-nova:0xD0749b3e537Ed52DE4e6a3Ae1eB6fc26059d0895",
              "arb-nova:0x41C327d5fc9e29680CcD45e5E52446E0DB3DAdFd",
              "arb-nova:0x02C2599aa929e2509741b44F3a13029745aB1AB2",
              "arb-nova:0xA221f29236996BDEfA5C585acdD407Ec84D78447",
              "arb-nova:0x0fB1f1a31429F1A90a19Ab5486a6DFb384179641",
              "arb-nova:0xb814441ed86e98e8B83d31eEC095e4a5A36Fc3c2"
            ],
            "weights": [8000, 375, 373, 373, 373, 373, 133]
          }
        ]
      },
      "fieldMeta": {
        "recipientsData": {
          "description": "Lists recipients and weights using events, while the latest represents the current state."
        }
      },
      "implementationNames": {
        "arb-nova:0x9fCB6F75D99029f28F6F4a1d277bae49c5CAC79f": "RewardDistributor"
      }
    },
    {
      "name": "L2GatewaysProxyAdmin",
      "address": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0xf944f88083f41ff959fefbdcd6fc3ae633692b072b8497fb14cbdd843eded490"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "arb-nova:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "arb-nova:0x7626841cB6113412F9c88D3ADC720C9FAC88D9eD",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "arb-nova:0xbf544970E6BD77b21C6492C281AB60d0770451F4",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "arb-nova:0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1656313068,
      "sinceBlock": 10,
      "values": {
        "$immutable": true,
        "owner": "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482"
      },
      "implementationNames": {
        "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C": "ProxyAdmin"
      }
    },
    {
      "address": "arb-nova:0xB50721BCf8d664c30412Cfbc6cf7a15145234ad1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Michael Lewellen - blockaid",
      "address": "arb-nova:0xBBD2E01eFB88ce00F8f5b6B9a696966070089392",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L2ARBGateway",
      "address": "arb-nova:0xbf544970E6BD77b21C6492C281AB60d0770451F4",
      "type": "Contract",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x1cb12c4c632180beb2db8907c85d74522ccc8f18edc0626818bedf7229297333"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["exitNum"],
      "sinceTimestamp": 1656313084,
      "sinceBlock": 16,
      "values": {
        "$admin": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C",
        "$implementation": "arb-nova:0x554e12DBAa0fBeB8A35583a6Fd9D04BaA4ff597f",
        "$pastUpgrades": [
          [
            "2022-06-27T06:58:04.000Z",
            "0xe0b217581754ec4ddf4385d876eedc76afcc5d70c4a394f1ea8515f3026cb43b",
            ["arb-nova:0xb1d943d67b793D61F08b5F536AC591a057306fe5"]
          ],
          [
            "2022-08-08T17:58:06.000Z",
            "0x4dcb9401328656bb4021741be0324b07a940682e28fd1b8ee45086c446f8ed13",
            ["arb-nova:0x6e04b9dd87CF2cD3b7D81C50D2DF72d24BC0Cc4C"]
          ],
          [
            "2022-12-06T01:54:51.000Z",
            "0x9403cf26146890250477d83eb73c08632c9af62a1e0f315a4b9b7c63425fc0e9",
            ["arb-nova:0x554e12DBAa0fBeB8A35583a6Fd9D04BaA4ff597f"]
          ]
        ],
        "$upgradeCount": 3,
        "counterpartGateway": "arb-nova:0x23122da8C581AA7E0d07A36Ff1f16F799650232f",
        "exitNum": 2391,
        "router": "arb-nova:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8"
      },
      "implementationNames": {
        "arb-nova:0xbf544970E6BD77b21C6492C281AB60d0770451F4": "TransparentUpgradeableProxy",
        "arb-nova:0x554e12DBAa0fBeB8A35583a6Fd9D04BaA4ff597f": "L2CustomGateway"
      }
    },
    {
      "name": "L2SecurityCouncilEmergency",
      "address": "arb-nova:0xc232ee726E3C51B86778BB4dBe61C52cC07A60F3",
      "type": "Contract",
      "template": "orbitstack/layer2/L2SecurityCouncilEmergency",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x59fe14e95a8aa7f52213f18bae5c9329cf583a7ba31194698b15eddb97d5e825"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1692138890,
      "sinceBlock": 18117569,
      "values": {
        "$immutable": false,
        "$implementation": "arb-nova:0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "$members": [
          "arb-nova:0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E",
          "arb-nova:0xBBD2E01eFB88ce00F8f5b6B9a696966070089392",
          "arb-nova:0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D",
          "arb-nova:0x59c8535419BbCb8AdFFDB3C835435E907e3B183B",
          "arb-nova:0x78bB97d2F3811256D7F0041E81Aaf4B426eF3b67",
          "arb-nova:0x9A301de96b15Db3aB778E2969Bf6cAa909cA56E8",
          "arb-nova:0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33",
          "arb-nova:0x33ddb82e68940f0e4C1050885BcE8faF5Ddd1b93",
          "arb-nova:0x882c6FCb3D358b9d70B97c6999159cea64168B6F",
          "arb-nova:0x9316ca66f5f936E3239e4fD2AAAEA5C7b6f3C4cC",
          "arb-nova:0x0275b3D54a5dDbf8205A75984796eFE8b7357Bae",
          "arb-nova:0x475816ca2a31D601B4e336f5c2418A67978aBf09"
        ],
        "$threshold": 9,
        "domainSeparator": "0x73c48ebf86be9cb95354666573e93457e75fb70b4b0da06eb0b9c9de6118b1e3",
        "getChainId": 42170,
        "GnosisSafe_modules": [
          "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482"
        ],
        "multisigThreshold": "9 of 12 (75%)",
        "nonce": 3,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "arb-nova:0xc232ee726E3C51B86778BB4dBe61C52cC07A60F3": "SafeProxy",
        "arb-nova:0x3E5c63644E683549055b9Be8653de26E0B4CD36E": "GnosisSafeL2"
      }
    },
    {
      "name": "L2ERC20Gateway",
      "address": "arb-nova:0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257",
      "type": "Contract",
      "template": "orbitstack/layer2/L2ERC20Gateway",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x7ab56232b17ce06beb4a64963bb9e8d0c7fdef3c45ab8f1ae306699d7b80c637"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Counterpart to the L1ERC20Gateway. Can mint (deposit to L2) and burn (withdraw to L1) ERC20 tokens on L2.",
      "ignoreInWatchMode": ["exitNum"],
      "sinceTimestamp": 1656313079,
      "sinceBlock": 14,
      "values": {
        "$admin": "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C",
        "$implementation": "arb-nova:0x466155FD6d8BbF1c0d5ca32818814cB28b6884d8",
        "$pastUpgrades": [
          [
            "2022-06-27T06:57:59.000Z",
            "0x46c2f44cccae09860a903d1d11fa5ccff5694b7999f804ba089a1e020b8a95cc",
            ["arb-nova:0xEa2562667c98Bfe329995616454BeA9ea3290D1C"]
          ],
          [
            "2022-08-08T17:57:48.000Z",
            "0xe2ffd6f2c673a1b13f5f1614220aaeb30a62b15bab84197be67798ed00d68a1c",
            ["arb-nova:0x466155FD6d8BbF1c0d5ca32818814cB28b6884d8"]
          ]
        ],
        "$upgradeCount": 2,
        "beaconProxyFactory": "arb-nova:0xD9D66e55227c7558f0dB52adD059057Eb9bd90a3",
        "cloneableProxyHash": "0xe95e7b13b0b76934e55320c0f1a812918ec818f61a9b36660d64d803eeecb91a",
        "counterpartGateway": "arb-nova:0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf",
        "exitNum": 942,
        "router": "arb-nova:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8"
      },
      "implementationNames": {
        "arb-nova:0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257": "TransparentUpgradeableProxy",
        "arb-nova:0x466155FD6d8BbF1c0d5ca32818814cB28b6884d8": "L2ERC20Gateway"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "UpgradeableBeacon",
      "address": "arb-nova:0xd31Ed16a8CeCe0A5070AC26024674eB680E3e639",
      "type": "Contract",
      "sourceHashes": [
        "0xf43827aa5935222c477d6cd1888896ff1336e4c0b2991e05d75ac9bbe6c41236"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1656313096,
      "sinceBlock": 20,
      "values": {
        "$immutable": true,
        "implementation": "arb-nova:0x53923A0d1f4805463584c91b2E55d6c600A94E91",
        "owner": "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482"
      },
      "implementationNames": {
        "arb-nova:0xd31Ed16a8CeCe0A5070AC26024674eB680E3e639": "UpgradeableBeacon"
      }
    },
    {
      "name": "fred - Arbitrum 2",
      "address": "arb-nova:0xD8D4cEC103c0B6d7166405F0EbD7087C75a1528E",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "BeaconProxyFactory",
      "address": "arb-nova:0xD9D66e55227c7558f0dB52adD059057Eb9bd90a3",
      "type": "Contract",
      "sourceHashes": [
        "0x4522be863ce454f4a528c27299d26dc69d407f11e5807129aaff93f36b44dd53"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1656313099,
      "sinceBlock": 21,
      "values": {
        "$immutable": true,
        "beacon": "arb-nova:0xd31Ed16a8CeCe0A5070AC26024674eB680E3e639",
        "cloneableProxyHash": "0xe95e7b13b0b76934e55320c0f1a812918ec818f61a9b36660d64d803eeecb91a"
      },
      "implementationNames": {
        "arb-nova:0xD9D66e55227c7558f0dB52adD059057Eb9bd90a3": "BeaconProxyFactory"
      }
    },
    {
      "name": "gzeon-OffchainLabs",
      "address": "arb-nova:0xe2e9d5B97d8C0457B1cf80BC93802bce4DF03e33",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "arb-nova:0xE4E2121b479017955Be0b175305B35f312330BaE",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Certora 2",
      "address": "arb-nova:0xeEe3Fb3B792C7DDbB6aEF0C440FBC621f4d6fe2D",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L2ProxyAdmin",
      "address": "arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0xae641c7d7a83bba7fa913b9544f946dc23ca0527c2f4abb9c6a3496f49375218"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "arb-nova:0xf823C3cD3CeBE0a1fA952ba88Dc9EEf8e0Bf46AD",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1678968471,
      "sinceBlock": 3154409,
      "values": {
        "$immutable": true,
        "owner": "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482"
      },
      "implementationNames": {
        "arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9": "ProxyAdmin"
      }
    },
    {
      "name": "L1Timelock",
      "address": "arb-nova:0xf7951D92B0C345144506576eC13Ecf5103aC905a",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L2ArbitrumToken",
      "address": "arb-nova:0xf823C3cD3CeBE0a1fA952ba88Dc9EEf8e0Bf46AD",
      "type": "Contract",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x8ae72d766dbd9972974ea5cbde4207e80bf11dbc3426b277d41544d2639371f9"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["totalSupply"],
      "sinceTimestamp": 1678968495,
      "sinceBlock": 3154421,
      "values": {
        "$admin": "arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9",
        "$implementation": "arb-nova:0x099bC495EA4Fd828FEe7C636F0Ab84d0f501B96d",
        "$pastUpgrades": [
          [
            "2023-03-16T12:08:15.000Z",
            "0xad05f83f9215726a10ae715f735d274f9f7bee5de714f924f450c55c111dfa40",
            ["arb-nova:0x099bC495EA4Fd828FEe7C636F0Ab84d0f501B96d"]
          ]
        ],
        "$upgradeCount": 1,
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0x06fe5e8dad7d7e879ce7a65a8304da45a102356b02ff9533af1c8251672513c5",
        "l1Address": "arb-nova:0xB50721BCf8d664c30412Cfbc6cf7a15145234ad1",
        "l2Gateway": "arb-nova:0xbf544970E6BD77b21C6492C281AB60d0770451F4",
        "name": "Arbitrum",
        "symbol": "ARB",
        "totalSupply": "225522336237274165454228"
      },
      "implementationNames": {
        "arb-nova:0xf823C3cD3CeBE0a1fA952ba88Dc9EEf8e0Bf46AD": "TransparentUpgradeableProxy",
        "arb-nova:0x099bC495EA4Fd828FEe7C636F0Ab84d0f501B96d": "L2CustomGatewayToken"
      }
    },
    {
      "address": "eth:0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "sequence",
          "from": "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b",
          "description": "Can submit transaction batches or commitments to the SequencerInbox contract on the host chain.",
          "role": ".batchPosters"
        }
      ]
    },
    {
      "name": "SequencerInbox",
      "address": "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b",
      "type": "Contract",
      "template": "orbitstack/SequencerInbox",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x2ed1d03b24d3bd002e3beedd7f0891a044867ed42912798e50803900c26fd0b8"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "A sequencer (registered in this contract) can submit transaction batches or commitments here.",
      "ignoreInWatchMode": [
        "batchCount",
        "totalDelayedMessagesRead",
        "buffer",
        "postsBlobs"
      ],
      "sinceTimestamp": 1656050353,
      "sinceBlock": 15016829,
      "values": {
        "$admin": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148",
        "$implementation": "eth:0x98a58ADAb0f8A66A1BF4544d804bc0475dff32c7",
        "$pastUpgrades": [
          [
            "2022-06-24T05:59:13.000Z",
            "0x5c5a7f1fa570de81fb9c2bf590cda328424071dac3f51681fa9825dcd6c16d27",
            ["eth:0x9f80b449014B50DC2BB5b93598eb50030A0cA1aD"]
          ],
          [
            "2022-08-01T19:16:35.000Z",
            "0xffde6d577ce304fd07cac66a0034e0bf92674612609ee8dd482d9a77fe29f51e",
            ["eth:0x2e3367cc9bd83959EF103AdF6fFea6200D0A15f0"]
          ],
          [
            "2022-08-31T02:31:26.000Z",
            "0x07bbd6efdc155699ab2807c0d1509e98e06aa58ce25f208f09c03899f3a128cd",
            ["eth:0x16242595cAfA3a207E9354E3bdb000B59bA82875"]
          ],
          [
            "2022-09-14T03:08:00.000Z",
            "0xbfd8f54bf6b44ea4bcd76306d74b63602ee654e6a344bccca1825a388050988b",
            ["eth:0xcc4e9E22AcDf93192cf7E149D7563F6d660E9Afc"]
          ],
          [
            "2022-11-08T16:47:59.000Z",
            "0x0f4db1811c997e979b8f7be3cd8509b5ea0bb6a366a1848a0905f9c7f50c8612",
            ["eth:0xD03bFe2CE83632F4E618a97299cc91B1335BB2d9"]
          ],
          [
            "2024-03-14T13:41:59.000Z",
            "0x51b492ac498a88565639cfe3df77be8729d61f1c413d00b66530d4022a13c36a",
            ["eth:0x31DA64D19Cd31A19CD09F4070366Fe2144792cf7"]
          ],
          [
            "2025-02-12T14:00:11.000Z",
            "0xe9788a104f8443b5900e54f8c887f0522d121487fc343a1ff90e1e6ed987967e",
            ["eth:0x98a58ADAb0f8A66A1BF4544d804bc0475dff32c7"]
          ]
        ],
        "$upgradeCount": 7,
        "batchCount": 273013,
        "batchPosterManager": "eth:0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B",
        "batchPosters": [
          "eth:0x0C5911d57B24FCF1DC8B2608eFbAe57C7098E32D",
          "eth:0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc"
        ],
        "bridge": "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
        "BROTLI_MESSAGE_HEADER_FLAG": "0x00",
        "buffer": {
          "bufferBlocks": 14400,
          "max": 14400,
          "threshold": 300,
          "prevBlockNumber": 23436194,
          "replenishRateInBasis": 500,
          "prevSequencedBlockNumber": 23436268
        },
        "dacKeyset": {
          "requiredSignatures": 5,
          "membersCount": 6,
          "blsSignatures": [
            "YAbcteVnZLty5qRebeswHKhdjEMVwdou+imSfyrI+yVXHOMdLWA3Nf4DGW9tVry/mhmZqJp01TaYIsREXWdsFe1S5QCNqnddyag5yZ/5Y6GZRqx0BXmHTaxPY5kHrhvGnwxmlJVbUk1xjKRFgxxTdTk3c0AfM3JaeWYTed3avV//KGGdwHC+/Z7XPWmeXCNsGhY75YuoEAK2EwcJvAZK9de6lHEwtyBWvxcmOADxo6siacalEO+OdBL9VtHvG5FqEwbjsdnILAmTcb2YYVgqyq2joW6d/uXQ685hCWWYqC8RLQqTXoyrXEjYLjEEsMe6eRV9rRoBmj5/atB3uOYwixFv7A9YI5YiRjw2MfoB4rQnJAkhW4AJQiwWcV2+3lkJBg==",
            "YAbOg53k1qOuAvJbQIlTHmo9LeVWvQBr0wzy00CLl30Y8XVt1KG8PADbkALw2O8a9Q+6ppWd7L7By+I0zG72JwoDM5CQ4COPisn4oY9EuHNMjzthI90SiuSKCGO5p/bYgwIENoF3LCt581DBS8nXsY5XjHlcp2klznvSiR0Jqjf+LOHqL/5MA4/vIvZuKJlcYQkCIehqM2j7bWcar8GQAfQif5LzZxr2pgs9sShaFC9JwfRQt2/rmxrvGlUehY5LcwLGzxyn+sBbmTujddgYP5DAifqKPfMaRD0uCo7xkwZwaPv8yizvI0z22cm1iE72lwWnGBClZlFybKO3rN+v/fq5soRLTqaHK0P/m32i4QouI6eRMMPExwqK0Kd+stUfFg==",
            "YA+HK4mKT9G4rnNRX30zzXvh6XHOGJaqvvL4km5YbEJI3A23/XhRQCwUFJ3D3ITzgww0YWfDnlMjlxrDQEFfCi6wVKmo4KXVA6Ks/s690d9xrurDs4JgSAxpm8CZNPCRPg7lquq9VzEyhSB+uJNmtBEobPPxxeMOt+NV9VOFMIuR1YByhDI+6JqXQ8cGdvSUlQTO0+1BYSy/2gatVSAMHHfT+zcABZvv1kxEvEpXy1Z+wUge5WTPbNbPHy9KLe5tsAxUfDhACrEY3tror9W6uTtwP3agmRuqXUP7sSUZTAa1Rh+Mc4o8Qnij2Y5UVq7AcgiDwNKJGVN6NuL/1fcx50K2ZTVX0VTBZOBo75g7Nn72Jvqu1G9Orey7ErflXyMXXQ==",
            "YALC7DeOtroXqegbj9RCY9aZw0cZSSpOzx7napQrwiR4+3qflOLxWCJjDy1hbDKjNAOHEY5LluJtbkHbqrn+J61gi9gjoUL5iPfamZzeygirSv7baz2i1NsgjMC6kb/UThU71zc2t98BNBeAqqfxhfyg06R437U7YS7ZHwVEFt571ixZ05tO5gTqlstC89aqIBEhl7S5rPc25H+0TPAMvjclIn2K6lvKHvu7iUwcu1ZqerG3Aegdr9W58wd85Piy+AAKBH+4jcXc+K/udljfD5hTM6MVFvumIgB2D+QlbAJgsZmUlzf7iPd9dcNd6kNJJhIT7mvrv/NQIEr/fNhGFlG+1Xy0VRhLkKv1ahuyPe/+qbsl2uxc0r6dfOAQcZudWg==",
            "YBN+CWUmeRP56vhb/yLjzl9Euxv67XZ5sWgKzRVDaoQyXrp/KWLKRpN8y/Rtme3JRANM3Ze8T7HY3DrducNIQxqZl1lZ5qyCODdq8x8D51T6PDFZJ81oYCZeyObpfaQKlQkyd3PnqlvPrvdpDXaQYzNvbVIQp95V4OvyUf/VP23KAiJn+8P/wI5HCeNBSpa4BAVt1+f/w4kn2KPYpcD0ao5zfWOOie9clvxd/nmiHaCitcvQwbsulcqbv/HUFlhcLAEZtnbcBTxauzsLTWDq+gZXFaLDAajVi6yHHfg238DrjU7eGRyrTPZlVFGjfJzzdggqZdXyO4GMGFxWsWzpgLb+DWiDj95nePzGUs9oE/79Ids3J0VN9ZrTvnRl1gUHqg==",
            "YAR40SbOOU71LW/8aEVnLfztsU1Mq+dqzZ7/8liSsx3DLYvSFCZXXwijCxuEu4wfZQeBDiXUeFLx8qBrZrU0HQLXSBoczgElfnaKoaWbaDoo9veUZnRUHw9OI2Q9Md/X6QlYo2HH24a2KP4HXZTIXixD+FjT82g9U2mof3azkCwHZd3IyQTjdbD1dA210uJfGxWalm4gWWsaOP8xG1Nl13CcxnmZEwfWkhUs/0mHZmPzFeCB9MC8hcOKZvIZjVOQFwwnXiPphD6nSgRrPnCEqqHVPG/GyGIiUNy4EtREw0GoRw30ssLsOrDUqlY7EBoxUg1x3wycHuxIGMuuyzJKwrkEWusxa7H0xsmqySR/HsP7gkJH84WNG5xgMUE6EaewWQ=="
          ]
        },
        "DAS_MESSAGE_HEADER_FLAG": "0x80",
        "DATA_AUTHENTICATED_FLAG": "0x40",
        "DATA_BLOB_HEADER_FLAG": "0x50",
        "HEADER_LENGTH": 40,
        "isDelayBufferable": true,
        "isUsingFeeToken": false,
        "keySetUpdates": 11,
        "maxDataSize": 117964,
        "maxTimeVariation": {
          "delayBlocks": 7200,
          "futureBlocks": 64,
          "delaySeconds": 86400,
          "futureSeconds": 768
        },
        "postsBlobs": false,
        "reader4844": "eth:0x15b25E3fb8419dA4848a6f193bb9b43519D0d4ca",
        "rollup": "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd",
        "sequencerVersion": "0x88",
        "setIsBatchPosterCount": 3,
        "totalDelayedMessagesRead": 518835,
        "TREE_DAS_MESSAGE_HEADER_FLAG": "0x08",
        "ZERO_HEAVY_MESSAGE_HEADER_FLAG": "0x20"
      },
      "fieldMeta": {
        "maxTimeVariation": {
          "description": "Settable by the Rollup Owner. Transactions can only be force-included after the `delayBlocks` window (Sequencer-only) has passed."
        }
      },
      "implementationNames": {
        "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b": "TransparentUpgradeableProxy",
        "eth:0x98a58ADAb0f8A66A1BF4544d804bc0475dff32c7": "SequencerInbox"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "address": "eth:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "CustomGateway",
      "address": "eth:0x23122da8C581AA7E0d07A36Ff1f16F799650232f",
      "type": "Contract",
      "template": "orbitstack/CustomGateway",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x60484a2ada75640a2144b3ecaae3bb7b51973a2494281beebf898308ffc35e90"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Escrows deposited assets for the canonical bridge that are externally governed or need custom token contracts with e.g. minting rights or upgradeability.",
      "sinceTimestamp": 1656312893,
      "sinceBlock": 15033103,
      "values": {
        "$admin": "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560",
        "$implementation": "eth:0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45",
        "$pastUpgrades": [
          [
            "2022-06-27T06:54:53.000Z",
            "0x14fd84ed3f09649a2b7a19d2b51a4e4340bf85244b2e14c4a779ad3e7d70c4c3",
            ["eth:0x97367486f5905c2B7EE7b58330Fb4EB52639db17"]
          ],
          [
            "2022-08-08T17:02:04.000Z",
            "0xf2ba2551709d23686f52c3a3ecc65ae8347f1bab1877265c57ba260e8222bf33",
            ["eth:0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45"]
          ]
        ],
        "$upgradeCount": 2,
        "counterpartGateway": "eth:0xbf544970E6BD77b21C6492C281AB60d0770451F4",
        "inbox": "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
        "owner": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
        "router": "eth:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48",
        "whitelist": "eth:0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "eth:0x23122da8C581AA7E0d07A36Ff1f16F799650232f": "TransparentUpgradeableProxy",
        "eth:0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45": "L1CustomGateway"
      },
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "address": "eth:0x290Aa3E7533c873B3326DabFe7579e86ed951428",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "RollupEventInbox",
      "address": "eth:0x304807A7ed6c1296df2128E6ff3836e477329CD2",
      "type": "Contract",
      "template": "orbitstack/RollupEventInbox",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x6ce471861570d55dc6e9a09337d990c13efb0c7abb47f36a5de48a9a7086f6e8"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Helper contract sending configuration data over the bridge during the systems initialization.",
      "sinceTimestamp": 1656050353,
      "sinceBlock": 15016829,
      "values": {
        "$admin": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148",
        "$implementation": "eth:0x6D576E220Cb44C3E8eF75D0EfBeb1Ff041e2E4A5",
        "$pastUpgrades": [
          [
            "2022-06-24T05:59:13.000Z",
            "0x5c5a7f1fa570de81fb9c2bf590cda328424071dac3f51681fa9825dcd6c16d27",
            ["eth:0x32642eE509001D02615951090c7c56D6000e22C2"]
          ],
          [
            "2025-02-12T14:00:11.000Z",
            "0xe9788a104f8443b5900e54f8c887f0522d121487fc343a1ff90e1e6ed987967e",
            ["eth:0x6D576E220Cb44C3E8eF75D0EfBeb1Ff041e2E4A5"]
          ]
        ],
        "$upgradeCount": 2,
        "bridge": "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
        "rollup": "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd"
      },
      "implementationNames": {
        "eth:0x304807A7ed6c1296df2128E6ff3836e477329CD2": "TransparentUpgradeableProxy",
        "eth:0x6D576E220Cb44C3E8eF75D0EfBeb1Ff041e2E4A5": "RollupEventInbox"
      }
    },
    {
      "name": "OneStepProver0",
      "address": "eth:0x35FBC5F03d86E88973B06Fb9C5a913D54AbdF731",
      "type": "Contract",
      "template": "orbitstack/OneStepProver0",
      "sourceHashes": [
        "0x549b7c350bf6e1da7e8aa5fda9440889a76d5611ed7c6e37411d364ee36f8d5b"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1734397379,
      "sinceBlock": 21418842,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x35FBC5F03d86E88973B06Fb9C5a913D54AbdF731": "OneStepProver0"
      }
    },
    {
      "address": "eth:0x375906ADFD34D93236084F462BB2dB0D92129Fe1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "UpgradeExecutor",
      "address": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
      "type": "Contract",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x5b1abdc6dea1e28ed7625a5840c5e44c9a0e33a01b15db9b8604c9e587986e85"
      ],
      "proxyType": "EIP1967 proxy",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd",
          "description": "Pause and unpause and set important roles and parameters in the system contracts: Can delegate Sequencer management to a BatchPosterManager address, manage data availability and DACs, set the Sequencer-only window, introduce an allowList to the bridge and whitelist Inboxes/Outboxes.",
          "role": ".owner"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b",
          "role": "admin",
          "via": [
            { "address": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x23122da8C581AA7E0d07A36Ff1f16F799650232f",
          "role": "admin",
          "via": [
            { "address": "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x304807A7ed6c1296df2128E6ff3836e477329CD2",
          "role": "admin",
          "via": [
            { "address": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
          "role": "admin",
          "via": [
            { "address": "eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf",
          "role": "admin",
          "via": [
            { "address": "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
          "role": "admin",
          "via": [
            { "address": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
          "role": "admin",
          "via": [
            { "address": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48",
          "role": "admin",
          "via": [
            { "address": "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58",
          "role": "admin",
          "via": [
            { "address": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xFE66b18Ef1B943F8594A2710376Af4B01AcfA688",
          "role": "admin",
          "via": [
            { "address": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678",
          "role": ".owner"
        },
        {
          "permission": "act",
          "from": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148",
          "role": ".owner"
        },
        {
          "permission": "act",
          "from": "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560",
          "role": ".owner"
        }
      ],
      "sinceTimestamp": 1678968515,
      "sinceBlock": 16840309,
      "values": {
        "$admin": "eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678",
        "$implementation": "eth:0x3d745b8815F9be5BF053858165f8aB1F58c77932",
        "$pastUpgrades": [
          [
            "2023-03-16T12:08:35.000Z",
            "0x9826d4f30361ad867030f94b0987567baf54040c39b661d8a825e945dc221eec",
            ["eth:0x86f0cf42Ad673B3D666d103E009EC142D1298a17"]
          ],
          [
            "2025-09-23T16:16:47.000Z",
            "0x81f4da8c5dd87d618e927936c941151689ef674ce2639cd4f0857fa4b75a2861",
            ["eth:0x3d745b8815F9be5BF053858165f8aB1F58c77932"]
          ]
        ],
        "$upgradeCount": 2,
        "ADMIN_ROLE": "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63"
      },
      "implementationNames": {
        "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd": "TransparentUpgradeableProxy",
        "eth:0x3d745b8815F9be5BF053858165f8aB1F58c77932": "UpgradeExecutor"
      }
    },
    {
      "name": "OneStepProofEntry",
      "address": "eth:0x4397fE1E959Ba81B9D5f1A9679Ddd891955A42d6",
      "type": "Contract",
      "template": "orbitstack/OneStepProofEntry",
      "sourceHashes": [
        "0xfdda77bfcb4ee6e1d88939c755d6eda90f3250c8053b15b511ad9148cce8a787"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1734397931,
      "sinceBlock": 21418888,
      "values": {
        "$immutable": true,
        "prover0": "eth:0x35FBC5F03d86E88973B06Fb9C5a913D54AbdF731",
        "proverHostIo": "eth:0xa07cD154340CC74EcF156FFB9fb378Ee29Ca71Cf",
        "proverMath": "eth:0xaB9596a0aaF28bc798c453434EC2DC0F8F0bF921",
        "proverMem": "eth:0xe0ba77e0E24de5369e3B268Ea79fDe716e2EC48b"
      },
      "implementationNames": {
        "eth:0x4397fE1E959Ba81B9D5f1A9679Ddd891955A42d6": "OneStepProofEntry"
      }
    },
    {
      "address": "eth:0x4d9A23BD4DBBdC04A88B99d8d2ac450EB6b8f49C",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ProxyAdmin 2",
      "address": "eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0xae641c7d7a83bba7fa913b9544f946dc23ca0527c2f4abb9c6a3496f49375218"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1678968395,
      "sinceBlock": 16840300,
      "values": {
        "$immutable": true,
        "owner": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd"
      },
      "implementationNames": {
        "eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678": "ProxyAdmin"
      }
    },
    {
      "address": "eth:0x64379Dee676ab442B48925Ed603771f386510Ee7",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ValidatorWallet",
      "address": "eth:0x6Ab7A2f1a4febCD40A58b0205bFDA9CAf614b779",
      "type": "Contract",
      "sourceHashes": [
        "0xdb71d504c2071bc4b28756ad1f12fb3faf0537767b5019cfa7912d4fc078e8a9"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1656050166,
      "sinceBlock": 15016822,
      "values": {
        "$immutable": true,
        "owner": "eth:0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "eth:0x6Ab7A2f1a4febCD40A58b0205bFDA9CAf614b779": "ValidatorWallet"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0xf944f88083f41ff959fefbdcd6fc3ae633692b072b8497fb14cbdd843eded490"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x304807A7ed6c1296df2128E6ff3836e477329CD2",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xFE66b18Ef1B943F8594A2710376Af4B01AcfA688",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1656050353,
      "sinceBlock": 15016829,
      "values": {
        "$immutable": true,
        "owner": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd"
      },
      "implementationNames": {
        "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148": "ProxyAdmin"
      }
    },
    {
      "address": "eth:0x79D3Bb67EA7aB77E015af3dA885E8ed9C48a9fCe",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1DaiGateway",
      "address": "eth:0x97f63339374fCe157Aa8Ee27830172d2AF76A786",
      "type": "Contract",
      "sourceHashes": [
        "0x2bfb3c9871d8a7db172d350d7b4678c49eb33a98483f71cb89d3d059a7322efb"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1659620276,
      "sinceBlock": 15276192,
      "values": {
        "$immutable": true,
        "counterpartGateway": "eth:0x10E6593CDda8c58a1d0f14C5164B376352a55f2F",
        "inbox": "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
        "isOpen": 1,
        "l1Dai": "eth:0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "l1Escrow": "eth:0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3",
        "l1Router": "eth:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48",
        "l2Counterpart": "eth:0x10E6593CDda8c58a1d0f14C5164B376352a55f2F",
        "l2Dai": "eth:0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1"
      },
      "implementationNames": {
        "eth:0x97f63339374fCe157Aa8Ee27830172d2AF76A786": "L1DaiGateway"
      }
    },
    {
      "name": "OneStepProverHostIo",
      "address": "eth:0xa07cD154340CC74EcF156FFB9fb378Ee29Ca71Cf",
      "type": "Contract",
      "template": "orbitstack/OneStepProverHostIo",
      "sourceHashes": [
        "0x95e26ae3077f12aa3b383e87c553884e67eaf30c17ca083768d76822d0916cb8"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1734397775,
      "sinceBlock": 21418875,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xa07cD154340CC74EcF156FFB9fb378Ee29Ca71Cf": "OneStepProverHostIo"
      }
    },
    {
      "name": "L1Escrow",
      "address": "eth:0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3",
      "type": "Contract",
      "template": "maker/L1Escrow",
      "sourceHashes": [
        "0x0169e3ff6f3a2faeac5a4c76b30fbf87198a211ee683a1b22d33db036f863ee8"
      ],
      "proxyType": "immutable",
      "description": "Simple escrow that accepts tokens and allows to configure permissioned addresses that can access the tokens.",
      "sinceTimestamp": 1659620187,
      "sinceBlock": 15276182,
      "values": {
        "$immutable": true,
        "wards": [
          "eth:0xBE8E3e3618f7474F8cB1d074A26afFef007E98FB",
          "eth:0x09e05fF6142F2f9de8B6B65855A1d56B6cfE4c58"
        ]
      },
      "implementationNames": {
        "eth:0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3": "L1Escrow"
      }
    },
    {
      "name": "ProxyAdmin 3",
      "address": "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0xf944f88083f41ff959fefbdcd6fc3ae633692b072b8497fb14cbdd843eded490"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x23122da8C581AA7E0d07A36Ff1f16F799650232f",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1656312664,
      "sinceBlock": 15033091,
      "values": {
        "$immutable": true,
        "owner": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd"
      },
      "implementationNames": {
        "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560": "ProxyAdmin"
      }
    },
    {
      "name": "OneStepProverMath",
      "address": "eth:0xaB9596a0aaF28bc798c453434EC2DC0F8F0bF921",
      "type": "Contract",
      "template": "orbitstack/OneStepProverMath",
      "sourceHashes": [
        "0xeb0b77a8bbbb65eabcb1e26f29f9eac4db26d0b5974e37d9cc57ffc03b7be0e1"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1734397631,
      "sinceBlock": 21418863,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xaB9596a0aaF28bc798c453434EC2DC0F8F0bF921": "OneStepProverMath"
      }
    },
    {
      "name": "ERC20Gateway",
      "address": "eth:0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf",
      "type": "Contract",
      "template": "orbitstack/ERC20Gateway",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x019cdda76fc455f2628f7f7f87fae92c1264e1d2e32cd2d47e6494780c790c61"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Escrows deposited ERC-20 assets for the canonical Bridge. Upon depositing, a generic token representation will be minted at the destination. Withdrawals are initiated by the Outbox contract.",
      "sinceTimestamp": 1656312805,
      "sinceBlock": 15033100,
      "values": {
        "$admin": "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560",
        "$implementation": "eth:0xb4299A1F5f26fF6a98B7BA35572290C359fde900",
        "$pastUpgrades": [
          [
            "2022-06-27T06:53:25.000Z",
            "0x26c2f0175775f3474d63281e8f30e0217b49840f6646210011eedbcb974dc41f",
            ["eth:0xf852de96aD5Ca30d54b40b9cE5c8C6DE56C0Ef4B"]
          ],
          [
            "2022-08-08T17:02:04.000Z",
            "0xf2ba2551709d23686f52c3a3ecc65ae8347f1bab1877265c57ba260e8222bf33",
            ["eth:0xb4299A1F5f26fF6a98B7BA35572290C359fde900"]
          ]
        ],
        "$upgradeCount": 2,
        "cloneableProxyHash": "0xe95e7b13b0b76934e55320c0f1a812918ec818f61a9b36660d64d803eeecb91a",
        "counterpartGateway": "eth:0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257",
        "inbox": "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
        "l2BeaconProxyFactory": "eth:0xD9D66e55227c7558f0dB52adD059057Eb9bd90a3",
        "router": "eth:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48",
        "whitelist": "eth:0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "eth:0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf": "TransparentUpgradeableProxy",
        "eth:0xb4299A1F5f26fF6a98B7BA35572290C359fde900": "L1ERC20Gateway"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "eth:0xbf544970E6BD77b21C6492C281AB60d0770451F4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xC1b634853Cb333D3aD8663715b08f41A3Aec47cc",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "sequence",
          "from": "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b",
          "description": "Can submit transaction batches or commitments to the SequencerInbox contract on the host chain.",
          "role": ".batchPosters"
        }
      ]
    },
    {
      "name": "Bridge",
      "address": "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
      "type": "Contract",
      "template": "orbitstack/Bridge",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0xbce819ea96dfba398ca731b4457e9b9a01621df028c459eb74b15b6a687130b1"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Escrow contract for the project's gas token (can be different from ETH). Keeps a list of allowed Inboxes and Outboxes for canonical bridge messaging.",
      "ignoreInWatchMode": [
        "delayedMessageCount",
        "sequencerMessageCount",
        "sequencerReportedSubMessageCount"
      ],
      "sinceTimestamp": 1656050353,
      "sinceBlock": 15016829,
      "values": {
        "$admin": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148",
        "$implementation": "eth:0x93e8f92327bFa8096F5F6ee5f2a49183D3B3b898",
        "$pastUpgrades": [
          [
            "2022-06-24T05:59:13.000Z",
            "0x5c5a7f1fa570de81fb9c2bf590cda328424071dac3f51681fa9825dcd6c16d27",
            ["eth:0xd4254a4d136203dAd7AE5Ee05D6BD65B8d13157d"]
          ],
          [
            "2022-08-31T02:31:26.000Z",
            "0x07bbd6efdc155699ab2807c0d1509e98e06aa58ce25f208f09c03899f3a128cd",
            ["eth:0x1066CEcC8880948FE55e427E94F1FF221d626591"]
          ],
          [
            "2025-02-12T14:00:11.000Z",
            "0xe9788a104f8443b5900e54f8c887f0522d121487fc343a1ff90e1e6ed987967e",
            ["eth:0x93e8f92327bFa8096F5F6ee5f2a49183D3B3b898"]
          ]
        ],
        "$upgradeCount": 3,
        "activeOutbox": "eth:0x0000000000000000000000000000000000000000",
        "allowedDelayedInboxList": [
          "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
          "eth:0x304807A7ed6c1296df2128E6ff3836e477329CD2"
        ],
        "allowedOutboxList": ["eth:0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58"],
        "delayedMessageCount": 518837,
        "inboxHistory": [
          "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
          "eth:0x304807A7ed6c1296df2128E6ff3836e477329CD2"
        ],
        "outboxHistory": ["eth:0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58"],
        "rollup": "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd",
        "sequencerInbox": "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b",
        "sequencerMessageCount": 273013,
        "sequencerReportedSubMessageCount": 84102996
      },
      "fieldMeta": {
        "allowedOutboxList": {
          "severity": "HIGH",
          "description": "Can make calls as the bridge, steal all funds."
        },
        "outboxHistory": {
          "severity": "HIGH",
          "description": "All Outboxes that were ever set as allowed in the bridge."
        },
        "allowedDelayedInboxList": {
          "severity": "HIGH",
          "description": "Allowed to mint the gastoken on L2 and call `enqueueDelayedMessage()` on the bridge."
        },
        "inboxHistory": {
          "severity": "HIGH",
          "description": "All Inboxes that were ever set as allowed in the bridge."
        }
      },
      "implementationNames": {
        "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd": "TransparentUpgradeableProxy",
        "eth:0x93e8f92327bFa8096F5F6ee5f2a49183D3B3b898": "Bridge"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "Inbox",
      "address": "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
      "type": "Contract",
      "template": "orbitstack/Inbox",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x421aa98d340c2ad3e475ce29bb1e72660c213f0997591e567c0fd3d3ae2365a8"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Facilitates sending L1 to L2 messages like depositing ETH, but does not escrow funds.",
      "sinceTimestamp": 1656050353,
      "sinceBlock": 15016829,
      "values": {
        "$admin": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148",
        "$implementation": "eth:0x7C058ad1D0Ee415f7e7f30e62DB1BCf568470a10",
        "$pastUpgrades": [
          [
            "2022-06-24T05:59:13.000Z",
            "0x5c5a7f1fa570de81fb9c2bf590cda328424071dac3f51681fa9825dcd6c16d27",
            ["eth:0x320bB4633BB62027D4b1d7827dDc81CC73458639"]
          ],
          [
            "2022-06-28T22:31:20.000Z",
            "0x061e8b23bf8776e3af8026e6d8858f24bca5b5f5ac3e7607be8630679e5c186b",
            ["eth:0x0f9866dEb74C0Aa3448c27606ed69c7Ad651B554"]
          ],
          [
            "2022-07-26T13:39:57.000Z",
            "0x470fdfe6bca3542698cf680412e97c28d47be43c4b53afd39bab1cf75bd72e85",
            ["eth:0xB46e8571760Da0CFaEB9c9689C449Eb7dD7cB3e7"]
          ],
          [
            "2022-09-14T03:08:00.000Z",
            "0xbfd8f54bf6b44ea4bcd76306d74b63602ee654e6a344bccca1825a388050988b",
            ["eth:0x1b2676D32E2f7430a564DD4560641F990dFE3D6a"]
          ],
          [
            "2025-02-12T14:00:11.000Z",
            "0xe9788a104f8443b5900e54f8c887f0522d121487fc343a1ff90e1e6ed987967e",
            ["eth:0x7C058ad1D0Ee415f7e7f30e62DB1BCf568470a10"]
          ]
        ],
        "$upgradeCount": 5,
        "allowListEnabled": false,
        "bridge": "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
        "getProxyAdmin": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148",
        "maxDataSize": 117964,
        "paused": false,
        "sequencerInbox": "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b"
      },
      "implementationNames": {
        "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949": "TransparentUpgradeableProxy",
        "eth:0x7C058ad1D0Ee415f7e7f30e62DB1BCf568470a10": "Inbox"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "GatewayRouter",
      "address": "eth:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48",
      "type": "Contract",
      "template": "orbitstack/GatewayRouter",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x265fc73d2eec7f0b459f92a25a37b145c8db22527232f08f3022d5cc18d6af9d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This routing contract maps tokens to the correct escrow (gateway) to be then bridged with canonical messaging.",
      "sinceTimestamp": 1656312748,
      "sinceBlock": 15033094,
      "values": {
        "$admin": "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560",
        "$implementation": "eth:0x52595021fA01B3E14EC6C88953AFc8E35dFf423c",
        "$pastUpgrades": [
          [
            "2022-06-27T06:52:28.000Z",
            "0xc9c47a10713cf548d69b58b6b6d28b08460adbd5b9f63c3f98ef7327962fff60",
            ["eth:0xa9610559f1E5BB0Eab9a25e21137D39426fd477E"]
          ],
          [
            "2022-08-08T17:02:04.000Z",
            "0xf2ba2551709d23686f52c3a3ecc65ae8347f1bab1877265c57ba260e8222bf33",
            ["eth:0x6D1c576Fe3e54313990450f5Fa322306B4cCB47B"]
          ],
          [
            "2022-11-08T16:47:59.000Z",
            "0x0f4db1811c997e979b8f7be3cd8509b5ea0bb6a366a1848a0905f9c7f50c8612",
            ["eth:0x52595021fA01B3E14EC6C88953AFc8E35dFf423c"]
          ]
        ],
        "$upgradeCount": 3,
        "counterpartGateway": "eth:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8",
        "defaultGateway": "eth:0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf",
        "inbox": "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
        "owner": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
        "router": "eth:0x0000000000000000000000000000000000000000",
        "whitelist": "eth:0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "eth:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48": "TransparentUpgradeableProxy",
        "eth:0x52595021fA01B3E14EC6C88953AFc8E35dFf423c": "L1GatewayRouter"
      },
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "address": "eth:0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "BatchPosterManagerMultisig",
      "address": "eth:0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b",
          "description": "Add/remove batchPosters (Sequencers).",
          "role": ".batchPosterManager"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1707458255,
      "sinceBlock": 19188638,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0x375906ADFD34D93236084F462BB2dB0D92129Fe1",
          "eth:0xfE2bf40f2A9183774BF8E871d634A4E50255158B",
          "eth:0x64379Dee676ab442B48925Ed603771f386510Ee7",
          "eth:0x290Aa3E7533c873B3326DabFe7579e86ed951428",
          "eth:0x4d9A23BD4DBBdC04A88B99d8d2ac450EB6b8f49C",
          "eth:0x79D3Bb67EA7aB77E015af3dA885E8ed9C48a9fCe"
        ],
        "$threshold": 4,
        "domainSeparator": "0x7526599abb31ca0be13b02df12dd63c0f981649d6b802abd3cfe196fd70dc013",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 6 (67%)",
        "nonce": 2,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "Outbox",
      "address": "eth:0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58",
      "type": "Contract",
      "template": "orbitstack/Outbox",
      "sourceHashes": [
        "0xa7e3f6c355703ed46fcb2156862c4f01792b87beb10a87a81ce3bd5beee79b67",
        "0x9e054d18af00f58f7fa36e7a0fd5b04b9dacfb8c411d84c3591e57aa72faff9d"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Facilitates L2 to L1 contract calls: Messages initiated from L2 (for example withdrawal messages) eventually resolve in execution on L1.",
      "sinceTimestamp": 1656050353,
      "sinceBlock": 15016829,
      "values": {
        "$admin": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148",
        "$implementation": "eth:0x3FFf9BdC3ce99d3D587b0d06Aa7C4a10075193b4",
        "$pastUpgrades": [
          [
            "2022-06-24T05:59:13.000Z",
            "0x5c5a7f1fa570de81fb9c2bf590cda328424071dac3f51681fa9825dcd6c16d27",
            ["eth:0x476C807954b1ef8cF1Cb642E093fcF323557D721"]
          ],
          [
            "2022-06-25T01:31:40.000Z",
            "0x3f3b15e2fd68a9fb1067ebae60151118a5a44294c354d04cafe9352b92ad7816",
            ["eth:0x7439d8d4F3b9d9B6222f3E9760c75a47e08a7b3f"]
          ],
          [
            "2025-02-12T14:00:11.000Z",
            "0xe9788a104f8443b5900e54f8c887f0522d121487fc343a1ff90e1e6ed987967e",
            ["eth:0x3FFf9BdC3ce99d3D587b0d06Aa7C4a10075193b4"]
          ]
        ],
        "$upgradeCount": 3,
        "bridge": "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
        "l2ToL1BatchNum": 0,
        "l2ToL1Block": 0,
        "l2ToL1EthBlock": 0,
        "l2ToL1OutputId": "0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff",
        "l2ToL1Sender": "eth:0x0000000000000000000000000000000000000000",
        "l2ToL1Timestamp": 0,
        "OUTBOX_VERSION": 2,
        "rollup": "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd"
      },
      "implementationNames": {
        "eth:0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58": "TransparentUpgradeableProxy",
        "eth:0x3FFf9BdC3ce99d3D587b0d06Aa7C4a10075193b4": "Outbox"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "address": "eth:0xD9D66e55227c7558f0dB52adD059057Eb9bd90a3",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ValidatorWalletCreator",
      "address": "eth:0xe05465Aab36ba1277dAE36aa27a7B74830e74DE4",
      "type": "Contract",
      "sourceHashes": [
        "0x4ef3473c840bed3b4c6258271a494794c1545f0d0f13c6a386d1e39e6180d67c"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1656050166,
      "sinceBlock": 15016822,
      "values": {
        "$immutable": true,
        "owner": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
        "template": "eth:0x6Ab7A2f1a4febCD40A58b0205bFDA9CAf614b779"
      },
      "implementationNames": {
        "eth:0xe05465Aab36ba1277dAE36aa27a7B74830e74DE4": "ValidatorWalletCreator"
      }
    },
    {
      "name": "OneStepProverMemory",
      "address": "eth:0xe0ba77e0E24de5369e3B268Ea79fDe716e2EC48b",
      "type": "Contract",
      "template": "orbitstack/OneStepProverMemory",
      "sourceHashes": [
        "0x9da1c11f886667abb57a92659891b066372dde4fe1a3eebce72c722ecf872874"
      ],
      "proxyType": "immutable",
      "description": "One of the modular contracts used for the last step of a fraud proof, which is simulated inside a WASM virtual machine.",
      "sinceTimestamp": 1734397511,
      "sinceBlock": 21418853,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xe0ba77e0E24de5369e3B268Ea79fDe716e2EC48b": "OneStepProverMemory"
      }
    },
    {
      "name": "RollupProxy",
      "address": "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd",
      "type": "Contract",
      "template": "orbitstack/RollupProxyBoLD",
      "sourceHashes": [
        "0x951637f3a8787d8273dbd619921f256bd87a38b9d955e65c2e520772c2e0a642",
        "0x7b0429a0a98808dee6774a44d8d1ed15305ecc4b6fee4670db2d49f9caf65e51"
      ],
      "proxyType": "Arbitrum proxy",
      "description": "Central contract for the project's configuration like its execution logic hash (`wasmModuleRoot`) and addresses of the other system contracts. Entry point for Proposers creating new assertions (state commitments) and Challengers submitting fraud proofs (In the Orbit stack, these two roles are both called Validators).",
      "ignoreInWatchMode": [
        "firstUnresolvedNode",
        "latestConfirmed",
        "latestNodeCreated"
      ],
      "sinceTimestamp": 1739368811,
      "sinceBlock": 21830860,
      "values": {
        "$admin": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
        "$implementation": [
          "eth:0x7FC126FF51183a78C5E0437467f325f661D8Df17",
          "eth:0x6490bA0a60Cc7d3a59C9eeE135D9eeD24553a60d"
        ],
        "$pastUpgrades": [
          [
            "2025-02-12T14:00:11.000Z",
            "0xe9788a104f8443b5900e54f8c887f0522d121487fc343a1ff90e1e6ed987967e",
            [
              "eth:0x7FC126FF51183a78C5E0437467f325f661D8Df17",
              "eth:0x6490bA0a60Cc7d3a59C9eeE135D9eeD24553a60d"
            ]
          ]
        ],
        "$upgradeCount": 1,
        "anyTrustFastConfirmer": "eth:0x0000000000000000000000000000000000000000",
        "arbOsFromWmRoot": "ArbOS v40 wasmModuleRoot",
        "baseStake": "1000000000000000000",
        "bridge": "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd",
        "chainId": 42170,
        "challengeGracePeriodBlocks": 14400,
        "challengeManager": "eth:0xFE66b18Ef1B943F8594A2710376Af4B01AcfA688",
        "challenges": [],
        "confirmPeriodBlocks": 45818,
        "genesisAssertionHash": "0x75c2df1d9a6f98d1de62c8fc955f91b87f16fefa2fafe4d6b52118fc30e1c278",
        "getValidators": [
          "eth:0x1732BE6738117e9d22A84181AF68C8d09Cd4FF23",
          "eth:0x3B0369CAD35d257793F51c28213a4Cf4001397AC",
          "eth:0x54c0D3d6C101580dB3be8763A2aE2c6bb9dc840c",
          "eth:0x658e8123722462F888b6fa01a7dbcEFe1D6DD709",
          "eth:0xDfB23DFE9De7dcC974467195C8B7D5cd21C9d7cB",
          "eth:0xE27d4Ed355e5273A3D4855c8e11BC4a8d3e39b87",
          "eth:0x57004b440Cc4eb2FEd8c4d1865FaC907F9150C76",
          "eth:0x24Ca61c31C7f9Af3ab104dB6B9A444F28e9071e3",
          "eth:0xB51EDdfc9A945e2B909905e4F242C4796Ac0C61d",
          "eth:0x0fF813f6BD577c3D1cDbE435baC0621BE6aE34B4"
        ],
        "inbox": "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949",
        "isPostBoLD": true,
        "latestConfirmed": "0xa0e8f11b2d9796bb24eb8ec94533a73a49f23f16112366cc80ff7b06b17c8ab4",
        "loserStakeEscrow": "eth:0x40Cd7D713D7ae463f95cE5d342Ea6E7F5cF7C999",
        "minimumAssertionPeriod": 75,
        "outbox": "eth:0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58",
        "owner": "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd",
        "paused": false,
        "rollupDeploymentBlock": 21830860,
        "rollupEventInbox": "eth:0x304807A7ed6c1296df2128E6ff3836e477329CD2",
        "sequencerInbox": "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b",
        "stakerCount": 1,
        "stakeToken": "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "totalWithdrawableFunds": 0,
        "validatorAfkBlocks": 201600,
        "validatorWalletCreator": "eth:0xe05465Aab36ba1277dAE36aa27a7B74830e74DE4",
        "validatorWhitelistDisabled": false,
        "wasmModuleRoot": "0xdb698a2576298f25448bc092e52cf13b1e24141c997135d70f217d674bbeb69a"
      },
      "fieldMeta": {
        "minimumAssertionPeriod": {
          "description": "Minimum time delta between newly created nodes (stateUpdates). This is checked on `stakeOnNewNode()`. Format is number of ETHEREUM blocks, even for L3s. "
        },
        "confirmPeriodBlocks": {
          "description": "Challenge period. (Number of ETHEREUM blocks until a node is confirmed, even for L3s)."
        },
        "wasmModuleRoot": {
          "description": "Root hash of the WASM module used for execution, like a fingerprint of the L2 logic. Can be associated with ArbOS versions."
        },
        "arbOsFromWmRoot": {
          "description": "ArbOS version derived from known wasmModuleRoots."
        },
        "challenges": {
          "description": "Emitted on createChallenge() in RollupUserLogic."
        }
      },
      "implementationNames": {
        "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd": "RollupProxy",
        "eth:0x7FC126FF51183a78C5E0437467f325f661D8Df17": "RollupAdminLogic",
        "eth:0x6490bA0a60Cc7d3a59C9eeE135D9eeD24553a60d": "RollupUserLogic"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "0xbb9d58e9527566138b682f3a207c0976d5359837f6e330f4017434cca983ff41": "ArbOS v1-rc1 wasmModuleRoot",
            "0x9d68e40c47e3b87a8a7e6368cc52915720a6484bb2f47ceabad7e573e3a11232": "ArbOS v2.1 wasmModuleRoot",
            "0x53c288a0ca7100c0f2db8ab19508763a51c7fd1be125d376d940a65378acaee7": "ArbOS v3 wasmModuleRoot",
            "0x588762be2f364be15d323df2aa60ffff60f2b14103b34823b6f7319acd1ae7a3": "ArbOS v3.1 wasmModuleRoot",
            "0xcfba6a883c50a1b4475ab909600fa88fc9cceed9e3ff6f43dccd2d27f6bd57cf": "ArbOS v3.2 wasmModuleRoot",
            "0xa24ccdb052d92c5847e8ea3ce722442358db4b00985a9ee737c4e601b6ed9876": "ArbOS v4 wasmModuleRoot",
            "0x1e09e6d9e35b93f33ed22b2bc8dc10bbcf63fdde5e8a1fb8cc1bcd1a52f14bd0": "ArbOS v5 wasmModuleRoot",
            "0x3848eff5e0356faf1fc9cafecb789584c5e7f4f8f817694d842ada96613d8bab": "ArbOS v6 wasmModuleRoot",
            "0x53dd4b9a3d807a8cbb4d58fbfc6a0857c3846d46956848cae0a1cc7eca2bb5a8": "ArbOS v7 wasmModuleRoot",
            "0x2b20e1490d1b06299b222f3239b0ae07e750d8f3b4dedd19f500a815c1548bbc": "ArbOS v7.1 wasmModuleRoot",
            "0xd1842bfbe047322b3f3b3635b5fe62eb611557784d17ac1d2b1ce9c170af6544": "ArbOS v9 wasmModuleRoot",
            "0x6b94a7fc388fd8ef3def759297828dc311761e88d8179c7ee8d3887dc554f3c3": "ArbOS v10 wasmModuleRoot",
            "0xda4e3ad5e7feacb817c21c8d0220da7650fe9051ece68a3f0b1c5d38bbb27b21": "ArbOS v10.1 wasmModuleRoot",
            "0x0754e09320c381566cc0449904c377a52bd34a6b9404432e80afd573b67f7b17": "ArbOS v10.2 wasmModuleRoot",
            "0xf559b6d4fa869472dabce70fe1c15221bdda837533dfd891916836975b434dec": "ArbOS v10.3 wasmModuleRoot",
            "0xf4389b835497a910d7ba3ebfb77aa93da985634f3c052de1290360635be40c4a": "ArbOS v11 wasmModuleRoot",
            "0x68e4fe5023f792d4ef584796c84d710303a5e12ea02d6e37e2b5e9c4332507c4": "ArbOS v11.1 wasmModuleRoot",
            "0x8b104a2e80ac6165dc58b9048de12f301d70b02a0ab51396c22b4b4b802a16a4": "ArbOS v20 wasmModuleRoot",
            "0xb0de9cb89e4d944ae6023a3b62276e54804c242fd8c4c2d8e6cc4450f5fa8b1b": "ArbOS v30 wasmModuleRoot",
            "0x260f5fa5c3176a856893642e149cf128b5a8de9f828afec8d11184415dd8dc69": "ArbOS v31 wasmModuleRoot",
            "0x184884e1eb9fefdc158f6c8ac912bb183bf3cf83f0090317e0bc4ac5860baa39": "ArbOS v32 wasmModuleRoot",
            "0xdb698a2576298f25448bc092e52cf13b1e24141c997135d70f217d674bbeb69a": "ArbOS v40 wasmModuleRoot",
            "0xe81f986823a85105c5fd91bb53b4493d38c0c26652d23f76a7405ac889908287": "Celestia Nitro 3.2.1 wasmModuleRoot",
            "0xaf1dbdfceb871c00bfbb1675983133df04f0ed04e89647812513c091e3a982b3": "Celestia Nitro 3.3.2 wasmModuleRoot"
          }
        }
      ],
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "address": "eth:0xfE2bf40f2A9183774BF8E871d634A4E50255158B",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "EdgeChallengeManager",
      "address": "eth:0xFE66b18Ef1B943F8594A2710376Af4B01AcfA688",
      "type": "Contract",
      "template": "orbitstack/EdgeChallengeManager",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x6c09a44175196122c17b285af0789d13088361d0f4244fbe65f00f40d3036cb8"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract that implements the main challenge protocol logic of the fraud proof system.",
      "sinceTimestamp": 1739368811,
      "sinceBlock": 21830860,
      "values": {
        "$admin": "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148",
        "$implementation": "eth:0x058E1cBb62096189Bc7Cc1FE08A0859905d969Ea",
        "$pastUpgrades": [
          [
            "2025-02-12T14:00:11.000Z",
            "0xe9788a104f8443b5900e54f8c887f0522d121487fc343a1ff90e1e6ed987967e",
            ["eth:0x058E1cBb62096189Bc7Cc1FE08A0859905d969Ea"]
          ]
        ],
        "$upgradeCount": 1,
        "assertionChain": "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd",
        "challengePeriodBlocks": 45818,
        "excessStakeReceiver": "eth:0x40Cd7D713D7ae463f95cE5d342Ea6E7F5cF7C999",
        "LAYERZERO_BIGSTEPEDGE_HEIGHT": 524288,
        "LAYERZERO_BLOCKEDGE_HEIGHT": 67108864,
        "LAYERZERO_SMALLSTEPEDGE_HEIGHT": 8388608,
        "NUM_BIGSTEP_LEVEL": 1,
        "oneStepProofEntry": "eth:0x4397fE1E959Ba81B9D5f1A9679Ddd891955A42d6",
        "stakeAmounts": [0, "1000000000000000000", "1000000000000000000"],
        "stakeToken": "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "implementationNames": {
        "eth:0xFE66b18Ef1B943F8594A2710376Af4B01AcfA688": "TransparentUpgradeableProxy",
        "eth:0x058E1cBb62096189Bc7Cc1FE08A0859905d969Ea": "EdgeChallengeManager"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    }
  ],
  "abis": {
    "arb-nova:0x099bC495EA4Fd828FEe7C636F0Ab84d0f501B96d": [
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Transfer(address indexed from, address indexed to, uint256 value, bytes data)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function bridgeBurn(address account, uint256 amount)",
      "function bridgeMint(address account, uint256 amount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function initialize(string name_, string symbol_, uint8 decimals_, address l2Gateway_, address l1Counterpart_)",
      "function l1Address() view returns (address)",
      "function l2Gateway() view returns (address)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferAndCall(address _to, uint256 _value, bytes _data) returns (bool success)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
    ],
    "arb-nova:0x21903d3F8176b1a0c17E953Cd896610Be9fFDFa8": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "arb-nova:0x3d745b8815F9be5BF053858165f8aB1F58c77932": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TargetCallExecuted(address indexed target, uint256 value, bytes data)",
      "event UpgradeExecuted(address indexed upgrade, uint256 value, bytes data)",
      "function ADMIN_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function execute(address upgrade, bytes upgradeCallData) payable",
      "function executeCall(address target, bytes targetCallData) payable",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address[] executors)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "arb-nova:0x3E5c63644E683549055b9Be8653de26E0B4CD36E": [
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)",
      "event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "arb-nova:0x466155FD6d8BbF1c0d5ca32818814cB28b6884d8": [
      "event DepositFinalized(address indexed l1Token, address indexed _from, address indexed _to, uint256 _amount)",
      "event TxToL1(address indexed _from, address indexed _to, uint256 indexed _id, bytes _data)",
      "event WithdrawalInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _l2ToL1Id, uint256 _exitNum, uint256 _amount)",
      "function beaconProxyFactory() view returns (address)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function cloneableProxyHash() view returns (bytes32)",
      "function counterpartGateway() view returns (address)",
      "function exitNum() view returns (uint256)",
      "function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes outboundCalldata)",
      "function getUserSalt(address l1ERC20) pure returns (bytes32)",
      "function initialize(address _l1Counterpart, address _router, address _beaconProxyFactory)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, bytes _data) payable returns (bytes)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256, uint256, bytes _data) payable returns (bytes res)",
      "function postUpgradeInit()",
      "function router() view returns (address)"
    ],
    "arb-nova:0x509386DbF5C0BE6fd68Df97A05fdB375136c32De": [
      "constructor(address[] recipients, uint256[] weights)",
      "error EmptyRecipients()",
      "error InputLengthMismatch()",
      "error InvalidRecipientGroup(bytes32 currentRecipientGroup, bytes32 providedRecipientGroup)",
      "error InvalidRecipientWeights(bytes32 currentRecipientWeights, bytes32 providedRecipientWeights)",
      "error InvalidTotalWeight(uint256 totalWeight)",
      "error NoFundsToDistribute()",
      "error OwnerFailedRecieve(address owner, address recipient, uint256 value)",
      "error TooManyRecipients()",
      "event OwnerRecieved(address indexed owner, address indexed recipient, uint256 value)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RecipientRecieved(address indexed recipient, uint256 value)",
      "event RecipientsUpdated(bytes32 recipientGroup, address[] recipients, bytes32 recipientWeights, uint256[] weights)",
      "function MAX_RECIPIENTS() view returns (uint64)",
      "function PER_RECIPIENT_GAS() view returns (uint256)",
      "function currentRecipientGroup() view returns (bytes32)",
      "function currentRecipientWeights() view returns (bytes32)",
      "function distributeAndUpdateRecipients(address[] currentRecipients, uint256[] currentWeights, address[] newRecipients, uint256[] newWeights)",
      "function distributeRewards(address[] recipients, uint256[] weights)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "arb-nova:0x53923A0d1f4805463584c91b2E55d6c600A94E91": [
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Transfer(address indexed from, address indexed to, uint256 value, bytes data)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function bridgeBurn(address account, uint256 amount)",
      "function bridgeInit(address _l1Address, bytes _data)",
      "function bridgeMint(address account, uint256 amount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function isMaster() view returns (bool)",
      "function l1Address() view returns (address)",
      "function l2Gateway() view returns (address)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferAndCall(address _to, uint256 _value, bytes _data) returns (bool success)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
    ],
    "arb-nova:0x554e12DBAa0fBeB8A35583a6Fd9D04BaA4ff597f": [
      "event DepositFinalized(address indexed l1Token, address indexed _from, address indexed _to, uint256 _amount)",
      "event TokenSet(address indexed l1Address, address indexed l2Address)",
      "event TxToL1(address indexed _from, address indexed _to, uint256 indexed _id, bytes _data)",
      "event WithdrawalInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _l2ToL1Id, uint256 _exitNum, uint256 _amount)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function counterpartGateway() view returns (address)",
      "function exitNum() view returns (uint256)",
      "function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes outboundCalldata)",
      "function initialize(address _l1Counterpart, address _router)",
      "function l1ToL2Token(address) view returns (address)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, bytes _data) payable returns (bytes)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256, uint256, bytes _data) payable returns (bytes res)",
      "function postUpgradeInit()",
      "function registerTokenFromL1(address[] l1Address, address[] l2Address)",
      "function router() view returns (address)"
    ],
    "arb-nova:0x7626841cB6113412F9c88D3ADC720C9FAC88D9eD": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "arb-nova:0x86a02dD71363c440b21F4c0E5B2Ad01Ffe1A7482": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "arb-nova:0x8f377770289863DF73Fe665B74460579F82321fb": [
      "event DefaultGatewayUpdated(address newDefaultGateway)",
      "event GatewaySet(address indexed l1Token, address indexed gateway)",
      "event TransferRouted(address indexed token, address indexed _userFrom, address indexed _userTo, address gateway)",
      "event TxToL1(address indexed _from, address indexed _to, uint256 indexed _id, bytes _data)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function counterpartGateway() view returns (address)",
      "function defaultGateway() view returns (address)",
      "function finalizeInboundTransfer(address, address, address, uint256, bytes) payable",
      "function getGateway(address _token) view returns (address gateway)",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes)",
      "function initialize(address _counterpartGateway, address _defaultGateway)",
      "function l1TokenToGateway(address) view returns (address)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, bytes _data) payable returns (bytes)",
      "function outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes)",
      "function postUpgradeInit()",
      "function router() view returns (address)",
      "function setDefaultGateway(address newL2DefaultGateway)",
      "function setGateway(address[] _l1Token, address[] _gateway)"
    ],
    "arb-nova:0x9fCB6F75D99029f28F6F4a1d277bae49c5CAC79f": [
      "constructor(address[] recipients, uint256[] weights)",
      "error EmptyRecipients()",
      "error InputLengthMismatch()",
      "error InvalidRecipientGroup(bytes32 currentRecipientGroup, bytes32 providedRecipientGroup)",
      "error InvalidRecipientWeights(bytes32 currentRecipientWeights, bytes32 providedRecipientWeights)",
      "error InvalidTotalWeight(uint256 totalWeight)",
      "error NoFundsToDistribute()",
      "error OwnerFailedRecieve(address owner, address recipient, uint256 value)",
      "error TooManyRecipients()",
      "event OwnerRecieved(address indexed owner, address indexed recipient, uint256 value)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RecipientRecieved(address indexed recipient, uint256 value)",
      "event RecipientsUpdated(bytes32 recipientGroup, address[] recipients, bytes32 recipientWeights, uint256[] weights)",
      "function MAX_RECIPIENTS() view returns (uint64)",
      "function PER_RECIPIENT_GAS() view returns (uint256)",
      "function currentRecipientGroup() view returns (bytes32)",
      "function currentRecipientWeights() view returns (bytes32)",
      "function distributeAndUpdateRecipients(address[] currentRecipients, uint256[] currentWeights, address[] newRecipients, uint256[] newWeights)",
      "function distributeRewards(address[] recipients, uint256[] weights)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "arb-nova:0xada790b026097BfB36a5ed696859b97a96CEd92C": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "arb-nova:0xbe04Ab2728c924D678f9FC833E379688c6eFA317": [
      "event DepositFinalized(address indexed l1Token, address indexed _from, address indexed _to, uint256 _amount)",
      "event TxToL1(address indexed _from, address indexed _to, uint256 indexed _id, bytes _data)",
      "event WithdrawalInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _l2ToL1Id, uint256 _exitNum, uint256 _amount)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function counterpartGateway() view returns (address)",
      "function exitNum() view returns (uint256)",
      "function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes outboundCalldata)",
      "function initialize(address _l1Counterpart, address _router, address _l1Weth, address _l2Weth)",
      "function l1Weth() view returns (address)",
      "function l2Weth() view returns (address)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, bytes _data) payable returns (bytes)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256, uint256, bytes _data) payable returns (bytes res)",
      "function postUpgradeInit()",
      "function router() view returns (address)"
    ],
    "arb-nova:0xbf544970E6BD77b21C6492C281AB60d0770451F4": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "arb-nova:0xc232ee726E3C51B86778BB4dBe61C52cC07A60F3": [
      "constructor(address _singleton)"
    ],
    "arb-nova:0xcF9bAb7e53DDe48A6DC4f286CB14e05298799257": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "arb-nova:0xd31Ed16a8CeCe0A5070AC26024674eB680E3e639": [
      "constructor(address implementation_)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function implementation() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeTo(address newImplementation)"
    ],
    "arb-nova:0xD9D66e55227c7558f0dB52adD059057Eb9bd90a3": [
      "function beacon() view returns (address)",
      "function calculateExpectedAddress(bytes32 salt) view returns (address)",
      "function calculateExpectedAddress(address user, bytes32 userSalt) view returns (address)",
      "function cloneableProxyHash() view returns (bytes32)",
      "function createProxy(bytes32 userSalt) returns (address)",
      "function getSalt(address user, bytes32 userSalt) pure returns (bytes32)",
      "function initialize(address _beacon)"
    ],
    "arb-nova:0xf58eA15B20983116c21b05c876cc8e6CDAe5C2b9": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "arb-nova:0xf823C3cD3CeBE0a1fA952ba88Dc9EEf8e0Bf46AD": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x058E1cBb62096189Bc7Cc1FE08A0859905d969Ea": [
      "constructor()",
      "error AccountHasMadeLayerZeroRival(address account, bytes32 mutualId)",
      "error AssertionHashEmpty()",
      "error AssertionHashMismatch(bytes32 h1, bytes32 h2)",
      "error AssertionNoSibling()",
      "error AssertionNotPending()",
      "error BigStepLevelsTooMany(uint8 levels)",
      "error CachedTimeSufficient(uint256 actual, uint256 expected)",
      "error ChildrenAlreadySet(bytes32 edgeId, bytes32 lowerChildId, bytes32 upperChildId)",
      "error ClaimEdgeInvalidLevel(uint8 argLevel, uint8 claimLevel)",
      "error ClaimEdgeNotLengthOneRival(bytes32 claimId)",
      "error ClaimEdgeNotPending()",
      "error EdgeAlreadyExists(bytes32 edgeId)",
      "error EdgeAlreadyRefunded(bytes32 edgeId)",
      "error EdgeClaimMismatch(bytes32 edgeId, bytes32 claimingEdgeId)",
      "error EdgeLevelInvalid(bytes32 edgeId1, bytes32 edgeId2, uint8 level1, uint8 level2)",
      "error EdgeNotConfirmed(bytes32 edgeId, uint8)",
      "error EdgeNotExists(bytes32 edgeId)",
      "error EdgeNotLayerZero(bytes32 edgeId, address staker, bytes32 claimId)",
      "error EdgeNotLengthOne(uint256 length)",
      "error EdgeNotPending(bytes32 edgeId, uint8 status)",
      "error EdgeTypeNotSmallStep(uint8 level)",
      "error EdgeUnrivaled(bytes32 edgeId)",
      "error EmptyArray()",
      "error EmptyAssertionChain()",
      "error EmptyChallengePeriod()",
      "error EmptyClaimId()",
      "error EmptyEdgeSpecificProof()",
      "error EmptyEndMachineStatus()",
      "error EmptyEndRoot()",
      "error EmptyFirstRival()",
      "error EmptyOneStepProofEntry()",
      "error EmptyOriginId()",
      "error EmptyPrefixProof()",
      "error EmptyStakeReceiver()",
      "error EmptyStaker()",
      "error EmptyStartMachineStatus()",
      "error EmptyStartRoot()",
      "error EndHistoryRootMismatch(bytes32 endHistoryRoot, bytes32 assertionEndRoot)",
      "error HeightDiffLtTwo(uint256 h1, uint256 h2)",
      "error InsufficientConfirmationBlocks(uint256 totalBlocks, uint256 thresholdBlocks)",
      "error InvalidEdgeType(uint8 edgeType)",
      "error InvalidEndHeight(uint256 actualHeight, uint256 expectedHeight)",
      "error InvalidHeights(uint256 start, uint256 end)",
      "error LevelTooHigh(uint8 level, uint8 numBigStepLevels)",
      "error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength)",
      "error NotPowerOfTwo(uint256 val)",
      "error NotValidator(address account)",
      "error OriginIdMutualIdMismatch(bytes32 mutualId, bytes32 originId)",
      "error RivalEdgeConfirmed(bytes32 edgeId, bytes32 confirmedRivalId)",
      "error StakeAmountsMismatch(uint256 stakeLevels, uint256 numLevels)",
      "error ZeroBigStepLevels()",
      "event EdgeAdded(bytes32 indexed edgeId, bytes32 indexed mutualId, bytes32 indexed originId, bytes32 claimId, uint256 length, uint8 level, bool hasRival, bool isLayerZero)",
      "event EdgeBisected(bytes32 indexed edgeId, bytes32 indexed lowerChildId, bytes32 indexed upperChildId, bool lowerChildAlreadyExists)",
      "event EdgeConfirmedByOneStepProof(bytes32 indexed edgeId, bytes32 indexed mutualId)",
      "event EdgeConfirmedByTime(bytes32 indexed edgeId, bytes32 indexed mutualId, uint256 totalTimeUnrivaled)",
      "event EdgeRefunded(bytes32 indexed edgeId, bytes32 indexed mutualId, address stakeToken, uint256 stakeAmount)",
      "event Initialized(uint8 version)",
      "event TimerCacheUpdated(bytes32 indexed edgeId, uint256 newValue)",
      "function LAYERZERO_BIGSTEPEDGE_HEIGHT() view returns (uint256)",
      "function LAYERZERO_BLOCKEDGE_HEIGHT() view returns (uint256)",
      "function LAYERZERO_SMALLSTEPEDGE_HEIGHT() view returns (uint256)",
      "function NUM_BIGSTEP_LEVEL() view returns (uint8)",
      "function assertionChain() view returns (address)",
      "function bisectEdge(bytes32 edgeId, bytes32 bisectionHistoryRoot, bytes prefixProof) returns (bytes32, bytes32)",
      "function calculateEdgeId(uint8 level, bytes32 originId, uint256 startHeight, bytes32 startHistoryRoot, uint256 endHeight, bytes32 endHistoryRoot) pure returns (bytes32)",
      "function calculateMutualId(uint8 level, bytes32 originId, uint256 startHeight, bytes32 startHistoryRoot, uint256 endHeight) pure returns (bytes32)",
      "function challengePeriodBlocks() view returns (uint64)",
      "function confirmEdgeByOneStepProof(bytes32 edgeId, tuple(bytes32 beforeHash, bytes proof) oneStepData, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) prevConfig, bytes32[] beforeHistoryInclusionProof, bytes32[] afterHistoryInclusionProof)",
      "function confirmEdgeByTime(bytes32 edgeId, tuple(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) assertionState, bytes32 prevAssertionHash, bytes32 inboxAcc) claimStateData)",
      "function confirmedRival(bytes32 mutualId) view returns (bytes32)",
      "function createLayerZeroEdge(tuple(uint8 level, bytes32 endHistoryRoot, uint256 endHeight, bytes32 claimId, bytes prefixProof, bytes proof) args) returns (bytes32)",
      "function edgeExists(bytes32 edgeId) view returns (bool)",
      "function edgeLength(bytes32 edgeId) view returns (uint256)",
      "function excessStakeReceiver() view returns (address)",
      "function firstRival(bytes32 mutualId) view returns (bytes32)",
      "function getEdge(bytes32 edgeId) view returns (tuple(bytes32 originId, bytes32 startHistoryRoot, uint256 startHeight, bytes32 endHistoryRoot, uint256 endHeight, bytes32 lowerChildId, bytes32 upperChildId, bytes32 claimId, address staker, uint64 createdAtBlock, uint64 confirmedAtBlock, uint8 status, uint8 level, bool refunded, uint64 totalTimeUnrivaledCache))",
      "function getLayerZeroEndHeight(uint8 eType) view returns (uint256)",
      "function getPrevAssertionHash(bytes32 edgeId) view returns (bytes32)",
      "function hasLengthOneRival(bytes32 edgeId) view returns (bool)",
      "function hasMadeLayerZeroRival(address account, bytes32 mutualId) view returns (bool)",
      "function hasRival(bytes32 edgeId) view returns (bool)",
      "function initialize(address _assertionChain, uint64 _challengePeriodBlocks, address _oneStepProofEntry, uint256 layerZeroBlockEdgeHeight, uint256 layerZeroBigStepEdgeHeight, uint256 layerZeroSmallStepEdgeHeight, address _stakeToken, address _excessStakeReceiver, uint8 _numBigStepLevel, uint256[] _stakeAmounts)",
      "function multiUpdateTimeCacheByChildren(bytes32[] edgeIds, uint256 maximumCachedTime)",
      "function oneStepProofEntry() view returns (address)",
      "function refundStake(bytes32 edgeId)",
      "function stakeAmounts(uint256) view returns (uint256)",
      "function stakeToken() view returns (address)",
      "function timeUnrivaled(bytes32 edgeId) view returns (uint256)",
      "function updateTimerCacheByChildren(bytes32 edgeId, uint256 maximumCachedTime)",
      "function updateTimerCacheByClaim(bytes32 edgeId, bytes32 claimingEdgeId, uint256 maximumCachedTime)"
    ],
    "eth:0x211E1c4c7f1bF5351Ac850Ed10FD68CFfCF6c21b": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x23122da8C581AA7E0d07A36Ff1f16F799650232f": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x304807A7ed6c1296df2128E6ff3836e477329CD2": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x35FBC5F03d86E88973B06Fb9C5a913D54AbdF731": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge, bytes32 initialWasmModuleRoot), tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) pure returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) mod)"
    ],
    "eth:0x3d745b8815F9be5BF053858165f8aB1F58c77932": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TargetCallExecuted(address indexed target, uint256 value, bytes data)",
      "event UpgradeExecuted(address indexed upgrade, uint256 value, bytes data)",
      "function ADMIN_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function execute(address upgrade, bytes upgradeCallData) payable",
      "function executeCall(address target, bytes targetCallData) payable",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address[] executors)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "eth:0x3FFf9BdC3ce99d3D587b0d06Aa7C4a10075193b4": [
      "error AlreadyInit()",
      "error AlreadySpent(uint256 index)",
      "error BadPostUpgradeInit()",
      "error BridgeCallFailed()",
      "error HadZeroInit()",
      "error MerkleProofTooLong(uint256 actualLength, uint256 maxProofLength)",
      "error NotOwner(address sender, address owner)",
      "error NotRollup(address sender, address rollup)",
      "error PathNotMinimal(uint256 index, uint256 maxIndex)",
      "error ProofTooLong(uint256 proofLength)",
      "error RollupNotChanged()",
      "error SimulationOnlyEntrypoint()",
      "error UnknownRoot(bytes32 root)",
      "event OutBoxTransactionExecuted(address indexed to, address indexed l2Sender, uint256 indexed zero, uint256 transactionIndex)",
      "event SendRootUpdated(bytes32 indexed outputRoot, bytes32 indexed l2BlockHash)",
      "function OUTBOX_VERSION() view returns (uint128)",
      "function bridge() view returns (address)",
      "function calculateItemHash(address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data) pure returns (bytes32)",
      "function calculateMerkleRoot(bytes32[] proof, uint256 path, bytes32 item) pure returns (bytes32)",
      "function executeTransaction(bytes32[] proof, uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)",
      "function executeTransactionSimulation(uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)",
      "function initialize(address _bridge)",
      "function isSpent(uint256 index) view returns (bool)",
      "function l2ToL1BatchNum() pure returns (uint256)",
      "function l2ToL1Block() view returns (uint256)",
      "function l2ToL1EthBlock() view returns (uint256)",
      "function l2ToL1OutputId() view returns (bytes32)",
      "function l2ToL1Sender() view returns (address)",
      "function l2ToL1Timestamp() view returns (uint256)",
      "function postUpgradeInit()",
      "function rollup() view returns (address)",
      "function roots(bytes32) view returns (bytes32)",
      "function spent(uint256) view returns (bytes32)",
      "function updateRollupAddress()",
      "function updateSendRoot(bytes32 root, bytes32 l2BlockHash)"
    ],
    "eth:0x3ffFbAdAF827559da092217e474760E2b2c3CeDd": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x4397fE1E959Ba81B9D5f1A9679Ddd891955A42d6": [
      "constructor(address prover0_, address proverMem_, address proverMath_, address proverHostIo_)",
      "function getMachineHash(tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus) execState) pure returns (bytes32)",
      "function getStartMachineHash(bytes32 globalStateHash, bytes32 wasmModuleRoot) pure returns (bytes32)",
      "function proveOneStep(tuple(uint256 maxInboxMessagesRead, address bridge, bytes32 initialWasmModuleRoot) execCtx, uint256 machineStep, bytes32 beforeHash, bytes proof) view returns (bytes32 afterHash)",
      "function prover0() view returns (address)",
      "function proverHostIo() view returns (address)",
      "function proverMath() view returns (address)",
      "function proverMem() view returns (address)"
    ],
    "eth:0x52595021fA01B3E14EC6C88953AFc8E35dFf423c": [
      "event DefaultGatewayUpdated(address newDefaultGateway)",
      "event GatewaySet(address indexed l1Token, address indexed gateway)",
      "event TransferRouted(address indexed token, address indexed _userFrom, address indexed _userTo, address gateway)",
      "event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)",
      "event WhitelistSourceUpdated(address newSource)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function counterpartGateway() view returns (address)",
      "function defaultGateway() view returns (address)",
      "function finalizeInboundTransfer(address, address, address, uint256, bytes) payable",
      "function getGateway(address _token) view returns (address gateway)",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes)",
      "function inbox() view returns (address)",
      "function initialize(address _owner, address _defaultGateway, address, address _counterpartGateway, address _inbox)",
      "function l1TokenToGateway(address) view returns (address)",
      "function outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes)",
      "function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes)",
      "function owner() view returns (address)",
      "function postUpgradeInit()",
      "function router() view returns (address)",
      "function setDefaultGateway(address newL1DefaultGateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost) payable returns (uint256)",
      "function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress) payable returns (uint256)",
      "function setGateway(address _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost) payable returns (uint256)",
      "function setGateways(address[] _token, address[] _gateway, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost) payable returns (uint256)",
      "function setOwner(address newOwner)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateWhitelistSource(address newSource)",
      "function whitelist() view returns (address)"
    ],
    "eth:0x5613AF0474EB9c528A34701A5b1662E3C8FA0678": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0x6490bA0a60Cc7d3a59C9eeE135D9eeD24553a60d": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)",
      "event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, tuple(tuple(bytes32 prevPrevAssertionHash, bytes32 sequencerBatchAcc, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) configData) beforeStateData, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) afterState) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Initialized(uint8 version)",
      "event Paused(address account)",
      "event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)",
      "event RollupInitialized(bytes32 machineHash, uint256 chainId)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)",
      "event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "function _stakerMap(address) view returns (uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)",
      "function addToDeposit(address stakerAddress, address expectedWithdrawalAddress, uint256 tokenAmount)",
      "function amountStaked(address staker) view returns (uint256)",
      "function anyTrustFastConfirmer() view returns (address)",
      "function baseStake() view returns (uint256)",
      "function bridge() view returns (address)",
      "function chainId() view returns (uint256)",
      "function challengeGracePeriodBlocks() view returns (uint64)",
      "function challengeManager() view returns (address)",
      "function computeAssertionHash(bytes32 prevAssertionHash, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) state, bytes32 inboxAcc) pure returns (bytes32)",
      "function confirmAssertion(bytes32 assertionHash, bytes32 prevAssertionHash, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) confirmState, bytes32 winningEdgeId, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) prevConfig, bytes32 inboxAcc)",
      "function confirmPeriodBlocks() view returns (uint64)",
      "function fastConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) confirmState, bytes32 inboxAcc)",
      "function fastConfirmNewAssertion(tuple(tuple(bytes32 prevPrevAssertionHash, bytes32 sequencerBatchAcc, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) configData) beforeStateData, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) afterState) assertion, bytes32 expectedAssertionHash)",
      "function genesisAssertionHash() pure returns (bytes32)",
      "function getAssertion(bytes32 assertionHash) view returns (tuple(uint64 firstChildBlock, uint64 secondChildBlock, uint64 createdAtBlock, bool isFirstChild, uint8 status, bytes32 configHash))",
      "function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns (uint256)",
      "function getFirstChildCreationBlock(bytes32 assertionHash) view returns (uint64)",
      "function getSecondChildCreationBlock(bytes32 assertionHash) view returns (uint64)",
      "function getStaker(address staker) view returns (tuple(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress))",
      "function getStakerAddress(uint64 stakerNum) view returns (address)",
      "function getValidators() view returns (address[])",
      "function inbox() view returns (address)",
      "function initialize(address _stakeToken) view",
      "function isFirstChild(bytes32 assertionHash) view returns (bool)",
      "function isPending(bytes32 assertionHash) view returns (bool)",
      "function isStaked(address staker) view returns (bool)",
      "function isValidator(address validator) view returns (bool)",
      "function latestConfirmed() view returns (bytes32)",
      "function latestStakedAssertion(address staker) view returns (bytes32)",
      "function loserStakeEscrow() view returns (address)",
      "function minimumAssertionPeriod() view returns (uint256)",
      "function newStake(uint256 tokenAmount, address _withdrawalAddress)",
      "function newStakeOnNewAssertion(uint256 tokenAmount, tuple(tuple(bytes32 prevPrevAssertionHash, bytes32 sequencerBatchAcc, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) configData) beforeStateData, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) afterState) assertion, bytes32 expectedAssertionHash, address _withdrawalAddress)",
      "function newStakeOnNewAssertion(uint256 tokenAmount, tuple(tuple(bytes32 prevPrevAssertionHash, bytes32 sequencerBatchAcc, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) configData) beforeStateData, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) afterState) assertion, bytes32 expectedAssertionHash)",
      "function outbox() view returns (address)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function reduceDeposit(uint256 target)",
      "function removeWhitelistAfterFork()",
      "function removeWhitelistAfterValidatorAfk()",
      "function returnOldDeposit()",
      "function returnOldDepositFor(address stakerAddress)",
      "function rollupDeploymentBlock() view returns (uint256)",
      "function rollupEventInbox() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function stakeOnNewAssertion(tuple(tuple(bytes32 prevPrevAssertionHash, bytes32 sequencerBatchAcc, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) configData) beforeStateData, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) afterState) assertion, bytes32 expectedAssertionHash)",
      "function stakeToken() view returns (address)",
      "function stakerCount() view returns (uint64)",
      "function totalWithdrawableFunds() view returns (uint256)",
      "function validateAssertionHash(bytes32 assertionHash, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure",
      "function validateConfig(bytes32 assertionHash, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) configData) view",
      "function validatorAfkBlocks() view returns (uint64)",
      "function validatorWalletCreator() view returns (address)",
      "function validatorWhitelistDisabled() view returns (bool)",
      "function wasmModuleRoot() view returns (bytes32)",
      "function withdrawStakerFunds() returns (uint256)",
      "function withdrawableFunds(address user) view returns (uint256)",
      "function withdrawalAddress(address staker) view returns (address)"
    ],
    "eth:0x6Ab7A2f1a4febCD40A58b0205bFDA9CAf614b779": [
      "error BadArrayLength(uint256 expected, uint256 actual)",
      "error NotExecutorOrOwner(address actual)",
      "error OnlyOwnerDestination(address expected, address actual, address destination)",
      "error WithdrawEthFail(address destination)",
      "event AllowedExecutorDestinationsUpdated(address indexed destination, bool isSet)",
      "event ExecutorUpdated(address indexed executor, bool isExecutor)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function allowedExecutorDestinations(address) view returns (bool)",
      "function executeTransaction(bytes data, address destination, uint256 amount) payable",
      "function executeTransactionWithGasRefunder(address gasRefunder, bytes data, address destination, uint256 amount) payable",
      "function executeTransactions(bytes[] data, address[] destination, uint256[] amount) payable",
      "function executeTransactionsWithGasRefunder(address gasRefunder, bytes[] data, address[] destination, uint256[] amount) payable",
      "function executors(address) view returns (bool)",
      "function initialize(address _executor, address _owner, address[] initialExecutorAllowedDests)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAllowedExecutorDestinations(address[] destinations, bool[] isSet)",
      "function setExecutor(address[] newExecutors, bool[] isExecutor)",
      "function timeoutChallenges(address manager, uint64[] challenges)",
      "function timeoutChallengesWithGasRefunder(address gasRefunder, address manager, uint64[] challenges)",
      "function transferOwnership(address newOwner)",
      "function validateExecuteTransaction(address destination) view",
      "function withdrawEth(uint256 amount, address destination)"
    ],
    "eth:0x6D576E220Cb44C3E8eF75D0EfBeb1Ff041e2E4A5": [
      "constructor()",
      "error AlreadyInit()",
      "error HadZeroInit()",
      "error NotOwner(address sender, address owner)",
      "error RollupNotChanged()",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "function bridge() view returns (address)",
      "function initialize(address _bridge)",
      "function rollup() view returns (address)",
      "function rollupInitialized(uint256 chainId, string chainConfig)",
      "function updateRollupAddress()"
    ],
    "eth:0x71D78dC7cCC0e037e12de1E50f5470903ce37148": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0x7C058ad1D0Ee415f7e7f30e62DB1BCf568470a10": [
      "constructor(uint256 _maxDataSize)",
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error GasLimitTooLarge()",
      "error InsufficientSubmissionCost(uint256 expected, uint256 actual)",
      "error InsufficientValue(uint256 expected, uint256 actual)",
      "error L1Forked()",
      "error NotAllowedOrigin(address origin)",
      "error NotCodelessOrigin()",
      "error NotForked()",
      "error NotOrigin()",
      "error NotOwner(address sender, address owner)",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error RetryableData(address from, address to, uint256 l2CallValue, uint256 deposit, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data)",
      "event AllowListAddressSet(address indexed user, bool val)",
      "event AllowListEnabledUpdated(bool isEnabled)",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event Initialized(uint8 version)",
      "event Paused(address account)",
      "event Unpaused(address account)",
      "function allowListEnabled() view returns (bool)",
      "function bridge() view returns (address)",
      "function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee) view returns (uint256)",
      "function createRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)",
      "function createRetryableTicketNoRefundAliasRewrite(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)",
      "function depositEth(uint256) payable returns (uint256)",
      "function depositEth() payable returns (uint256)",
      "function getProxyAdmin() view returns (address)",
      "function initialize(address _bridge, address _sequencerInbox)",
      "function isAllowed(address) view returns (bool)",
      "function maxDataSize() view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function postUpgradeInit(address)",
      "function sendContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, uint256 value, bytes data) returns (uint256)",
      "function sendL1FundedContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, bytes data) payable returns (uint256)",
      "function sendL1FundedUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, bytes data) payable returns (uint256)",
      "function sendL1FundedUnsignedTransactionToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, bytes data) payable returns (uint256)",
      "function sendL2Message(bytes messageData) returns (uint256)",
      "function sendL2MessageFromOrigin(bytes messageData) returns (uint256)",
      "function sendUnsignedTransaction(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sendUnsignedTransactionToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, address to, uint256 value, bytes data) returns (uint256)",
      "function sendWithdrawEthToFork(uint256 gasLimit, uint256 maxFeePerGas, uint256 nonce, uint256 value, address withdrawTo) returns (uint256)",
      "function sequencerInbox() view returns (address)",
      "function setAllowList(address[] user, bool[] val)",
      "function setAllowListEnabled(bool _allowListEnabled)",
      "function unpause()",
      "function unsafeCreateRetryableTicket(address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes data) payable returns (uint256)"
    ],
    "eth:0x7FC126FF51183a78C5E0437467f325f661D8Df17": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event AnyTrustFastConfirmerSet(address anyTrustFastConfirmer)",
      "event AssertionConfirmed(bytes32 indexed assertionHash, bytes32 blockHash, bytes32 sendRoot)",
      "event AssertionCreated(bytes32 indexed assertionHash, bytes32 indexed parentAssertionHash, tuple(tuple(bytes32 prevPrevAssertionHash, bytes32 sequencerBatchAcc, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) configData) beforeStateData, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) afterState) assertion, bytes32 afterInboxBatchAcc, uint256 inboxMaxCount, bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks)",
      "event AssertionForceConfirmed(bytes32 indexed assertionHash)",
      "event AssertionForceCreated(bytes32 indexed assertionHash)",
      "event BaseStakeSet(uint256 newBaseStake)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ChallengeManagerSet(address challengeManager)",
      "event ConfirmPeriodBlocksSet(uint64 newConfirmPeriod)",
      "event DelayedInboxSet(address inbox, bool enabled)",
      "event InboxSet(address inbox)",
      "event Initialized(uint8 version)",
      "event LoserStakeEscrowSet(address newLoserStakerEscrow)",
      "event MinimumAssertionPeriodSet(uint256 newPeriod)",
      "event OldOutboxRemoved(address outbox)",
      "event OutboxSet(address outbox)",
      "event Paused(address account)",
      "event RollupChallengeStarted(uint64 indexed challengeIndex, address asserter, address challenger, uint64 challengedAssertion)",
      "event RollupInitialized(bytes32 machineHash, uint256 chainId)",
      "event SequencerInboxSet(address newSequencerInbox)",
      "event StakersForceRefunded(address[] staker)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "event UserStakeUpdated(address indexed user, address indexed withdrawalAddress, uint256 initialBalance, uint256 finalBalance)",
      "event UserWithdrawableFundsUpdated(address indexed user, uint256 initialBalance, uint256 finalBalance)",
      "event ValidatorAfkBlocksSet(uint256 newPeriod)",
      "event ValidatorWhitelistDisabledSet(bool _validatorWhitelistDisabled)",
      "event ValidatorsSet(address[] validators, bool[] enabled)",
      "event WasmModuleRootSet(bytes32 newWasmModuleRoot)",
      "function _stakerMap(address) view returns (uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress)",
      "function amountStaked(address staker) view returns (uint256)",
      "function anyTrustFastConfirmer() view returns (address)",
      "function baseStake() view returns (uint256)",
      "function bridge() view returns (address)",
      "function chainId() view returns (uint256)",
      "function challengeGracePeriodBlocks() view returns (uint64)",
      "function challengeManager() view returns (address)",
      "function confirmPeriodBlocks() view returns (uint64)",
      "function forceConfirmAssertion(bytes32 assertionHash, bytes32 parentAssertionHash, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) confirmState, bytes32 inboxAcc)",
      "function forceCreateAssertion(bytes32 prevAssertionHash, tuple(tuple(bytes32 prevPrevAssertionHash, bytes32 sequencerBatchAcc, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) configData) beforeStateData, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) beforeState, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) afterState) assertion, bytes32 expectedAssertionHash)",
      "function forceRefundStaker(address[] staker)",
      "function genesisAssertionHash() pure returns (bytes32)",
      "function getAssertion(bytes32 assertionHash) view returns (tuple(uint64 firstChildBlock, uint64 secondChildBlock, uint64 createdAtBlock, bool isFirstChild, uint8 status, bytes32 configHash))",
      "function getAssertionCreationBlockForLogLookup(bytes32 assertionHash) view returns (uint256)",
      "function getFirstChildCreationBlock(bytes32 assertionHash) view returns (uint64)",
      "function getSecondChildCreationBlock(bytes32 assertionHash) view returns (uint64)",
      "function getStaker(address staker) view returns (tuple(uint256 amountStaked, bytes32 latestStakedAssertion, uint64 index, bool isStaked, address withdrawalAddress))",
      "function getStakerAddress(uint64 stakerNum) view returns (address)",
      "function getValidators() view returns (address[])",
      "function inbox() view returns (address)",
      "function initialize(tuple(uint64 confirmPeriodBlocks, address stakeToken, uint256 baseStake, bytes32 wasmModuleRoot, address owner, address loserStakeEscrow, uint256 chainId, string chainConfig, uint256 minimumAssertionPeriod, uint64 validatorAfkBlocks, uint256[] miniStakeValues, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) sequencerInboxMaxTimeVariation, uint256 layerZeroBlockEdgeHeight, uint256 layerZeroBigStepEdgeHeight, uint256 layerZeroSmallStepEdgeHeight, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) genesisAssertionState, uint256 genesisInboxCount, address anyTrustFastConfirmer, uint8 numBigStepLevel, uint64 challengeGracePeriodBlocks, tuple(uint64 threshold, uint64 max, uint64 replenishRateInBasis) bufferConfig) config, tuple(address bridge, address sequencerInbox, address inbox, address outbox, address rollupEventInbox, address challengeManager, address rollupAdminLogic, address rollupUserLogic, address validatorWalletCreator) connectedContracts)",
      "function isFirstChild(bytes32 assertionHash) view returns (bool)",
      "function isPending(bytes32 assertionHash) view returns (bool)",
      "function isStaked(address staker) view returns (bool)",
      "function isValidator(address validator) view returns (bool)",
      "function latestConfirmed() view returns (bytes32)",
      "function latestStakedAssertion(address staker) view returns (bytes32)",
      "function loserStakeEscrow() view returns (address)",
      "function minimumAssertionPeriod() view returns (uint256)",
      "function outbox() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function removeOldOutbox(address _outbox)",
      "function resume()",
      "function rollupDeploymentBlock() view returns (uint256)",
      "function rollupEventInbox() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function setAnyTrustFastConfirmer(address _anyTrustFastConfirmer)",
      "function setBaseStake(uint256 newBaseStake)",
      "function setChallengeManager(address _challengeManager)",
      "function setConfirmPeriodBlocks(uint64 newConfirmPeriod)",
      "function setDelayedInbox(address _inbox, bool _enabled)",
      "function setInbox(address newInbox)",
      "function setLoserStakeEscrow(address newLoserStakerEscrow)",
      "function setMinimumAssertionPeriod(uint256 newPeriod)",
      "function setOutbox(address _outbox)",
      "function setOwner(address newOwner)",
      "function setSequencerInbox(address _sequencerInbox)",
      "function setValidator(address[] _validator, bool[] _val)",
      "function setValidatorAfkBlocks(uint64 newAfkBlocks)",
      "function setValidatorWhitelistDisabled(bool _validatorWhitelistDisabled)",
      "function setWasmModuleRoot(bytes32 newWasmModuleRoot)",
      "function stakeToken() view returns (address)",
      "function stakerCount() view returns (uint64)",
      "function totalWithdrawableFunds() view returns (uint256)",
      "function upgradeSecondaryTo(address newImplementation)",
      "function upgradeSecondaryToAndCall(address newImplementation, bytes data) payable",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function validateAssertionHash(bytes32 assertionHash, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) state, bytes32 prevAssertionHash, bytes32 inboxAcc) pure",
      "function validateConfig(bytes32 assertionHash, tuple(bytes32 wasmModuleRoot, uint256 requiredStake, address challengeManager, uint64 confirmPeriodBlocks, uint64 nextInboxPosition) configData) view",
      "function validatorAfkBlocks() view returns (uint64)",
      "function validatorWalletCreator() view returns (address)",
      "function validatorWhitelistDisabled() view returns (bool)",
      "function wasmModuleRoot() view returns (bytes32)",
      "function withdrawableFunds(address user) view returns (uint256)",
      "function withdrawalAddress(address staker) view returns (address)"
    ],
    "eth:0x93e8f92327bFa8096F5F6ee5f2a49183D3B3b898": [
      "error BadSequencerMessageNumber(uint256 stored, uint256 received)",
      "error InvalidOutboxSet(address outbox)",
      "error NotContract(address addr)",
      "error NotDelayedInbox(address sender)",
      "error NotOutbox(address sender)",
      "error NotRollupOrOwner(address sender, address rollup, address owner)",
      "error NotSequencerInbox(address sender)",
      "event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data)",
      "event InboxToggle(address indexed inbox, bool enabled)",
      "event Initialized(uint8 version)",
      "event MessageDelivered(uint256 indexed messageIndex, bytes32 indexed beforeInboxAcc, address inbox, uint8 kind, address sender, bytes32 messageDataHash, uint256 baseFeeL1, uint64 timestamp)",
      "event OutboxToggle(address indexed outbox, bool enabled)",
      "event RollupUpdated(address rollup)",
      "event SequencerInboxUpdated(address newSequencerInbox)",
      "function acceptFundsFromOldBridge() payable",
      "function activeOutbox() view returns (address)",
      "function allowedDelayedInboxList(uint256) view returns (address)",
      "function allowedDelayedInboxes(address inbox) view returns (bool)",
      "function allowedOutboxList(uint256) view returns (address)",
      "function allowedOutboxes(address outbox) view returns (bool)",
      "function delayedInboxAccs(uint256) view returns (bytes32)",
      "function delayedMessageCount() view returns (uint256)",
      "function enqueueDelayedMessage(uint8 kind, address sender, bytes32 messageDataHash) payable returns (uint256)",
      "function enqueueSequencerMessage(bytes32 dataHash, uint256 afterDelayedMessagesRead, uint256 prevMessageCount, uint256 newMessageCount) returns (uint256 seqMessageIndex, bytes32 beforeAcc, bytes32 delayedAcc, bytes32 acc)",
      "function executeCall(address to, uint256 value, bytes data) returns (bool success, bytes returnData)",
      "function initialize(address rollup_)",
      "function rollup() view returns (address)",
      "function sequencerInbox() view returns (address)",
      "function sequencerInboxAccs(uint256) view returns (bytes32)",
      "function sequencerMessageCount() view returns (uint256)",
      "function sequencerReportedSubMessageCount() view returns (uint256)",
      "function setDelayedInbox(address inbox, bool enabled)",
      "function setOutbox(address outbox, bool enabled)",
      "function setSequencerInbox(address _sequencerInbox)",
      "function setSequencerReportedSubMessageCount(uint256 newMsgCount)",
      "function submitBatchSpendingReport(address sender, bytes32 messageDataHash) returns (uint256)",
      "function updateRollupAddress(address _rollup)"
    ],
    "eth:0x97f63339374fCe157Aa8Ee27830172d2AF76A786": [
      "constructor(address _l2Counterpart, address _l1Router, address _inbox, address _l1Dai, address _l2Dai, address _l1Escrow)",
      "event Closed()",
      "event Deny(address indexed usr)",
      "event DepositInitiated(address l1Token, address indexed from, address indexed to, uint256 indexed sequenceNumber, uint256 amount)",
      "event Rely(address indexed usr)",
      "event TxToL2(address indexed from, address indexed to, uint256 indexed seqNum, bytes data)",
      "event WithdrawalFinalized(address l1Token, address indexed from, address indexed to, uint256 indexed exitNum, uint256 amount)",
      "function calculateL2TokenAddress(address l1Token) view returns (address)",
      "function close()",
      "function counterpartGateway() view returns (address)",
      "function deny(address usr)",
      "function finalizeInboundTransfer(address l1Token, address from, address to, uint256 amount, bytes data)",
      "function getOutboundCalldata(address l1Token, address from, address to, uint256 amount, bytes data) pure returns (bytes outboundCalldata)",
      "function inbox() view returns (address)",
      "function isOpen() view returns (uint256)",
      "function l1Dai() view returns (address)",
      "function l1Escrow() view returns (address)",
      "function l1Router() view returns (address)",
      "function l2Counterpart() view returns (address)",
      "function l2Dai() view returns (address)",
      "function outboundTransfer(address l1Token, address to, uint256 amount, uint256 maxGas, uint256 gasPriceBid, bytes data) payable returns (bytes)",
      "function rely(address usr)",
      "function wards(address) view returns (uint256)"
    ],
    "eth:0x98a58ADAb0f8A66A1BF4544d804bc0475dff32c7": [
      "constructor(uint256 _maxDataSize, address reader4844_, bool _isUsingFeeToken, bool _isDelayBufferable)",
      "error AlreadyInit()",
      "error AlreadyValidDASKeyset(bytes32)",
      "error BadBufferConfig()",
      "error BadMaxTimeVariation()",
      "error BadSequencerNumber(uint256 stored, uint256 received)",
      "error DataBlobsNotSupported()",
      "error DataTooLarge(uint256 dataLength, uint256 maxDataLength)",
      "error DelayProofRequired()",
      "error DelayedBackwards()",
      "error DelayedTooFar()",
      "error Deprecated()",
      "error ExtraGasNotUint64()",
      "error ForceIncludeBlockTooSoon()",
      "error HadZeroInit()",
      "error IncorrectMessagePreimage()",
      "error InitParamZero(string name)",
      "error InvalidDelayedAccPreimage()",
      "error InvalidHeaderFlag(bytes1)",
      "error KeysetTooLarge()",
      "error MissingDataHashes()",
      "error NativeTokenMismatch()",
      "error NoSuchKeyset(bytes32)",
      "error NotBatchPoster()",
      "error NotBatchPosterManager(address)",
      "error NotCodelessOrigin()",
      "error NotDelayBufferable()",
      "error NotForked()",
      "error NotOwner(address sender, address owner)",
      "error RollupNotChanged()",
      "event BatchPosterManagerSet(address newBatchPosterManager)",
      "event BatchPosterSet(address batchPoster, bool isBatchPoster)",
      "event BufferConfigSet(tuple(uint64 threshold, uint64 max, uint64 replenishRateInBasis) bufferConfig)",
      "event InboxMessageDelivered(uint256 indexed messageNum, bytes data)",
      "event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum)",
      "event InvalidateKeyset(bytes32 indexed keysetHash)",
      "event MaxTimeVariationSet(tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation)",
      "event OwnerFunctionCalled(uint256 indexed id)",
      "event SequencerBatchData(uint256 indexed batchSequenceNumber, bytes data)",
      "event SequencerBatchDelivered(uint256 indexed batchSequenceNumber, bytes32 indexed beforeAcc, bytes32 indexed afterAcc, bytes32 delayedAcc, uint256 afterDelayedMessagesRead, tuple(uint64 minTimestamp, uint64 maxTimestamp, uint64 minBlockNumber, uint64 maxBlockNumber) timeBounds, uint8 dataLocation)",
      "event SequencerSet(address addr, bool isSequencer)",
      "event SetValidKeyset(bytes32 indexed keysetHash, bytes keysetBytes)",
      "function BROTLI_MESSAGE_HEADER_FLAG() view returns (bytes1)",
      "function DAS_MESSAGE_HEADER_FLAG() view returns (bytes1)",
      "function DATA_AUTHENTICATED_FLAG() view returns (bytes1)",
      "function DATA_BLOB_HEADER_FLAG() view returns (bytes1)",
      "function HEADER_LENGTH() view returns (uint256)",
      "function TREE_DAS_MESSAGE_HEADER_FLAG() view returns (bytes1)",
      "function ZERO_HEAVY_MESSAGE_HEADER_FLAG() view returns (bytes1)",
      "function addSequencerL2Batch(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount)",
      "function addSequencerL2BatchDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)",
      "function addSequencerL2BatchFromBlobs(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount)",
      "function addSequencerL2BatchFromBlobsDelayProof(uint256 sequenceNumber, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)",
      "function addSequencerL2BatchFromOrigin(uint256, bytes, uint256, address) pure",
      "function addSequencerL2BatchFromOrigin(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount)",
      "function addSequencerL2BatchFromOriginDelayProof(uint256 sequenceNumber, bytes data, uint256 afterDelayedMessagesRead, address gasRefunder, uint256 prevMessageCount, uint256 newMessageCount, tuple(bytes32 beforeDelayedAcc, tuple(uint8 kind, address sender, uint64 blockNumber, uint64 timestamp, uint256 inboxSeqNum, uint256 baseFeeL1, bytes32 messageDataHash) delayedMessage) delayProof)",
      "function batchCount() view returns (uint256)",
      "function batchPosterManager() view returns (address)",
      "function bridge() view returns (address)",
      "function buffer() view returns (uint64 bufferBlocks, uint64 max, uint64 threshold, uint64 prevBlockNumber, uint64 replenishRateInBasis, uint64 prevSequencedBlockNumber)",
      "function dasKeySetInfo(bytes32) view returns (bool isValidKeyset, uint64 creationBlock)",
      "function forceInclusion(uint256 _totalDelayedMessagesRead, uint8 kind, uint64[2] l1BlockAndTime, uint256 baseFeeL1, address sender, bytes32 messageDataHash)",
      "function forceInclusionDeadline(uint64 blockNumber) view returns (uint64)",
      "function getKeysetCreationBlock(bytes32 ksHash) view returns (uint256)",
      "function inboxAccs(uint256 index) view returns (bytes32)",
      "function initialize(address bridge_, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation_, tuple(uint64 threshold, uint64 max, uint64 replenishRateInBasis) bufferConfig_)",
      "function invalidateKeysetHash(bytes32 ksHash)",
      "function isBatchPoster(address) view returns (bool)",
      "function isDelayBufferable() view returns (bool)",
      "function isSequencer(address) view returns (bool)",
      "function isUsingFeeToken() view returns (bool)",
      "function isValidKeysetHash(bytes32 ksHash) view returns (bool)",
      "function maxDataSize() view returns (uint256)",
      "function maxTimeVariation() view returns (uint256, uint256, uint256, uint256)",
      "function postUpgradeInit(tuple(uint64 threshold, uint64 max, uint64 replenishRateInBasis) bufferConfig_)",
      "function reader4844() view returns (address)",
      "function removeDelayAfterFork()",
      "function rollup() view returns (address)",
      "function setBatchPosterManager(address newBatchPosterManager)",
      "function setBufferConfig(tuple(uint64 threshold, uint64 max, uint64 replenishRateInBasis) bufferConfig_)",
      "function setIsBatchPoster(address addr, bool isBatchPoster_)",
      "function setIsSequencer(address addr, bool isSequencer_)",
      "function setMaxTimeVariation(tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) maxTimeVariation_)",
      "function setValidKeyset(bytes keysetBytes)",
      "function totalDelayedMessagesRead() view returns (uint256)",
      "function updateRollupAddress()"
    ],
    "eth:0xa07cD154340CC74EcF156FFB9fb378Ee29Ca71Cf": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge, bytes32 initialWasmModuleRoot) execCtx, tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) view returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) mod)"
    ],
    "eth:0xA2e996f0cb33575FA0E36e8f62fCd4a9b897aAd3": [
      "constructor()",
      "event Approve(address indexed token, address indexed spender, uint256 value)",
      "event Deny(address indexed usr)",
      "event Rely(address indexed usr)",
      "function approve(address token, address spender, uint256 value)",
      "function deny(address usr)",
      "function rely(address usr)",
      "function wards(address) view returns (uint256)"
    ],
    "eth:0xa8f7DdEd54a726eB873E98bFF2C95ABF2d03e560": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0xaB9596a0aaF28bc798c453434EC2DC0F8F0bF921": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge, bytes32 initialWasmModuleRoot), tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) pure returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) mod)"
    ],
    "eth:0xB2535b988dcE19f9D71dfB22dB6da744aCac21bf": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0xb4299A1F5f26fF6a98B7BA35572290C359fde900": [
      "event DepositInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _sequenceNumber, uint256 _amount)",
      "event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)",
      "event WithdrawRedirected(address indexed from, address indexed to, uint256 indexed exitNum, bytes newData, bytes data, bool madeExternalCall)",
      "event WithdrawalFinalized(address l1Token, address indexed _from, address indexed _to, uint256 indexed _exitNum, uint256 _amount)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function cloneableProxyHash() view returns (bytes32)",
      "function counterpartGateway() view returns (address)",
      "function encodeWithdrawal(uint256 _exitNum, address _initialDestination) pure returns (bytes32)",
      "function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable",
      "function getExternalCall(uint256 _exitNum, address _initialDestination, bytes _initialData) view returns (address target, bytes data)",
      "function getOutboundCalldata(address _token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes outboundCalldata)",
      "function inbox() view returns (address)",
      "function initialize(address _l2Counterpart, address _router, address _inbox, bytes32 _cloneableProxyHash, address _l2BeaconProxyFactory)",
      "function l2BeaconProxyFactory() view returns (address)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes res)",
      "function outboundTransferCustomRefund(address _l1Token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes res)",
      "function postUpgradeInit()",
      "function redirectedExits(bytes32) view returns (bool isExit, address _newTo, bytes _newData)",
      "function router() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferExitAndCall(uint256 _exitNum, address _initialDestination, address _newDestination, bytes _newData, bytes _data)",
      "function whitelist() view returns (address)"
    ],
    "eth:0xC1Ebd02f738644983b6C4B2d440b8e77DdE276Bd": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0xc4448b71118c9071Bcb9734A0EAc55D18A153949": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0xC840838Bc438d73C16c2f8b22D2Ce3669963cD48": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0xC8D26aB9e132C79140b3376a0Ac7932E4680Aa45": [
      "event DepositInitiated(address l1Token, address indexed _from, address indexed _to, uint256 indexed _sequenceNumber, uint256 _amount)",
      "event TokenSet(address indexed l1Address, address indexed l2Address)",
      "event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data)",
      "event WithdrawRedirected(address indexed from, address indexed to, uint256 indexed exitNum, bytes newData, bytes data, bool madeExternalCall)",
      "event WithdrawalFinalized(address l1Token, address indexed _from, address indexed _to, uint256 indexed _exitNum, uint256 _amount)",
      "function calculateL2TokenAddress(address l1ERC20) view returns (address)",
      "function counterpartGateway() view returns (address)",
      "function encodeWithdrawal(uint256 _exitNum, address _initialDestination) pure returns (bytes32)",
      "function finalizeInboundTransfer(address _token, address _from, address _to, uint256 _amount, bytes _data) payable",
      "function forceRegisterTokenToL2(address[] _l1Addresses, address[] _l2Addresses, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost) payable returns (uint256)",
      "function getExternalCall(uint256 _exitNum, address _initialDestination, bytes _initialData) view returns (address target, bytes data)",
      "function getOutboundCalldata(address _l1Token, address _from, address _to, uint256 _amount, bytes _data) view returns (bytes outboundCalldata)",
      "function inbox() view returns (address)",
      "function initialize(address _l1Counterpart, address _l1Router, address _inbox, address _owner)",
      "function l1ToL2Token(address) view returns (address)",
      "function outboundTransfer(address _l1Token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes res)",
      "function outboundTransferCustomRefund(address _l1Token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data) payable returns (bytes res)",
      "function owner() view returns (address)",
      "function postUpgradeInit()",
      "function redirectedExits(bytes32) view returns (bool isExit, address _newTo, bytes _newData)",
      "function registerTokenToL2(address _l2Address, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost, address _creditBackAddress) payable returns (uint256)",
      "function registerTokenToL2(address _l2Address, uint256 _maxGas, uint256 _gasPriceBid, uint256 _maxSubmissionCost) payable returns (uint256)",
      "function router() view returns (address)",
      "function setOwner(address newOwner)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferExitAndCall(uint256 _exitNum, address _initialDestination, address _newDestination, bytes _newData, bytes _data)",
      "function whitelist() view returns (address)"
    ],
    "eth:0xd0FDA6925f502a3a94986dfe7C92FE19EBbD679B": [
      "constructor(address _singleton)"
    ],
    "eth:0xD4B80C3D7240325D18E645B49e6535A3Bf95cc58": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0xe05465Aab36ba1277dAE36aa27a7B74830e74DE4": [
      "constructor()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event TemplateUpdated()",
      "event WalletCreated(address indexed walletAddress, address indexed executorAddress, address indexed ownerAddress, address adminProxy)",
      "function createWallet(address[] initialExecutorAllowedDests) returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setTemplate(address _template)",
      "function template() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0xe0ba77e0E24de5369e3B268Ea79fDe716e2EC48b": [
      "function executeOneStep(tuple(uint256 maxInboxMessagesRead, address bridge, bytes32 initialWasmModuleRoot), tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) startMach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) startMod, tuple(uint16 opcode, uint256 argumentData) inst, bytes proof) pure returns (tuple(uint8 status, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) valueStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) valueMultiStack, tuple(tuple(tuple(uint8 valueType, uint256 contents)[] inner) proved, bytes32 remainingHash) internalStack, tuple(tuple(tuple(uint8 valueType, uint256 contents) returnPc, bytes32 localsMerkleRoot, uint32 callerModule, uint32 callerModuleInternals)[] proved, bytes32 remainingHash) frameStack, tuple(bytes32 inactiveStackHash, bytes32 remainingHash) frameMultiStack, bytes32 globalStateHash, uint32 moduleIdx, uint32 functionIdx, uint32 functionPc, bytes32 recoveryPc, bytes32 modulesRoot) mach, tuple(bytes32 globalsMerkleRoot, tuple(uint64 size, uint64 maxSize, bytes32 merkleRoot) moduleMemory, bytes32 tablesMerkleRoot, bytes32 functionsMerkleRoot, bytes32 extraHash, uint32 internalsOffset) mod)"
    ],
    "eth:0xE7E8cCC7c381809BDC4b213CE44016300707B7Bd": [
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "event UpgradedSecondary(address indexed implementation)",
      "function initializeProxy(tuple(uint64 confirmPeriodBlocks, address stakeToken, uint256 baseStake, bytes32 wasmModuleRoot, address owner, address loserStakeEscrow, uint256 chainId, string chainConfig, uint256 minimumAssertionPeriod, uint64 validatorAfkBlocks, uint256[] miniStakeValues, tuple(uint256 delayBlocks, uint256 futureBlocks, uint256 delaySeconds, uint256 futureSeconds) sequencerInboxMaxTimeVariation, uint256 layerZeroBlockEdgeHeight, uint256 layerZeroBigStepEdgeHeight, uint256 layerZeroSmallStepEdgeHeight, tuple(tuple(bytes32[2] bytes32Vals, uint64[2] u64Vals) globalState, uint8 machineStatus, bytes32 endHistoryRoot) genesisAssertionState, uint256 genesisInboxCount, address anyTrustFastConfirmer, uint8 numBigStepLevel, uint64 challengeGracePeriodBlocks, tuple(uint64 threshold, uint64 max, uint64 replenishRateInBasis) bufferConfig) config, tuple(address bridge, address sequencerInbox, address inbox, address outbox, address rollupEventInbox, address challengeManager, address rollupAdminLogic, address rollupUserLogic, address validatorWalletCreator) connectedContracts)"
    ],
    "eth:0xFE66b18Ef1B943F8594A2710376Af4B01AcfA688": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ]
  },
  "usedTemplates": {
    "global/ProxyAdmin": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "maker/L1Escrow": "0x98107b0558e4626b48569fdbbad9fba978047c3875c34b905adaa25d98e63d2a",
    "orbitstack/Bridge": "0x021d1c558348a8ac876fad0f0af08c828492fdfc313056db0a923dec120b1f09",
    "orbitstack/CustomGateway": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/EdgeChallengeManager": "0xd8e4b2504241a40841671a287c90ff46798a14ac1394c9f496ffb3d6b0495c08",
    "orbitstack/ERC20Gateway": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/GatewayRouter": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/Inbox": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/layer2/L2ERC20Gateway": "0x057a08e3ebdc17e381b641116fbe4420b0a5ee84271562870b462f7e33d5d685",
    "orbitstack/layer2/L2GatewayRouter": "0x6eb456cde28339a9bdd6fc83576b4fd75b96930f7a57be0a26c80d4c45215cbc",
    "orbitstack/layer2/L2SecurityCouncilEmergency": "0xf509fc34576b73a2b56cea5e9555c23414ac91ec341cc8be8b08f253909a46fb",
    "orbitstack/layer2/L2SurplusFee": "0x35909e6c98ff9dc33cebb87d3a2b06a219f78e429c555102d9be6eaa65d55fa4",
    "orbitstack/layer2/L2WethGateway": "0xd84f362cbad6cd7de185b612e49e8eee1ad5e4d94eb0dd821258681d7f1448a5",
    "orbitstack/OneStepProofEntry": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/OneStepProver0": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/OneStepProverHostIo": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/OneStepProverMath": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/OneStepProverMemory": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/Outbox": "0x8dbaaf653890815197f4c39ef9d1000a8dfc0338ef34b273788a6d2087d4cfec",
    "orbitstack/RollupEventInbox": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "orbitstack/RollupProxyBoLD": "0x2698d3d5c271b76e0481b26e00170b2cee6acdd8288354954fa73af2825ede23",
    "orbitstack/SequencerInbox": "0x100e93a03486bc9e5e0302baf9dc4f98d011fa54d4088db1cd234f5812482ba1"
  },
  "usedBlockNumbers": { "ethereum": 23436346, "nova": 84102998 },
  "permissionsConfigHash": "0xfaec0dde85842c59c91171277c7df9f6aa8997827b3ce19de5914844db043524"
}
