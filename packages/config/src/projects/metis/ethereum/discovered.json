{
  "name": "metis",
  "chain": "ethereum",
  "blockNumber": 22610669,
  "configHash": "0x830f0d66787d79b301a2b867082dd69e366911873940965548fc26f06b2264b4",
  "entries": [
    {
      "address": "0x001088E383A00ff4ab36F37f7021Cb6d7B415751",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x02058Bb1d98D88087008F2ac1273584591380e3F",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "0x081D1101855bD523bA69A9794e0217F0DB6323ff",
      "type": "Contract",
      "template": "metis/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x6e4b297b822bdda2bb8bbf4dde360ee51379af5a0de55c0d726a2d7b68791bf7",
        "0xda7b05d88be95072ae926d6f2b176d60c2d568f45ef6c67071b28159388c81e7"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "The L1 Cross Domain Messenger (L1xDM) contract sends messages from L1 to Metis, and relays messages from Metis onto L1. In the event that a message sent from L1 to Metis is rejected for exceeding the Metis epoch gas limit, it can be resubmitted via this contract's replay function.",
      "sinceTimestamp": 1637076488,
      "sinceBlock": 13627370,
      "values": {
        "$admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "$immutable": false,
        "$implementation": "0x8bF439ef7167023F009E24b21719Ca5f768Ecb36",
        "$pastUpgrades": [
          [
            "2021-11-16T15:26:15.000Z",
            "0xa752a872bee0f5d9be41b00f85e4d0b5e958f5644f5609dd0907dd74263ff7f4",
            ["0x8bF439ef7167023F009E24b21719Ca5f768Ecb36"]
          ]
        ],
        "$upgradeCount": 1,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "owner": "0xDD6FFC7D9a4Fb420b637747edc6456340d12d377",
        "paused": false,
        "ResolvedDelegateProxy_addressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger"
      },
      "implementationNames": {
        "0x081D1101855bD523bA69A9794e0217F0DB6323ff": "Lib_ResolvedDelegateProxy",
        "0x8bF439ef7167023F009E24b21719Ca5f768Ecb36": "L1CrossDomainMessenger"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "LockingInfo",
      "address": "0x0fe382b74C3894B65c10E5C12ae60Bbd8FAf5b48",
      "type": "Contract",
      "template": "metis/LockingInfo",
      "sourceHashes": [
        "0xccb5b222f823953e2082d6174b99d09cb9046c862bb91c6fe6cb57e5289a9738",
        "0x3052e020792c1a42febb86916d737ca4d3962b80b97fe18c7a778bf270acf023"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract acting as an escrow for METIS tokens managed by LockingPool.",
      "ignoreInWatchMode": ["totalLocked", "totalRewardsLiquidated"],
      "sinceTimestamp": 1710314867,
      "sinceBlock": 19424659,
      "values": {
        "$admin": "0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8",
        "$implementation": "0x0D30F0d7934f53aaF6a1630A4c109AF4513a65cC",
        "$pastUpgrades": [
          [
            "2024-03-13T07:27:47.000Z",
            "0x37356e30602c7e4e6b05129e3a0375c3fbeb08856eb198ef7ec2a6c75fd3ee78",
            ["0x8db636418F10d514c4c68235ee3d640dDBCC7a8a"]
          ],
          [
            "2024-06-29T01:46:35.000Z",
            "0x356768c4abdb1df76773881dc3c4d8ad7af36ac2154baaec83c3f878aedb6b57",
            ["0x0D30F0d7934f53aaF6a1630A4c109AF4513a65cC"]
          ]
        ],
        "$upgradeCount": 2,
        "bridge": "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b",
        "l1Token": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
        "l2ChainId": 1088,
        "l2Token": "0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000",
        "manager": "0xD54c868362C2098E0E46F12E7D924C6A332952Dd",
        "maxLock": "100000000000000000000000",
        "minLock": "20000000000000000000000",
        "owner": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "proxiableUUID": "EXPECT_REVERT",
        "rewardPayer": "0x62478E4eeb4070fE399866aB05e821AB97200947",
        "totalLocked": "422809625916317936452410",
        "totalRewardsLiquidated": "43141403568895808876180"
      },
      "implementationNames": {
        "0x0fe382b74C3894B65c10E5C12ae60Bbd8FAf5b48": "TransparentUpgradeableProxy",
        "0x0D30F0d7934f53aaF6a1630A4c109AF4513a65cC": "LockingInfo"
      }
    },
    {
      "name": "ChainStorageContainer-SCC-batches",
      "address": "0x10739F09f6e62689c0aA8A1878816de9e166d6f9",
      "type": "Contract",
      "template": "metis/ChainStorageContainer-SCC-batches",
      "sourceHashes": [
        "0x94ea4eb57654b23e5ce34a8f4571a446786efb3080044f3ecfc2f3870e601ee0"
      ],
      "proxyType": "immutable",
      "description": "Storage container for SCC batches.",
      "ignoreInWatchMode": [
        "getGlobalMetadata",
        "length",
        "getGlobalMetadataByChainId",
        "lengthByChainId"
      ],
      "sinceTimestamp": 1637070395,
      "sinceBlock": 13626929,
      "values": {
        "$immutable": true,
        "DEFAULT_CHAINID": 1088,
        "getGlobalMetadata": "0x000000000000000000000000000000000000683c68eb0001395c68",
        "getGlobalMetadataByChainId": "0x000000000000000000000000000000000000683c68eb0001395c68",
        "length": 29086,
        "lengthByChainId": 29086,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "owner": "StateCommitmentChain"
      },
      "implementationNames": {
        "0x10739F09f6e62689c0aA8A1878816de9e166d6f9": "ChainStorageContainer"
      }
    },
    {
      "address": "0x1577D2b835f561BD021E3219Cd786181D0e17ff5",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x1A9da0aedA630dDf2748a453BF6d92560762D914",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "sequence",
          "from": "ethereum:0x918778e825747a892b17C66fe7D24C618262867d",
          "role": ".txChainBatcher"
        }
      ]
    },
    {
      "name": "DisputeGameFactory",
      "address": "0x1C2f0A08762f0aD4598fB5de8f9D6626a4e4aeE3",
      "type": "Contract",
      "template": "metis/DisputeGameFactory_Metis",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x39144681962383da8221186c19e95a5cbb0d397751dceaab7cf7237aa369a892"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Factory contract for creating dispute games. Unlike in standard OP Stack chains, games are not created to propose state roots. Instead, games are created on demand by the permissioned `GameCreator` only should a dispute arise.",
      "sinceTimestamp": 1747126931,
      "sinceBlock": 22473285,
      "values": {
        "$admin": "0x280f9c9DF12431Aed70731D5CD3d192456606a21",
        "$implementation": "0xb864eEca2a047058Eb1e28e43FEAEBE8F38843B3",
        "$pastUpgrades": [
          [
            "2025-05-13T09:02:11.000Z",
            "0xbf5ee49e50e078552444649c10f208c22d68ec3854b6922449f8115d9c934733",
            ["0xb864eEca2a047058Eb1e28e43FEAEBE8F38843B3"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"]
          },
          "GAME_CREATOR_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "GAME_CREATOR_ROLE": "0x9b2f12f1d3f61516c0ebe58c227a91273c07455ba15edc01d82cb364c3d54d02",
        "gameAtIndex": [],
        "gameCount": 0,
        "gameCreator": ["0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"],
        "gameImpls": [
          "0x477f9d1CC62Ea2c8ff0963B11C5D782Cef536235",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "initBonds": ["4000000000000000000", 0, 0, 0, 0],
        "METIS": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
        "version": "1.0.0"
      },
      "implementationNames": {
        "0x1C2f0A08762f0aD4598fB5de8f9D6626a4e4aeE3": "TransparentUpgradeableProxy",
        "0xb864eEca2a047058Eb1e28e43FEAEBE8F38843B3": "DisputeGameFactory"
      }
    },
    {
      "address": "0x217fD54d336f710F8aee19572dBfBf0B2297ed69",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x26eC4FF77DF305d5a9A7660E046dd1c06ce517f6",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ProxyAdmin",
      "address": "0x280f9c9DF12431Aed70731D5CD3d192456606a21",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x68f689a23d3badd91255602a1eb13d4789baedc16d904c3103244642fc78ca8f"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "ethereum:0x1C2f0A08762f0aD4598fB5de8f9D6626a4e4aeE3",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0xfA947f70c3509d5b70A606e871aE0C85397D0738",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1747125995,
      "sinceBlock": 22473207,
      "values": {
        "$immutable": true,
        "owner": "0x5345fCDCF5449a40df030798C195603d27691502"
      },
      "implementationNames": {
        "0x280f9c9DF12431Aed70731D5CD3d192456606a21": "ProxyAdmin"
      }
    },
    {
      "name": "MetisConfig",
      "address": "0x2aA4E192994757c5fAB87Ba13812B89564EA57Ff",
      "type": "Contract",
      "template": "metis/MetisConfig",
      "sourceHashes": [
        "0x558909a2a0c5a264fed5f222b7ceecf453fa3ef587de764b74ae5f8290dde15c"
      ],
      "proxyType": "immutable",
      "description": "Contract used to manage configuration of global Metis values.",
      "sinceTimestamp": 1747126991,
      "sinceBlock": 22473290,
      "values": {
        "$immutable": true,
        "guardian": "0x0000000000000000000000000000000000000000",
        "GUARDIAN_SLOT": "0x50d681db8bc9633efca150f3f65f126f9e520217b9746db9605f1e12d30ee319",
        "paused": false,
        "PAUSED_SLOT": "0x97f28943c081556dccc8a65dd44d936fcf82359ecbde35e60021819342c380fb",
        "version": "1.1.0"
      },
      "implementationNames": {
        "0x2aA4E192994757c5fAB87Ba13812B89564EA57Ff": "MetisConfig"
      }
    },
    {
      "address": "0x36B892a31b311E5e9960739A69D2dF0aa0F81A01",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ChainStorageContainer-CTC-batches",
      "address": "0x38473Feb3A6366757A249dB2cA4fBB2C663416B7",
      "type": "Contract",
      "template": "metis/ChainStorageContainer-CTC-batches",
      "sourceHashes": [
        "0x94ea4eb57654b23e5ce34a8f4571a446786efb3080044f3ecfc2f3870e601ee0"
      ],
      "proxyType": "immutable",
      "description": "Storage container for CTC batches.",
      "sinceTimestamp": 1637047500,
      "sinceBlock": 13625270,
      "values": {
        "$immutable": true,
        "DEFAULT_CHAINID": 1088,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "owner": "CanonicalTransactionChain"
      },
      "implementationNames": {
        "0x38473Feb3A6366757A249dB2cA4fBB2C663416B7": "ChainStorageContainer"
      }
    },
    {
      "name": "L1StandardBridge",
      "address": "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b",
      "type": "Contract",
      "template": "metis/L1StandardBridge",
      "sourceHashes": [
        "0x18e98a64fbfe011a7514d7a547900c02a3e0f9a49ab3413d517fd7e0e3c539dd",
        "0x6e30dabe85a54d5753ec304088b4cc9f1fc2ba202fb3982bf202b0cc4a922c99"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Main entry point for users depositing ERC20 tokens and ETH that do not require custom gateway.",
      "sinceTimestamp": 1637077208,
      "sinceBlock": 13627429,
      "values": {
        "$admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "$implementation": "0xa0cfE8Af2AB5C9232714647702DbACf862EA4798",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "addressmgr": "0x918778e825747a892b17C66fe7D24C618262867d",
        "DEFAULT_CHAINID": 1088,
        "l2TokenBridge": "0x4200000000000000000000000000000000000010",
        "messenger": "0x081D1101855bD523bA69A9794e0217F0DB6323ff",
        "metis": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
        "proxiableUUID": "EXPECT_REVERT"
      },
      "implementationNames": {
        "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b": "L1ChugSplashProxy",
        "0xa0cfE8Af2AB5C9232714647702DbACf862EA4798": "L1StandardBridge"
      }
    },
    {
      "address": "0x4200000000000000000000000000000000000007",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x4200000000000000000000000000000000000010",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "FaultDisputeGame",
      "address": "0x477f9d1CC62Ea2c8ff0963B11C5D782Cef536235",
      "type": "Contract",
      "template": "metis/FaultDisputeGame",
      "sourceHashes": [
        "0x41942b2c90ded6bd7da7f87e7398c6b118638d9c97de7bede373140ecabc23d1"
      ],
      "proxyType": "immutable",
      "description": "Contract for handling fault disputes (should games be created). Successfully disputed batches are marked as disputed to the StateCommitmentChain.",
      "sinceTimestamp": 1747127747,
      "sinceBlock": 22473352,
      "values": {
        "$immutable": true,
        "absolutePrestate": "0x03c4495b94be7f77580483c71563265ad1320a722d45ac3951a3dbeaa3d53805",
        "claimData": [],
        "claimDataLen": 0,
        "clockExtension": 0,
        "createdAt": 0,
        "disputeCreator": "0x0000000000000000000000000000000000000000",
        "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "gameCreator": "0x0000000000000000000000000000000000000000",
        "gameData": {
          "gameType_": 0,
          "rootClaim_": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extraData_": "0x0000000000000000000000000000000000000000000000000000000000000000"
        },
        "gameType": 0,
        "getChallengerDuration": [],
        "l1Head": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "l2BlockNumber": 0,
        "l2BlockNumberChallenged": false,
        "l2BlockNumberChallenger": "0x0000000000000000000000000000000000000000",
        "l2ChainId": 1088,
        "maxClockDuration": 86400,
        "maxGameDepth": 73,
        "resolvedAt": 0,
        "rootClaim": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "scc": "0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6",
        "splitDepth": 30,
        "startingBlockNumber": 0,
        "startingOutputRoot": {
          "root": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "l2BlockNumber": 0
        },
        "startingRootHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "status": 0,
        "version": "1.3.0-rc.1",
        "vm": "0xAFD640204D73B02C3521eA8ea3771182527Ff057",
        "wmetis": "0xfA947f70c3509d5b70A606e871aE0C85397D0738"
      },
      "implementationNames": {
        "0x477f9d1CC62Ea2c8ff0963B11C5D782Cef536235": "FaultDisputeGame"
      }
    },
    {
      "name": "Metis Multisig",
      "address": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "description": "Can pause, censor, instantly upgrade the bridge and upgrade other critical contracts in the system.",
      "receivedPermissions": [
        {
          "permission": "metisGameCreator",
          "from": "ethereum:0x1C2f0A08762f0aD4598fB5de8f9D6626a4e4aeE3",
          "role": ".gameCreator"
        },
        {
          "permission": "stateDeleterMetis",
          "from": "ethereum:0x918778e825747a892b17C66fe7D24C618262867d",
          "description": "Can delete batches from the StateCommitmentChain.",
          "role": ".1088_MVM_FraudVerifier"
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0x081D1101855bD523bA69A9794e0217F0DB6323ff",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0x0fe382b74C3894B65c10E5C12ae60Bbd8FAf5b48",
          "role": "admin",
          "via": [
            { "address": "ethereum:0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0xD54c868362C2098E0E46F12E7D924C6A332952Dd",
          "role": "admin",
          "via": [
            { "address": "ethereum:0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0xf3d58D1794f2634d6649a978f2dc093898FEEBc0",
          "role": "admin"
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "ethereum:0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1636927409,
      "sinceBlock": 13616534,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x1577D2b835f561BD021E3219Cd786181D0e17ff5",
          "0x36B892a31b311E5e9960739A69D2dF0aa0F81A01",
          "0x001088E383A00ff4ab36F37f7021Cb6d7B415751",
          "0x217fD54d336f710F8aee19572dBfBf0B2297ed69",
          "0xB383E1331dEE29864b68f7D84b0dC289F770d846",
          "0x7a9059F4A6e50090e4f55994d465918200AB4454",
          "0x02058Bb1d98D88087008F2ac1273584591380e3F",
          "0xB961047013F974C5b6B6F8dA4402379525316550",
          "0xa6D8941F935932a531A856C2e48046DA73a1098E"
        ],
        "$threshold": 4,
        "domainSeparator": "0xfb4b712c4b7702310419a72c040b8486f1f9e8b0b84ae19732273a65d3a840c5",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 9 (44%)",
        "nonce": 41,
        "VERSION": "1.3.0"
      },
      "fieldMeta": {
        "getOwners": { "severity": "LOW", "type": "PERMISSION" },
        "getThreshold": { "severity": "HIGH", "type": "PERMISSION" }
      },
      "implementationNames": {
        "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21": "GnosisSafeProxy",
        "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "address": "0x5345fCDCF5449a40df030798C195603d27691502",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "ethereum:0x1C2f0A08762f0aD4598fB5de8f9D6626a4e4aeE3",
          "role": "admin",
          "via": [
            { "address": "ethereum:0x280f9c9DF12431Aed70731D5CD3d192456606a21" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0xfA947f70c3509d5b70A606e871aE0C85397D0738",
          "role": "admin",
          "via": [
            { "address": "ethereum:0x280f9c9DF12431Aed70731D5CD3d192456606a21" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "ethereum:0x280f9c9DF12431Aed70731D5CD3d192456606a21",
          "role": ".owner"
        }
      ]
    },
    {
      "name": "CanonicalTransactionChain",
      "address": "0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9",
      "type": "Contract",
      "template": "metis/CanonicalTransactionChain",
      "sourceHashes": [
        "0x70010b1d5bb98964174a28e3c3a229763fb65df55575104adbec0bc0552cd31d"
      ],
      "proxyType": "immutable",
      "description": "The Canonical Transaction Chain (CTC) contract is an append-only log of transactions which must be applied to the OVM state. Given that transactions batch hashes are sent to an EOA address, it allows any account to enqueue() a transaction, which the Sequencer must eventually append to the rollup state.",
      "ignoreInWatchMode": [
        "getLastBlockNumber",
        "getLastTimestamp",
        "getNextQueueIndex",
        "getNumPendingQueueElements",
        "getQueueLength",
        "getTotalBatches",
        "getTotalElements"
      ],
      "sinceTimestamp": 1637070766,
      "sinceBlock": 13626959,
      "values": {
        "$immutable": true,
        "batches": "0x38473Feb3A6366757A249dB2cA4fBB2C663416B7",
        "DEFAULT_CHAINID": 1088,
        "enqueueGasCost": 60000,
        "enqueueL2GasPrepaid": 1920000,
        "getLastBlockNumber": 19431495,
        "getLastTimestamp": 1710398153,
        "getNextQueueIndex": 36284,
        "getNumPendingQueueElements": 4015,
        "getQueueLength": 40299,
        "getTotalBatches": 42647,
        "getTotalElements": 15214530,
        "l2GasDiscountDivisor": 32,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "MAX_ROLLUP_TX_SIZE": 50000,
        "maxTransactionGasLimit": 1100000000,
        "MIN_ROLLUP_TX_GAS": 100000,
        "queue": "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57"
      },
      "implementationNames": {
        "0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9": "CanonicalTransactionChain"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "BondManager",
      "address": "0x595801b85628ec6979C420988b8843A40F850528",
      "type": "Contract",
      "template": "metis/BondManager",
      "sourceHashes": [
        "0xe429226928e3766e14dbbf6391a4caa68cf9e4c12cb9e81ef04b84a38747449a"
      ],
      "proxyType": "immutable",
      "description": "The Bond Manager contract will handle deposits in the form of an ERC20 token from bonded Proposers. It will also handle the accounting of gas costs spent by a Verifier during the course of a challenge. In the event of a successful challenge, the faulty Proposer's bond will be slashed, and the Verifier's gas costs will be refunded. Current mock implementation allows only OVM_Proposer to propose new state roots. No slashing is implemented.",
      "sinceTimestamp": 1713873023,
      "sinceBlock": 19717907,
      "values": {
        "$immutable": true,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "proxiableUUID": "EXPECT_REVERT"
      },
      "implementationNames": {
        "0x595801b85628ec6979C420988b8843A40F850528": "BondManager"
      }
    },
    {
      "name": "RewardEscrowerMultisig",
      "address": "0x62478E4eeb4070fE399866aB05e821AB97200947",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "description": "Escrows staking rewards for Sequencers.",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1713630491,
      "sinceBlock": 19697815,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x36B892a31b311E5e9960739A69D2dF0aa0F81A01",
          "0x1577D2b835f561BD021E3219Cd786181D0e17ff5",
          "0xa6D8941F935932a531A856C2e48046DA73a1098E",
          "0x26eC4FF77DF305d5a9A7660E046dd1c06ce517f6"
        ],
        "$threshold": 2,
        "domainSeparator": "0x1ff48766fae122adcf2ec1fea38fe30f58b0dc6fde08e8849041ae19278ca567",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 4 (50%)",
        "nonce": 19,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "0x62478E4eeb4070fE399866aB05e821AB97200947": "GnosisSafeProxy",
        "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "MVM_CanonicalTransaction",
      "address": "0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a",
      "type": "Contract",
      "template": "metis/MVM_CanonicalTransaction",
      "sourceHashes": [
        "0x18e98a64fbfe011a7514d7a547900c02a3e0f9a49ab3413d517fd7e0e3c539dd",
        "0xc5bc8dddf764177767a3613d96c31c0fcc86db07c909c72cbf2f6a2443942109"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "MVM CanonicalTransaction is a wrapper of Canonical Transaction Chain that implements optimistic data availability scheme L1. If Sequencer is not malicious, it simply forwards appendSequencerBatch() calls to CanonicalTransactionChain.",
      "sinceTimestamp": 1649638297,
      "sinceBlock": 14561258,
      "values": {
        "$admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "$implementation": "0xC878771A4ff7466B7be8b59FB8766719AEa8d562",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "CONFIG_OWNER_KEY": "METIS_MANAGER",
        "getStakeBaseCost": "100000000000000000",
        "getStakeSeqSeconds": 86400,
        "getStakeUnitCost": 0,
        "getTxBatchSize": 9000000,
        "getTxDataSliceCount": 100,
        "getTxDataSliceSize": 90000,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "proxiableUUID": "EXPECT_REVERT",
        "stakeBaseCost": "100000000000000000",
        "stakeSeqSeconds": 86400,
        "stakeUnitCost": 0,
        "txBatchSize": 9000000,
        "TXDATA_SUBMIT_TIMEOUT": 1800,
        "txDataSliceCount": 100,
        "txDataSliceSize": 90000
      },
      "implementationNames": {
        "0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a": "L1ChugSplashProxy",
        "0xC878771A4ff7466B7be8b59FB8766719AEa8d562": "MVM_CanonicalTransaction"
      }
    },
    {
      "name": "PreimageOracle",
      "address": "0x789a64284e29d2225430606D3D89a9336870BBbC",
      "type": "Contract",
      "template": "metis/PreimageOracle",
      "sourceHashes": [
        "0x715f5c63ded74faed65181ca2796a35f260a2a074d16724707812a58ded43498"
      ],
      "proxyType": "immutable",
      "description": "Oracle for providing preimages.",
      "sinceTimestamp": 1747125887,
      "sinceBlock": 22473198,
      "values": {
        "$immutable": true,
        "challengePeriod": 86400,
        "KECCAK_TREE_DEPTH": 16,
        "MAX_LEAF_COUNT": 65535,
        "MIN_BOND_SIZE": "250000000000000000",
        "minProposalSize": 126000,
        "PRECOMPILE_CALL_RESERVED_GAS": 100000,
        "proposalCount": 0,
        "proposals": [],
        "version": "1.1.2-rc.1"
      },
      "implementationNames": {
        "0x789a64284e29d2225430606D3D89a9336870BBbC": "PreimageOracle"
      }
    },
    {
      "address": "0x7a9059F4A6e50090e4f55994d465918200AB4454",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "MVM_DiscountOracle",
      "address": "0x7f6B0b7589febc40419a8646EFf9801b87397063",
      "type": "Contract",
      "template": "metis/MVM_DiscountOracle",
      "sourceHashes": [
        "0x8406419ac446023c37b27d0154da77b664a20b7da231802e32193c8883d32d06"
      ],
      "proxyType": "immutable",
      "description": "Oracle specifying user fees for sending L1 -> Metis messages and other parameters for cross-chain communication.",
      "sinceTimestamp": 1649859244,
      "sinceBlock": 14577582,
      "values": {
        "$immutable": true,
        "CONFIG_OWNER_KEY": "METIS_MANAGER",
        "discount": 0,
        "getDiscount": 0,
        "getMinL2Gas": 200000,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "minL2Gas": 200000,
        "proxiableUUID": "EXPECT_REVERT"
      },
      "implementationNames": {
        "0x7f6B0b7589febc40419a8646EFf9801b87397063": "MVM_DiscountOracle"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x1c9416031605fbda74b5da95a290e00995eaed2f6f6ba85ff2681131efe940a0"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "ethereum:0x0fe382b74C3894B65c10E5C12ae60Bbd8FAf5b48",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "ethereum:0xD54c868362C2098E0E46F12E7D924C6A332952Dd",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1710314795,
      "sinceBlock": 19424653,
      "values": {
        "$immutable": true,
        "owner": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21"
      },
      "implementationNames": {
        "0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8": "ProxyAdmin"
      }
    },
    {
      "name": "Lib_AddressManager",
      "address": "0x918778e825747a892b17C66fe7D24C618262867d",
      "type": "Contract",
      "template": "metis/Lib_AddressManager",
      "sourceHashes": [
        "0x763c5728a19538783edf38c17731f9cf79ff6f38bfa4bce61333cef0aac5452e"
      ],
      "proxyType": "immutable",
      "description": "Contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts.",
      "sinceTimestamp": 1637047108,
      "sinceBlock": 13625248,
      "values": {
        "_1088_MVM_FraudVerifier": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "_1088_MVM_Proposer": "0xf3CEB4C2ef996CdBc95C4E18c6D0CA988CC09040",
        "_1088_MVM_Sequencer": "0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a",
        "_1088_MVM_Sequencer_Wrapper": "0xcDf02971871B7736874E20B8487c019D28090019",
        "$immutable": true,
        "1088_MVM_FraudVerifier": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "blobBatcher": "0xae4d46bd9117cb017c5185844699c51107cb28a9",
        "BondManager": "0x595801b85628ec6979C420988b8843A40F850528",
        "CanonicalTransactionChain": "0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9",
        "ChainStorageContainer_CTC_queue": "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57",
        "DisputeGameFactory": "0x1C2f0A08762f0aD4598fB5de8f9D6626a4e4aeE3",
        "L2CrossDomainMessenger": "0x4200000000000000000000000000000000000007",
        "METIS_MANAGER": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "MVM_DiscountOracle": "0x7f6B0b7589febc40419a8646EFf9801b87397063",
        "owner": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "Proxy__MVM_CanonicalTransaction": "0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a",
        "Proxy__MVM_ChainManager": "0xf3d58D1794f2634d6649a978f2dc093898FEEBc0",
        "Proxy__MVM_Verifier": "0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb",
        "Proxy__OVM_L1StandardBridge": "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b",
        "StateCommitmentChain": "0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6",
        "txChainBatcher": "0x1A9da0aedA630dDf2748a453BF6d92560762D914",
        "undefined_MVM_FraudVerifier": "0x5fF5316CD1C015970eEC83D34a69E504B577a5bb"
      },
      "fieldMeta": {
        "StateCommitmentChain": {
          "severity": "HIGH",
          "description": "Manages the L2 state on Ethereum. L2 state batches can be appended here by proposers.",
          "type": "CODE_CHANGE"
        }
      },
      "implementationNames": {
        "0x918778e825747a892b17C66fe7D24C618262867d": "Lib_AddressManager"
      }
    },
    {
      "name": "Metis Token",
      "address": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
      "type": "Contract",
      "template": "metis/METISToken",
      "sourceHashes": [
        "0xd0f9d9680beb2766f32df8f35302771cde6d0ccb5c3e7f32fdacd13bf5c58203"
      ],
      "proxyType": "immutable",
      "description": "Metis token contract.",
      "sinceTimestamp": 1607734167,
      "sinceBlock": 11434969,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "name": "Metis Token",
        "owner": "0x0000000000000000000000000000000000000000",
        "symbol": "Metis",
        "totalSupply": "10000000000000000000000000"
      },
      "implementationNames": {
        "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e": "MToken"
      }
    },
    {
      "name": "StateCommitmentChain",
      "address": "0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6",
      "type": "Contract",
      "template": "metis/MVM_StateCommitmentChain",
      "sourceHashes": [
        "0x18e98a64fbfe011a7514d7a547900c02a3e0f9a49ab3413d517fd7e0e3c539dd",
        "0x97bafeecd79eafa0a2d331c68498ce2ccecf89112ed12cb22b90aac48f1d0aa5"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The State Commitment Chain (SCC) stores a list of proposed state roots in a linked ChainStorageContainer contract. Only a permissioned state root proposer (MVM_Proposer) can submit new state roots.",
      "ignoreInWatchMode": [
        "getLastSequencerTimestamp",
        "getTotalBatches",
        "getTotalElements",
        "getLastSequencerTimestampByChainId",
        "getTotalBatchesByChainId",
        "getTotalElementsByChainId"
      ],
      "sinceTimestamp": 1710487823,
      "sinceBlock": 19438866,
      "values": {
        "$admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "$implementation": "0xe6E2DFf51b039C8EFf0b21880E2Fb008AF10B365",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "batches": "0x10739F09f6e62689c0aA8A1878816de9e166d6f9",
        "DEFAULT_CHAINID": 1088,
        "DISPUTE_GAME_FACTORY_NAME": "DisputeGameFactory",
        "findEarliestDisputableBatch": [],
        "FRAUD_PROOF_WINDOW": 604800,
        "getLastSequencerTimestamp": 1748789483,
        "getLastSequencerTimestampByChainId": 1748789483,
        "getTotalBatches": 29086,
        "getTotalBatchesByChainId": 29086,
        "getTotalElements": 20536424,
        "getTotalElementsByChainId": 20536424,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "SEQUENCER_PUBLISH_WINDOW": 12592000
      },
      "implementationNames": {
        "0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6": "L1ChugSplashProxy",
        "0xe6E2DFf51b039C8EFf0b21880E2Fb008AF10B365": "MVM_StateCommitmentChain"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "address": "0xa6D8941F935932a531A856C2e48046DA73a1098E",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ChainStorageContainer-CTC-queue",
      "address": "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57",
      "type": "Contract",
      "template": "metis/ChainStorageContainer-CTC-queue",
      "sourceHashes": [
        "0x94ea4eb57654b23e5ce34a8f4571a446786efb3080044f3ecfc2f3870e601ee0"
      ],
      "proxyType": "immutable",
      "description": "Storage container for CTC queue.",
      "sinceTimestamp": 1637047833,
      "sinceBlock": 13625297,
      "values": {
        "$immutable": true,
        "DEFAULT_CHAINID": 1088,
        "get": [],
        "getGlobalMetadata": "0x000000000000000000000000000000000000000000000000000000",
        "getGlobalMetadataByChainId": "0x000000000000000000000000000000000000000000000000000000",
        "length": 0,
        "lengthByChainId": 0,
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "owner": "CanonicalTransactionChain"
      },
      "implementationNames": {
        "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57": "ChainStorageContainer"
      }
    },
    {
      "address": "0xaE4d46bD9117Cb017C5185844699c51107cB28a9",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "sequence",
          "from": "ethereum:0x918778e825747a892b17C66fe7D24C618262867d",
          "role": ".blobBatcher"
        }
      ]
    },
    {
      "name": "MIPS",
      "address": "0xAFD640204D73B02C3521eA8ea3771182527Ff057",
      "type": "Contract",
      "template": "metis/MIPS",
      "sourceHashes": [
        "0x3a10a9204d3b7ad786308b5b5f2ca78af017388be046c0d3abe7d4193bbf2a0e"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1747125899,
      "sinceBlock": 22473199,
      "values": {
        "$immutable": true,
        "oracle": "0x789a64284e29d2225430606D3D89a9336870BBbC",
        "version": "1.1.0-rc.1"
      },
      "implementationNames": {
        "0xAFD640204D73B02C3521eA8ea3771182527Ff057": "MIPS"
      }
    },
    {
      "address": "0xB383E1331dEE29864b68f7D84b0dC289F770d846",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xB961047013F974C5b6B6F8dA4402379525316550",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xcDf02971871B7736874E20B8487c019D28090019",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xD294A6f4287edbFeBF9d57B79ce657BD33bB8b3b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "LockingPool",
      "address": "0xD54c868362C2098E0E46F12E7D924C6A332952Dd",
      "type": "Contract",
      "template": "metis/LockingPool",
      "sourceHashes": [
        "0xccb5b222f823953e2082d6174b99d09cb9046c862bb91c6fe6cb57e5289a9738",
        "0xff86f55c7d91dbdd408e8b44c6aa3647e5d7cef144de8a65bc84e13e3bf3524f"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract allowing users to lock tokens to apply to become a sequencer, receive rewards, unlock tokens to exit the sequencer, reward distribution.",
      "ignoreInWatchMode": [
        "currentBatch",
        "totalSequencers",
        "sequencers",
        "BLOCK_REWARD",
        "rewardPerBlock"
      ],
      "sinceTimestamp": 1710314939,
      "sinceBlock": 19424665,
      "values": {
        "$admin": "0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8",
        "$implementation": "0xD8f38c831E5032d23065Eaaee8c0620e17c04D60",
        "$pastUpgrades": [
          [
            "2024-03-13T07:28:59.000Z",
            "0x5a9766b27606f1c41f132a4a900131f39ab49a27607d27db667ecc1de2f9f0d1",
            ["0xd87Da73F82abe83915d61342199A4690cfdf4718"]
          ],
          [
            "2024-06-29T01:46:35.000Z",
            "0x356768c4abdb1df76773881dc3c4d8ad7af36ac2154baaec83c3f878aedb6b57",
            ["0xD8f38c831E5032d23065Eaaee8c0620e17c04D60"]
          ]
        ],
        "$upgradeCount": 2,
        "BLOCK_REWARD": "19413226030000000",
        "currentBatch": 124,
        "escrow": "0x0fe382b74C3894B65c10E5C12ae60Bbd8FAf5b48",
        "exitDelayPeriod": 1814400,
        "mpcAddress": "0xD294A6f4287edbFeBF9d57B79ce657BD33bB8b3b",
        "owner": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "paused": false,
        "rewardPerBlock": "19413226030000000",
        "sequencers": [
          {
            "owner": "0x05B755a8B2fEc50391B5C38B2afB206Ba0e8e50E",
            "signer": "0xEcA7Ae7dE0d1978DF299a547Ee66c4503fBa474D",
            "rewardRecipient": "0x0000000000000000000000000000000000000000",
            "status": 2
          },
          {
            "owner": "0xe8D97563Cfd919F1B9F7cE0049346e8796148CD5",
            "signer": "0xa233Cc81fC6C12e3318eA71EC5D7bBA78C706b04",
            "rewardRecipient": "0x0000000000000000000000000000000000000000",
            "status": 2
          },
          {
            "owner": "0x24194DFB135B33507a8F05C3F9Ada922F40CE3Ff",
            "signer": "0xAfF606251d8540f97Ca2Db12774C0147A170aB9e",
            "rewardRecipient": "0x0000000000000000000000000000000000000000",
            "status": 2
          },
          {
            "owner": "0x735Aad08c5eF7620b6422E85613f8335Ec07b573",
            "signer": "0x31e623DCb8B43aD4d05aAA6209574cf336980590",
            "rewardRecipient": "0x0Cf6ab3c169B0169E35aD58D350CbACdaF80E139",
            "status": 2
          },
          {
            "owner": "0x66c7674732357b01B3E9a8F94A05C411BeA1767A",
            "signer": "0x36f10B20781bb1E78278e84f3e1E97Acf92FA302",
            "rewardRecipient": "0x810Ef8Aa1326FB1c5Ce57cD79d549CF9B2cC32aF",
            "status": 2
          },
          {
            "owner": "0x490e02f5D3c88Cf3A16d5f265378Af962a5A999E",
            "signer": "0xEc05be638D1941c788244603AEbB5B937cD72C21",
            "rewardRecipient": "0x0Cf6ab3c169B0169E35aD58D350CbACdaF80E139",
            "status": 2
          },
          {
            "owner": "0xb6112C3613B2B6E2dB0ee0216e7D20399777114D",
            "signer": "0x652016b5718cB79d3FA360701F2d30982d7c4D7B",
            "rewardRecipient": "0x0000000000000000000000000000000000000000",
            "status": 2
          },
          {
            "owner": "0xbd3BaD2a57C49E5B3Bb4b05a737cC3673a9E9f55",
            "signer": "0xD4Eec5110Df06888211275594F340C43cD882f00",
            "rewardRecipient": "0x0Cf6ab3c169B0169E35aD58D350CbACdaF80E139",
            "status": 2
          },
          {
            "owner": "0x9D56F28b85Eddc058Fc911e8c6393Bd0BD4835A5",
            "signer": "0xaDd60572c4F39c5c9D7053A7F9e16B5d59Be6563",
            "rewardRecipient": "0x0Cf6ab3c169B0169E35aD58D350CbACdaF80E139",
            "status": 2
          },
          {
            "owner": "0x680f8981e28fC48a1ed657895e5642960E0cf3E9",
            "signer": "0x8594f6eB82e4140a3b7A2c045d85f02a6c2DCDf2",
            "rewardRecipient": "0x680f8981e28fC48a1ed657895e5642960E0cf3E9",
            "status": 2
          }
        ],
        "signerUpdateThrottle": 1,
        "totalSequencers": 10,
        "WITHDRAWAL_DELAY": 1814400
      },
      "implementationNames": {
        "0xD54c868362C2098E0E46F12E7D924C6A332952Dd": "TransparentUpgradeableProxy",
        "0xD8f38c831E5032d23065Eaaee8c0620e17c04D60": "LockingPool"
      }
    },
    {
      "address": "0xDD6FFC7D9a4Fb420b637747edc6456340d12d377",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "ethereum:0x081D1101855bD523bA69A9794e0217F0DB6323ff",
          "description": "block (censor) specific L2->L1 messages (e.g. withdrawals), so that they cannot be relayed, pause the contract.",
          "role": ".owner"
        }
      ]
    },
    {
      "address": "0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "MVM_Verifier",
      "address": "0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb",
      "type": "Contract",
      "template": "metis/MVM_Verifier",
      "sourceHashes": [
        "0x18e98a64fbfe011a7514d7a547900c02a3e0f9a49ab3413d517fd7e0e3c539dd",
        "0x85cae352a6b900f9d20a913095da6267900b8e10f04d7277743dcdd0ce8c809e"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The MVM Verifier contract is responsible for verifying the state of the MVM.",
      "sinceTimestamp": 1649719906,
      "sinceBlock": 14567320,
      "values": {
        "$admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "$implementation": "0x47b5A78E127Dfd521532Fdca89651c832Acb7e0E",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "activeChallenges": 0,
        "challenges": [],
        "CONFIG_OWNER_KEY": "METIS_MANAGER",
        "libAddressManager": "0x918778e825747a892b17C66fe7D24C618262867d",
        "metis": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
        "minStake": "200000000000000000000",
        "numQualifiedVerifiers": 0,
        "proxiableUUID": "EXPECT_REVERT",
        "seqStake": 0,
        "verifiers": [],
        "verifyWindow": 0
      },
      "implementationNames": {
        "0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb": "L1ChugSplashProxy",
        "0x47b5A78E127Dfd521532Fdca89651c832Acb7e0E": "MVM_Verifier"
      }
    },
    {
      "address": "0xf3CEB4C2ef996CdBc95C4E18c6D0CA988CC09040",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "propose",
          "from": "ethereum:0x918778e825747a892b17C66fe7D24C618262867d",
          "role": "._1088_MVM_Proposer"
        }
      ]
    },
    {
      "name": "MVM_L2ChainManagerOnL1",
      "address": "0xf3d58D1794f2634d6649a978f2dc093898FEEBc0",
      "type": "Contract",
      "template": "metis/MVM_L2ChainManagerOnL1",
      "sourceHashes": [
        "0x18e98a64fbfe011a7514d7a547900c02a3e0f9a49ab3413d517fd7e0e3c539dd",
        "0x8be6c2abbd355799e149ebae677a3814685c6b43ebad0b7853fe236af7a84fe7"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract that allows METIS_MANAGER to switch Sequencer.",
      "sinceTimestamp": 1637089464,
      "sinceBlock": 13628326,
      "values": {
        "$admin": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "$implementation": "0x7b5AFdA01ef32d95858A22E5fc0a6821A12CDAe5",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "addressmgr": "0x918778e825747a892b17C66fe7D24C618262867d",
        "CONFIG_OWNER_KEY": "METIS_MANAGER",
        "messenger": "0x081D1101855bD523bA69A9794e0217F0DB6323ff",
        "proxiableUUID": "EXPECT_REVERT"
      },
      "implementationNames": {
        "0xf3d58D1794f2634d6649a978f2dc093898FEEBc0": "L1ChugSplashProxy",
        "0x7b5AFdA01ef32d95858A22E5fc0a6821A12CDAe5": "MVM_L2ChainManagerOnL1"
      }
    },
    {
      "name": "DelayedWMetis",
      "address": "0xfA947f70c3509d5b70A606e871aE0C85397D0738",
      "type": "Contract",
      "template": "metis/DelayedWMetis",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x9d2c1c322c99db1beff551176a6a67aed49220a4307f3d9b797ac7dcc975ecab"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Delayed wrapped Metis token contract.",
      "ignoreInWatchMode": ["totalSupply"],
      "sinceTimestamp": 1747127051,
      "sinceBlock": 22473294,
      "values": {
        "$admin": "0x280f9c9DF12431Aed70731D5CD3d192456606a21",
        "$implementation": "0xa2033fbb6213B2233a6998391ccc8E070BcC1B51",
        "$pastUpgrades": [
          [
            "2025-05-13T09:04:11.000Z",
            "0x01245dfca81d0eee17a1ed68eebcf822d05a17ad298e3879cd40002932079a12",
            ["0xa2033fbb6213B2233a6998391ccc8E070BcC1B51"]
          ]
        ],
        "$upgradeCount": 1,
        "config": "0x2aA4E192994757c5fAB87Ba13812B89564EA57Ff",
        "decimals": 18,
        "delay": 86400,
        "metisToken": "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e",
        "name": "Wrapped Metis",
        "owner": "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21",
        "symbol": "WMETIS",
        "totalSupply": 0,
        "version": "1.0.0"
      },
      "implementationNames": {
        "0xfA947f70c3509d5b70A606e871aE0C85397D0738": "TransparentUpgradeableProxy",
        "0xa2033fbb6213B2233a6998391ccc8E070BcC1B51": "DelayedWMetis"
      }
    }
  ],
  "abis": {
    "0x081D1101855bD523bA69A9794e0217F0DB6323ff": [
      "constructor(address _libAddressManager, string _implementationName)"
    ],
    "0x0D30F0d7934f53aaF6a1630A4c109AF4513a65cC": [
      "event BatchSubmitReward(uint256 _newBatchId)",
      "event ClaimRewards(uint256 indexed sequencerId, address recipient, uint256 indexed amount, uint256 indexed totalAmount)",
      "event Initialized(uint8 version)",
      "event LockUpdate(uint256 indexed sequencerId, uint256 indexed nonce, uint256 indexed newAmount)",
      "event Locked(address indexed signer, uint256 indexed sequencerId, uint256 nonce, uint256 indexed activationBatch, uint256 amount, uint256 total, bytes signerPubkey)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Relocked(uint256 indexed sequencerId, uint256 amount, uint256 total)",
      "event SetMaxLock(uint256 _newMaxLock)",
      "event SetMinLock(uint256 _newMinLock)",
      "event SetRewardPayer(address _payer)",
      "event SignerChange(uint256 indexed sequencerId, uint256 nonce, address indexed oldSigner, address indexed newSigner, bytes signerPubkey)",
      "event UnlockInit(address indexed user, uint256 indexed sequencerId, uint256 nonce, uint256 deactivationBatch, uint256 deactivationTime, uint256 unlockClaimTime, uint256 indexed amount)",
      "event Unlocked(address indexed user, uint256 indexed sequencerId, uint256 amount, uint256 total)",
      "event Withdraw(uint256 indexed sequencerId, uint256 amount)",
      "function bridge() view returns (address)",
      "function distributeReward(uint256 _batchId, uint256 _totalReward)",
      "function finalizeUnlock(address _operator, uint256 _seqId, uint256 _amount, uint256 _reward, address _recipient, uint32 _l2gas) payable",
      "function increaseLocked(uint256 _seqId, uint256 _nonce, address _owner, uint256 _locked, uint256 _incoming, uint256 _fromReward)",
      "function initManager(address _manager)",
      "function initialize(address _bridge, address _l1Token, address _l2Token, uint256 _l2ChainId)",
      "function initializeUnlock(uint256 _seqId, uint256 _reward, uint32 _l2gas, tuple(uint256 amount, uint256 reward, uint256 activationBatch, uint256 updatedBatch, uint256 deactivationBatch, uint256 deactivationTime, uint256 unlockClaimTime, uint256 nonce, address owner, address signer, bytes pubkey, address rewardRecipient, uint8 status) _seq) payable",
      "function l1Token() view returns (address)",
      "function l2ChainId() view returns (uint256)",
      "function l2Token() view returns (address)",
      "function liquidateReward(uint256 _seqId, uint256 _amount, address _recipient, uint32 _l2gas) payable",
      "function logSignerChange(uint256 sequencerId, address oldSigner, address newSigner, uint256 nonce, bytes signerPubkey)",
      "function manager() view returns (address)",
      "function maxLock() view returns (uint256)",
      "function minLock() view returns (uint256)",
      "function newSequencer(uint256 _id, address _owner, address _signer, uint256 _amount, uint256 _batchId, bytes _signerPubkey)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function rewardPayer() view returns (address)",
      "function setMaxLock(uint256 _maxLock)",
      "function setMinLock(uint256 _minLock)",
      "function setRewardPayer(address _payer)",
      "function totalLocked() view returns (uint256)",
      "function totalRewardsLiquidated() view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function withdrawLocking(uint256 _seqId, address _owner, uint256 _nonce, uint256 _amount, uint256 _locked)"
    ],
    "0x0fe382b74C3894B65c10E5C12ae60Bbd8FAf5b48": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x10739F09f6e62689c0aA8A1878816de9e166d6f9": [
      "constructor(address _libAddressManager, string _owner)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function deleteElementsAfterInclusive(uint256 _index, bytes27 _globalMetadata)",
      "function deleteElementsAfterInclusive(uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "function get(uint256 _index) view returns (bytes32)",
      "function getByChainId(uint256 _chainId, uint256 _index) view returns (bytes32)",
      "function getGlobalMetadata() view returns (bytes27)",
      "function getGlobalMetadataByChainId(uint256 _chainId) view returns (bytes27)",
      "function length() view returns (uint256)",
      "function lengthByChainId(uint256 _chainId) view returns (uint256)",
      "function libAddressManager() view returns (address)",
      "function owner() view returns (string)",
      "function push(bytes32 _object, bytes27 _globalMetadata)",
      "function push(bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "function resolve(string _name) view returns (address)",
      "function setByChainId(uint256 _chainId, uint256 _index, bytes32 _object)",
      "function setGlobalMetadata(bytes27 _globalMetadata)",
      "function setGlobalMetadataByChainId(uint256 _chainId, bytes27 _globalMetadata)"
    ],
    "0x1C2f0A08762f0aD4598fB5de8f9D6626a4e4aeE3": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x280f9c9DF12431Aed70731D5CD3d192456606a21": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x2aA4E192994757c5fAB87Ba13812B89564EA57Ff": [
      "constructor()",
      "event ConfigUpdate(uint8 indexed updateType, bytes data)",
      "event Initialized(uint8 version)",
      "event Paused(string identifier)",
      "event Unpaused()",
      "function GUARDIAN_SLOT() view returns (bytes32)",
      "function PAUSED_SLOT() view returns (bytes32)",
      "function guardian() view returns (address guardian_)",
      "function initialize(address _guardian, bool _paused)",
      "function pause(string _identifier)",
      "function paused() view returns (bool paused_)",
      "function unpause()",
      "function version() view returns (string)"
    ],
    "0x38473Feb3A6366757A249dB2cA4fBB2C663416B7": [
      "constructor(address _libAddressManager, string _owner)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function deleteElementsAfterInclusive(uint256 _index, bytes27 _globalMetadata)",
      "function deleteElementsAfterInclusive(uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "function get(uint256 _index) view returns (bytes32)",
      "function getByChainId(uint256 _chainId, uint256 _index) view returns (bytes32)",
      "function getGlobalMetadata() view returns (bytes27)",
      "function getGlobalMetadataByChainId(uint256 _chainId) view returns (bytes27)",
      "function length() view returns (uint256)",
      "function lengthByChainId(uint256 _chainId) view returns (uint256)",
      "function libAddressManager() view returns (address)",
      "function owner() view returns (string)",
      "function push(bytes32 _object, bytes27 _globalMetadata)",
      "function push(bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "function resolve(string _name) view returns (address)",
      "function setByChainId(uint256 _chainId, uint256 _index, bytes32 _object)",
      "function setGlobalMetadata(bytes27 _globalMetadata)",
      "function setGlobalMetadataByChainId(uint256 _chainId, bytes27 _globalMetadata)"
    ],
    "0x3980c9ed79d2c191A89E02Fa3529C60eD6e9c04b": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x477f9d1CC62Ea2c8ff0963B11C5D782Cef536235": [
      "constructor(uint32 _gameType, bytes32 _absolutePrestate, uint256 _maxGameDepth, uint256 _splitDepth, uint64 _clockExtension, uint64 _maxClockDuration, address _vm, address _wmetis, address _addressManager, uint256 _l2ChainId)",
      "error AlreadyInitialized()",
      "error AnchorRootNotFound()",
      "error BlockNumberMatches()",
      "error CannotDefendRootClaim()",
      "error ClaimAboveSplit()",
      "error ClaimAlreadyExists()",
      "error ClaimAlreadyResolved()",
      "error ClockNotExpired()",
      "error ClockTimeExceeded()",
      "error DuplicateStep()",
      "error GameDepthExceeded()",
      "error GameNotInProgress()",
      "error InsufficientAllowance()",
      "error InsufficientBalance()",
      "error InvalidChallengePeriod()",
      "error InvalidClockExtension()",
      "error InvalidDisputedClaimIndex()",
      "error InvalidHeaderRLP()",
      "error InvalidLocalIdent()",
      "error InvalidOutputRootProof()",
      "error InvalidParent()",
      "error InvalidPrestate()",
      "error InvalidSplitDepth()",
      "error L2BlockNumberChallenged()",
      "error MaxDepthTooLarge()",
      "error NoCreditToClaim()",
      "error OutOfOrderResolution()",
      "error UnexpectedRootClaim(bytes32 rootClaim)",
      "error ValidStep()",
      "event Move(uint256 indexed parentIndex, bytes32 indexed claim, address indexed claimant)",
      "event Resolved(uint8 indexed status)",
      "event SlashingFailed(address indexed intendedRecipient, bytes reason)",
      "function absolutePrestate() view returns (bytes32 absolutePrestate_)",
      "function addLocalData(uint256 _ident, uint256 _execLeafIdx, uint256 _partOffset)",
      "function attack(bytes32 _disputed, uint256 _parentIndex, bytes32 _claim)",
      "function challengeRootL2Block(tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _outputRootProof, bytes _headerRLP)",
      "function claimCredit(address _recipient)",
      "function claimData(uint256) view returns (uint32 parentIndex, address counteredBy, address claimant, uint128 bond, bytes32 claim, uint128 position, uint128 clock)",
      "function claimDataLen() view returns (uint256 len_)",
      "function claims(bytes32) view returns (bool)",
      "function clockExtension() view returns (uint64 clockExtension_)",
      "function createdAt() view returns (uint64)",
      "function credit(address) view returns (uint256)",
      "function defend(bytes32 _disputed, uint256 _parentIndex, bytes32 _claim)",
      "function disputeCreator() pure returns (address creator_)",
      "function extraData() pure returns (bytes extraData_)",
      "function gameCreator() pure returns (address creator_)",
      "function gameData() view returns (uint32 gameType_, bytes32 rootClaim_, bytes extraData_)",
      "function gameType() view returns (uint32 gameType_)",
      "function getChallengerDuration(uint256 _claimIndex) view returns (uint64 duration_)",
      "function getNumToResolve(uint256 _claimIndex) view returns (uint256 numRemainingChildren_)",
      "function getRequiredBond(uint128 _position) view returns (uint256 requiredBond_)",
      "function initialize() payable",
      "function l1Head() pure returns (bytes32 l1Head_)",
      "function l2BlockNumber() pure returns (uint256 l2BlockNumber_)",
      "function l2BlockNumberChallenged() view returns (bool)",
      "function l2BlockNumberChallenger() view returns (address)",
      "function l2ChainId() view returns (uint256 l2ChainId_)",
      "function maxClockDuration() view returns (uint64 maxClockDuration_)",
      "function maxGameDepth() view returns (uint256 maxGameDepth_)",
      "function move(bytes32 _disputed, uint256 _challengeIndex, bytes32 _claim, bool _isAttack)",
      "function resolutionCheckpoints(uint256) view returns (bool initialCheckpointComplete, uint32 subgameIndex, uint128 leftmostPosition, address counteredBy)",
      "function resolve() returns (uint8 status_)",
      "function resolveClaim(uint256 _claimIndex, uint256 _numToResolve)",
      "function resolvedAt() view returns (uint64)",
      "function resolvedSubgames(uint256) view returns (bool)",
      "function rootClaim() pure returns (bytes32 rootClaim_)",
      "function scc() view returns (address scc_)",
      "function splitDepth() view returns (uint256 splitDepth_)",
      "function startingBlockNumber() view returns (uint256 startingBlockNumber_)",
      "function startingOutputRoot() view returns (bytes32 root, uint256 l2BlockNumber)",
      "function startingRootHash() view returns (bytes32 startingRootHash_)",
      "function status() view returns (uint8)",
      "function step(uint256 _claimIndex, bool _isAttack, bytes _stateData, bytes _proof)",
      "function subgames(uint256, uint256) view returns (uint256)",
      "function version() view returns (string)",
      "function vm() view returns (address vm_)",
      "function wmetis() view returns (address wmetis_)"
    ],
    "0x47b5A78E127Dfd521532Fdca89651c832Acb7e0E": [
      "constructor()",
      "event Claim(address sender, uint256 amount)",
      "event Finalize(uint256 cIndex, address sender, uint8 result)",
      "event NewChallenge(uint256 cIndex, uint256 chainID, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) header, uint256 timestamp)",
      "event Penalize(address sender, uint256 stakeLost)",
      "event Reward(address target, uint256 amount)",
      "event SlashSequencer(uint256 chainID, address seq)",
      "event Stake(address verifier, uint256 amount)",
      "event Verify1(uint256 cIndex, address verifier)",
      "event Verify2(uint256 cIndex, address verifier)",
      "event Withdraw(address sender, uint256 amount)",
      "function CONFIG_OWNER_KEY() view returns (string)",
      "function absence_strikes(address) view returns (uint8)",
      "function activeChallenges() view returns (uint256)",
      "function chain_under_challenge(uint256) view returns (uint256)",
      "function challenges(uint256) view returns (address challenger, uint256 chainID, uint256 index, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) header, uint256 timestamp, uint256 numQualifiedVerifiers, uint256 numVerifiers, bool done)",
      "function claim()",
      "function consensus_strikes(address) view returns (uint8)",
      "function decrypt(bytes data, bytes key) pure returns (bytes)",
      "function depositSeqStake(uint256 amount)",
      "function disableWhiteList()",
      "function encrypt(bytes data, bytes key) pure returns (bytes)",
      "function getMerkleRoot(bytes32[] elements) pure returns (bytes32)",
      "function isSufficientlyStaked(address target) view returns (bool)",
      "function isWhiteListed(address verifier) view returns (bool)",
      "function libAddressManager() view returns (address)",
      "function metis() view returns (address)",
      "function minStake() view returns (uint256)",
      "function newChallenge(uint256 chainID, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) header, bytes proposedHash, bytes keyhash)",
      "function numQualifiedVerifiers() view returns (uint256)",
      "function resolve(string _name) view returns (address)",
      "function rewards(address) view returns (uint256)",
      "function seqStake() view returns (uint256)",
      "function setMinStake(uint256 _minStake)",
      "function setThreshold(uint256 absence_threshold, uint256 fail_threshold)",
      "function setVerifyWindow(uint256 window)",
      "function setWhiteList(address verifier, bool allowed)",
      "function verifierStake(uint256 stake)",
      "function verifier_stakes(address) view returns (uint256)",
      "function verifiers(uint256) view returns (address)",
      "function verify1(uint256 cIndex, bytes hash, bytes keyhash)",
      "function verify2(uint256 cIndex, bytes key)",
      "function verifyWindow() view returns (uint256)",
      "function whitelist(address) view returns (bool)",
      "function withdraw(uint256 amount)",
      "function withdrawSeqStake(address to)"
    ],
    "0x48fE1f85ff8Ad9D088863A42Af54d06a1328cF21": [
      "constructor(address _singleton)"
    ],
    "0x56a76bcC92361f6DF8D75476feD8843EdC70e1C9": [
      "constructor(address _libAddressManager, uint256 _maxTransactionGasLimit, uint256 _l2GasDiscountDivisor, uint256 _enqueueGasCost)",
      "event BatchElementDeleted(address _sender, uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "event BatchPushed(address _sender, uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "event BatchSetted(address _sender, uint256 _chainId, uint256 _index, bytes32 _object)",
      "event BatchesGlobalMetadataSet(address _sender, uint256 _chainId, bytes27 _globalMetadata)",
      "event L2GasParamsUpdated(uint256 l2GasDiscountDivisor, uint256 enqueueGasCost, uint256 enqueueL2GasPrepaid)",
      "event QueueBatchAppended(uint256 _chainId, uint256 _startingQueueIndex, uint256 _numQueueElements, uint256 _totalElements)",
      "event QueueElementDeleted(address _sender, uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "event QueueGlobalMetadataSet(address _sender, uint256 _chainId, bytes27 _globalMetadata)",
      "event QueuePushed(address _sender, uint256 _chainId, tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _object)",
      "event QueueSetted(address _sender, uint256 _chainId, uint256 _index, tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _object)",
      "event SequencerBatchAppended(uint256 _chainId, uint256 _startingQueueIndex, uint256 _numQueueElements, uint256 _totalElements)",
      "event TransactionBatchAppended(uint256 _chainId, uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData)",
      "event TransactionEnqueued(uint256 _chainId, address indexed _l1TxOrigin, address indexed _target, uint256 _gasLimit, bytes _data, uint256 indexed _queueIndex, uint256 _timestamp)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function MAX_ROLLUP_TX_SIZE() view returns (uint256)",
      "function MIN_ROLLUP_TX_GAS() view returns (uint256)",
      "function appendSequencerBatch()",
      "function appendSequencerBatchByChainId()",
      "function batches() view returns (address)",
      "function deleteBatchElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "function enqueue(address _target, uint256 _gasLimit, bytes _data)",
      "function enqueueByChainId(uint256 _chainId, address _target, uint256 _gasLimit, bytes _data)",
      "function enqueueGasCost() view returns (uint256)",
      "function enqueueL2GasPrepaid() view returns (uint256)",
      "function getBatchByChainId(uint256 _chainId, uint256 _index) view returns (bytes32)",
      "function getBatchGlobalMetadataByChainId(uint256 _chainId) view returns (bytes27)",
      "function getLastBlockNumber() view returns (uint40)",
      "function getLastBlockNumberByChainId(uint256 _chainId) view returns (uint40)",
      "function getLastTimestamp() view returns (uint40)",
      "function getLastTimestampByChainId(uint256 _chainId) view returns (uint40)",
      "function getNextQueueIndex() view returns (uint40)",
      "function getNextQueueIndexByChainId(uint256 _chainId) view returns (uint40)",
      "function getNumPendingQueueElements() view returns (uint40)",
      "function getNumPendingQueueElementsByChainId(uint256 _chainId) view returns (uint40)",
      "function getQueueElement(uint256 _index) view returns (tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _element)",
      "function getQueueElementByChainId(uint256 _chainId, uint256 _index) view returns (tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _element)",
      "function getQueueLength() view returns (uint40)",
      "function getQueueLengthByChainId(uint256 _chainId) view returns (uint40)",
      "function getTotalBatches() view returns (uint256 _totalBatches)",
      "function getTotalBatchesByChainId(uint256 _chainId) view returns (uint256 _totalBatches)",
      "function getTotalElements() view returns (uint256 _totalElements)",
      "function getTotalElementsByChainId(uint256 _chainId) view returns (uint256 _totalElements)",
      "function l2GasDiscountDivisor() view returns (uint256)",
      "function lengthBatchByChainId(uint256 _chainId) view returns (uint256)",
      "function libAddressManager() view returns (address)",
      "function maxTransactionGasLimit() view returns (uint256)",
      "function pushBatchByChainId(uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "function pushQueueByChainId(uint256 _chainId, tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _object)",
      "function queue() view returns (address)",
      "function resolve(string _name) view returns (address)",
      "function setBatchByChainId(uint256 _chainId, uint256 _index, bytes32 _object)",
      "function setBatchGlobalMetadataByChainId(uint256 _chainId, bytes27 _globalMetadata)",
      "function setGasParams(uint256 _l2GasDiscountDivisor, uint256 _enqueueGasCost)",
      "function setQueueByChainId(uint256 _chainId, uint256 _index, tuple(bytes32 transactionHash, uint40 timestamp, uint40 blockNumber) _object)"
    ],
    "0x595801b85628ec6979C420988b8843A40F850528": [
      "constructor(address _libAddressManager)",
      "function isCollateralized(address _who) view returns (bool)",
      "function isCollateralizedByChainId(uint256 _chainId, address _who, address _prop) view returns (bool)",
      "function libAddressManager() view returns (address)",
      "function resolve(string _name) view returns (address)"
    ],
    "0x62478E4eeb4070fE399866aB05e821AB97200947": [
      "constructor(address _singleton)"
    ],
    "0x6A1DB7d799FBA381F2a518cA859ED30cB8E1d41a": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0x789a64284e29d2225430606D3D89a9336870BBbC": [
      "constructor(uint256 _minProposalSize, uint256 _challengePeriod)",
      "error ActiveProposal()",
      "error AlreadyFinalized()",
      "error AlreadyInitialized()",
      "error BadProposal()",
      "error BondTransferFailed()",
      "error InsufficientBond()",
      "error InvalidInputSize()",
      "error InvalidPreimage()",
      "error InvalidProof()",
      "error NotEOA()",
      "error NotInitialized()",
      "error PartOffsetOOB()",
      "error PostStateMatches()",
      "error StatesNotContiguous()",
      "error TreeSizeOverflow()",
      "error WrongStartingBlock()",
      "function KECCAK_TREE_DEPTH() view returns (uint256)",
      "function MAX_LEAF_COUNT() view returns (uint256)",
      "function MIN_BOND_SIZE() view returns (uint256)",
      "function PRECOMPILE_CALL_RESERVED_GAS() view returns (uint256)",
      "function addLeavesLPP(uint256 _uuid, uint256 _inputStartBlock, bytes _input, bytes32[] _stateCommitments, bool _finalize)",
      "function challengeFirstLPP(address _claimant, uint256 _uuid, tuple(bytes input, uint256 index, bytes32 stateCommitment) _postState, bytes32[] _postStateProof)",
      "function challengeLPP(address _claimant, uint256 _uuid, tuple(uint64[25] state) _stateMatrix, tuple(bytes input, uint256 index, bytes32 stateCommitment) _preState, bytes32[] _preStateProof, tuple(bytes input, uint256 index, bytes32 stateCommitment) _postState, bytes32[] _postStateProof)",
      "function challengePeriod() view returns (uint256 challengePeriod_)",
      "function getTreeRootLPP(address _owner, uint256 _uuid) view returns (bytes32 treeRoot_)",
      "function initLPP(uint256 _uuid, uint32 _partOffset, uint32 _claimedSize) payable",
      "function loadBlobPreimagePart(uint256 _z, uint256 _y, bytes _commitment, bytes _proof, uint256 _partOffset)",
      "function loadKeccak256PreimagePart(uint256 _partOffset, bytes _preimage)",
      "function loadLocalData(uint256 _ident, bytes32 _localContext, bytes32 _word, uint256 _size, uint256 _partOffset) returns (bytes32 key_)",
      "function loadPrecompilePreimagePart(uint256 _partOffset, address _precompile, uint64 _requiredGas, bytes _input)",
      "function loadSha256PreimagePart(uint256 _partOffset, bytes _preimage)",
      "function minProposalSize() view returns (uint256 minProposalSize_)",
      "function preimageLengths(bytes32) view returns (uint256)",
      "function preimagePartOk(bytes32, uint256) view returns (bool)",
      "function preimageParts(bytes32, uint256) view returns (bytes32)",
      "function proposalBlocks(address, uint256, uint256) view returns (uint64)",
      "function proposalBlocksLen(address _claimant, uint256 _uuid) view returns (uint256 len_)",
      "function proposalBonds(address, uint256) view returns (uint256)",
      "function proposalBranches(address, uint256, uint256) view returns (bytes32)",
      "function proposalCount() view returns (uint256 count_)",
      "function proposalMetadata(address, uint256) view returns (bytes32)",
      "function proposalParts(address, uint256) view returns (bytes32)",
      "function proposals(uint256) view returns (address claimant, uint256 uuid)",
      "function readPreimage(bytes32 _key, uint256 _offset) view returns (bytes32 dat_, uint256 datLen_)",
      "function squeezeLPP(address _claimant, uint256 _uuid, tuple(uint64[25] state) _stateMatrix, tuple(bytes input, uint256 index, bytes32 stateCommitment) _preState, bytes32[] _preStateProof, tuple(bytes input, uint256 index, bytes32 stateCommitment) _postState, bytes32[] _postStateProof)",
      "function version() view returns (string)",
      "function zeroHashes(uint256) view returns (bytes32)"
    ],
    "0x7b5AFdA01ef32d95858A22E5fc0a6821A12CDAe5": [
      "constructor()",
      "event PushConfig(uint256 chainid, bytes configs)",
      "event SwitchSeq(uint256 chainid, address wallet, address manager)",
      "function CONFIG_OWNER_KEY() view returns (string)",
      "function addressmgr() view returns (address)",
      "function messenger() view returns (address)",
      "function pushConfig(uint256 _chainId, bytes _configs) payable",
      "function switchSequencer(uint256 _chainId, address wallet, address manager) payable"
    ],
    "0x7f6B0b7589febc40419a8646EFf9801b87397063": [
      "constructor(address _addressManager, uint256 _initialDiscount)",
      "function CONFIG_OWNER_KEY() view returns (string)",
      "function discount() view returns (uint256)",
      "function getDiscount() view returns (uint256)",
      "function getMinL2Gas() view returns (uint256)",
      "function isXDomainSenderAllowed(address _sender) view returns (bool)",
      "function libAddressManager() view returns (address)",
      "function minL2Gas() view returns (uint256)",
      "function processL2SeqGas(address sender, uint256 _chainId) payable",
      "function resolve(string _name) view returns (address)",
      "function setAllowAllXDomainSenders(bool _allowAllXDomainSenders)",
      "function setDiscount(uint256 _discount)",
      "function setMinL2Gas(uint256 _minL2Gas)",
      "function setWhitelistedXDomainSender(address _sender, bool _isWhitelisted)",
      "function xDomainWL(address) view returns (bool)"
    ],
    "0x8bF439ef7167023F009E24b21719Ca5f768Ecb36": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event MessageAllowed(bytes32 indexed _xDomainCalldataHash)",
      "event MessageBlocked(bytes32 indexed _xDomainCalldataHash)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit, uint256 chainId)",
      "event Unpaused(address account)",
      "function allowMessage(bytes32 _xDomainCalldataHash)",
      "function blockMessage(bytes32 _xDomainCalldataHash)",
      "function blockedMessages(bytes32) view returns (bool)",
      "function initialize(address _libAddressManager)",
      "function libAddressManager() view returns (address)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function relayMessage(address _target, address _sender, bytes _message, uint256 _messageNonce, tuple(bytes32 stateRoot, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) stateRootBatchHeader, tuple(uint256 index, bytes32[] siblings) stateRootProof, bytes stateTrieWitness, bytes storageTrieWitness) _proof)",
      "function relayMessageViaChainId(uint256 _chainId, address _target, address _sender, bytes _message, uint256 _messageNonce, tuple(bytes32 stateRoot, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) stateRootBatchHeader, tuple(uint256 index, bytes32[] siblings) stateRootProof, bytes stateTrieWitness, bytes storageTrieWitness) _proof)",
      "function relayedMessages(bytes32) view returns (bool)",
      "function renounceOwnership()",
      "function replayMessage(address _target, address _sender, bytes _message, uint256 _queueIndex, uint32 _oldGasLimit, uint32 _newGasLimit) payable",
      "function replayMessageViaChainId(uint256 _chainId, address _target, address _sender, bytes _message, uint256 _queueIndex, uint32 _oldGasLimit, uint32 _newGasLimit) payable",
      "function resolve(string _name) view returns (address)",
      "function sendMessage(address _target, bytes _message, uint32 _gasLimit) payable",
      "function sendMessageViaChainId(uint256 _chainId, address _target, bytes _message, uint32 _gasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "0x8FbB8D00f7621B68F219B0B18738F07aF513D5C8": [
      "constructor(address initialOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x918778e825747a892b17C66fe7D24C618262867d": [
      "event AddressSet(string indexed _name, address _newAddress, address _oldAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getAddress(string _name) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function transferOwnership(address newOwner)"
    ],
    "0x9E32b13ce7f2E80A01932B42553652E053D6ed8e": [
      "constructor(address[] minters, uint256 maxSupply)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function addMinter(address minter)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(address target, uint256 amount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function isOwner() view returns (bool)",
      "function mint(address target, uint256 amount)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function removeMinter(address minter)",
      "function renounceOwnership()",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function transferOwnership(address newOwner)"
    ],
    "0xa0cfE8Af2AB5C9232714647702DbACf862EA4798": [
      "constructor()",
      "event ERC20ChainID(uint256 _chainid)",
      "event ERC20DepositInitiated(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _amount, bytes _data)",
      "event ERC20WithdrawalFinalized(address indexed _l1Token, address indexed _l2Token, address indexed _from, address _to, uint256 _amount, bytes _data)",
      "event ETHDepositInitiated(address indexed _from, address indexed _to, uint256 _amount, bytes _data, uint256 chainId)",
      "event ETHWithdrawalFinalized(address indexed _from, address indexed _to, uint256 _amount, bytes _data, uint256 chainId)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function addressmgr() view returns (address)",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _l2Gas, bytes _data)",
      "function depositERC20ByChainId(uint256 _chainid, address _l1Token, address _l2Token, uint256 _amount, uint32 _l2Gas, bytes _data) payable",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _l2Gas, bytes _data)",
      "function depositERC20ToByChainId(uint256 _chainid, address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _l2Gas, bytes _data) payable",
      "function depositETH(uint32 _l2Gas, bytes _data) payable",
      "function depositETHByChainId(uint256 _chainId, uint32 _l2Gas, bytes _data) payable",
      "function depositETHTo(address _to, uint32 _l2Gas, bytes _data) payable",
      "function depositETHToByChainId(uint256 _chainId, address _to, uint32 _l2Gas, bytes _data) payable",
      "function deposits(address, uint256, address) view returns (uint256)",
      "function donateETH() payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _data)",
      "function finalizeERC20WithdrawalByChainId(uint256 _chainid, address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _data)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _data)",
      "function finalizeETHWithdrawalByChainId(uint256 _chainid, address _from, address _to, uint256 _amount, bytes _data)",
      "function finalizeMetisWithdrawalByChainId(uint256 _chainid, address _from, address _to, uint256 _amount, bytes _data)",
      "function initialize(address _l1messenger, address _l2TokenBridge, address _metis, address _addressmgr)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function metis() view returns (address)"
    ],
    "0xa2033fbb6213B2233a6998391ccc8E070BcC1B51": [
      "constructor(uint256 _delay, address _metis)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Deposit(address indexed user, uint256 amount)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Unlock(address indexed user, address indexed recipient, uint256 amount)",
      "event Withdrawal(address indexed user, uint256 amount)",
      "function allowance(address, address) view returns (uint256)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function balanceOf(address) view returns (uint256)",
      "function config() view returns (address)",
      "function decimals() view returns (uint8)",
      "function delay() view returns (uint256)",
      "function deposit(uint256 _amount)",
      "function hold(address _guy, uint256 _amount)",
      "function initialize(address _owner, address _config)",
      "function metisToken() view returns (address)",
      "function name() pure returns (string)",
      "function owner() view returns (address)",
      "function recover(uint256 _amount)",
      "function renounceOwnership()",
      "function symbol() pure returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function unlock(address _guy, uint256 _amount)",
      "function version() view returns (string)",
      "function withdraw(uint256 _amount)",
      "function withdraw(address _guy, uint256 _amount)",
      "function withdrawals(address, address) view returns (uint256 amount, uint256 timestamp)"
    ],
    "0xA2FaAAC9120c1Ff75814F0c6DdB119496a12eEA6": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0xA91Ea6F5d1EDA8e6686639d6C88b309cF35D2E57": [
      "constructor(address _libAddressManager, string _owner)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function deleteElementsAfterInclusive(uint256 _index, bytes27 _globalMetadata)",
      "function deleteElementsAfterInclusive(uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index)",
      "function deleteElementsAfterInclusiveByChainId(uint256 _chainId, uint256 _index, bytes27 _globalMetadata)",
      "function get(uint256 _index) view returns (bytes32)",
      "function getByChainId(uint256 _chainId, uint256 _index) view returns (bytes32)",
      "function getGlobalMetadata() view returns (bytes27)",
      "function getGlobalMetadataByChainId(uint256 _chainId) view returns (bytes27)",
      "function length() view returns (uint256)",
      "function lengthByChainId(uint256 _chainId) view returns (uint256)",
      "function libAddressManager() view returns (address)",
      "function owner() view returns (string)",
      "function push(bytes32 _object, bytes27 _globalMetadata)",
      "function push(bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object)",
      "function pushByChainId(uint256 _chainId, bytes32 _object, bytes27 _globalMetadata)",
      "function resolve(string _name) view returns (address)",
      "function setByChainId(uint256 _chainId, uint256 _index, bytes32 _object)",
      "function setGlobalMetadata(bytes27 _globalMetadata)",
      "function setGlobalMetadataByChainId(uint256 _chainId, bytes27 _globalMetadata)"
    ],
    "0xAFD640204D73B02C3521eA8ea3771182527Ff057": [
      "constructor(address _oracle)",
      "function oracle() view returns (address oracle_)",
      "function step(bytes _stateData, bytes _proof, bytes32 _localContext) returns (bytes32)",
      "function version() view returns (string)"
    ],
    "0xb864eEca2a047058Eb1e28e43FEAEBE8F38843B3": [
      "constructor(address _metis)",
      "error AlreadyDisputed(bytes32 uuid)",
      "error GameAlreadyExists(bytes32 uuid)",
      "error NoDisputeGameRequests()",
      "error NoImplementation(uint32 gameType)",
      "event DisputeGameCreated(address indexed disputeProxy, uint32 indexed gameType, bytes32 indexed rootClaim)",
      "event DisputeGameRequested(address indexed requestor, uint32 indexed gameType, uint256 bond, bytes extraData)",
      "event ImplementationSet(address indexed impl, uint32 indexed gameType)",
      "event InitBondUpdated(uint32 indexed gameType, uint256 indexed newBond)",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function GAME_CREATOR_ROLE() view returns (bytes32)",
      "function METIS() view returns (address)",
      "function create(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) returns (address proxy_)",
      "function dispute(uint32 _gameType, bytes _extraData)",
      "function disputeGameCreationRequests(bytes32) view returns (uint32 gameType, address sender, uint256 bond, bytes32 l1Head)",
      "function findLatestGames(uint32 _gameType, uint256 _start, uint256 _n) view returns (tuple(uint256 index, bytes32 metadata, uint64 timestamp, bytes32 rootClaim, bytes extraData)[] games_)",
      "function gameAtIndex(uint256 _index) view returns (uint32 gameType_, uint64 timestamp_, address proxy_)",
      "function gameCount() view returns (uint256 gameCount_)",
      "function gameImpls(uint32) view returns (address)",
      "function games(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) view returns (address proxy_, uint64 timestamp_)",
      "function getGameUUID(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) pure returns (bytes32 uuid_)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initBonds(uint32) view returns (uint256)",
      "function initialize(address _owner)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setImplementation(uint32 _gameType, address _impl)",
      "function setInitBond(uint32 _gameType, uint256 _initBond)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function version() view returns (string)"
    ],
    "0xC878771A4ff7466B7be8b59FB8766719AEa8d562": [
      "constructor()",
      "event AppendBatchElement(uint256 _chainId, uint256 _batchIndex, uint40 _shouldStartAtElement, uint24 _totalElementsToAppend, uint256 _txBatchSize, uint256 _txBatchTime, bytes32 _root)",
      "event SetBatchTxData(address _sender, uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, uint256 _stakeAmount, bool _verified, bool _sequencer)",
      "event VerifierStake(address _sender, uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, uint256 _amount)",
      "function CONFIG_OWNER_KEY() view returns (string)",
      "function TXDATA_SUBMIT_TIMEOUT() view returns (uint256)",
      "function appendSequencerBatchByChainId()",
      "function checkBatchTxHash(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, bytes _data) view returns (bytes32 txHash, bool verified)",
      "function disableWhiteList()",
      "function getBatchTxData(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber) view returns (bytes txData, bool verified)",
      "function getStakeBaseCost() view returns (uint256)",
      "function getStakeCostByBatch(uint256 _chainId, uint256 _batchIndex) view returns (uint256)",
      "function getStakeSeqSeconds() view returns (uint256)",
      "function getStakeUnitCost() view returns (uint256)",
      "function getTxBatchSize() view returns (uint256)",
      "function getTxDataSliceCount() view returns (uint256)",
      "function getTxDataSliceSize() view returns (uint256)",
      "function isWhiteListed(address _verifier) view returns (bool)",
      "function libAddressManager() view returns (address)",
      "function resolve(string _name) view returns (address)",
      "function setBatchTxDataForStake(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, bytes _data, uint256 _leafIndex, uint256 _totalLeaves, bytes32[] _proof)",
      "function setBatchTxDataForVerifier(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, bytes _data)",
      "function setBatchTxDataVerified(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber, bool _verified)",
      "function setStakeBaseCost(uint256 _stakeBaseCost)",
      "function setStakeSeqSeconds(uint256 _seconds)",
      "function setStakeUnitCost(uint256 _stakeUnitCost)",
      "function setTxBatchSize(uint256 _size)",
      "function setTxDataSliceCount(uint256 _count)",
      "function setTxDataSliceSize(uint256 _size)",
      "function setWhiteList(address _verifier, bool _allowed)",
      "function stakeBaseCost() view returns (uint256)",
      "function stakeSeqSeconds() view returns (uint256)",
      "function stakeUnitCost() view returns (uint256)",
      "function txBatchSize() view returns (uint256)",
      "function txDataSliceCount() view returns (uint256)",
      "function txDataSliceSize() view returns (uint256)",
      "function verifierStake(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber) payable",
      "function whitelist(address) view returns (bool)",
      "function withdrawStake(uint256 _chainId, uint256 _batchIndex, uint256 _blockNumber)"
    ],
    "0xD54c868362C2098E0E46F12E7D924C6A332952Dd": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xD8f38c831E5032d23065Eaaee8c0620e17c04D60": [
      "error NoRewardRecipient()",
      "error NoSuchSeq()",
      "error NotSeqOwner()",
      "error NotSeqSigner()",
      "error NotWhitelisted()",
      "error NullAddress()",
      "error OwnedSequencer()",
      "error SeqNotActive()",
      "error SignerExisted()",
      "event DistributeReward(uint256 indexed batchId, uint256 startEpoch, uint256 endEpoch, uint256 amount, uint256 rpb)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event RewardUpdate(uint256 newReward, uint256 oldReward)",
      "event SequencerOwnerChanged(uint256 _seqId, address _owner)",
      "event SequencerRewardRecipientChanged(uint256 _seqId, address _recipient)",
      "event SetSignerUpdateThrottle(uint256 _n)",
      "event SetWhitelist(address _user, bool _yes)",
      "event Unpaused(address account)",
      "event UpdateMpc(address _newMpc)",
      "event WithrawDelayTimeChange(uint256 _cur, uint256 _prev)",
      "function BLOCK_REWARD() view returns (uint256)",
      "function WITHDRAWAL_DELAY() view returns (uint256)",
      "function batchSubmitRewards(uint256 _batchId, uint256 _startEpoch, uint256 _endEpoch, address[] _seqs, uint256[] _blocks)",
      "function curBatchState() view returns (uint256 id, uint256 number, uint256 startEpoch, uint256 endEpoch)",
      "function currentBatch() view returns (uint256)",
      "function escrow() view returns (address)",
      "function exitDelayPeriod() view returns (uint256)",
      "function forceUnlock(uint256 _seqId, uint32 _l2Gas) payable",
      "function initialize(address _escrow)",
      "function lockFor(address _signer, uint256 _amount, bytes _signerPubkey)",
      "function lockWithRewardRecipient(address _signer, address _rewardRecipient, uint256 _amount, bytes _signerPubkey)",
      "function mpcAddress() view returns (address)",
      "function owner() view returns (address)",
      "function paused() view returns (bool)",
      "function relock(uint256 _seqId, uint256 _amount, bool _lockReward)",
      "function renounceOwnership()",
      "function rewardPerBlock() view returns (uint256)",
      "function seqOwners(address owner) view returns (uint256 seqId)",
      "function seqSigners(address signer) view returns (uint256 seqId)",
      "function seqStatuses(uint8 status) view returns (uint256 count)",
      "function sequencers(uint256 seqId) view returns (uint256 amount, uint256 reward, uint256 activationBatch, uint256 updatedBatch, uint256 deactivationBatch, uint256 deactivationTime, uint256 unlockClaimTime, uint256 nonce, address owner, address signer, bytes pubkey, address rewardRecipient, uint8 status)",
      "function setPause(bool _yes)",
      "function setSequencerOwner(uint256 _seqId, address _owner)",
      "function setSequencerRewardRecipient(uint256 _seqId, address _recipient)",
      "function setSignerUpdateThrottle(uint256 _n)",
      "function setWhitelist(address _addr, bool _yes)",
      "function signerUpdateThrottle() view returns (uint256)",
      "function totalSequencers() view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function unlock(uint256 _seqId, uint32 _l2Gas) payable",
      "function unlockClaim(uint256 _seqId, uint32 _l2Gas) payable",
      "function updateBlockReward(uint256 newReward)",
      "function updateMpc(address _newMpc)",
      "function updateSigner(uint256 _seqId, bytes _signerPubkey)",
      "function updateWithdrawDelayTimeValue(uint256 _time)",
      "function whitelist(address owner) view returns (bool yes)",
      "function withdraw(uint256 _seqId, uint256 _amount)",
      "function withdrawRewards(uint256 _seqId, uint32 _l2Gas) payable"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xe6E2DFf51b039C8EFf0b21880E2Fb008AF10B365": [
      "constructor(address _libAddressManager, uint256 _fraudProofWindow, uint256 _sequencerPublishWindow)",
      "error ClaimAlreadyResolved()",
      "error UnregisteredGame()",
      "event StateBatchAppended(uint256 _chainId, uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData)",
      "event StateBatchDeleted(uint256 _chainId, uint256 indexed _batchIndex, bytes32 _batchRoot)",
      "function DEFAULT_CHAINID() view returns (uint256)",
      "function DISPUTE_GAME_FACTORY_NAME() view returns (string)",
      "function FRAUD_PROOF_WINDOW() view returns (uint256)",
      "function SEQUENCER_PUBLISH_WINDOW() view returns (uint256)",
      "function appendStateBatch(bytes32[] _batch, uint256 _shouldStartAtElement, bytes32 _lastBatchBlockHash, uint256 _lastBatchBlockNumber)",
      "function appendStateBatchByChainId(uint256 _chainId, bytes32[] _batch, uint256 _shouldStartAtElement, string _proposer, bytes32 _lastBatchBlockHash, uint256 _lastBatchBlockNumber)",
      "function batchLastL2BlockNumbers(bytes32) view returns (uint256)",
      "function batchTimes(uint256, uint256) view returns (bytes16)",
      "function batches() view returns (address)",
      "function deleteStateBatch(tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader)",
      "function deleteStateBatchByChainId(uint256 _chainId, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader)",
      "function disputedBatches(bytes32) view returns (bool)",
      "function findEarliestDisputableBatch(uint256 _chainId) view returns (tuple(bytes32 batchHeaderHash, uint256 lastL2BlockNumber) _lastFinalized, tuple(bytes32 batchHeaderHash, uint256 lastL2BlockNumber) _earliestDisputable)",
      "function getLastSequencerTimestamp() view returns (uint256 _lastSequencerTimestamp)",
      "function getLastSequencerTimestampByChainId(uint256 _chainId) view returns (uint256 _lastSequencerTimestamp)",
      "function getTotalBatches() view returns (uint256 _totalBatches)",
      "function getTotalBatchesByChainId(uint256 _chainId) view returns (uint256 _totalBatches)",
      "function getTotalElements() view returns (uint256 _totalElements)",
      "function getTotalElementsByChainId(uint256 _chainId) view returns (uint256 _totalElements)",
      "function insideFraudProofWindow(tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader) view returns (bool _inside)",
      "function insideFraudProofWindowByChainId(uint256, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader) view returns (bool _inside)",
      "function isDisputedBatch(bytes32 stateHeaderHash) view returns (bool)",
      "function libAddressManager() view returns (address)",
      "function resolve(string _name) view returns (address)",
      "function saveDisputedBatch(bytes32 stateHeaderHash)",
      "function setFraudProofWindow(uint256 window)",
      "function verifyStateCommitment(bytes32 _element, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader, tuple(uint256 index, bytes32[] siblings) _proof) view returns (bool)",
      "function verifyStateCommitmentByChainId(uint256 _chainId, bytes32 _element, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) _batchHeader, tuple(uint256 index, bytes32[] siblings) _proof) view returns (bool)"
    ],
    "0xe70DD4dE81D282B3fa92A6700FEE8339d2d9b5cb": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0xf3d58D1794f2634d6649a978f2dc093898FEEBc0": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "0xfA947f70c3509d5b70A606e871aE0C85397D0738": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ]
  },
  "usedTemplates": {
    "global/ProxyAdmin": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "metis/BondManager": "0xc15ea5bd900a03d035d09672927e12bca9de34dc257c8754a23c4b30be8757ea",
    "metis/CanonicalTransactionChain": "0xbe89d4af7610966b7bde89c028905d0727775c8a35c88299b60e9d8da3f899b3",
    "metis/ChainStorageContainer-CTC-batches": "0x9204ffa48447039c6d4c4ce6552397c95ae65ce02590f76b05207a2775fe4777",
    "metis/ChainStorageContainer-CTC-queue": "0xa1e630674758f9d275bdb1dfb9fcce997af7df07ed0598a876ac488bbe8a32e1",
    "metis/ChainStorageContainer-SCC-batches": "0xcd021c2fba2b365c63f7d95323b7c2d6104ef46bb56933bd22cfdfab848cef1d",
    "metis/DelayedWMetis": "0x9cb0edfecd174d91d81f651ad52d7c288ec44b877a0e2f8ad0ff293a553bfe30",
    "metis/DisputeGameFactory_Metis": "0xcdbcc4615d43ff98023bd06e2e0baa3e022d7540474389a1aab75f0f5d409716",
    "metis/FaultDisputeGame": "0xe7cb199f3d900ff5908cd04e3c606d092392d7a08ab2b909cb532099674f15f3",
    "metis/L1CrossDomainMessenger": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "metis/L1StandardBridge": "0xc15ea5bd900a03d035d09672927e12bca9de34dc257c8754a23c4b30be8757ea",
    "metis/Lib_AddressManager": "0x8a7b8bafae04f9be8a5026a865b494737de12d4c845b772f1845b4905013f86f",
    "metis/LockingInfo": "0xc15ea5bd900a03d035d09672927e12bca9de34dc257c8754a23c4b30be8757ea",
    "metis/LockingPool": "0x62830e033d07ce22b140604342c80f9ee45e8e75f07f0be34e09bd2ff01454c0",
    "metis/MetisConfig": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "metis/METISToken": "0xe4c7c8a93327a313a78b8443c90b3cfe44501c5ddc41bab647f77de5ff00152f",
    "metis/MIPS": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "metis/MVM_CanonicalTransaction": "0xc15ea5bd900a03d035d09672927e12bca9de34dc257c8754a23c4b30be8757ea",
    "metis/MVM_DiscountOracle": "0xc15ea5bd900a03d035d09672927e12bca9de34dc257c8754a23c4b30be8757ea",
    "metis/MVM_L2ChainManagerOnL1": "0xc15ea5bd900a03d035d09672927e12bca9de34dc257c8754a23c4b30be8757ea",
    "metis/MVM_StateCommitmentChain": "0x8496d4b5edbf854305227b9e0e5b8c845600e4bad4d3bd9aa391933a57a5e82e",
    "metis/MVM_Verifier": "0xc15ea5bd900a03d035d09672927e12bca9de34dc257c8754a23c4b30be8757ea",
    "metis/PreimageOracle": "0x6c435c8491ea31b14ac576d12c5ae3988f849f8c365b3989e522aba5f84ca1ec"
  },
  "permissionsConfigHash": "0xb0889ffc37602a0d622bfd73d2e656edb8b893107ebbd7f95b1f059771a15126"
}
