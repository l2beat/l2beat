{
  "name": "amarok",
  "chain": "ethereum",
  "timestamp": 1754307650,
  "configHash": "0x03aeeefe5b09cde0800c4bd5fbdc0745aa4ba02a219065edb04fa1814f0c27c6",
  "entries": [
    {
      "address": "eth:0x01a0A7BaAAca31AFB5b770FeFD69CE4917D9c32e",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "MainnetSpokeConnector",
      "address": "eth:0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc",
      "type": "Contract",
      "sourceHashes": [
        "0xafd1330f5a43ba6b2a2db1315900ef6a75051e339fa9194fe9f671742c237a57"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "getLastCompletedSnapshotId",
        "lastSentBlock",
        "outboundRoot",
        "proposedTimestamp",
        "proposed",
        "rateLimitBlocks"
      ],
      "sinceTimestamp": 1701992807,
      "sinceBlock": 18737765,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x0000000000000000000000000000000000000000",
        "delay": 604800,
        "delayBlocks": 120,
        "disputeBlocks": 120,
        "DOMAIN": 6648936,
        "FINALIZED_HASH": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "getLastCompletedSnapshotId": 974615,
        "getSnapshotDuration": 1800,
        "home": "eth:0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc",
        "lastSentBlock": 20634538,
        "localDomain": 6648936,
        "MERKLE": "eth:0x28A9e7bbed277092E2431F186E1aF898962d4E92",
        "minDisputeBlocks": 60,
        "MIRROR_DOMAIN": 6648936,
        "mirrorConnector": "eth:0x0000000000000000000000000000000000000000",
        "optimisticMode": true,
        "outboundRoot": "0x1d081c71313036acf7f2890bbe530ff37a5e4490b7a7000b7de647955a0190c6",
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "paused": false,
        "PROCESS_GAS": 850000,
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedAggregateRootHash": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "proposedTimestamp": 0,
        "rateLimitBlocks": 0,
        "renounced": false,
        "RESERVE_GAS": 15000,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A",
        "watcherManager": "eth:0x79e6E0242405A66B2dd8B96DEd3b2F0216Fd417d"
      },
      "fieldMeta": {
        "optimisticMode": {
          "description": "When it's disabled, all roots must be passed via canonical rollup AMBs."
        }
      },
      "implementationNames": {
        "eth:0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc": "MainnetSpokeConnector"
      }
    },
    {
      "address": "eth:0x048a5EcC705C280b2248aefF88fd581AbbEB8587",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Relayer2",
      "address": "eth:0x0ae392879A228B2484D9B1F80A5D0B7080FE79C2",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x0e62f9fa1F9b3E49759Dc94494F5bC37a83d1FAD",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x151Ea574C62b505aEe2F89f33D8c152E28A956b0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x1660846ee9A3023034924FB02F85F632AEd66810",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OptimisticGovernor",
      "address": "eth:0x172fB6b07D6aB708dd67392a09e1c40d16dA0460",
      "type": "Contract",
      "template": "uma/OptimisticGovernor",
      "sourceHashes": [
        "0xcecd27c998c8fd83d7532693da2bdff346a1dbedbaab4744f21d2bcf1986e9de"
      ],
      "proxyType": "gnosis safe zodiac module",
      "description": "Optimistic Governance module allowing for proposals by anyone with a bond of 2 WETH. They become executable if not challenged within 3d. The rules for proposals can be read directly from the contract values.",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x172fB6b07D6aB708dd67392a09e1c40d16dA0460",
          "description": "set guard, avatar, target, delay, identifier, escalationManager, bond token and amount.",
          "role": ".owner",
          "via": [
            { "address": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
          "role": ".GnosisSafe_modules"
        }
      ],
      "sinceTimestamp": 1693752671,
      "sinceBlock": 18056674,
      "values": {
        "$immutable": false,
        "avatar": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "bondAmount": "2000000000000000000",
        "bondFmt": "2",
        "collateral": "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "delayFmt": "3d",
        "escalationManager": "eth:0x0000000000000000000000000000000000000000",
        "EXPLANATION_KEY": "0x6578706c616e6174696f6e",
        "finder": "eth:0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getGuard": "eth:0x0000000000000000000000000000000000000000",
        "getProposalBond": "2000000000000000000",
        "guard": "eth:0x0000000000000000000000000000000000000000",
        "identifier": "0x4153534552545f54525554480000000000000000000000000000000000000000",
        "liveness": 259200,
        "optimisticOracleV3": "eth:0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "PROPOSAL_HASH_KEY": "0x70726f706f73616c48617368",
        "rules": "I assert that this transaction proposal is valid according to the following rules: Proposals approved on Snapshot, as verified at https://snapshot.org/#/dao.connext.eth/, are valid as long as there is a minimum quorum of 1 and a minimum voting period of 24 hours and it does not appear that the Snapshot voting system is being exploited or is otherwise unavailable. The quorum and voting period are minimum requirements for a proposal to be valid. Quorum and voting period values set for a specific proposal in Snapshot should be used if they are more strict than the rules parameter. The explanation included with the on-chain proposal must be the unique IPFS identifier for the specific Snapshot proposal that was approved or a unique identifier for a proposal in an alternative voting system approved by DAO social consensus if Snapshot is being exploited or is otherwise unavailable.",
        "RULES_KEY": "0x72756c6573",
        "target": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "ZodiacModule_avatar": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "ZodiacModule_guard": "eth:0x0000000000000000000000000000000000000000",
        "ZodiacModule_modules": [],
        "ZodiacModule_target": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625"
      },
      "fieldMeta": {
        "rules": {
          "description": "string of rules that a proposer is accepting when posting a proposal with a bond."
        }
      },
      "implementationNames": {
        "eth:0x172fB6b07D6aB708dd67392a09e1c40d16dA0460": "OptimisticGovernor"
      },
      "usedTypes": [{ "typeCaster": "Undecimal", "arg": { "decimals": 18 } }]
    },
    {
      "address": "eth:0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x22831e4f21cE65b33EF45df0e212b5bEbF130E5a",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "BaseHubConnector",
      "address": "eth:0x23b7abe4cc664F24Eb68E80cFAdc572857799a94",
      "type": "Contract",
      "sourceHashes": [
        "0xe1e1cddf981135f49c5ed0fd4a3ec66db79e2bb91e3cfea59e69f5da6ab165df"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1706543447,
      "sinceBlock": 19113187,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x866E82a600A1414e583f7F13623F1aC5d58b0Afa",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasCap": 850000,
        "MIRROR_DOMAIN": 1650553709,
        "mirrorConnector": "eth:0x26aC458398aE1D58B7cE254c27eeA6ad850054a1",
        "OPTIMISM_PORTAL": "eth:0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
        "owner": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposedTimestamp": 1712618255,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0x23b7abe4cc664F24Eb68E80cFAdc572857799a94": "OptimismHubConnector"
      }
    },
    {
      "name": "xLayerZkHubConnector",
      "address": "eth:0x279fDA9AdDB854541f0bb86733d924e28c24c625",
      "type": "Contract",
      "sourceHashes": [
        "0x8481f131a096c9d34bb43b220f73a7469f938128e441e7f5009eef26a021b104"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1712599655,
      "sinceBlock": 19612628,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "delay": 604800,
        "DOMAIN": 6648936,
        "MIRROR_DOMAIN": 2020368761,
        "mirrorConnector": "eth:0xcF627F20CdCECd11AF54143B81B4C7ae1e8D6ea1",
        "owner": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposedTimestamp": 1714684247,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0x279fDA9AdDB854541f0bb86733d924e28c24c625": "PolygonZkHubConnector"
      }
    },
    {
      "name": "UpgradeBeaconProxy",
      "address": "eth:0x28A9e7bbed277092E2431F186E1aF898962d4E92",
      "type": "Contract",
      "sourceHashes": [
        "0x096b81df0c8f5335503eff3f349aa3136ee8cc6a502b3929f5112ae8b164ee0a"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1671623183,
      "sinceBlock": 16232868,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x28A9e7bbed277092E2431F186E1aF898962d4E92": "UpgradeBeaconProxy"
      }
    },
    {
      "address": "eth:0x2bAaA41d155ad8a4126184950B31F50A1513cE25",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF",
          "description": "withdraw fees.",
          "role": ".withdrawer"
        }
      ]
    },
    {
      "address": "eth:0x2eEd1440842990Fa61F0c396f981375Fa6004131",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x32D63da9F776891843C90787CEC54ADA23ABd4C2",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x334CE923420ff1aA4f272e92BF68013D092aE7B4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x33b2aD85f7DbA818e719FB52095dC768E0eD93ec",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x349f3839012DB2271e1BeC68F1668471D175Adb9",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x363605C0bdE9F1F5053aDA30618d95dbFc109Bf5",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x3d7dF98257E5CEe5f032fd06a0aA510F89A19A2e",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x3e11aa01A7eFdD428487ae75F5F4Fe0e5CeCeF06",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Registry",
      "address": "eth:0x3e532e6222afe9Bcf02DCB87216802c75D5113aE",
      "type": "Contract",
      "template": "uma/Registry",
      "sourceHashes": [
        "0xc24ab9710d3eb0d1c35d298ecefe98096f87a672be7bd8051f9e86902122612f"
      ],
      "proxyType": "immutable",
      "description": "Registry for contracts that are allowed to call `requestPrice()` in the UMA voting contracts (ie. request dispute resolution by the UMA DVM).",
      "sinceTimestamp": 1587763861,
      "sinceBlock": 9937650,
      "values": {
        "$immutable": true,
        "getAllRegisteredContracts": [
          "eth:0x592349F7DeDB2b75f9d4F194d4b7C16D82E507Dc",
          "eth:0x3f2D9eDd9702909Cf1F8C4237B7c4c5931F9C944",
          "eth:0x67DD35EaD67FcD184C8Ff6D0251DF4241F309ce1",
          "eth:0x39450EB4f7DE57f2a25EeE548Ff392532cFB8759",
          "eth:0xb56C5f1fB93b1Fbd7c473926c87B6B9c4d0e21d5",
          "eth:0x4E3168Ea1082f3dda1694646B5EACdeb572009F1",
          "eth:0xE1Ee8D4C5dBA1c221840c08f6Cf42154435B9D52",
          "eth:0xc0b19570370478EDE5F2e922c5D31FAf1D5f90EA",
          "eth:0xaBBee9fC7a882499162323EEB7BF6614193312e3",
          "eth:0x3605Ec11BA7bD208501cbb24cd890bC58D2dbA56",
          "eth:0x306B19502c833C1522Fbc36C9dd7531Eda35862B",
          "eth:0x1477C532A5054e0879EaFBD6004208c2065Bc21f",
          "eth:0x3a93E863cb3adc5910E6cea4d51f132E8666654F",
          "eth:0x516f595978D87B67401DaB7AfD8555c3d28a3Af4",
          "eth:0xeFA41F506EAA5c24666d4eE40888bA18FA60a1c7",
          "eth:0xC843538d70ee5d28C5A80A75bb94C28925bB1cf2",
          "eth:0xf32219331A03D99C98Adf96D43cc312353003531",
          "eth:0x4AA79c00240a2094Ff3fa6CF7c67f521f32D84a2",
          "eth:0xECFE06574B4A23A6476AD1f2568166BD1857E7c5",
          "eth:0xE4256C47a3b27a969F25de8BEf44eCA5F2552bD5",
          "eth:0x1c3f1A342c8D9591D9759220d114C685FD1cF6b8",
          "eth:0xEAA081a9fad4607CdF046fEA7D4BF3DfEf533282",
          "eth:0x2E918f0F18A69CFda3333C146A81e8100C85D8B0",
          "eth:0xfA3AA7EE08399A4cE0B4921c85AB7D645Ccac669",
          "eth:0xCA44D9e1eB0b27A0B56CdbebF4198DE5C2e6F7D0",
          "eth:0xa1005DB6516A097E562ad7506CF90ebb511f5604",
          "eth:0x45c4DBD73294c5d8DDF6E5F949BE4C505E6E9495",
          "eth:0xd6fc1A7327210b7Fe33Ef2514B44979719424A1d",
          "eth:0xda0943251079eB9f517668fdB372fC6AE299D898",
          "eth:0xf215778F3a5e7Ab6A832e71d87267Dd9a9aB0037",
          "eth:0xeAddB6AD65dcA45aC3bB32f88324897270DA0387",
          "eth:0x267D46e71764ABaa5a0dD45260f95D9c8d5b8195",
          "eth:0xd81028a6fbAAaf604316F330b20D24bFbFd14478",
          "eth:0x2862A798B3DeFc1C24b9c0d241BEaF044C45E585",
          "eth:0x94C7cab26c04B76D9Ab6277a0960781b90f74294",
          "eth:0x7c4090170aeADD54B1a0DbAC2C8D08719220A435",
          "eth:0xaD3cceebeFfCdC3576dE56811d0A6D164BF9A5A1",
          "eth:0xaB3Aa2768Ba6c5876B2552a6F9b70E54aa256175",
          "eth:0x48546bDD57D34Cb110f011Cdd1CcaaE75Ee17a70",
          "eth:0x182d5993106573A95a182AB3A77c892713fFDA56",
          "eth:0xD50fbace72352C2e15E0986b8Ad2599627B5c340",
          "eth:0x14a046c066266da6b8b8C4D2de4AfBEeCd53a262",
          "eth:0x496B179D5821d1a8B6C875677e3B89a9229AAB77",
          "eth:0x287a1bA52e030459F163f48b2Ae468a085003A07",
          "eth:0x5A7f8F8B0E912BBF8525bc3fb2ae46E70Db9516B",
          "eth:0x4F1424Cef6AcE40c0ae4fc64d74B734f1eAF153C",
          "eth:0xb33E3b8f5a172776730B0945206D6f75a2491307",
          "eth:0x4E2697b3deEc9Cac270Be97e254EC1a791588770",
          "eth:0xCdf99b9acE35e6414d802E97ed75ecfEe99A6f62",
          "eth:0xF796059731942aB6317E1bD5a8E98eF1f6D345b1",
          "eth:0xdf739f0219fA1A9288fc4c790304c8a3E928544C",
          "eth:0x9E929a85282fB0555C19Ed70942B952827Ca4B0B",
          "eth:0x384e239a2B225865558774b005C3d6eC29f8cE70",
          "eth:0x4E8d60A785c2636A63c5Bd47C7050d21266c8B43",
          "eth:0x6618Ff5a7dcea49F1AADA3BaFde3e87fe28D1303",
          "eth:0x964Be01cCe200e168c4ba960a764cBEBa8C01200",
          "eth:0x9bB1f39b6DB45BD087046385a43EAb7b60C52e7D",
          "eth:0x0388f65C185a7E7D857BB142185381d97a4bc747",
          "eth:0x161fa1ac2D93832C3F77c8b5879Cb4dC56d958a7",
          "eth:0x14A415Dd90B63c791C5dc544594605c8bC13Bc8D",
          "eth:0x1066E9D2E372d01A0F57bB6f231D34Ce4CEd228e",
          "eth:0xa24Ba528Be99024f7F7C227b55cBb265ecf0C078",
          "eth:0xd60139B287De1408f8388f5f57fC114Fb4B03328",
          "eth:0x8E51Ad4EeB19693751a9A3E36b8F098D891Ddc7f",
          "eth:0x144A3290C9Db859939F085E3EC9A5C321FC713aF",
          "eth:0xDB2E7F6655de37822c3020a8988351CC76caDAD5",
          "eth:0x6DA66C15823cFf681DaD6963fBD325a520362958",
          "eth:0xb82756f9853A148A2390a08AaD30BabCDc22f068",
          "eth:0xdF68acF496Db55f4A882a0371c489D739173fbEc",
          "eth:0x02bD62088A02668F29102B06E4925791Cd0fe4C5",
          "eth:0x45788a369f3083c02b942aEa02DBa25C466a773F",
          "eth:0x52f83ACA94904b3590669E3525d25ec75cDFf798",
          "eth:0xfDF90C4104c1dE34979235e6AE080528266a14a3",
          "eth:0xb40BA94747c59d076B3c189E3A031547492013da",
          "eth:0x46f5E363e69798a74c8422BFb9EDB63e3FB0f08a",
          "eth:0x8F92465991e1111F012F24A55AE2B0742F82dd7b",
          "eth:0x885c5fCB4D3B574A39f6750F962a3b52600ad728",
          "eth:0xd9af2d7E4cF86aAfBCf688a47Bd6b95Da9F7c838",
          "eth:0x0f4e2a456aAfc0068a0718E3107B88d2e8f2bfEF",
          "eth:0x312Ecf2854f73a3Ff616e3CDBC05E2Ff6A98d1f0",
          "eth:0x0Ee5Bb3dEAe8a44FbDeB269941f735793F8312Ef",
          "eth:0xCef85b352CCD7a446d94AEeeA02dD11622289954",
          "eth:0x56BaBEcb3dCaC063697fE38AB745c10181c56fA6",
          "eth:0x4F8d7bFFe8a2428A313b737001311Ad302a60dF4",
          "eth:0x10E018C01792705BefB7A757628C2947E38B9426",
          "eth:0xb2AEa0DE92Acff7e1146333F776db42E5d004128",
          "eth:0x0D1bA751BaDe6d7BB54CF4F05D2dC0A9f45605e5",
          "eth:0x0759883acF042A54fAb083378b0395F773A79767",
          "eth:0x32F0405834C4b50be53199628C45603Cea3A28aA",
          "eth:0xC9E6C106C65eDD67C83CC6e3bCd18bf8d2Ebf182",
          "eth:0x9c9Ee67586FaF80aFE147306FB858AF4Ec2212a4",
          "eth:0x12d21cb3E544de60Edb434A43ae7ef0715bee6cc",
          "eth:0xeCFe987D8C103a3EC2041774E4514ED0614fB42C",
          "eth:0x67F4deC415Ce95F8e66d63C926605d16f8d1b4e4",
          "eth:0x7FBE19088B011A9dE0e3a327D7C681028F065616",
          "eth:0xB1a3E5a8d642534840bFC50c6417F9566E716cc7",
          "eth:0xC73a3831B4A91Ab05f9171c0ef0BEc9545cDeCf5",
          "eth:0xbc044745F137D4693c2Aa823C760f855254faD42",
          "eth:0xF8eF02C10C473CA5E48b10c62ba4d46115dd2288",
          "eth:0x6F4DD6F2dD3aCb85e4903c3307e18A35D59537c0",
          "eth:0x5917C41a355D16D3950FE12299Ce6DFc1b54cD54",
          "eth:0x5fbD22d64A1bD27b77e0f9d6e8831510439e947A",
          "eth:0xe79dd3BDfb7868DedD00108FecaF12F94eB113B8",
          "eth:0xa1Da681EA4b03ab826D33B7a9774222Ae175322F",
          "eth:0x77482A8488a1cA8EdFAc67277b0eB99591106f05",
          "eth:0x73220345bD37C6897dA959AE6205254be5da4dD8",
          "eth:0xdd0acE85FcdC46d6430C7F24d56A0A80277AD8D2",
          "eth:0x7bc1476eeD521c083Ec84D2894a7B7f738c93b3b",
          "eth:0xCbbA8c0645ffb8aA6ec868f6F5858F2b0eAe34DA",
          "eth:0xeF4Db4AF6189aae295a680345e07E00d25ECBAAb",
          "eth:0x10D00f5788C39a2Bf248ADfa2863Fa55d83dcE36",
          "eth:0x8484381906425E3AFe30CDD48bFc4ed7CC1499D4",
          "eth:0xeE44aE0cff6E9E62F26add74784E573bD671F144",
          "eth:0xee7f8088d2e67C5b10EB94732F4bB6E26968AC82",
          "eth:0xb9942AA8983d41e53b68209BeA596A6004321E77",
          "eth:0x52B21a720D5eBeFc7EFA802c7DEAB7c08Eb10F39",
          "eth:0x772665dce7b347A867F42bcA93587b5400Ae2576",
          "eth:0x2dE7A5157693a895ae8E55b1e935e23451a77cB3",
          "eth:0xcA9C3d3fA9419C49465e04C49dD38C054fD94712",
          "eth:0xc07dE54Aa905A644Ab67F6E3b0d40150Bf825Ca3",
          "eth:0x4e3Decbb3645551B8A19f0eA1678079FCB33fB4c",
          "eth:0xbD1463F02f61676d53fd183C2B19282BFF93D099",
          "eth:0x767058F11800FBA6A682E73A6e79ec5eB74Fac8c",
          "eth:0x799c9518Ea434bBdA03d4C0EAa58d644b768d3aB",
          "eth:0x1C7a921808a8054C7ac2a3A3112823803eC97Ce4",
          "eth:0x60E5db98d156B68bC079795096D8599d12F2DcA6",
          "eth:0x91436EB8038ecc12c60EE79Dfe011EdBe0e6C777",
          "eth:0xC43767F4592DF265B4a9F1a398B97fF24F38C6A6",
          "eth:0xe7B0D6A9943bB8CD8cd323368450AD74474bB1b7",
          "eth:0xcA2531b9CD04daf0c9114D853e7A83D8528f20bD",
          "eth:0x7C62e5c39b7b296f4f2244e7EB51bea57ed26e4B",
          "eth:0xf35a80E4705C56Fd345E735387c3377baCcd8189",
          "eth:0x4060dBA72344DA74EDaEEAe51a71a57F7E96b6b4",
          "eth:0xeE3Afe347D5C74317041E2618C49534dAf887c24",
          "eth:0x8fE658AeB8d55fd1F3E157Ff8B316E232ffFF372",
          "eth:0x226726Ac52e6e948D1B7eA9168F9Ff2E27DbcbB5",
          "eth:0x34dF79AB1F3Cb70445834e71D725f83A6d3e03eb",
          "eth:0xbCA5D4BF2bE2f18a964334A378219CAaB192F0BF",
          "eth:0x89477Dd602f69c59Eb6B8e5C059F041a32ae4017",
          "eth:0xA0Ae6609447e57a42c51B50EAe921D701823FFAe",
          "eth:0xC75dd1b2A04d5aFF1E2779Ccc5624174a2c8cb7f",
          "eth:0x86838871562B82C071ec57F7CA50879532678F42",
          "eth:0xFEc7C6AA64fDD17f456028e0B411f5c3877ADa5e",
          "eth:0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
          "eth:0x50efaC9619225d7fB4703C5872da978849B6E7cC",
          "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "eth:0x9B40E25dDd4518F36c50ce8AEf53Ee527419D55d"
        ],
        "getMember": ["eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8"],
        "owner": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "implementationNames": {
        "eth:0x3e532e6222afe9Bcf02DCB87216802c75D5113aE": "Registry"
      }
    },
    {
      "name": "Finder",
      "address": "eth:0x40f941E48A552bF496B154Af6bf55725f18D77c3",
      "type": "Contract",
      "template": "uma/Finder",
      "sourceHashes": [
        "0x6b81a32a0de6b3e8ed743f089a6518d3791b0e4d373300269439642482338ddb"
      ],
      "proxyType": "immutable",
      "description": "Maps interface names to contract addresses (UMA protocol contracts).",
      "sinceTimestamp": 1578580941,
      "sinceBlock": 9247083,
      "values": {
        "$immutable": true,
        "isOwner": false,
        "namedAddresses": [
          {
            "name": "Oracle",
            "address": "eth:0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac"
          },
          {
            "name": "Registry",
            "address": "eth:0x3e532e6222afe9Bcf02DCB87216802c75D5113aE"
          },
          {
            "name": "FinancialContractsAdmin",
            "address": "eth:0x4E6CCB1dA3C7844887F9A5aF4e8450d9fd90317A"
          },
          {
            "name": "Store",
            "address": "eth:0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF"
          },
          {
            "name": "IdentifierWhitelist",
            "address": "eth:0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570"
          },
          {
            "name": "CollateralWhitelist",
            "address": "eth:0xdBF90434dF0B98219f87d112F37d74B1D90758c7"
          },
          {
            "name": "OptimisticOracle",
            "address": "eth:0xC43767F4592DF265B4a9F1a398B97fF24F38C6A6"
          },
          {
            "name": "SkinnyOptimisticOracle",
            "address": "eth:0xeE3Afe347D5C74317041E2618C49534dAf887c24"
          },
          {
            "name": "OptimisticOracleV2",
            "address": "eth:0xA0Ae6609447e57a42c51B50EAe921D701823FFAe"
          },
          {
            "name": "OptimisticAsserter",
            "address": "eth:0x0000000000000000000000000000000000000000"
          },
          {
            "name": "OptimisticOracleV3",
            "address": "eth:0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE"
          }
        ],
        "owner": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "implementationNames": {
        "eth:0x40f941E48A552bF496B154Af6bf55725f18D77c3": "Finder"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "0x4f7261636c650000000000000000000000000000000000000000000000000000": "Oracle",
            "0x5265676973747279000000000000000000000000000000000000000000000000": "Registry",
            "0x46696e616e6369616c436f6e74726163747341646d696e000000000000000000": "FinancialContractsAdmin",
            "0x53746f7265000000000000000000000000000000000000000000000000000000": "Store",
            "0x4964656e74696669657257686974656c69737400000000000000000000000000": "IdentifierWhitelist",
            "0x436f6c6c61746572616c57686974656c69737400000000000000000000000000": "CollateralWhitelist",
            "0x4f7074696d69737469634f7261636c6500000000000000000000000000000000": "OptimisticOracle",
            "0x536b696e6e794f7074696d69737469634f7261636c6500000000000000000000": "SkinnyOptimisticOracle",
            "0x4f7074696d69737469634f7261636c6556320000000000000000000000000000": "OptimisticOracleV2",
            "0x4f7074696d697374696341737365727465720000000000000000000000000000": "OptimisticAsserter",
            "0x4f7074696d69737469634f7261636c6556330000000000000000000000000000": "OptimisticOracleV3"
          }
        }
      ]
    },
    {
      "name": "Relayer3",
      "address": "eth:0x43100A190C3FeAE37Cb1f5d880e8fa8d81BE5CB9",
      "type": "Contract",
      "template": "amarok/Relayer",
      "sourceHashes": [
        "0x71fef919ee98513b92f3201b728bedde3148dcf73156bc42ab0fb2273a0ddd50"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1636540506,
      "sinceBlock": 13588014,
      "values": {
        "$immutable": true,
        "ETH": "eth:0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
        "gelato": "eth:0x3CACa7b48D0573D793d3b0279b5F0029180E83b6",
        "paymentToken": "eth:0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
      },
      "implementationNames": {
        "eth:0x43100A190C3FeAE37Cb1f5d880e8fa8d81BE5CB9": "Relay"
      }
    },
    {
      "name": "Relayer8",
      "address": "eth:0x43728A95386D64384C76Afd416Dcc8118869BA6c",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x48fda6a16dEe5954bb0989b5B581d0623b48F06A",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x49a9E7ec76Bc8fDF658d09557305170d9F01D2fA",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Connext Multisig",
      "address": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x172fB6b07D6aB708dd67392a09e1c40d16dA0460",
          "description": "set guard, avatar, target, delay, identifier, escalationManager, bond token and amount.",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1671651491,
      "sinceBlock": 16235215,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0xdFa28361aC40679cC5D8EFa74c0421961397f2Eb",
          "eth:0x3e11aa01A7eFdD428487ae75F5F4Fe0e5CeCeF06",
          "eth:0x334CE923420ff1aA4f272e92BF68013D092aE7B4",
          "eth:0x8D09e20b835009E5320cC11E6a6F00aF451aD669",
          "eth:0x7AE8b0D6353F0931EB9FaC0A3562fA9e4C6Ff933",
          "eth:0x6B44Dba00e92DD035976607CBF62bf1CC6320EC5",
          "eth:0xBE2Ac45e75c14e9EEf9712a94Dce355f0151f5B1",
          "eth:0x2eEd1440842990Fa61F0c396f981375Fa6004131",
          "eth:0xDbDcFbA39D6ace2DaC9Cf5E8fc0Fe80a074FD81b"
        ],
        "$threshold": 7,
        "domainSeparator": "0x60b1292375dabe167590dda781ba4f2d4f046f849a3b9cbcd167e98c3cfd098a",
        "getChainId": 1,
        "GnosisSafe_modules": [
          "eth:0x172fB6b07D6aB708dd67392a09e1c40d16dA0460"
        ],
        "multisigThreshold": "7 of 9 (78%)",
        "nonce": 81,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "address": "eth:0x4fFA5968857a6C8242E4A6Ded2418155D33e82E7",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ProposerV2",
      "address": "eth:0x50efaC9619225d7fB4703C5872da978849B6E7cC",
      "type": "Contract",
      "template": "uma/ProposerV2",
      "sourceHashes": [
        "0x28c93f7b68e31548857633c6cb61284d9d2860cc0fbbcaaede8f631d364d66a4"
      ],
      "proxyType": "immutable",
      "description": "Token governance contract allowing anyone to create a UMA governance proposal for a bond of 5,000 UMA tokens.",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "description": "propose governance actions.",
          "role": ".proposer"
        }
      ],
      "ignoreInWatchMode": ["bond", "getCurrentTime"],
      "sinceTimestamp": 1677231527,
      "sinceBlock": 16697363,
      "values": {
        "$immutable": true,
        "bond": "5000000000000000000000",
        "bondFmt": "5,000",
        "finder": "eth:0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getCurrentTime": 1754307635,
        "governor": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "owner": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "token": "eth:0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828"
      },
      "implementationNames": {
        "eth:0x50efaC9619225d7fB4703C5872da978849B6E7cC": "ProposerV2"
      },
      "usedTypes": [{ "typeCaster": "Undecimal", "arg": { "decimals": 18 } }],
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "RootManager",
      "address": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A",
      "type": "Contract",
      "sourceHashes": [
        "0x2ca55720c3cf2b2da110bcd8d47329f5a7924e3de8b3324c8b55b45f99eb94fd"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "domains",
        "domainsHash",
        "lastSavedAggregateRootTimestamp",
        "getPendingInboundRootsCount",
        "pendingInboundRoots",
        "proposedTimestamp",
        "proposed"
      ],
      "sinceTimestamp": 1701992495,
      "sinceBlock": 18737740,
      "values": {
        "$immutable": true,
        "connectors": [
          "eth:0x83096c7455f24E593aaC9A7c73f849d36d3EEb82",
          "eth:0xae6B9cDE6191b710F5A18D82f751Ba52B78a99DA",
          "eth:0xF1c78967584D5E0ffF66dA103b8eb06c82EC020d",
          "eth:0x56Ab287e5c33Ee70158c951f34818bd095446255",
          "eth:0x5c2149869146DeA55cDD1CF2DD828e4e1548bb2A",
          "eth:0xE8cF9EbB1cFB137c692a0a4E470E257B9417d116",
          "eth:0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc",
          "eth:0xf5a3372ed529FCD0690b6013EAaE04170ec0626b",
          "eth:0x9Ba7D2Ab079Bd1924859e2fECDAD1bEBe5B119Fa",
          "eth:0x5B0E1a507E786f0a7c11C972ad5F4dd254661e24",
          "eth:0x279fDA9AdDB854541f0bb86733d924e28c24c625",
          "eth:0x7ed49D0a13255802A281C08688563bd8D5f726b1",
          "eth:0x7b2bE683266909A6a4068e743083dd40621d663E",
          "eth:0x23b7abe4cc664F24Eb68E80cFAdc572857799a94"
        ],
        "connectorsHash": "0xe813f3a6a50b9d0b90ac54107ca8ab16dd7faba907e4de56210c710200c60755",
        "delay": 604800,
        "delayBlocks": 120,
        "DEQUEUE_MAX": 100,
        "disputeBlocks": 120,
        "domains": [
          1634886255, 6450786, 6778479, 1818848877, 1869640809, 1886350457,
          6648936, 1635148152, 1835365481, 1835101812, 2020368761, 1887071085,
          1836016741, 1650553709
        ],
        "domainsHash": "0xeb25b8116811d5e497c0de826633f734187fd6a1bf1566bc72ef668fdbbc2352",
        "FINALIZED_HASH": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "getPendingInboundRootsCount": 0,
        "getSnapshotDuration": 1800,
        "hubDomain": 6648936,
        "lastSavedAggregateRootTimestamp": 1753245875,
        "MAX_DOMAINS": 500,
        "MERKLE": "eth:0x7D2596D7E44b0990611d390Fbb0Bd24e64845694",
        "minDisputeBlocks": 60,
        "optimisticMode": true,
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "paused": false,
        "pendingInboundRoots": { "first": 1238, "last": 1237 },
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedAggregateRootHash": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "proposedTimestamp": 0,
        "renounced": false,
        "watcherManager": "eth:0x79e6E0242405A66B2dd8B96DEd3b2F0216Fd417d"
      },
      "fieldMeta": {
        "optimisticMode": {
          "description": "When it's disabled, all roots must be passed via canonical rollup AMBs."
        },
        "connectorsHash": {
          "severity": "LOW",
          "description": "Hash of all connectors' addresses. Changes when a connector is added or removed."
        },
        "watcherManager": {
          "severity": "HIGH",
          "description": "Contract maintaining a list of Watchers able to stop the bridge if fraud is detected.",
          "type": "PERMISSION"
        }
      },
      "implementationNames": {
        "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A": "RootManager"
      }
    },
    {
      "name": "Store",
      "address": "eth:0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF",
      "type": "Contract",
      "template": "uma/Store",
      "sourceHashes": [
        "0x6f43084dec3aeec07252527bcb44d7bfafac569030fc87e32d6a5661a0f3e0f1"
      ],
      "proxyType": "immutable",
      "description": "UMA protocol contract responsible for calculating and collecting regular and final fees for using the DVM.",
      "sinceTimestamp": 1587762539,
      "sinceBlock": 9937562,
      "values": {
        "$immutable": true,
        "fixedOracleFeePerSecondPerPfc": 0,
        "getMember": [
          "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "eth:0x2bAaA41d155ad8a4126184950B31F50A1513cE25"
        ],
        "owner": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "SECONDS_PER_WEEK": 604800,
        "timerAddress": "eth:0x0000000000000000000000000000000000000000",
        "weeklyDelayFeePerSecondPerPfc": 0,
        "withdrawer": "eth:0x2bAaA41d155ad8a4126184950B31F50A1513cE25"
      },
      "implementationNames": {
        "eth:0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF": "Store"
      }
    },
    {
      "name": "LineaHubConnector",
      "address": "eth:0x56Ab287e5c33Ee70158c951f34818bd095446255",
      "type": "Contract",
      "sourceHashes": [
        "0xa7941f612635ebe90bf4c5a4dbbb4a7aff8c388f20ac06c5f881670d8554004c"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1701993503,
      "sinceBlock": 18737822,
      "values": {
        "$immutable": true,
        "AMB": "eth:0xd19d4B5d358258f05D7B411E21A1460D11B0876F",
        "delay": 604800,
        "DOMAIN": 6648936,
        "MIRROR_DOMAIN": 1818848877,
        "mirrorConnector": "eth:0xA401e30E6b7Eb50e9355a4FA8F29118d28386E33",
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0x56Ab287e5c33Ee70158c951f34818bd095446255": "LineaHubConnector"
      }
    },
    {
      "address": "eth:0x56dD71fffD089EdAdbA8eCdaaDb94269713f8f4d",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x58507fed0Cb11723dFb6848c92C59Cf0BBEB9927",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x58edE8C66A15f23c61b8EadD1191FdaD904f7a87",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x5aA748326f03C651749E7998D88647e59Ee386Bc",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "MantleHubConnector",
      "address": "eth:0x5B0E1a507E786f0a7c11C972ad5F4dd254661e24",
      "type": "Contract",
      "sourceHashes": [
        "0x874db65420d6ae87b7f30ff1947bd1ee09a2498028cb98e58d43ad47ff6e936f"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1706543435,
      "sinceBlock": 19113186,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x676A795fe6E43C17c668de16730c3F690FEB7120",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasCap": 850000,
        "MIRROR_DOMAIN": 1835101812,
        "mirrorConnector": "eth:0xfFe0821f1f088B16E6760EDb5d537eB2551A3a0B",
        "owner": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposedTimestamp": 1712618267,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A",
        "stateCommitmentChain": "eth:0x89E9D387555AF0cDE22cb98833Bae40d640AD7fa"
      },
      "implementationNames": {
        "eth:0x5B0E1a507E786f0a7c11C972ad5F4dd254661e24": "MantleHubConnector"
      }
    },
    {
      "name": "OptimismHubConnector",
      "address": "eth:0x5c2149869146DeA55cDD1CF2DD828e4e1548bb2A",
      "type": "Contract",
      "sourceHashes": [
        "0xe1e1cddf981135f49c5ed0fd4a3ec66db79e2bb91e3cfea59e69f5da6ab165df"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1701992831,
      "sinceBlock": 18737767,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasCap": 850000,
        "MIRROR_DOMAIN": 1869640809,
        "mirrorConnector": "eth:0x432006CEd3BBa818e3D0d8730426B32Bb34a42aB",
        "OPTIMISM_PORTAL": "eth:0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0x5c2149869146DeA55cDD1CF2DD828e4e1548bb2A": "OptimismHubConnector"
      }
    },
    {
      "address": "eth:0x5d527765252003AceE6545416F6a9C8D15ae8402",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x5f4E31F4F402E368743bF29954f80f7C4655EA68",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x6273c0965A1dB4F8A6277d490B4fD48715a42b96",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Relayer9",
      "address": "eth:0x62B1a88CCc6BC5e6FF91FB2FCD29Ab4F819b35C6",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x63Cda9C42db542bb91a7175E38673cFb00D402b0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x6892d4D1f73A65B03063B7d78174dC6350Fcc406",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x691C2EF68e25E620fa6cAdE2728f6aE34F37aAD2",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x6a0A93Cd6d6FB7a36bF6234ef4650Bf9474e7682",
      "type": "EOA",
      "sourceHashes": [
        "0x41c6ce964a4ef3e910f9ddf78152734dae8d1b1094ffc8334c50249a3b112bbf"
      ],
      "proxyType": "EIP7702 EOA",
      "values": {
        "$implementation": "eth:0x63c0c19a282a1B52b07dD5a65b58948A07DAE32B",
        "delegationManager": "eth:0xdb9B1e94B5b69Df7e401DDbedE43491141047dB3",
        "DOMAIN_VERSION": "1",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "EIP7702StatelessDeleGator",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "eth:0x6a0A93Cd6d6FB7a36bF6234ef4650Bf9474e7682",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "entryPoint": "eth:0x0000000071727De22E5E9d8BAf0edAc6f37da032",
        "getDeposit": 0,
        "getDomainHash": "0xd917081b48992d80de39a3221072d3c1b453c5b6063c39322280b45abc776792",
        "getNonce": 0,
        "NAME": "EIP7702StatelessDeleGator",
        "PACKED_USER_OP_TYPEHASH": "0xbc37962d8bd1d319c95199bdfda6d3f92baa8903a61b32d5f4ec1f4b36a3bc18",
        "VERSION": "1.3.0"
      }
    },
    {
      "address": "eth:0x6B44Dba00e92DD035976607CBF62bf1CC6320EC5",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x6FD84ba95525c4cCd218F2f16F646A08B4b0a598",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x6Fde30A7F4709A1739a32A8235Af651C038CeDf9",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x9B077C59fDe7de5AdCeF8093Bc38B61d43FC7007",
          "role": "admin"
        }
      ]
    },
    {
      "name": "Relayer10",
      "address": "eth:0x75bA5Af8EFFDCFca32E1e288806d54277D1fde99",
      "type": "Contract",
      "template": "amarok/Relayer",
      "sourceHashes": [
        "0xa6d83a80925fe1691f6728fa40c68d4d4996842aafd7f34a7190f9b575d12206",
        "0xff5700176e3e8e2bcfd99d769eb287166500ca4f9652023c0d9e62f3765a7219"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1681981595,
      "sinceBlock": 17086720,
      "values": {
        "$admin": "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b",
        "$implementation": "eth:0xb82e63585e53C47Ee83104f22c21ab1FE76F2EAE",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "gelato": "eth:0x3CACa7b48D0573D793d3b0279b5F0029180E83b6",
        "owner": "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b"
      },
      "implementationNames": {
        "eth:0x75bA5Af8EFFDCFca32E1e288806d54277D1fde99": "EIP173Proxy",
        "eth:0xb82e63585e53C47Ee83104f22c21ab1FE76F2EAE": "GelatoRelay1Balance"
      }
    },
    {
      "name": "RelayerProxyHub1",
      "address": "eth:0x75C6A865c30da54e365Cb5Def728890B3DD8BDC4",
      "type": "Contract",
      "template": "amarok/RelayerProxyHub",
      "sourceHashes": [
        "0x293656e6300059a6f65d693963085275a4b36a5e375b6101ce937d0f2938207e"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1671629363,
      "sinceBlock": 16233378,
      "values": {
        "$immutable": true,
        "connext": "eth:0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6",
        "delay": 604800,
        "feeCollector": "eth:0x75C6A865c30da54e365Cb5Def728890B3DD8BDC4",
        "gelatoRelayer": "eth:0xaBcC9b596420A9E9172FD5938620E265a0f9Df92",
        "owner": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "rootManager": "eth:0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1",
        "spokeConnector": "eth:0xF7c4d7dcEc2c09A15f2Db5831d6d25eAEf0a296c"
      },
      "implementationNames": {
        "eth:0x75C6A865c30da54e365Cb5Def728890B3DD8BDC4": "RelayerProxyHub"
      }
    },
    {
      "address": "eth:0x76CF58cE587bC928fcc5aD895555fd040E06C61a",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "WatcherManager",
      "address": "eth:0x79e6E0242405A66B2dd8B96DEd3b2F0216Fd417d",
      "type": "Contract",
      "sourceHashes": [
        "0x291566f24c232f7b88a3772c2a88517ba7bf4aeb4224c9053aabaa34ae92f50c"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposedTimestamp", "proposed"],
      "sinceTimestamp": 1701992231,
      "sinceBlock": 18737718,
      "values": {
        "$immutable": true,
        "delay": 604800,
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "WATCHERS": [
          "eth:0x56dD71fffD089EdAdbA8eCdaaDb94269713f8f4d",
          "eth:0x151Ea574C62b505aEe2F89f33D8c152E28A956b0"
        ]
      },
      "fieldMeta": {
        "WATCHERS": {
          "severity": "LOW",
          "description": "Permissioned set of actors who can pause certain bridge components and remove connectors.",
          "type": "PERMISSION"
        }
      },
      "implementationNames": {
        "eth:0x79e6E0242405A66B2dd8B96DEd3b2F0216Fd417d": "WatcherManager"
      }
    },
    {
      "address": "eth:0x79EfFa11d95931A7e1717f9Eb655eE43e35Ef265",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x7AE8b0D6353F0931EB9FaC0A3562fA9e4C6Ff933",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GovernorV2",
      "address": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
      "type": "Contract",
      "template": "uma/GovernorV2",
      "sourceHashes": [
        "0xdf7f17e5c8ba1f0103fcfaf495da624089f8bfb3d5052217537bb064ca8c60b9"
      ],
      "proxyType": "immutable",
      "description": "Central UMA governance contract. It executes administrative proposals that have been passed by UMA token holder votes.",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x3e532e6222afe9Bcf02DCB87216802c75D5113aE",
          "description": "manage registered contracts.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0x40f941E48A552bF496B154Af6bf55725f18D77c3",
          "description": "manage address mappings.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0x50efaC9619225d7fB4703C5872da978849B6E7cC",
          "description": "set the bond amount.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF",
          "description": "set fees for disputes and manage all roles in the contract.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "description": "manage all roles in the contract.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748",
          "description": "remove and slash proposals, set the bond amount and the expiry time, manage the executor address.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570",
          "description": "manage the whitelist.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0xdBF90434dF0B98219f87d112F37d74B1D90758c7",
          "description": "manage the addresses on the whitelist.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
          "description": "set critical administrative parameters like default bonds, bond token, fees.",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["numProposals", "numProposals"],
      "sinceTimestamp": 1677230459,
      "sinceBlock": 16697276,
      "values": {
        "$immutable": true,
        "emergencyProposer": "eth:0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748",
        "finder": "eth:0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "getMember": [
          "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "eth:0x50efaC9619225d7fB4703C5872da978849B6E7cC",
          "eth:0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748"
        ],
        "numProposals": 211,
        "owner": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "proposer": "eth:0x50efaC9619225d7fB4703C5872da978849B6E7cC"
      },
      "implementationNames": {
        "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8": "GovernorV2"
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "ModeHubConnector",
      "address": "eth:0x7b2bE683266909A6a4068e743083dd40621d663E",
      "type": "Contract",
      "sourceHashes": [
        "0xe1e1cddf981135f49c5ed0fd4a3ec66db79e2bb91e3cfea59e69f5da6ab165df"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1708656995,
      "sinceBlock": 19287458,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x95bDCA6c8EdEB69C98Bd5bd17660BaCef1298A6f",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasCap": 850000,
        "MIRROR_DOMAIN": 1836016741,
        "mirrorConnector": "eth:0x137072F68708eb7c82edceEceCcf64D6c29C171b",
        "OPTIMISM_PORTAL": "eth:0x8B34b14c7c7123459Cf3076b8Cb929BE097d0C07",
        "owner": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposedTimestamp": 1712618291,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0x7b2bE683266909A6a4068e743083dd40621d663E": "OptimismHubConnector"
      }
    },
    {
      "name": "Connext Fee Multisig",
      "address": "eth:0x7bE978Cc84612E08f7844672B0E6A6F367FE2b6A",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x618c83d2fbbe19fd6f2d6ee6ee79a60e6206e48bf361eaf4812e1c1fc14b4527"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1710955703,
      "sinceBlock": 19477398,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x29fcB43b46531BcA003ddC8FCB67FFE91900C762",
        "$members": [
          "eth:0x9b903Ae440CB1f01c342466D6DB6b57A5BF98C3f",
          "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
          "eth:0x7fB1B8D2C4a8186426Fb12a4Ae483f0093ED2315",
          "eth:0xb71C02f99c42424257745827F1C2beBD7Fa1e936",
          "eth:0xD7a8070F0875915dB9b9E03bD47A0b973d19130b"
        ],
        "$threshold": 1,
        "domainSeparator": "0x85c145b13d4438dc49721762b9f7f4d2fd606426a963cdcb0d45810cd73b7d94",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "1 of 5 (20%)",
        "nonce": 19,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0x7bE978Cc84612E08f7844672B0E6A6F367FE2b6A": "SafeProxy",
        "eth:0x29fcB43b46531BcA003ddC8FCB67FFE91900C762": "SafeL2"
      }
    },
    {
      "address": "eth:0x7ce49752fFA7055622f444df3c69598748cb2E5f",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "UpgradeBeaconProxy",
      "address": "eth:0x7D2596D7E44b0990611d390Fbb0Bd24e64845694",
      "type": "Contract",
      "sourceHashes": [
        "0x096b81df0c8f5335503eff3f349aa3136ee8cc6a502b3929f5112ae8b164ee0a"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1671622727,
      "sinceBlock": 16232831,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x7D2596D7E44b0990611d390Fbb0Bd24e64845694": "UpgradeBeaconProxy"
      }
    },
    {
      "name": "PolygonZkHubConnector",
      "address": "eth:0x7ed49D0a13255802A281C08688563bd8D5f726b1",
      "type": "Contract",
      "sourceHashes": [
        "0x8481f131a096c9d34bb43b220f73a7469f938128e441e7f5009eef26a021b104"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1706543423,
      "sinceBlock": 19113185,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "delay": 604800,
        "DOMAIN": 6648936,
        "MIRROR_DOMAIN": 1887071085,
        "mirrorConnector": "eth:0xB17d6F7E4be3aD02E0350b5A67474Bc9B88E49C3",
        "owner": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposedTimestamp": 1712618303,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0x7ed49D0a13255802A281C08688563bd8D5f726b1": "PolygonZkHubConnector"
      }
    },
    {
      "address": "eth:0x7fB1B8D2C4a8186426Fb12a4Ae483f0093ED2315",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "UMA Multisig",
      "address": "eth:0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xd5a33441170541b7df25812e0e3dff6562b2f09ab835a6b431cb9e7198a47605",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748",
          "description": "remove proposals, execute emergency proposals.",
          "role": ".executor"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1597806870,
      "sinceBlock": 10688070,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0x363605C0bdE9F1F5053aDA30618d95dbFc109Bf5",
          "eth:0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
          "eth:0x1d933Fd71FF07E69f066d50B39a7C34EB3b69F05",
          "eth:0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe"
        ],
        "$threshold": 2,
        "domainSeparator": "0xc6747c7ca6899274b3575cd632681f9db9a0788dd1b7c7379382739baa6aa665",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 4 (50%)",
        "nonce": 855,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a": "Proxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "ArbitrumHubConnector",
      "address": "eth:0x83096c7455f24E593aaC9A7c73f849d36d3EEb82",
      "type": "Contract",
      "sourceHashes": [
        "0xec9f14911fa9c31669685bd1b89abbfa1a6a8bdd87f11af719c41ff7ec03987e"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1701993479,
      "sinceBlock": 18737820,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasPriceCap": 20000000000,
        "maxGasCap": 850000,
        "maxSubmissionCostCap": 2000000000000000,
        "MIRROR_DOMAIN": 1634886255,
        "mirrorConnector": "eth:0x5f0F58c8939565C0C553303849Bc5Bf7c530e816",
        "outbox": "eth:0x0B9857ae2D4A3DBe74ffE1d7DF045bb7F96E4840",
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "rollup": "eth:0x5eF0D09d1E6204141B4d37530808eD19f60FBa35",
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0x83096c7455f24E593aaC9A7c73f849d36d3EEb82": "ArbitrumHubConnector"
      }
    },
    {
      "address": "eth:0x837219D7a9C666F5542c4559Bf17D7B804E5c5fe",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ConnextBridge",
      "address": "eth:0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6",
      "type": "Contract",
      "sourceHashes": [
        "0xddff88cf097843837c49f9ed19ac3343d4f1950d3e0508e63669fbd972e4100c",
        "0xf96bb1a4f35c949f170dae66f947e46f2e78265edaf26c1131507855ed435fae"
      ],
      "proxyType": "EIP2535 diamond proxy",
      "ignoreInWatchMode": ["nonce", "proposedTimestamp", "ROUTERS"],
      "sinceTimestamp": 1671625595,
      "sinceBlock": 16233067,
      "values": {
        "$immutable": false,
        "$implementation": [
          "eth:0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
          "eth:0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
          "eth:0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295",
          "eth:0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
          "eth:0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
          "eth:0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
          "eth:0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
          "eth:0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
          "eth:0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
          "eth:0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
          "eth:0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4",
          "eth:0x3Bcf4185443A339517aD4e580067f178d1B68E1D"
        ],
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "aavePool": "eth:0x0000000000000000000000000000000000000000",
        "aavePortalFee": 0,
        "delay": 604800,
        "domain": 6648936,
        "facetAddresses": [
          "eth:0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
          "eth:0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
          "eth:0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295",
          "eth:0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
          "eth:0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
          "eth:0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
          "eth:0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
          "eth:0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
          "eth:0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
          "eth:0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
          "eth:0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4",
          "eth:0x3Bcf4185443A339517aD4e580067f178d1B68E1D"
        ],
        "facets": [
          {
            "facetAddress": "eth:0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81",
            "functionSelectors": [
              "0x1506e463",
              "0x60062091",
              "0x80dc2248",
              "0x9b598519",
              "0x57bd0a32",
              "0xae8bc0de",
              "0x2c1999d0",
              "0xbd8671a7",
              "0x1ecf6f9f",
              "0xad4c7771",
              "0x949de969",
              "0x07a38d7b",
              "0xf1537686",
              "0x5a2164e5",
              "0xa1b19301",
              "0x03e418c2",
              "0xb64a5e07",
              "0xe1cb3958",
              "0xc4058429",
              "0xe9d7bcec"
            ]
          },
          {
            "facetAddress": "eth:0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2",
            "functionSelectors": [
              "0x8a336231",
              "0x159e041f",
              "0x2424401f",
              "0xc2fb26a6",
              "0xb49c53a7",
              "0x63e3e7d2",
              "0xcb8058ba",
              "0x54126711",
              "0xaffed0e0",
              "0x121cca31",
              "0x6989ca7c",
              "0x1a8bc0e1",
              "0x41bdc8b5",
              "0xbfd79030",
              "0x3339df96",
              "0x8aac16ba",
              "0x91f5de79",
              "0x59efa162",
              "0x93f18ac5",
              "0x674dc933"
            ]
          },
          {
            "facetAddress": "eth:0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295",
            "functionSelectors": ["0xab2dc3f5"]
          },
          {
            "facetAddress": "eth:0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d",
            "functionSelectors": [
              "0xc5b350df",
              "0xbb271a27",
              "0x2ec0c002",
              "0xa9943b1b",
              "0x6a42b8f8",
              "0x8da5cb5b",
              "0x8456cb59",
              "0x5c975abb",
              "0xb1f8100d",
              "0xc56ce358",
              "0xd1851c92",
              "0x3cf52ffb",
              "0xc91cb56a",
              "0x23986f7d",
              "0x80e52e3f",
              "0x6be55785",
              "0x12232937",
              "0x3f4ba83a"
            ]
          },
          {
            "facetAddress": "eth:0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352",
            "functionSelectors": [
              "0xa03e4bc3",
              "0xef1eb0c1",
              "0x09d7ba54",
              "0xd1e5f31c",
              "0xb3f62fcb",
              "0x75d32371",
              "0x349f937c",
              "0x3bd30d34"
            ]
          },
          {
            "facetAddress": "eth:0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769",
            "functionSelectors": [
              "0xdd39f00d",
              "0x8cba8b6a",
              "0x65bc8582",
              "0x60f0a5ac",
              "0xf01b3e01"
            ]
          },
          {
            "facetAddress": "eth:0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D",
            "functionSelectors": [
              "0x4b72c5da",
              "0x0951d6d8",
              "0x09935b8f",
              "0x54064594",
              "0x2d3f9ef6",
              "0xf259cd27",
              "0xda3a892f",
              "0x3b688da6",
              "0x12d57170",
              "0x1407093b",
              "0x8770e682",
              "0xe9160f3e",
              "0xc6bf691d",
              "0xb214c901",
              "0x9bf6d875",
              "0x22a3c007",
              "0xf72c5048",
              "0xfd5bd5fe",
              "0x41258b5c",
              "0x582c78d2",
              "0x82904716",
              "0xffaf3f1a",
              "0x911b8ee2",
              "0x04376ff4"
            ]
          },
          {
            "facetAddress": "eth:0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686",
            "functionSelectors": [
              "0x8d365457",
              "0xa02288f4",
              "0x29d99b10",
              "0x8f11d27f",
              "0x76ca2e52",
              "0xd251dc35",
              "0x7652f59d",
              "0x1301caa2",
              "0x8b480b12",
              "0x2d91a515",
              "0xb3a4eab4",
              "0xbb0577eb",
              "0xad94911b",
              "0xf495e807",
              "0x4bbcba8e",
              "0x241ca57a",
              "0xb6618dff",
              "0xff126de9",
              "0x80b297e8",
              "0x74c6b89b"
            ]
          },
          {
            "facetAddress": "eth:0x6369F971fd1f1f230B8584151Ed7747FF710Cc68",
            "functionSelectors": [
              "0xea027c2f",
              "0xe5f6220f",
              "0x4b141bb4",
              "0x2bf63bcc",
              "0x1963e426",
              "0x3e74aea0",
              "0x9c8eab97",
              "0x43be5eaf",
              "0x72a30e08",
              "0x8dc51484",
              "0xa1a23c29"
            ]
          },
          {
            "facetAddress": "eth:0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b",
            "functionSelectors": [
              "0x1f931c1c",
              "0x56a8ea48",
              "0xbbf2358e",
              "0x2c67849c"
            ]
          },
          {
            "facetAddress": "eth:0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4",
            "functionSelectors": ["0x9a7e155e"]
          },
          {
            "facetAddress": "eth:0x3Bcf4185443A339517aD4e580067f178d1B68E1D",
            "functionSelectors": [
              "0xcdffacc6",
              "0x52ef6b2c",
              "0xadfca15e",
              "0x7a0ed627",
              "0x01ffc9a7"
            ]
          }
        ],
        "LIQUIDITY_FEE_DENOMINATOR": 10000,
        "LIQUIDITY_FEE_NUMERATOR": 9995,
        "lpTokenTargetAddress": "eth:0xf7DE5aCeEeE6091d1103209C337fA00D0B4b9092",
        "maxRoutersPerTransfer": 5,
        "nonce": 70129,
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "paused": false,
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "relayerFeeVault": "eth:0x7bE978Cc84612E08f7844672B0E6A6F367FE2b6A",
        "RELAYERS": [
          "eth:0x75C6A865c30da54e365Cb5Def728890B3DD8BDC4",
          "eth:0xaBcC9b596420A9E9172FD5938620E265a0f9Df92",
          "eth:0x0ae392879A228B2484D9B1F80A5D0B7080FE79C2",
          "eth:0x43100A190C3FeAE37Cb1f5d880e8fa8d81BE5CB9",
          "eth:0x935AaAe0f5b02007c08512F0629a9d37Af2E1A47",
          "eth:0x9B077C59fDe7de5AdCeF8093Bc38B61d43FC7007",
          "eth:0xE2Fc8F14B6cEb1AD8165623E02953eDB100288bE",
          "eth:0xe8a5eE73f3c8F1Cd55915f6Eb5Fc7df4206f3C78",
          "eth:0x43728A95386D64384C76Afd416Dcc8118869BA6c",
          "eth:0x62B1a88CCc6BC5e6FF91FB2FCD29Ab4F819b35C6",
          "eth:0xcDbF9D438670D19d1Fb3954Abc8a13666b302b28",
          "eth:0x75bA5Af8EFFDCFca32E1e288806d54277D1fde99",
          "eth:0xB4F8D176466f5F544bAd53737bffAaeA17185c05",
          "eth:0xF9D64d54D32EE2BDceAAbFA60C4C438E224427d0"
        ],
        "routerAllowlistRemoved": false,
        "routerAllowlistTimestamp": 0,
        "ROUTERS": [
          "eth:0xF26c772C0fF3a6036bDdAbDAbA22cf65ECa9F97c",
          "eth:0x97b9dcB1AA34fE5F12b728D9166ae353d1e7f5C4",
          "eth:0x8cb19CE8EEDF740389D428879a876A3B030B9170",
          "eth:0x0e62f9fa1F9b3E49759Dc94494F5bC37a83d1FAD",
          "eth:0x58507fed0Cb11723dFb6848c92C59Cf0BBEB9927",
          "eth:0x7ce49752fFA7055622f444df3c69598748cb2E5f",
          "eth:0x33b2aD85f7DbA818e719FB52095dC768E0eD93ec",
          "eth:0x048a5EcC705C280b2248aefF88fd581AbbEB8587",
          "eth:0x975574980a5Da77f5C90bC92431835D91B73669e",
          "eth:0x6FD84ba95525c4cCd218F2f16F646A08B4b0a598",
          "eth:0x6892d4D1f73A65B03063B7d78174dC6350Fcc406",
          "eth:0x32D63da9F776891843C90787CEC54ADA23ABd4C2",
          "eth:0xFaAB88015477493cFAa5DFAA533099C590876F21",
          "eth:0x63Cda9C42db542bb91a7175E38673cFb00D402b0",
          "eth:0xBE7BC00382a50A711D037eAeCAD799bb8805Dfa8",
          "eth:0x22831e4f21cE65b33EF45df0e212b5bEbF130E5a",
          "eth:0xEca085906cb531bdf1F87eFA85c5bE46aA5C9d2c",
          "eth:0xC4Ae07F276768A3b74AE8c47bc108a2aF0e40eBa",
          "eth:0x9584Eb0356a380b25D7ED2C14c54De58a25f2581",
          "eth:0x6273c0965A1dB4F8A6277d490B4fD48715a42b96",
          "eth:0x49a9E7ec76Bc8fDF658d09557305170d9F01D2fA",
          "eth:0x5d527765252003AceE6545416F6a9C8D15ae8402",
          "eth:0x76CF58cE587bC928fcc5aD895555fd040E06C61a",
          "eth:0x96D38b113b1bC6a21d1137676f2f05DfcAce24e8",
          "eth:0xBa11aA59645a56031fedBcCF60D4f111534f2502",
          "eth:0x5f4E31F4F402E368743bF29954f80f7C4655EA68",
          "eth:0xc770eC66052fe77ff2eF9edF9558236e2D1C41Ef",
          "eth:0xc82C7d826b1eD0b2A4E9A2bE72B445416f901FD1",
          "eth:0xd839958F37f89F80c9520c2f3F4abE29168EeF1B",
          "eth:0x79EfFa11d95931A7e1717f9Eb655eE43e35Ef265",
          "eth:0x1660846ee9A3023034924FB02F85F632AEd66810"
        ],
        "SEQUENCERS": ["eth:0x4fFA5968857a6C8242E4A6Ded2418155D33e82E7"],
        "xAppConnectionManager": "eth:0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc"
      },
      "fieldMeta": {
        "ROUTERS": {
          "description": "Routers can accelerate the bridging for users by fronting liquidity (for token transfers) or a bond (for crosschain contract calls) at the destination."
        },
        "relayerFeeVault": {
          "severity": "LOW",
          "description": "This address receives the bridge fees"
        }
      },
      "implementationNames": {
        "eth:0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6": "ConnextDiamond",
        "eth:0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81": "TokenFacet",
        "eth:0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2": "BridgeFacet",
        "eth:0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295": "InboxFacet",
        "eth:0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d": "ProposedOwnableFacet",
        "eth:0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352": "PortalFacet",
        "eth:0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769": "RelayerFacet",
        "eth:0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D": "RoutersFacet",
        "eth:0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686": "StableSwapFacet",
        "eth:0x6369F971fd1f1f230B8584151Ed7747FF710Cc68": "SwapAdminFacet",
        "eth:0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b": "DiamondCutFacet",
        "eth:0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4": "DiamondInit",
        "eth:0x3Bcf4185443A339517aD4e580067f178d1B68E1D": "DiamondLoupeFacet"
      }
    },
    {
      "address": "eth:0x8B85EA591d41F29F5c741ea22Ed6B4ad71a750ba",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x8cb19CE8EEDF740389D428879a876A3B030B9170",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x8D09e20b835009E5320cC11E6a6F00aF451aD669",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "EmergencyProposer",
      "address": "eth:0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748",
      "type": "Contract",
      "template": "uma/EmergencyProposer",
      "sourceHashes": [
        "0x435ceb597bcf7bd820f593bdbc0e3ce4d223cc2203b368911d2b29fa6bc5e048"
      ],
      "proxyType": "immutable",
      "description": "Token governance contract allowing anyone to create a UMA governance proposal for a bond of 5,000,000 UMA tokens. This circumvents the UMA optimistic oracle but can only be executed or removed after 10d, and only by eth:0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a.",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
          "description": "can bypass the voting system and execute proposals immediately.",
          "role": ".emergencyProposer"
        }
      ],
      "ignoreInWatchMode": ["getCurrentTime"],
      "sinceTimestamp": 1677231923,
      "sinceBlock": 16697394,
      "values": {
        "$immutable": true,
        "bondFmt": "5,000,000",
        "delayFmt": "10d",
        "emergencyProposals": [],
        "executor": "eth:0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a",
        "governor": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "minimumWaitTime": 864000,
        "owner": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "quorum": "5000000000000000000000000",
        "token": "eth:0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828"
      },
      "implementationNames": {
        "eth:0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748": "EmergencyProposer"
      },
      "usedTypes": [{ "typeCaster": "Undecimal", "arg": { "decimals": 18 } }]
    },
    {
      "name": "Relayer4",
      "address": "eth:0x935AaAe0f5b02007c08512F0629a9d37Af2E1A47",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x9584Eb0356a380b25D7ED2C14c54De58a25f2581",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x96D38b113b1bC6a21d1137676f2f05DfcAce24e8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x975574980a5Da77f5C90bC92431835D91B73669e",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x97b9dcB1AA34fE5F12b728D9166ae353d1e7f5C4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Relayer5",
      "address": "eth:0x9B077C59fDe7de5AdCeF8093Bc38B61d43FC7007",
      "type": "Contract",
      "template": "amarok/Relayer",
      "sourceHashes": [
        "0x1f6a82111d640c20ee2127f1d7a191745a277728d9fea40ae3debdc0e516be80",
        "0x06a889d020b7a23683b5ac7ead2e75691788f53221e130558d8fb7d7c343ed57"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1650541439,
      "sinceBlock": 14628098,
      "values": {
        "$admin": "eth:0x6Fde30A7F4709A1739a32A8235Af651C038CeDf9",
        "$implementation": "eth:0xe8a5eE73f3c8F1Cd55915f6Eb5Fc7df4206f3C78",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "gelato": "eth:0x3CACa7b48D0573D793d3b0279b5F0029180E83b6",
        "owner": "eth:0x6Fde30A7F4709A1739a32A8235Af651C038CeDf9"
      },
      "implementationNames": {
        "eth:0x9B077C59fDe7de5AdCeF8093Bc38B61d43FC7007": "EIP173ProxyWithReceive",
        "eth:0xe8a5eE73f3c8F1Cd55915f6Eb5Fc7df4206f3C78": "RelayTransit"
      }
    },
    {
      "address": "eth:0x9b903Ae440CB1f01c342466D6DB6b57A5BF98C3f",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "MetisHubConnector",
      "address": "eth:0x9Ba7D2Ab079Bd1924859e2fECDAD1bEBe5B119Fa",
      "type": "Contract",
      "sourceHashes": [
        "0x8260bb2699f6ede98283b1bd9e2d1fdd52e11144aca41b7ba56f4257cee0dd9d"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1706543411,
      "sinceBlock": 19113184,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x081D1101855bD523bA69A9794e0217F0DB6323ff",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasCap": 850000,
        "MIRROR_DOMAIN": 1835365481,
        "mirrorConnector": "eth:0xbe9be105e64Ba861fE17e75c1cB622fD56eCd82D",
        "owner": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposedTimestamp": 1712618279,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A",
        "stateCommitmentChain": "eth:0xf209815E595Cdf3ed0aAF9665b1772e608AB9380"
      },
      "implementationNames": {
        "eth:0x9Ba7D2Ab079Bd1924859e2fECDAD1bEBe5B119Fa": "OptimismV0HubConnector"
      }
    },
    {
      "address": "eth:0xAabB54394E8dd61Dd70897E9c80be8de7C64A895",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Relayer1",
      "address": "eth:0xaBcC9b596420A9E9172FD5938620E265a0f9Df92",
      "type": "Contract",
      "template": "amarok/Relayer",
      "sourceHashes": [
        "0xa6d83a80925fe1691f6728fa40c68d4d4996842aafd7f34a7190f9b575d12206",
        "0xdb6862dac51a4a0c4557ac12d22d60dacbe7086552ee860e94d311508d27862c"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1662626413,
      "sinceBlock": 15495566,
      "values": {
        "$admin": "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b",
        "$implementation": "eth:0xd91C07a7e8FCb1039fE326e6dE274fD0F3307350",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "gelato": "eth:0x3CACa7b48D0573D793d3b0279b5F0029180E83b6",
        "owner": "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b"
      },
      "implementationNames": {
        "eth:0xaBcC9b596420A9E9172FD5938620E265a0f9Df92": "EIP173Proxy",
        "eth:0xd91C07a7e8FCb1039fE326e6dE274fD0F3307350": "GelatoRelay"
      }
    },
    {
      "address": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "WormholeHubConnector",
      "address": "eth:0xae6B9cDE6191b710F5A18D82f751Ba52B78a99DA",
      "type": "Contract",
      "sourceHashes": [
        "0xa4857ef08af1733cc8a6fb1ce54561fe834c6dae2d6a2be176506833af7d6f9f"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1701993251,
      "sinceBlock": 18737801,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x27428DD2d3DD32A4D7f7C497eAaa23130d894911",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasCap": 300000,
        "MIRROR_DOMAIN": 6450786,
        "MIRROR_WORMHOLE_ID": 4,
        "mirrorConnector": "eth:0x779D30a8BDD8f8A1cEC0292d7799350a8cCef119",
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "refundAddress": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0xae6B9cDE6191b710F5A18D82f751Ba52B78a99DA": "WormholeHubConnector"
      }
    },
    {
      "name": "RelayerProxyHub3",
      "address": "eth:0xB4F8D176466f5F544bAd53737bffAaeA17185c05",
      "type": "Contract",
      "template": "amarok/RelayerProxyHub",
      "sourceHashes": [
        "0x6c908f2cfba26c3f8579904361d66ac752f7d6e58a7dade2ca752d80de50ee30"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1701993539,
      "sinceBlock": 18737823,
      "values": {
        "$immutable": true,
        "autonolas": "eth:0x0000000000000000000000000000000000000000",
        "connext": "eth:0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6",
        "delay": 604800,
        "domain": 6648936,
        "feeCollector": "eth:0xf2964cCcB7CDA9e808aaBe8DB0DDDAF7890dd378",
        "finalizeCooldown": 1800,
        "gelatoRelayer": "eth:0xF9D64d54D32EE2BDceAAbFA60C4C438E224427d0",
        "keep3r": "eth:0xeb02addCfD8B773A5FFA6B9d1FE99c566f8c44CC",
        "lastFinalizeAt": 0,
        "lastPropagateAt": 1724939759,
        "owner": "eth:0xf2964cCcB7CDA9e808aaBe8DB0DDDAF7890dd378",
        "propagateCooldown": 1800,
        "proposeAggregateRootCooldown": 1800,
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "rootManager": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A",
        "spokeConnector": "eth:0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc"
      },
      "implementationNames": {
        "eth:0xB4F8D176466f5F544bAd53737bffAaeA17185c05": "RelayerProxyHub"
      }
    },
    {
      "address": "eth:0xB65540bBA534E88EB4a5062D0E6519C07063b259",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xb71C02f99c42424257745827F1C2beBD7Fa1e936",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xBa11aA59645a56031fedBcCF60D4f111534f2502",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GnosisSafe",
      "address": "eth:0xBE2Ac45e75c14e9EEf9712a94Dce355f0151f5B1",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1668987047,
      "sinceBlock": 16014519,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0x8B85EA591d41F29F5c741ea22Ed6B4ad71a750ba",
          "eth:0xbe8109517300c78f2bbdC00d9EA8Cf597160017E"
        ],
        "$threshold": 1,
        "domainSeparator": "0xdd36ef1d1be1948ff409df66d0d8b2846dbecbfe577e22362e58f66a6ac3ccbc",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "1 of 2 (50%)",
        "nonce": 10,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0xBE2Ac45e75c14e9EEf9712a94Dce355f0151f5B1": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "address": "eth:0xBE7BC00382a50A711D037eAeCAD799bb8805Dfa8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xbe8109517300c78f2bbdC00d9EA8Cf597160017E",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xC4Ae07F276768A3b74AE8c47bc108a2aF0e40eBa",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xc770eC66052fe77ff2eF9edF9558236e2D1C41Ef",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xc82C7d826b1eD0b2A4E9A2bE72B445416f901FD1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xcc400c09ecBAC3e0033e4587BdFAABB26223e37d",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "RelayerProxyHub2",
      "address": "eth:0xcDbF9D438670D19d1Fb3954Abc8a13666b302b28",
      "type": "Contract",
      "template": "amarok/RelayerProxyHub",
      "sourceHashes": [
        "0x2caa39c242be8054678e58b07c53f52a796a2d1c50f065af98ccb92de4275ff7"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1680181427,
      "sinceBlock": 16940236,
      "values": {
        "$immutable": true,
        "autonolas": "eth:0x0dC1dBD30f162A5a55E6054b692E37E4038D0E03",
        "autonolasPriority": 0,
        "connext": "eth:0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6",
        "delay": 604800,
        "feeCollector": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "gelatoRelayer": "eth:0x75bA5Af8EFFDCFca32E1e288806d54277D1fde99",
        "keep3r": "eth:0xeb02addCfD8B773A5FFA6B9d1FE99c566f8c44CC",
        "lastPropagateAt": 1702743719,
        "owner": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "propagateCooldown": 259200,
        "proposed": "eth:0xf2964cCcB7CDA9e808aaBe8DB0DDDAF7890dd378",
        "proposedTimestamp": 1702524227,
        "renounced": false,
        "rootManager": "eth:0xd5d61E9dfb6680Cba8353988Ba0337802811C2e1",
        "spokeConnector": "eth:0xF7c4d7dcEc2c09A15f2Db5831d6d25eAEf0a296c"
      },
      "implementationNames": {
        "eth:0xcDbF9D438670D19d1Fb3954Abc8a13666b302b28": "RelayerProxyHub"
      }
    },
    {
      "name": "IdentifierWhitelist",
      "address": "eth:0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570",
      "type": "Contract",
      "template": "uma/IdentifierWhitelist",
      "sourceHashes": [
        "0xde400b9e12dee4cf61dc66db5e9da7fb6d736020292a92092de7ae2a6bff4cac"
      ],
      "proxyType": "immutable",
      "description": "Keeps a list of whitelisted identifiers that are accepted by the UMA v3 protocol. Across uses the identifier `ACROSS-V2` for its disputes.",
      "sinceTimestamp": 1587764261,
      "sinceBlock": 9937679,
      "values": {
        "$immutable": true,
        "owner": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8",
        "whitelistedIdentifiers": [
          "ETH/BTC",
          "COMPUSD",
          "ETHUSD",
          "USDETH",
          "BTCUSD",
          "USDBTC",
          "PERLUSD",
          "USDPERL",
          "GASETH-1HR",
          "GASETH-4HR",
          "GASETH-1D",
          "GASETH-1W",
          "GASETH-1M",
          "ARSUSD",
          "GASETH-1HR-1M",
          "GASETH-4HR-1M",
          "GASETH-1D-1M",
          "GASETH-1W-1M",
          "GASETH-1M-1M",
          "BTCDOM",
          "ALTDOM",
          "GASETH-TWAP-1Mx1M",
          "BCHNBTC",
          "DEFI_PULSE_TOTAL_TVL",
          "SUSHIUNI_TVL",
          "GASETH-FEB21",
          "GASETH-MAR21",
          "XAUPERL",
          "XAUUSD",
          "STABLESPREAD",
          "ELASTIC_STABLESPREAD/USDC",
          "STABLESPREAD/USDC",
          "STABLESPREAD/BTC",
          "EURUSD",
          "CHFUSD",
          "GBPUSD",
          "CNYUSD",
          "AMPLUSD",
          "USDAMPL",
          "COMPUSDC-APR-FEB28/USDC",
          "DSDUSD",
          "USDDSD",
          "USD/bBadger",
          "USD-[bwBTC/ETH SLP]",
          "COMPUSDC-APR-MAR28/USDC",
          "BTC-BASIS-3M/USDC",
          "BTC-BASIS-6M/USDC",
          "ETH-BASIS-3M/USDC",
          "ETH-BASIS-6M/USDC",
          "uVOL-BTC-APR21",
          "OCEANUSD",
          "USDOCEAN",
          "uSTONKS_APR21",
          "GASETH_JUN21",
          "DAIPHP",
          "PHPDAI",
          "YAMETH",
          "ETHYAM",
          "YAMUSD",
          "USDYAM",
          "WBTCUSD",
          "USDWBTC",
          "AAVEUSD",
          "USDAAVE",
          "LINKUSD",
          "USDLINK",
          "SNXUSD",
          "USDSNX",
          "UMAUSD",
          "USDUMA",
          "UNIUSD",
          "USDUNI",
          "USD/UNI_V2_WBTC_ETH_LP",
          "USD/UNI_V2_USDC_ETH_LP",
          "USD/UNI_V2_UNI_ETH_LP",
          "USD/UNI_V2_UMA_ETH_LP",
          "DIGGBTC",
          "DIGGETH",
          "DIGGUSD",
          "ETHBTC_FR",
          "INDEX/ETH",
          "ETH/INDEX",
          "INDEX/USD",
          "USD/INDEX",
          "DPI/ETH",
          "ETH/DPI",
          "DPI/USD",
          "USD/DPI",
          "uTVL_KPI_UMA",
          "USDBTC_18DEC",
          "BCHNBTC_18DEC",
          "ELASTIC_STABLESPREAD/USDC_18DEC",
          "STABLESPREAD/USDC_18DEC",
          "STABLESPREAD/BTC_18DEC",
          "AMPLUSD_18DEC",
          "SUSHIUSD",
          "USDSUSHI",
          "XSUSHIUSD",
          "USDXSUSHI",
          "XIOUSD",
          "USDXIO",
          "XIOETH",
          "ETHXIO",
          "BALUSD",
          "USDBAL",
          "BCHDOM",
          "BNBDOM",
          "BSVDOM",
          "DOTDOM",
          "ETHDOM",
          "LINKDOM",
          "LTCDOM",
          "USDTDOM",
          "XRPDOM",
          "ethVIX",
          "iethVIX",
          "bBadger/USD",
          "[bwBTC/ETH SLP]/USD",
          "bDiggUSD",
          "USDbDigg",
          "uSTONKS_JUN21",
          "CONSTANT",
          "PUNKETH",
          "PUNKETH_TWAP",
          "DIGG_Positive_Rebases",
          "yUSDUSD",
          "USDyUSD",
          "RAIUSD",
          "USDRAI",
          "USDCOMP",
          "YFIUSD",
          "USDYFI",
          "ALCXUSD",
          "USDALCX",
          "MKRUSD",
          "USDMKR",
          "CRVUSD",
          "USDCRV",
          "RENUSD",
          "USDREN",
          "RGTUSD",
          "USDRGT",
          "NFTXUSD",
          "USDNFTX",
          "V2migration_KPI_Aragon",
          "R3_10H_TWAP",
          "R3_30D_GM",
          "iFARMUSD",
          "USDiFARM",
          "NGNUSD",
          "PHPUSD",
          "CADUSD",
          "ZARUSD",
          "KRWUSD",
          "JPYUSD",
          "LONUSD",
          "USDLON",
          "BANKUSD",
          "USDBANK",
          "MASKUSD",
          "USDMASK",
          "VSPUSD",
          "USDVSP",
          "SFIUSD",
          "USDSFI",
          "DEXTFUSD",
          "USDDEXTF",
          "ORNUSD",
          "USDORN",
          "BONDUSD",
          "USDBOND",
          "PUNK-BASICUSD",
          "USDPUNK-BASIC",
          "SPACEXLAUNCH",
          "uCRSPTMT_SEP21",
          "EURUMA",
          "GBPUMA",
          "CHFUMA",
          "CADUMA",
          "JPYUMA",
          "ZARUMA",
          "KRWUMA",
          "NGNUMA",
          "PHPUMA",
          "vBNTBNT",
          "OPENUSD",
          "USDOPEN",
          "uSTONKS_0921",
          "BANDUSD",
          "USDBAND",
          "SDTUSD",
          "USDSDT",
          "KP3RUSD",
          "USDKP3R",
          "CREAMUSD",
          "USDCREAM",
          "CHAINUSD",
          "USDCHAIN",
          "ERNUSD",
          "USDERN",
          "YES_OR_NO_QUERY",
          "GASETH-0921",
          "uDAO_KPI_UMA",
          "POOLUSD",
          "USDPOOL",
          "BADGER/USD",
          "USD/BADGER",
          "GNOUSD",
          "USDGNO",
          "OHMUSD",
          "USDOHM",
          "IDLEUSD",
          "USDIDLE",
          "FEIUSD",
          "USDFEI",
          "TRIBEUSD",
          "USDTRIBE",
          "FOXUSD",
          "USDFOX",
          "General_KPI",
          "BASKUSD",
          "USDBASK",
          "APWUSD",
          "USDAPW",
          "SNOWUSD",
          "USDSNOW",
          "TOKEN_PRICE",
          "XSUSHI_APY",
          "PUNKETH-1221",
          "GASETH-1221",
          "SGDUSD",
          "ibBTC/BTC",
          "BTC/ibBTC",
          "ibBTC/USD",
          "USD/ibBTC",
          "IS_RELAY_VALID",
          "AUDUSD",
          "BRLUSD",
          "MXNUSD",
          "COPUSD",
          "CZKUSD",
          "SEKUSD",
          "PLNUSD",
          "TRYUSD",
          "uSPAC10",
          "CVXUSD",
          "USDCVX",
          "PERPUSD",
          "USDPERP",
          "PUNKETH-LSP",
          "GASETH-LSP",
          "VolatilityDAOracle",
          "APT",
          "ZODIAC",
          "ACROSS-V2",
          "NZDUSD",
          "COVENANT_V1",
          "MAGICETH",
          "NUMERICAL",
          "MAGICUSD",
          "ETHMAGIC",
          "USDMAGIC",
          "DXY",
          "uSPAC10g",
          "DECENTRA-LIST",
          "ASSERT_TRUTH",
          "SHERLOCK_CLAIM",
          "ROPU_ETHx",
          "MULTIPLE_CHOICE_QUERY",
          "MULTIPLE_VALUES"
        ]
      },
      "implementationNames": {
        "eth:0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570": "IdentifierWhitelist"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "0x4141564555534400000000000000000000000000000000000000000000000000": "AAVEUSD",
            "0x4143524f53532d56320000000000000000000000000000000000000000000000": "ACROSS-V2",
            "0x414c435855534400000000000000000000000000000000000000000000000000": "ALCXUSD",
            "0x414c54444f4d0000000000000000000000000000000000000000000000000000": "ALTDOM",
            "0x414d504c55534400000000000000000000000000000000000000000000000000": "AMPLUSD",
            "0x414d504c5553445f313844454300000000000000000000000000000000000000": "AMPLUSD_18DEC",
            "0x4150540000000000000000000000000000000000000000000000000000000000": "APT",
            "0x4150575553440000000000000000000000000000000000000000000000000000": "APWUSD",
            "0x4152535553440000000000000000000000000000000000000000000000000000": "ARSUSD",
            "0x4153534552545f54525554480000000000000000000000000000000000000000": "ASSERT_TRUTH",
            "0x4155445553440000000000000000000000000000000000000000000000000000": "AUDUSD",
            "0x4241444745522f55534400000000000000000000000000000000000000000000": "BADGER/USD",
            "0x42414c5553440000000000000000000000000000000000000000000000000000": "BALUSD",
            "0x42414e4455534400000000000000000000000000000000000000000000000000": "BANDUSD",
            "0x42414e4b55534400000000000000000000000000000000000000000000000000": "BANKUSD",
            "0x4241534b55534400000000000000000000000000000000000000000000000000": "BASKUSD",
            "0x424348444f4d0000000000000000000000000000000000000000000000000000": "BCHDOM",
            "0x4243484e42544300000000000000000000000000000000000000000000000000": "BCHNBTC",
            "0x4243484e4254435f313844454300000000000000000000000000000000000000": "BCHNBTC_18DEC",
            "0x424e42444f4d0000000000000000000000000000000000000000000000000000": "BNBDOM",
            "0x424f4e4455534400000000000000000000000000000000000000000000000000": "BONDUSD",
            "0x42524c5553440000000000000000000000000000000000000000000000000000": "BRLUSD",
            "0x425356444f4d0000000000000000000000000000000000000000000000000000": "BSVDOM",
            "0x4254432d42415349532d334d2f55534443000000000000000000000000000000": "BTC-BASIS-3M/USDC",
            "0x4254432d42415349532d364d2f55534443000000000000000000000000000000": "BTC-BASIS-6M/USDC",
            "0x4254432f69624254430000000000000000000000000000000000000000000000": "BTC/ibBTC",
            "0x425443444f4d0000000000000000000000000000000000000000000000000000": "BTCDOM",
            "0x4254435553440000000000000000000000000000000000000000000000000000": "BTCUSD",
            "0x434144554d410000000000000000000000000000000000000000000000000000": "CADUMA",
            "0x4341445553440000000000000000000000000000000000000000000000000000": "CADUSD",
            "0x434841494e555344000000000000000000000000000000000000000000000000": "CHAINUSD",
            "0x434846554d410000000000000000000000000000000000000000000000000000": "CHFUMA",
            "0x4348465553440000000000000000000000000000000000000000000000000000": "CHFUSD",
            "0x434e595553440000000000000000000000000000000000000000000000000000": "CNYUSD",
            "0x434f4d5055534400000000000000000000000000000000000000000000000000": "COMPUSD",
            "0x434f4d50555344432d4150522d46454232382f55534443000000000000000000": "COMPUSDC-APR-FEB28/USDC",
            "0x434f4d50555344432d4150522d4d415232382f55534443000000000000000000": "COMPUSDC-APR-MAR28/USDC",
            "0x434f4e5354414e54000000000000000000000000000000000000000000000000": "CONSTANT",
            "0x434f505553440000000000000000000000000000000000000000000000000000": "COPUSD",
            "0x434f56454e414e545f5631000000000000000000000000000000000000000000": "COVENANT_V1",
            "0x435245414d555344000000000000000000000000000000000000000000000000": "CREAMUSD",
            "0x4352565553440000000000000000000000000000000000000000000000000000": "CRVUSD",
            "0x4356585553440000000000000000000000000000000000000000000000000000": "CVXUSD",
            "0x435a4b5553440000000000000000000000000000000000000000000000000000": "CZKUSD",
            "0x4441495048500000000000000000000000000000000000000000000000000000": "DAIPHP",
            "0x444543454e5452412d4c49535400000000000000000000000000000000000000": "DECENTRA-LIST",
            "0x444546495f50554c53455f544f54414c5f54564c000000000000000000000000": "DEFI_PULSE_TOTAL_TVL",
            "0x4445585446555344000000000000000000000000000000000000000000000000": "DEXTFUSD",
            "0x4449474742544300000000000000000000000000000000000000000000000000": "DIGGBTC",
            "0x4449474745544800000000000000000000000000000000000000000000000000": "DIGGETH",
            "0x4449474755534400000000000000000000000000000000000000000000000000": "DIGGUSD",
            "0x444947475f506f7369746976655f526562617365730000000000000000000000": "DIGG_Positive_Rebases",
            "0x444f54444f4d0000000000000000000000000000000000000000000000000000": "DOTDOM",
            "0x4450492f45544800000000000000000000000000000000000000000000000000": "DPI/ETH",
            "0x4450492f55534400000000000000000000000000000000000000000000000000": "DPI/USD",
            "0x4453445553440000000000000000000000000000000000000000000000000000": "DSDUSD",
            "0x4458590000000000000000000000000000000000000000000000000000000000": "DXY",
            "0x454c41535449435f535441424c455350524541442f5553444300000000000000": "ELASTIC_STABLESPREAD/USDC",
            "0x454c41535449435f535441424c455350524541442f555344435f313844454300": "ELASTIC_STABLESPREAD/USDC_18DEC",
            "0x45524e5553440000000000000000000000000000000000000000000000000000": "ERNUSD",
            "0x4554482d42415349532d334d2f55534443000000000000000000000000000000": "ETH-BASIS-3M/USDC",
            "0x4554482d42415349532d364d2f55534443000000000000000000000000000000": "ETH-BASIS-6M/USDC",
            "0x4554482f42544300000000000000000000000000000000000000000000000000": "ETH/BTC",
            "0x4554482f44504900000000000000000000000000000000000000000000000000": "ETH/DPI",
            "0x4554482f494e4445580000000000000000000000000000000000000000000000": "ETH/INDEX",
            "0x4554484254435f46520000000000000000000000000000000000000000000000": "ETHBTC_FR",
            "0x455448444f4d0000000000000000000000000000000000000000000000000000": "ETHDOM",
            "0x4554484d41474943000000000000000000000000000000000000000000000000": "ETHMAGIC",
            "0x4554485553440000000000000000000000000000000000000000000000000000": "ETHUSD",
            "0x45544858494f0000000000000000000000000000000000000000000000000000": "ETHXIO",
            "0x45544859414d0000000000000000000000000000000000000000000000000000": "ETHYAM",
            "0x455552554d410000000000000000000000000000000000000000000000000000": "EURUMA",
            "0x4555525553440000000000000000000000000000000000000000000000000000": "EURUSD",
            "0x4645495553440000000000000000000000000000000000000000000000000000": "FEIUSD",
            "0x464f585553440000000000000000000000000000000000000000000000000000": "FOXUSD",
            "0x4741534554482d30393231000000000000000000000000000000000000000000": "GASETH-0921",
            "0x4741534554482d31323231000000000000000000000000000000000000000000": "GASETH-1221",
            "0x4741534554482d31440000000000000000000000000000000000000000000000": "GASETH-1D",
            "0x4741534554482d31442d314d0000000000000000000000000000000000000000": "GASETH-1D-1M",
            "0x4741534554482d31485200000000000000000000000000000000000000000000": "GASETH-1HR",
            "0x4741534554482d3148522d314d00000000000000000000000000000000000000": "GASETH-1HR-1M",
            "0x4741534554482d314d0000000000000000000000000000000000000000000000": "GASETH-1M",
            "0x4741534554482d314d2d314d0000000000000000000000000000000000000000": "GASETH-1M-1M",
            "0x4741534554482d31570000000000000000000000000000000000000000000000": "GASETH-1W",
            "0x4741534554482d31572d314d0000000000000000000000000000000000000000": "GASETH-1W-1M",
            "0x4741534554482d34485200000000000000000000000000000000000000000000": "GASETH-4HR",
            "0x4741534554482d3448522d314d00000000000000000000000000000000000000": "GASETH-4HR-1M",
            "0x4741534554482d46454232310000000000000000000000000000000000000000": "GASETH-FEB21",
            "0x4741534554482d4c535000000000000000000000000000000000000000000000": "GASETH-LSP",
            "0x4741534554482d4d415232310000000000000000000000000000000000000000": "GASETH-MAR21",
            "0x4741534554482d545741502d314d78314d000000000000000000000000000000": "GASETH-TWAP-1Mx1M",
            "0x4741534554485f4a554e32310000000000000000000000000000000000000000": "GASETH_JUN21",
            "0x474250554d410000000000000000000000000000000000000000000000000000": "GBPUMA",
            "0x4742505553440000000000000000000000000000000000000000000000000000": "GBPUSD",
            "0x474e4f5553440000000000000000000000000000000000000000000000000000": "GNOUSD",
            "0x47656e6572616c5f4b5049000000000000000000000000000000000000000000": "General_KPI",
            "0x49444c4555534400000000000000000000000000000000000000000000000000": "IDLEUSD",
            "0x494e4445582f4554480000000000000000000000000000000000000000000000": "INDEX/ETH",
            "0x494e4445582f5553440000000000000000000000000000000000000000000000": "INDEX/USD",
            "0x49535f52454c41595f56414c4944000000000000000000000000000000000000": "IS_RELAY_VALID",
            "0x4a5059554d410000000000000000000000000000000000000000000000000000": "JPYUMA",
            "0x4a50595553440000000000000000000000000000000000000000000000000000": "JPYUSD",
            "0x4b50335255534400000000000000000000000000000000000000000000000000": "KP3RUSD",
            "0x4b5257554d410000000000000000000000000000000000000000000000000000": "KRWUMA",
            "0x4b52575553440000000000000000000000000000000000000000000000000000": "KRWUSD",
            "0x4c494e4b444f4d00000000000000000000000000000000000000000000000000": "LINKDOM",
            "0x4c494e4b55534400000000000000000000000000000000000000000000000000": "LINKUSD",
            "0x4c4f4e5553440000000000000000000000000000000000000000000000000000": "LONUSD",
            "0x4c5443444f4d0000000000000000000000000000000000000000000000000000": "LTCDOM",
            "0x4d41474943455448000000000000000000000000000000000000000000000000": "MAGICETH",
            "0x4d41474943555344000000000000000000000000000000000000000000000000": "MAGICUSD",
            "0x4d41534b55534400000000000000000000000000000000000000000000000000": "MASKUSD",
            "0x4d4b525553440000000000000000000000000000000000000000000000000000": "MKRUSD",
            "0x4d554c5449504c455f43484f4943455f51554552590000000000000000000000": "MULTIPLE_CHOICE_QUERY",
            "0x4d554c5449504c455f56414c5545530000000000000000000000000000000000": "MULTIPLE_VALUES",
            "0x4d584e5553440000000000000000000000000000000000000000000000000000": "MXNUSD",
            "0x4e46545855534400000000000000000000000000000000000000000000000000": "NFTXUSD",
            "0x4e474e554d410000000000000000000000000000000000000000000000000000": "NGNUMA",
            "0x4e474e5553440000000000000000000000000000000000000000000000000000": "NGNUSD",
            "0x4e554d45524943414c0000000000000000000000000000000000000000000000": "NUMERICAL",
            "0x4e5a445553440000000000000000000000000000000000000000000000000000": "NZDUSD",
            "0x4f4345414e555344000000000000000000000000000000000000000000000000": "OCEANUSD",
            "0x4f484d5553440000000000000000000000000000000000000000000000000000": "OHMUSD",
            "0x4f50454e55534400000000000000000000000000000000000000000000000000": "OPENUSD",
            "0x4f524e5553440000000000000000000000000000000000000000000000000000": "ORNUSD",
            "0x5045524c55534400000000000000000000000000000000000000000000000000": "PERLUSD",
            "0x5045525055534400000000000000000000000000000000000000000000000000": "PERPUSD",
            "0x5048504441490000000000000000000000000000000000000000000000000000": "PHPDAI",
            "0x504850554d410000000000000000000000000000000000000000000000000000": "PHPUMA",
            "0x5048505553440000000000000000000000000000000000000000000000000000": "PHPUSD",
            "0x504c4e5553440000000000000000000000000000000000000000000000000000": "PLNUSD",
            "0x504f4f4c55534400000000000000000000000000000000000000000000000000": "POOLUSD",
            "0x50554e4b2d424153494355534400000000000000000000000000000000000000": "PUNK-BASICUSD",
            "0x50554e4b45544800000000000000000000000000000000000000000000000000": "PUNKETH",
            "0x50554e4b4554482d313232310000000000000000000000000000000000000000": "PUNKETH-1221",
            "0x50554e4b4554482d4c5350000000000000000000000000000000000000000000": "PUNKETH-LSP",
            "0x50554e4b4554485f545741500000000000000000000000000000000000000000": "PUNKETH_TWAP",
            "0x52335f3130485f54574150000000000000000000000000000000000000000000": "R3_10H_TWAP",
            "0x52335f3330445f474d0000000000000000000000000000000000000000000000": "R3_30D_GM",
            "0x5241495553440000000000000000000000000000000000000000000000000000": "RAIUSD",
            "0x52454e5553440000000000000000000000000000000000000000000000000000": "RENUSD",
            "0x5247545553440000000000000000000000000000000000000000000000000000": "RGTUSD",
            "0x524f50555f455448780000000000000000000000000000000000000000000000": "ROPU_ETHx",
            "0x5344545553440000000000000000000000000000000000000000000000000000": "SDTUSD",
            "0x53454b5553440000000000000000000000000000000000000000000000000000": "SEKUSD",
            "0x5346495553440000000000000000000000000000000000000000000000000000": "SFIUSD",
            "0x5347445553440000000000000000000000000000000000000000000000000000": "SGDUSD",
            "0x534845524c4f434b5f434c41494d000000000000000000000000000000000000": "SHERLOCK_CLAIM",
            "0x534e4f5755534400000000000000000000000000000000000000000000000000": "SNOWUSD",
            "0x534e585553440000000000000000000000000000000000000000000000000000": "SNXUSD",
            "0x5350414345584c41554e43480000000000000000000000000000000000000000": "SPACEXLAUNCH",
            "0x535441424c455350524541440000000000000000000000000000000000000000": "STABLESPREAD",
            "0x535441424c455350524541442f42544300000000000000000000000000000000": "STABLESPREAD/BTC",
            "0x535441424c455350524541442f4254435f313844454300000000000000000000": "STABLESPREAD/BTC_18DEC",
            "0x535441424c455350524541442f55534443000000000000000000000000000000": "STABLESPREAD/USDC",
            "0x535441424c455350524541442f555344435f3138444543000000000000000000": "STABLESPREAD/USDC_18DEC",
            "0x5355534849554e495f54564c0000000000000000000000000000000000000000": "SUSHIUNI_TVL",
            "0x5355534849555344000000000000000000000000000000000000000000000000": "SUSHIUSD",
            "0x544f4b454e5f5052494345000000000000000000000000000000000000000000": "TOKEN_PRICE",
            "0x5452494245555344000000000000000000000000000000000000000000000000": "TRIBEUSD",
            "0x5452595553440000000000000000000000000000000000000000000000000000": "TRYUSD",
            "0x554d415553440000000000000000000000000000000000000000000000000000": "UMAUSD",
            "0x554e495553440000000000000000000000000000000000000000000000000000": "UNIUSD",
            "0x5553442d5b62774254432f45544820534c505d00000000000000000000000000": "USD-[bwBTC/ETH SLP]",
            "0x5553442f42414447455200000000000000000000000000000000000000000000": "USD/BADGER",
            "0x5553442f44504900000000000000000000000000000000000000000000000000": "USD/DPI",
            "0x5553442f494e4445580000000000000000000000000000000000000000000000": "USD/INDEX",
            "0x5553442f554e495f56325f554d415f4554485f4c500000000000000000000000": "USD/UNI_V2_UMA_ETH_LP",
            "0x5553442f554e495f56325f554e495f4554485f4c500000000000000000000000": "USD/UNI_V2_UNI_ETH_LP",
            "0x5553442f554e495f56325f555344435f4554485f4c5000000000000000000000": "USD/UNI_V2_USDC_ETH_LP",
            "0x5553442f554e495f56325f574254435f4554485f4c5000000000000000000000": "USD/UNI_V2_WBTC_ETH_LP",
            "0x5553442f62426164676572000000000000000000000000000000000000000000": "USD/bBadger",
            "0x5553442f69624254430000000000000000000000000000000000000000000000": "USD/ibBTC",
            "0x5553444141564500000000000000000000000000000000000000000000000000": "USDAAVE",
            "0x555344414c435800000000000000000000000000000000000000000000000000": "USDALCX",
            "0x555344414d504c00000000000000000000000000000000000000000000000000": "USDAMPL",
            "0x5553444150570000000000000000000000000000000000000000000000000000": "USDAPW",
            "0x55534442414c0000000000000000000000000000000000000000000000000000": "USDBAL",
            "0x55534442414e4400000000000000000000000000000000000000000000000000": "USDBAND",
            "0x55534442414e4b00000000000000000000000000000000000000000000000000": "USDBANK",
            "0x5553444241534b00000000000000000000000000000000000000000000000000": "USDBASK",
            "0x555344424f4e4400000000000000000000000000000000000000000000000000": "USDBOND",
            "0x5553444254430000000000000000000000000000000000000000000000000000": "USDBTC",
            "0x5553444254435f31384445430000000000000000000000000000000000000000": "USDBTC_18DEC",
            "0x555344434841494e000000000000000000000000000000000000000000000000": "USDCHAIN",
            "0x555344434f4d5000000000000000000000000000000000000000000000000000": "USDCOMP",
            "0x555344435245414d000000000000000000000000000000000000000000000000": "USDCREAM",
            "0x5553444352560000000000000000000000000000000000000000000000000000": "USDCRV",
            "0x5553444356580000000000000000000000000000000000000000000000000000": "USDCVX",
            "0x5553444445585446000000000000000000000000000000000000000000000000": "USDDEXTF",
            "0x5553444453440000000000000000000000000000000000000000000000000000": "USDDSD",
            "0x55534445524e0000000000000000000000000000000000000000000000000000": "USDERN",
            "0x5553444554480000000000000000000000000000000000000000000000000000": "USDETH",
            "0x5553444645490000000000000000000000000000000000000000000000000000": "USDFEI",
            "0x555344464f580000000000000000000000000000000000000000000000000000": "USDFOX",
            "0x555344474e4f0000000000000000000000000000000000000000000000000000": "USDGNO",
            "0x55534449444c4500000000000000000000000000000000000000000000000000": "USDIDLE",
            "0x5553444b50335200000000000000000000000000000000000000000000000000": "USDKP3R",
            "0x5553444c494e4b00000000000000000000000000000000000000000000000000": "USDLINK",
            "0x5553444c4f4e0000000000000000000000000000000000000000000000000000": "USDLON",
            "0x5553444d41474943000000000000000000000000000000000000000000000000": "USDMAGIC",
            "0x5553444d41534b00000000000000000000000000000000000000000000000000": "USDMASK",
            "0x5553444d4b520000000000000000000000000000000000000000000000000000": "USDMKR",
            "0x5553444e46545800000000000000000000000000000000000000000000000000": "USDNFTX",
            "0x5553444f4345414e000000000000000000000000000000000000000000000000": "USDOCEAN",
            "0x5553444f484d0000000000000000000000000000000000000000000000000000": "USDOHM",
            "0x5553444f50454e00000000000000000000000000000000000000000000000000": "USDOPEN",
            "0x5553444f524e0000000000000000000000000000000000000000000000000000": "USDORN",
            "0x5553445045524c00000000000000000000000000000000000000000000000000": "USDPERL",
            "0x5553445045525000000000000000000000000000000000000000000000000000": "USDPERP",
            "0x555344504f4f4c00000000000000000000000000000000000000000000000000": "USDPOOL",
            "0x55534450554e4b2d424153494300000000000000000000000000000000000000": "USDPUNK-BASIC",
            "0x5553445241490000000000000000000000000000000000000000000000000000": "USDRAI",
            "0x55534452454e0000000000000000000000000000000000000000000000000000": "USDREN",
            "0x5553445247540000000000000000000000000000000000000000000000000000": "USDRGT",
            "0x5553445344540000000000000000000000000000000000000000000000000000": "USDSDT",
            "0x5553445346490000000000000000000000000000000000000000000000000000": "USDSFI",
            "0x555344534e4f5700000000000000000000000000000000000000000000000000": "USDSNOW",
            "0x555344534e580000000000000000000000000000000000000000000000000000": "USDSNX",
            "0x5553445355534849000000000000000000000000000000000000000000000000": "USDSUSHI",
            "0x55534454444f4d00000000000000000000000000000000000000000000000000": "USDTDOM",
            "0x5553445452494245000000000000000000000000000000000000000000000000": "USDTRIBE",
            "0x555344554d410000000000000000000000000000000000000000000000000000": "USDUMA",
            "0x555344554e490000000000000000000000000000000000000000000000000000": "USDUNI",
            "0x5553445653500000000000000000000000000000000000000000000000000000": "USDVSP",
            "0x5553445742544300000000000000000000000000000000000000000000000000": "USDWBTC",
            "0x55534458494f0000000000000000000000000000000000000000000000000000": "USDXIO",
            "0x5553445853555348490000000000000000000000000000000000000000000000": "USDXSUSHI",
            "0x55534459414d0000000000000000000000000000000000000000000000000000": "USDYAM",
            "0x5553445946490000000000000000000000000000000000000000000000000000": "USDYFI",
            "0x5553446244696767000000000000000000000000000000000000000000000000": "USDbDigg",
            "0x555344694641524d000000000000000000000000000000000000000000000000": "USDiFARM",
            "0x5553447955534400000000000000000000000000000000000000000000000000": "USDyUSD",
            "0x56326d6967726174696f6e5f4b50495f417261676f6e00000000000000000000": "V2migration_KPI_Aragon",
            "0x5653505553440000000000000000000000000000000000000000000000000000": "VSPUSD",
            "0x566f6c6174696c69747944414f7261636c650000000000000000000000000000": "VolatilityDAOracle",
            "0x5742544355534400000000000000000000000000000000000000000000000000": "WBTCUSD",
            "0x5841555045524c00000000000000000000000000000000000000000000000000": "XAUPERL",
            "0x5841555553440000000000000000000000000000000000000000000000000000": "XAUUSD",
            "0x58494f4554480000000000000000000000000000000000000000000000000000": "XIOETH",
            "0x58494f5553440000000000000000000000000000000000000000000000000000": "XIOUSD",
            "0x585250444f4d0000000000000000000000000000000000000000000000000000": "XRPDOM",
            "0x5853555348495553440000000000000000000000000000000000000000000000": "XSUSHIUSD",
            "0x5853555348495f41505900000000000000000000000000000000000000000000": "XSUSHI_APY",
            "0x59414d4554480000000000000000000000000000000000000000000000000000": "YAMETH",
            "0x59414d5553440000000000000000000000000000000000000000000000000000": "YAMUSD",
            "0x5945535f4f525f4e4f5f51554552590000000000000000000000000000000000": "YES_OR_NO_QUERY",
            "0x5946495553440000000000000000000000000000000000000000000000000000": "YFIUSD",
            "0x5a4152554d410000000000000000000000000000000000000000000000000000": "ZARUMA",
            "0x5a41525553440000000000000000000000000000000000000000000000000000": "ZARUSD",
            "0x5a4f444941430000000000000000000000000000000000000000000000000000": "ZODIAC",
            "0x5b62774254432f45544820534c505d2f55534400000000000000000000000000": "[bwBTC/ETH SLP]/USD",
            "0x624261646765722f555344000000000000000000000000000000000000000000": "bBadger/USD",
            "0x6244696767555344000000000000000000000000000000000000000000000000": "bDiggUSD",
            "0x6574685649580000000000000000000000000000000000000000000000000000": "ethVIX",
            "0x694641524d555344000000000000000000000000000000000000000000000000": "iFARMUSD",
            "0x69624254432f4254430000000000000000000000000000000000000000000000": "ibBTC/BTC",
            "0x69624254432f5553440000000000000000000000000000000000000000000000": "ibBTC/USD",
            "0x6965746856495800000000000000000000000000000000000000000000000000": "iethVIX",
            "0x7543525350544d545f5345503231000000000000000000000000000000000000": "uCRSPTMT_SEP21",
            "0x7544414f5f4b50495f554d410000000000000000000000000000000000000000": "uDAO_KPI_UMA",
            "0x7553504143313000000000000000000000000000000000000000000000000000": "uSPAC10",
            "0x7553504143313067000000000000000000000000000000000000000000000000": "uSPAC10g",
            "0x7553544f4e4b535f303932310000000000000000000000000000000000000000": "uSTONKS_0921",
            "0x7553544f4e4b535f415052323100000000000000000000000000000000000000": "uSTONKS_APR21",
            "0x7553544f4e4b535f4a554e323100000000000000000000000000000000000000": "uSTONKS_JUN21",
            "0x7554564c5f4b50495f554d410000000000000000000000000000000000000000": "uTVL_KPI_UMA",
            "0x75564f4c2d4254432d4150523231000000000000000000000000000000000000": "uVOL-BTC-APR21",
            "0x76424e54424e5400000000000000000000000000000000000000000000000000": "vBNTBNT",
            "0x7955534455534400000000000000000000000000000000000000000000000000": "yUSDUSD"
          }
        }
      ]
    },
    {
      "name": "AllowanceModule",
      "address": "eth:0xCFbFaC74C26F8647cBDb8c5caf80BB5b32E43134",
      "type": "Contract",
      "sourceHashes": [
        "0x739427cbd7c2389a7c03972460f1e89b911776b7fdd5332f544dac83493eabb1"
      ],
      "proxyType": "immutable",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x75bA5Af8EFFDCFca32E1e288806d54277D1fde99",
          "role": "admin",
          "via": [
            { "address": "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xaBcC9b596420A9E9172FD5938620E265a0f9Df92",
          "role": "admin",
          "via": [
            { "address": "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b",
          "role": ".GnosisSafe_modules"
        }
      ],
      "sinceTimestamp": 1603880884,
      "sinceBlock": 11144602,
      "values": {
        "$immutable": true,
        "ALLOWANCE_TRANSFER_TYPEHASH": "0x80b006280932094e7cc965863eb5118dc07e5d272c6670c4a7c87299e04fceeb",
        "DOMAIN_SEPARATOR_TYPEHASH": "0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218",
        "getChainId": 1,
        "NAME": "Allowance Module",
        "VERSION": "0.1.0"
      },
      "implementationNames": {
        "eth:0xCFbFaC74C26F8647cBDb8c5caf80BB5b32E43134": "AllowanceModule"
      }
    },
    {
      "address": "eth:0xD7a8070F0875915dB9b9E03bD47A0b973d19130b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xd839958F37f89F80c9520c2f3F4abE29168EeF1B",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xDbDcFbA39D6ace2DaC9Cf5E8fc0Fe80a074FD81b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "AddressWhitelist",
      "address": "eth:0xdBF90434dF0B98219f87d112F37d74B1D90758c7",
      "type": "Contract",
      "template": "uma/AddressWhitelist",
      "sourceHashes": [
        "0x34fe953eae62cfc4797c138b47bc03a1d268dc47ac86e5fce536da6e8bc1e195"
      ],
      "proxyType": "immutable",
      "description": "Implements a simple address whitelist for tokens that can be used as bonds and fees.",
      "sinceTimestamp": 1595094721,
      "sinceBlock": 10484890,
      "values": {
        "$immutable": true,
        "getWhitelist": [
          "eth:0x6B175474E89094C44Da98b954EedeAC495271d0F",
          "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          "eth:0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D",
          "eth:0xeca82185adCE47f39c684352B0439f030f860318",
          "eth:0x261b45D85cCFeAbb11F022eBa346ee8D1cd488c0",
          "eth:0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          "eth:0xdAC17F958D2ee523a2206206994597C13D831ec7",
          "eth:0x758A43EE2BFf8230eeb784879CdcFF4828F2544D",
          "eth:0xBD2F0Cd039E0BFcf88901C98c0bFAc5ab27566e3",
          "eth:0x19D97D8fA813EE2f51aD4B4e04EA08bAf4DFfC28",
          "eth:0x3832d2F059E55934220881F831bE501D180671A7",
          "eth:0x967da4048cD07aB37855c090aAF366e4ce1b9F48",
          "eth:0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
          "eth:0x0AaCfbeC6a24756c20D41914F2caba817C0d8521",
          "eth:0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
          "eth:0x514910771AF9Ca656af840dff83E8264EcF986CA",
          "eth:0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
          "eth:0x04Fa0d235C4abf4BcF4787aF4CF447DE572eF828",
          "eth:0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
          "eth:0xBb2b8038a1640196FbE3e38816F3e67Cba72D940",
          "eth:0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc",
          "eth:0xd3d2E2692501A5c9Ca623199D38826e513033a17",
          "eth:0x88D97d199b9ED37C29D846d00D443De980832a22",
          "eth:0xa117000000f279D81A1D3cc75430fAA017FA5A2e",
          "eth:0x0954906da0Bf32d5479e25f46056d22f08464cab",
          "eth:0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b",
          "eth:0x6B3595068778DD592e39A122f4f5a5cF09C90fE2",
          "eth:0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272",
          "eth:0x0f7F961648aE6Db43C75663aC7E5414Eb79b5704",
          "eth:0xba100000625a3754423978a60c9317c58a424e3D",
          "eth:0x7e7E112A68d8D2E221E11047a72fFC1065c38e1a",
          "eth:0x0000000000095413afC295d19EDeb1Ad7B71c952",
          "eth:0x69af81e73A73B40adF4f3d4223Cd9b1ECE623074",
          "eth:0x24A6A37576377F63f194Caa5F518a60f45b42921",
          "eth:0xb753428af26E81097e7fD17f40c88aaA3E04902c",
          "eth:0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421",
          "eth:0x853d955aCEf822Db058eb8505911ED77F175b99e",
          "eth:0x5F64Ab1544D28732F0A24F4713c2C8ec0dA089f0",
          "eth:0x0258F474786DdFd37ABCE6df6BBb1Dd5dfC4434a",
          "eth:0x0391D2021f89DC339F60Fff84546EA23E337750f",
          "eth:0x69BbE2FA02b4D90A944fF328663667DC32786385",
          "eth:0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
          "eth:0x1571eD0bed4D987fe2b498DdBaE7DFA19519F651",
          "eth:0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9",
          "eth:0xa47c8bf37f92aBed4A126BDA807A7b7498661acD",
          "eth:0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C",
          "eth:0x48Fb253446873234F2fEBbF9BdeAA72d9d387f94",
          "eth:0xBA11D00c5f74255f56a5E366F4F77f5A186d7f55",
          "eth:0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F",
          "eth:0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44",
          "eth:0x2ba592F78dB6436527729929AAf6c908497cB200",
          "eth:0xC4C2614E694cF534D407Ee49F8E44D125E4681c4",
          "eth:0xBBc2AE13b23d715c30720F079fcd9B4a74093505",
          "eth:0x69e8b9528CABDA89fe846C67675B5D73d463a916",
          "eth:0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c",
          "eth:0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919",
          "eth:0xc00e94Cb662C3520282E6f5717214004A7f26888",
          "eth:0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e",
          "eth:0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF",
          "eth:0xa1faa113cbE53436Df28FF0aEe54275c13B40975",
          "eth:0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",
          "eth:0x408e41876cCCDC0F92210600ef50372656052a38",
          "eth:0xD533a949740bb3306d119CC777fa900bA034cd52",
          "eth:0xD291E7a03283640FDc51b121aC401383A46cC623",
          "eth:0x87d73E916D7057945c9BcD8cdd94e42A6F47f776",
          "eth:0x888888435FDe8e7d4c54cAb67f206e4199454c60",
          "eth:0x44564d0bd94343f72E3C8a0D22308B7Fa71DB0Bb",
          "eth:0x3472A5A71965499acd81997a54BBA8D852C6E53d",
          "eth:0x383518188C0C6d7730D91b2c03a03C837814a899",
          "eth:0x875773784Af8135eA0ef43b5a374AaD105c5D39e",
          "eth:0x6810e776880C02933D47DB1b9fc05908e5386b96",
          "eth:0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e",
          "eth:0xad32A8e6220741182940c5aBF610bDE99E737b2D",
          "eth:0x956F47F50A910163D8BF957Cf5846D573E7f87CA",
          "eth:0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B",
          "eth:0xc770EEfAd204B5180dF6a14Ee197D99d808ee52d",
          "eth:0xbEa98c05eEAe2f3bC8c3565Db7551Eb738c8CCAb",
          "eth:0x8888801aF4d980682e47f1A9036e589479e835C5",
          "eth:0x4104b135DBC9609Fc1A9490E61369036497660c8",
          "eth:0xfe9A29aB92522D14Fc65880d817214261D8479AE",
          "eth:0x86772b1409b61c639EaAc9Ba0AcfBb6E238e5F83",
          "eth:0x6123B0049F904d730dB3C36a31167D9d4121fA6B",
          "eth:0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198",
          "eth:0x7815bDa662050D84718B988735218CFfd32f75ea",
          "eth:0xbbBBBBB5AA847A2003fbC6b5C16DF0Bd1E725f61",
          "eth:0x5166E09628b696285E3A151e84FB977736a83575",
          "eth:0xB0e1fc65C1a741b4662B813eB787d369b8614Af1",
          "eth:0xbC396689893D065F41bc2C6EcbeE5e0085233447",
          "eth:0x3Ec8798B81485A254928B70CDA1cf0A2BB0B74D7",
          "eth:0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",
          "eth:0x6f40d4A6237C257fff2dB00FA0510DeEECd303eb",
          "eth:0x8A9C67fee641579dEbA04928c4BC45F66e26343A",
          "eth:0xD34a24006b862f4E9936c506691539D6433aD297",
          "eth:0x0b15Ddf19D47E6a86A56148fb4aFFFc6929BcB89",
          "eth:0xbA8A621b4a54e61C442F5Ec623687e2a942225ef",
          "eth:0xc4E15973E6fF2A35cC804c2CF9D2a1b817a8b40F",
          "eth:0x42bBFa2e77757C645eeaAd1655E0911a7553Efbc",
          "eth:0xef5Fa9f3Dede72Ec306dfFf1A7eA0bB0A2F7046F",
          "eth:0xaa61D5dec73971CD4a026ef2820bB87b4a4Ed8d6",
          "eth:0x752Efadc0a7E05ad1BCCcDA22c141D01a75EF1e4",
          "eth:0xEd1480d12bE41d92F36f5f7bDd88212E381A3677",
          "eth:0xcAfE001067cDEF266AfB7Eb5A286dCFD277f3dE5",
          "eth:0xDC59ac4FeFa32293A95889Dc396682858d52e5Db",
          "eth:0xB0c7a3Ba49C7a6EaBa6cD4a96C55a1391070Ac9A",
          "eth:0xa5f2211B9b8170F694421f2046281775E8468044",
          "eth:0x44108f0223A3C3028F5Fe7AEC7f9bb2E66beF82F",
          "eth:0xee1DC6BCF1Ee967a350e9aC6CaaAA236109002ea"
        ],
        "owner": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "implementationNames": {
        "eth:0xdBF90434dF0B98219f87d112F37d74B1D90758c7": "AddressWhitelist"
      }
    },
    {
      "address": "eth:0xdFa28361aC40679cC5D8EFa74c0421961397f2Eb",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Relayer6",
      "address": "eth:0xE2Fc8F14B6cEb1AD8165623E02953eDB100288bE",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Relayer7",
      "address": "eth:0xe8a5eE73f3c8F1Cd55915f6Eb5Fc7df4206f3C78",
      "type": "Contract",
      "template": "amarok/Relayer",
      "sourceHashes": [
        "0x06a889d020b7a23683b5ac7ead2e75691788f53221e130558d8fb7d7c343ed57"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1650541411,
      "sinceBlock": 14628096,
      "values": {
        "$immutable": true,
        "gelato": "eth:0x3CACa7b48D0573D793d3b0279b5F0029180E83b6"
      },
      "implementationNames": {
        "eth:0xe8a5eE73f3c8F1Cd55915f6Eb5Fc7df4206f3C78": "RelayTransit"
      }
    },
    {
      "name": "PolygonHubConnector",
      "address": "eth:0xE8cF9EbB1cFB137c692a0a4E470E257B9417d116",
      "type": "Contract",
      "sourceHashes": [
        "0x801d3cc7883546ac5e0bbb1c4872555739352f0ecf116f9f317f51732c9d08f6"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1701993335,
      "sinceBlock": 18737808,
      "values": {
        "$immutable": true,
        "AMB": "eth:0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
        "checkpointManager": "eth:0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287",
        "delay": 604800,
        "DOMAIN": 6648936,
        "fxChildTunnel": "eth:0xa052EF2D4Eb460c3886B0fd687FA33D3dc8b15EE",
        "fxRoot": "eth:0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
        "MIRROR_DOMAIN": 1886350457,
        "mirrorConnector": "eth:0xa052EF2D4Eb460c3886B0fd687FA33D3dc8b15EE",
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A",
        "SEND_MESSAGE_EVENT_SIG": "0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036"
      },
      "implementationNames": {
        "eth:0xE8cF9EbB1cFB137c692a0a4E470E257B9417d116": "PolygonHubConnector"
      }
    },
    {
      "address": "eth:0xebD4919C075417a86F19713dADe101852867A04F",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xEca085906cb531bdf1F87eFA85c5bE46aA5C9d2c",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GnosisSafe",
      "address": "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xd5a33441170541b7df25812e0e3dff6562b2f09ab835a6b431cb9e7198a47605",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x75bA5Af8EFFDCFca32E1e288806d54277D1fde99",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xaBcC9b596420A9E9172FD5938620E265a0f9Df92",
          "role": "admin"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1625059038,
      "sinceBlock": 12735567,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0xB65540bBA534E88EB4a5062D0E6519C07063b259",
          "eth:0x58edE8C66A15f23c61b8EadD1191FdaD904f7a87",
          "eth:0xf83bC4688979b13Da02CB94c76cEB169540760b5",
          "eth:0xebD4919C075417a86F19713dADe101852867A04F",
          "eth:0x5aA748326f03C651749E7998D88647e59Ee386Bc",
          "eth:0xEeD1Edd7599F2991159e3Fe71CC2010E9590037e",
          "eth:0x01a0A7BaAAca31AFB5b770FeFD69CE4917D9c32e",
          "eth:0xf0c1d7d38972c117F899Ea190afd6FeEee04E5fd",
          "eth:0x691C2EF68e25E620fa6cAdE2728f6aE34F37aAD2",
          "eth:0xAabB54394E8dd61Dd70897E9c80be8de7C64A895",
          "eth:0x6a0A93Cd6d6FB7a36bF6234ef4650Bf9474e7682",
          "eth:0x349f3839012DB2271e1BeC68F1668471D175Adb9"
        ],
        "$threshold": 5,
        "domainSeparator": "0x51fa071b746fb575ec1d78e1903334d2c675f19b8d2d07b7f66038bef3686401",
        "getChainId": 1,
        "GnosisSafe_modules": [
          "eth:0xCFbFaC74C26F8647cBDb8c5caf80BB5b32E43134"
        ],
        "multisigThreshold": "5 of 12 (42%)",
        "nonce": 211,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b": "Proxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "SkinnyOptimisticOracle",
      "address": "eth:0xeE3Afe347D5C74317041E2618C49534dAf887c24",
      "type": "Contract",
      "template": "uma/SkinnyOptimisticOracle",
      "sourceHashes": [
        "0xbe561564083bf80216ae0f5510f70415cf97a624ef4bad88fb98a43dc4231dd6"
      ],
      "proxyType": "immutable",
      "description": "Validates bridge messages by allowing proposers to make bonded assertions about crosschain events. It enforces a challenge period during which any invalid claims can be disputed and escalated to UMA's Data Verification Mechanism (DVM) for resolution.",
      "sinceTimestamp": 1635958318,
      "sinceBlock": 13545034,
      "values": {
        "$immutable": true,
        "ancillaryBytesLimit": 8192,
        "defaultLiveness": 7200,
        "finder": "eth:0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "timerAddress": "eth:0x0000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "eth:0xeE3Afe347D5C74317041E2618C49534dAf887c24": "SkinnyOptimisticOracle"
      }
    },
    {
      "address": "eth:0xEeD1Edd7599F2991159e3Fe71CC2010E9590037e",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xf0c1d7d38972c117F899Ea190afd6FeEee04E5fd",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GnosisHubConnector",
      "address": "eth:0xF1c78967584D5E0ffF66dA103b8eb06c82EC020d",
      "type": "Contract",
      "sourceHashes": [
        "0xbe5ddf3ceaa76404a16ca4237ea9850cc76d59636c8de1526fab611e7d70ae6f"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1701993275,
      "sinceBlock": 18737803,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x4C36d2919e407f0Cc2Ee3c993ccF8ac26d9CE64e",
        "delay": 604800,
        "DOMAIN": 6648936,
        "floor": 100,
        "gasCap": 4000000,
        "MIRROR_CHAIN_ID": 100,
        "MIRROR_DOMAIN": 6778479,
        "mirrorConnector": "eth:0xDF97CadbcCeE9cfdB12A3e9BB7663E6753A71a0C",
        "owner": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposed": "eth:0x0000000000000000000000000000000000000000",
        "proposedTimestamp": 0,
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0xF1c78967584D5E0ffF66dA103b8eb06c82EC020d": "GnosisHubConnector"
      }
    },
    {
      "address": "eth:0xF26c772C0fF3a6036bDdAbDAbA22cf65ECa9F97c",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "GnosisSafe",
      "address": "eth:0xf2964cCcB7CDA9e808aaBe8DB0DDDAF7890dd378",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1693608707,
      "sinceBlock": 18044793,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0x9b903Ae440CB1f01c342466D6DB6b57A5BF98C3f",
          "eth:0x7fB1B8D2C4a8186426Fb12a4Ae483f0093ED2315",
          "eth:0x3d7dF98257E5CEe5f032fd06a0aA510F89A19A2e",
          "eth:0x48fda6a16dEe5954bb0989b5B581d0623b48F06A",
          "eth:0xf8d8aF083aC452b05b0D2eb4499AD900324b5754"
        ],
        "$threshold": 3,
        "domainSeparator": "0xa721cba4d2f32af7fbfd7a202a7c61a16ec27fc0140de338b2f91560251fd997",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 5 (60%)",
        "nonce": 51,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0xf2964cCcB7CDA9e808aaBe8DB0DDDAF7890dd378": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "NewWormholeHubConnector",
      "address": "eth:0xf5a3372ed529FCD0690b6013EAaE04170ec0626b",
      "type": "Contract",
      "sourceHashes": [
        "0xa4857ef08af1733cc8a6fb1ce54561fe834c6dae2d6a2be176506833af7d6f9f"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["proposed", "proposedTimestamp"],
      "sinceTimestamp": 1706543459,
      "sinceBlock": 19113188,
      "values": {
        "$immutable": true,
        "AMB": "eth:0x27428DD2d3DD32A4D7f7C497eAaa23130d894911",
        "delay": 604800,
        "DOMAIN": 6648936,
        "gasCap": 300000,
        "MIRROR_DOMAIN": 1635148152,
        "MIRROR_WORMHOLE_ID": 6,
        "mirrorConnector": "eth:0x397aEEEDd44f40326f9eB583a1DFB8A7A673C40B",
        "owner": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "proposed": "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625",
        "proposedTimestamp": 1712618243,
        "refundAddress": "eth:0xade09131C6f43fe22C2CbABb759636C43cFc181e",
        "renounced": false,
        "ROOT_MANAGER": "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A"
      },
      "implementationNames": {
        "eth:0xf5a3372ed529FCD0690b6013EAaE04170ec0626b": "WormholeHubConnector"
      }
    },
    {
      "address": "eth:0xf83bC4688979b13Da02CB94c76cEB169540760b5",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xf8d8aF083aC452b05b0D2eb4499AD900324b5754",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Relayer11",
      "address": "eth:0xF9D64d54D32EE2BDceAAbFA60C4C438E224427d0",
      "type": "Contract",
      "sourceHashes": [
        "0x70de0f52f9c98e17b083184c29d00c0c7ba199299d2758c1ec88e6af3428b060"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1706628131,
      "sinceBlock": 19120190,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xF9D64d54D32EE2BDceAAbFA60C4C438E224427d0": "GelatoRelay1BalanceV2"
      }
    },
    {
      "address": "eth:0xFaAB88015477493cFAa5DFAA533099C590876F21",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OptimisticOracleV3",
      "address": "eth:0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE",
      "type": "Contract",
      "template": "uma/OptimisticOracleV3",
      "sourceHashes": [
        "0xfb2c9056673690384bb615fd326655f97b80fa2a5601a15a35065b0a68186ae7"
      ],
      "proxyType": "immutable",
      "description": "Standard UMA optimistic oracle contract that allows anyone to make an arbitrary claim by posting a bond. The claim is considered true unless it is successfully disputed within a challenge window, with UMA's DVM acting as the final arbiter for disputes.",
      "sinceTimestamp": 1676487275,
      "sinceBlock": 16636058,
      "values": {
        "$immutable": true,
        "burnedBondPercentage": "500000000000000000",
        "cachedOracle": "eth:0x004395edb43EFca9885CEdad51EC9fAf93Bd34ac",
        "defaultCurrency": "eth:0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "defaultIdentifier": "0x4153534552545f54525554480000000000000000000000000000000000000000",
        "defaultLiveness": 7200,
        "finder": "eth:0x40f941E48A552bF496B154Af6bf55725f18D77c3",
        "numericalTrue": "1000000000000000000",
        "owner": "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8"
      },
      "implementationNames": {
        "eth:0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE": "OptimisticOracleV3"
      }
    }
  ],
  "abis": {
    "eth:0x02fdF04AF077687CDA03Bd3162388b7972A4a1Cc": [
      "constructor(tuple(uint32 domain, uint32 mirrorDomain, address amb, address rootManager, address mirrorConnector, uint256 processGas, uint256 reserveGas, uint256 delayBlocks, address merkle, address watcherManager, uint256 minDisputeBlocks, uint256 disputeBlocks) _baseSpokeParams)",
      "error Connector__processMessage_notUsed()",
      "error MainnetSpokeConnector_finalize__DeprecatedInHubDomain()",
      "error MainnetSpokeConnector_proposeAggregateRoot__DeprecatedInHubDomain()",
      "error MainnetSpokeConnector_saveAggregateRoot__CallerIsNotRootManager()",
      "error MainnetSpokeConnector_saveAggregateRoot__EmptyRoot()",
      "error MainnetSpokeConnector_saveAggregateRoot__OnlyOptimisticMode()",
      "error MainnetSpokeConnector_saveAggregateRoot__RootAlreadyProven()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error RateLimited__rateLimited_messageSendRateExceeded()",
      "error SpokeConnector_activateOptimisticMode__OptimisticModeOn()",
      "error SpokeConnector_constructor__DisputeBlocksLowerThanMin()",
      "error SpokeConnector_finalize__InvalidInputHash()",
      "error SpokeConnector_finalize__ProposeInProgress()",
      "error SpokeConnector_finalize__ProposedHashIsFinalizedHash()",
      "error SpokeConnector_onlyOptimisticMode__SlowModeOn()",
      "error SpokeConnector_onlyProposer__NotAllowlistedProposer()",
      "error SpokeConnector_proposeAggregateRoot__ProposeInProgress()",
      "error SpokeConnector_receiveAggregateRoot__OptimisticModeOn()",
      "error SpokeConnector_setDisputeBlocks__DisputeBlocksLowerThanMin()",
      "error SpokeConnector_setDisputeBlocks__SameDisputeBlocksAsBefore()",
      "error SpokeConnector_setMinDisputeBlocks__SameMinDisputeBlocksAsBefore()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "error TypedMemView__unsafeCopyTo_identityOOG()",
      "error TypedMemView__unsafeCopyTo_invalidPointer()",
      "error TypedMemView__unsafeCopyTo_nullPointer()",
      "event AggregateRootProposed(bytes32 indexed aggregateRoot, uint256 indexed rootTimestamp, uint256 indexed endOfDispute, uint32 domain)",
      "event AggregateRootReceived(bytes32 indexed root)",
      "event AggregateRootRemoved(bytes32 indexed root)",
      "event AggregateRootVerified(bytes32 indexed root)",
      "event DelayBlocksUpdated(uint256 indexed updated, address caller)",
      "event Dispatch(bytes32 indexed leaf, uint256 indexed index, bytes32 indexed root, bytes message)",
      "event DisputeBlocksUpdated(uint256 previous, uint256 updated)",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageProven(bytes32 indexed leaf, bytes32 indexed aggregateRoot, uint256 aggregateIndex)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MinDisputeBlocksUpdated(uint256 previous, uint256 updated)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OptimisticModeActivated()",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event PendingAggregateRootDeleted(bytes32 indexed aggregateRoot)",
      "event Process(bytes32 indexed leaf, bool success, bytes returnData)",
      "event ProposedRootFinalized(bytes32 aggregateRoot)",
      "event ProposerAdded(address indexed proposer)",
      "event ProposerRemoved(address indexed proposer)",
      "event SendRateLimitUpdated(address updater, uint256 newRateLimit)",
      "event SenderAdded(address indexed sender)",
      "event SenderRemoved(address indexed sender)",
      "event SlowModeActivated(address indexed watcher)",
      "event SnapshotRootSaved(uint256 indexed snapshotId, bytes32 indexed root, uint256 indexed count)",
      "event Unpaused(address account)",
      "event WatcherManagerChanged(address watcherManager)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function FINALIZED_HASH() view returns (bytes32)",
      "function MERKLE() view returns (address)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function PROCESS_GAS() view returns (uint256)",
      "function RESERVE_GAS() view returns (uint256)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function activateOptimisticMode()",
      "function activateSlowMode()",
      "function addProposer(address _proposer)",
      "function addSender(address _sender)",
      "function allowlistedProposers(address) view returns (bool)",
      "function allowlistedSenders(address) view returns (bool)",
      "function delay() view returns (uint256)",
      "function delayBlocks() view returns (uint256)",
      "function dispatch(uint32 _destinationDomain, bytes32 _recipientAddress, bytes _messageBody) returns (bytes32, bytes)",
      "function disputeBlocks() view returns (uint256)",
      "function finalize(bytes32 _proposedAggregateRoot, uint256 _rootTimestamp, uint256 _endOfDispute)",
      "function getLastCompletedSnapshotId() view returns (uint256 _lastCompletedSnapshotId)",
      "function getSnapshotDuration() pure returns (uint256 _snapshotDuration)",
      "function home() view returns (address)",
      "function isReplica(address _potentialReplica) view returns (bool)",
      "function lastSentBlock() view returns (uint256)",
      "function localDomain() view returns (uint32)",
      "function minDisputeBlocks() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function optimisticMode() view returns (bool)",
      "function outboundRoot() view returns (bytes32)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingAggregateRoots(bytes32) view returns (uint256)",
      "function processMessage(bytes _data)",
      "function proposeAggregateRoot(bytes32 _aggregateRoot, uint256 _rootTimestamp)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedAggregateRootHash() view returns (bytes32)",
      "function proposedTimestamp() view returns (uint256)",
      "function proveAndProcess(tuple(bytes message, bytes32[32] path, uint256 index)[] _proofs, bytes32 _aggregateRoot, bytes32[32] _aggregatePath, uint256 _aggregateIndex)",
      "function provenAggregateRoots(bytes32) view returns (bool)",
      "function provenMessageRoots(bytes32) view returns (bool)",
      "function rateLimitBlocks() view returns (uint256)",
      "function removePendingAggregateRoot(bytes32 _fraudulentRoot)",
      "function removeProposer(address _proposer)",
      "function removeSender(address _sender)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function saveAggregateRoot(bytes32 _aggregateRoot)",
      "function send(bytes _encodedData) payable",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function sentMessageRoots(bytes32) view returns (bool)",
      "function setDelayBlocks(uint256 _delayBlocks)",
      "function setDisputeBlocks(uint256 _disputeBlocks)",
      "function setMinDisputeBlocks(uint256 _minDisputeBlocks)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function setRateLimitBlocks(uint256 _rateLimit)",
      "function setWatcherManager(address _watcherManager)",
      "function snapshotRoots(uint256) view returns (bytes32)",
      "function unpause()",
      "function verifySender(address _expected) returns (bool)",
      "function watcherManager() view returns (address)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0x086B5A16D7Bd6B2955fCC7d5F9AA2a1544b67e0d": [
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error ProposedOwnableFacet__acceptProposedOwner_noOwnershipChange()",
      "error ProposedOwnableFacet__assignRoleAdmin_invalidInput()",
      "error ProposedOwnableFacet__assignRoleRouter_invalidInput()",
      "error ProposedOwnableFacet__assignRoleWatcher_invalidInput()",
      "error ProposedOwnableFacet__delayElapsed_delayNotElapsed()",
      "error ProposedOwnableFacet__proposeAssetAllowlistRemoval_noOwnershipChange()",
      "error ProposedOwnableFacet__proposeNewOwner_invalidProposal()",
      "error ProposedOwnableFacet__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnableFacet__proposeRouterAllowlistRemoval_noOwnershipChange()",
      "error ProposedOwnableFacet__removeAssetAllowlist_noOwnershipChange()",
      "error ProposedOwnableFacet__removeAssetAllowlist_noProposal()",
      "error ProposedOwnableFacet__removeRouterAllowlist_noOwnershipChange()",
      "error ProposedOwnableFacet__removeRouterAllowlist_noProposal()",
      "error ProposedOwnableFacet__revokeRole_invalidInput()",
      "event AssignRoleAdmin(address admin)",
      "event AssignRoleRouter(address router)",
      "event AssignRoleWatcher(address watcher)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused()",
      "event RevokeRole(address revokedAddress, uint8 revokedRole)",
      "event RouterAllowlistRemovalProposed(uint256 timestamp)",
      "event RouterAllowlistRemoved(bool renounced)",
      "event Unpaused()",
      "function acceptProposedOwner()",
      "function assignRoleAdmin(address _admin)",
      "function assignRoleRouterAdmin(address _router)",
      "function assignRoleWatcher(address _watcher)",
      "function delay() view returns (uint256)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposeRouterAllowlistRemoval()",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function queryRole(address _role) view returns (uint8)",
      "function removeRouterAllowlist()",
      "function revokeRole(address _revoke)",
      "function routerAllowlistRemoved() view returns (bool)",
      "function routerAllowlistTimestamp() view returns (uint256)",
      "function unpause()"
    ],
    "eth:0x172fB6b07D6aB708dd67392a09e1c40d16dA0460": [
      "constructor(address _finder, address _owner, address _collateral, uint256 _bondAmount, string _rules, bytes32 _identifier, uint64 _liveness)",
      "error NotIERC165Compliant(address guard_)",
      "event AvatarSet(address indexed previousAvatar, address indexed newAvatar)",
      "event ChangedGuard(address guard)",
      "event Initialized(uint8 version)",
      "event OptimisticGovernorDeployed(address indexed owner, address indexed avatar, address target)",
      "event OptimisticOracleChanged(address indexed newOptimisticOracleV3)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalDeleted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event ProposalExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId)",
      "event SetCollateralAndBond(address indexed collateral, uint256 indexed bondAmount)",
      "event SetEscalationManager(address indexed escalationManager)",
      "event SetIdentifier(bytes32 indexed identifier)",
      "event SetLiveness(uint64 indexed liveness)",
      "event SetRules(string rules)",
      "event TargetSet(address indexed previousTarget, address indexed newTarget)",
      "event TransactionExecuted(bytes32 indexed proposalHash, bytes32 indexed assertionId, uint256 indexed transactionIndex)",
      "event TransactionsProposed(address indexed proposer, uint256 indexed proposalTime, bytes32 indexed assertionId, tuple(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, uint256 requestTime) proposal, bytes32 proposalHash, bytes explanation, string rules, uint256 challengeWindowEnds)",
      "function EXPLANATION_KEY() view returns (bytes)",
      "function PROPOSAL_HASH_KEY() view returns (bytes)",
      "function RULES_KEY() view returns (bytes)",
      "function assertionDisputedCallback(bytes32 assertionId)",
      "function assertionIds(bytes32) view returns (bytes32)",
      "function assertionResolvedCallback(bytes32 assertionId, bool assertedTruthfully)",
      "function avatar() view returns (address)",
      "function bondAmount() view returns (uint256)",
      "function collateral() view returns (address)",
      "function deleteProposalOnUpgrade(bytes32 proposalHash)",
      "function escalationManager() view returns (address)",
      "function executeProposal(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getGuard() view returns (address _guard)",
      "function getProposalBond() view returns (uint256)",
      "function guard() view returns (address)",
      "function identifier() view returns (bytes32)",
      "function liveness() view returns (uint64)",
      "function optimisticOracleV3() view returns (address)",
      "function owner() view returns (address)",
      "function proposalHashes(bytes32) view returns (bytes32)",
      "function proposeTransactions(tuple(address to, uint8 operation, uint256 value, bytes data)[] transactions, bytes explanation)",
      "function renounceOwnership()",
      "function rules() view returns (string)",
      "function setAvatar(address _avatar)",
      "function setCollateralAndBond(address _collateral, uint256 _bondAmount)",
      "function setEscalationManager(address _escalationManager)",
      "function setGuard(address _guard)",
      "function setIdentifier(bytes32 _identifier)",
      "function setLiveness(uint64 _liveness)",
      "function setRules(string _rules)",
      "function setTarget(address _target)",
      "function setUp(bytes initializeParams)",
      "function sync()",
      "function target() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0x23b7abe4cc664F24Eb68E80cFAdc572857799a94": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _optimismPortal, uint256 _gasCap)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function OPTIMISM_PORTAL() view returns (address)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _l2OutputIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function processed(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0x279fDA9AdDB854541f0bb86733d924e28c24c625": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint32 _mirrorNetworkId)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function onMessageReceived(address originAddress, uint32 originNetwork, bytes data) payable",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0x28A9e7bbed277092E2431F186E1aF898962d4E92": [
      "constructor(address _upgradeBeacon, bytes _initializationCalldata) payable"
    ],
    "eth:0x29fcB43b46531BcA003ddC8FCB67FFE91900C762": [
      "event AddedOwner(address indexed owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address indexed handler)",
      "event ChangedGuard(address indexed guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address indexed module)",
      "event EnabledModule(address indexed module)",
      "event ExecutionFailure(bytes32 indexed txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 indexed txHash, uint256 payment)",
      "event RemovedOwner(address indexed owner)",
      "event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)",
      "event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0x324c5834cD3bD19c4991F4fC5b3a0Ff5257a692b": [
      "event DiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "event DiamondCutProposed(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata, uint256 deadline)",
      "event DiamondCutRescinded(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function diamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function getAcceptanceTime(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata) view returns (uint256)",
      "function proposeDiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
      "function rescindDiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)"
    ],
    "eth:0x3606b0D9c84224892C7407d4e8DCfd7E9E2126A2": [
      "error AssetLogic__getConfig_notRegistered()",
      "error AssetLogic__getTokenIndexFromStableSwapPool_notExist()",
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error BridgeFacet__addRemote_invalidDomain()",
      "error BridgeFacet__addRemote_invalidRouter()",
      "error BridgeFacet__addSequencer_alreadyApproved()",
      "error BridgeFacet__addSequencer_invalidSequencer()",
      "error BridgeFacet__bumpTransfer_noRelayerVault()",
      "error BridgeFacet__bumpTransfer_valueIsZero()",
      "error BridgeFacet__excecute_insufficientGas()",
      "error BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn()",
      "error BridgeFacet__execute_badFastLiquidityStatus()",
      "error BridgeFacet__execute_externalCallFailed()",
      "error BridgeFacet__execute_invalidRouterSignature()",
      "error BridgeFacet__execute_invalidSequencerSignature()",
      "error BridgeFacet__execute_maxRoutersExceeded()",
      "error BridgeFacet__execute_notApprovedForPortals()",
      "error BridgeFacet__execute_notReconciled()",
      "error BridgeFacet__execute_notSupportedRouter()",
      "error BridgeFacet__execute_notSupportedSequencer()",
      "error BridgeFacet__execute_unapprovedSender()",
      "error BridgeFacet__execute_wrongDomain()",
      "error BridgeFacet__forceReceiveLocal_notDestination()",
      "error BridgeFacet__forceUpdateSlippage_invalidSlippage()",
      "error BridgeFacet__forceUpdateSlippage_notDestination()",
      "error BridgeFacet__mustHaveRemote_destinationNotSupported()",
      "error BridgeFacet__onlyDelegate_notDelegate()",
      "error BridgeFacet__removeSequencer_notApproved()",
      "error BridgeFacet__setXAppConnectionManager_domainsDontMatch()",
      "error BridgeFacet__xcall_capReached()",
      "error BridgeFacet__xcall_emptyTo()",
      "error BridgeFacet__xcall_invalidSlippage()",
      "error BridgeFacet__xcall_nativeAssetNotSupported()",
      "error BridgeFacet_xcall__emptyLocalAsset()",
      "event AavePortalMintUnbacked(bytes32 indexed transferId, address indexed router, address asset, uint256 amount)",
      "event Executed(bytes32 indexed transferId, address indexed to, address indexed asset, tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) args, address local, uint256 amount, address caller)",
      "event ExternalCalldataExecuted(bytes32 indexed transferId, bool success, bytes returnData)",
      "event ForceReceiveLocal(bytes32 indexed transferId)",
      "event RemoteAdded(uint32 domain, address remote, address caller)",
      "event SequencerAdded(address sequencer, address caller)",
      "event SequencerRemoved(address sequencer, address caller)",
      "event SlippageUpdated(bytes32 indexed transferId, uint256 slippage)",
      "event TransferRelayerFeesIncreased(bytes32 indexed transferId, uint256 increase, address asset, address caller)",
      "event XAppConnectionManagerSet(address updated, address caller)",
      "event XCalled(bytes32 indexed transferId, uint256 indexed nonce, bytes32 indexed messageHash, tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address asset, uint256 amount, address local, bytes messageBody)",
      "function addSequencer(address _sequencer)",
      "function approvedSequencers(address _sequencer) view returns (bool)",
      "function bumpTransfer(bytes32 _transferId) payable",
      "function bumpTransfer(bytes32 _transferId, address _relayerFeeAsset, uint256 _relayerFee)",
      "function domain() view returns (uint32)",
      "function enrollRemoteRouter(uint32 _domain, bytes32 _router)",
      "function execute(tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) _args) returns (bytes32)",
      "function forceReceiveLocal(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params)",
      "function forceUpdateSlippage(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, uint256 _slippage)",
      "function nonce() view returns (uint256)",
      "function remote(uint32 _domain) view returns (address)",
      "function removeSequencer(address _sequencer)",
      "function routedTransfers(bytes32 _transferId) view returns (address[])",
      "function setXAppConnectionManager(address _xAppConnectionManager)",
      "function transferStatus(bytes32 _transferId) view returns (uint8)",
      "function xAppConnectionManager() view returns (address)",
      "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)",
      "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
      "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
      "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)"
    ],
    "eth:0x3Bcf4185443A339517aD4e580067f178d1B68E1D": [
      "function facetAddress(bytes4 _functionSelector) view returns (address facetAddress_)",
      "function facetAddresses() view returns (address[] facetAddresses_)",
      "function facetFunctionSelectors(address _facet) view returns (bytes4[] facetFunctionSelectors_)",
      "function facets() view returns (tuple(address facetAddress, bytes4[] functionSelectors)[] facets_)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)"
    ],
    "eth:0x3e532e6222afe9Bcf02DCB87216802c75D5113aE": [
      "constructor()",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties)",
      "event PartyAdded(address indexed contractAddress, address indexed party)",
      "event PartyRemoved(address indexed contractAddress, address indexed party)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function addMember(uint256 roleId, address newMember)",
      "function addPartyToContract(address party)",
      "function contractMap(address) view returns (uint8 valid, uint128 index)",
      "function getAllRegisteredContracts() view returns (address[])",
      "function getMember(uint256 roleId) view returns (address)",
      "function getRegisteredContracts(address party) view returns (address[])",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function isContractRegistered(address contractAddress) view returns (bool)",
      "function isPartyMemberOfContract(address party, address contractAddress) view returns (bool)",
      "function registerContract(address[] parties, address contractAddress)",
      "function registeredContracts(uint256) view returns (address)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function removePartyFromContract(address partyAddress)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)"
    ],
    "eth:0x40f941E48A552bF496B154Af6bf55725f18D77c3": [
      "event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)",
      "function getImplementationAddress(bytes32 interfaceName) view returns (address implementationAddress)",
      "function interfacesImplemented(bytes32) view returns (address)",
      "function isOwner() view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0x43100A190C3FeAE37Cb1f5d880e8fa8d81BE5CB9": [
      "constructor(address _gelato)",
      "function ETH() view returns (address)",
      "function exec(address _dest, bytes _data, uint256 _desiredFee, address _token)",
      "function gelato() view returns (address)",
      "function paymentToken() view returns (address)",
      "function sufficientFee(address _dest, bytes _data, uint256 _desiredFee, address _token) returns (bool canExec, uint256 receivedFee, uint256 desiredFeee)"
    ],
    "eth:0x44e799f47A5599f5c9158d1F2457E30A6D77aDb4": [
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error DiamondInit__init_alreadyInitialized()",
      "error DiamondInit__init_domainsDontMatch()",
      "function init(uint32 _domain, address _xAppConnectionManager, uint256 _acceptanceDelay, address _lpTokenTargetAddress)"
    ],
    "eth:0x4d50a469fc788a3c0CdC8Fd67868877dCb246625": [
      "constructor(address _singleton)"
    ],
    "eth:0x50efaC9619225d7fB4703C5872da978849B6E7cC": [
      "constructor(address _token, uint256 _bond, address _governor, address _finder)",
      "event BondSet(uint256 bond)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalResolved(uint256 indexed id, bool success)",
      "function bond() view returns (uint256)",
      "function bondedProposals(uint256) view returns (address sender, uint64 time, uint256 lockedBond, bytes ancillaryData)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function governor() view returns (address)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function owner() view returns (address)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions, bytes ancillaryData) returns (uint256)",
      "function renounceOwnership()",
      "function resolveProposal(uint256 id)",
      "function setBond(uint256 _bond)",
      "function token() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0x523AB7424AD126809b1d7A134eb6E0ee414C9B3A": [
      "constructor(uint256 _delayBlocks, address _merkle, address _watcherManager, uint256 _minDisputeBlocks, uint256 _disputeBlocks)",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error RootManager__renounceOwnership_prohibited()",
      "error RootManager_activateOptimisticMode__OptimisticModeOn()",
      "error RootManager_aggregate__OptimisticModeOn()",
      "error RootManager_checkDomains__InvalidDomains()",
      "error RootManager_constructor__DisputeBlocksLowerThanMin()",
      "error RootManager_finalize__InvalidAggregateRoot()",
      "error RootManager_finalize__InvalidInputHash()",
      "error RootManager_finalize__ProposeInProgress()",
      "error RootManager_onlyOptimisticMode__SlowModeOn()",
      "error RootManager_onlyProposer__NotWhitelistedProposer(address caller)",
      "error RootManager_propagate__AggregateRootIsZero()",
      "error RootManager_proposeAggregateRoot__InvalidSnapshotId(uint256 snapshotId)",
      "error RootManager_proposeAggregateRoot__ProposeInProgress()",
      "error RootManager_sendRootToHub__NoMessageSent()",
      "error RootManager_setDisputeBlocks__DisputeBlocksLowerThanMin()",
      "error RootManager_setDisputeBlocks__SameDisputeBlocksAsBefore()",
      "error RootManager_setHubDomain__InvalidDomain()",
      "error RootManager_setMinDisputeBlocks__SameMinDisputeBlocksAsBefore()",
      "event AggregateRootPropagated(bytes32 indexed aggregateRoot, bytes32 domainsHash)",
      "event AggregateRootProposed(uint256 indexed snapshotId, uint256 endOfDispute, bytes32 indexed aggregateRoot, bytes32 indexed baseRoot, bytes32[] snapshotsRoots, uint32[] domains)",
      "event AggregateRootSavedOptimistic(bytes32 indexed aggregateRoot, uint256 rootTimestamp)",
      "event AggregateRootSavedSlow(bytes32 indexed aggregateRoot, uint256 leafCount, bytes32[] aggregatedRoots, uint256 rootTimestamp)",
      "event ConnectorAdded(uint32 domain, address connector, uint32[] domains, address[] connectors)",
      "event ConnectorRemoved(uint32 domain, address connector, uint32[] domains, address[] connectors, address caller)",
      "event DelayBlocksUpdated(uint256 previous, uint256 updated)",
      "event DisputeBlocksUpdated(uint256 previous, uint256 updated)",
      "event DomainAdded(uint32 domain, address connector)",
      "event DomainRemoved(uint32 domain)",
      "event HubDomainCleared()",
      "event HubDomainSet(uint32 domain)",
      "event MinDisputeBlocksUpdated(uint256 previous, uint256 updated)",
      "event OptimisticModeActivated()",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event PropagateFailed(uint32 domain, address connector)",
      "event ProposerAdded(address indexed proposer)",
      "event ProposerRemoved(address indexed proposer)",
      "event RootDiscarded(bytes32 fraudulentRoot)",
      "event RootReceived(uint32 domain, bytes32 receivedRoot, uint256 queueIndex)",
      "event SlowModeActivated(address indexed watcher)",
      "event Unpaused(address account)",
      "event WatcherManagerChanged(address watcherManager)",
      "function DEQUEUE_MAX() view returns (uint128)",
      "function FINALIZED_HASH() view returns (bytes32)",
      "function MAX_DOMAINS() view returns (uint256)",
      "function MERKLE() view returns (address)",
      "function acceptProposedOwner()",
      "function activateOptimisticMode()",
      "function activateSlowMode()",
      "function addConnector(uint32 _domain, address _connector)",
      "function addProposer(address _proposer)",
      "function aggregate(uint32 _domain, bytes32 _inbound)",
      "function allowlistedProposers(address) view returns (bool)",
      "function clearHubDomain()",
      "function connectors(uint256) view returns (address)",
      "function connectorsHash() view returns (bytes32)",
      "function delay() view returns (uint256)",
      "function delayBlocks() view returns (uint256)",
      "function dequeue() returns (bytes32, uint256)",
      "function discardRoot(bytes32 _root)",
      "function disputeBlocks() view returns (uint256)",
      "function domains(uint256) view returns (uint32)",
      "function domainsHash() view returns (bytes32)",
      "function finalize(bytes32 _proposedAggregateRoot, uint256 _endOfDispute)",
      "function finalizeAndPropagate(address[] _connectors, uint256[] _fees, bytes[] _encodedData, bytes32 _proposedAggregateRoot, uint256 _endOfDispute) payable",
      "function getConnectorForDomain(uint32 _domain) view returns (address)",
      "function getDomainIndex(uint32 _domain) view returns (uint256)",
      "function getPendingInboundRootsCount() view returns (uint256)",
      "function getSnapshotDuration() pure returns (uint256 _snapshotDuration)",
      "function hubDomain() view returns (uint32)",
      "function isDomainSupported(uint32 _domain) view returns (bool)",
      "function lastPropagatedRoot(uint32) view returns (bytes32)",
      "function lastSavedAggregateRootTimestamp() view returns (uint256)",
      "function minDisputeBlocks() view returns (uint256)",
      "function optimisticMode() view returns (bool)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pendingInboundRoots() view returns (uint128 first, uint128 last)",
      "function propagate(address[] _connectors, uint256[] _fees, bytes[] _encodedData) payable",
      "function proposeAggregateRoot(uint256 _snapshotId, bytes32 _aggregateRoot, bytes32[] _snapshotsRoots, uint32[] _domains)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedAggregateRootHash() view returns (bytes32)",
      "function proposedTimestamp() view returns (uint256)",
      "function removeConnector(uint32 _domain)",
      "function removeProposer(address _proposer)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendRootToHubSpoke()",
      "function setDelayBlocks(uint256 _delayBlocks)",
      "function setDisputeBlocks(uint256 _disputeBlocks)",
      "function setHubDomain(uint32 _domain)",
      "function setMinDisputeBlocks(uint256 _minDisputeBlocks)",
      "function setWatcherManager(address _watcherManager)",
      "function unpause()",
      "function validAggregateRoots(uint256) view returns (bytes32)",
      "function validateConnectors(address[] _connectors) view",
      "function validateDomains(uint32[] _domains, address[] _connectors) view",
      "function watcherManager() view returns (address)"
    ],
    "eth:0x54f44eA3D2e7aA0ac089c4d8F7C93C27844057BF": [
      "constructor(tuple(uint256 rawValue) _fixedOracleFeePerSecondPerPfc, tuple(uint256 rawValue) _weeklyDelayFeePerSecondPerPfc, address _timerAddress)",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event NewFinalFee(tuple(uint256 rawValue) newFinalFee)",
      "event NewFixedOracleFeePerSecondPerPfc(tuple(uint256 rawValue) newOracleFee)",
      "event NewWeeklyDelayFeePerSecondPerPfc(tuple(uint256 rawValue) newWeeklyDelayFeePerSecondPerPfc)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function SECONDS_PER_WEEK() view returns (uint256)",
      "function addMember(uint256 roleId, address newMember)",
      "function computeFinalFee(address currency) view returns (tuple(uint256 rawValue))",
      "function computeRegularFee(uint256 startTime, uint256 endTime, tuple(uint256 rawValue) pfc) view returns (tuple(uint256 rawValue) regularFee, tuple(uint256 rawValue) latePenalty)",
      "function finalFees(address) view returns (uint256 rawValue)",
      "function fixedOracleFeePerSecondPerPfc() view returns (uint256 rawValue)",
      "function getCurrentTime() view returns (uint256)",
      "function getMember(uint256 roleId) view returns (address)",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function payOracleFees() payable",
      "function payOracleFeesErc20(address erc20Address, tuple(uint256 rawValue) amount)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)",
      "function setCurrentTime(uint256 time)",
      "function setFinalFee(address currency, tuple(uint256 rawValue) newFinalFee)",
      "function setFixedOracleFeePerSecondPerPfc(tuple(uint256 rawValue) newFixedOracleFeePerSecondPerPfc)",
      "function setWeeklyDelayFeePerSecondPerPfc(tuple(uint256 rawValue) newWeeklyDelayFeePerSecondPerPfc)",
      "function timerAddress() view returns (address)",
      "function weeklyDelayFeePerSecondPerPfc() view returns (uint256 rawValue)",
      "function withdraw(uint256 amount)",
      "function withdrawErc20(address erc20Address, uint256 amount)"
    ],
    "eth:0x56Ab287e5c33Ee70158c951f34818bd095446255": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function claimMessage(bytes _calldata, uint256 _nonce)",
      "function delay() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0x5B0E1a507E786f0a7c11C972ad5F4dd254661e24": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _stateCommitmentChain, uint256 _gasCap)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(address _target, address _sender, bytes _message, uint256 _messageNonce, tuple(bytes32 stateRoot, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes signature, bytes extraData) stateRootBatchHeader, tuple(uint256 index, bytes32[] siblings) stateRootProof, bytes stateTrieWitness, bytes storageTrieWitness) _proof)",
      "function processed(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function stateCommitmentChain() view returns (address)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0x5c2149869146DeA55cDD1CF2DD828e4e1548bb2A": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _optimismPortal, uint256 _gasCap)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function OPTIMISM_PORTAL() view returns (address)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _l2OutputIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function processed(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0x5Ccd25372A41eeB3D4E5353879Bb28213dF5a295": [
      "error AssetLogic__getConfig_notRegistered()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error InboxFacet__handle_notTransfer()",
      "error InboxFacet__onlyRemoteRouter_notRemote()",
      "error InboxFacet__onlyReplica_notReplica()",
      "error InboxFacet__reconcile_alreadyReconciled()",
      "error InboxFacet__reconcile_noPortalRouter()",
      "error TypedMemView__assertType_typeAssertionFailed(uint256 actual, uint256 expected)",
      "error TypedMemView__assertValid_validityAssertionFailed()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "event Receive(uint64 indexed originAndNonce, address indexed token, address indexed recipient, address liquidityProvider, uint256 amount)",
      "event Reconciled(bytes32 indexed transferId, uint32 indexed originDomain, address indexed local, address[] routers, uint256 amount, address caller)",
      "function handle(uint32 _origin, uint32 _nonce, bytes32 _sender, bytes _message)"
    ],
    "eth:0x6369F971fd1f1f230B8584151Ed7747FF710Cc68": [
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error SwapAdminFacet__disableSwap_alreadyDisabled()",
      "error SwapAdminFacet__disableSwap_notInitialized()",
      "error SwapAdminFacet__initializeSwap_aExceedMax()",
      "error SwapAdminFacet__initializeSwap_adminFeeExceedMax()",
      "error SwapAdminFacet__initializeSwap_alreadyInitialized()",
      "error SwapAdminFacet__initializeSwap_decimalsMismatch()",
      "error SwapAdminFacet__initializeSwap_duplicateTokens()",
      "error SwapAdminFacet__initializeSwap_failedInitLpTokenClone()",
      "error SwapAdminFacet__initializeSwap_feeExceedMax()",
      "error SwapAdminFacet__initializeSwap_invalidPooledTokens()",
      "error SwapAdminFacet__initializeSwap_tokenDecimalsExceedMax()",
      "error SwapAdminFacet__initializeSwap_zeroTokenAddress()",
      "error SwapAdminFacet__removeSwap_delayNotElapsed()",
      "error SwapAdminFacet__removeSwap_notDisabledPool()",
      "error SwapAdminFacet__removeSwap_notInitialized()",
      "error SwapAdminFacet__updateLpTokenTarget_invalidNewAddress()",
      "event AdminFeesSet(bytes32 indexed key, uint256 newAdminFee, address caller)",
      "event AdminFeesWithdrawn(bytes32 indexed key, address caller)",
      "event LPTokenTargetUpdated(address oldAddress, address newAddress, address caller)",
      "event RampAStarted(bytes32 indexed key, uint256 futureA, uint256 futureTime, address caller)",
      "event RampAStopped(bytes32 indexed key, address caller)",
      "event SwapDisabled(bytes32 indexed key, address caller)",
      "event SwapFeesSet(bytes32 indexed key, uint256 newSwapFee, address caller)",
      "event SwapInitialized(bytes32 indexed key, tuple(bytes32 key, uint256 initialA, uint256 futureA, uint256 initialATime, uint256 futureATime, uint256 swapFee, uint256 adminFee, address lpToken, address[] pooledTokens, uint256[] tokenPrecisionMultipliers, uint256[] balances, uint256[] adminFees, bool disabled, uint256 removeTime) swap, address caller)",
      "event SwapRemoved(bytes32 indexed key, address caller)",
      "function disableSwap(bytes32 _key)",
      "function initializeSwap(bytes32 _key, address[] _pooledTokens, uint8[] decimals, string lpTokenName, string lpTokenSymbol, uint256 _a, uint256 _fee, uint256 _adminFee)",
      "function isDisabled(bytes32 key) view returns (bool)",
      "function lpTokenTargetAddress() view returns (address)",
      "function rampA(bytes32 key, uint256 futureA, uint256 futureTime)",
      "function removeSwap(bytes32 _key)",
      "function setSwapAdminFee(bytes32 key, uint256 newAdminFee)",
      "function setSwapFee(bytes32 key, uint256 newSwapFee)",
      "function stopRampA(bytes32 key)",
      "function updateLpTokenTarget(address newAddress)",
      "function withdrawSwapAdminFees(bytes32 key)"
    ],
    "eth:0x63c0c19a282a1B52b07dD5a65b58948A07DAE32B": [
      "constructor(address _delegationManager, address _entryPoint)",
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error ExecutionFailed()",
      "error InvalidEIP712NameLength()",
      "error InvalidEIP712VersionLength()",
      "error InvalidShortString()",
      "error NotDelegationManager()",
      "error NotEntryPoint()",
      "error NotEntryPointOrSelf()",
      "error NotSelf()",
      "error StringTooLong(string str)",
      "error UnauthorizedCallContext()",
      "error UnsupportedCallType(bytes1 callType)",
      "error UnsupportedExecType(bytes1 execType)",
      "event EIP712DomainChanged()",
      "event SentPrefund(address indexed sender, uint256 amount, bool success)",
      "event SetDelegationManager(address indexed newDelegationManager)",
      "event SetEntryPoint(address indexed entryPoint)",
      "event TryExecuteUnsuccessful(uint256 batchExecutionindex, bytes result)",
      "function DOMAIN_VERSION() view returns (string)",
      "function NAME() view returns (string)",
      "function PACKED_USER_OP_TYPEHASH() view returns (bytes32)",
      "function VERSION() view returns (string)",
      "function addDeposit() payable",
      "function delegationManager() view returns (address)",
      "function disableDelegation(tuple(address delegate, address delegator, bytes32 authority, tuple(address enforcer, bytes terms, bytes args)[] caveats, uint256 salt, bytes signature) _delegation)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function enableDelegation(tuple(address delegate, address delegator, bytes32 authority, tuple(address enforcer, bytes terms, bytes args)[] caveats, uint256 salt, bytes signature) _delegation)",
      "function entryPoint() view returns (address)",
      "function execute(tuple(address target, uint256 value, bytes callData) _execution) payable",
      "function execute(bytes32 _mode, bytes _executionCalldata) payable",
      "function executeFromExecutor(bytes32 _mode, bytes _executionCalldata) payable returns (bytes[] returnData_)",
      "function getDeposit() view returns (uint256)",
      "function getDomainHash() view returns (bytes32)",
      "function getNonce(uint192 _key) view returns (uint256)",
      "function getNonce() view returns (uint256)",
      "function getPackedUserOperationHash(tuple(address sender, uint256 nonce, bytes initCode, bytes callData, bytes32 accountGasLimits, uint256 preVerificationGas, bytes32 gasFees, bytes paymasterAndData, bytes signature) _userOp) view returns (bytes32)",
      "function getPackedUserOperationTypedDataHash(tuple(address sender, uint256 nonce, bytes initCode, bytes callData, bytes32 accountGasLimits, uint256 preVerificationGas, bytes32 gasFees, bytes paymasterAndData, bytes signature) _userOp) view returns (bytes32)",
      "function isDelegationDisabled(bytes32 _delegationHash) view returns (bool)",
      "function isValidSignature(bytes32 _hash, bytes _signature) view returns (bytes4 magicValue_)",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) view returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) view returns (bytes4)",
      "function onERC721Received(address, address, uint256, bytes) view returns (bytes4)",
      "function redeemDelegations(bytes[] _permissionContexts, bytes32[] _modes, bytes[] _executionCallDatas)",
      "function supportsExecutionMode(bytes32 _mode) view returns (bool)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
      "function validateUserOp(tuple(address sender, uint256 nonce, bytes initCode, bytes callData, bytes32 accountGasLimits, uint256 preVerificationGas, bytes32 gasFees, bytes paymasterAndData, bytes signature) _userOp, bytes32, uint256 _missingAccountFunds) returns (uint256 validationData_)",
      "function withdrawDeposit(address _withdrawAddress, uint256 _withdrawAmount)"
    ],
    "eth:0x75bA5Af8EFFDCFca32E1e288806d54277D1fde99": [
      "constructor(address implementationAddress, address ownerAddress, bytes data) payable",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProxyImplementationUpdated(address indexed previousImplementation, address indexed newImplementation)",
      "function owner() view returns (address)",
      "function supportsInterface(bytes4 id) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x75C6A865c30da54e365Cb5Def728890B3DD8BDC4": [
      "constructor(address _connext, address _spokeConnector, address _gelatoRelayer, address _feeCollector, address _rootManager)",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event ConnextChanged(address updated, address previous)",
      "event FeeCollectorChanged(address updated, address previous)",
      "event FundsDeducted(uint256 amount, uint256 balance)",
      "event FundsReceived(uint256 amount, uint256 balance)",
      "event GelatoRelayerChanged(address updated, address previous)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RelayerAdded(address relayer)",
      "event RelayerRemoved(address relayer)",
      "event RootManagerChanged(address rootManager, address oldRootManager)",
      "event SpokeConnectorChanged(address updated, address previous)",
      "function acceptProposedOwner()",
      "function addRelayer(address _relayer)",
      "function allowedRelayer(address) view returns (bool)",
      "function connext() view returns (address)",
      "function delay() view returns (uint256)",
      "function execute(tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) _args, uint256 _fee) returns (bytes32 transferId)",
      "function feeCollector() view returns (address)",
      "function gelatoRelayer() view returns (address)",
      "function owner() view returns (address)",
      "function propagate(address[] _connectors, uint256[] _messageFees, bytes[] _encodedData, uint256 _relayerFee)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function proveAndProcess(tuple(bytes message, bytes32[32] path, uint256 index)[] _proofs, bytes32 _aggregateRoot, bytes32[32] _aggregatePath, uint256 _aggregateIndex, uint256 _fee)",
      "function removeRelayer(address _relayer)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function rootManager() view returns (address)",
      "function send(bytes _encodedData, uint256 _messageFee, uint256 _relayerFee)",
      "function setConnext(address _connext)",
      "function setFeeCollector(address _feeCollector)",
      "function setGelatoRelayer(address _gelatoRelayer)",
      "function setRootManager(address _rootManager)",
      "function setSpokeConnector(address _spokeConnector)",
      "function spokeConnector() view returns (address)",
      "function withdraw()"
    ],
    "eth:0x7993Bb17D8D8A0676Cc1527f8b4CE52A2B490352": [
      "error AssetLogic__getConfig_notRegistered()",
      "error AssetLogic__getTokenIndexFromStableSwapPool_notExist()",
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error PortalFacet__repayAavePortalFor_invalidAsset()",
      "error PortalFacet__repayAavePortalFor_zeroAmount()",
      "error PortalFacet__repayAavePortal_assetNotApproved()",
      "error PortalFacet__repayAavePortal_insufficientFunds()",
      "error PortalFacet__setAavePortalFee_invalidFee()",
      "event AavePoolUpdated(address updated, address caller)",
      "event AavePortalFeeUpdated(uint256 updated, address caller)",
      "event AavePortalRepayment(bytes32 indexed transferId, address asset, uint256 amount, uint256 fee, address caller)",
      "function aavePool() view returns (address)",
      "function aavePortalFee() view returns (uint256)",
      "function getAavePortalDebt(bytes32 _transferId) view returns (uint256)",
      "function getAavePortalFeeDebt(bytes32 _transferId) view returns (uint256)",
      "function repayAavePortal(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, uint256 _backingAmount, uint256 _feeAmount, uint256 _maxIn)",
      "function repayAavePortalFor(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, address _portalAsset, uint256 _backingAmount, uint256 _feeAmount) payable",
      "function setAavePool(address _aavePool)",
      "function setAavePortalFee(uint256 _aavePortalFeeNumerator)"
    ],
    "eth:0x79e6E0242405A66B2dd8B96DEd3b2F0216Fd417d": [
      "constructor()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event WatcherAdded(address watcher)",
      "event WatcherRemoved(address watcher)",
      "function acceptProposedOwner()",
      "function addWatcher(address _watcher)",
      "function delay() view returns (uint256)",
      "function isWatcher(address) view returns (bool)",
      "function owner() view returns (address)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function removeWatcher(address _watcher)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)"
    ],
    "eth:0x7b292034084A41B9D441B71b6E3557Edd0463fa8": [
      "constructor(address _finderAddress, uint256 _startingId)",
      "event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "event EmergencyExecution(address indexed to, uint256 value, bytes data)",
      "event NewProposal(uint256 indexed id, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event ProposalExecuted(uint256 indexed id, uint256 transactionIndex)",
      "event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager)",
      "event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager)",
      "function addMember(uint256 roleId, address newMember)",
      "function emergencyExecute(tuple(address to, uint256 value, bytes data) transaction) payable",
      "function executeProposal(uint256 id, uint256 transactionIndex) payable",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getMember(uint256 roleId) view returns (address)",
      "function getProposal(uint256 id) view returns (tuple(tuple(address to, uint256 value, bytes data)[] transactions, uint256 requestTime, bytes ancillaryData))",
      "function holdsRole(uint256 roleId, address memberToCheck) view returns (bool)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numProposals() view returns (uint256)",
      "function proposals(uint256) view returns (uint256 requestTime, bytes ancillaryData)",
      "function propose(tuple(address to, uint256 value, bytes data)[] transactions, bytes ancillaryData)",
      "function removeMember(uint256 roleId, address memberToRemove)",
      "function renounceMembership(uint256 roleId)",
      "function resetMember(uint256 roleId, address newMember)"
    ],
    "eth:0x7b2bE683266909A6a4068e743083dd40621d663E": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _optimismPortal, uint256 _gasCap)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function OPTIMISM_PORTAL() view returns (address)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _l2OutputIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function processed(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0x7bE978Cc84612E08f7844672B0E6A6F367FE2b6A": [
      "constructor(address _singleton)"
    ],
    "eth:0x7D2596D7E44b0990611d390Fbb0Bd24e64845694": [
      "constructor(address _upgradeBeacon, bytes _initializationCalldata) payable"
    ],
    "eth:0x7ed49D0a13255802A281C08688563bd8D5f726b1": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint32 _mirrorNetworkId)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function onMessageReceived(address originAddress, uint32 originNetwork, bytes data) payable",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0x8180D59b7175d4064bDFA8138A58e9baBFFdA44a": [
      "constructor(address _masterCopy)"
    ],
    "eth:0x83096c7455f24E593aaC9A7c73f849d36d3EEb82": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _outbox, uint256 _maxSubmissionCostCap, uint256 _maxGasCap, uint256 _gasPriceCap)",
      "error Connector__processMessage_notUsed()",
      "error NotCrossChainCall()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error TypedMemView__index_indexMoreThan32Bytes()",
      "error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice)",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasPriceCapUpdated(uint256 _previous, uint256 _updated)",
      "event MaxGasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MaxSubmissionCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RetryableTicketCreated(uint256 indexed ticketId)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasPriceCap() view returns (uint256)",
      "function maxGasCap() view returns (uint256)",
      "function maxSubmissionCostCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function outbox() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(uint64 _nodeNum, bytes32 _sendRoot, bytes32 _blockHash, bytes32[] _proof, uint256 _index, tuple(address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes callData) _message)",
      "function processed(uint256) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function rollup() view returns (address)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasPriceCap(uint256 _updated)",
      "function setMaxGasCap(uint256 _updated)",
      "function setMaxSubmissionCostCap(uint256 _updated)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0x8898B472C54c31894e3B9bb83cEA802a5d0e63C6": [
      "constructor(address _contractOwner, tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, tuple(address initContract, bytes initData)[] _initializations) payable"
    ],
    "eth:0x91F1804aCaf87C2D34A34A70be1bb16bB85D6748": [
      "constructor(address _token, uint256 _quorum, address _governor, address _executor, uint64 _minimumWaitTime)",
      "event EmergencyProposalExecuted(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event EmergencyProposalRemoved(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event EmergencyProposalSlashed(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event EmergencyTransactionsProposed(uint256 indexed id, address indexed sender, address indexed caller, uint64 expiryTime, uint256 lockedTokens, tuple(address to, uint256 value, bytes data)[] transactions)",
      "event ExecutorSet(address executor)",
      "event MinimumWaitTimeSet(uint256 minimumWaitTime)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QuorumSet(uint256 quorum)",
      "function emergencyProposals(uint256) view returns (address sender, uint64 expiryTime, uint256 lockedTokens)",
      "function emergencyPropose(tuple(address to, uint256 value, bytes data)[] transactions) returns (uint256)",
      "function executeEmergencyProposal(uint256 id) payable",
      "function executor() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function governor() view returns (address)",
      "function minimumWaitTime() view returns (uint64)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function owner() view returns (address)",
      "function quorum() view returns (uint256)",
      "function removeProposal(uint256 id)",
      "function renounceOwnership()",
      "function setExecutor(address newExecutor)",
      "function setMinimumWaitTime(uint64 newMinimumWaitTime)",
      "function setQuorum(uint256 newQuorum)",
      "function slashProposal(uint256 id)",
      "function token() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0x9AB5F562Dc2aCcCd1b80d6564B770786e38f0686": [
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error StableSwapFacet__deadlineCheck_deadlineNotMet()",
      "error StableSwapFacet__getSwapTokenBalance_indexOutOfRange()",
      "error StableSwapFacet__getSwapTokenIndex_notExist()",
      "error StableSwapFacet__getSwapToken_outOfRange()",
      "event AddLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
      "event NewAdminFee(bytes32 indexed key, uint256 newAdminFee)",
      "event NewSwapFee(bytes32 indexed key, uint256 newSwapFee)",
      "event RemoveLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply)",
      "event RemoveLiquidityImbalance(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
      "event RemoveLiquidityOne(bytes32 indexed key, address indexed provider, uint256 lpTokenAmount, uint256 lpTokenSupply, uint256 boughtId, uint256 tokensBought)",
      "event TokenSwap(bytes32 indexed key, address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId)",
      "function addSwapLiquidity(bytes32 key, uint256[] amounts, uint256 minToMint, uint256 deadline) returns (uint256)",
      "function calculateRemoveSwapLiquidity(bytes32 key, uint256 amount) view returns (uint256[])",
      "function calculateRemoveSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex) view returns (uint256 availableTokenAmount)",
      "function calculateSwap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) view returns (uint256)",
      "function calculateSwapTokenAmount(bytes32 key, uint256[] amounts, bool deposit) view returns (uint256)",
      "function getSwapA(bytes32 key) view returns (uint256)",
      "function getSwapAPrecise(bytes32 key) view returns (uint256)",
      "function getSwapAdminBalance(bytes32 key, uint256 index) view returns (uint256)",
      "function getSwapLPToken(bytes32 key) view returns (address)",
      "function getSwapStorage(bytes32 key) view returns (tuple(bytes32 key, uint256 initialA, uint256 futureA, uint256 initialATime, uint256 futureATime, uint256 swapFee, uint256 adminFee, address lpToken, address[] pooledTokens, uint256[] tokenPrecisionMultipliers, uint256[] balances, uint256[] adminFees, bool disabled, uint256 removeTime))",
      "function getSwapToken(bytes32 key, uint8 index) view returns (address)",
      "function getSwapTokenBalance(bytes32 key, uint8 index) view returns (uint256)",
      "function getSwapTokenIndex(bytes32 key, address tokenAddress) view returns (uint8)",
      "function getSwapVirtualPrice(bytes32 key) view returns (uint256)",
      "function removeSwapLiquidity(bytes32 key, uint256 amount, uint256[] minAmounts, uint256 deadline) returns (uint256[])",
      "function removeSwapLiquidityImbalance(bytes32 key, uint256[] amounts, uint256 maxBurnAmount, uint256 deadline) returns (uint256)",
      "function removeSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex, uint256 minAmount, uint256 deadline) returns (uint256)",
      "function swap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) returns (uint256)",
      "function swapExact(bytes32 key, uint256 amountIn, address assetIn, address assetOut, uint256 minAmountOut, uint256 deadline) returns (uint256)",
      "function swapExactOut(bytes32 key, uint256 amountOut, address assetIn, address assetOut, uint256 maxAmountIn, uint256 deadline) returns (uint256)"
    ],
    "eth:0x9B077C59fDe7de5AdCeF8093Bc38B61d43FC7007": [
      "constructor(address implementationAddress, address ownerAddress, bytes data) payable",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProxyImplementationUpdated(address indexed previousImplementation, address indexed newImplementation)",
      "function owner() view returns (address)",
      "function supportsInterface(bytes4 id) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0x9Ba7D2Ab079Bd1924859e2fECDAD1bEBe5B119Fa": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _stateCommitmentChain, uint256 _gasCap)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processMessageFromRoot(address _target, address _sender, bytes _message, uint256 _messageNonce, tuple(bytes32 stateRoot, tuple(uint256 batchIndex, bytes32 batchRoot, uint256 batchSize, uint256 prevTotalElements, bytes extraData) stateRootBatchHeader, tuple(uint256 index, bytes32[] siblings) stateRootProof, bytes stateTrieWitness, bytes storageTrieWitness) _proof)",
      "function processed(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function stateCommitmentChain() view returns (address)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0xaBcC9b596420A9E9172FD5938620E265a0f9Df92": [
      "constructor(address implementationAddress, address ownerAddress, bytes data) payable",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProxyImplementationUpdated(address indexed previousImplementation, address indexed newImplementation)",
      "function owner() view returns (address)",
      "function supportsInterface(bytes4 id) view returns (bool)",
      "function transferOwnership(address newOwner)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "eth:0xae6B9cDE6191b710F5A18D82f751Ba52B78a99DA": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint256 _gasCap, uint16 _mirrorWormholeChainId)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RefundAddressUpdated(address indexed previous, address indexed updated)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function MIRROR_WORMHOLE_ID() view returns (uint16)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processedWhMessages(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function quoteEVMDeliveryPrice(uint256 _gasLimit, address _amb) view returns (uint256 _cost)",
      "function receiveWormholeMessages(bytes _payload, bytes[], bytes32 _sourceAddress, uint16 _sourceChain, bytes32 _deliveryHash) payable",
      "function refundAddress() view returns (address)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function setRefundAddress(address _updated)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0xB4F8D176466f5F544bAd53737bffAaeA17185c05": [
      "constructor(tuple(address connext, address spokeConnector, address gelatoRelayer, address feeCollector, address keep3r, address rootManager, address autonolas, uint256 propagateCooldown, uint256 finalizeCooldown, uint256 proposeAggregateRootCooldown, address[] hubConnectors, uint32[] hubConnectorChains) _params)",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error RelayerProxyHub__processFromRoot_alreadyProcessed()",
      "error RelayerProxyHub__processFromRoot_noHubConnector()",
      "error RelayerProxyHub__processFromRoot_unsupportedChain()",
      "error RelayerProxyHub__propagateCooledDown_notCooledDown()",
      "error RelayerProxyHub__validateProposeSignature_notProposer(address signer)",
      "error RelayerProxy__addRelayer_relayerAdded()",
      "error RelayerProxy__definedAddress_empty()",
      "error RelayerProxy__finalizeCooledDown_notCooledDown()",
      "error RelayerProxy__isWorkableBySender_notWorkable()",
      "error RelayerProxy__onlyRelayer_notRelayer()",
      "error RelayerProxy__proposeAggregateRootCooledDown_notCooledDown()",
      "error RelayerProxy__removeRelayer_relayerNotAdded()",
      "error RelayerProxy__validateAndPayWithCredits_notKeep3r()",
      "error RelayerProxy__validateProposeSignature_notProposer(address signer)",
      "event AutonolasChanged(address updated, address previous)",
      "event AutonolasPriorityChanged(uint8 fn, uint8 updated, uint8 previous)",
      "event ConnextChanged(address updated, address previous)",
      "event FeeCollectorChanged(address updated, address previous)",
      "event FinalizeCooldownChanged(uint256 finalizeCooldown, uint256 oldFinalizeCooldown)",
      "event FundsDeducted(address token, uint256 amount, uint256 balance)",
      "event FundsReceived(uint256 amount, uint256 balance)",
      "event GelatoRelayerChanged(address updated, address previous)",
      "event HubConnectorChanged(address hubConnector, address oldHubConnector, uint32 chain)",
      "event Keep3rChanged(address updated, address previous)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PropagateCooldownChanged(uint256 propagateCooldown, uint256 oldPropagateCooldown)",
      "event ProposeAggregateRootCooldownChanged(uint256 proposeAggregateRootCooldown, uint256 oldProposeAggregateRootCooldown)",
      "event RelayerAdded(address relayer)",
      "event RelayerRemoved(address relayer)",
      "event RootManagerChanged(address rootManager, address oldRootManager)",
      "event SpokeConnectorChanged(address updated, address previous)",
      "function acceptProposedOwner()",
      "function addRelayer(address _relayer)",
      "function allowedRelayer(address) view returns (bool)",
      "function autonolas() view returns (address)",
      "function autonolasPriority(uint8) view returns (uint8)",
      "function connext() view returns (address)",
      "function delay() view returns (uint256)",
      "function domain() view returns (uint32)",
      "function execute(tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) _args, uint256 _fee) returns (bytes32 transferId)",
      "function feeCollector() view returns (address)",
      "function finalize(bytes32 _proposedAggregateRoot, uint256 _rootTimestamp, uint256 _endOfDispute)",
      "function finalizeAndPropagate(address[] _connectors, uint256[] _fees, bytes[] _encodedData, bytes32 _proposedAggregateRoot, uint256 _endOfDispute) returns (uint256 _fee)",
      "function finalizeAndPropagateKeep3r(address[] _connectors, uint256[] _fees, bytes[] _encodedData, bytes32 _proposedAggregateRoot, uint256 _endOfDispute) returns (uint256 _fee)",
      "function finalizeCooldown() view returns (uint256)",
      "function finalizeOnRoot(bytes32 _proposedAggregateRoot, uint256 _endOfDispute)",
      "function gelatoRelayer() view returns (address)",
      "function hubConnectors(uint32) view returns (address)",
      "function keep3r() view returns (address)",
      "function lastFinalizeAt() view returns (uint256)",
      "function lastPropagateAt() view returns (uint256)",
      "function lastProposeAggregateRootAt() view returns (uint256)",
      "function owner() view returns (address)",
      "function processFromRoot(bytes _encodedData, uint32 _fromChain, bytes32 _l2Hash)",
      "function processFromRootKeep3r(bytes _encodedData, uint32 _fromChain, bytes32 _l2Hash)",
      "function processedRootMessages(uint32, bytes32) view returns (bool)",
      "function propagate(address[] _connectors, uint256[] _messageFees, bytes[] _encodedData, uint256 _relayerFee)",
      "function propagateCooldown() view returns (uint256)",
      "function propagateKeep3r(address[] _connectors, uint256[] _messageFees, bytes[] _encodedData)",
      "function propagateWorkable(uint32[] domains) returns (bool)",
      "function proposeAggregateRoot(bytes32 _aggregateRoot, uint256 _rootTimestamp, bytes _signature, uint256 _fee)",
      "function proposeAggregateRootCooldown() view returns (uint256)",
      "function proposeAggregateRootOnRoot(uint256 _snapshotId, bytes32 _aggregateRoot, bytes32[] _snapshotsRoots, uint32[] _domains, bytes _signature)",
      "function proposeAggregateRootOnRootKeep3r(uint256 _snapshotId, bytes32 _aggregateRoot, bytes32[] _snapshotsRoots, uint32[] _domains, bytes _signature)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function proveAndProcess(tuple(bytes message, bytes32[32] path, uint256 index)[] _proofs, bytes32 _aggregateRoot, bytes32[32] _aggregatePath, uint256 _aggregateIndex, uint256 _fee)",
      "function removeRelayer(address _relayer)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function rootManager() view returns (address)",
      "function send(bytes _encodedData, uint256 _messageFee, uint256 _relayerFee)",
      "function sendRootToHubSpoke()",
      "function setAutonolas(address _autonolas)",
      "function setAutonolasPriority(uint8 _function, uint8 _autonolasPriority)",
      "function setConnext(address _connext)",
      "function setFeeCollector(address _feeCollector)",
      "function setFinalizeCooldown(uint256 _finalizeCooldown)",
      "function setGelatoRelayer(address _gelatoRelayer)",
      "function setHubConnector(address _hubConnector, uint32 _chain)",
      "function setKeep3r(address _keep3r)",
      "function setPropagateCooldown(uint256 _propagateCooldown)",
      "function setProposeAggregateRootCooldown(uint256 _proposeCooldown)",
      "function setRootManager(address _rootManager)",
      "function setSpokeConnector(address _spokeConnector)",
      "function spokeConnector() view returns (address)",
      "function withdraw(address _token)"
    ],
    "eth:0xb82e63585e53C47Ee83104f22c21ab1FE76F2EAE": [
      "constructor(address _gelato)",
      "event LogUseGelato1Balance(address indexed sponsor, address indexed target, address indexed feeToken, uint256 oneBalanceChainId, uint256 nativeToFeeTokenXRateNumerator, uint256 nativeToFeeTokenXRateDenominator, bytes32 correlationId)",
      "function gelato() view returns (address)",
      "function sponsoredCall(tuple(uint256 chainId, address target, bytes data) _call, address _sponsor, address _feeToken, uint256 _oneBalanceChainId, uint256 _nativeToFeeTokenXRateNumerator, uint256 _nativeToFeeTokenXRateDenominator, bytes32 _correlationId)"
    ],
    "eth:0xBE2Ac45e75c14e9EEf9712a94Dce355f0151f5B1": [
      "constructor(address _singleton)"
    ],
    "eth:0xBe8D8Ac9a44fBa6cb7A7E02c1E6576E06C7da72D": [
      "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
      "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
      "error AssetLogic__handleOutgoingAsset_notNative()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error RoutersFacet__acceptProposedRouterOwner_badCaller()",
      "error RoutersFacet__acceptProposedRouterOwner_notElapsed()",
      "error RoutersFacet__addLiquidityForRouter_amountIsZero()",
      "error RoutersFacet__addLiquidityForRouter_badRouter()",
      "error RoutersFacet__addLiquidityForRouter_capReached()",
      "error RoutersFacet__addLiquidityForRouter_routerEmpty()",
      "error RoutersFacet__approveRouterForPortal_alreadyApproved()",
      "error RoutersFacet__approveRouterForPortal_notAdded()",
      "error RoutersFacet__approveRouter_alreadyAdded()",
      "error RoutersFacet__approveRouter_routerEmpty()",
      "error RoutersFacet__initializeRouter_configNotEmpty()",
      "error RoutersFacet__onlyRouterOwner_notRouterOwner()",
      "error RoutersFacet__proposeRouterOwner_badRouter()",
      "error RoutersFacet__proposeRouterOwner_notNewOwner()",
      "error RoutersFacet__removeRouterLiquidityFor_notOwner()",
      "error RoutersFacet__removeRouterLiquidity_amountIsZero()",
      "error RoutersFacet__removeRouterLiquidity_insufficientFunds()",
      "error RoutersFacet__removeRouterLiquidity_recipientEmpty()",
      "error RoutersFacet__setLiquidityFeeNumerator_tooLarge()",
      "error RoutersFacet__setLiquidityFeeNumerator_tooSmall()",
      "error RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer()",
      "error RoutersFacet__setRouterOwner_noChange()",
      "error RoutersFacet__setRouterRecipient_notNewRecipient()",
      "error RoutersFacet__unapproveRouterForPortal_notApproved()",
      "error RoutersFacet__unapproveRouter_notAdded()",
      "error RoutersFacet__unapproveRouter_routerEmpty()",
      "event LiquidityFeeNumeratorUpdated(uint256 liquidityFeeNumerator, address caller)",
      "event MaxRoutersPerTransferUpdated(uint256 maxRoutersPerTransfer, address caller)",
      "event RouterAdded(address indexed router, address caller)",
      "event RouterApprovedForPortal(address router, address caller)",
      "event RouterInitialized(address indexed router)",
      "event RouterLiquidityAdded(address indexed router, address local, bytes32 key, uint256 amount, address caller)",
      "event RouterLiquidityRemoved(address indexed router, address to, address local, bytes32 key, uint256 amount, address caller)",
      "event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner)",
      "event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed)",
      "event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient)",
      "event RouterRemoved(address indexed router, address caller)",
      "event RouterUnapprovedForPortal(address router, address caller)",
      "function LIQUIDITY_FEE_DENOMINATOR() pure returns (uint256)",
      "function LIQUIDITY_FEE_NUMERATOR() view returns (uint256)",
      "function acceptProposedRouterOwner(address _router)",
      "function addRouterLiquidity(uint256 _amount, address _local) payable",
      "function addRouterLiquidityFor(uint256 _amount, address _local, address _router) payable",
      "function approveRouter(address _router)",
      "function approveRouterForPortal(address _router)",
      "function getProposedRouterOwner(address _router) view returns (address)",
      "function getProposedRouterOwnerTimestamp(address _router) view returns (uint256)",
      "function getRouterApproval(address _router) view returns (bool)",
      "function getRouterApprovalForPortal(address _router) view returns (bool)",
      "function getRouterOwner(address _router) view returns (address)",
      "function getRouterRecipient(address _router) view returns (address)",
      "function initializeRouter(address _owner, address _recipient)",
      "function maxRoutersPerTransfer() view returns (uint256)",
      "function proposeRouterOwner(address _router, address _proposed)",
      "function removeRouterLiquidity(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to)",
      "function removeRouterLiquidityFor(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to, address _router)",
      "function routerBalances(address _router, address _asset) view returns (uint256)",
      "function setLiquidityFeeNumerator(uint256 _numerator)",
      "function setMaxRoutersPerTransfer(uint256 _newMaxRouters)",
      "function setRouterRecipient(address _router, address _recipient)",
      "function unapproveRouter(address _router)",
      "function unapproveRouterForPortal(address _router)"
    ],
    "eth:0xcCb64fDf1c0Cc1aac1C39E5968E82f89c1B8C769": [
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error RelayerFacet__addRelayer_alreadyApproved()",
      "error RelayerFacet__removeRelayer_notApproved()",
      "error RelayerFacet__setRelayerFeeVault_invalidRelayerFeeVault()",
      "event RelayerAdded(address relayer, address caller)",
      "event RelayerFeeVaultUpdated(address oldVault, address newVault, address caller)",
      "event RelayerRemoved(address relayer, address caller)",
      "function addRelayer(address _relayer)",
      "function approvedRelayers(address _relayer) view returns (bool)",
      "function relayerFeeVault() view returns (address)",
      "function removeRelayer(address _relayer)",
      "function setRelayerFeeVault(address _relayerFeeVault)"
    ],
    "eth:0xcDbF9D438670D19d1Fb3954Abc8a13666b302b28": [
      "constructor(address _connext, address _spokeConnector, address _gelatoRelayer, address _feeCollector, address _rootManager, address _keep3r, address _autonolas, uint8 _autonolasPriority, uint256 _propagateCooldown, address[] _hubConnectors, uint32[] _hubConnectorChains)",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "error RelayerProxyHub__processFromRoot_alreadyProcessed(uint32 chain, bytes32 l2Hash)",
      "error RelayerProxyHub__processFromRoot_noHubConnector(uint32 chain)",
      "error RelayerProxyHub__propagateCooledDown_notCooledDown(uint256 timestamp, uint256 nextWorkable)",
      "error RelayerProxy__addRelayer_relayerAdded(address _relayer)",
      "error RelayerProxy__definedAddress_empty(address _address)",
      "error RelayerProxy__isWorkableBySender_notWorkable(address _sender)",
      "error RelayerProxy__onlyRelayer_notRelayer(address _sender)",
      "error RelayerProxy__removeRelayer_relayerNotAdded(address _relayer)",
      "error RelayerProxy__validateAndPayWithCredits_notKeep3r(address _sender)",
      "event AutonolasChanged(address updated, address previous)",
      "event AutonolasPriorityChanged(uint8 updated, uint8 previous)",
      "event ConnextChanged(address updated, address previous)",
      "event FeeCollectorChanged(address updated, address previous)",
      "event FundsDeducted(uint256 amount, uint256 balance)",
      "event FundsReceived(uint256 amount, uint256 balance)",
      "event GelatoRelayerChanged(address updated, address previous)",
      "event HubConnectorChanged(address hubConnector, address oldHubConnector, uint32 chain)",
      "event Keep3rChanged(address updated, address previous)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PropagateCooldownChanged(uint256 propagateCooldown, uint256 oldPropagateCooldown)",
      "event RelayerAdded(address relayer)",
      "event RelayerRemoved(address relayer)",
      "event RootManagerChanged(address rootManager, address oldRootManager)",
      "event SpokeConnectorChanged(address updated, address previous)",
      "function acceptProposedOwner()",
      "function addRelayer(address _relayer)",
      "function allowedRelayer(address) view returns (bool)",
      "function autonolas() view returns (address)",
      "function autonolasPriority() view returns (uint8)",
      "function connext() view returns (address)",
      "function delay() view returns (uint256)",
      "function execute(tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) _args, uint256 _fee) returns (bytes32 transferId)",
      "function feeCollector() view returns (address)",
      "function gelatoRelayer() view returns (address)",
      "function hubConnectors(uint32) view returns (address)",
      "function keep3r() view returns (address)",
      "function lastPropagateAt() view returns (uint256)",
      "function owner() view returns (address)",
      "function priorityKeepers(address) view returns (bool)",
      "function processFromRootKeep3r(bytes _encodedData, uint32 _fromChain, bytes32 _l2Hash)",
      "function processedRootMessages(uint32, bytes32) view returns (bool)",
      "function propagate(address[] _connectors, uint256[] _messageFees, bytes[] _encodedData, uint256 _relayerFee)",
      "function propagateCooldown() view returns (uint256)",
      "function propagateKeep3r(address[] _connectors, uint256[] _messageFees, bytes[] _encodedData)",
      "function propagateWorkable() returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function proveAndProcess(tuple(bytes message, bytes32[32] path, uint256 index)[] _proofs, bytes32 _aggregateRoot, bytes32[32] _aggregatePath, uint256 _aggregateIndex, uint256 _fee)",
      "function removeRelayer(address _relayer)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function rootManager() view returns (address)",
      "function send(bytes _encodedData, uint256 _messageFee, uint256 _relayerFee)",
      "function setAutonolas(address _autonolas)",
      "function setAutonolasPriority(uint8 _autonolasPriority)",
      "function setConnext(address _connext)",
      "function setFeeCollector(address _feeCollector)",
      "function setGelatoRelayer(address _gelatoRelayer)",
      "function setHubConnector(address _hubConnector, uint32 _chain)",
      "function setKeep3r(address _keep3r)",
      "function setPropagateCooldown(uint256 _propagateCooldown)",
      "function setRootManager(address _rootManager)",
      "function setSpokeConnector(address _spokeConnector)",
      "function spokeConnector() view returns (address)",
      "function withdraw()"
    ],
    "eth:0xcF649d9Da4D1362C4DAEa67573430Bd6f945e570": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event SupportedIdentifierAdded(bytes32 indexed identifier)",
      "event SupportedIdentifierRemoved(bytes32 indexed identifier)",
      "function addSupportedIdentifier(bytes32 identifier)",
      "function isIdentifierSupported(bytes32 identifier) view returns (bool)",
      "function owner() view returns (address)",
      "function removeSupportedIdentifier(bytes32 identifier)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0xCFbFaC74C26F8647cBDb8c5caf80BB5b32E43134": [
      "event AddDelegate(address indexed safe, address delegate)",
      "event DeleteAllowance(address indexed safe, address delegate, address token)",
      "event ExecuteAllowanceTransfer(address indexed safe, address delegate, address token, address to, uint96 value, uint16 nonce)",
      "event PayAllowanceTransfer(address indexed safe, address delegate, address paymentToken, address paymentReceiver, uint96 payment)",
      "event RemoveDelegate(address indexed safe, address delegate)",
      "event ResetAllowance(address indexed safe, address delegate, address token)",
      "event SetAllowance(address indexed safe, address delegate, address token, uint96 allowanceAmount, uint16 resetTime)",
      "function ALLOWANCE_TRANSFER_TYPEHASH() view returns (bytes32)",
      "function DOMAIN_SEPARATOR_TYPEHASH() view returns (bytes32)",
      "function NAME() view returns (string)",
      "function VERSION() view returns (string)",
      "function addDelegate(address delegate)",
      "function allowances(address, address, address) view returns (uint96 amount, uint96 spent, uint16 resetTimeMin, uint32 lastResetMin, uint16 nonce)",
      "function delegates(address, uint48) view returns (address delegate, uint48 prev, uint48 next)",
      "function delegatesStart(address) view returns (uint48)",
      "function deleteAllowance(address delegate, address token)",
      "function executeAllowanceTransfer(address safe, address token, address to, uint96 amount, address paymentToken, uint96 payment, address delegate, bytes signature)",
      "function generateTransferHash(address safe, address token, address to, uint96 amount, address paymentToken, uint96 payment, uint16 nonce) view returns (bytes32)",
      "function getChainId() pure returns (uint256)",
      "function getDelegates(address safe, uint48 start, uint8 pageSize) view returns (address[] results, uint48 next)",
      "function getTokenAllowance(address safe, address delegate, address token) view returns (uint256[5])",
      "function getTokens(address safe, address delegate) view returns (address[])",
      "function removeDelegate(address delegate, bool removeAllowances)",
      "function resetAllowance(address delegate, address token)",
      "function setAllowance(address delegate, address token, uint96 allowanceAmount, uint16 resetTimeMin, uint32 resetBaseMin)",
      "function tokens(address, address, uint256) view returns (address)"
    ],
    "eth:0xd91C07a7e8FCb1039fE326e6dE274fD0F3307350": [
      "constructor(address _gelato)",
      "event LogCallWithSyncFeeV2(address indexed target, bytes32 indexed correlationId)",
      "function callWithSyncFeeV2(address _target, bytes _data, bool _isRelayContext, bytes32 _correlationId)",
      "function gelato() view returns (address)"
    ],
    "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0xdBF90434dF0B98219f87d112F37d74B1D90758c7": [
      "event AddedToWhitelist(address indexed addedAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RemovedFromWhitelist(address indexed removedAddress)",
      "function addToWhitelist(address newElement)",
      "function getWhitelist() view returns (address[] activeWhitelist)",
      "function isOnWhitelist(address elementToCheck) view returns (bool)",
      "function owner() view returns (address)",
      "function removeFromWhitelist(address elementToRemove)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function whitelist(address) view returns (uint8)",
      "function whitelistIndices(uint256) view returns (address)"
    ],
    "eth:0xe37d4F73ef1C85dEf2174A394f17Ac65DD3cBB81": [
      "error AssetLogic__getConfig_notRegistered()",
      "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
      "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
      "error BaseConnextFacet__nonReentrant_reentrantCall()",
      "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
      "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
      "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
      "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
      "error BaseConnextFacet__onlyOwner_notOwner()",
      "error BaseConnextFacet__onlyProposed_notProposedOwner()",
      "error BaseConnextFacet__whenNotPaused_paused()",
      "error TokenFacet__addAssetId_alreadyAdded()",
      "error TokenFacet__addAssetId_badBurn()",
      "error TokenFacet__addAssetId_badMint()",
      "error TokenFacet__enrollAdoptedAndLocalAssets_emptyCanonical()",
      "error TokenFacet__removeAssetId_invalidParams()",
      "error TokenFacet__removeAssetId_notAdded()",
      "error TokenFacet__removeAssetId_remainsCustodied()",
      "error TokenFacet__setLiquidityCap_notCanonicalDomain()",
      "error TokenFacet__setupAssetWithDeployedRepresentation_invalidRepresentation()",
      "error TokenFacet__setupAssetWithDeployedRepresentation_onCanonicalDomain()",
      "error TokenFacet__setupAsset_invalidCanonicalConfiguration()",
      "error TokenFacet__setupAsset_representationListed()",
      "error TokenFacet__updateDetails_localNotFound()",
      "error TokenFacet__updateDetails_notApproved()",
      "error TokenFacet__updateDetails_onlyRemote()",
      "event AssetAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address adoptedAsset, address localAsset, address caller)",
      "event AssetRemoved(bytes32 indexed key, address caller)",
      "event LiquidityCapUpdated(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, uint256 cap, address caller)",
      "event StableSwapAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address swapPool, address caller)",
      "event TokenDeployed(uint32 indexed domain, bytes32 indexed id, address indexed representation)",
      "function addStableSwapPool(tuple(uint32 domain, bytes32 id) _canonical, address _stableSwapPool)",
      "function adoptedToCanonical(address _adopted) view returns (tuple(uint32 domain, bytes32 id))",
      "function adoptedToLocalExternalPools(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
      "function adoptedToLocalExternalPools(bytes32 _key) view returns (address)",
      "function approvedAssets(bytes32 _key) view returns (bool)",
      "function approvedAssets(tuple(uint32 domain, bytes32 id) _canonical) view returns (bool)",
      "function canonicalToAdopted(bytes32 _key) view returns (address)",
      "function canonicalToAdopted(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
      "function canonicalToRepresentation(bytes32 _key) view returns (address)",
      "function canonicalToRepresentation(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
      "function getCustodiedAmount(bytes32 _key) view returns (uint256)",
      "function getLocalAndAdoptedToken(bytes32 _id, uint32 _domain) view returns (address, address)",
      "function getTokenId(address _candidate) view returns (tuple(uint32 domain, bytes32 id))",
      "function removeAssetId(tuple(uint32 domain, bytes32 id) _canonical, address _adoptedAssetId, address _representation)",
      "function removeAssetId(bytes32 _key, address _adoptedAssetId, address _representation)",
      "function representationToCanonical(address _representation) view returns (tuple(uint32 domain, bytes32 id))",
      "function setupAsset(tuple(uint32 domain, bytes32 id) _canonical, uint8 _canonicalDecimals, string _representationName, string _representationSymbol, address _adoptedAssetId, address _stableSwapPool, uint256 _cap) returns (address _local)",
      "function setupAssetWithDeployedRepresentation(tuple(uint32 domain, bytes32 id) _canonical, address _representation, address _adoptedAssetId, address _stableSwapPool) returns (address)",
      "function updateDetails(tuple(uint32 domain, bytes32 id) _canonical, string _name, string _symbol)",
      "function updateLiquidityCap(tuple(uint32 domain, bytes32 id) _canonical, uint256 _updated)"
    ],
    "eth:0xe8a5eE73f3c8F1Cd55915f6Eb5Fc7df4206f3C78": [
      "constructor(address _gelato)",
      "event LogExecSuccess(bytes32 indexed _taskId)",
      "function execTransit(address _dest, bytes _data, uint256 _minFee, address _token, bytes32 _taskId)",
      "function gelato() view returns (address)"
    ],
    "eth:0xE8cF9EbB1cFB137c692a0a4E470E257B9417d116": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, address _checkPointManager)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function SEND_MESSAGE_EVENT_SIG() view returns (bytes32)",
      "function acceptProposedOwner()",
      "function checkpointManager() view returns (address)",
      "function delay() view returns (uint256)",
      "function fxChildTunnel() view returns (address)",
      "function fxRoot() view returns (address)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processedExits(bytes32) view returns (bool)",
      "function processedMessageRoots(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function receiveMessage(bytes inputData)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b": [
      "constructor(address _masterCopy)"
    ],
    "eth:0xeE3Afe347D5C74317041E2618C49534dAf887c24": [
      "constructor(uint256 _liveness, address _finderAddress, address _timerAddress)",
      "event DisputePrice(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "event ProposePrice(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "event RequestPrice(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "event Settle(address indexed requester, bytes32 indexed identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request)",
      "function ancillaryBytesLimit() view returns (uint256)",
      "function defaultLiveness() view returns (uint256)",
      "function disputePrice(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (uint256 totalBond)",
      "function disputePriceFor(bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request, address disputer, address requester) returns (uint256 totalBond)",
      "function finder() view returns (address)",
      "function getCurrentTime() view returns (uint256)",
      "function getState(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (uint8)",
      "function hasPrice(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (bool)",
      "function proposePrice(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request, int256 proposedPrice) returns (uint256 totalBond)",
      "function proposePriceFor(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request, address proposer, int256 proposedPrice) returns (uint256 totalBond)",
      "function requestAndProposePriceFor(bytes32 identifier, uint32 timestamp, bytes ancillaryData, address currency, uint256 reward, uint256 bond, uint256 customLiveness, address proposer, int256 proposedPrice) returns (uint256 totalBond)",
      "function requestPrice(bytes32 identifier, uint32 timestamp, bytes ancillaryData, address currency, uint256 reward, uint256 bond, uint256 customLiveness) returns (uint256 totalBond)",
      "function requests(bytes32) view returns (bytes32)",
      "function setCurrentTime(uint256 time)",
      "function settle(address requester, bytes32 identifier, uint32 timestamp, bytes ancillaryData, tuple(address proposer, address disputer, address currency, bool settled, int256 proposedPrice, int256 resolvedPrice, uint256 expirationTime, uint256 reward, uint256 finalFee, uint256 bond, uint256 customLiveness) request) returns (uint256 payout, int256 resolvedPrice)",
      "function stampAncillaryData(bytes ancillaryData, address requester) pure returns (bytes)",
      "function timerAddress() view returns (address)"
    ],
    "eth:0xF1c78967584D5E0ffF66dA103b8eb06c82EC020d": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint256 _gasCap, uint256 _mirrorChainId)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event GasFloorUpdated(uint256 previous, uint256 updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_CHAIN_ID() view returns (uint256)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function executeSignatures(bytes _data, bytes _signatures)",
      "function floor() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setGasFloor(uint256 _floor)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0xf2964cCcB7CDA9e808aaBe8DB0DDDAF7890dd378": [
      "constructor(address _singleton)"
    ],
    "eth:0xf5a3372ed529FCD0690b6013EAaE04170ec0626b": [
      "constructor(uint32 _domain, uint32 _mirrorDomain, address _amb, address _rootManager, address _mirrorConnector, uint256 _gasCap, uint16 _mirrorWormholeChainId)",
      "error Connector__processMessage_notUsed()",
      "error ProposedOwnable__onlyOwner_notOwner()",
      "error ProposedOwnable__onlyProposed_notProposedOwner()",
      "error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed()",
      "error ProposedOwnable__proposeNewOwner_invalidProposal()",
      "error ProposedOwnable__proposeNewOwner_noOwnershipChange()",
      "error ProposedOwnable__renounceOwnership_invalidProposal()",
      "error ProposedOwnable__renounceOwnership_noProposal()",
      "event FundsWithdrawn(address indexed to, uint256 amount)",
      "event GasCapUpdated(uint256 _previous, uint256 _updated)",
      "event MessageProcessed(bytes data, address caller)",
      "event MessageSent(bytes data, bytes encodedData, address caller)",
      "event MirrorConnectorUpdated(address previous, address current)",
      "event NewConnector(uint32 indexed domain, uint32 indexed mirrorDomain, address amb, address rootManager, address mirrorConnector)",
      "event OwnershipProposed(address indexed proposedOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RefundAddressUpdated(address indexed previous, address indexed updated)",
      "function AMB() view returns (address)",
      "function DOMAIN() view returns (uint32)",
      "function MIRROR_DOMAIN() view returns (uint32)",
      "function MIRROR_WORMHOLE_ID() view returns (uint16)",
      "function ROOT_MANAGER() view returns (address)",
      "function acceptProposedOwner()",
      "function delay() view returns (uint256)",
      "function gasCap() view returns (uint256)",
      "function mirrorConnector() view returns (address)",
      "function owner() view returns (address)",
      "function processMessage(bytes _data)",
      "function processedWhMessages(bytes32) view returns (bool)",
      "function proposeNewOwner(address newlyProposed)",
      "function proposed() view returns (address)",
      "function proposedTimestamp() view returns (uint256)",
      "function quoteEVMDeliveryPrice(uint256 _gasLimit, address _amb) view returns (uint256 _cost)",
      "function receiveWormholeMessages(bytes _payload, bytes[], bytes32 _sourceAddress, uint16 _sourceChain, bytes32 _deliveryHash) payable",
      "function refundAddress() view returns (address)",
      "function renounceOwnership()",
      "function renounced() view returns (bool)",
      "function sendMessage(bytes _data, bytes _encodedData) payable",
      "function setGasCap(uint256 _gasCap)",
      "function setMirrorConnector(address _mirrorConnector)",
      "function setRefundAddress(address _updated)",
      "function verifySender(address _expected) returns (bool)",
      "function withdrawFunds(address _to)"
    ],
    "eth:0xF9D64d54D32EE2BDceAAbFA60C4C438E224427d0": [
      "event LogUseGelato1BalanceV2()",
      "function sponsoredCallV2(address _target, bytes _data, bytes32 _correlationId, bytes32 _r, bytes32 _vs)"
    ],
    "eth:0xfb55F43fB9F48F63f9269DB7Dde3BbBe1ebDC0dE": [
      "constructor(address _finder, address _defaultCurrency, uint64 _defaultLiveness)",
      "event AdminPropertiesSet(address defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage)",
      "event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer)",
      "event AssertionMade(bytes32 indexed assertionId, bytes32 domainId, bytes claim, address indexed asserter, address callbackRecipient, address escalationManager, address caller, uint64 expirationTime, address currency, uint256 bond, bytes32 indexed identifier)",
      "event AssertionSettled(bytes32 indexed assertionId, address indexed bondRecipient, bool disputed, bool settlementResolution, address settleCaller)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function assertTruth(bytes claim, address asserter, address callbackRecipient, address escalationManager, uint64 liveness, address currency, uint256 bond, bytes32 identifier, bytes32 domainId) returns (bytes32 assertionId)",
      "function assertTruthWithDefaults(bytes claim, address asserter) returns (bytes32)",
      "function assertions(bytes32) view returns (tuple(bool arbitrateViaEscalationManager, bool discardOracle, bool validateDisputers, address assertingCaller, address escalationManager) escalationManagerSettings, address asserter, uint64 assertionTime, bool settled, address currency, uint64 expirationTime, bool settlementResolution, bytes32 domainId, bytes32 identifier, uint256 bond, address callbackRecipient, address disputer)",
      "function burnedBondPercentage() view returns (uint256)",
      "function cachedCurrencies(address) view returns (bool isWhitelisted, uint256 finalFee)",
      "function cachedIdentifiers(bytes32) view returns (bool)",
      "function cachedOracle() view returns (address)",
      "function defaultCurrency() view returns (address)",
      "function defaultIdentifier() view returns (bytes32)",
      "function defaultLiveness() view returns (uint64)",
      "function disputeAssertion(bytes32 assertionId, address disputer)",
      "function finder() view returns (address)",
      "function getAssertion(bytes32 assertionId) view returns (tuple(tuple(bool arbitrateViaEscalationManager, bool discardOracle, bool validateDisputers, address assertingCaller, address escalationManager) escalationManagerSettings, address asserter, uint64 assertionTime, bool settled, address currency, uint64 expirationTime, bool settlementResolution, bytes32 domainId, bytes32 identifier, uint256 bond, address callbackRecipient, address disputer))",
      "function getAssertionResult(bytes32 assertionId) view returns (bool)",
      "function getCurrentTime() view returns (uint256)",
      "function getMinimumBond(address currency) view returns (uint256)",
      "function multicall(bytes[] data) returns (bytes[] results)",
      "function numericalTrue() view returns (int256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAdminProperties(address _defaultCurrency, uint64 _defaultLiveness, uint256 _burnedBondPercentage)",
      "function settleAndGetAssertionResult(bytes32 assertionId) returns (bool)",
      "function settleAssertion(bytes32 assertionId)",
      "function stampAssertion(bytes32 assertionId) view returns (bytes)",
      "function syncUmaParams(bytes32 identifier, address currency)",
      "function transferOwnership(address newOwner)"
    ]
  },
  "usedTemplates": {
    "amarok/Relayer": "0xc06497ad0c634f581d93cefc639ed852334cd7fa0219bc93d7c9400a8e2e8815",
    "amarok/RelayerProxyHub": "0xabf44b5af1f5a5287b387cf1ec1d54a3d609495fa34a36162765992d7d896fc0",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "uma/AddressWhitelist": "0x69e6632f3173e459b6788df25788c8e5a53fc171a191bcdc60dbf6573a17ef38",
    "uma/EmergencyProposer": "0x2cf4d5496e11daf1a1ea3a68bde77a515235544c5b17addbedd4d2be5b04091a",
    "uma/Finder": "0xc1cfa8a8f0115f996b5cdc909e96963a198e202aae06ef575a94e1f6ea8468c1",
    "uma/GovernorV2": "0x81d6fd7585e7ab2e8891686228a91b2ee97c9d350f07d842951990154e995207",
    "uma/IdentifierWhitelist": "0xdb8a8c20a9aaf867216fa3a6ab093e400e6b60f94216573a8e53fec8d3e58cf1",
    "uma/OptimisticGovernor": "0x3fff5c660f9919596c95429ee518caa6e3510031eb7fcec1945bd422b0e9f93e",
    "uma/OptimisticOracleV3": "0x5957a09c103880109a019903db4f13bd33cc479faa82ad2336d2247d912a3306",
    "uma/ProposerV2": "0x0253b13a0deb88312d07815f055d6a3a6bba0f9e9c38608d5ffa43f6aafecb26",
    "uma/Registry": "0x0949d0d2edf24347afc4eadf1fe083fd85363d16a445c16814e5ab50880bda8e",
    "uma/SkinnyOptimisticOracle": "0x1434821bf46e935aa8212feff24f12aba596cb343a0f7e1cd85c013d25744d5f",
    "uma/Store": "0x0a0876560462dda4883db23e6343c1d28c8234886cda82b177de3cb263b1e86b"
  },
  "usedBlockNumbers": { "ethereum": 23067462 },
  "permissionsConfigHash": "0x374f1dcd3758e040d8c861238495ac3be3205eac7b121d5d58ede7f85a9eb8b9"
}
