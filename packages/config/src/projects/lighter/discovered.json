{
  "name": "lighter",
  "timestamp": 1759911325,
  "configHash": "0xded62d9fb9417d0f2fa93d8edfcf83d25d3ed3105fa2538ddfb528de6140b566",
  "entries": [
    {
      "address": "eth:0x037C8e6aF4AEB15A597FC3C2a6F1B30B4b0Ae2B1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x06eD0b0bD3A9e0C517B6cD7C8B851Cc1e8e1a90A",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x0bF05AA3b821Eaa341fAD0a674081A02d3dB169D",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x1c0F4f6daf0E0f32C5482672fa5342784915df21",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
          "description": "can commit, verify, execute batches, and revert committed but not yet executed batches.",
          "role": ".validators"
        }
      ]
    },
    {
      "address": "eth:0x3629C998Fe1045A86c423AcaacCB9cBF7c792011",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Lighter",
      "address": "eth:0x3B4D794a66304F130a4Db8F2551B0070dfCf5ca7",
      "type": "Contract",
      "template": "lighter/ZkLighter",
      "sourceHashes": [
        "0xc3b09aa3d8c5332715cea375895325cd01f6a04b61f1a1c885d73502955c6460",
        "0xa9200f827141ae9be2188327085a679c20ed563bf9bb6e5e2fc895b99b2bd5b0"
      ],
      "proxyType": "zkLighter proxy",
      "description": "The main rollup contract. It processes L2 batches, manages USDC deposits and withdrawals, allows users to submit censorship-resistnant L2 transactions and controls desert mode (recovery mode). Logic is split between two contracts because of code-size limits, many operations are delegated to AdditionalZKLighter.",
      "sinceTimestamp": 1737090335,
      "sinceBlock": 21642011,
      "values": {
        "$admin": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
        "$implementation": [
          "eth:0x1D2624A65F8aaD1c4Bc406b4D2418ba577D218cb",
          "eth:0x4194D3847a0239d59a87bC82C1870CBE1FA99db1"
        ],
        "additionalZkLighter": "eth:0x4194D3847a0239d59a87bC82C1870CBE1FA99db1",
        "committedBatchesCount": 54614,
        "committedPriorityRequestCount": 476906,
        "createdMarkets": [
          "USELESS",
          "TIA",
          "MORPHO",
          "VVV",
          "YZY",
          "XPL",
          "WLFI",
          "CRO",
          "NMR",
          "DOLO",
          "LINEA",
          "XMR",
          "PYTH",
          "SKY",
          "MYX",
          "1000TOSHI",
          "AVNT",
          "ASTER",
          "0G",
          "STBL",
          "APEX",
          "FF",
          "2Z",
          "EDEN",
          "ZEC"
        ],
        "desertMode": false,
        "desertVerifier": "eth:0x59406a5DcE71a4f631F9cd5D41996a19D6fDF184",
        "executedBatchesCount": 54597,
        "executedOnChainBatchesCount": 29001,
        "executedPriorityRequestCount": 476633,
        "getMaster": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
        "getTarget": "eth:0x1D2624A65F8aaD1c4Bc406b4D2418ba577D218cb",
        "governance": "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
        "insuranceFundOperator": "eth:0x3629C998Fe1045A86c423AcaacCB9cBF7c792011",
        "lastAccountIndex": 220517,
        "lastVerifiedEndBlockNumber": 59806746,
        "lastVerifiedStateRoot": "0xf884a8534b6343ea1b9f1e73607e41e36c45190a9b9ce442d5885476b5256c66",
        "lastVerifiedValidiumRoot": "0xfb5ef51acfc481d90b3b842af45a9d0b39ebfdbd5c83ae5b047b32b5ebc9b919",
        "MAX_ACCOUNT_INDEX": 281474976710654,
        "MAX_API_KEY_INDEX": 254,
        "MAX_BATCH_DEPOSIT_LENGTH": 1000,
        "MAX_DEPOSIT_AMOUNT": 1000000000000000,
        "MAX_EXCHANGE_USDC_AMOUNT": "1152921504606846975",
        "MAX_MARKET_INDEX": 254,
        "MAX_MASTER_ACCOUNT_INDEX": 140737488355327,
        "MAX_ORDER_BASE_AMOUNT": 281474976710655,
        "MAX_ORDER_PRICE": 4294967295,
        "MAX_ORDER_QUOTE_AMOUNT": 281474976710655,
        "MAX_POOL_SHARES_TO_MINT_OR_BURN": "1152921504606846975",
        "MIN_ORDER_BASE_AMOUNT": 1,
        "MIN_ORDER_PRICE": 1,
        "MIN_POOL_SHARES_TO_MINT_OR_BURN": 1,
        "NIL_ACCOUNT_INDEX": 281474976710655,
        "NIL_ORDER_BASE_AMOUNT": 0,
        "openPriorityRequestCount": 597,
        "pendingOnChainBatchesCount": 16,
        "PRIORITY_EXPIRATION": 1555200,
        "stateRoot": "0xf884a8534b6343ea1b9f1e73607e41e36c45190a9b9ce442d5885476b5256c66",
        "stateRootUpgradeVerifier": "eth:0x0000000000000000000000000000000000000000",
        "treasury": "eth:0x44A5F41Fb364e52878193A8Ba375A1B17906D8E4",
        "validiumRoot": "0xfb5ef51acfc481d90b3b842af45a9d0b39ebfdbd5c83ae5b047b32b5ebc9b919",
        "verifiedBatchesCount": 54597,
        "verifiedPriorityRequestCount": 476633,
        "verifier": "eth:0xac3Ce44B6ff4E402858C99D5699ff63131572BaA"
      },
      "implementationNames": {
        "eth:0x3B4D794a66304F130a4Db8F2551B0070dfCf5ca7": "Proxy",
        "eth:0x1D2624A65F8aaD1c4Bc406b4D2418ba577D218cb": "ZkLighter",
        "eth:0x4194D3847a0239d59a87bC82C1870CBE1FA99db1": "AdditionalZkLighter"
      }
    },
    {
      "address": "eth:0x44A5F41Fb364e52878193A8Ba375A1B17906D8E4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x57ccC925f54aC946C3423808929fE77265c9045d",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "DesertVerifier",
      "address": "eth:0x59406a5DcE71a4f631F9cd5D41996a19D6fDF184",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "sinceTimestamp": 1737090323,
      "sinceBlock": 21642010,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0x59406a5DcE71a4f631F9cd5D41996a19D6fDF184": ""
      }
    },
    {
      "address": "eth:0x8B0190046D7b366642D4ff091C100d84ec4AB6f6",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Lighter Multisig",
      "address": "eth:0x92b12c9d85BF7bd2EF5d2F53F4cd4Ce0BE432045",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
          "description": "can reduce the upgrade delay to zero seconds.",
          "role": ".securityCouncilAddress"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1737058487,
      "sinceBlock": 21639370,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x037C8e6aF4AEB15A597FC3C2a6F1B30B4b0Ae2B1",
          "eth:0x57ccC925f54aC946C3423808929fE77265c9045d",
          "eth:0x0bF05AA3b821Eaa341fAD0a674081A02d3dB169D",
          "eth:0x8B0190046D7b366642D4ff091C100d84ec4AB6f6",
          "eth:0x06eD0b0bD3A9e0C517B6cD7C8B851Cc1e8e1a90A"
        ],
        "$threshold": 3,
        "domainSeparator": "0xa285fb69ffea3ae8ae62ec3a2e6063b7953d6bc001d8955b93911c0907f7636b",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 5 (60%)",
        "nonce": 40,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0x92b12c9d85BF7bd2EF5d2F53F4cd4Ce0BE432045": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "name": "UpgradeGatekeeper",
      "address": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
      "type": "Contract",
      "template": "lighter/UpgradeGatekeeper",
      "sourceHashes": [
        "0xf2bfc82ef31f512666c7b406fef29855df438601bbba758fb91bef2837a76c26"
      ],
      "proxyType": "immutable",
      "description": "Governance contract functioning like an upgrade timelock for downstream contracts. The current delay is 21d and can be entirely skipped by eth:0x92b12c9d85BF7bd2EF5d2F53F4cd4Ce0BE432045.",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x3B4D794a66304F130a4Db8F2551B0070dfCf5ca7",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xac3Ce44B6ff4E402858C99D5699ff63131572BaA",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1737090335,
      "sinceBlock": 21642011,
      "values": {
        "$immutable": true,
        "approvedUpgradeNoticePeriod": 1814400,
        "approvedUpgradeNoticePeriodFmt": "21d",
        "getMaster": "eth:0xfDb36C132fA19f7774d72fA39c89272D1B954A41",
        "managedContracts": [
          "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
          "eth:0xac3Ce44B6ff4E402858C99D5699ff63131572BaA",
          "eth:0x3B4D794a66304F130a4Db8F2551B0070dfCf5ca7"
        ],
        "nextTargets": [],
        "noticePeriodFinishTimestamp": 0,
        "securityCouncilAddress": "eth:0x92b12c9d85BF7bd2EF5d2F53F4cd4Ce0BE432045",
        "upgradeStartTimestamp": 0,
        "upgradeStatus": 0,
        "versionId": 31,
        "zkLighterProxy": "eth:0x3B4D794a66304F130a4Db8F2551B0070dfCf5ca7"
      },
      "fieldMeta": {
        "approvedUpgradeNoticePeriodFmt": {
          "description": "upgrade delay, can be skipped by the 'securityCouncil' role."
        }
      },
      "implementationNames": {
        "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67": "UpgradeGatekeeper"
      }
    },
    {
      "name": "Governance",
      "address": "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
      "type": "Contract",
      "template": "lighter/Governance",
      "sourceHashes": [
        "0xc3b09aa3d8c5332715cea375895325cd01f6a04b61f1a1c885d73502955c6460",
        "0xf6cff14a43f325bcc62514ffd204ebdd7d556d2b7d8111003a5d5809859f2223"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Manages the list of validators and the network governor.",
      "sinceTimestamp": 1737090335,
      "sinceBlock": 21642011,
      "values": {
        "$admin": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
        "$implementation": "eth:0x46D3C0c01D5DAae4FE8e3f54f32901d9Fbde1f08",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "getMaster": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
        "getTarget": "eth:0x46D3C0c01D5DAae4FE8e3f54f32901d9Fbde1f08",
        "MAX_ACCOUNT_INDEX": 281474976710654,
        "MAX_API_KEY_INDEX": 254,
        "MAX_DEPOSIT_AMOUNT": 1000000000000000,
        "MAX_EXCHANGE_USDC_AMOUNT": "1152921504606846975",
        "MAX_MARKET_INDEX": 254,
        "MAX_MASTER_ACCOUNT_INDEX": 140737488355327,
        "MAX_ORDER_BASE_AMOUNT": 281474976710655,
        "MAX_ORDER_PRICE": 4294967295,
        "MAX_POSITION_AMOUNT": "72057594037927935",
        "MAX_POSITION_QUOTE_AMOUNT": "72057594037927935",
        "MIN_ORDER_BASE_AMOUNT": 1,
        "MIN_ORDER_PRICE": 1,
        "networkGovernor": "eth:0xfDb36C132fA19f7774d72fA39c89272D1B954A41",
        "NIL_ACCOUNT_INDEX": 281474976710655,
        "PRIORITY_EXPIRATION": 1555200,
        "usdc": "eth:0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "validators": [
          "eth:0xfDb36C132fA19f7774d72fA39c89272D1B954A41",
          "eth:0xFBC0dcd6c3518cB529bC1B585dB992A7d40005fa",
          "eth:0xfcB73F6405F6B9be91013d9477d81833a69C9c0D",
          "eth:0x1c0F4f6daf0E0f32C5482672fa5342784915df21"
        ]
      },
      "implementationNames": {
        "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1": "Proxy",
        "eth:0x46D3C0c01D5DAae4FE8e3f54f32901d9Fbde1f08": "Governance"
      }
    },
    {
      "name": "ZkLighterVerifier",
      "address": "eth:0xac3Ce44B6ff4E402858C99D5699ff63131572BaA",
      "type": "Contract",
      "template": "lighter/ZkLighterVerifier",
      "sourceHashes": [
        "0xc3b09aa3d8c5332715cea375895325cd01f6a04b61f1a1c885d73502955c6460",
        "0x5191196a6fb417df695e41cac070ffb36ce01a4c49b7d89ad809fea72e6e18c4"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main ZK verifier of Lighter, settles the proofs of correct L2 state transition in the case of normal rollup operation.",
      "sinceTimestamp": 1737090335,
      "sinceBlock": 21642011,
      "values": {
        "$admin": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
        "$implementation": "eth:0x9a3Cc15b31Aec100d0C49B16cC401eaEf5A0A500",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "getMaster": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
        "getTarget": "eth:0x9a3Cc15b31Aec100d0C49B16cC401eaEf5A0A500"
      },
      "implementationNames": {
        "eth:0xac3Ce44B6ff4E402858C99D5699ff63131572BaA": "Proxy",
        "eth:0x9a3Cc15b31Aec100d0C49B16cC401eaEf5A0A500": "ZkLighterVerifier"
      }
    },
    {
      "address": "eth:0xFBC0dcd6c3518cB529bC1B585dB992A7d40005fa",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
          "description": "can commit, verify, execute batches, and revert committed but not yet executed batches.",
          "role": ".validators"
        }
      ]
    },
    {
      "address": "eth:0xfcB73F6405F6B9be91013d9477d81833a69C9c0D",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
          "description": "can commit, verify, execute batches, and revert committed but not yet executed batches.",
          "role": ".validators"
        }
      ]
    },
    {
      "address": "eth:0xfDb36C132fA19f7774d72fA39c89272D1B954A41",
      "type": "EOA",
      "proxyType": "EOA",
      "controlsMajorityOfUpgradePermissions": true,
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
          "description": "can commit, verify, execute batches, and revert committed but not yet executed batches.",
          "role": ".validators"
        },
        {
          "permission": "interact",
          "from": "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
          "description": "manage validators, update the address that manages the insurance fund, and update the treasury address that collects fees from markets.",
          "role": ".networkGovernor"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x3B4D794a66304F130a4Db8F2551B0070dfCf5ca7",
          "role": "admin",
          "via": [
            {
              "address": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
              "delay": 1814400
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1",
          "role": "admin",
          "via": [
            {
              "address": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
              "delay": 1814400
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xac3Ce44B6ff4E402858C99D5699ff63131572BaA",
          "role": "admin",
          "via": [
            {
              "address": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
              "delay": 1814400
            }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67",
          "delay": 1814400,
          "role": ".getMaster"
        }
      ]
    }
  ],
  "abis": {
    "eth:0x1D2624A65F8aaD1c4Bc406b4D2418ba577D218cb": [
      "constructor()",
      "error ZkLighter_BatchNotInOnChainQueue()",
      "error ZkLighter_CannotBeInitialisedByImpl()",
      "error ZkLighter_CannotExecuteNonVerifiedBatch()",
      "error ZkLighter_CannotVerifyNonCommittedBatch()",
      "error ZkLighter_CommitBatchPriorityRequestCountMismatch()",
      "error ZkLighter_DesertModeActive()",
      "error ZkLighter_ExecuteInputLengthGreaterThanPendingCount()",
      "error ZkLighter_ExecuteInputLengthMismatch()",
      "error ZkLighter_ImplCantDelegateToAddl()",
      "error ZkLighter_InsuranceFundOperatorCannotBeInUse()",
      "error ZkLighter_InsuranceFundOperatorCannotBeZero()",
      "error ZkLighter_InvalidBatchSize()",
      "error ZkLighter_InvalidBlobCommitmentParams()",
      "error ZkLighter_InvalidBlobCount(uint256)",
      "error ZkLighter_InvalidInitializeParameters()",
      "error ZkLighter_InvalidPointEvaluationParams()",
      "error ZkLighter_InvalidPubDataLength()",
      "error ZkLighter_InvalidPubDataMode()",
      "error ZkLighter_InvalidPubDataType()",
      "error ZkLighter_InvalidUpgradeParameters()",
      "error ZkLighter_InvalidWithdrawAmount()",
      "error ZkLighter_NonIncreasingBlockNumber()",
      "error ZkLighter_NonIncreasingTimestamp()",
      "error ZkLighter_OnChainOperationsHashMismatch()",
      "error ZkLighter_OnlyProxyCanCallUpgrade()",
      "error ZkLighter_OnlyZkLighter()",
      "error ZkLighter_PriorityRequestPrefixHashMismatch()",
      "error ZkLighter_RollUpBalanceBiggerThanMaxAmount()",
      "error ZkLighter_StoredBatchInfoMismatch()",
      "error ZkLighter_TreasuryCannotBeInUse()",
      "error ZkLighter_TreasuryCannotBeZero()",
      "error ZkLighter_VerifyBatchNotInOrder()",
      "error ZkLighter_VerifyBatchProofFailed()",
      "event BatchCommit(uint64 batchNumber, uint32 batchSize, uint64 endBlockNumber)",
      "event BatchVerification(uint64 batchNumber, uint32 batchSize, uint64 endBlockNumber)",
      "event BatchesExecuted(uint64 batchNumber, uint64 endBlockNumber)",
      "event BatchesRevert(uint64 newTotalBlocksCommitted)",
      "event BurnShares(tuple(uint48 accountIndex, uint48 masterAccountIndex, uint48 publicPoolIndex, uint64 sharesAmount) params)",
      "event CancelAllOrders(uint48 accountIndex)",
      "event ChangePubKey(uint48 accountIndex, uint8 apiKeyIndex, bytes pubKey)",
      "event CreateMarket(tuple(uint8 marketIndex, uint32 quoteMultiplier, uint32 takerFee, uint32 makerFee, uint32 liquidationFee, uint64 minBaseAmount, uint64 minQuoteAmount, uint16 defaultInitialMarginFraction, uint16 minInitialMarginFraction, uint16 maintenanceMarginFraction, uint16 closeOutMarginFraction, uint32 interestRate, uint24 fundingClampSmall, uint24 fundingClampBig, uint56 openInterestLimit, uint48 orderQuoteLimit) params, uint8 sizeDecimals, uint8 priceDecimals, bytes32 symbol)",
      "event CreateOrder(tuple(uint48 accountIndex, uint48 masterAccountIndex, uint8 marketIndex, uint48 baseAmount, uint32 price, uint8 isAsk, uint8 orderType) params)",
      "event Deposit(uint48 toAccountIndex, address toAddress, uint128 amount)",
      "event DesertMode()",
      "event Initialized(uint8 version)",
      "event InsuranceFundOperatorUpdate(address newInsuranceFundOperator)",
      "event NewPriorityRequest(address sender, uint64 serialId, uint8 pubdataType, bytes pubData, uint64 expirationTimestamp)",
      "event StateRootUpdate(uint64 batchNumber, bytes32 oldStateRoot, bytes32 newStateRoot)",
      "event TreasuryUpdate(address newTreasury)",
      "event UpdateMarket(tuple(uint8 marketIndex, uint8 status, uint32 takerFee, uint32 makerFee, uint32 liquidationFee, uint64 minBaseAmount, uint64 minQuoteAmount, uint16 defaultInitialMarginFraction, uint16 minInitialMarginFraction, uint16 maintenanceMarginFraction, uint16 closeOutMarginFraction, uint32 interestRate, uint24 fundingClampSmall, uint24 fundingClampBig, uint56 openInterestLimit, uint48 orderQuoteLimit) params)",
      "event Withdraw(uint48 accountIndex, uint64 usdcAmount)",
      "event WithdrawPending(address indexed owner, uint128 amount)",
      "function MAX_ACCOUNT_INDEX() view returns (uint48)",
      "function MAX_API_KEY_INDEX() view returns (uint8)",
      "function MAX_BATCH_DEPOSIT_LENGTH() view returns (uint64)",
      "function MAX_DEPOSIT_AMOUNT() view returns (uint64)",
      "function MAX_EXCHANGE_USDC_AMOUNT() view returns (uint64)",
      "function MAX_MARKET_INDEX() view returns (uint8)",
      "function MAX_MASTER_ACCOUNT_INDEX() view returns (uint48)",
      "function MAX_ORDER_BASE_AMOUNT() view returns (uint48)",
      "function MAX_ORDER_PRICE() view returns (uint32)",
      "function MAX_ORDER_QUOTE_AMOUNT() view returns (uint48)",
      "function MAX_POOL_SHARES_TO_MINT_OR_BURN() view returns (uint64)",
      "function MIN_ORDER_BASE_AMOUNT() view returns (uint48)",
      "function MIN_ORDER_PRICE() view returns (uint32)",
      "function MIN_POOL_SHARES_TO_MINT_OR_BURN() view returns (uint64)",
      "function NIL_ACCOUNT_INDEX() view returns (uint48)",
      "function NIL_ORDER_BASE_AMOUNT() view returns (uint48)",
      "function PRIORITY_EXPIRATION() view returns (uint256)",
      "function __DEPRECATED_stateRootUpdates(uint64) view returns (bytes32)",
      "function activateDesertMode() returns (bool)",
      "function addressToAccountIndex(address) view returns (uint48)",
      "function burnShares(uint48 _accountIndex, uint48 _publicPoolIndex, uint64 _shareAmount)",
      "function cancelAllOrders(uint48 _accountIndex)",
      "function cancelOutstandingDepositsForDesertMode(uint64 _n, bytes[] _depositsPubData)",
      "function changePubKey(uint48 _accountIndex, uint8 _apiKeyIndex, bytes _pubKey)",
      "function commitBatch(tuple(uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 newStateRoot, bytes32 newValidiumRoot, bytes pubdataCommitments) newBatchData, tuple(uint64 batchNumber, uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 stateRoot, bytes32 validiumRoot, bytes32 commitment) lastStoredBatch)",
      "function committedBatchesCount() view returns (uint64)",
      "function committedPriorityRequestCount() view returns (uint64)",
      "function createMarket(uint8 _size_decimals, uint8 _price_decimals, bytes32 _symbol, tuple(uint8 marketIndex, uint32 quoteMultiplier, uint32 takerFee, uint32 makerFee, uint32 liquidationFee, uint64 minBaseAmount, uint64 minQuoteAmount, uint16 defaultInitialMarginFraction, uint16 minInitialMarginFraction, uint16 maintenanceMarginFraction, uint16 closeOutMarginFraction, uint32 interestRate, uint24 fundingClampSmall, uint24 fundingClampBig, uint56 openInterestLimit, uint48 orderQuoteLimit) _params)",
      "function createOrder(uint48 _accountIndex, uint8 _marketIndex, uint48 _baseAmount, uint32 _price, uint8 _isAsk, uint8 _orderType)",
      "function deposit(uint64 _amount, address _to)",
      "function depositBatch(uint64[] _amounts, address[] _to, uint48[] _accountIndex)",
      "function desertMode() view returns (bool)",
      "function executeBatches(tuple(uint64 batchNumber, uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 stateRoot, bytes32 validiumRoot, bytes32 commitment)[] batches, bytes[] onChainOperationsPubData)",
      "function executedBatchesCount() view returns (uint64)",
      "function executedOnChainBatchesCount() view returns (uint64)",
      "function executedPriorityRequestCount() view returns (uint64)",
      "function getPendingBalance(address _owner) view returns (uint128)",
      "function initialize(bytes initializationParameters)",
      "function insuranceFundOperator() view returns (address)",
      "function lastAccountIndex() view returns (uint48)",
      "function lastVerifiedEndBlockNumber() view returns (uint64)",
      "function lastVerifiedStateRoot() view returns (bytes32)",
      "function lastVerifiedValidiumRoot() view returns (bytes32)",
      "function openPriorityRequestCount() view returns (uint64)",
      "function pendingOnChainBatchesCount() view returns (uint64)",
      "function performDesert(uint48 _accountIndex, uint48 _masterAccountIndex, uint128 _totalAccountValue, bytes proof)",
      "function revertBatches(tuple(uint64 batchNumber, uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 stateRoot, bytes32 validiumRoot, bytes32 commitment)[] _batchesToRevert, tuple(uint64 batchNumber, uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 stateRoot, bytes32 validiumRoot, bytes32 commitment) _remainingBatch)",
      "function setInsuranceFundOperator(address _newInsuranceFundOperator)",
      "function setTreasury(address _newTreasury)",
      "function stateRoot() view returns (bytes32)",
      "function stateRootUpdates(uint64) view returns (bytes32)",
      "function storedBatchHashes(uint64) view returns (bytes32)",
      "function transferERC20(address _token, address _to, uint128 _amount, uint128 _maxAmount) returns (uint128 withdrawnAmount)",
      "function treasury() view returns (address)",
      "function updateMarket(tuple(uint8 marketIndex, uint8 status, uint32 takerFee, uint32 makerFee, uint32 liquidationFee, uint64 minBaseAmount, uint64 minQuoteAmount, uint16 defaultInitialMarginFraction, uint16 minInitialMarginFraction, uint16 maintenanceMarginFraction, uint16 closeOutMarginFraction, uint32 interestRate, uint24 fundingClampSmall, uint24 fundingClampBig, uint56 openInterestLimit, uint48 orderQuoteLimit) _params)",
      "function updateStateRoot(tuple(uint64 batchNumber, uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 stateRoot, bytes32 validiumRoot, bytes32 commitment) _lastStoredBatch, bytes32 _stateRoot, bytes32 _validiumRoot, bytes proof)",
      "function upgrade(bytes upgradeParameters)",
      "function validiumRoot() view returns (bytes32)",
      "function verifiedBatchesCount() view returns (uint64)",
      "function verifiedPriorityRequestCount() view returns (uint64)",
      "function verifyBatch(tuple(uint64 batchNumber, uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 stateRoot, bytes32 validiumRoot, bytes32 commitment) batch, bytes proof)",
      "function withdraw(uint48 _accountIndex, uint64 _usdcAmount)",
      "function withdrawPendingBalance(address _owner, uint128 _amount)"
    ],
    "eth:0x3B4D794a66304F130a4Db8F2551B0070dfCf5ca7": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": [
      "constructor()",
      "event AddedOwner(address indexed owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address indexed handler)",
      "event ChangedGuard(address indexed guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address indexed module)",
      "event EnabledModule(address indexed module)",
      "event ExecutionFailure(bytes32 indexed txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 indexed txHash, uint256 payment)",
      "event RemovedOwner(address indexed owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0x4194D3847a0239d59a87bC82C1870CBE1FA99db1": [
      "error AdditionalZkLighter_AccountIsNotRegistered()",
      "error AdditionalZkLighter_CannotRevertExecutedBatch()",
      "error AdditionalZkLighter_CannotRevertGenesisBatch()",
      "error AdditionalZkLighter_DepositPubdataHashMismatch()",
      "error AdditionalZkLighter_DesertModeInactive()",
      "error AdditionalZkLighter_DesertPerformedForAccount()",
      "error AdditionalZkLighter_DesertVerifyProofFailed()",
      "error AdditionalZkLighter_InvalidAccountIndex()",
      "error AdditionalZkLighter_InvalidApiKeyIndex()",
      "error AdditionalZkLighter_InvalidCreateOrderParameters()",
      "error AdditionalZkLighter_InvalidDepositAmount()",
      "error AdditionalZkLighter_InvalidDepositBatchLength()",
      "error AdditionalZkLighter_InvalidDesertParameters()",
      "error AdditionalZkLighter_InvalidFeeAmount()",
      "error AdditionalZkLighter_InvalidFundingClamps()",
      "error AdditionalZkLighter_InvalidInterestRate()",
      "error AdditionalZkLighter_InvalidMarginFraction()",
      "error AdditionalZkLighter_InvalidMarketDecimals()",
      "error AdditionalZkLighter_InvalidMarketIndex()",
      "error AdditionalZkLighter_InvalidMarketStatus()",
      "error AdditionalZkLighter_InvalidMinAmounts()",
      "error AdditionalZkLighter_InvalidOpenInterestLimit()",
      "error AdditionalZkLighter_InvalidOrderQuoteLimit()",
      "error AdditionalZkLighter_InvalidParamsForCancelOutstandingDeposits()",
      "error AdditionalZkLighter_InvalidPubKey()",
      "error AdditionalZkLighter_InvalidQuoteMultiplier()",
      "error AdditionalZkLighter_InvalidShareAmount()",
      "error AdditionalZkLighter_InvalidWithdrawAmount()",
      "error AdditionalZkLighter_MarketAlreadyExists()",
      "error AdditionalZkLighter_NoOutstandingDepositsForCancelation()",
      "error AdditionalZkLighter_PendingVerifiedRequestExecution()",
      "error AdditionalZkLighter_PubdataLengthMismatch()",
      "error AdditionalZkLighter_RecipientAddressInvalid()",
      "error AdditionalZkLighter_StateRootUpgradeVerifierFailed()",
      "error AdditionalZkLighter_StateRootUpgradeVerifierNotFound()",
      "error AdditionalZkLighter_StoredBatchHashMismatch()",
      "error AdditionalZkLighter_StoredBatchInfoMismatch()",
      "error AdditionalZkLighter_TooManyRegisteredAccounts()",
      "error ZkLighter_DesertModeActive()",
      "event BatchCommit(uint64 batchNumber, uint32 batchSize, uint64 endBlockNumber)",
      "event BatchVerification(uint64 batchNumber, uint32 batchSize, uint64 endBlockNumber)",
      "event BatchesExecuted(uint64 batchNumber, uint64 endBlockNumber)",
      "event BatchesRevert(uint64 newTotalBlocksCommitted)",
      "event BurnShares(tuple(uint48 accountIndex, uint48 masterAccountIndex, uint48 publicPoolIndex, uint64 sharesAmount) params)",
      "event CancelAllOrders(uint48 accountIndex)",
      "event ChangePubKey(uint48 accountIndex, uint8 apiKeyIndex, bytes pubKey)",
      "event CreateMarket(tuple(uint8 marketIndex, uint32 quoteMultiplier, uint32 takerFee, uint32 makerFee, uint32 liquidationFee, uint64 minBaseAmount, uint64 minQuoteAmount, uint16 defaultInitialMarginFraction, uint16 minInitialMarginFraction, uint16 maintenanceMarginFraction, uint16 closeOutMarginFraction, uint32 interestRate, uint24 fundingClampSmall, uint24 fundingClampBig, uint56 openInterestLimit, uint48 orderQuoteLimit) params, uint8 sizeDecimals, uint8 priceDecimals, bytes32 symbol)",
      "event CreateOrder(tuple(uint48 accountIndex, uint48 masterAccountIndex, uint8 marketIndex, uint48 baseAmount, uint32 price, uint8 isAsk, uint8 orderType) params)",
      "event Deposit(uint48 toAccountIndex, address toAddress, uint128 amount)",
      "event DesertMode()",
      "event Initialized(uint8 version)",
      "event InsuranceFundOperatorUpdate(address newInsuranceFundOperator)",
      "event NewPriorityRequest(address sender, uint64 serialId, uint8 pubdataType, bytes pubData, uint64 expirationTimestamp)",
      "event StateRootUpdate(uint64 batchNumber, bytes32 oldStateRoot, bytes32 newStateRoot)",
      "event TreasuryUpdate(address newTreasury)",
      "event UpdateMarket(tuple(uint8 marketIndex, uint8 status, uint32 takerFee, uint32 makerFee, uint32 liquidationFee, uint64 minBaseAmount, uint64 minQuoteAmount, uint16 defaultInitialMarginFraction, uint16 minInitialMarginFraction, uint16 maintenanceMarginFraction, uint16 closeOutMarginFraction, uint32 interestRate, uint24 fundingClampSmall, uint24 fundingClampBig, uint56 openInterestLimit, uint48 orderQuoteLimit) params)",
      "event Withdraw(uint48 accountIndex, uint64 usdcAmount)",
      "event WithdrawPending(address indexed owner, uint128 amount)",
      "function MAX_ACCOUNT_INDEX() view returns (uint48)",
      "function MAX_API_KEY_INDEX() view returns (uint8)",
      "function MAX_BATCH_DEPOSIT_LENGTH() view returns (uint64)",
      "function MAX_DEPOSIT_AMOUNT() view returns (uint64)",
      "function MAX_EXCHANGE_USDC_AMOUNT() view returns (uint64)",
      "function MAX_MARKET_INDEX() view returns (uint8)",
      "function MAX_MASTER_ACCOUNT_INDEX() view returns (uint48)",
      "function MAX_ORDER_BASE_AMOUNT() view returns (uint48)",
      "function MAX_ORDER_PRICE() view returns (uint32)",
      "function MAX_ORDER_QUOTE_AMOUNT() view returns (uint48)",
      "function MAX_POOL_SHARES_TO_MINT_OR_BURN() view returns (uint64)",
      "function MIN_ORDER_BASE_AMOUNT() view returns (uint48)",
      "function MIN_ORDER_PRICE() view returns (uint32)",
      "function MIN_POOL_SHARES_TO_MINT_OR_BURN() view returns (uint64)",
      "function NIL_ACCOUNT_INDEX() view returns (uint48)",
      "function NIL_ORDER_BASE_AMOUNT() view returns (uint48)",
      "function PRIORITY_EXPIRATION() view returns (uint256)",
      "function __DEPRECATED_stateRootUpdates(uint64) view returns (bytes32)",
      "function addressToAccountIndex(address) view returns (uint48)",
      "function burnShares(uint48 _accountIndex, uint48 _publicPoolIndex, uint64 _shareAmount)",
      "function cancelAllOrders(uint48 _accountIndex)",
      "function cancelOutstandingDepositsForDesertMode(uint64 _n, bytes[] _priorityPubData)",
      "function changePubKey(uint48 _accountIndex, uint8 _apiKeyIndex, bytes _pubKey)",
      "function committedBatchesCount() view returns (uint64)",
      "function committedPriorityRequestCount() view returns (uint64)",
      "function createMarket(uint8 _size_decimals, uint8 _price_decimals, bytes32 _symbol, tuple(uint8 marketIndex, uint32 quoteMultiplier, uint32 takerFee, uint32 makerFee, uint32 liquidationFee, uint64 minBaseAmount, uint64 minQuoteAmount, uint16 defaultInitialMarginFraction, uint16 minInitialMarginFraction, uint16 maintenanceMarginFraction, uint16 closeOutMarginFraction, uint32 interestRate, uint24 fundingClampSmall, uint24 fundingClampBig, uint56 openInterestLimit, uint48 orderQuoteLimit) _params)",
      "function createOrder(uint48 _accountIndex, uint8 _marketIndex, uint48 _baseAmount, uint32 _price, uint8 _isAsk, uint8 _orderType)",
      "function deposit(uint64 _amount, address _to)",
      "function depositBatch(uint64[] _amount, address[] _to, uint48[] _accountIndex)",
      "function desertMode() view returns (bool)",
      "function executedBatchesCount() view returns (uint64)",
      "function executedOnChainBatchesCount() view returns (uint64)",
      "function executedPriorityRequestCount() view returns (uint64)",
      "function insuranceFundOperator() view returns (address)",
      "function lastAccountIndex() view returns (uint48)",
      "function lastVerifiedEndBlockNumber() view returns (uint64)",
      "function lastVerifiedStateRoot() view returns (bytes32)",
      "function lastVerifiedValidiumRoot() view returns (bytes32)",
      "function openPriorityRequestCount() view returns (uint64)",
      "function pendingOnChainBatchesCount() view returns (uint64)",
      "function performDesert(uint48 _accountIndex, uint48 _masterAccountIndex, uint128 _totalAccountValue, bytes proof)",
      "function revertBatches(tuple(uint64 batchNumber, uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 stateRoot, bytes32 validiumRoot, bytes32 commitment)[] _batchesToRevert, tuple(uint64 batchNumber, uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 stateRoot, bytes32 validiumRoot, bytes32 commitment) _remainingBatch)",
      "function stateRoot() view returns (bytes32)",
      "function stateRootUpdates(uint64) view returns (bytes32)",
      "function storedBatchHashes(uint64) view returns (bytes32)",
      "function treasury() view returns (address)",
      "function updateMarket(tuple(uint8 marketIndex, uint8 status, uint32 takerFee, uint32 makerFee, uint32 liquidationFee, uint64 minBaseAmount, uint64 minQuoteAmount, uint16 defaultInitialMarginFraction, uint16 minInitialMarginFraction, uint16 maintenanceMarginFraction, uint16 closeOutMarginFraction, uint32 interestRate, uint24 fundingClampSmall, uint24 fundingClampBig, uint56 openInterestLimit, uint48 orderQuoteLimit) _params)",
      "function updateStateRoot(tuple(uint64 batchNumber, uint64 endBlockNumber, uint32 batchSize, uint64 startTimestamp, uint64 endTimestamp, uint32 priorityRequestCount, bytes32 prefixPriorityRequestHash, bytes32 onChainOperationsHash, bytes32 stateRoot, bytes32 validiumRoot, bytes32 commitment) _lastStoredBatch, bytes32 _stateRoot, bytes32 _validiumRoot, bytes proof)",
      "function validiumRoot() view returns (bytes32)",
      "function verifiedBatchesCount() view returns (uint64)",
      "function verifiedPriorityRequestCount() view returns (uint64)",
      "function withdraw(uint48 _accountIndex, uint64 _usdcAmount)"
    ],
    "eth:0x46D3C0c01D5DAae4FE8e3f54f32901d9Fbde1f08": [
      "constructor()",
      "error ZkLighter_Governance_GovernorCannotBeZero()",
      "error ZkLighter_Governance_InvalidUSDCAddress()",
      "error ZkLighter_Governance_InvalidValidator()",
      "error ZkLighter_Governance_OnlyGovernor()",
      "error ZkLighter_Governance_ValidatorCannotBeZero()",
      "event Initialized(uint8 version)",
      "event NewGovernor(address newGovernor)",
      "event ValidatorStatusUpdate(address validatorAddress, bool isActive)",
      "function MAX_ACCOUNT_INDEX() view returns (uint48)",
      "function MAX_API_KEY_INDEX() view returns (uint8)",
      "function MAX_DEPOSIT_AMOUNT() view returns (uint64)",
      "function MAX_EXCHANGE_USDC_AMOUNT() view returns (uint64)",
      "function MAX_MARKET_INDEX() view returns (uint8)",
      "function MAX_MASTER_ACCOUNT_INDEX() view returns (uint48)",
      "function MAX_ORDER_BASE_AMOUNT() view returns (uint48)",
      "function MAX_ORDER_PRICE() view returns (uint32)",
      "function MAX_POSITION_AMOUNT() view returns (uint64)",
      "function MAX_POSITION_QUOTE_AMOUNT() view returns (uint64)",
      "function MIN_ORDER_BASE_AMOUNT() view returns (uint48)",
      "function MIN_ORDER_PRICE() view returns (uint32)",
      "function NIL_ACCOUNT_INDEX() view returns (uint48)",
      "function PRIORITY_EXPIRATION() view returns (uint256)",
      "function changeGovernor(address _newGovernor)",
      "function initialize(bytes initializationParameters)",
      "function isActiveValidator(address _address) view",
      "function networkGovernor() view returns (address)",
      "function requireGovernor(address _address) view",
      "function setValidator(address _validator, bool _active)",
      "function upgrade(bytes upgradeParameters)",
      "function usdc() view returns (address)",
      "function validators(address) view returns (bool)"
    ],
    "eth:0x92b12c9d85BF7bd2EF5d2F53F4cd4Ce0BE432045": [
      "constructor(address _singleton)"
    ],
    "eth:0x94da8A995D0D82Ef0fE7E509C6D76c22603B6f67": [
      "constructor(address _securityCouncilAddress, address _zkLighterProxy)",
      "event NewUpgradable(uint256 indexed versionId, address indexed upgradeable)",
      "event NoticePeriodChange(uint256 newNoticePeriod)",
      "event NoticePeriodStart(uint256 indexed versionId, address[] newTargets, uint256 noticePeriod)",
      "event PreparationStart(uint256 indexed versionId)",
      "event UpgradeCancel(uint256 indexed versionId)",
      "event UpgradeComplete(uint256 indexed versionId, address[] newTargets)",
      "function addUpgradeable(address addr)",
      "function approvedUpgradeNoticePeriod() view returns (uint256)",
      "function cancelUpgrade()",
      "function cutUpgradeNoticePeriod(uint256 _upgradeStartTimestamp)",
      "function finishUpgrade(bytes[] targetsUpgradeParameters)",
      "function getMaster() view returns (address master)",
      "function managedContracts(uint256) view returns (address)",
      "function nextTargets(uint256) view returns (address)",
      "function noticePeriodFinishTimestamp() view returns (uint256)",
      "function securityCouncilAddress() view returns (address)",
      "function startPreparation() returns (bool)",
      "function startUpgrade(address[] newTargets)",
      "function transferMastership(address _newMaster)",
      "function upgradeStartTimestamp() view returns (uint256)",
      "function upgradeStatus() view returns (uint8)",
      "function versionId() view returns (uint256)",
      "function zkLighterProxy() view returns (address)"
    ],
    "eth:0x9a3Cc15b31Aec100d0C49B16cC401eaEf5A0A500": [
      "function Verify(bytes proof, uint256[] public_inputs) view returns (bool success)",
      "function initialize(bytes)",
      "function upgrade(bytes upgradeParameters)"
    ],
    "eth:0xa464DA0B43f80EE3FfC4795cbbFC78472b5c81A1": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ],
    "eth:0xac3Ce44B6ff4E402858C99D5699ff63131572BaA": [
      "constructor(address target, bytes targetInitializationParameters)",
      "function getMaster() view returns (address master)",
      "function getTarget() view returns (address target)",
      "function initialize(bytes) pure",
      "function transferMastership(address _newMaster)",
      "function upgrade(bytes) pure",
      "function upgradeTarget(address newTarget, bytes newTargetUpgradeParameters)"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "lighter/Governance": "0x4e9f04516598b2c63a839e9e92296b4c684dadcc7a872a6e7ba64e3413d7cdec",
    "lighter/UpgradeGatekeeper": "0x72341d695123479e7b06142a86f758d7b9488ac1cb776c7411630080ba1e9a59",
    "lighter/ZkLighter": "0x1f3c50ddda3ae792e9d0955c1532084bd5930fc7e95ee90581b1c1510744581d",
    "lighter/ZkLighterVerifier": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c"
  },
  "usedBlockNumbers": { "ethereum": 23531779 },
  "permissionsConfigHash": "0x1a24146fa507c5ecabb362d4e81e0f2de708dfb817e39a54c1bdad18160c3f5c"
}
