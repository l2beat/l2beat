% condition is nil if not defined
defaultedPermissionCondition(G, P, R, Delay, Description, nil) :-
  permission(G, P, R, Delay, Description),
  not permissionCondition(G, P, R, Delay, Description, _).

defaultedPermissionCondition(G, P, R, Delay, Description, Cond) :-
  permission(G, P, R, Delay, Description),
  permissionCondition(G, P, R, Delay, Description, Cond).

% multisig adds "act" permission if threshold is 1
permission(Receiver, "act", Msig, 0, nil) :-
  member(Msig, Receiver),
  msig(Msig, Threshold),
  Threshold == 1.

% multisig can act independently if threshold is greater than 1 (even if it passes act permission to e.g. module)
canActIndependently(Msig) :-
  msig(Msig, Threshold),
  not preventActingIndependently(Msig),
  Threshold > 1.

% anyone that doesn't pass act permission to someone else can act independently
canActIndependently(Actor) :-
  address(Actor, _, _),
  not permission(_, "act", Actor, _, _),
  not preventActingIndependently(Actor).

% 1. Building permissions with "Via" cons list and details such as descriptions and delays

transitivePermission(Receiver, Permission, Giver, Delay, Description, Condition, Delay, nil) :-
  permission(Receiver, Permission, Giver, Delay, Description),
  defaultedPermissionCondition(Receiver, Permission, Giver, Delay, Description, Condition).

transitivePermission(Receiver, OriginalPermission, Giver, OriginalDelay, OriginalDescription, OriginalCondition, TotalDelay, (cons(tuple(Via, ViaPermission, ViaDelay, ViaCondition), IndirectVia))) :-
  Receiver != Via, % deal with self-loops (e.g. timelock can act on timelock)
  transitivePermission(Via, OriginalPermission, Giver, OriginalDelay, OriginalDescription, OriginalCondition, PreviousTotalDelay, IndirectVia),
  permission(Receiver, ViaPermission, Via, ViaDelay, ViaDescription),
  defaultedPermissionCondition(Receiver, ViaPermission, Via, ViaDelay, ViaDescription, ViaCondition),
  ViaPermission == "act",
  TotalDelay = PreviousTotalDelay + ViaDelay.
  % OriginalPermission != "act". % we're only interested in the "final" permission, not intermediate "act".

% 2. Narrowing down to isFinal or directNonFinal 
ultimatePermission(Receiver, OriginalPermission, Giver, OriginalDelay, OriginalDescription, OriginalCondition, TotalDelay, Via, isFinal) :-
  transitivePermission(Receiver, OriginalPermission, Giver, OriginalDelay, OriginalDescription, OriginalCondition, TotalDelay, Via),
  OriginalPermission != "act",
  canActIndependently(Receiver).

ultimatePermission(Receiver, OriginalPermission, Giver, OriginalDelay, OriginalDescription, OriginalCondition, TotalDelay, Via, directNonFinal) :-
  transitivePermission(Receiver, OriginalPermission, Giver, OriginalDelay, OriginalDescription, OriginalCondition, TotalDelay, Via),
  not ultimatePermission(Receiver, OriginalPermission, Giver, OriginalDelay, OriginalDescription, OriginalCondition, TotalDelay, Via, isFinal),
  Via == nil, % we only want to show direct permissions
  not member(Giver, Receiver). % for backwards compatibility, we didn't show direct "act" permission for multisig members

#show address/3.
% #show addressName/2.
% #show addressType/2.
% #show addressDescription/2.
% #show canActIndependently/1.
% #show transitivePermission/8.
#show ultimatePermission/9.