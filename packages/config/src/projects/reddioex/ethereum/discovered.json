{
  "name": "reddioex",
  "chain": "ethereum",
  "timestamp": 1715171819,
  "configHash": "0x9fb134dce112b0184f8a290e77c8f71fab043bc9ec216f295b9368c89423b8de",
  "sharedModules": ["shared-sharp-verifier"],
  "entries": [
    {
      "address": "eth:0x2e1c08E457F0E0F462Ef99eC9271dc5BfAd88b2a",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "operateStarkEx",
          "from": "eth:0xB62BcD40A24985f560b5a9745d478791d8F1945C",
          "role": ".operators"
        }
      ]
    },
    {
      "name": "DACommittee",
      "address": "eth:0x4b2Bf1Cb06CB636e8A14540F76c477E61d8B6669",
      "type": "Contract",
      "template": "starkex/Committee",
      "sourceHashes": [
        "0x220ee35d4e83e9cca7e8fa42dcab4d9571ce3078b50bacbdb2fc75afa7f0290e"
      ],
      "proxyType": "immutable",
      "description": "Data Availability Committee (DAC) contract verifying and storing data availability claims from DAC Members (via a multisignature check). The threshold of valid signatures is 3.",
      "sinceTimestamp": 1663498763,
      "sinceBlock": 15559994,
      "values": {
        "$immutable": true,
        "constructorArgs": [
          [
            "eth:0x81165b6504520416487E5b4935865b4D3eeaa6e5",
            "eth:0x9eA52Cf33f7e52D24E205EF5fc5Fc425e9BeB8a0"
          ],
          "2"
        ],
        "hasRegisteredFact": true,
        "identify": "StarkWare_FinalizableCommittee_2022_1",
        "isFinalized": false,
        "signaturesRequired": 3
      },
      "fieldMeta": {
        "constructorArgs": {
          "description": "Includes DAC members and threshold."
        }
      },
      "implementationNames": {
        "eth:0x4b2Bf1Cb06CB636e8A14540F76c477E61d8B6669": "FinalizableCommittee"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "GpsFactRegistryAdapter",
      "address": "eth:0x5339AB7557b3152b91A57D10B0Caf5da88Db5143",
      "type": "Contract",
      "template": "starkex/GpsFactRegistryAdapter",
      "sourceHashes": [
        "0x3c0fff412189244728e9be021e2c7a1084326cc80e71f930221094909caafec0"
      ],
      "proxyType": "immutable",
      "description": "Adapter between the core contract and the eth:0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60. Stores the Cairo programHash (`16830627573509542901909952446321116535677491650708854009406762893086223513`).",
      "sinceTimestamp": 1657453372,
      "sinceBlock": 15114702,
      "values": {
        "$immutable": true,
        "gpsContract": "eth:0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
        "hasRegisteredFact": true,
        "identify": "StarkWare_GpsFactRegistryAdapter_2020_1",
        "programHash": "16830627573509542901909952446321116535677491650708854009406762893086223513",
        "programHashMapped": "StarkEx Spot v4.5 (Brine, Canvasconnect, Myria, ReddioEX)"
      },
      "implementationNames": {
        "eth:0x5339AB7557b3152b91A57D10B0Caf5da88Db5143": "GpsFactRegistryAdapter"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "273279642033703284306509103355536170486431195329675679055627933497997642494": "Starknet Aggregator (since v0.13.4)",
            "2231644845387633655859130162745748394456578773184260372693322394988769337368": "StarkNet OS (since v0.13.4)",
            "15787695375210609250491147414005894154890873413229882671403677761527504080": "Starknet Aggregator (since v0.13.3)",
            "2397984267054479079853548842566103781972463965746662494980785692480538410509": "StarkNet OS (since v0.13.3)",
            "853638403225561750106379562222782223909906501242604214771127703946595519856": "StarkNet OS (Paradex)",
            "3383082961563516565935611087683915026448707331436034043529592588079494402084": "StarkNet OS (old Paradex, old StarkNet)",
            "3485280386001712778192330279103973322645241679001461923469191557000342180556": "StarkEx Spot v3.0 (ImutableX, Layer2FinanceZK)",
            "770346231394331402493200980986217737662224545740427952627288191358999988146": "ApeX-USDT",
            "3174901404014912024702042974619036870715605532092680335571201877913899936957": "StarkEx Spot v4.0 (RhinoFi, Sorare)",
            "16830627573509542901909952446321116535677491650708854009406762893086223513": "StarkEx Spot v4.5 (Brine, Canvasconnect, Myria, ReddioEX)",
            "2530337539466159944237001094809327283009177793361359619481044346150483328860": "ApeX-USDC 20250130",
            "3114724292040200590153042023978438629733352741898912919152162079752811928849": "StarkEx Perp v2.0 ApeX-USDC",
            "217719352201300445998518619904782191262194843262573339166404641663770051805": "StarkNet (old)",
            "3003515909324298587247571665454372831319437787162989623104387385306791861180": "StarkNet (old)",
            "1161178844461337253856226043908368523817098764221830529880464854589141231910": "StarkNet Aggregator (old)",
            "1921772108187713503530008849184725638117898887391063185252422808224349294626": "StarkNet (old)",
            "3258367057337572248818716706664617507069572185152472699066582725377748079373": "StarkNet (old)",
            "407700941260678649793204927710478760533239334662847444187959202896452163393": "StarkNet (old)",
            "1865367024509426979036104162713508294334262484507712987283009063059134893433": "StarkNet (old)",
            "54878256403880350656938046611252303365750679698042371543935159963667935317": "StarkNet (old)",
            "2479841346739966073527450029179698923866252973805981504232089731754042431018": "StarkNet (old)",
            "109586309220455887239200613090920758778188956576212125550190099009305121410": "StarkNet (old)"
          }
        }
      ]
    },
    {
      "address": "eth:0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "operateStarkEx",
          "from": "eth:0xB62BcD40A24985f560b5a9745d478791d8F1945C",
          "role": ".operators"
        }
      ]
    },
    {
      "address": "eth:0x6b7763b749073e892c83E674c1EC4799D6f339Ef",
      "type": "EOA",
      "proxyType": "EOA",
      "controlsMajorityOfUpgradePermissions": true,
      "receivedPermissions": [
        {
          "permission": "governStarknet",
          "from": "eth:0xB62BcD40A24985f560b5a9745d478791d8F1945C",
          "role": ".$admin"
        },
        {
          "permission": "interact",
          "from": "eth:0xB62BcD40A24985f560b5a9745d478791d8F1945C",
          "description": "manage the token admin role.",
          "role": ".$admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xB62BcD40A24985f560b5a9745d478791d8F1945C",
          "role": ".$admin"
        }
      ]
    },
    {
      "address": "eth:0x6cE93f7A0F211A704Ed93C5500165b70D2F46Ef7",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0xB62BcD40A24985f560b5a9745d478791d8F1945C",
          "description": "Can regsiter new tokens for deposits and withdrawals.",
          "role": ".tokenAdmins"
        }
      ]
    },
    {
      "name": "OrderRegistry",
      "address": "eth:0x806d435a82B0381bD884540c2235147c13B97fe6",
      "type": "Contract",
      "template": "starkex/OrderRegistry",
      "sourceHashes": [
        "0x1e28fda3c245bc1fc13d0ddc7b108be510d1e0220fc67552921c87724bb45a4c"
      ],
      "proxyType": "immutable",
      "description": "Helper contract for registering limit orders from L1.",
      "sinceTimestamp": 1657453372,
      "sinceBlock": 15114702,
      "values": {
        "$immutable": true,
        "hasRegisteredFact": false,
        "identify": "StarkWare_OrderRegistry_2021_1"
      },
      "implementationNames": {
        "eth:0x806d435a82B0381bD884540c2235147c13B97fe6": "OrderRegistry"
      }
    },
    {
      "address": "eth:0x81165b6504520416487E5b4935865b4D3eeaa6e5",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x9eA52Cf33f7e52D24E205EF5fc5Fc425e9BeB8a0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "StarkExchange",
      "address": "eth:0xB62BcD40A24985f560b5a9745d478791d8F1945C",
      "type": "Contract",
      "template": "starkex/StarkExchange",
      "sourceHashes": [
        "0x2c95972415c771f5ef6d71449bae168597b6c35245fbe8769425e5c9c753e918",
        "0xfb3c0545e8c9aeebaa6547f71087a1ad7d93e3344e0dfdb1051e1a18fd44a18b"
      ],
      "proxyType": "StarkWare diamond",
      "description": "Central Validium contract. Receives (verified) state roots from the Operator, allows users to consume L2 -> L1 messages and send L1 -> L2 messages. Critical configuration values for the L2's logic are defined here by various governance roles.",
      "ignoreInWatchMode": [
        "getLastBatchId",
        "getOrderRoot",
        "getOrderTreeHeight",
        "getSequenceNumber",
        "getRollupVaultRoot",
        "getValidiumVaultRoot"
      ],
      "sinceTimestamp": 1663498763,
      "sinceBlock": 15559994,
      "values": {
        "$admin": "eth:0x6b7763b749073e892c83E674c1EC4799D6f339Ef",
        "$immutable": false,
        "$implementation": [
          "eth:0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
          "eth:0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
          "eth:0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
          "eth:0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
          "eth:0x613ee54C54D5548627064B4D648942bF3648f376",
          "eth:0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
          "eth:0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
        ],
        "$pastUpgrades": [
          [
            "2022-09-18T10:59:23.000Z",
            "0x22e1b7422ea0e56a847c04010c02b75744d47b29cdc7138c9b7ac6f8ab30be4e",
            [
              "eth:0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
              "eth:0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12",
              "eth:0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb",
              "eth:0x67e198743BC19fa4757720eDd0e769f8291e1F1D",
              "eth:0x613ee54C54D5548627064B4D648942bF3648f376",
              "eth:0xb2ED005D0278179001a49a9969BB22BA8e98f31F",
              "eth:0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db"
            ]
          ]
        ],
        "$upgradeCount": 1,
        "defaultVaultWithdrawalLock": 0,
        "DEPOSIT_CANCEL_DELAY": 172800,
        "FREEZE_GRACE_PERIOD": 604800,
        "getGlobalConfigCode": 1,
        "getLastBatchId": 730,
        "getOrderRoot": "1277732853049551386450398489242574727728521015174762659998866257443331519109",
        "getOrderTreeHeight": 251,
        "getRegisteredAvailabilityVerifiers": [
          "eth:0x4b2Bf1Cb06CB636e8A14540F76c477E61d8B6669"
        ],
        "getRegisteredVerifiers": [
          "eth:0x5339AB7557b3152b91A57D10B0Caf5da88Db5143"
        ],
        "getRollupTreeHeight": 31,
        "getRollupVaultRoot": "207095555137602068174310225607660532858489993604082708018689543482077973596",
        "getSequenceNumber": 713,
        "getUpgradeActivationDelay": 0,
        "getValidiumTreeHeight": 31,
        "getValidiumVaultRoot": "3130042858276450064947696928210421341632637001368837514807693753822230892903",
        "implementation": "eth:0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583",
        "isFrozen": false,
        "isNotFinalized": true,
        "isStrictVaultBalancePolicy": false,
        "MAIN_GOVERNANCE_INFO_TAG": "StarkEx.Main.2019.GovernorsInformation",
        "MAX_FORCED_ACTIONS_REQS_PER_BLOCK": 10,
        "MAX_VERIFIER_COUNT": 64,
        "operators": [
          "eth:0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
          "eth:0x2e1c08E457F0E0F462Ef99eC9271dc5BfAd88b2a"
        ],
        "OPERATORS": [
          "eth:0x5751a83170BeA11fE7CdA5D599B04153C021f21A",
          "eth:0x2e1c08E457F0E0F462Ef99eC9271dc5BfAd88b2a"
        ],
        "orderRegistryAddress": "eth:0x806d435a82B0381bD884540c2235147c13B97fe6",
        "PROXY_GOVERNANCE_TAG": "StarkEx.Proxy.2019.GovernorsInformation",
        "PROXY_VERSION": "3.0.1",
        "STARKEX_MAX_DEFAULT_VAULT_LOCK": 604800,
        "StarkWareDiamond_upgradeDelay": 0,
        "tokenAdmins": [
          "eth:0x6cE93f7A0F211A704Ed93C5500165b70D2F46Ef7",
          "eth:0xd19c12443977a58694Eb89E867Cd84C18c3B89F7"
        ],
        "UNFREEZE_DELAY": 31536000,
        "VERIFIER_REMOVAL_DELAY": 2419200,
        "VERSION": "4.5.1"
      },
      "fieldMeta": {
        "$admin": {
          "severity": "HIGH",
          "description": "Permissioned to upgrade the proxy implementations and access all `onlyGovernance` restricted functions in the various implementation contracts."
        },
        "isFinalized": {
          "severity": "HIGH",
          "description": "Finalizes most of the configuration of the contract, which cannot be changed afterwards (only thorugh an upgrade)."
        },
        "DEPOSIT_CANCEL_DELAY": {
          "description": "The time delay required before canceled deposits to the L2 can be reclaimed."
        }
      },
      "implementationNames": {
        "eth:0xB62BcD40A24985f560b5a9745d478791d8F1945C": "Proxy",
        "eth:0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583": "StarkExchange",
        "eth:0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12": "AllVerifiers",
        "eth:0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb": "TokensAndRamping",
        "eth:0x67e198743BC19fa4757720eDd0e769f8291e1F1D": "StarkExState",
        "eth:0x613ee54C54D5548627064B4D648942bF3648f376": "ForcedActions",
        "eth:0xb2ED005D0278179001a49a9969BB22BA8e98f31F": "OnchainVaults",
        "eth:0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db": "ProxyUtils"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    }
  ],
  "abis": {
    "eth:0x2Dbc18A3ac126abE1fF90A83Bbc3947ff7912Afb": [
      "event LogAssetWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositCancel(uint256 starkKey, uint256 vaultId, uint256 assetId)",
      "event LogDepositCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositNftCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogDepositWithTokenId(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositWithTokenIdCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogMintWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, uint256 assetId)",
      "event LogMintableWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogNftWithdrawalAllowed(uint256 ownerKey, uint256 assetId)",
      "event LogNftWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 tokenId, uint256 assetId, address recipient)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogTokenAdminAdded(address tokenAdmin)",
      "event LogTokenAdminRemoved(address tokenAdmin)",
      "event LogTokenRegistered(uint256 assetType, bytes assetInfo, uint256 quantum)",
      "event LogUnFrozen()",
      "event LogWithdrawalAllowed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, address recipient)",
      "event LogWithdrawalWithTokenIdPerformed(uint256 ownerKey, uint256 assetType, uint256 tokenId, uint256 assetId, uint256 nonQuantizedAmount, uint256 quantizedAmount, address recipient)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function calculateAssetIdWithTokenId(uint256 assetType, uint256 tokenId) view returns (uint256)",
      "function calculateMintableAssetId(uint256 assetType, bytes mintingBlob) pure returns (uint256 assetId)",
      "function defaultVaultWithdrawalLock() view returns (uint256)",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositCancel(uint256 starkKey, uint256 assetId, uint256 vaultId)",
      "function depositERC1155(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 vaultId, uint256 quantizedAmount)",
      "function depositERC20(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositEth(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function depositNft(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositNftReclaim(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositReclaim(uint256 starkKey, uint256 assetType, uint256 vaultId)",
      "function depositWithTokenId(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 vaultId, uint256 quantizedAmount)",
      "function depositWithTokenIdReclaim(uint256 starkKey, uint256 assetType, uint256 tokenId, uint256 vaultId)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getAssetInfo(uint256 assetType) view returns (bytes assetInfo)",
      "function getCancellationRequest(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 request)",
      "function getDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getEthKey(uint256 ownerKey) view returns (address)",
      "function getFullWithdrawalRequest(uint256 ownerKey, uint256 vaultId) view returns (uint256)",
      "function getQuantizedDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getWithdrawalBalance(uint256 ownerKey, uint256 assetId) view returns (uint256)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAssetRegistered(uint256 assetType) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isTokenAdmin(address testedAdmin) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function onERC1155BatchReceived(address operator, address, uint256[], uint256[], bytes) returns (bytes4)",
      "function onERC1155Received(address operator, address, uint256, uint256, bytes) returns (bytes4)",
      "function onERC721Received(address operator, address, uint256, bytes) returns (bytes4)",
      "function orderRegistryAddress() view returns (address)",
      "function registerToken(uint256 assetType, bytes assetInfo)",
      "function registerToken(uint256 assetType, bytes assetInfo, uint256 quantum)",
      "function registerTokenAdmin(address newAdmin)",
      "function unFreeze()",
      "function unregisterTokenAdmin(address oldAdmin)",
      "function validatedSelectors() pure returns (bytes4[] selectors)",
      "function withdraw(uint256 ownerKey, uint256 assetType)",
      "function withdrawAndMint(uint256 ownerKey, uint256 assetType, bytes mintingBlob)",
      "function withdrawNft(uint256 ownerKey, uint256 assetType, uint256 tokenId)",
      "function withdrawWithTokenId(uint256 ownerKey, uint256 assetType, uint256 tokenId)"
    ],
    "eth:0x4b2Bf1Cb06CB636e8A14540F76c477E61d8B6669": [
      "constructor(address[] committeeMembers, uint256 numSignaturesRequired)",
      "event NewMemberAdded(address newMember)",
      "event RequiredSignersIncrement(uint256 newRequiredSigners)",
      "function acceptOwnership()",
      "function addCommitteeMemeber(address newMember)",
      "function finalize()",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function incrementRequiredSigners()",
      "function isAdmin(address testedAddress) view returns (bool)",
      "function isFinalized() view returns (bool)",
      "function isMember(address) view returns (bool)",
      "function isOwner(address testedAddress) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function nominateNewOwner(address newOwner)",
      "function registerAdmin(address newAdmin)",
      "function removeAdmin(address removedAdmin)",
      "function signaturesRequired() view returns (uint256)",
      "function verifyAvailabilityProof(bytes32 claimHash, bytes availabilityProofs)"
    ],
    "eth:0x5339AB7557b3152b91A57D10B0Caf5da88Db5143": [
      "constructor(address gpsStatementContract, uint256 programHash_)",
      "function gpsContract() view returns (address)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function programHash() view returns (uint256)"
    ],
    "eth:0x613ee54C54D5548627064B4D648942bF3648f376": [
      "event LogFrozen()",
      "event LogFullWithdrawalRequest(uint256 ownerKey, uint256 vaultId)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "event LogUserRegistered(address ethKey, uint256 starkKey, address sender)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function defaultVaultWithdrawalLock() view returns (uint256)",
      "function freezeRequest(uint256 ownerKey, uint256 vaultId)",
      "function fullWithdrawalRequest(uint256 ownerKey, uint256 vaultId)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getEthKey(uint256 ownerKey) view returns (address)",
      "function getFullWithdrawalRequest(uint256 ownerKey, uint256 vaultId) view returns (uint256)",
      "function getGlobalConfigCode() view returns (uint256)",
      "function getLastBatchId() view returns (uint256)",
      "function getOrderRoot() view returns (uint256)",
      "function getOrderTreeHeight() view returns (uint256)",
      "function getRollupTreeHeight() view returns (uint256)",
      "function getRollupVaultRoot() view returns (uint256)",
      "function getSequenceNumber() view returns (uint256)",
      "function getValidiumTreeHeight() view returns (uint256)",
      "function getValidiumVaultRoot() view returns (uint256)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function orderRegistryAddress() view returns (address)",
      "function registerEthAddress(address ethKey, uint256 starkKey, bytes starkSignature)",
      "function registerSender(uint256 starkKey, bytes starkSignature)",
      "function unFreeze()",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ],
    "eth:0x67e198743BC19fa4757720eDd0e769f8291e1F1D": [
      "event LogAssetWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogFrozen()",
      "event LogMintableWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftWithdrawalAllowed(uint256 ownerKey, uint256 assetId)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogOperatorAdded(address operator)",
      "event LogOperatorRemoved(address operator)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogRootUpdate(uint256 sequenceNumber, uint256 batchId, uint256 validiumVaultRoot, uint256 rollupVaultRoot, uint256 orderRoot)",
      "event LogStateTransitionFact(bytes32 stateTransitionFact)",
      "event LogUnFrozen()",
      "event LogVaultBalanceChangeApplied(address ethKey, uint256 assetId, uint256 vaultId, int256 quantizedAmountChange)",
      "event LogWithdrawalAllowed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function STARKEX_MAX_DEFAULT_VAULT_LOCK() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function defaultVaultWithdrawalLock() view returns (uint256)",
      "function escape(uint256 ownerKey, uint256 vaultId, uint256 assetId, uint256 quantizedAmount)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getFullWithdrawalRequest(uint256 ownerKey, uint256 vaultId) view returns (uint256)",
      "function getGlobalConfigCode() view returns (uint256)",
      "function getLastBatchId() view returns (uint256)",
      "function getOrderRoot() view returns (uint256)",
      "function getOrderTreeHeight() view returns (uint256)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getRollupTreeHeight() view returns (uint256)",
      "function getRollupVaultRoot() view returns (uint256)",
      "function getSequenceNumber() view returns (uint256)",
      "function getValidiumTreeHeight() view returns (uint256)",
      "function getValidiumVaultRoot() view returns (uint256)",
      "function identify() pure returns (string)",
      "function initialize(bytes data)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function isOperator(address testedOperator) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function orderRegistryAddress() view returns (address)",
      "function registerOperator(address newOperator)",
      "function unFreeze()",
      "function unregisterOperator(address removedOperator)",
      "function updateState(uint256[] publicInput, uint256[] applicationData)",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ],
    "eth:0x806d435a82B0381bD884540c2235147c13B97fe6": [
      "event LogL1LimitOrderRegistered(address userAddress, address exchangeAddress, uint256 tokenIdSell, uint256 tokenIdBuy, uint256 tokenIdFee, uint256 amountSell, uint256 amountBuy, uint256 amountFee, uint256 vaultIdSell, uint256 vaultIdBuy, uint256 vaultIdFee, uint256 nonce, uint256 expirationTimestamp)",
      "event LogMsgRegistered(address from, address to, bytes32 msgHash)",
      "function calcL1LimitOrderHash(uint256 tokenIdSell, uint256 tokenIdBuy, uint256 tokenIdFee, uint256 amountSell, uint256 amountBuy, uint256 amountFee, uint256 vaultIdSell, uint256 vaultIdBuy, uint256 vaultIdFee, uint256 nonce, uint256 expirationTimestamp) pure returns (bytes32)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isMessageRegistered(address from, address to, bytes32 messageHash) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function registerLimitOrder(address exchangeAddress, uint256 tokenIdSell, uint256 tokenIdBuy, uint256 tokenIdFee, uint256 amountSell, uint256 amountBuy, uint256 amountFee, uint256 vaultIdSell, uint256 vaultIdBuy, uint256 vaultIdFee, uint256 nonce, uint256 expirationTimestamp)",
      "function registerMessage(address to, bytes32 messageHash)"
    ],
    "eth:0xb2ED005D0278179001a49a9969BB22BA8e98f31F": [
      "event LogDefaultVaultWithdrawalLockSet(uint256 newDefaultLockTime)",
      "event LogDepositToVault(address ethKey, uint256 assetType, uint256 assetId, uint256 vaultId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogVaultWithdrawalLockSet(address ethKey, uint256 assetId, uint256 vaultId, uint256 timeRelease)",
      "event LogWithdrawalFromVault(address ethKey, uint256 assetType, uint256 assetId, uint256 vaultId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function STARKEX_MAX_DEFAULT_VAULT_LOCK() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function calculateAssetIdWithTokenId(uint256 assetType, uint256 tokenId) view returns (uint256)",
      "function calculateMintableAssetId(uint256 assetType, bytes mintingBlob) pure returns (uint256 assetId)",
      "function defaultVaultWithdrawalLock() view returns (uint256)",
      "function depositERC1155ToVault(uint256 assetType, uint256 tokenId, uint256 vaultId, uint256 quantizedAmount)",
      "function depositERC20ToVault(uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositEthToVault(uint256 assetType, uint256 vaultId) payable",
      "function getAssetInfo(uint256 assetType) view returns (bytes assetInfo)",
      "function getQuantizedErc1155VaultBalance(address ethKey, uint256 assetType, uint256 tokenId, uint256 vaultId) view returns (uint256)",
      "function getQuantizedVaultBalance(address ethKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getVaultBalance(address ethKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getVaultWithdrawalLock(address ethKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isStrictVaultBalancePolicy() view returns (bool)",
      "function isVaultLocked(address ethKey, uint256 assetId, uint256 vaultId) view returns (bool)",
      "function lockVault(uint256 assetId, uint256 vaultId, uint256 lockTime)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function orderRegistryAddress() view returns (address)",
      "function setDefaultVaultWithdrawalLock(uint256 newDefaultTime)",
      "function validatedSelectors() pure returns (bytes4[] selectors)",
      "function withdrawErc1155FromVault(uint256 assetType, uint256 tokenId, uint256 vaultId, uint256 quantizedAmount)",
      "function withdrawFromVault(uint256 assetType, uint256 vaultId, uint256 quantizedAmount)"
    ],
    "eth:0xB5353268d8d4D711a92cb838F8fEDFC2A66E50Db": [
      "event ImplementationActivationRescheduled(address indexed implementation, uint256 updatedActivationTime)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "function PROXY_GOVERNANCE_TAG() view returns (string)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function proxyAcceptGovernance()",
      "function proxyCancelNomination()",
      "function proxyIsGovernor(address testGovernor) view returns (bool)",
      "function proxyNominateNewGovernor(address newGovernor)",
      "function proxyRemoveGovernor(address governorForRemoval)",
      "function updateImplementationActivationTime(address implementation, bytes data, bool finalize)",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ],
    "eth:0xB62BcD40A24985f560b5a9745d478791d8F1945C": [
      "constructor(uint256 upgradeActivationDelay)",
      "event FinalizedImplementation(address indexed implementation)",
      "event ImplementationAdded(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationRemoved(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationUpgraded(address indexed implementation, bytes initializer)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "function PROXY_GOVERNANCE_TAG() view returns (string)",
      "function PROXY_VERSION() view returns (string)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function addImplementation(address newImplementation, bytes data, bool finalize)",
      "function getUpgradeActivationDelay() view returns (uint256 delay)",
      "function implementation() view returns (address _implementation)",
      "function initialize(bytes) pure",
      "function isNotFinalized() view returns (bool notFinal)",
      "function proxyAcceptGovernance()",
      "function proxyCancelNomination()",
      "function proxyIsGovernor(address testGovernor) view returns (bool)",
      "function proxyNominateNewGovernor(address newGovernor)",
      "function proxyRemoveGovernor(address governorForRemoval)",
      "function removeImplementation(address removedImplementation, bytes data, bool finalize)",
      "function upgradeTo(address newImplementation, bytes data, bool finalize) payable"
    ],
    "eth:0xdF2f24751F7e84ccDCD39e7b49904FAB0Fb0f583": [
      "function VERSION() view returns (string)",
      "function getSubContract(bytes4 selector) view returns (address)",
      "function handlingContractId(bytes4 selector) pure returns (string id)",
      "function initialize(bytes data)"
    ],
    "eth:0xfbea22FeB369DB10C0d3a2aAa8F4939E76815f12": [
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRegistered(address entry, string entryId)",
      "event LogRemovalIntent(address entry, string entryId)",
      "event LogRemoved(address entry, string entryId)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function announceAvailabilityVerifierRemovalIntent(address verifier)",
      "function announceVerifierRemovalIntent(address verifier)",
      "function getRegisteredAvailabilityVerifiers() view returns (address[] _verifers)",
      "function getRegisteredVerifiers() view returns (address[] _verifers)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAvailabilityVerifier(address verifierAddress) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isVerifier(address verifierAddress) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAvailabilityVerifier(address verifier, string identifier)",
      "function registerVerifier(address verifier, string identifier)",
      "function removeAvailabilityVerifier(address verifier)",
      "function removeVerifier(address verifier)",
      "function unFreeze()",
      "function validatedSelectors() pure returns (bytes4[] selectors)"
    ]
  },
  "usedTemplates": {
    "starkex/Committee": "0xea8d2e95c84337933f471b8c21505791bd94685784b7e5c407f5e7045403a683",
    "starkex/GpsFactRegistryAdapter": "0x1ad87511dd3212f3837ce0d97076154480b4909b6970ad7fb66342c32f61b0bb",
    "starkex/OrderRegistry": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "starkex/StarkExchange": "0x27c9aa7e5669180c5228a095027bfb8426029450cd708a9277ac4bee945f699c"
  },
  "usedBlockNumbers": { "ethereum": 19825385 },
  "permissionsConfigHash": "0x25575e7b6fa97fd2639b893f46f9bda66fc69c0b5ddb9834a65408a1cb0dd5cb"
}
