{
  "name": "immutablex",
  "chain": "ethereum",
  "timestamp": 1741355279,
  "configHash": "0x3e0797b8dd78f616412e3c579350ac657edc546b267e681824e2d0cc6c4b7965",
  "sharedModules": ["shared-sharp-verifier"],
  "entries": [
    {
      "name": "DACommittee",
      "address": "eth:0x16BA0f221664A5189cf2C1a7AF0d3AbFc70aA295",
      "type": "Contract",
      "template": "starkex/Committee",
      "sourceHashes": [
        "0x83a4f7af4e5a371aadb57903aed1b1f96556a0b3eb4665044a65ad8f70a89edc"
      ],
      "proxyType": "immutable",
      "description": "Data Availability Committee (DAC) contract verifying and storing data availability claims from DAC Members (via a multisignature check). The threshold of valid signatures is 5.",
      "sinceTimestamp": 1616668125,
      "sinceBlock": 12107592,
      "values": {
        "$immutable": true,
        "constructorArgs": [
          [
            "eth:0x1FfBDb8061B586A6D29fb608d025e5D8744f58d1",
            "eth:0x24EeFFC269bB8E540F5B2C8f45750489abf8D54b",
            "eth:0x48AF849535DDFa560A0EB0FbDEf436688169B949",
            "eth:0x51AbdE72a4542500a7b1Cb32B18b13fbe1F9ff2E",
            "eth:0xAfC4589aF46C72CBF550F2eEAE38c97AeDE15d17",
            "eth:0xB71FC111D7BA82D5955BaDdD7717f3467184FF61",
            "eth:0xfF506616E8C53EE5e513b906AC00B5D76664C537"
          ],
          "5"
        ],
        "hasRegisteredFact": true,
        "identify": "StarkWare_Committee_2019_1",
        "signaturesRequired": 5
      },
      "fieldMeta": {
        "constructorArgs": {
          "description": "Includes DAC members and threshold."
        }
      },
      "implementationNames": {
        "eth:0x16BA0f221664A5189cf2C1a7AF0d3AbFc70aA295": "Committee"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "address": "eth:0x1FfBDb8061B586A6D29fb608d025e5D8744f58d1",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x24EeFFC269bB8E540F5B2C8f45750489abf8D54b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x296A19A4e87F5824DBE8DEd53415A4704538bB30",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x37AC4a9Bf184aa1130016525631f3Daec11f7b26",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x3d395f623D8954d71132F5caC10778CA275806e0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x48AF849535DDFa560A0EB0FbDEf436688169B949",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OrderRegistry",
      "address": "eth:0x518c4A79a1102eEDc987005CA8cE6B87Ca14dDf8",
      "type": "Contract",
      "template": "starkex/OrderRegistry",
      "sourceHashes": [
        "0x1e28fda3c245bc1fc13d0ddc7b108be510d1e0220fc67552921c87724bb45a4c"
      ],
      "proxyType": "immutable",
      "description": "Helper contract for registering limit orders from L1.",
      "sinceTimestamp": 1626352379,
      "sinceBlock": 12831566,
      "values": {
        "$immutable": true,
        "hasRegisteredFact": true,
        "identify": "StarkWare_OrderRegistry_2021_1"
      },
      "implementationNames": {
        "eth:0x518c4A79a1102eEDc987005CA8cE6B87Ca14dDf8": "OrderRegistry"
      }
    },
    {
      "address": "eth:0x51AbdE72a4542500a7b1Cb32B18b13fbe1F9ff2E",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "StarkExchange",
      "address": "eth:0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
      "type": "Contract",
      "template": "starkex/StarkExchange",
      "sourceHashes": [
        "0xc527211f14e6fa12809b6b7ec28c6757daa907478cefeb1b8835ee7d47139bf7",
        "0xfaa0bf87cf9230ba5a3f5530b447f76606e0cd9fb9d1acd2f3b87d30884e63d1"
      ],
      "proxyType": "StarkWare diamond",
      "description": "Central Validium contract. Receives (verified) state roots from the Operator, allows users to consume L2 -> L1 messages and send L1 -> L2 messages. Critical configuration values for the L2's logic are defined here by various governance roles.",
      "ignoreInWatchMode": [
        "getLastBatchId",
        "getOrderRoot",
        "getOrderTreeHeight",
        "getSequenceNumber",
        "getVaultRoot",
        "getValidiumVaultRoot"
      ],
      "sinceTimestamp": 1615389188,
      "sinceBlock": 12011518,
      "values": {
        "$admin": "eth:0xD2C37fC6fD89563187f3679304975655e448D192",
        "$immutable": false,
        "$implementation": [
          "eth:0x4EDD62189732e9fF476ABa880b48c29432A7AC9B",
          "eth:0x62BCA4DB742A99c834e2c24b609656A70EA25379",
          "eth:0x8536850750956c2FEebeCAB786d82271a5467687",
          "eth:0x1c3A4EfF75a287Fe6249CAb49606FA25659929A2",
          "eth:0x3799ad2a4Eb4E882219B02C036656d4ECbD437A1",
          "eth:0x1688abB0B5c72F34B7f78e857Aa317deD5B5D339",
          "eth:0xB3788a88F063B217227E27ae16Ba550db3132bE6"
        ],
        "$pastUpgrades": [
          [
            "2021-03-10T15:13:08.000Z",
            "0x9b57c19aa91cc17c9487085b68532cd65d1e4c263b5928f14c03a9d36c9097df",
            [
              "eth:0x49401Ddc4E0A858B5B4cf3D6De38393B7fAC7378",
              "eth:0x61d3389Aa2d001c860859cC021153e40D557BF4b",
              "eth:0xA4E9524EfbA0CB6BD7474a48C14582dEb300469E",
              "eth:0xedB67D40161D9fa660DCFFE60f859B7381E4793a"
            ]
          ],
          [
            "2021-03-16T18:04:39.000Z",
            "0xf42d8fc579401fc76769bf63ba72f7277aac976aeb2a4cd3eca899ca08de7c20",
            [
              "eth:0x49401Ddc4E0A858B5B4cf3D6De38393B7fAC7378",
              "eth:0x61d3389Aa2d001c860859cC021153e40D557BF4b",
              "eth:0xA4E9524EfbA0CB6BD7474a48C14582dEb300469E",
              "eth:0xedB67D40161D9fa660DCFFE60f859B7381E4793a"
            ]
          ],
          [
            "2021-03-25T11:24:15.000Z",
            "0x79f72bef0984e3ae76ab638c078f92f1a0d4ad2a289b8a91e072d81f77d505ce",
            [
              "eth:0x49401Ddc4E0A858B5B4cf3D6De38393B7fAC7378",
              "eth:0x61d3389Aa2d001c860859cC021153e40D557BF4b",
              "eth:0xA4E9524EfbA0CB6BD7474a48C14582dEb300469E",
              "eth:0xedB67D40161D9fa660DCFFE60f859B7381E4793a"
            ]
          ],
          [
            "2021-03-26T08:01:31.000Z",
            "0x9e8cc538b40a70723a287ece3ecb4e6aafbbde0e04f621124df6e4c2d7995dc7",
            [
              "eth:0x49401Ddc4E0A858B5B4cf3D6De38393B7fAC7378",
              "eth:0x61d3389Aa2d001c860859cC021153e40D557BF4b",
              "eth:0xA4E9524EfbA0CB6BD7474a48C14582dEb300469E",
              "eth:0xedB67D40161D9fa660DCFFE60f859B7381E4793a"
            ]
          ],
          [
            "2021-08-31T08:15:29.000Z",
            "0x26fb60bb6b5ff3ef22cd959d007588f7410586499870411cfddc2759b97d44d6",
            [
              "eth:0xB8563AD5aF1F79dd04937BE8B572318c8e6f43AC",
              "eth:0xF65C115efd24102315Af53f84aD65aD240bc9D57",
              "eth:0x97AA9658cfE27D6382b71FF9E72d773615Bd529E",
              "eth:0x86d8f977C9cEC503ad4E6805802cEf62Cde13773",
              "eth:0x0D7c8d7A16c7832869d8FeEf02730238CdFe083A",
              "eth:0x2D542881E93491e765E5110c1e373FC2968E720A",
              "eth:0x970d1Fa79c64b256ef68bBFEab34137786811C7F"
            ]
          ],
          [
            "2021-09-09T16:30:02.000Z",
            "0xeaa0efb3937eee43c1083cc776d5033b131e6ef12ba0d0646db1b34e600847cd",
            [
              "eth:0xB8563AD5aF1F79dd04937BE8B572318c8e6f43AC",
              "eth:0xF65C115efd24102315Af53f84aD65aD240bc9D57",
              "eth:0x97AA9658cfE27D6382b71FF9E72d773615Bd529E",
              "eth:0x86d8f977C9cEC503ad4E6805802cEf62Cde13773",
              "eth:0x0D7c8d7A16c7832869d8FeEf02730238CdFe083A",
              "eth:0x2D542881E93491e765E5110c1e373FC2968E720A",
              "eth:0x970d1Fa79c64b256ef68bBFEab34137786811C7F"
            ]
          ],
          [
            "2022-01-13T08:08:51.000Z",
            "0x658a93571ca9733ba346bd746790a6d07821d86c89fd90809e85bf7f2f8d9797",
            [
              "eth:0xB8563AD5aF1F79dd04937BE8B572318c8e6f43AC",
              "eth:0xF65C115efd24102315Af53f84aD65aD240bc9D57",
              "eth:0x97AA9658cfE27D6382b71FF9E72d773615Bd529E",
              "eth:0x86d8f977C9cEC503ad4E6805802cEf62Cde13773",
              "eth:0x0D7c8d7A16c7832869d8FeEf02730238CdFe083A",
              "eth:0x2D542881E93491e765E5110c1e373FC2968E720A",
              "eth:0x970d1Fa79c64b256ef68bBFEab34137786811C7F"
            ]
          ],
          [
            "2024-05-20T06:39:35.000Z",
            "0x3425fd24435e4aefdb08f3970e61e446eb5d21a1e0c916d1ba9331b060b72192",
            [
              "eth:0x4EDD62189732e9fF476ABa880b48c29432A7AC9B",
              "eth:0x62BCA4DB742A99c834e2c24b609656A70EA25379",
              "eth:0x8536850750956c2FEebeCAB786d82271a5467687",
              "eth:0x1c3A4EfF75a287Fe6249CAb49606FA25659929A2",
              "eth:0x3799ad2a4Eb4E882219B02C036656d4ECbD437A1",
              "eth:0x1688abB0B5c72F34B7f78e857Aa317deD5B5D339",
              "eth:0xB3788a88F063B217227E27ae16Ba550db3132bE6"
            ]
          ]
        ],
        "$upgradeCount": 8,
        "defaultVaultWithdrawalLock": 0,
        "DEPOSIT_CANCEL_DELAY": 172800,
        "FREEZE_GRACE_PERIOD": 604800,
        "getLastBatchId": 34610,
        "getOrderRoot": "1979386112938031259179906123766987240678777172422412845625170562656431493992",
        "getOrderTreeHeight": 63,
        "getRegisteredAvailabilityVerifiers": [
          "eth:0x16BA0f221664A5189cf2C1a7AF0d3AbFc70aA295"
        ],
        "getRegisteredVerifiers": [
          "eth:0x6e3AbCE72A3CD5edc05E59283c733Fd4bF8B3baE"
        ],
        "getSequenceNumber": 34422,
        "getUpgradeActivationDelay": 1209600,
        "getVaultRoot": "2089382124374340589248516775244900390932500014258313507936211877127913216580",
        "getVaultTreeHeight": 31,
        "implementation": "eth:0x4EDD62189732e9fF476ABa880b48c29432A7AC9B",
        "isFrozen": false,
        "isNotFinalized": true,
        "isStrictVaultBalancePolicy": false,
        "MAIN_GOVERNANCE_INFO_TAG": "StarkEx.Main.2019.GovernorsInformation",
        "MAX_FORCED_ACTIONS_REQS_PER_BLOCK": 10,
        "MAX_VERIFIER_COUNT": 64,
        "operators": ["eth:0x9B7f7d0d23d4CAce5A3157752D0D4e4bf25E927e"],
        "orderRegistryAddress": "eth:0x518c4A79a1102eEDc987005CA8cE6B87Ca14dDf8",
        "PROXY_GOVERNANCE_TAG": "StarkEx.Proxy.2019.GovernorsInformation",
        "STARKEX_MAX_DEFAULT_VAULT_LOCK": 604800,
        "StarkWareDiamond_upgradeDelay": 1209600,
        "tokenAdmins": [
          "eth:0xdc1bFbC2B8f01439eEea8e4659bbb452D0f9eE2A",
          "eth:0xeDb0219557ba13816f1dEb7fA54688362B05A5aE"
        ],
        "UNFREEZE_DELAY": 31536000,
        "UPGRADE_DELAY_SLOT": "0xc21dbb3089fcb2c4f4c6a67854ab4db2b0f233ea4b21b21f912d52d18fc5db1f",
        "VERIFIER_REMOVAL_DELAY": 2419200,
        "VERSION": "4.0.1"
      },
      "fieldMeta": {
        "$admin": {
          "severity": "HIGH",
          "description": "Permissioned to upgrade the proxy implementations and access all `onlyGovernance` restricted functions in the various implementation contracts."
        },
        "isFinalized": {
          "severity": "HIGH",
          "description": "Finalizes most of the configuration of the contract, which cannot be changed afterwards (only thorugh an upgrade)."
        },
        "DEPOSIT_CANCEL_DELAY": {
          "description": "The time delay required before canceled deposits to the L2 can be reclaimed."
        }
      },
      "implementationNames": {
        "eth:0x5FDCCA53617f4d2b9134B29090C87D01058e27e9": "Proxy",
        "eth:0x4EDD62189732e9fF476ABa880b48c29432A7AC9B": "StarkExchange",
        "eth:0x62BCA4DB742A99c834e2c24b609656A70EA25379": "AllVerifiers",
        "eth:0x8536850750956c2FEebeCAB786d82271a5467687": "TokensAndRamping",
        "eth:0x1c3A4EfF75a287Fe6249CAb49606FA25659929A2": "StarkExState",
        "eth:0x3799ad2a4Eb4E882219B02C036656d4ECbD437A1": "ForcedActions",
        "eth:0x1688abB0B5c72F34B7f78e857Aa317deD5B5D339": "OnchainVaults",
        "eth:0xB3788a88F063B217227E27ae16Ba550db3132bE6": "ProxyUtils"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "GpsFactRegistryAdapter",
      "address": "eth:0x6e3AbCE72A3CD5edc05E59283c733Fd4bF8B3baE",
      "type": "Contract",
      "template": "starkex/GpsFactRegistryAdapter",
      "sourceHashes": [
        "0x3c0fff412189244728e9be021e2c7a1084326cc80e71f930221094909caafec0"
      ],
      "proxyType": "immutable",
      "description": "Adapter between the core contract and the eth:0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60. Stores the Cairo programHash (`3485280386001712778192330279103973322645241679001461923469191557000342180556`).",
      "sinceTimestamp": 1640107463,
      "sinceBlock": 13849860,
      "values": {
        "$immutable": true,
        "gpsContract": "eth:0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60",
        "hasRegisteredFact": true,
        "identify": "StarkWare_GpsFactRegistryAdapter_2020_1",
        "programHash": "3485280386001712778192330279103973322645241679001461923469191557000342180556",
        "programHashMapped": "StarkEx Spot v3.0 (ImutableX, Layer2FinanceZK)"
      },
      "implementationNames": {
        "eth:0x6e3AbCE72A3CD5edc05E59283c733Fd4bF8B3baE": "GpsFactRegistryAdapter"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "273279642033703284306509103355536170486431195329675679055627933497997642494": "Starknet Aggregator (since v0.13.4)",
            "2231644845387633655859130162745748394456578773184260372693322394988769337368": "StarkNet OS (since v0.13.4)",
            "15787695375210609250491147414005894154890873413229882671403677761527504080": "Starknet Aggregator (since v0.13.3)",
            "2397984267054479079853548842566103781972463965746662494980785692480538410509": "StarkNet OS (since v0.13.3)",
            "853638403225561750106379562222782223909906501242604214771127703946595519856": "StarkNet OS (Paradex)",
            "3383082961563516565935611087683915026448707331436034043529592588079494402084": "StarkNet OS (old Paradex, old StarkNet)",
            "3485280386001712778192330279103973322645241679001461923469191557000342180556": "StarkEx Spot v3.0 (ImutableX, Layer2FinanceZK)",
            "770346231394331402493200980986217737662224545740427952627288191358999988146": "ApeX-USDT",
            "3174901404014912024702042974619036870715605532092680335571201877913899936957": "StarkEx Spot v4.0 (RhinoFi, Sorare)",
            "16830627573509542901909952446321116535677491650708854009406762893086223513": "StarkEx Spot v4.5 (Brine, Canvasconnect, Myria, ReddioEX)",
            "2530337539466159944237001094809327283009177793361359619481044346150483328860": "ApeX-USDC 20250130",
            "3114724292040200590153042023978438629733352741898912919152162079752811928849": "StarkEx Perp v2.0 ApeX-USDC",
            "217719352201300445998518619904782191262194843262573339166404641663770051805": "StarkNet (old)",
            "3003515909324298587247571665454372831319437787162989623104387385306791861180": "StarkNet (old)",
            "1161178844461337253856226043908368523817098764221830529880464854589141231910": "StarkNet Aggregator (old)",
            "1921772108187713503530008849184725638117898887391063185252422808224349294626": "StarkNet (old)",
            "3258367057337572248818716706664617507069572185152472699066582725377748079373": "StarkNet (old)",
            "407700941260678649793204927710478760533239334662847444187959202896452163393": "StarkNet (old)",
            "1865367024509426979036104162713508294334262484507712987283009063059134893433": "StarkNet (old)",
            "54878256403880350656938046611252303365750679698042371543935159963667935317": "StarkNet (old)",
            "2479841346739966073527450029179698923866252973805981504232089731754042431018": "StarkNet (old)",
            "109586309220455887239200613090920758778188956576212125550190099009305121410": "StarkNet (old)"
          }
        }
      ]
    },
    {
      "address": "eth:0x9B7f7d0d23d4CAce5A3157752D0D4e4bf25E927e",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "operateStarkEx",
          "from": "eth:0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
          "role": ".operators"
        }
      ]
    },
    {
      "address": "eth:0xA28A84676E3Cec39e6F1D06CD0EEF6cAAa2F7f7b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xAfC4589aF46C72CBF550F2eEAE38c97AeDE15d17",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xb3538EDB1cD74AE43e0aD25eac6F03553657E3fB",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xB71FC111D7BA82D5955BaDdD7717f3467184FF61",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "IMXAdminMultisig",
      "address": "eth:0xD2C37fC6fD89563187f3679304975655e448D192",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "governStarknet",
          "from": "eth:0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
          "role": ".$admin"
        },
        {
          "permission": "interact",
          "from": "eth:0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
          "description": "manage the token admin role.",
          "role": ".$admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
          "delay": 1209600,
          "role": ".$admin"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1702945151,
      "sinceBlock": 18816399,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0x37AC4a9Bf184aa1130016525631f3Daec11f7b26",
          "eth:0x3d395f623D8954d71132F5caC10778CA275806e0",
          "eth:0xdb6c271060571A96A62E3947E373395C89f765Ba",
          "eth:0xA28A84676E3Cec39e6F1D06CD0EEF6cAAa2F7f7b",
          "eth:0x296A19A4e87F5824DBE8DEd53415A4704538bB30",
          "eth:0xb3538EDB1cD74AE43e0aD25eac6F03553657E3fB"
        ],
        "$threshold": 4,
        "domainSeparator": "0x6d4cd80fab6b5f67389fb83fe46f5b27c2fbd48c5c3b58b6979e365d12da62f8",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 6 (67%)",
        "nonce": 34,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0xD2C37fC6fD89563187f3679304975655e448D192": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "address": "eth:0xdb6c271060571A96A62E3947E373395C89f765Ba",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xdc1bFbC2B8f01439eEea8e4659bbb452D0f9eE2A",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
          "description": "Can regsiter new tokens for deposits and withdrawals.",
          "role": ".tokenAdmins"
        }
      ]
    },
    {
      "address": "eth:0xeDb0219557ba13816f1dEb7fA54688362B05A5aE",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x5FDCCA53617f4d2b9134B29090C87D01058e27e9",
          "description": "Can regsiter new tokens for deposits and withdrawals.",
          "role": ".tokenAdmins"
        }
      ]
    },
    {
      "address": "eth:0xfF506616E8C53EE5e513b906AC00B5D76664C537",
      "type": "EOA",
      "proxyType": "EOA"
    }
  ],
  "abis": {
    "eth:0x1688abB0B5c72F34B7f78e857Aa317deD5B5D339": [
      "event LogDefaultVaultWithdrawalLockSet(uint256 newDefaultLockTime)",
      "event LogDepositToVault(address ethKey, uint256 assetId, uint256 vaultId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogVaultWithdrawalLockSet(address ethKey, uint256 assetId, uint256 vaultId, uint256 timeRelease)",
      "event LogWithdrawalFromVault(address ethKey, uint256 assetId, uint256 vaultId, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function STARKEX_MAX_DEFAULT_VAULT_LOCK() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function defaultVaultWithdrawalLock() view returns (uint256)",
      "function depositERC20ToVault(uint256 assetId, uint256 vaultId, uint256 quantizedAmount)",
      "function depositEthToVault(uint256 assetId, uint256 vaultId) payable",
      "function getAssetInfo(uint256 assetType) view returns (bytes assetInfo)",
      "function getQuantizedVaultBalance(address ethKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getVaultBalance(address ethKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function getVaultWithdrawalLock(address ethKey, uint256 assetId, uint256 vaultId) view returns (uint256)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isStrictVaultBalancePolicy() view returns (bool)",
      "function isVaultLocked(address ethKey, uint256 assetId, uint256 vaultId) view returns (bool)",
      "function lockVault(uint256 assetId, uint256 vaultId, uint256 lockTime)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function orderRegistryAddress() view returns (address)",
      "function setDefaultVaultWithdrawalLock(uint256 newDefaultTime)",
      "function withdrawFromVault(uint256 assetId, uint256 vaultId, uint256 quantizedAmount)"
    ],
    "eth:0x16BA0f221664A5189cf2C1a7AF0d3AbFc70aA295": [
      "constructor(address[] committeeMembers, uint256 numSignaturesRequired)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isMember(address) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function signaturesRequired() view returns (uint256)",
      "function verifyAvailabilityProof(bytes32 claimHash, bytes availabilityProofs)"
    ],
    "eth:0x1c3A4EfF75a287Fe6249CAb49606FA25659929A2": [
      "event LogFrozen()",
      "event LogMintableWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftWithdrawalAllowed(uint256 ownerKey, uint256 assetId)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogOperatorAdded(address operator)",
      "event LogOperatorRemoved(address operator)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogRootUpdate(uint256 sequenceNumber, uint256 batchId, uint256 vaultRoot, uint256 orderRoot)",
      "event LogStateTransitionFact(bytes32 stateTransitionFact)",
      "event LogUnFrozen()",
      "event LogVaultBalanceChangeApplied(address ethKey, uint256 assetId, uint256 vaultId, int256 quantizedAmountChange)",
      "event LogWithdrawalAllowed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function STARKEX_MAX_DEFAULT_VAULT_LOCK() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function defaultVaultWithdrawalLock() view returns (uint256)",
      "function escape(uint256 starkKey, uint256 vaultId, uint256 assetId, uint256 quantizedAmount)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getFullWithdrawalRequest(uint256 starkKey, uint256 vaultId) view returns (uint256 res)",
      "function getLastBatchId() view returns (uint256 batchId)",
      "function getOrderRoot() view returns (uint256 root)",
      "function getOrderTreeHeight() view returns (uint256 height)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getSequenceNumber() view returns (uint256 seq)",
      "function getVaultRoot() view returns (uint256 root)",
      "function getVaultTreeHeight() view returns (uint256 height)",
      "function identify() pure returns (string)",
      "function initialize(bytes data)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function isOperator(address testedOperator) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function orderRegistryAddress() view returns (address)",
      "function registerOperator(address newOperator)",
      "function unFreeze()",
      "function unregisterOperator(address removedOperator)",
      "function updateState(uint256[] publicInput, uint256[] applicationData)"
    ],
    "eth:0x3799ad2a4Eb4E882219B02C036656d4ECbD437A1": [
      "event LogFrozen()",
      "event LogFullWithdrawalRequest(uint256 starkKey, uint256 vaultId)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function STARKEX_MAX_DEFAULT_VAULT_LOCK() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function defaultVaultWithdrawalLock() view returns (uint256)",
      "function freezeRequest(uint256 starkKey, uint256 vaultId)",
      "function fullWithdrawalRequest(uint256 starkKey, uint256 vaultId)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getEthKey(uint256 ownerKey) view returns (address)",
      "function getFullWithdrawalRequest(uint256 starkKey, uint256 vaultId) view returns (uint256 res)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isFrozen() view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function orderRegistryAddress() view returns (address)",
      "function unFreeze()"
    ],
    "eth:0x4EDD62189732e9fF476ABa880b48c29432A7AC9B": [
      "function VERSION() view returns (string)",
      "function initialize(bytes data)"
    ],
    "eth:0x518c4A79a1102eEDc987005CA8cE6B87Ca14dDf8": [
      "event LogL1LimitOrderRegistered(address userAddress, address exchangeAddress, uint256 tokenIdSell, uint256 tokenIdBuy, uint256 tokenIdFee, uint256 amountSell, uint256 amountBuy, uint256 amountFee, uint256 vaultIdSell, uint256 vaultIdBuy, uint256 vaultIdFee, uint256 nonce, uint256 expirationTimestamp)",
      "event LogMsgRegistered(address from, address to, bytes32 msgHash)",
      "function calcL1LimitOrderHash(uint256 tokenIdSell, uint256 tokenIdBuy, uint256 tokenIdFee, uint256 amountSell, uint256 amountBuy, uint256 amountFee, uint256 vaultIdSell, uint256 vaultIdBuy, uint256 vaultIdFee, uint256 nonce, uint256 expirationTimestamp) pure returns (bytes32)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isMessageRegistered(address from, address to, bytes32 messageHash) view returns (bool)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function registerLimitOrder(address exchangeAddress, uint256 tokenIdSell, uint256 tokenIdBuy, uint256 tokenIdFee, uint256 amountSell, uint256 amountBuy, uint256 amountFee, uint256 vaultIdSell, uint256 vaultIdBuy, uint256 vaultIdFee, uint256 nonce, uint256 expirationTimestamp)",
      "function registerMessage(address to, bytes32 messageHash)"
    ],
    "eth:0x5FDCCA53617f4d2b9134B29090C87D01058e27e9": [
      "constructor(uint256 upgradeActivationDelay)",
      "event FinalizedImplementation(address indexed implementation)",
      "event ImplementationAdded(address indexed implementation, bytes initializer, bool finalize)",
      "event ImplementationRemoved(address indexed implementation)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event Upgraded(address indexed implementation)",
      "function PROXY_GOVERNANCE_TAG() view returns (string)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function addImplementation(address newImplementation, bytes data, bool finalize)",
      "function getUpgradeActivationDelay() view returns (uint256 delay)",
      "function implementation() view returns (address _implementation)",
      "function initialize(bytes) pure",
      "function isNotFinalized() view returns (bool notFinal)",
      "function proxyAcceptGovernance()",
      "function proxyCancelNomination()",
      "function proxyIsGovernor(address testGovernor) view returns (bool)",
      "function proxyNominateNewGovernor(address newGovernor)",
      "function proxyRemoveGovernor(address governorForRemoval)",
      "function removeImplementation(address newImplementation)",
      "function upgradeTo(address newImplementation, bytes data, bool finalize) payable"
    ],
    "eth:0x62BCA4DB742A99c834e2c24b609656A70EA25379": [
      "event LogFrozen()",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRegistered(address entry, string entryId)",
      "event LogRemovalIntent(address entry, string entryId)",
      "event LogRemoved(address entry, string entryId)",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogUnFrozen()",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function announceAvailabilityVerifierRemovalIntent(address verifier)",
      "function announceVerifierRemovalIntent(address verifier)",
      "function getRegisteredAvailabilityVerifiers() view returns (address[] _verifers)",
      "function getRegisteredVerifiers() view returns (address[] _verifers)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAvailabilityVerifier(address verifierAddress) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isVerifier(address verifierAddress) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function registerAvailabilityVerifier(address verifier, string identifier)",
      "function registerVerifier(address verifier, string identifier)",
      "function removeAvailabilityVerifier(address verifier)",
      "function removeVerifier(address verifier)",
      "function unFreeze()"
    ],
    "eth:0x6e3AbCE72A3CD5edc05E59283c733Fd4bF8B3baE": [
      "constructor(address gpsStatementContract, uint256 programHash_)",
      "function gpsContract() view returns (address)",
      "function hasRegisteredFact() view returns (bool)",
      "function identify() pure returns (string)",
      "function isValid(bytes32 fact) view returns (bool)",
      "function programHash() view returns (uint256)"
    ],
    "eth:0x8536850750956c2FEebeCAB786d82271a5467687": [
      "event LogDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositCancel(uint256 starkKey, uint256 vaultId, uint256 assetId)",
      "event LogDepositCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogDepositNftCancelReclaimed(uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogFrozen()",
      "event LogMintWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, uint256 assetId)",
      "event LogMintableWithdrawalAllowed(uint256 ownerKey, uint256 assetId, uint256 quantizedAmount)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNftDeposit(address depositorEthKey, uint256 starkKey, uint256 vaultId, uint256 assetType, uint256 tokenId, uint256 assetId)",
      "event LogNftWithdrawalAllowed(uint256 ownerKey, uint256 assetId)",
      "event LogNftWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 tokenId, uint256 assetId, address recipient)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "event LogTokenAdminAdded(address tokenAdmin)",
      "event LogTokenAdminRemoved(address tokenAdmin)",
      "event LogTokenRegistered(uint256 assetType, bytes assetInfo, uint256 quantum)",
      "event LogUnFrozen()",
      "event LogUserRegistered(address ethKey, uint256 starkKey, address sender)",
      "event LogWithdrawalAllowed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount)",
      "event LogWithdrawalPerformed(uint256 ownerKey, uint256 assetType, uint256 nonQuantizedAmount, uint256 quantizedAmount, address recipient)",
      "function DEPOSIT_CANCEL_DELAY() view returns (uint256)",
      "function FREEZE_GRACE_PERIOD() view returns (uint256)",
      "function MAIN_GOVERNANCE_INFO_TAG() view returns (string)",
      "function MAX_FORCED_ACTIONS_REQS_PER_BLOCK() view returns (uint256)",
      "function MAX_VERIFIER_COUNT() view returns (uint256)",
      "function UNFREEZE_DELAY() view returns (uint256)",
      "function VERIFIER_REMOVAL_DELAY() view returns (uint256)",
      "function defaultVaultWithdrawalLock() view returns (uint256)",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function deposit(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositCancel(uint256 starkKey, uint256 assetId, uint256 vaultId)",
      "function depositERC20(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function depositEth(uint256 starkKey, uint256 assetType, uint256 vaultId) payable",
      "function depositNft(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositNftReclaim(uint256 starkKey, uint256 assetType, uint256 vaultId, uint256 tokenId)",
      "function depositReclaim(uint256 starkKey, uint256 assetId, uint256 vaultId)",
      "function getActionCount() view returns (uint256)",
      "function getActionHashByIndex(uint256 actionIndex) view returns (bytes32)",
      "function getAssetInfo(uint256 assetType) view returns (bytes assetInfo)",
      "function getCancellationRequest(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 request)",
      "function getDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 balance)",
      "function getEthKey(uint256 ownerKey) view returns (address)",
      "function getFullWithdrawalRequest(uint256 starkKey, uint256 vaultId) view returns (uint256 res)",
      "function getQuantizedDepositBalance(uint256 starkKey, uint256 assetId, uint256 vaultId) view returns (uint256 balance)",
      "function getQuantum(uint256 presumedAssetType) view returns (uint256 quantum)",
      "function getWithdrawalBalance(uint256 ownerKey, uint256 assetId) view returns (uint256 balance)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function isAssetRegistered(uint256 assetType) view returns (bool)",
      "function isFrozen() view returns (bool)",
      "function isTokenAdmin(address testedAdmin) view returns (bool)",
      "function mainAcceptGovernance()",
      "function mainCancelNomination()",
      "function mainIsGovernor(address testGovernor) view returns (bool)",
      "function mainNominateNewGovernor(address newGovernor)",
      "function mainRemoveGovernor(address governorForRemoval)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function orderRegistryAddress() view returns (address)",
      "function registerAndDepositERC20(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)",
      "function registerAndDepositEth(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId) payable",
      "function registerEthAddress(address ethKey, uint256 starkKey, bytes starkSignature)",
      "function registerSender(uint256 starkKey, bytes starkSignature)",
      "function registerToken(uint256 assetType, bytes assetInfo)",
      "function registerToken(uint256 assetType, bytes assetInfo, uint256 quantum)",
      "function registerTokenAdmin(address newAdmin)",
      "function unFreeze()",
      "function unregisterTokenAdmin(address oldAdmin)",
      "function withdraw(uint256 ownerKey, uint256 assetType)",
      "function withdrawAndMint(uint256 ownerKey, uint256 assetType, bytes mintingBlob)",
      "function withdrawNft(uint256 ownerKey, uint256 assetType, uint256 tokenId)"
    ],
    "eth:0xB3788a88F063B217227E27ae16Ba550db3132bE6": [
      "event ImplementationActivationRescheduled(address indexed implementation, uint256 updatedActivationTime)",
      "event LogNewGovernorAccepted(address acceptedGovernor)",
      "event LogNominatedGovernor(address nominatedGovernor)",
      "event LogNominationCancelled()",
      "event LogRemovedGovernor(address removedGovernor)",
      "function PROXY_GOVERNANCE_TAG() view returns (string)",
      "function UPGRADE_DELAY_SLOT() view returns (bytes32)",
      "function identify() pure returns (string)",
      "function initialize(bytes)",
      "function initializerSize() view returns (uint256)",
      "function proxyAcceptGovernance()",
      "function proxyCancelNomination()",
      "function proxyIsGovernor(address testGovernor) view returns (bool)",
      "function proxyNominateNewGovernor(address newGovernor)",
      "function proxyRemoveGovernor(address governorForRemoval)",
      "function updateImplementationActivationTime(address implementation, bytes data, bool finalize)"
    ],
    "eth:0xD2C37fC6fD89563187f3679304975655e448D192": [
      "constructor(address _singleton)"
    ],
    "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ]
  },
  "usedTemplates": {
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "starkex/Committee": "0xea8d2e95c84337933f471b8c21505791bd94685784b7e5c407f5e7045403a683",
    "starkex/GpsFactRegistryAdapter": "0x1ad87511dd3212f3837ce0d97076154480b4909b6970ad7fb66342c32f61b0bb",
    "starkex/OrderRegistry": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "starkex/StarkExchange": "0x27c9aa7e5669180c5228a095027bfb8426029450cd708a9277ac4bee945f699c"
  },
  "usedBlockNumbers": { "ethereum": 21995398 },
  "permissionsConfigHash": "0xb441bf5defac26ca131d8c5f0b493c4e981473d9c08223a52a5196ccb3f2a07e"
}
