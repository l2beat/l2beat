{
  "name": "gateway",
  "chain": "ethereum",
  "blockNumber": 22730620,
  "configHash": "0x41db944b7c1b228c26e34ac04cc51ed846ac39e80139559b5c20ead4e3ac2ecc",
  "sharedModules": ["shared-zk-stack"],
  "entries": [
    {
      "name": "DualVerifier",
      "address": "0x079004D9C534Ff1dC3414F5dB31B4a0a1F4fc9d0",
      "type": "Contract",
      "template": "shared-zk-stack/DualVerifier",
      "sourceHashes": [
        "0x3053378d5ee24f71669b27b5b3cd0d74206379e6b43a9af084c2eb886712773e"
      ],
      "proxyType": "immutable",
      "description": "A router contract for verifiers. Routes verification requests to 0x1F517f2bAb178AdD6e282297a4728bcc50E9F6CF or 0xAd36FFc4066855aeF3Bdf6BF03cA427bb084636e depending on the supplied proof type.",
      "sinceTimestamp": 1743440219,
      "sinceBlock": 22168230,
      "values": {
        "$immutable": true,
        "FFLONK_VERIFIER": "0x1F517f2bAb178AdD6e282297a4728bcc50E9F6CF",
        "PLONK_VERIFIER": "0xAd36FFc4066855aeF3Bdf6BF03cA427bb084636e",
        "verificationKeyHash": "0xf688611ad4e0ef20184a89e7b593493dffcefe92071f85c1a0b94d4852c4f82f"
      },
      "fieldMeta": {
        "verificationKeyHash": {
          "description": "Verification key hash for the PLONK verifier ONLY (backwards compatibility)."
        }
      },
      "implementationNames": {
        "0x079004D9C534Ff1dC3414F5dB31B4a0a1F4fc9d0": "DualVerifier"
      }
    },
    {
      "name": "L1VerifierFflonk",
      "address": "0x1F517f2bAb178AdD6e282297a4728bcc50E9F6CF",
      "type": "Contract",
      "template": "shared-zk-stack/L1VerifierFflonk",
      "sourceHashes": [
        "0x7199ba2c08de647ce48cb5748d0bc975132606e38c5627ae23ff9b385dcf3b2d"
      ],
      "proxyType": "immutable",
      "description": "Verifies a zk-SNARK proof using an implementation of the fflonk proof system.",
      "sinceTimestamp": 1743440183,
      "sinceBlock": 22168227,
      "values": {
        "$immutable": true,
        "verificationKeyHash": "0x941fd36f78a5ba753dbbe65b9123a43ae833405fafd03b5149b959eee766e03c"
      },
      "fieldMeta": {
        "verificationKeyHash": {
          "severity": "HIGH",
          "description": "keccak256 hash of the verification keys."
        }
      },
      "implementationNames": {
        "0x1F517f2bAb178AdD6e282297a4728bcc50E9F6CF": "L1VerifierFflonk"
      }
    },
    {
      "name": "GatewayTransactionFilterer",
      "address": "0x5540DE94485dB078025318428F813C5d88215823",
      "type": "Contract",
      "template": "shared-zk-stack/GatewayTransactionFilterer",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0xddf32cb09a89624e3afcd665003e3a8f81d87a3408a0cf844ec4238889f8c850"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "A contract implementing the ITransactionFilterer interface, filtering with a configurable whitelist of sender addresses and a blacklist of target contract addresses. Chain migration transactions are generally whitelisted. The filter lists are managed by the owner (0xFe94B8AEB7950a26C276EA615a6d3C7289Fd2ac3).",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "ethereum:0x6E96D1172a6593D5027Af3c2664C5112Ca75F2B9",
          "description": "define addresses that can send transactions from L1 to L2 (e.g. for deposits, withdrawals, queued transactions). This is enforced in the Mailbox Facet.",
          "role": ".getTransactionFilterer"
        }
      ],
      "sinceTimestamp": 1748609843,
      "sinceBlock": 22595693,
      "values": {
        "$admin": "0x6B0d492D08d436d3BBC7Cc873C03002686Aef734",
        "$implementation": "0xcb4B0E49CeaF3fB98CD375B3D2A1cbF4dD85fBde",
        "$pastUpgrades": [
          [
            "2025-05-30T12:57:23.000Z",
            "0xac3985fb7e17642c669d9164f53c075503ec4c31208040e2bb47b8277a5cfe36",
            ["0xcb4B0E49CeaF3fB98CD375B3D2A1cbF4dD85fBde"]
          ]
        ],
        "$upgradeCount": 1,
        "blacklistedContracts": [
          "0x65e424504400d8923BD19dde480919a4C19adcD3",
          "0xcbd7298D64d7855C5a5736B4D8c5650aeA829214",
          "0x63825fc80a4B8d96EE99d37E958a3A5B01b995D9",
          "0xb742F4d52F6A5e98F11EAc60A7f75Acee534B831",
          "0xA7F2EDAcDcc54a9c711639eEe9d0b27C96F0F3B6",
          "0x4659780be9E0863eFB2BAE5DD77E31e371f2d3C8",
          "0xa365401Dc76d077c702965ECc39CfbfE436A6167",
          "0x7f124F72fB4f978798ffdedAD3332b0ce750F399",
          "0xEE7f08400FDa3A46D32Ae78eBEC2D3841CeC53b7",
          "0x0ba2a65bb5CaB6b4b4CA797C4Aa825118a6A2A63",
          "0x69653a812038424290EFd0e7Ae8DcFB2Bbf9c9b2",
          "0x540E6ED9FC06dFCbf0a38Dcc7Ed7Ea3F56C551de",
          "0x6655933e34d8FD8f6d2CC7d5175bFC06112B7474",
          "0x0000000000000000000000000000000000008006",
          "0x000000000000000000000000000000000000800f",
          "0x0000000000000000000000000000000000008014",
          "0x0000000000000000000000000000000000010000",
          "0x0000000000000000000000000000000000010001"
        ],
        "BRIDGE_HUB": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "L1_ASSET_ROUTER": "0x8829AD80E425C646DAB305381ff105169FeEcE56",
        "owner": "0xFe94B8AEB7950a26C276EA615a6d3C7289Fd2ac3",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "whitelistedSenders": [
          "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
          "0xE30Dca3047B37dc7d88849dE4A4Dc07937ad5Ab3",
          "0x6078F6B379f103de1Aa912dc46bb8Df0c8809860"
        ]
      },
      "fieldMeta": {
        "blacklistedContracts": {
          "description": "Addresses that are blacklisted as target contracts for requestL2Transaction() calls."
        },
        "whitelistedSenders": {
          "description": "Addresses that are whitelisted as senders for requestL2Transaction() calls."
        }
      },
      "implementationNames": {
        "0x5540DE94485dB078025318428F813C5d88215823": "TransparentUpgradeableProxy",
        "0xcb4B0E49CeaF3fB98CD375B3D2A1cbF4dD85fBde": "GatewayTransactionFilterer"
      }
    },
    {
      "name": "",
      "address": "0x6B0d492D08d436d3BBC7Cc873C03002686Aef734",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "ethereum:0x5540DE94485dB078025318428F813C5d88215823",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1748530883,
      "sinceBlock": 22589160,
      "values": { "$immutable": true },
      "implementationNames": {
        "0x6B0d492D08d436d3BBC7Cc873C03002686Aef734": ""
      }
    },
    {
      "name": "DiamondProxy",
      "address": "0x6E96D1172a6593D5027Af3c2664C5112Ca75F2B9",
      "type": "Contract",
      "template": "shared-zk-stack/v26/Diamond",
      "sourceHashes": [
        "0xc18e3ec7d4fda7be44236a2bff585089b85466b00d09a1c3a2529c604f99143b",
        "0xbc2380479529743c27e6ab96cdf08210319fadcbca0856cf50c6b1b54bf8437f"
      ],
      "proxyType": "EIP2535 diamond proxy",
      "description": "The main contract defining the Layer 2. Operator actions like commiting blocks, providing ZK proofs and executing batches ultimately target this contract which then processes transactions. During batch execution it processes L1 --> L2 and L2 --> L1 transactions. isPermanentRollup was set to true in this contract which prevents changing the DA mode to Validium in the future.",
      "ignoreInWatchMode": [
        "getTotalPriorityTxs",
        "getTotalBlocksCommitted",
        "getTotalBlocksExecuted",
        "getTotalBlocksVerified",
        "getTotalBatchesExecuted",
        "getTotalBatchesVerified",
        "getTotalBatchesCommitted",
        "getPriorityTreeStartIndex",
        "getPriorityTreeRoot",
        "getPriorityQueueSize",
        "getFirstUnprocessedPriorityTx",
        "baseTokenGasPriceMultiplierDenominator",
        "baseTokenGasPriceMultiplierNominator"
      ],
      "sinceTimestamp": 1747086455,
      "sinceBlock": 22469956,
      "values": {
        "$immutable": false,
        "$implementation": [
          "0xF2C9D38D16c7A7Dc9aA4F743Fce024354d9c19B4",
          "0x05DeB01AaDB6C98F8B78a1F9A81ccd68Ac4d70d4",
          "0x26b9a55DaBab9A8e74815A9D6Cd7F74AC0d7215f",
          "0x0A7C1b8D56BE02d9731e3A764107602f8F6dd490"
        ],
        "$pastUpgrades": [
          [
            "2025-05-12T21:47:35.000Z",
            "0x3e8cdd2eaeb071fb5c265c907558e6a92c07237bcf7b3dae70ae56a0650c08f1",
            [
              "0xF2C9D38D16c7A7Dc9aA4F743Fce024354d9c19B4",
              "0x05DeB01AaDB6C98F8B78a1F9A81ccd68Ac4d70d4",
              "0x26b9a55DaBab9A8e74815A9D6Cd7F74AC0d7215f",
              "0x0A7C1b8D56BE02d9731e3A764107602f8F6dd490"
            ]
          ],
          [
            "2025-05-12T21:47:35.000Z",
            "0x3e8cdd2eaeb071fb5c265c907558e6a92c07237bcf7b3dae70ae56a0650c08f1",
            [
              "0xF2C9D38D16c7A7Dc9aA4F743Fce024354d9c19B4",
              "0x05DeB01AaDB6C98F8B78a1F9A81ccd68Ac4d70d4",
              "0x26b9a55DaBab9A8e74815A9D6Cd7F74AC0d7215f",
              "0x0A7C1b8D56BE02d9731e3A764107602f8F6dd490"
            ]
          ],
          [
            "2025-05-12T21:47:35.000Z",
            "0x3e8cdd2eaeb071fb5c265c907558e6a92c07237bcf7b3dae70ae56a0650c08f1",
            [
              "0xF2C9D38D16c7A7Dc9aA4F743Fce024354d9c19B4",
              "0x05DeB01AaDB6C98F8B78a1F9A81ccd68Ac4d70d4",
              "0x26b9a55DaBab9A8e74815A9D6Cd7F74AC0d7215f",
              "0x0A7C1b8D56BE02d9731e3A764107602f8F6dd490"
            ]
          ]
        ],
        "$upgradeCount": 3,
        "baseTokenGasPriceMultiplierDenominator": 1,
        "baseTokenGasPriceMultiplierNominator": 30000,
        "facetAddresses": [
          "0xF2C9D38D16c7A7Dc9aA4F743Fce024354d9c19B4",
          "0x05DeB01AaDB6C98F8B78a1F9A81ccd68Ac4d70d4",
          "0x26b9a55DaBab9A8e74815A9D6Cd7F74AC0d7215f",
          "0x0A7C1b8D56BE02d9731e3A764107602f8F6dd490"
        ],
        "facets": {
          "0xF2C9D38D16c7A7Dc9aA4F743Fce024354d9c19B4": [
            "acceptAdmin()",
            "unfreezeDiamond()",
            "upgradeChainFromVersion(uint256,((address,uint8,bool,bytes4[])[],address,bytes))",
            "setPorterAvailability(bool)",
            "setTransactionFilterer(address)",
            "setTokenMultiplier(uint128,uint128)",
            "freezeDiamond()",
            "genesisUpgrade(address,address,bytes,bytes[])",
            "forwardedBridgeMint(bytes,bool)",
            "prepareChainCommitment()",
            "setValidator(address,bool)",
            "setPendingAdmin(address)",
            "allowEvmEmulation()",
            "setDAValidatorPair(address,address)",
            "forwardedBridgeBurn(address,address,bytes)",
            "changeFeeParams((uint8,uint32,uint32,uint32,uint32,uint64))",
            "makePermanentRollup()",
            "executeUpgrade(((address,uint8,bool,bytes4[])[],address,bytes))",
            "forwardedBridgeRecoverFailedTransfer(uint256,bytes32,address,bytes)",
            "setPriorityTxMaxGasLimit(uint256)",
            "setPubdataPricingMode(uint8)"
          ],
          "0x05DeB01AaDB6C98F8B78a1F9A81ccd68Ac4d70d4": [
            "getPubdataPricingMode()",
            "getPriorityTxMaxGasLimit()",
            "getTotalBlocksCommitted()",
            "getVerifierParams()",
            "baseTokenGasPriceMultiplierDenominator()",
            "getTransactionFilterer()",
            "isDiamondStorageFrozen()",
            "getProtocolVersion()",
            "getChainId()",
            "getBridgehub()",
            "getTotalBlocksExecuted()",
            "getPriorityTreeRoot()",
            "getVerifier()",
            "facetAddresses()",
            "getDAValidatorPair()",
            "getPriorityQueueSize()",
            "getSettlementLayer()",
            "getAdmin()",
            "storedBlockHash(uint256)",
            "getFirstUnprocessedPriorityTx()",
            "facets()",
            "getL2SystemContractsUpgradeTxHash()",
            "isPriorityQueueActive()",
            "getChainTypeManager()",
            "getBaseTokenAssetId()",
            "getBaseToken()",
            "l2LogsRootHash(uint256)",
            "getL2SystemContractsUpgradeBlockNumber()",
            "getTotalPriorityTxs()",
            "facetFunctionSelectors(address)",
            "getTotalBlocksVerified()",
            "storedBatchHash(uint256)",
            "getTotalBatchesExecuted()",
            "isEthWithdrawalFinalized(uint256,uint256)",
            "isFacetFreezable(address)",
            "facetAddress(bytes4)",
            "getPendingAdmin()",
            "getL2BootloaderBytecodeHash()",
            "getTotalBatchesCommitted()",
            "getL2EvmEmulatorBytecodeHash()",
            "getL2SystemContractsUpgradeBatchNumber()",
            "isFunctionFreezable(bytes4)",
            "baseTokenGasPriceMultiplierNominator()",
            "getTotalBatchesVerified()",
            "getPriorityTreeStartIndex()",
            "getSemverProtocolVersion()",
            "isValidator(address)",
            "getL2DefaultAccountBytecodeHash()"
          ],
          "0x26b9a55DaBab9A8e74815A9D6Cd7F74AC0d7215f": [
            "proveL1ToL2TransactionStatus(bytes32,uint256,uint256,uint16,bytes32[],uint8)",
            "bridgehubRequestL2Transaction((address,address,uint256,uint256,bytes,uint256,uint256,bytes[],address))",
            "requestL2Transaction(address,uint256,bytes,uint256,uint256,bytes[],address)",
            "proveL2LogInclusion(uint256,uint256,(uint8,bool,uint16,address,bytes32,bytes32),bytes32[])",
            "finalizeEthWithdrawal(uint256,uint256,uint16,bytes,bytes32[])",
            "proveL2LeafInclusion(uint256,uint256,bytes32,bytes32[])",
            "l2TransactionBaseCost(uint256,uint256,uint256)",
            "requestL2TransactionToGatewayMailbox(uint256,bytes32,uint64)",
            "requestL2ServiceTransaction(address,bytes)",
            "bridgehubRequestL2TransactionOnGateway(bytes32,uint64)",
            "proveL2MessageInclusion(uint256,uint256,(uint16,address,bytes),bytes32[])"
          ],
          "0x0A7C1b8D56BE02d9731e3A764107602f8F6dd490": [
            "revertBatchesSharedBridge(uint256,uint256)",
            "proveBatchesSharedBridge(uint256,uint256,uint256,bytes)",
            "commitBatchesSharedBridge(uint256,uint256,uint256,bytes)",
            "executeBatchesSharedBridge(uint256,uint256,uint256,bytes)"
          ]
        },
        "getAdmin": "0xFe94B8AEB7950a26C276EA615a6d3C7289Fd2ac3",
        "getBaseToken": "0x66A5cFB2e9c529f14FE6364Ad1075dF3a649C0A5",
        "getBaseTokenAssetId": "0x83e2fbc0a739b3c765de4c2b4bf8072a71ea8fbb09c8cf579c71425d8bc8804a",
        "getBridgehub": "0x303a465B659cBB0ab36eE643eA362c509EEb5213",
        "getChainId": 9075,
        "getChainTypeManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "getDAValidatorPair": [
          "0x72213dfe8CA61B0A782970dCFebFb877778f9119",
          "0x64E2AfcFE648201b2F4a749aF0B7229ecfa44281"
        ],
        "getFirstUnprocessedPriorityTx": 68,
        "getL2BootloaderBytecodeHash": "0x0100087fe7df1cf5616646f85bd5eebc8efe5d8deac4d85bea9b9aefd88803dd",
        "getL2DefaultAccountBytecodeHash": "0x0100050bf9baf9d08e5d3c037f8d8b486076de7e6dceb3f3fc0989ea2c99cd67",
        "getL2EvmEmulatorBytecodeHash": "0x01000bbb8116fe7bdf690c19740ea350375426cec23f4f1f69a12fdc58adc9ba",
        "getL2SystemContractsUpgradeBatchNumber": 0,
        "getL2SystemContractsUpgradeBlockNumber": 0,
        "getL2SystemContractsUpgradeTxHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getPendingAdmin": "0x0000000000000000000000000000000000000000",
        "getPriorityQueueSize": 0,
        "getPriorityTreeRoot": "0x1e447d44c9f10457e0a7f1bb212aaf7eac69b5332f7b54f6d28fd2ad3093bf85",
        "getPriorityTreeStartIndex": 0,
        "getPriorityTxMaxGasLimit": 72000000,
        "getProtocolVersion": 115964116992,
        "getPubdataPricingMode": 0,
        "getSemverProtocolVersion": [0, 27, 0],
        "getSettlementLayer": "0x0000000000000000000000000000000000000000",
        "getTotalBatchesCommitted": 39,
        "getTotalBatchesExecuted": 39,
        "getTotalBatchesVerified": 39,
        "getTotalBlocksCommitted": 39,
        "getTotalBlocksExecuted": 39,
        "getTotalBlocksVerified": 39,
        "getTotalPriorityTxs": 68,
        "getTransactionFilterer": "0x5540DE94485dB078025318428F813C5d88215823",
        "getVerifier": "0x079004D9C534Ff1dC3414F5dB31B4a0a1F4fc9d0",
        "getVerifierParams": {
          "recursionNodeLevelVkHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "recursionLeafLevelVkHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "recursionCircuitsSetVksHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
        },
        "isDiamondStorageFrozen": false,
        "isPermanentRollup": 1,
        "isPermanentRollupString": ". isPermanentRollup was set to true in this contract which prevents changing the DA mode to Validium in the future.",
        "isPriorityQueueActive": false,
        "validators": ["0x8c0Bfc04AdA21fd496c55B8C50331f904306F564"]
      },
      "fieldMeta": {
        "getAdmin": { "severity": "HIGH" },
        "getTransactionFilterer": {
          "severity": "HIGH",
          "description": "This contract must expose the ITransactionFilterer interface (see Mailbox facet) and is used for censoring transactions pushed from L1 to L2."
        },
        "IsPorterAvailableStatus": {
          "severity": "HIGH",
          "description": "zkPorter is a volition-like contruction and changes the zk proof input requirements."
        },
        "isPermanentRollup": {
          "severity": "HIGH",
          "description": "true means that the DA mode cannot be changed to Validium in the future. compliant DAValidator pairs for the permanent rollup mode are defined/enforced by the RollupDAManager contract."
        },
        "getDAValidatorPair": { "severity": "HIGH" },
        "getPendingAdmin": { "severity": "HIGH" },
        "getPubdataPricingMode": {
          "severity": "HIGH",
          "description": "0 - Rollup, 1 - Validium"
        },
        "getProtocolVersion": {
          "severity": "HIGH",
          "description": "Protocol version, increments with each protocol upgrade."
        },
        "getVerifierParams": {
          "severity": "LOW",
          "description": "Verifier parameters used for proving batches."
        }
      },
      "implementationNames": {
        "0x6E96D1172a6593D5027Af3c2664C5112Ca75F2B9": "DiamondProxy",
        "0xF2C9D38D16c7A7Dc9aA4F743Fce024354d9c19B4": "AdminFacet",
        "0x05DeB01AaDB6C98F8B78a1F9A81ccd68Ac4d70d4": "GettersFacet",
        "0x26b9a55DaBab9A8e74815A9D6Cd7F74AC0d7215f": "MailboxFacet",
        "0x0A7C1b8D56BE02d9731e3A764107602f8F6dd490": "ExecutorFacet"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "0": ".",
            "1": ". isPermanentRollup was set to true in this contract which prevents changing the DA mode to Validium in the future."
          }
        }
      ],
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "ValidatorTimelock",
      "address": "0x8c0Bfc04AdA21fd496c55B8C50331f904306F564",
      "type": "Contract",
      "template": "shared-zk-stack/ValidatorTimelock",
      "sourceHashes": [
        "0x2221508945ceea880f5d52488af1a7466fcdfadeaf3644dc5e3b82671b7947a3"
      ],
      "proxyType": "immutable",
      "description": "Intermediary contract between the *Validators* and the central diamond contract that delays block execution (ie withdrawals and other L2 --> L1 messages) by 3h.",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "ethereum:0x6E96D1172a6593D5027Af3c2664C5112Ca75F2B9",
          "description": "commit, prove, execute, revert batches directly in the main Diamond contract. This role is typically held by a proxying ValidatorTimelock.",
          "role": ".validators"
        }
      ],
      "sinceTimestamp": 1739108999,
      "sinceBlock": 21809364,
      "values": {
        "$immutable": true,
        "chainTypeManager": "0xc2eE6b6af7d616f6e27ce7F4A451Aedc2b0F5f5C",
        "executionDelay": 10800,
        "executionDelay_fmt": "3h",
        "getName": "ValidatorTimelock",
        "owner": "0xE30Dca3047B37dc7d88849dE4A4Dc07937ad5Ab3",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "revertedBlocks": [],
        "validatorsVTL": [
          "0xbF4c6806d1fF930B5bEcab99b93c5355bD08fFfE",
          "0xcEB302741E355E7Cf30b8479b7aD104d0C171EBF"
        ]
      },
      "implementationNames": {
        "0x8c0Bfc04AdA21fd496c55B8C50331f904306F564": "ValidatorTimelock"
      },
      "category": { "name": "Shared Infrastructure", "priority": 4 }
    },
    {
      "name": "L1VerifierPlonk",
      "address": "0xAd36FFc4066855aeF3Bdf6BF03cA427bb084636e",
      "type": "Contract",
      "template": "shared-zk-stack/L1VerifierPlonk",
      "sourceHashes": [
        "0xece6251be1fc5f10e3b32223286672aa3d21fe15b0a9708327c3f4eadc5792ea"
      ],
      "proxyType": "immutable",
      "description": "Verifies a zk-SNARK proof using an implementation of the PlonK proof system.",
      "sinceTimestamp": 1743440195,
      "sinceBlock": 22168228,
      "values": {
        "$immutable": true,
        "verificationKeyHash": "0xf688611ad4e0ef20184a89e7b593493dffcefe92071f85c1a0b94d4852c4f82f"
      },
      "fieldMeta": {
        "verificationKeyHash": {
          "severity": "HIGH",
          "description": "keccak256 hash of the verification keys."
        }
      },
      "implementationNames": {
        "0xAd36FFc4066855aeF3Bdf6BF03cA427bb084636e": "L1VerifierPlonk"
      }
    },
    {
      "address": "0xbF4c6806d1fF930B5bEcab99b93c5355bD08fFfE",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "validateZkStack",
          "from": "ethereum:0x8c0Bfc04AdA21fd496c55B8C50331f904306F564",
          "role": ".validatorsVTL"
        }
      ]
    },
    {
      "address": "0xcEB302741E355E7Cf30b8479b7aD104d0C171EBF",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "validateZkStack",
          "from": "ethereum:0x8c0Bfc04AdA21fd496c55B8C50331f904306F564",
          "role": ".validatorsVTL"
        }
      ]
    },
    {
      "address": "0xFC0cB5F27C8d27E9Ddf76b8A0adA9806227bA6a9",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "ethereum:0xFe94B8AEB7950a26C276EA615a6d3C7289Fd2ac3",
          "description": "set the conversion factor for gas token deposits.",
          "role": ".tokenMultiplierSetter"
        }
      ]
    },
    {
      "name": "ChainAdminOwnable",
      "address": "0xFe94B8AEB7950a26C276EA615a6d3C7289Fd2ac3",
      "type": "Contract",
      "template": "shared-zk-stack/ChainAdmin",
      "sourceHashes": [
        "0x52d297ca518abe8d71a6d8911487860414e682b1d0d1e7169c4151b619d55832"
      ],
      "proxyType": "immutable",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "ethereum:0x5540DE94485dB078025318428F813C5d88215823",
          "description": "manage filter lists.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "ethereum:0x6E96D1172a6593D5027Af3c2664C5112Ca75F2B9",
          "description": "manage fees, apply predefined upgrades, manage censorship through a TransactionFilterer, set DA mode, migrate the chain to whitelisted settlement layers (Chain Admin role).",
          "role": ".getAdmin"
        }
      ],
      "sinceTimestamp": 1745941307,
      "sinceBlock": 22375679,
      "values": {
        "$immutable": true,
        "owner": "0x4e4943346848c4867F81dFb37c4cA9C5715A7828",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "tokenMultiplierSetter": "0xFC0cB5F27C8d27E9Ddf76b8A0adA9806227bA6a9",
        "upgradeTimestamps": []
      },
      "fieldMeta": {
        "upgradeTimestamps": {
          "description": "Timestamps for new protocol version upgrades can be registered here (NOT enforced)"
        }
      },
      "implementationNames": {
        "0xFe94B8AEB7950a26C276EA615a6d3C7289Fd2ac3": "ChainAdminOwnable"
      },
      "category": { "name": "Governance", "priority": 3 }
    }
  ],
  "abis": {
    "0x05DeB01AaDB6C98F8B78a1F9A81ccd68Ac4d70d4": [
      "function baseTokenGasPriceMultiplierDenominator() view returns (uint128)",
      "function baseTokenGasPriceMultiplierNominator() view returns (uint128)",
      "function facetAddress(bytes4 _selector) view returns (address)",
      "function facetAddresses() view returns (address[])",
      "function facetFunctionSelectors(address _facet) view returns (bytes4[])",
      "function facets() view returns (tuple(address addr, bytes4[] selectors)[] result)",
      "function getAdmin() view returns (address)",
      "function getBaseToken() view returns (address)",
      "function getBaseTokenAssetId() view returns (bytes32)",
      "function getBridgehub() view returns (address)",
      "function getChainId() view returns (uint256)",
      "function getChainTypeManager() view returns (address)",
      "function getDAValidatorPair() view returns (address, address)",
      "function getFirstUnprocessedPriorityTx() view returns (uint256)",
      "function getL2BootloaderBytecodeHash() view returns (bytes32)",
      "function getL2DefaultAccountBytecodeHash() view returns (bytes32)",
      "function getL2EvmEmulatorBytecodeHash() view returns (bytes32)",
      "function getL2SystemContractsUpgradeBatchNumber() view returns (uint256)",
      "function getL2SystemContractsUpgradeBlockNumber() view returns (uint256)",
      "function getL2SystemContractsUpgradeTxHash() view returns (bytes32)",
      "function getName() view returns (string)",
      "function getPendingAdmin() view returns (address)",
      "function getPriorityQueueSize() view returns (uint256)",
      "function getPriorityTreeRoot() view returns (bytes32)",
      "function getPriorityTreeStartIndex() view returns (uint256)",
      "function getPriorityTxMaxGasLimit() view returns (uint256)",
      "function getProtocolVersion() view returns (uint256)",
      "function getPubdataPricingMode() view returns (uint8)",
      "function getSemverProtocolVersion() view returns (uint32, uint32, uint32)",
      "function getSettlementLayer() view returns (address)",
      "function getTotalBatchesCommitted() view returns (uint256)",
      "function getTotalBatchesExecuted() view returns (uint256)",
      "function getTotalBatchesVerified() view returns (uint256)",
      "function getTotalBlocksCommitted() view returns (uint256)",
      "function getTotalBlocksExecuted() view returns (uint256)",
      "function getTotalBlocksVerified() view returns (uint256)",
      "function getTotalPriorityTxs() view returns (uint256)",
      "function getTransactionFilterer() view returns (address)",
      "function getVerifier() view returns (address)",
      "function getVerifierParams() view returns (tuple(bytes32 recursionNodeLevelVkHash, bytes32 recursionLeafLevelVkHash, bytes32 recursionCircuitsSetVksHash))",
      "function isDiamondStorageFrozen() view returns (bool)",
      "function isEthWithdrawalFinalized(uint256 _l2BatchNumber, uint256 _l2MessageIndex) view returns (bool)",
      "function isFacetFreezable(address _facet) view returns (bool isFreezable)",
      "function isFunctionFreezable(bytes4 _selector) view returns (bool)",
      "function isPriorityQueueActive() view returns (bool)",
      "function isValidator(address _address) view returns (bool)",
      "function l2LogsRootHash(uint256 _batchNumber) view returns (bytes32)",
      "function storedBatchHash(uint256 _batchNumber) view returns (bytes32)",
      "function storedBlockHash(uint256 _batchNumber) view returns (bytes32)"
    ],
    "0x079004D9C534Ff1dC3414F5dB31B4a0a1F4fc9d0": [
      "constructor(address _fflonkVerifier, address _plonkVerifier)",
      "error EmptyProofLength()",
      "error UnknownVerifierType()",
      "function FFLONK_VERIFIER() view returns (address)",
      "function PLONK_VERIFIER() view returns (address)",
      "function verificationKeyHash() view returns (bytes32)",
      "function verificationKeyHash(uint256 _verifierType) view returns (bytes32)",
      "function verify(uint256[] _publicInputs, uint256[] _proof) view returns (bool)"
    ],
    "0x0A7C1b8D56BE02d9731e3A764107602f8F6dd490": [
      "constructor(uint256 _l1ChainId)",
      "error BatchHashMismatch(bytes32 expected, bytes32 actual)",
      "error BatchNumberMismatch(uint256 expectedBatchNumber, uint256 providedBatchNumber)",
      "error CanOnlyProcessOneBatch()",
      "error CantExecuteUnprovenBatches()",
      "error CantRevertExecutedBatch()",
      "error EmptyData()",
      "error HashMismatch(bytes32 expected, bytes32 actual)",
      "error IncorrectBatchBounds(uint256 processFromExpected, uint256 processToExpected, uint256 processFromProvided, uint256 processToProvided)",
      "error InvalidBatchesDataLength(uint256 batchesDataLength, uint256 priorityOpsDataLength)",
      "error InvalidLogSender(address sender, uint256 logKey)",
      "error InvalidNumberOfBlobs(uint256 expected, uint256 numCommitments, uint256 numHashes)",
      "error InvalidProof()",
      "error InvalidProtocolVersion()",
      "error InvalidSystemLogsLength()",
      "error L2TimestampTooBig()",
      "error LogAlreadyProcessed(uint8)",
      "error MerkleIndexOrHeightMismatch()",
      "error MerkleNothingToProve()",
      "error MerklePathEmpty()",
      "error MerklePathLengthMismatch(uint256 pathLength, uint256 expectedLength)",
      "error MerklePathOutOfBounds()",
      "error MismatchL2DAValidator()",
      "error MismatchNumberOfLayer1Txs(uint256 numberOfLayer1Txs, uint256 expectedLength)",
      "error MissingSystemLogs(uint256 expected, uint256 actual)",
      "error NonIncreasingTimestamp()",
      "error NonSequentialBatch()",
      "error NotHistoricalRoot()",
      "error NotInitializedReentrancyGuard()",
      "error NotSettlementLayer()",
      "error PriorityOperationsRollingHashMismatch()",
      "error PriorityOpsDataItemHashesLengthIsNotZero()",
      "error PriorityOpsDataLeftPathLengthIsNotZero()",
      "error PriorityOpsDataRightPathLengthIsNotZero()",
      "error QueueIsEmpty()",
      "error Reentrancy()",
      "error RevertedBatchNotAfterNewLastBatch()",
      "error SystemLogsSizeTooBig()",
      "error TimeNotReached(uint256 expectedTimestamp, uint256 actualTimestamp)",
      "error TimestampError()",
      "error TxHashMismatch()",
      "error Unauthorized(address caller)",
      "error UnexpectedSystemLog(uint256 logKey)",
      "error UnsupportedCommitBatchEncoding(uint8 version)",
      "error UnsupportedExecuteBatchEncoding(uint8 version)",
      "error UnsupportedProofBatchEncoding(uint8 version)",
      "error UpgradeBatchNumberIsNotZero()",
      "error ValueMismatch(uint256 expected, uint256 actual)",
      "error VerifiedBatchesExceedsCommittedBatches()",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "function commitBatchesSharedBridge(uint256, uint256 _processFrom, uint256 _processTo, bytes _commitData)",
      "function executeBatchesSharedBridge(uint256, uint256 _processFrom, uint256 _processTo, bytes _executeData)",
      "function getName() view returns (string)",
      "function proveBatchesSharedBridge(uint256, uint256 _processBatchFrom, uint256 _processBatchTo, bytes _proofData)",
      "function revertBatchesSharedBridge(uint256, uint256 _newLastBatch)"
    ],
    "0x1F517f2bAb178AdD6e282297a4728bcc50E9F6CF": [
      "function verificationKeyHash() pure returns (bytes32 vkHash)",
      "function verify(uint256[], uint256[]) view returns (bool)"
    ],
    "0x26b9a55DaBab9A8e74815A9D6Cd7F74AC0d7215f": [
      "constructor(uint256 _eraChainId, uint256 _l1ChainId)",
      "error BaseTokenGasPriceDenominatorNotSet()",
      "error BatchNotExecuted(uint256 batchNumber)",
      "error GasPerPubdataMismatch()",
      "error HashedLogIsDefault()",
      "error InvalidProofLengthForFinalNode()",
      "error LengthIsNotDivisibleBy32(uint256 length)",
      "error LocalRootIsZero()",
      "error LocalRootMustBeZero()",
      "error MalformedBytecode(uint8)",
      "error MerkleIndexOutOfBounds()",
      "error MerklePathEmpty()",
      "error MerklePathOutOfBounds()",
      "error MsgValueTooLow(uint256 required, uint256 provided)",
      "error NotHyperchain()",
      "error NotInitializedReentrancyGuard()",
      "error NotL1(uint256 blockChainId)",
      "error NotSettlementLayer()",
      "error OnlyEraSupported()",
      "error PubdataGreaterThanLimit(uint256 limit, uint256 length)",
      "error Reentrancy()",
      "error TooManyFactoryDeps()",
      "error TooMuchGas()",
      "error TransactionNotAllowed()",
      "error TxnBodyGasLimitNotEnoughGas()",
      "error Unauthorized(address caller)",
      "error UnsupportedProofMetadataVersion(uint256 metadataVersion)",
      "error ValidateTxnNotEnoughGas()",
      "event NewPriorityRequest(uint256 txId, bytes32 txHash, uint64 expirationTimestamp, tuple(uint256 txType, uint256 from, uint256 to, uint256 gasLimit, uint256 gasPerPubdataByteLimit, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas, uint256 paymaster, uint256 nonce, uint256 value, uint256[4] reserved, bytes data, bytes signature, uint256[] factoryDeps, bytes paymasterInput, bytes reservedDynamic) transaction, bytes[] factoryDeps)",
      "event NewRelayedPriorityTransaction(uint256 txId, bytes32 txHash, uint64 expirationTimestamp)",
      "function bridgehubRequestL2Transaction(tuple(address sender, address contractL2, uint256 mintValue, uint256 l2Value, bytes l2Calldata, uint256 l2GasLimit, uint256 l2GasPerPubdataByteLimit, bytes[] factoryDeps, address refundRecipient) _request) returns (bytes32 canonicalTxHash)",
      "function bridgehubRequestL2TransactionOnGateway(bytes32 _canonicalTxHash, uint64 _expirationTimestamp)",
      "function finalizeEthWithdrawal(uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes _message, bytes32[] _merkleProof)",
      "function getName() view returns (string)",
      "function l2TransactionBaseCost(uint256 _gasPrice, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit) view returns (uint256)",
      "function proveL1ToL2TransactionStatus(bytes32 _l2TxHash, uint256 _l2BatchNumber, uint256 _l2MessageIndex, uint16 _l2TxNumberInBatch, bytes32[] _merkleProof, uint8 _status) view returns (bool)",
      "function proveL2LeafInclusion(uint256 _batchNumber, uint256 _leafProofMask, bytes32 _leaf, bytes32[] _proof) view returns (bool)",
      "function proveL2LogInclusion(uint256 _batchNumber, uint256 _index, tuple(uint8 l2ShardId, bool isService, uint16 txNumberInBatch, address sender, bytes32 key, bytes32 value) _log, bytes32[] _proof) view returns (bool)",
      "function proveL2MessageInclusion(uint256 _batchNumber, uint256 _index, tuple(uint16 txNumberInBatch, address sender, bytes data) _message, bytes32[] _proof) view returns (bool)",
      "function requestL2ServiceTransaction(address _contractL2, bytes _l2Calldata) returns (bytes32 canonicalTxHash)",
      "function requestL2Transaction(address _contractL2, uint256 _l2Value, bytes _calldata, uint256 _l2GasLimit, uint256 _l2GasPerPubdataByteLimit, bytes[] _factoryDeps, address _refundRecipient) payable returns (bytes32 canonicalTxHash)",
      "function requestL2TransactionToGatewayMailbox(uint256 _chainId, bytes32 _canonicalTxHash, uint64 _expirationTimestamp) returns (bytes32 canonicalTxHash)"
    ],
    "0x5540DE94485dB078025318428F813C5d88215823": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x6E96D1172a6593D5027Af3c2664C5112Ca75F2B9": [
      "constructor(uint256 _chainId, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)",
      "error AddressHasNoCode(address)",
      "error DelegateCallFailed(bytes returnData)",
      "error FacetExists(bytes4 selector, address)",
      "error NoFunctionsForDiamondCut()",
      "error NonEmptyCalldata()",
      "error RemoveFunctionFacetAddressNotZero(address facet)",
      "error RemoveFunctionFacetAddressZero()",
      "error ReplaceFunctionFacetAddressZero()",
      "error SelectorsMustAllHaveSameFreezability()",
      "error UndefinedDiamondCutAction()",
      "event DiamondCut(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata)"
    ],
    "0x8c0Bfc04AdA21fd496c55B8C50331f904306F564": [
      "constructor(address _initialOwner, uint32 _executionDelay)",
      "error AddressAlreadyValidator(uint256 _chainId)",
      "error TimeNotReached(uint256 expectedTimestamp, uint256 actualTimestamp)",
      "error Unauthorized(address caller)",
      "error ValidatorDoesNotExist(uint256 _chainId)",
      "error ZeroAddress()",
      "event BlockCommit(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlockExecution(uint256 indexed batchNumber, bytes32 indexed batchHash, bytes32 indexed commitment)",
      "event BlocksRevert(uint256 totalBatchesCommitted, uint256 totalBatchesVerified, uint256 totalBatchesExecuted)",
      "event BlocksVerification(uint256 indexed previousLastVerifiedBatch, uint256 indexed currentLastVerifiedBatch)",
      "event NewExecutionDelay(uint256 _newExecutionDelay)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ValidatorAdded(uint256 indexed _chainId, address _addedValidator)",
      "event ValidatorRemoved(uint256 indexed _chainId, address _removedValidator)",
      "function acceptOwnership()",
      "function addValidator(uint256 _chainId, address _newValidator)",
      "function chainTypeManager() view returns (address)",
      "function commitBatchesSharedBridge(uint256 _chainId, uint256 _processBatchFrom, uint256 _processBatchTo, bytes)",
      "function executeBatchesSharedBridge(uint256 _chainId, uint256 _processBatchFrom, uint256 _processBatchTo, bytes)",
      "function executionDelay() view returns (uint32)",
      "function getCommittedBatchTimestamp(uint256 _chainId, uint256 _l2BatchNumber) view returns (uint256)",
      "function getName() view returns (string)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function proveBatchesSharedBridge(uint256 _chainId, uint256, uint256, bytes)",
      "function removeValidator(uint256 _chainId, address _validator)",
      "function renounceOwnership()",
      "function revertBatchesSharedBridge(uint256 _chainId, uint256)",
      "function setChainTypeManager(address _chainTypeManager)",
      "function setExecutionDelay(uint32 _executionDelay)",
      "function transferOwnership(address newOwner)",
      "function validators(uint256 _chainId, address _validator) view returns (bool)"
    ],
    "0xAd36FFc4066855aeF3Bdf6BF03cA427bb084636e": [
      "function verificationKeyHash() pure returns (bytes32 vkHash)",
      "function verify(uint256[], uint256[]) view returns (bool)"
    ],
    "0xcb4B0E49CeaF3fB98CD375B3D2A1cbF4dD85fBde": [
      "constructor(address _bridgeHub, address _assetRouter)",
      "error AlreadyBlocklisted(address)",
      "error AlreadyWhitelisted(address)",
      "error InvalidSelector(bytes4 func)",
      "error NotBlocklisted(address)",
      "error NotWhitelisted(address)",
      "error ZeroAddress()",
      "event Blocklisted(address indexed l2Contract)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RemovedFromBlocklist(address indexed l2Contract)",
      "event WhitelistGranted(address indexed sender)",
      "event WhitelistRevoked(address indexed sender)",
      "function BRIDGE_HUB() view returns (address)",
      "function L1_ASSET_ROUTER() view returns (address)",
      "function acceptOwnership()",
      "function blocklistL2Contract(address _l2Contract)",
      "function blocklistedContracts(address l2Contract) view returns (bool blocklisted)",
      "function grantWhitelist(address sender)",
      "function initialize(address _owner)",
      "function isTransactionAllowed(address sender, address contractL2, uint256, uint256, bytes l2Calldata, address) view returns (bool)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function removeFromBlocklist(address _l2Contract)",
      "function renounceOwnership()",
      "function revokeWhitelist(address sender)",
      "function transferOwnership(address newOwner)",
      "function whitelistedSenders(address sender) view returns (bool whitelisted)"
    ],
    "0xF2C9D38D16c7A7Dc9aA4F743Fce024354d9c19B4": [
      "constructor(uint256 _l1ChainId, address _rollupDAManager)",
      "error AddressHasNoCode(address)",
      "error AlreadyMigrated()",
      "error AlreadyPermanentRollup()",
      "error ContractNotDeployed()",
      "error DelegateCallFailed(bytes returnData)",
      "error DenominatorIsZero()",
      "error DiamondAlreadyFrozen()",
      "error DiamondNotFrozen()",
      "error ExecutedIsNotConsistentWithVerified(uint256 batchesExecuted, uint256 batchesVerified)",
      "error FacetExists(bytes4 selector, address)",
      "error HashMismatch(bytes32 expected, bytes32 actual)",
      "error InvalidCommitment()",
      "error InvalidDAForPermanentRollup()",
      "error InvalidNextLeafIndex(uint256 treeNextLeafIndex, uint256 commitmentNextLeafIndex)",
      "error InvalidNumberOfBatchHashes(uint256 batchHashesLength, uint256 expected)",
      "error InvalidPubdataPricingMode()",
      "error InvalidStartIndex(uint256 treeStartIndex, uint256 commitmentStartIndex)",
      "error InvalidUnprocessedIndex(uint256 treeUnprocessedIndex, uint256 commitmentUnprocessedIndex)",
      "error L1DAValidatorAddressIsZero()",
      "error L2DAValidatorAddressIsZero()",
      "error NoFunctionsForDiamondCut()",
      "error NonEmptyCalldata()",
      "error NotAllBatchesExecuted()",
      "error NotChainAdmin(address prevMsgSender, address admin)",
      "error NotHistoricalRoot()",
      "error NotL1(uint256 blockChainId)",
      "error NotMigrated()",
      "error NotSettlementLayer()",
      "error OutdatedProtocolVersion(uint256 protocolVersion, uint256 currentProtocolVersion)",
      "error PriorityQueueNotReady()",
      "error PriorityTxPubdataExceedsMaxPubDataPerBatch()",
      "error ProtocolIdMismatch(uint256 expectedProtocolVersion, uint256 providedProtocolId)",
      "error ProtocolIdNotGreater()",
      "error ProtocolVersionNotUpToDate(uint256 currentProtocolVersion, uint256 protocolVersion)",
      "error RemoveFunctionFacetAddressNotZero(address facet)",
      "error RemoveFunctionFacetAddressZero()",
      "error ReplaceFunctionFacetAddressZero()",
      "error SelectorsMustAllHaveSameFreezability()",
      "error TooMuchGas()",
      "error Unauthorized(address caller)",
      "error UndefinedDiamondCutAction()",
      "error VerifiedIsNotConsistentWithCommitted(uint256 batchesVerified, uint256 batchesCommitted)",
      "event BridgeMint(address indexed _account, uint256 _amount)",
      "event DiamondCut(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata)",
      "event EnableEvmEmulator()",
      "event ExecuteUpgrade(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) diamondCut)",
      "event Freeze()",
      "event IsPorterAvailableStatusUpdate(bool isPorterAvailable)",
      "event MigrationComplete()",
      "event NewAdmin(address indexed oldAdmin, address indexed newAdmin)",
      "event NewBaseTokenMultiplier(uint128 oldNominator, uint128 oldDenominator, uint128 newNominator, uint128 newDenominator)",
      "event NewFeeParams(tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) oldFeeParams, tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) newFeeParams)",
      "event NewL1DAValidator(address indexed oldL1DAValidator, address indexed newL1DAValidator)",
      "event NewL2DAValidator(address indexed oldL2DAValidator, address indexed newL2DAValidator)",
      "event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin)",
      "event NewPriorityTxMaxGasLimit(uint256 oldPriorityTxMaxGasLimit, uint256 newPriorityTxMaxGasLimit)",
      "event NewTransactionFilterer(address oldTransactionFilterer, address newTransactionFilterer)",
      "event PubdataPricingModeUpdate(uint8 validiumMode)",
      "event Unfreeze()",
      "event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive)",
      "function acceptAdmin()",
      "function allowEvmEmulation() returns (bytes32 canonicalTxHash)",
      "function changeFeeParams(tuple(uint8 pubdataPricingMode, uint32 batchOverheadL1Gas, uint32 maxPubdataPerBatch, uint32 maxL2GasPerBatch, uint32 priorityTxMaxPubdata, uint64 minimalL2GasPrice) _newFeeParams)",
      "function executeUpgrade(tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)",
      "function forwardedBridgeBurn(address _settlementLayer, address _originalCaller, bytes _data) payable returns (bytes chainBridgeMintData)",
      "function forwardedBridgeMint(bytes _data, bool _contractAlreadyDeployed) payable",
      "function forwardedBridgeRecoverFailedTransfer(uint256, bytes32, address, bytes _chainData) payable",
      "function freezeDiamond()",
      "function genesisUpgrade(address _l1GenesisUpgrade, address _ctmDeployer, bytes _forceDeploymentData, bytes[] _factoryDeps)",
      "function getName() view returns (string)",
      "function makePermanentRollup()",
      "function prepareChainCommitment() view returns (tuple(uint256 totalBatchesExecuted, uint256 totalBatchesVerified, uint256 totalBatchesCommitted, bytes32 l2SystemContractsUpgradeTxHash, uint256 l2SystemContractsUpgradeBatchNumber, bytes32[] batchHashes, tuple(uint256 nextLeafIndex, uint256 startIndex, uint256 unprocessedIndex, bytes32[] sides) priorityTree, bool isPermanentRollup) commitment)",
      "function setDAValidatorPair(address _l1DAValidator, address _l2DAValidator)",
      "function setPendingAdmin(address _newPendingAdmin)",
      "function setPorterAvailability(bool _zkPorterIsAvailable)",
      "function setPriorityTxMaxGasLimit(uint256 _newPriorityTxMaxGasLimit)",
      "function setPubdataPricingMode(uint8 _pricingMode)",
      "function setTokenMultiplier(uint128 _nominator, uint128 _denominator)",
      "function setTransactionFilterer(address _transactionFilterer)",
      "function setValidator(address _validator, bool _active)",
      "function unfreezeDiamond()",
      "function upgradeChainFromVersion(uint256 _oldProtocolVersion, tuple(tuple(address facet, uint8 action, bool isFreezable, bytes4[] selectors)[] facetCuts, address initAddress, bytes initCalldata) _diamondCut)"
    ],
    "0xFe94B8AEB7950a26C276EA615a6d3C7289Fd2ac3": [
      "constructor(address _initialOwner, address _initialTokenMultiplierSetter)",
      "error NoCallsProvided()",
      "error Unauthorized(address caller)",
      "error ZeroAddress()",
      "event CallExecuted(tuple(address target, uint256 value, bytes data) _call, bool _success, bytes _returnData)",
      "event NewTokenMultiplierSetter(address _oldTokenMultiplierSetter, address _newTokenMultiplierSetter)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event UpdateUpgradeTimestamp(uint256 indexed _protocolVersion, uint256 _upgradeTimestamp)",
      "function acceptOwnership()",
      "function multicall(tuple(address target, uint256 value, bytes data)[] _calls, bool _requireSuccess) payable",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function protocolVersionToUpgradeTimestamp(uint256 protocolVersion) view returns (uint256 upgradeTimestamp)",
      "function renounceOwnership()",
      "function setTokenMultiplier(address _chainContract, uint128 _nominator, uint128 _denominator)",
      "function setTokenMultiplierSetter(address _tokenMultiplierSetter)",
      "function setUpgradeTimestamp(uint256 _protocolVersion, uint256 _upgradeTimestamp)",
      "function tokenMultiplierSetter() view returns (address)",
      "function transferOwnership(address newOwner)"
    ]
  },
  "usedTemplates": {
    "shared-zk-stack/ChainAdmin": "0x8be9e939e27d818ead1d430f9f603f4143a5f3d809e6f287aa3d463e5a8f5b8b",
    "shared-zk-stack/DualVerifier": "0xa5872f4279977d125fbe7de800bcc56565d1b14b2acb9736ec9ef0be291ccc24",
    "shared-zk-stack/GatewayTransactionFilterer": "0xa76aef97935fb7a6867df3455e3fc9e7034f5c104c8330e8dd9cd9c34d1302ed",
    "shared-zk-stack/L1VerifierFflonk": "0xa5872f4279977d125fbe7de800bcc56565d1b14b2acb9736ec9ef0be291ccc24",
    "shared-zk-stack/L1VerifierPlonk": "0xa5872f4279977d125fbe7de800bcc56565d1b14b2acb9736ec9ef0be291ccc24",
    "shared-zk-stack/v26/Diamond": "0xef3e05942848c1858400f0ce5ef0d9f3c4c7ef7aeade3b0ceaa604de56313624",
    "shared-zk-stack/ValidatorTimelock": "0xc605499cf1c033abb2a1ee7a146ab364bfcbc9722b13bea57f2def8905bb409f"
  },
  "permissionsConfigHash": "0x0d25c7bbcb5ad59dc51a1ebce339f5bbb4a614c708e34e727cc51eb76fec0f40"
}
