{
  "name": "rs-eth",
  "chain": "base",
  "timestamp": 1752830527,
  "configHash": "0x2b540159bb11769533b9cb89a2235f165d9414a774f330bef5bae3d77f9d21de",
  "entries": [
    {
      "name": "RSETH_OFT",
      "address": "base:0x1Bc71130A0e39942a7658878169764Bbd8A45993",
      "type": "Contract",
      "sourceHashes": [
        "0x5b88f16117923c7f4563b4e10d6055894e730f41f9293ed95177d66b5aaa436c"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": ["clock", "totalIssued", "totalSupply"],
      "sinceTimestamp": 1711342433,
      "sinceBlock": 12276543,
      "values": {
        "$immutable": true,
        "$tokenData": {
          "name": "KelpDao Restaked ETH",
          "coingeckoId": "kelp-dao-restaked-eth",
          "address": "base:0x1Bc71130A0e39942a7658878169764Bbd8A45993",
          "symbol": "rsETH",
          "decimals": 18,
          "deploymentTimestamp": 1711342433,
          "coingeckoListingTimestamp": 1705017600,
          "category": "ether",
          "iconUrl": "https://coin-images.coingecko.com/coins/images/33800/large/Icon___Dark.png?1702991855",
          "chainId": 8453,
          "supply": "totalSupply",
          "source": "external",
          "bridgedUsing": {
            "bridges": [
              { "name": "Layer Zero v2 OFT", "slug": "layerzerov2oft" }
            ]
          }
        },
        "approvalRequired": false,
        "decimalConversionRate": 1000000000000,
        "decimals": 18,
        "endpoint": "base:0x1a44076050125825900e736c501f859c50fE728c",
        "msgInspector": "base:0x0000000000000000000000000000000000000000",
        "name": "KelpDao Restaked ETH",
        "oApp": "base:0x1Bc71130A0e39942a7658878169764Bbd8A45993",
        "oAppVersion": { "senderVersion": 1, "receiverVersion": 2 },
        "oftVersion": { "interfaceId": "0x02e49c2c", "version": 1 },
        "owner": "base:0x7Da95539762Dd11005889F6B72a6674A4888B56d",
        "preCrime": "base:0x0000000000000000000000000000000000000000",
        "SEND": 1,
        "SEND_AND_CALL": 2,
        "sharedDecimals": 6,
        "symbol": "rsETH",
        "token": "base:0x1Bc71130A0e39942a7658878169764Bbd8A45993",
        "totalSupply": "2452996597000000000000"
      },
      "implementationNames": {
        "base:0x1Bc71130A0e39942a7658878169764Bbd8A45993": "RSETH_OFT"
      }
    }
  ],
  "abis": {
    "base:0x1Bc71130A0e39942a7658878169764Bbd8A45993": [
      "constructor(string _name, string _symbol, address _lzEndpoint, address _delegate)",
      "error AddressEmptyCode(address target)",
      "error AddressInsufficientBalance(address account)",
      "error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)",
      "error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)",
      "error ERC20InvalidApprover(address approver)",
      "error ERC20InvalidReceiver(address receiver)",
      "error ERC20InvalidSender(address sender)",
      "error ERC20InvalidSpender(address spender)",
      "error FailedInnerCall()",
      "error InvalidDelegate()",
      "error InvalidEndpointCall()",
      "error InvalidLocalDecimals()",
      "error InvalidOptions(bytes options)",
      "error LzTokenUnavailable()",
      "error NoPeer(uint32 eid)",
      "error NotEnoughNative(uint256 msgValue)",
      "error OnlyEndpoint(address addr)",
      "error OnlyPeer(uint32 eid, bytes32 sender)",
      "error OnlySelf()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error SafeERC20FailedOperation(address token)",
      "error SimulationResult(bytes result)",
      "error SlippageExceeded(uint256 amountLD, uint256 minAmountLD)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event EnforcedOptionSet(tuple(uint32 eid, uint16 msgType, bytes options)[] _enforcedOptions)",
      "event MsgInspectorSet(address inspector)",
      "event OFTReceived(bytes32 indexed guid, uint32 srcEid, address indexed toAddress, uint256 amountReceivedLD)",
      "event OFTSent(bytes32 indexed guid, uint32 dstEid, address indexed fromAddress, uint256 amountSentLD, uint256 amountReceivedLD)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PeerSet(uint32 eid, bytes32 peer)",
      "event PreCrimeSet(address preCrimeAddress)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function SEND() view returns (uint16)",
      "function SEND_AND_CALL() view returns (uint16)",
      "function allowInitializePath(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin) view returns (bool)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approvalRequired() pure returns (bool)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function combineOptions(uint32 _eid, uint16 _msgType, bytes _extraOptions) view returns (bytes)",
      "function decimalConversionRate() view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function endpoint() view returns (address)",
      "function enforcedOptions(uint32 eid, uint16 msgType) view returns (bytes enforcedOption)",
      "function isComposeMsgSender(tuple(uint32 srcEid, bytes32 sender, uint64 nonce), bytes, address _sender) view returns (bool)",
      "function isPeer(uint32 _eid, bytes32 _peer) view returns (bool)",
      "function lzReceive(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, bytes32 _guid, bytes _message, address _executor, bytes _extraData) payable",
      "function lzReceiveAndRevert(tuple(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) origin, uint32 dstEid, address receiver, bytes32 guid, uint256 value, address executor, bytes message, bytes extraData)[] _packets) payable",
      "function lzReceiveSimulate(tuple(uint32 srcEid, bytes32 sender, uint64 nonce) _origin, bytes32 _guid, bytes _message, address _executor, bytes _extraData) payable",
      "function msgInspector() view returns (address)",
      "function name() view returns (string)",
      "function nextNonce(uint32, bytes32) view returns (uint64 nonce)",
      "function oApp() view returns (address)",
      "function oAppVersion() pure returns (uint64 senderVersion, uint64 receiverVersion)",
      "function oftVersion() pure returns (bytes4 interfaceId, uint64 version)",
      "function owner() view returns (address)",
      "function peers(uint32 eid) view returns (bytes32 peer)",
      "function preCrime() view returns (address)",
      "function quoteOFT(tuple(uint32 dstEid, bytes32 to, uint256 amountLD, uint256 minAmountLD, bytes extraOptions, bytes composeMsg, bytes oftCmd) _sendParam) view returns (tuple(uint256 minAmountLD, uint256 maxAmountLD) oftLimit, tuple(int256 feeAmountLD, string description)[] oftFeeDetails, tuple(uint256 amountSentLD, uint256 amountReceivedLD) oftReceipt)",
      "function quoteSend(tuple(uint32 dstEid, bytes32 to, uint256 amountLD, uint256 minAmountLD, bytes extraOptions, bytes composeMsg, bytes oftCmd) _sendParam, bool _payInLzToken) view returns (tuple(uint256 nativeFee, uint256 lzTokenFee) msgFee)",
      "function renounceOwnership()",
      "function send(tuple(uint32 dstEid, bytes32 to, uint256 amountLD, uint256 minAmountLD, bytes extraOptions, bytes composeMsg, bytes oftCmd) _sendParam, tuple(uint256 nativeFee, uint256 lzTokenFee) _fee, address _refundAddress) payable returns (tuple(bytes32 guid, uint64 nonce, tuple(uint256 nativeFee, uint256 lzTokenFee) fee) msgReceipt, tuple(uint256 amountSentLD, uint256 amountReceivedLD) oftReceipt)",
      "function setDelegate(address _delegate)",
      "function setEnforcedOptions(tuple(uint32 eid, uint16 msgType, bytes options)[] _enforcedOptions)",
      "function setMsgInspector(address _msgInspector)",
      "function setPeer(uint32 _eid, bytes32 _peer)",
      "function setPreCrime(address _preCrime)",
      "function sharedDecimals() pure returns (uint8)",
      "function symbol() view returns (string)",
      "function token() view returns (address)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function transferOwnership(address newOwner)"
    ]
  },
  "usedTemplates": {},
  "usedBlockNumbers": { "base": 33020590 },
  "permissionsConfigHash": "0x92da27ecd6708d675fe4d33353e209fd03e381f8a4cfe1bb7fb4c1e0c2a4369d"
}
