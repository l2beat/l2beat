{
  "name": "intmax",
  "chain": "ethereum",
  "blockNumber": 22872700,
  "configHash": "0x9392986c4bdb9357c44b8f16182fc6bc3d9796c235d9e1966d4a913e0ecdbb9d",
  "entries": [
    {
      "address": "0x00000000000000000000000000000000000E16E4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "DepositContract",
      "address": "0x00000000219ab540356cBB839Cbe05303d7705Fa",
      "type": "Contract",
      "template": "global/DepositContract",
      "sourceHashes": [
        "0x50e829416130215b875975340a7567d915ecf66f25070a50813ca972a4322191"
      ],
      "proxyType": "immutable",
      "description": "Ethereum Beacon Chain deposit contract.",
      "ignoreInWatchMode": ["get_deposit_count", "get_deposit_root"],
      "sinceTimestamp": 1602667372,
      "sinceBlock": 11052984,
      "values": {
        "$immutable": true,
        "get_deposit_count": "0x9c06210000000000",
        "get_deposit_root": "0x509576f9e7b0df4f9bf4f764dfa678f613cb31b0cfb8270fca58ce60d9d2d221"
      },
      "implementationNames": {
        "0x00000000219ab540356cBB839Cbe05303d7705Fa": "DepositContract"
      }
    },
    {
      "name": "EigenDAOperationsMultisig",
      "address": "0x002721B4790d97dC140a049936aA710152Ba92D5",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x0BAAc79acD45A023E19345c352d8a7a83C4e5656",
          "description": "can add and remove strategies",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can transfer ownership of the contract, update the metadata URI, set reward initiator and set batch confirmer",
          "role": ".owner"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x006124Ae7976137266feeBFb3F4D2BE4C073139D",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x00A5Fd09F6CeE6AE9C8b0E5e33287F7c82880505",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x0BAAc79acD45A023E19345c352d8a7a83C4e5656",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x130d8EA0052B45554e4C99079B84df292149Bd5E",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x5a3eD432f2De9645940333e4474bBAAB8cf64cf2",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x78cb05379a3b66E5227f2C1496432D7FFE794Fad",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xb2e7ef419a2A399472ae22ef5cFcCb8bE97A4B05",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xBd35a7a1CDeF403a6a99e4E8BA0974D198455030",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xD160e6C1543f562fc2B0A5bf090aED32640Ec55B",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xdb4c89956eEa6F606135E7d366322F2bDE609F15",
          "role": "admin",
          "via": [
            { "address": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x8247EF5705d3345516286B72bFE6D690197C2E99",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1744215143,
      "sinceBlock": 22232462,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "0xA3e302a6Ea0cf79B8580d94e92Eb5514292daacE",
          "0x4985238672d91Baed43dF1B2431F67bc332A1753",
          "0x1b6cC4C0670bBA2B992b82Cb8E76B286D63264c6",
          "0x403F4d4958409480502CdC78a54cE1B67263C17a",
          "0x891bbCfEF0C7504218b3156Cd0795cA5C8c7d489",
          "0x3f64654ec71d806F8d91AF285A6c34Df818E3aC3",
          "0x5D9A6573206e5205702E4caD87DC61f4C2a1Ad04"
        ],
        "$threshold": 3,
        "domainSeparator": "0x0f8eb27939d8e0595e7cc493a40b145f31803628460538623d3988094d1a63f9",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 7 (43%)",
        "nonce": 18,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "0x002721B4790d97dC140a049936aA710152Ba92D5": "SafeProxy",
        "0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "name": "StakeRegistry",
      "address": "0x006124Ae7976137266feeBFb3F4D2BE4C073139D",
      "type": "Contract",
      "template": "eigenlayer/StakeRegistry",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x249715f12cf118070103f30534be5816b6847d0b1cd8fe8cae8e1833c6afd1f8"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Keeps track of the total stake of each operator.",
      "sinceTimestamp": 1712353799,
      "sinceBlock": 19592323,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0x1C468cf7089D263c2f53e2579b329B16aBc4dd96",
        "$pastUpgrades": [
          [
            "2024-04-05T21:49:59.000Z",
            "0x67b4fa469020a02fb0ab975c67604ada64cb11cdb170d44a3108cc67a9037bad",
            ["0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9"]
          ],
          [
            "2024-04-05T21:49:59.000Z",
            "0xb72070366da1397312ab26f2128e3be250c3f9b8fa7164694e55d052f8d9f8ac",
            ["0x1C468cf7089D263c2f53e2579b329B16aBc4dd96"]
          ]
        ],
        "$upgradeCount": 2,
        "delegation": "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
        "MAX_WEIGHING_FUNCTION_LENGTH": 32,
        "quorumStrategies": {
          "0": [
            "0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0",
            "0x93c4b944D05dfe6df7645A86cd2206016c51564D",
            "0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
            "0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc",
            "0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d",
            "0x13760F50a9d7377e4F20CB8CF9e4c26586c658ff",
            "0xa4C637e0F704745D182e4D38cAb7E7485321d059",
            "0x57ba429517c3473B6d34CA9aCd56c0e735b94c02",
            "0x0Fe4F44beE93503346A3Ac9EE5A26b130a5796d6",
            "0x7CA911E83dabf90C90dD3De5411a10F1A6112184",
            "0x8CA7A5d6f3acd3A7A8bC468a8CD0FB14B6BD28b6",
            "0xAe60d8180437b5C34bB956822ac2710972584473",
            "0x298aFB19A105D59E74658C4C334Ff360BadE6dd2"
          ],
          "1": ["0xaCB55C530Acdb2849e6d4f36992Cd8c9D50ED8F7"],
          "2": ["0x6075546538c3eFbD607ea6aFC24149fCcFb2edF4"]
        },
        "registryCoordinator": "0x0BAAc79acD45A023E19345c352d8a7a83C4e5656",
        "WEIGHTING_DIVISOR": "1000000000000000000"
      },
      "fieldMeta": {
        "quorumStrategies": {
          "description": "The strategies for the first quorum (ETH)."
        }
      },
      "implementationNames": {
        "0x006124Ae7976137266feeBFb3F4D2BE4C073139D": "TransparentUpgradeableProxy",
        "0x1C468cf7089D263c2f53e2579b329B16aBc4dd96": "StakeRegistry"
      }
    },
    {
      "name": "BLSApkRegistry",
      "address": "0x00A5Fd09F6CeE6AE9C8b0E5e33287F7c82880505",
      "type": "Contract",
      "template": "eigenlayer/BLSApkRegistry",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0xb4ca65ab7fb0cd9a8fd6f0c4b7805ea96914dcb6dd65309b2557931358ad1ff3"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Keeps track of the BLS public keys of each operator and the quorum aggregated keys.",
      "sinceTimestamp": 1712353799,
      "sinceBlock": 19592323,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0x5d0B9cE2e277Daf508528E9f6Bf6314E79e4eD2b",
        "$pastUpgrades": [
          [
            "2024-04-05T21:49:59.000Z",
            "0xd0aab9a017adecfb4a605cd0c0790eaa6776e15054ddae552970406fc2320dd8",
            ["0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9"]
          ],
          [
            "2024-04-05T21:49:59.000Z",
            "0x02bfebfdc5898228aafc5da844daeea8bc9c810ee1ee17f555d46da13247f13c",
            ["0x5d0B9cE2e277Daf508528E9f6Bf6314E79e4eD2b"]
          ]
        ],
        "$upgradeCount": 2,
        "registryCoordinator": "0x0BAAc79acD45A023E19345c352d8a7a83C4e5656"
      },
      "implementationNames": {
        "0x00A5Fd09F6CeE6AE9C8b0E5e33287F7c82880505": "TransparentUpgradeableProxy",
        "0x5d0B9cE2e277Daf508528E9f6Bf6314E79e4eD2b": "BLSApkRegistry"
      }
    },
    {
      "name": "GnosisSafeL2",
      "address": "0x01422247a1d15BB4FcF91F5A077Cf25BA6460130",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0x59fe14e95a8aa7f52213f18bae5c9329cf583a7ba31194698b15eddb97d5e825"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1721888495,
      "sinceBlock": 20381739,
      "values": {
        "$immutable": false,
        "$implementation": "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA",
        "$members": [
          "0x67BB8f98DDff504204B9AF8e9C00E9C6926526e2",
          "0x8E0a538081BA1d7f41b7c594F0a2Afe7aE558494",
          "0x746d6a9f789999799AE7f5d62Aa70422F86826b6",
          "0x5082D698B9782D5f8Cb4958685f7C410A4d6fDC9",
          "0xC6CaC32CC23C2cF9BF8e0B203d677458d87556cE",
          "0x5f3B9b7CE9f1922BCc449074a83fe2187c405aCC"
        ],
        "$threshold": 2,
        "domainSeparator": "0x5a330aef9b080fae42f3186b9cfbcd55960ef78f231d5869810c052a056b169e",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 6 (33%)",
        "nonce": 36,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "0x01422247a1d15BB4FcF91F5A077Cf25BA6460130": "GnosisSafeProxy",
        "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA": "GnosisSafeL2"
      }
    },
    {
      "name": "VaultFactory",
      "address": "0x03ABEEC03BF39ac5A5C8886cF3496326d8164E1E",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0xbd0db8f57f7066f212be4d7705a4a9d24829ff2c2511dca19327e207316e4e89"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990303,
      "sinceBlock": 17416138,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x133E3cc259EaF5ddCF3684Dff62965243FbB6150",
        "$pastUpgrades": [
          [
            "2023-06-05T18:38:23.000Z",
            "0xc286498d4c20285e950f2c8d8af09c5d9dcccbb16ecaaaa9fb049339b3f1ac81",
            ["0x133E3cc259EaF5ddCF3684Dff62965243FbB6150"]
          ]
        ],
        "$upgradeCount": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "NODE_REGISTRY_CONTRACT": "0x5f937b69bc198c032799e5628d33386025c498d279cec8ad3c304e5c00bb19f6",
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "vaultProxyImplementation": "0x3517D4C433C99fD4d75A3059e176a789FF675025"
      },
      "implementationNames": {
        "0x03ABEEC03BF39ac5A5C8886cF3496326d8164E1E": "TransparentUpgradeableProxy",
        "0x133E3cc259EaF5ddCF3684Dff62965243FbB6150": "VaultFactory"
      }
    },
    {
      "name": "PermissionedPool",
      "address": "0x09134C643A6B95D342BdAf081Fa473338F066572",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x0ecafbb86412d9c1f3f9e0abe96107dce0a416140c4994d3db90658a6cd97b23"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990375,
      "sinceBlock": 17416144,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0xf393d241258164E9779972447284fC4D47C3b4d1",
        "$pastUpgrades": [
          [
            "2023-06-05T18:39:35.000Z",
            "0x819d233a8032955342ab0ddf8fb08b11347b3efb3ece7727fcd43ee6cb145eb4",
            ["0xf393d241258164E9779972447284fC4D47C3b4d1"]
          ]
        ],
        "$upgradeCount": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getCollateralETH": 0,
        "getNodeRegistry": "0xaf42d795A6D279e9DCc19DC0eE1cE3ecd4ecf5dD",
        "getSocializingPoolAddress": "0x9d4C3166c59412CEdBe7d901f5fDe41903a1d6Fc",
        "getTotalActiveValidatorCount": 3182,
        "getTotalQueuedValidatorCount": 24,
        "MAX_COMMISSION_LIMIT_BIPS": 1500,
        "operatorFee": 400,
        "preDepositValidatorCount": 3,
        "protocolFee": 600,
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB"
      },
      "implementationNames": {
        "0x09134C643A6B95D342BdAf081Fa473338F066572": "TransparentUpgradeableProxy",
        "0xf393d241258164E9779972447284fC4D47C3b4d1": "PermissionedPool"
      }
    },
    {
      "name": "RegistryCoordinator",
      "address": "0x0BAAc79acD45A023E19345c352d8a7a83C4e5656",
      "type": "Contract",
      "template": "eigenlayer/RegistryCoordinator",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x7e7c9cae80b660c369700ce034c417e93999b08e43dabd1c37a1e76599552575"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Operators register here with an AVS: The coordinator has three registries: 1) a `StakeRegistry` that keeps track of operators' stakes, 2) a `BLSApkRegistry` that keeps track of operators' BLS public keys and aggregate BLS public keys for each quorum, 3) an `IndexRegistry` that keeps track of an ordered list of operators for each quorum.",
      "ignoreInWatchMode": ["registeredOperators"],
      "sinceTimestamp": 1712353787,
      "sinceBlock": 19592322,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0x2088435ABcB1234A9427B755931C9064C93a2595",
        "$pastUpgrades": [
          [
            "2024-04-05T21:49:47.000Z",
            "0x3a9b2c12f66b0acc238c64eebdf84faee5e7539710be705584432368f1724d7f",
            ["0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9"]
          ],
          [
            "2024-04-05T21:49:59.000Z",
            "0x6a6489dbfbe688c34d924a3e86de303d3d427dc328652e931926333729f242be",
            ["0xd3e09a0c2A9A6FDf5E92aE65D3CC090A4dF8EECF"]
          ],
          [
            "2024-07-24T15:18:11.000Z",
            "0x28e327c2afc40ceec4bbc6e6a960b2f7744632a20e48da93c657bdd82c92bf5c",
            ["0xdcabf0bE991d4609096CCe316df08d091356E03F"]
          ],
          [
            "2025-05-29T22:04:35.000Z",
            "0xfa483d640a2793a223b75e6a2c6fb8f9eaa2a1c0df1e6ca69d7d332251981282",
            ["0x2088435ABcB1234A9427B755931C9064C93a2595"]
          ]
        ],
        "$upgradeCount": 4,
        "blsApkRegistry": "0x00A5Fd09F6CeE6AE9C8b0E5e33287F7c82880505",
        "churnApprover": "0xe0550117Cb066D3b330eBd764B0d75D3BA378734",
        "ejectionCooldown": 259200,
        "ejector": "0x130d8EA0052B45554e4C99079B84df292149Bd5E",
        "indexRegistry": "0xBd35a7a1CDeF403a6a99e4E8BA0974D198455030",
        "numRegistries": 3,
        "OPERATOR_CHURN_APPROVAL_TYPEHASH": "0x4d404e3276e7ac2163d8ee476afa6a41d1f68fb71f2d8b6546b24e55ce01b72a",
        "operatorSetParamsQuorum1": {
          "maxOperatorCount": 200,
          "kickBIPsOfOperatorStake": 11000,
          "kickBIPsOfTotalStake": 50
        },
        "operatorSetParamsQuorum2": {
          "maxOperatorCount": 200,
          "kickBIPsOfOperatorStake": 11000,
          "kickBIPsOfTotalStake": 50
        },
        "operatorSetParamsQuorum3": {
          "maxOperatorCount": 15,
          "kickBIPsOfOperatorStake": 11000,
          "kickBIPsOfTotalStake": 667
        },
        "owner": "0x002721B4790d97dC140a049936aA710152Ba92D5",
        "paused": 0,
        "pauserRegistry": "0x0c431C66F4dE941d089625E5B423D00707977060",
        "PUBKEY_REGISTRATION_TYPEHASH": "0x2bd82124057f0913bc3b772ce7b83e8057c1ad1f3510fc83778be20f10ec5de6",
        "quorumCount": 3,
        "registeredOperators": [
          "0x62fd7709add808809511fe2d3a230cd9cb7321cc2f47e2c35fd959d0449be8ee",
          "0x3a6f497e1db3dcc4aec8b8822f9bc3f35c8dccc361505cb308d0015c3793f567",
          "0xedebd1222578e5cd75d76c8972ab5ee7439591ee667094aea695b092484877fb",
          "0x35a645a980a13c0cb3024a5e78408ddde2b5affd306cd331ce2be9cd5968ca23",
          "0x9451e780b7a82699a8a5345caf25822345920da114581a31b412b59694f13adc",
          "0xdc9181f5b57437dcaaf3bb375cb770220dd467a179bdcab6f03e752face8d62e",
          "0x53db8d725c0ab3508a316c447486588e8ecf3f0e312e1eb660a78cc4da0435b9",
          "0xc6605b3131884ae314f8c89b4cbcf89f55765a5ccb2242596d6fa04546c4a6a4",
          "0x4af3dac73046df0094622345c6546dafd0125ac82675783c76939c70c90c3583",
          "0xa4a276a179a448bb62e32a82dafe3993b3766e4356d14d48ff4b71ac43eb510c",
          "0x571acc1fd08b9f09262d7c3bcd1f92045e6632f62c1010776baec5e71f8f0714",
          "0xdae28f1990cf3b9624990b150b9fdc900263c94398b54139807ece31cedcf02a",
          "0xf4d2e74aefcf9a4201e7fcd300f93faf1628fdf83397a950dd49c48cc5113aaf",
          "0x2b8ecfbc8ddc1cf0fd356e16eb1e4c4b36df5e35fd6fa1f5b1c36ee5b3c23cb5",
          "0x74e99d8b01a4e92c6c37961c04d1956cab258a9dd036696515961e751101b7db",
          "0x57279ee111eae047c50148a1828b367aab0de682a8b2f871773b7ceedfec0ccf",
          "0x2770a27e7c93d6eb0ae83ec2cae237cd4252ed2a3ad766be30783570d3195240",
          "0xb8da985da602277762b88bf534754cde59fc01f1dbbb780c76a2725d4e63e83d",
          "0x6f6bb4800c7f533bbbfd0887c4e0c6b5dc30c3161a07b9d93f79e7351cc76d99",
          "0x45511e592e63f31ee9d590d400a88fea67d774959e8311c60e80c5dd8007821b",
          "0x8feaa592bbd5699a73eddcfcafc7fc264f210145a0a24d63979d6be2e6a5c0c3",
          "0x9e9ac054de136666faca763435497280f286223f6d412e4ca844a7916d7d3fc2",
          "0x2c785bd766946121479e4b017d543dcb3834c895b0aba4eb06c4d005ac0c598a",
          "0xed3e75b0d95c82ef333aa13929a00b8e6c4e04c812006b21f3743c78f774992a",
          "0x7bd201d192cd84f224b5fc8fd8b3ce7ce8009021d4253d57dc44e7276fc20ae0",
          "0x527dcc8a9eac6bd0fc0312f8c20b76a57c962ba6ee6f23e3fdc5e6462542f7da",
          "0xd1f3ce9de7fe79a39702057094755e521491df04907ff89277e8d31a5b166121",
          "0xd5606d3d6ab8f66f5e03ce91f661497136715da9de0592c73101542b761c9f05",
          "0x77d378ff087228faca307142fb29c9c6b488e21749e3439e7fb2b8d7b712df7f",
          "0xb0c2ad4df99ac14cc0859092c6391b88036a8d9940adfa1e091367999c50543b",
          "0x55f105d6dfe2844e16072e5e2b41e98c58629d170019dfab872b9f4edd31c8e1",
          "0x8c116c11dd8d60869c764125e296cb1d748dc0faf65010403e2df0b051de267f",
          "0xfdaa0fe4307b2e9f18c1211f08ba2613a2ec3002eaad3e2d61f87b9cb25e305d",
          "0x495069623e95f02bcc9e1d2b3648723d7f41ea7d675d7627e1bf5a61016f4836",
          "0xf5cb5ed8b9977a41406e89704eb1e0d06cad740a6cde74857036f17e0a01b4a9",
          "0x4e69818bbb7112a75a417a8da67ba346b541bc18a4fcd78897cf0d20d5573f14",
          "0xb1466ebd795b92cdd28a91fda29fc81ddbb10d46e2a29c1bec4be99431dbcf1d",
          "0x0496a1c5a3f9d2350177e1d3fc810b61acfcfd24e1d40e1d716524fd379e858a",
          "0x298a5d7f39ddadc4ea6ec53dfe8f53da3bcb79f78959d6f0b052db493af7a750",
          "0x3de65d5688bab111480ec6fbc980b0de1bdda1c812df51db1e3c677f085553a7",
          "0x3a552b77ef1900fb007ad48c8d3c350381872ed1364a590b34ac3ce717c1fe8d",
          "0xc9b5d442ddc595b864aa084df07b9916eb8f0cdd5db35b3bb31ee0d92f3f87a7",
          "0x9f38709f446fcd85a0a1909aa45a6ef8efcdbf85df20073e598db86e566ea2ea",
          "0x0955e7dff023cbc1818fb1439e69caf4647d504851f58ed09552eae3393e58a1",
          "0x475ca3b08b5861bb0f8e49ebc14775847cf531c6c16a1473d4610d6f609f179c",
          "0xb5dd0e179a31ff0dcd1db1362118aab11586e8e42c713e154295a9effa4ab738",
          "0x1d4a7b4c590e8caae1f8e026fffe978b77e1dd3c4cd238951b0753fc724fb6d0",
          "0xaa2854f59d446537e7b349ca80646985c4bc296ee0a6ef4ae2e7ce2cfc6476e2",
          "0xc69ab28996c80f2e5cb7016ab8f3f8bf029d8135646b645813020da86f432bcf",
          "0x866c3fdff1b88bb54fb06b8eb5d6222fa0389cd008471a141334aed0eb171878",
          "0xc7800d34420e0bfdb5db29ea545899f1ec5e9a03aab96506aaf6d8724ba8c915",
          "0xf84c9f0d23474947e24701dbc71c1247d7c90b146219cfef6231402cf454c14c",
          "0x80dd3e365a5a50175acbb28eb1f931b1369d50e76560adb038baff9d30bf334a",
          "0x14757e958213cdbf483e550491aa16c7446eaf64ac2894e33c823a60e9045f0a",
          "0x11120449cb50d85ed6e420a0a94dc8eecfc3da3ce9de99ef46dc0ee0e9f0669a",
          "0x7a56a2226e44d5e4a2194d23f492a418bee9a3088e7809a239838b81c8a1a8d7",
          "0x8d4e5576c75115b4f0206d4af8bcbf5fb807607b9ad204a0884ad269981132f3",
          "0x3278d7a1fc5f9f6a342007f6efd5fba9f8713169ed4c448f39884925422552f7",
          "0x7020be1384be2be43386e97a3b5b332027a86df13dd684a5b2c6f109b560e0af",
          "0x0058fc08ccd6efbfa1b28be52f2f97a34e2168217f144bbb680a537d2ca18111",
          "0x42162fbd59503a09b5709d0e612b824cd12f92fa577ea993fd67e797df19415c",
          "0x0ceb3306c4166f83984b224c6046136f85df1bcb09da0605a5131736d5e40a77",
          "0x607bfc20f482482ff1a1585e2d1296146cce65cef0fa271eecba591de650576e",
          "0x2d92999b9b651916f60c7d28934b9b91d9c43c7a4474861340ccc09cadc29750",
          "0x61a037630ed03eba219a0c1b99e744f25072c3ec2040d50091664182b1feee43",
          "0xd0ee55b8e193f2dc21c140d4212079a5b78c3df1ac953f7d4f0dd7ed3c7316d6",
          "0x9e6f62da5509519a81e7ce9549000fa7991483cb9053221968351252b70a1fb9",
          "0x3e004bd28aa1b94a6f7a19d48007bb8211d9f7edb4a655653d8db5e1784fd76d",
          "0x3f6034d69a0aca29b330208a3946345f238844578025d459262ce882bec85ed9",
          "0xab8f5fb53d5b1a01f560a22700bc55f71807b21523a25ff674837245dab433a8",
          "0x6bcf80c24889dce79c2b7c281d9e9a116df2e31b38066875709f44261919b086",
          "0xcffa72ad95f4b22f0b12c07e366fc907973a362e59408f2cf4c9cf64afcf4b59",
          "0x59cda9c6e1af517f006af4e9f8dc5777e98e8b56a00cc4a6fae1df481c9e6522",
          "0x1c9b842872d119a38569314f96152c019f31f97f4f11b9b8f20331c7ff693e40",
          "0x2e2ee953aa3c2a499640270eaaf2ba1973265f7e0d0b1e0ebef6ead13fcce307",
          "0x32293d3ad6447b8c67a1f02ff0bfae0e73ec4d442842cd816e9395b0e370858c",
          "0x05532d1781804b53a8614009f79ced98a4474294984d19e793780a3b8c286a98",
          "0x29ef6b67feaaa31f210c9a7b8ef073a3fb35eeb5f6fe063f5e75247b884abd0a",
          "0xe00658029de46cca6f8cc46d3cfcbb24e633b6014a642907fe2e484148224e42",
          "0xd1bfc317efb9f0d3ae5a0bd8c3a6c1948d10e63cebd06250aa7d2d20fec2f851",
          "0x3b874990e71ab573e41e7807e8c884700858af957cb72c728369aaf7b1b7ef94",
          "0x4104842f50e49ad930345cd0c3620b615730315b983118d55ddb256fb97ab0d8",
          "0x2e8be17a9566a25a30c37aaaa57a870a922d9713833cd401a0d59d9e67fa9dcc",
          "0x6b9d91f76e2c7d4fa17b0c498144cc857b43c1488f6f7a0cc7ed4a5f4c1fed5a",
          "0xea61fbbb7f1348ee997d00f89fa83c92ede1d2f2b4962b30e29e46ca39b40e35",
          "0x832c0fae231eb044c5f7ceb2f72a77caef174f46e60c8c257aab5160603b05b3",
          "0x13cb0150a640902f3d32e152e340384441e1c0bcfd3b34cf17b3f76c6030ab82",
          "0xfcc1afb1aadb7986d6482feb6cf5542fcca50d8bc92bf5e481a94d27374d24e2",
          "0x903031a70695f8c94aed1a36044804a65be3da21523663c5e44d95bce12bb261",
          "0x5d1b4cf5cb2b91e53f4f9bcf8caec3555d2470c1d525423cafe86f5e66f56c24",
          "0x4234c98d060d30258d25732fa8f252686dddda8758ccd6e3fe1fc82f4b97f6b5",
          "0x01d0d6d4276a88ba70ae6ef384288f846bab6d311716a4147111c7cf486b38c9",
          "0xdc504cf506e8b0562bf55d13e75704869c2e80b2c17ce834840e7baaf1ffed7a",
          "0xbdd732ea30885f35952cc61fb2fa054a2bad17bc86626ef2abd0e26aab36442e",
          "0x40ade5577b77152036616d1655f9127a6ae08cd8234c1043e08626f59bf8065f",
          "0x960dc057a3b0c24385c25845f5eebe1fafcc4739a94351b4550cb0d0e53d3655",
          "0x43dda608c71270a62bb2ef064f4866902da95538e2d98d20be1a9b2a8142f2dd",
          "0xfcaffb0c80a3202d233f2b2b037a17528706afb73b1ac21194b3708177c8f301",
          "0xc0cfa2a72cc4eb8e33a6a76fb2a5e4c89b5dc28151a0e072cdbb509abdfb7d82",
          "0xd91c7c8888da9062e48e92d20813dfa8ce7f581d327b36237040354c5159db0e",
          "0x442a057849f7fa68f8c34dc8b9475c6f8e50ee48b1f7e83e0229833761a7d6e3",
          "0x0829918a46aff7252363b23e89864ad2c81effad8c6f877e53ecd30b5192e2dc",
          "0xa7c993401ecdaacd73e1db1bc2072602f12a88c59f3ea03b138d9589bc5cd900",
          "0x57309111be2293fbcfd77e8479a4f2570f8956aae8cd2ba3bcc0c58d65823fcb",
          "0x8758fc175c5617a10d5c8c432d3c61dea5aef3a949d3ffcf259a35daa4921871",
          "0x0bab77e7b94af273411482782c1999adfc91b7d76af43eb60b4802278b8204d0",
          "0x12bbc1398d50485699592d0d1c05bc358714095a1d4d9971becfa9f1b48806b2",
          "0x0caff7e91769a74c203b21a099a9095df26726a888c8ae50ec29c661a698d5d5",
          "0xb2b2fd3feebc12a678f120f4b24c0c67b14185d26424598123e256be0ac40c23",
          "0x1d32e0504112b36c7a6a366f240377b60afea521d5395183530ae19c200e3d65",
          "0x7006189839df958671661d84cedb0e276a8789df594cff325d6ace5bb2ae3245",
          "0x1c110f1cd7a151472377c5576c61825dec9d057ab1d188fe02b77900ab890424",
          "0xafa52dc954a63d64a5f5226cc23a879200a4eb72dcddc260dc6c5a8856f542b6",
          "0x464b61c015e525b442183ad5937f63d3757ec4503323f50f4df568dcb30abbb7",
          "0x8482ab441df56bd6332c29b019b37eb8810cda09a7011316f9d8f1448a77b52b",
          "0xab5716b1b46c8c1d6eef9e2ba828f33fbbee735966f0d0e449c77727808154ba",
          "0xe5f9b527a2b5ace562d7ad9e3e8ed8baa162ae5bd92ea66cdf7215c6b1b19759",
          "0xfc21b74985e0e61048bc1b2ac0ae1ed161df79c844f622d1d196bc0e9c4b1ae6",
          "0xe8f5cbf6ef8179b14b6378206d1006a38d9f749351955d4738cd515aa8559e5e",
          "0x2aa77dfcccd51126c0affefa1235a2c53905fe864fccfd93ffe4d8d4f8912a8a",
          "0x1147eac85c25bdcb35a3818f2fa98f753458208db9d7ec0753af3f0feaba49a3",
          "0xb523e0b4efdc2c267da48e837e419fda92085151dea3d59834da2dc153dc157c",
          "0x155ffb09581c003557d6614d7764b3a594a9a689ca705ec6ea5e9dcf29ea9e56",
          "0x3bada6b94153d886dd48ea93946e83779a9e338cdd138b81106584a94ef6b247",
          "0x4825931d12cb01526583db450d5d10fa99f02b12ceec5eedef81de95d0f4abd4"
        ],
        "registries": [
          "0x006124Ae7976137266feeBFb3F4D2BE4C073139D",
          "0x00A5Fd09F6CeE6AE9C8b0E5e33287F7c82880505",
          "0xBd35a7a1CDeF403a6a99e4E8BA0974D198455030"
        ],
        "serviceManager": "0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
        "socketRegistry": "0x5a3eD432f2De9645940333e4474bBAAB8cf64cf2",
        "stakeRegistry": "0x006124Ae7976137266feeBFb3F4D2BE4C073139D"
      },
      "fieldMeta": {
        "operatorSetParamsQuorum1": {
          "description": "0_maxOperatorCount, 1_kickBIPsOfOperatorStake, 2_kickBIPsOfTotalStake"
        },
        "operatorSetParamsQuorum2": {
          "description": "0_maxOperatorCount, 1_kickBIPsOfOperatorStake, 2_kickBIPsOfTotalStake"
        },
        "operatorSetParamsQuorum3": {
          "description": "0_maxOperatorCount, 1_kickBIPsOfOperatorStake, 2_kickBIPsOfTotalStake"
        },
        "quorumCount": {
          "severity": "HIGH",
          "description": "if quorum count changes, makes sure the new quorum parameters are tracked in the config",
          "type": "RISK_PARAMETER"
        },
        "registeredOperators": {
          "description": "List of all registered operators ids"
        },
        "ejectionCooldown": {
          "severity": "HIGH",
          "description": "The time in seconds that an operator must wait before being able to re-register after being ejected.",
          "type": "RISK_PARAMETER"
        }
      },
      "implementationNames": {
        "0x0BAAc79acD45A023E19345c352d8a7a83C4e5656": "TransparentUpgradeableProxy",
        "0x2088435ABcB1234A9427B755931C9064C93a2595": "RegistryCoordinator"
      }
    },
    {
      "name": "PauserRegistry",
      "address": "0x0c431C66F4dE941d089625E5B423D00707977060",
      "type": "Contract",
      "template": "eigenlayer/EigenDAPauserRegistry",
      "sourceHashes": [
        "0x3b8d61b335423f5ba47369c8a865fa7f3296ba457e10069b0b9c46bcb03aa1e8"
      ],
      "proxyType": "immutable",
      "description": "Defines and stores pauser and unpauser roles for EigenDA contracts.",
      "directlyReceivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry"
        }
      ],
      "sinceTimestamp": 1686348935,
      "sinceBlock": 17445563,
      "values": {
        "$immutable": true,
        "pausers": [
          "0xBE1685C81aA44FF9FB319dD389addd9374383e90",
          "0x5050389572f2d220ad927CcbeA0D406831012390",
          "0x369e6F597e22EaB55fFb173C6d9cD234BD699111"
        ],
        "unpauser": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111"
      },
      "implementationNames": {
        "0x0c431C66F4dE941d089625E5B423D00707977060": "PauserRegistry"
      }
    },
    {
      "name": "ValidatorsExitBusOracle",
      "address": "0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e",
      "type": "Contract",
      "template": "tokens/Lido/ValidatorsExitBusOracle",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0xba2e8ff1fb232454e73ee740f5c151763047d29a9c660b33be8926930334a768"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": [
        "getConsensusReport",
        "getProcessingState",
        "getResumeSinceTimestamp",
        "getTotalRequestsProcessed"
      ],
      "sinceTimestamp": 1683024035,
      "sinceBlock": 17172556,
      "values": {
        "$admin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "0xA89Ea51FddE660f67d1850e03C9c9862d33Bc42c",
        "$pastUpgrades": [
          [
            "2023-05-02T10:40:35.000Z",
            "0xef3eea1523d2161c2f36ba61e327e3520231614c055b8a88c7f5928d18e423ea",
            ["0x6F6541C2203196fEeDd14CD2C09550dA1CbEDa31"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["0xA89Ea51FddE660f67d1850e03C9c9862d33Bc42c"]
          ]
        ],
        "$upgradeCount": 2,
        "DATA_FORMAT_LIST": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "GENESIS_TIME": 1606824023,
        "getConsensusContract": "0x7FaDB6358950c5fAA66Cb5EB8eE5147De3df355a",
        "getConsensusReport": {
          "hash": "0x545dde2eb23a84d1d3ad84b51ce686a4dfcfa01631f0f759e6988c8f0eb38eaf",
          "refSlot": 12093599,
          "processingDeadlineTime": 1751976011,
          "processingStarted": true
        },
        "getConsensusVersion": 3,
        "getContractVersion": 1,
        "getProcessingState": {
          "currentFrameRefSlot": 12093599,
          "processingDeadlineTime": 1751976011,
          "dataHash": "0x545dde2eb23a84d1d3ad84b51ce686a4dfcfa01631f0f759e6988c8f0eb38eaf",
          "dataSubmitted": true,
          "dataFormat": 1,
          "requestsCount": 0,
          "requestsSubmitted": 0
        },
        "getResumeSinceTimestamp": 1684163759,
        "getTotalRequestsProcessed": 93542,
        "isPaused": false,
        "MANAGE_CONSENSUS_CONTRACT_ROLE": "0x04a0afbbd09d5ad397fc858789da4f8edd59f5ca5098d70faa490babee945c3b",
        "MANAGE_CONSENSUS_VERSION_ROLE": "0xc31b1e4b732c5173dc51d519dfa432bad95550ecc4b0f9a61c2a558a2a8e4341",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxy__getAdmin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "0xA89Ea51FddE660f67d1850e03C9c9862d33Bc42c",
        "proxy__getIsOssified": false,
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "SECONDS_PER_SLOT": 12,
        "SUBMIT_DATA_ROLE": "0x65fa0c17458517c727737e4153dd477fa3e328cf706640b0f68b1a285c5990da"
      },
      "implementationNames": {
        "0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e": "OssifiableProxy",
        "0xA89Ea51FddE660f67d1850e03C9c9862d33Bc42c": "ValidatorsExitBusOracle"
      }
    },
    {
      "name": "UpgradeableBeacon",
      "address": "0x0ed6703C298d28aE0878d1b28e88cA87F9662fE9",
      "type": "Contract",
      "template": "eigenlayer/StrategiesBeacon",
      "sourceHashes": [
        "0x8ccc6002eb6665381c95bfbb12e2ef5edee25f5e9d381c1938e9e96ac89c0313"
      ],
      "proxyType": "immutable",
      "description": "UpgradeableBeacon managing the single implementation for all strategies deployed via StrategyFactory.",
      "sinceTimestamp": 1723232219,
      "sinceBlock": 20493176,
      "values": {
        "$immutable": true,
        "implementation": "0x0EC17ef9c00F360DB28CA8008684a4796b11E456",
        "owner": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111"
      },
      "implementationNames": {
        "0x0ed6703C298d28aE0878d1b28e88cA87F9662fE9": "UpgradeableBeacon"
      }
    },
    {
      "name": "TimelockController",
      "address": "0x1112D5C55670Cb5144BF36114C20a122908068B9",
      "type": "Contract",
      "sourceHashes": [
        "0x1cf2a567f0dfcae3ac31fabbc74c453ddb5a347a26f76dbc26fc2171094a9153"
      ],
      "proxyType": "immutable",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x03ABEEC03BF39ac5A5C8886cF3496326d8164E1E",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x09134C643A6B95D342BdAf081Fa473338F066572",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x1DE458031bFbe5689deD5A8b9ed57e1E79EaB2A4",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x4f4Bfa0861F62309934a5551E0B2541Ee82fdcF1",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x62e0b431990Ea128fe685E764FB04e7d604603B0",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x7Af4730cc8EbAd1a050dcad5c03c33D2793EE91f",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x84645f1B80475992Df2C65c28bE6688d15dc6ED6",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x84ffDC9De310144D889540A49052F6d1AdB2C335",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x85A22763f94D703d2ee39E9374616ae4C1612569",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x9d4C3166c59412CEdBe7d901f5fDe41903a1d6Fc",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x9F0491B32DBce587c50c4C43AB303b06478193A7",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xaf42d795A6D279e9DCc19DC0eE1cE3ecd4ecf5dD",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xbe3781CE437Cc3fC8c8167913B4d462347D11F20",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xcf5EA1b38380f6aF39068375516Daf40Ed70D299",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xd1a72Bd052e0d65B7c26D3dd97A98B74AcbBb6c5",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xe225825bcf20F39E2F2e2170412a3247D83492D0",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xED6EE5049f643289ad52411E9aDeC698D04a9602",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xeDA89ed8F89D786D816F8E14CF8d2F90c6BF763f",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xF64bAe65f6f2a5277571143A24FaaFDFC0C2a737",
          "role": "admin",
          "via": [
            { "address": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
          "role": ".owner"
        }
      ],
      "sinceTimestamp": 1685943395,
      "sinceBlock": 17412294,
      "values": {
        "$immutable": true,
        "CANCELLER_ROLE": "0xfd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
        "getMinDelay": 604800,
        "PROPOSER_ROLE": "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
        "TIMELOCK_ADMIN_ROLE": "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
      },
      "implementationNames": {
        "0x1112D5C55670Cb5144BF36114C20a122908068B9": "TimelockController"
      }
    },
    {
      "name": "PredicatePermitter",
      "address": "0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E",
      "type": "Contract",
      "sourceHashes": [
        "0xbbe53a68c0042f4050bdf21e8d16eee4688dd35d24e49740915f0a0cf994f0d6",
        "0xa18a357397dde9746d412ff4a4546bc85d954de9f122809482a88b62eeb314be"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1750501451,
      "sinceBlock": 22752223,
      "values": {
        "$admin": "0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea",
        "$implementation": "0xef082Ff43805B93Ed375Fd47A964Fe136cCB9021",
        "$pastUpgrades": [
          [
            "2025-06-21T10:24:11.000Z",
            "0x1171a710716e4ea09dd241bd14fad955a99e5bc2dc7662530f1b25c3b4f1020f",
            ["0xef082Ff43805B93Ed375Fd47A964Fe136cCB9021"]
          ]
        ],
        "$upgradeCount": 1,
        "getPolicy": "x-intmax-42efa3d6c0609ea6",
        "getPredicateManager": "0xf6f4A30EeF7cf51Ed4Ee1415fB3bFDAf3694B0d2",
        "liquidity": "0xF65e73aAc9182e353600a916a6c7681F810f79C3",
        "owner": "0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "errors": { "proxiableUUID": "Processing error occurred." },
      "implementationNames": {
        "0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E": "ERC1967Proxy",
        "0xef082Ff43805B93Ed375Fd47A964Fe136cCB9021": "PredicatePermitter"
      }
    },
    {
      "name": "EjectionManager",
      "address": "0x130d8EA0052B45554e4C99079B84df292149Bd5E",
      "type": "Contract",
      "template": "eigenlayer/EjectionManager",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x94a826fe3f9609e445cfd3cd6d7d9709c559367e9cb49a9b6d7952cd3a116cd0"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract used for ejection of operators from the RegistryCoordinator for violating the Service Legal Agreement (SLA).",
      "sinceTimestamp": 1715347895,
      "sinceBlock": 19839949,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0xC125fECDDabFe13f29EB287Bb8551892AEE7C98A",
        "$pastUpgrades": [
          [
            "2024-05-10T13:31:35.000Z",
            "0xb9f7f80114bf8e8fa3092fb298aa8aae1bccbb04b36516667396b5b12a6a23e0",
            ["0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9"]
          ],
          [
            "2024-05-10T13:31:35.000Z",
            "0xd04d3d0dbf04adf100c0edbe832d60786758b828ce9073e205b8ab3675864d32",
            ["0x1A27AC48D40F70213Ae6ec64f66852e0A1a0E6fa"]
          ],
          [
            "2024-08-07T15:52:47.000Z",
            "0x7dcee857c6f42698dd0db59a3032770cdffa8607b6902fee32f3d498991df44a",
            ["0x33A517608999DF5CEfFa2b2EbA88B4461c26Af6f"]
          ],
          [
            "2025-05-29T22:04:35.000Z",
            "0xfa483d640a2793a223b75e6a2c6fb8f9eaa2a1c0df1e6ca69d7d332251981282",
            ["0xC125fECDDabFe13f29EB287Bb8551892AEE7C98A"]
          ]
        ],
        "$upgradeCount": 4,
        "ejectableStakePercent": [3333],
        "ejectionRateLimitWindow": [604800, 259200],
        "ejectors": [
          "0xD2Ee81Cf07B12140C793FcE5B26313CDd9d78eA8",
          "0x8642473a123FE33b0aaE90bD8604eA1029417236",
          "0x338477FfaF63c04AC06048787f910671eC914B34"
        ],
        "owner": "0x002721B4790d97dC140a049936aA710152Ba92D5",
        "registryCoordinator": "0x0BAAc79acD45A023E19345c352d8a7a83C4e5656",
        "stakeRegistry": "0x006124Ae7976137266feeBFb3F4D2BE4C073139D"
      },
      "fieldMeta": {
        "ejectionRateLimitWindow": {
          "description": "Time delta to track ejection over. Cannot eject more than ejectableStakePercent of total stake in this time delta."
        },
        "ejectableStakePercent": {
          "description": "Max stake to be ejectable per time delta."
        }
      },
      "implementationNames": {
        "0x130d8EA0052B45554e4C99079B84df292149Bd5E": "TransparentUpgradeableProxy",
        "0xC125fECDDabFe13f29EB287Bb8551892AEE7C98A": "EjectionManager"
      }
    },
    {
      "name": "AVSDirectory",
      "address": "0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF",
      "type": "Contract",
      "template": "eigenlayer/AVSDirectory",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x9d891889c1fcc1bd08979780a1502190faf4e8230d94e47de322da41bf7e5143"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["avs"],
      "sinceTimestamp": 1711141931,
      "sinceBlock": 19492759,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0xA396D855D70e1A1ec1A0199ADB9845096683B6A2",
        "$pastUpgrades": [
          [
            "2024-03-22T21:12:11.000Z",
            "0x40573c645ceaa15139d3fe9a736ff5cc230ccb1c11961dcd9a3152d990c1fb71",
            ["0xdAbdB3Cd346B7D5F5779b0B614EdE1CC9DcBA5b7"]
          ],
          [
            "2025-04-17T22:30:11.000Z",
            "0xf5cdad33da1d1a2f3a9b315ed67eab912df6e23fa98b4561f42ae1b4f5594ba2",
            ["0xA396D855D70e1A1ec1A0199ADB9845096683B6A2"]
          ]
        ],
        "$upgradeCount": 2,
        "avs": [
          "0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "0xD25c2c5802198CB8541987b73A8db4c9BCaE5cC7",
          "0x9FC952BdCbB7Daca7d420fA55b942405B073A89d",
          "0x71a77037870169d47aad6c2C9360861A4C0df2bF",
          "0x6026b61bDD2252160691CB3F6005B6B72E0Ec044",
          "0x35F4f28A8d3Ff20EEd10e087e8F96Ea2641E6AA2",
          "0x23221c5bB90C7c57ecc1E75513e2E4257673F0ef",
          "0xed2f4d90b073128ae6769a9A8D51547B1Df766C8",
          "0xE5445838C475A2980e6a88054ff1514230b83aEb",
          "0xd50E0931703302B080880C45148F5D83ea66aE2a",
          "0xF7fcff55d5FDAf2C3Bbeb140Be5e62a2c7D26Db3",
          "0xB6827E919b55B45290cf54F006EE4a231e06F088",
          "0x1DE75EaAb2df55d467494A172652579E6FA4540E",
          "0x07E26BF8060e33fA3771d88128b75493750515c1",
          "0x1F2c296448f692af840843d993fFC0546619Dcdb",
          "0x22CAc0e6A1465F043428e8AeF737b3cb09D0eEDa",
          "0xe8E59c6C8B56F2c178f63BCFC4ce5e5e2359c8fc",
          "0xb3AcAF09a1B801E36655B786da4EAA6aE9F5DC37",
          "0x18343Aa10e3D2F3A861e5649627324aEAD987Adf",
          "0xCE06c5fe42d22fF827A519396583Fd9f5176E3D3",
          "0xE7D0894Ac9266f5cbe8f8E750aC6cbe128FbbeB7",
          "0x84AdF221Af49E67DB62C5B16d86aFcaD2eF0b262",
          "0xb19f05CDc5EF266766AC1287A1EeF29283058773",
          "0x2d86E90ED40a034C753931eE31b1bD5E1970113d",
          "0x75195699F659ed67083691c2C48F23d0B907b559",
          "0xA5bD40e5406CB2d2440Db1D1bcF9dfD022B6C124",
          "0x8EF368e31cd0b51941bf85bC11D8C71589489Fe4",
          "0xd75c834B09ec626992Ff3Ce388AE7115791Fb282",
          "0xaCB91045B8bBa06f9026e1A30855B6C4A1c5BaC6",
          "0x83742C346E9f305dcA94e20915aB49A483d33f3E",
          "0xd6B9B1B29A30127fb99e1201E91a3e021658E9fb",
          "0xe008064DF9f019d0BFF0735fe6887d70b23825Ca",
          "0xb73a87E8F7f9129816d40940Ca19DFa396944C71",
          "0xFC569B3b74e15cf48AA684144e072e839Fd89380",
          "0xF75Bc9850F4C44E682537C477c4Bb08f71f695Da",
          "0xd6967ed3910C18E3546ABC1A67c61E75e2633fD9",
          "0xB3e069FD6dDA251AcBDE09eDa547e0AB207016ee",
          "0xA95Efd0CeFd326ff8eb5cFa8F0370CF7ED471D18",
          "0xa3F64D3102a035db35c42A9001BBc83e08c7a366",
          "0x461591A7e68906eDBcD643E010A7e1AE3B023c6d",
          "0xBc77233855e3274E1903771675Eb71E602D9DC2e",
          "0xeF2A435e5EE44B2041100EF8cbC8ae035166606c",
          "0x3aDdEb54ddd43Eb40235eC32DfA7928F28A44bb5",
          "0x852dD23aE808A20C48D7b7b03D23C3F5360928e1",
          "0xf6f4A30EeF7cf51Ed4Ee1415fB3bFDAf3694B0d2",
          "0x29B2E51d2bF840116797F8A27e40c05aE3e244D9",
          "0xcA5608C29f13B813Ee6999a6686bea850bcdf36F",
          "0x045fC77EdAf8F9252577b2805D7F26f113848520",
          "0x466745F7c06fBBab48af7b64E9E9bea249fD6Ee5",
          "0x7a49D7101a969eE8Ba68b5Ed4aF42E03Fa40B1eA",
          "0xB3e9F71637f0089F81dAeb3b6999d391F13736Dd",
          "0x44577f44D2A131c8033663996636d00Ce1F46808",
          "0xb6EC8E5c6dB00089737Bd9637cFF76bD8Bbe0474",
          "0x42F15F9E4dF4994317453477e80e24797CC1A929",
          "0x35DebC00531Ac8771be5dbEf015feFD084efA958",
          "0x6201bc0A699e3b10f324204e6F8EcdD0983De227",
          "0x6f943318b05AD7c6EE596A220510A6D64B518dd8",
          "0x0328635BA5FF28476118595234b5b7236b906c0B",
          "0x10Ea82DdCE695dc44789633D362179B63CD18E64",
          "0xC9E94BF890c9b4F11685d576bC65B08e0E87556F",
          "0x4ca852BD78D9B7295874A7D223023Bff011b7EB3",
          "0x328c822874991C31DdF400CD8388027Af66270A8",
          "0x500C4E641b5d61026f26148Ab9363EB3241C08f3",
          "0x05006D61cA5fE53DF316802f3aC91973d4B95F99",
          "0x96b6a29D7B98519Ae66E6398BD27A76B30a5dC3f",
          "0x203b9Acb40DfBB911f1e39C784EAB639418dae04",
          "0x5Bf17dFaA1B76Bb6C5C47F568636877F94C09b65",
          "0x506D3bDef8C9E671928F1ffF135E0e0642B59AA4",
          "0x5b4AD76a6a2F4a0A8C7CBf499e6533B57da2eF2d",
          "0x1d32272FfdA06e9EDE3CA854D8D9AaAe8328d795",
          "0x47806C11CA33BE2360bb2A5891C5D0D1BaFBE7Dc",
          "0x902038d2D5278dd6504C135FFA49bf635D475f7e",
          "0xcF20a2c0065a8b2888c1702fe7885952ae523Aa2",
          "0x15f4314d4c5da6e36eC40b3BC2A279685F0d84b2",
          "0x9110e4e9e561514dE3be844D6fF9eF7cAcE65415",
          "0xd314209cE0ae9aDfD7643BB9d8becD62290D826a"
        ],
        "delegation": "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
        "domainSeparator": "0xa376b8f73e544301999d5aabb44e4d306777f6f0f08bf031c1c4bbc027313aeb",
        "OPERATOR_AVS_REGISTRATION_TYPEHASH": "0xda2c89bafdd34776a2b8bb9c83c82f419e20cc8c67207f70edd58249b92661bd",
        "OPERATOR_SET_FORCE_DEREGISTRATION_TYPEHASH": "0x4ee65f64218c67b68da66fd0db16560040a6b973290b9e71912d661ee53fe495",
        "OPERATOR_SET_REGISTRATION_TYPEHASH": "0x809c5ac049c45b7a7f050a20f00c16cf63797efbf8b1eb8d749fdfa39ff8f929",
        "owner": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "version": "1.3.0"
      },
      "implementationNames": {
        "0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF": "TransparentUpgradeableProxy",
        "0xA396D855D70e1A1ec1A0199ADB9845096683B6A2": "AVSDirectory"
      }
    },
    {
      "address": "0x16f4BFeb925e748ef4Af8ce96E48d4B78Ec9da47",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "EigenLayerRewardsInitiatorMultisig",
      "address": "0x178eeeA9E0928dA2153A1d7951FBe30CF8371b8A",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can create rewards submissions.",
          "role": ".rewardsInitiator"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1721762183,
      "sinceBlock": 20371264,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x55688D9211bC00BA573A1e0672e5de050818a360",
          "0x68bbBD6c18B0bc1B563489A13a398345E9da23d0",
          "0x2bBA03bA38D90634e6afD8C23C16ca01651bc493",
          "0xf20eD26be203f09B8F0Cb3265E74BB6AD24408b4",
          "0xca3E83c0e41A1f27b9f832F4fcE22e79Cffecfc7"
        ],
        "$threshold": 3,
        "domainSeparator": "0x6b43785a4eaebc9e965616031ecf6185396cf6e42ef9b1892cca81fe3a655fc2",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 5 (60%)",
        "nonce": 17,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "0x178eeeA9E0928dA2153A1d7951FBe30CF8371b8A": "GnosisSafeProxy",
        "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "address": "0x17919FAC7024d5b770322E5Cb81607D247654116",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x1b6cC4C0670bBA2B992b82Cb8E76B286D63264c6",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "StrategyBaseTVLLimits",
      "address": "0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
      "type": "Contract",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0xeeae2315884914d515d0026a50d7322f8d8d513c643f4ec7cf5b3c1302d04ba7"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1686349019,
      "sinceBlock": 17445570,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178",
        "$pastUpgrades": [
          [
            "2023-06-09T22:16:59.000Z",
            "0xc48ef66054da437f0a7eed4315c5b3f3029f6ebc85ded6d0891272f8f100bc26",
            ["0xdfdA04f980bE6A64E3607c95Ca26012Ab9aA46d3"]
          ],
          [
            "2025-04-17T22:30:11.000Z",
            "0xf5cdad33da1d1a2f3a9b315ed67eab912df6e23fa98b4561f42ae1b4f5594ba2",
            ["0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178"]
          ]
        ],
        "$upgradeCount": 2,
        "explanation": "Base Strategy implementation to inherit from for more complex implementations",
        "getTVLLimits": [
          "115792089237316195423570985008687907853269984665640564039457584007913129639935",
          "115792089237316195423570985008687907853269984665640564039457584007913129639935"
        ],
        "maxPerDeposit": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "maxTotalDeposits": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "sharesToUnderlying": [0, 1, 2, 3, 4],
        "sharesToUnderlyingView": [0, 1, 2, 3, 4],
        "strategyManager": "0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
        "totalShares": "12771344505272947144589",
        "underlyingToken": "0xae78736Cd615f374D3085123A210448E74Fc6393",
        "underlyingToShares": [0, 0, 1, 2, 3],
        "underlyingToSharesView": [0, 0, 1, 2, 3],
        "version": "1.3.0"
      },
      "errors": {
        "sharesToUnderlying": "Processing error occurred.",
        "sharesToUnderlyingView": "Processing error occurred.",
        "underlyingToShares": "Processing error occurred.",
        "underlyingToSharesView": "Processing error occurred."
      },
      "implementationNames": {
        "0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2": "TransparentUpgradeableProxy",
        "0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178": "StrategyBaseTVLLimits"
      }
    },
    {
      "name": "SocializingPool",
      "address": "0x1DE458031bFbe5689deD5A8b9ed57e1E79EaB2A4",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x170a2e2d9caa7e02c993a4fdf4c7577936df6bad137f76374298ce5f8bbb9c5b"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990447,
      "sinceBlock": 17416150,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0xCC0DAB27C23599cD7D2b7a04edF0730F8B2509a7",
        "$pastUpgrades": [
          [
            "2023-06-05T18:40:47.000Z",
            "0x122fa0d674f5caf3627394d7878cfce5b74bfbe9e0c16836588aeca3163caf49",
            ["0xE87D8f52B730DB026ED1b0F15a2BD6380BD6b057"]
          ],
          [
            "2023-06-16T07:07:59.000Z",
            "0xbad3077ec37074c49039617e711a4c3f96096e3797c4a55521b4871f7114eabd",
            ["0x1082A48779188C53507d28b1D2A4B17Ad839be6D"]
          ],
          [
            "2024-02-20T05:29:23.000Z",
            "0x91ff94b54638da5ab8da77fafea1d54767dba613c76aedd98141597aec711d58",
            ["0xCC0DAB27C23599cD7D2b7a04edF0730F8B2509a7"]
          ]
        ],
        "$upgradeCount": 3,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getCurrentRewardsIndex": 27,
        "getRewardCycleDetails": [
          [1, 17617749],
          [17617750, 17819349],
          [17819350, 18020949],
          [18020950, 18222549]
        ],
        "getRewardDetails": {
          "currentIndex": 27,
          "currentStartBlock": 22657750,
          "currentEndBlock": 22859349
        },
        "handledRewards": [false, true, true, true, true],
        "initialBlock": 17416150,
        "lastReportedRewardsData": {
          "reportingBlockNumber": 22657749,
          "index": 26,
          "merkleRoot": "0x6e726a3dfbcb1bc056727070b353780eb7a8e259d9f0b0601f045979515dd12e",
          "poolId": 1,
          "operatorETHRewards": "457248094282995256",
          "userETHRewards": "2028635911255542283",
          "protocolETHRewards": "90161596055801879",
          "operatorSDRewards": "34999999999999999999806"
        },
        "paused": false,
        "rewardsDataMap": [
          [
            0,
            0,
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            0,
            0,
            0,
            0
          ],
          [
            17617749,
            1,
            "0x655b278ba5af6d06a8c2d8ad9975cb6b6a3c8663e5b2d1a617c4be72548a13c3",
            1,
            0,
            0,
            0,
            "5500000000000000080850"
          ],
          [
            17819349,
            2,
            "0xa9a872ed4a799698ddf9b65d7181d7975dd59c9b1ddc94549aab5a3e8c272121",
            1,
            0,
            0,
            0,
            "39999999999999998318800"
          ],
          [
            18020949,
            3,
            "0x99b198a1fc037b69e1a5de6128557ec644f7c5b0aaead05952f09b8908ac73cd",
            1,
            "979927330738675872",
            "4347564918065956214",
            "193225107469598053",
            "39999999999999199999770"
          ],
          [
            18222549,
            4,
            "0x4bba66d16436896f177263122a3df5c60cb1f3ab22421dc91c56e76a9f5a9eb7",
            1,
            "1112044865369240251",
            "4933720177342403901",
            "219276452326329062",
            "40000000012000000000489"
          ]
        ],
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "totalOperatorETHRewardsRemaining": "6738187596001128153",
        "totalOperatorSDRewardsRemaining": "54811780937108839506721"
      },
      "errors": {
        "handledRewards": "Processing error occurred.",
        "rewardsDataMap": "Processing error occurred."
      },
      "implementationNames": {
        "0x1DE458031bFbe5689deD5A8b9ed57e1E79EaB2A4": "TransparentUpgradeableProxy",
        "0xCC0DAB27C23599cD7D2b7a04edF0730F8B2509a7": "SocializingPool"
      }
    },
    {
      "address": "0x1eB7d5898A9b3dCB8145e37B564ef00bC4cB794D",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E",
          "role": "admin",
          "via": [
            { "address": "eth:0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea" }
          ]
        }
      ]
    },
    {
      "name": "PermissionController",
      "address": "0x25E5F8B1E7aDf44518d35D5B2271f114e081f0E5",
      "type": "Contract",
      "template": "eigenlayer/PermissionController",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x01bb93f0533bf79f9680aee1f8f98c14501de40b31d642ccaab5b297dc809f1e"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract that enables AVSs and operators to delegate the ability to call certain core contract functions to other addresses.",
      "sinceTimestamp": 1744052255,
      "sinceBlock": 22218956,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0xe7f3705c9Addf2DE14e03C345fA982CAb2c1C6B1",
        "$pastUpgrades": [
          [
            "2025-04-07T18:57:35.000Z",
            "0x805a4483038511f3087a95d16a06a0c2c5a2c7f09da0138d4159a896247ebce7",
            ["0xe7f3705c9Addf2DE14e03C345fA982CAb2c1C6B1"]
          ]
        ],
        "$upgradeCount": 1,
        "version": "1.3.0"
      },
      "implementationNames": {
        "0x25E5F8B1E7aDf44518d35D5B2271f114e081f0E5": "TransparentUpgradeableProxy",
        "0xe7f3705c9Addf2DE14e03C345fA982CAb2c1C6B1": "PermissionController"
      }
    },
    {
      "address": "0x27ff193A6A1574A611E21c39FDA636fA1d61ba30",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x2E158da11961426E2A1Cc9e79f40244486b6845C",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "address": "0x2EAB2633c6180Ec592fB7A22EDAF323ccA51F85A",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E",
          "role": "admin",
          "via": [
            { "address": "eth:0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea" }
          ]
        }
      ]
    },
    {
      "name": "ValidatorWithdrawalVault",
      "address": "0x3073cC90aD39E0C30bb0d4c70F981FbD00f3458f",
      "type": "Contract",
      "sourceHashes": [
        "0xb2a8ff71214eeaa3a05b5d48e78ec38b9354be54c0cedfda3a2f139555b538f3"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1687496915,
      "sinceBlock": 17540104,
      "values": { "$immutable": true },
      "errors": {
        "calculateValidatorWithdrawalShare": "Processing error occurred."
      },
      "implementationNames": {
        "0x3073cC90aD39E0C30bb0d4c70F981FbD00f3458f": "ValidatorWithdrawalVault"
      }
    },
    {
      "name": "Stader",
      "address": "0x30D20208d987713f46DFD34EF128Bb16C404D10f",
      "type": "Contract",
      "sourceHashes": [
        "0xfda79395dea7b938e29dd6b2501a11feb5173681443e7eaa7bf59fc5a778e675"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1642382824,
      "sinceBlock": 14020088,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0xa65342184936cd4fbaea8752676f1a7d4b60638c1a06116c8da7adcb5d74fade",
        "getPastTotalSupply": [0, 0, 0, 0, 0],
        "name": "Stader",
        "symbol": "SD",
        "totalSupply": "150000000000000000000000000"
      },
      "errors": { "getPastTotalSupply": "Processing error occurred." },
      "implementationNames": {
        "0x30D20208d987713f46DFD34EF128Bb16C404D10f": "Stader"
      }
    },
    {
      "name": "EigenDA Multisig",
      "address": "0x338477FfaF63c04AC06048787f910671eC914B34",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x130d8EA0052B45554e4C99079B84df292149Bd5E",
          "description": "can eject DA operators from a quorum.",
          "role": ".ejectors"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1732035611,
      "sinceBlock": 21223132,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "0x9308319e3988843f36BC6682Ffa571525E56a125",
          "0x5262498E7D4fbbb08425b2a06D91157acDC50aDA",
          "0x995152ee7BB6304565Fbe04465d2c4D1BdD5683F",
          "0xA38372470ed4c3C4bb5123CC7f335212950e350A",
          "0x44aC63d4e18c0d24d0EDe1C058D5A93Fc2fbB904",
          "0x3C20b05f44ef008A5b848761e58e5Ca9594163e9",
          "0xA4f7168cEa82877B23Bc55a7fd7557D546F4dD31",
          "0x542aC639c0DeF0a468aed462B474FF9B7858Bd7E"
        ],
        "$threshold": 3,
        "domainSeparator": "0xb275f718748b2886efc03d27cd8cea3aea053abbff55bedb1c9cadbd3e792da7",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 8 (38%)",
        "nonce": 3,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "0x338477FfaF63c04AC06048787f910671eC914B34": "SafeProxy",
        "0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "address": "0x33E816008E7bc7798A73d0eaa640CC24f34d1626",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x347660a632B0Aac5B70dCd5e6C3444a7C933a137",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "address": "0x34C37613e1680efD9e203C979658e1d058b4B2BC",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x352978614FA84D763882A9023B169D8709C477f8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "EigenLayerOwningMultisig",
      "address": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x0c431C66F4dE941d089625E5B423D00707977060",
          "role": ".pausers"
        },
        {
          "permission": "act",
          "from": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
          "role": ".owner"
        },
        {
          "permission": "act",
          "from": "eth:0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
          "role": ".pausers"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1686681203,
      "sinceBlock": 17472874,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
          "0xFEA47018D632A77bA579846c840d5706705Dc598"
        ],
        "$threshold": 1,
        "domainSeparator": "0xbc80366740d76b8af95de2e845557588b8a3dc40db68b5b15b8f1cb36a4c7e45",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "1 of 2 (50%)",
        "nonce": 24,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "0x369e6F597e22EaB55fFb173C6d9cD234BD699111": "GnosisSafeProxy",
        "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "LidoExecutionLayerRewardsVault",
      "address": "0x388C818CA8B9251b393131C08a736A67ccB19297",
      "type": "Contract",
      "sourceHashes": [
        "0xd7305a2d008e26be8f8e72e060e9781b7b5e8b3037fad9d367b5ae5d624d08c1"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1653382011,
      "sinceBlock": 14834805,
      "values": {
        "$immutable": true,
        "LIDO": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "TREASURY": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"
      },
      "implementationNames": {
        "0x388C818CA8B9251b393131C08a736A67ccB19297": "LidoExecutionLayerRewardsVault"
      }
    },
    {
      "address": "0x38f6001e8ac11240f903CBa56aFF72A1425ae371",
      "type": "EOA",
      "sourceHashes": [
        "0x41c6ce964a4ef3e910f9ddf78152734dae8d1b1094ffc8334c50249a3b112bbf"
      ],
      "proxyType": "EIP7702 EOA",
      "values": {
        "$implementation": "0x63c0c19a282a1B52b07dD5a65b58948A07DAE32B",
        "delegationManager": "0xdb9B1e94B5b69Df7e401DDbedE43491141047dB3",
        "DOMAIN_VERSION": "1",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "EIP7702StatelessDeleGator",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "0x38f6001e8ac11240f903CBa56aFF72A1425ae371",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "entryPoint": "0x0000000071727De22E5E9d8BAf0edAc6f37da032",
        "getDeposit": 0,
        "getDomainHash": "0x7cf15dd1293c71ee6a4c120c19c7a2943ac93931c9c12066915c2efedf0f9e1c",
        "getNonce": 0,
        "NAME": "EIP7702StatelessDeleGator",
        "PACKED_USER_OP_TYPEHASH": "0xbc37962d8bd1d319c95199bdfda6d3f92baa8903a61b32d5f4ec1f4b36a3bc18",
        "VERSION": "1.3.0"
      }
    },
    {
      "name": "DelegationManager",
      "address": "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
      "type": "Contract",
      "template": "eigenlayer/DelegationManager",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x3be3c1a5b3c5a2b2e3d0af8a02c711c6eead5686cab112054a0e80e945fdc766"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The DelegationManager contract is responsible for registering EigenLayer operators and managing the EigenLayer strategies delegations. The EigenDA StakeRegistry contract reads from the DelegationManager to track the total stake of each EigenDA operator.",
      "sinceTimestamp": 1686348935,
      "sinceBlock": 17445563,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0xA75112d1df37FA53a431525CD47A7d7faCEA7E73",
        "$pastUpgrades": [
          [
            "2023-06-09T22:15:35.000Z",
            "0x0445e4e9a7cab1da004f9c1dda8f56d27bdd14f18c3a4640ed44e0a2b60f84e7",
            ["0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9"]
          ],
          [
            "2023-06-09T22:16:35.000Z",
            "0x7748101d59e54a345c328c4ec60713a378445cb1a35da6042bcab6ee22fcfd8b",
            ["0xf97E97649Da958d290e84E6D571c32F4b7F475e4"]
          ],
          [
            "2024-04-08T16:35:59.000Z",
            "0x39a8f50ef3a5e0cba11b2556bcf3f95ece0797de15b2fdde2f5820361da19b13",
            ["0x1784BE6401339Fc0Fedf7E9379409f5c1BfE9dda"]
          ],
          [
            "2025-04-17T22:30:11.000Z",
            "0xf5cdad33da1d1a2f3a9b315ed67eab912df6e23fa98b4561f42ae1b4f5594ba2",
            ["0xA75112d1df37FA53a431525CD47A7d7faCEA7E73"]
          ]
        ],
        "$upgradeCount": 4,
        "allocationManager": "0x948a420b8CC1d6BFd0B6087C2E7c344a2CD0bc39",
        "beaconChainETHStrategy": "0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0",
        "DELEGATION_APPROVAL_TYPEHASH": "0x14bde674c9f64b2ad00eaaee4a8bed1fabef35c7507e3c5b9cfc9436909a2dad",
        "domainSeparator": "0x4deda213116190048508c6bee5d6ab74a996621a8c8bc4014c9a860ec8119ade",
        "eigenPodManager": "0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338",
        "minWithdrawalDelayBlocks": 100800,
        "owner": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "permissionController": "0x25E5F8B1E7aDf44518d35D5B2271f114e081f0E5",
        "strategyManager": "0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
        "version": "1.3.0"
      },
      "implementationNames": {
        "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A": "TransparentUpgradeableProxy",
        "0xA75112d1df37FA53a431525CD47A7d7faCEA7E73": "DelegationManager"
      }
    },
    {
      "name": "Lido Dao Agent",
      "address": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
      "type": "Contract",
      "template": "tokens/Lido/LidoDaoAgent",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0xa2a0001d171ac04fee445851ab0e1c994c3b76a49ae877c1b3d2b563ae8b8178"
      ],
      "proxyType": "EIP897 proxy",
      "description": "Custom role-based operations entrypoint for Lido.",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x852deD011285fe67063a08005c71a85690503Cee",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37",
        "ADD_PRESIGNED_HASH_ROLE": "0x0b29780bb523a130b3b01f231ef49ed2fa2781645591a0b0a44ca98f15a5994c",
        "ADD_PROTECTED_TOKEN_ROLE": "0x6eb2a499556bfa2872f5aa15812b956cc4a71b4d64eb3553f7073c7e41415aaa",
        "appId": "0x701a4fd1f5174d12a0f1d9ad2c88d0ad11ab6aad0ac72b7d9ce621815f8016a9",
        "DESIGNATE_SIGNER_ROLE": "0x23ce341656c3f14df6692eebd4757791e33662b7dcf9970c8308303da5472b7c",
        "designatedSigner": "0x0000000000000000000000000000000000000000",
        "ERC1271_INTERFACE_ID": "0xfb855dc9",
        "ERC1271_RETURN_INVALID_SIGNATURE": "0x00000000",
        "ERC1271_RETURN_VALID_SIGNATURE": "0x20c13b0b",
        "EXECUTE_ROLE": "0xcebf517aa4440d1d125e0355aae64401211d0848a23c02cc5d29a14822580ba4",
        "getEVMScriptRegistry": "0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getProtectedTokensLength": 0,
        "getRecoveryVault": "0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37",
        "isDepositable": true,
        "isForwarder": true,
        "isPetrified": false,
        "kernel": "0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "PROTECTED_TOKENS_CAP": 10,
        "protectedTokens": [],
        "proxyType": 2,
        "REMOVE_PROTECTED_TOKEN_ROLE": "0x71eee93d500f6f065e38b27d242a756466a00a52a1dbcd6b4260f01a8640402a",
        "RUN_SCRIPT_ROLE": "0xb421f7ad7646747f3051c50c0b8e2377839296cd4973e27f63821d73e390338f",
        "SAFE_EXECUTE_ROLE": "0x0a1ad7b87f5846153c6d5a1f761d71c7d0cfd122384f56066cd33239b7933694",
        "TRANSFER_ROLE": "0x8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c"
      },
      "implementationNames": {
        "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": "AppProxyUpgradeable",
        "0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37": "Agent"
      }
    },
    {
      "address": "0x3f64654ec71d806F8d91AF285A6c34Df818E3aC3",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x403F4d4958409480502CdC78a54cE1B67263C17a",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "LegacyOracle",
      "address": "0x442af784A788A5bd6F42A01Ebe9F287a871243fb",
      "type": "Contract",
      "template": "tokens/Lido/LegacyOracle",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0xacfebcd69dc18081773b5b8a5526a62a7653f6b71894e95de0ee1c661eb3a5d4"
      ],
      "proxyType": "EIP897 proxy",
      "ignoreInWatchMode": [
        "getBeaconSpec",
        "getCurrentEpochId",
        "getCurrentFrame",
        "getLastCompletedEpochId",
        "getLastCompletedReportDelta"
      ],
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "0xa29b819654cE6224A222bb5f586920105E2D7E0E",
        "appId": "0x8b47ba2a8454ec799cd91646e7ec47168e91fd139b23f017455f3e5898aaba93",
        "getAccountingOracle": "0x852deD011285fe67063a08005c71a85690503Cee",
        "getBeaconSpec": {
          "epochsPerFrame": 225,
          "slotsPerEpoch": 32,
          "secondsPerSlot": 12,
          "genesisTime": 1606824023
        },
        "getContractVersion": 4,
        "getCurrentEpochId": 377948,
        "getCurrentFrame": {
          "frameEpochId": 377775,
          "frameStartTime": 1751889623,
          "frameEndTime": 1751976022
        },
        "getEVMScriptRegistry": "0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getLastCompletedEpochId": 377775,
        "getLastCompletedReportDelta": {
          "postTotalPooledEther": "9712033027760740633827249",
          "preTotalPooledEther": "9750705483524764079948551",
          "timeElapsed": 86400
        },
        "getLido": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "getRecoveryVault": "0x0000000000000000000000000000000000000000",
        "getVersion": 4,
        "hasInitialized": true,
        "implementation": "0xa29b819654cE6224A222bb5f586920105E2D7E0E",
        "isDepositable": false,
        "isPetrified": false,
        "kernel": "0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "proxyType": 2
      },
      "implementationNames": {
        "0x442af784A788A5bd6F42A01Ebe9F287a871243fb": "AppProxyUpgradeable",
        "0xa29b819654cE6224A222bb5f586920105E2D7E0E": "LegacyOracle"
      }
    },
    {
      "address": "0x454Ef2f69f91527856E06659f92a66f464C1ca4e",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can confirm batches to the DA bridge.",
          "role": ".batchConfirmers"
        }
      ]
    },
    {
      "address": "0x45dcD05251F3327EcCd4766a9264DBDAab3A4065",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "name": "EigenLayerOperationsMultisig2",
      "address": "0x461854d84Ee845F905e0eCf6C288DDEEb4A9533F",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "interact",
          "from": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
          "description": "executes scheduled operations after the delay",
          "role": ".executors"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x25E5F8B1E7aDf44518d35D5B2271f114e081f0E5",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x5e4C39Ad7A3E881585e383dB9827EB4811f6F647",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x93c4b944D05dfe6df7645A86cd2206016c51564D",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x948a420b8CC1d6BFd0B6087C2E7c344a2CD0bc39",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
          "delay": 864000,
          "role": ".proposers"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1732236023,
      "sinceBlock": 21239749,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "0xAe4ABA6838d4622aF1AD024EB351eA4D4FDE22B3",
          "0x9229C290F60F303884073F28EB8E81F9B82506d5",
          "0xC6F9BDEEdEf78c2Cd146cdA31C82F76ca14A2927",
          "0xc5280E368648b0e192b355c7d8330593bA7af700",
          "0x3e89Ef7435d4A3e0b52b70B1176f849b351953eE"
        ],
        "$threshold": 3,
        "domainSeparator": "0x61ee3be2a1999f4d0139ce35b0a2142d8ad067c74102210278661869542d9630",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 5 (60%)",
        "nonce": 12,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "0x461854d84Ee845F905e0eCf6C288DDEEb4A9533F": "SafeProxy",
        "0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "address": "0x46574f57f3F5DFCCd296F80407b3f4778414f8f5",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x4985238672d91Baed43dF1B2431F67bc332A1753",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x4a3CD82B73821d075799680AcDff3e884B726777",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "name": "StaderConfig",
      "address": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0xcfa565988cd50a871239f5b46266fbdc9b817eae4d21ffdd1baa4e7f9d122a94"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990291,
      "sinceBlock": 17416137,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x808e8783Ba7e315517952d195E20bC8eDBa7da23",
        "$pastUpgrades": [
          [
            "2023-06-05T18:38:11.000Z",
            "0x7813541f4238ef14f5e5ff1d8b67df074653fd3ead1419e1b7ecca55872f5fea",
            ["0x615BaC1593F20d853B0946D16B81200D9B9F96DC"]
          ],
          [
            "2023-06-23T05:30:23.000Z",
            "0x5c42f16092fed136218514b02de520f6e0503473392df3fb67ca31f544821f65",
            ["0x060A6A57f8ce8Fb99cbC8d4Fd6B73C36EEBD2C30"]
          ],
          [
            "2024-02-20T05:21:11.000Z",
            "0xaf2fdf9bb3f8340b317359d24ed0437bd11072b4d8a0322578e8383eeb135adf",
            ["0x2dBa235892dc72efa74e0b395294494B5B0B32B2"]
          ],
          [
            "2025-04-15T07:20:23.000Z",
            "0x8cd4ed7ea6f625c542067c4151c9bb78f422540f5f11bc4c25b37f905e98ae3e",
            ["0x808e8783Ba7e315517952d195E20bC8eDBa7da23"]
          ]
        ],
        "$upgradeCount": 4,
        "ADMIN": "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
        "AUCTION_CONTRACT": "0x8e96355022bb9b9f4d9d4e01fe2b58f45e78549c982c401c96f75f33c5de457e",
        "DECIMALS": "0x08593985ae1bebfb02f6c30105edffb176a6d87c9fad54c434bf9b58f67e81b6",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "ETH_BALANCE_POR_FEED": "0x690795c57e13eaf2526f76202b6799e9afdb069afca1e572f693953d013569d8",
        "ETH_DEPOSIT_CONTRACT": "0x84b42b3d5e6851893d4418c6ebc9a4727e78afdf84e73674c8b9c1c2b1904e2d",
        "ETH_PER_NODE": "0xf822b1f0c3b886ce1cdf1c2a5317844145470db33b02c63cae4813f8c9b2dc17",
        "ETHx": "0x09dfa94a9be22222b511ecf509f49718fc08fbe3ada37a44d2022489eca3b44c",
        "ETHX_SUPPLY_POR_FEED": "0xb134afa3abad633a84ab2d33dd5171f2b371e38b0f7bca001383aaf08ed6d2d1",
        "FULL_DEPOSIT_SIZE": "0x876943525608da6d95be5925fe6c4fe80e8622c8a76e7414f80e8ba210e0711c",
        "getAdmin": "0x1112D5C55670Cb5144BF36114C20a122908068B9",
        "getAuctionContract": "0x85A22763f94D703d2ee39E9374616ae4C1612569",
        "getDecimals": "1000000000000000000",
        "getETHBalancePORFeedProxy": "0x0000000000000000000000000000000000000000",
        "getETHDepositContract": "0x00000000219ab540356cBB839Cbe05303d7705Fa",
        "getETHXSupplyPORFeedProxy": "0x0000000000000000000000000000000000000000",
        "getETHxToken": "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
        "getFullDepositSize": "31000000000000000000",
        "getMaxDepositAmount": "10000000000000000000000",
        "getMaxWithdrawAmount": "10000000000000000000000",
        "getMinBlockDelayToFinalizeWithdrawRequest": 7200,
        "getMinDepositAmount": 100000000000000,
        "getMinWithdrawAmount": 100000000000000,
        "getNodeELRewardVaultImplementation": "0x97c92752DD8a8947cE453d3e35D2cad5857367af",
        "getOperatorMaxNameLength": 255,
        "getOperatorRewardsCollector": "0x84ffDC9De310144D889540A49052F6d1AdB2C335",
        "getPenaltyContract": "0x84645f1B80475992Df2C65c28bE6688d15dc6ED6",
        "getPermissionedNodeRegistry": "0xaf42d795A6D279e9DCc19DC0eE1cE3ecd4ecf5dD",
        "getPermissionedPool": "0x09134C643A6B95D342BdAf081Fa473338F066572",
        "getPermissionedSocializingPool": "0x9d4C3166c59412CEdBe7d901f5fDe41903a1d6Fc",
        "getPermissionlessNodeRegistry": "0x4f4Bfa0861F62309934a5551E0B2541Ee82fdcF1",
        "getPermissionlessPool": "0xd1a72Bd052e0d65B7c26D3dd97A98B74AcbBb6c5",
        "getPermissionlessSocializingPool": "0x1DE458031bFbe5689deD5A8b9ed57e1E79EaB2A4",
        "getPoolSelector": "0x62e0b431990Ea128fe685E764FB04e7d604603B0",
        "getPoolUtils": "0xeDA89ed8F89D786D816F8E14CF8d2F90c6BF763f",
        "getPreDepositSize": "1000000000000000000",
        "getRewardsThreshold": "8000000000000000000",
        "getSDCollateral": "0x7Af4730cc8EbAd1a050dcad5c03c33D2793EE91f",
        "getSDIncentiveController": "0xe225825bcf20F39E2F2e2170412a3247D83492D0",
        "getSDUtilityPool": "0xED6EE5049f643289ad52411E9aDeC698D04a9602",
        "getSocializingPoolCycleDuration": 201600,
        "getSocializingPoolOptInCoolingPeriod": 403200,
        "getStaderInsuranceFund": "0xbe3781CE437Cc3fC8c8167913B4d462347D11F20",
        "getStaderOracle": "0xF64bAe65f6f2a5277571143A24FaaFDFC0C2a737",
        "getStaderToken": "0x30D20208d987713f46DFD34EF128Bb16C404D10f",
        "getStaderTreasury": "0x01422247a1d15BB4FcF91F5A077Cf25BA6460130",
        "getStakedEthPerNode": "32000000000000000000",
        "getStakePoolManager": "0xcf5EA1b38380f6aF39068375516Daf40Ed70D299",
        "getTotalFee": 10000,
        "getUserWithdrawManager": "0x9F0491B32DBce587c50c4C43AB303b06478193A7",
        "getValidatorWithdrawalVaultImplementation": "0x3073cC90aD39E0C30bb0d4c70F981FbD00f3458f",
        "getVaultFactory": "0x03ABEEC03BF39ac5A5C8886cF3496326d8164E1E",
        "getWithdrawnKeyBatchSize": 50,
        "MANAGER": "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
        "MAX_DEPOSIT_AMOUNT": "0x712c13b90acf399d7bc7625370ce37c64b5eba41011b0961a88c2ef1648870cf",
        "MAX_WITHDRAW_AMOUNT": "0x1c2fe98ddbbbffbcf7735c7446ffcddb5ccd2a4ec2ace0f7d90f73e9ff13fcc7",
        "MIN_BLOCK_DELAY_TO_FINALIZE_WITHDRAW_REQUEST": "0x2cf2377da51daa9c0d7e3f98c7532a67ee5e9398afad7b7db6e578b978a27094",
        "MIN_DEPOSIT_AMOUNT": "0xfa5a84fed05ba4c93fcc5ba1f4ad010e3bef3e6394b367aa10b3ec01997375cc",
        "MIN_WITHDRAW_AMOUNT": "0xb18278bb399a7088b8b0b26f4896d5ebaba4497c611bbe9d43abe92d9a1fe83d",
        "NODE_EL_REWARD_VAULT_IMPLEMENTATION": "0x3e4ded42f360c2e6b1251d584085ae1d9aa9cbed18687fac6b6aef8eed1c5ad3",
        "OPERATOR": "0x523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c",
        "OPERATOR_MAX_NAME_LENGTH": "0x59b5f464ec5829246a81f005456c8cb714ee224aea800742e2dae497263e4669",
        "OPERATOR_REWARD_COLLECTOR": "0x5be667ef1f4c6c279e2aa7e62595a1045043db6a43145cb438c6d36e7a3c3ed8",
        "PENALTY_CONTRACT": "0x29384ec8473b541e7a7850226a4d1906a700f14cc394266ee08800ba62dc3af9",
        "PERMISSIONED_NODE_REGISTRY": "0xa4083e7a78dd898def03c51ce199cb4286b8828be4f6f46e04aec61761967471",
        "PERMISSIONED_POOL": "0x602490b12960e59ddb584affd1da6cd5692f4455c1ba0cc4e865af81e111ebe2",
        "PERMISSIONED_SOCIALIZING_POOL": "0x4c9466ca1bf288a7334a7494f09a0acc38ee31628eaf8c68b574b9f0ec22a9c1",
        "PERMISSIONLESS_NODE_REGISTRY": "0x00665c1b06e0667c56a1ca1706b7573435d1b9162c6327b5d0ea1daeb491ad0d",
        "PERMISSIONLESS_POOL": "0x76d62e541b8d573110ca3eb9003e96426f530422a76712d1356f6c6ce50541ca",
        "PERMISSIONLESS_SOCIALIZING_POOL": "0xc5b1a6a0b843563e6a17ca90bc59d2315c523be427d0c9c2ba08d77ced4f46b1",
        "POOL_SELECTOR": "0xdb5d1c2a9350ca010dcdf3953da11a9e8f7c5e2918cdfa65500e84e7fd4fde7d",
        "POOL_UTILS": "0xd7e49a298cb2719de62e5df1024257eed316db6337361b3a30d56a7532404607",
        "PRE_DEPOSIT_SIZE": "0x9b1ae66636378b5626322a52e22518dd40bb04881cf0440ed16a20c0f902b242",
        "REWARD_THRESHOLD": "0x46b41285bb7b8513ce3a9d95cdf6916699fb00b47326e8d3850be1b6186e0349",
        "ROLE_SD_REWARD_APPROVER": "0x809e00a8bf6ea8bf642409acefd6e4645b7257863ada00c0b5b73a79b39ad35c",
        "ROLE_SD_REWARD_ENTRY": "0x0b773b68acd168e22dbb657b74525f5b987df813882933b2d4273dbf2ed848e1",
        "SD": "0x95bf18d68834a11aaae7b73ff6037326f163a81a7b5ea80cba96856ce2284fbd",
        "SD_COLLATERAL": "0x5c00ec259bace293b50174e499c413ca897b4bcb54ed468b7e6bade51c6a9f96",
        "SD_INCENTIVE_CONTROLLER": "0xf2b2ce40acf2de0c782cf3a34ddfe1f1f18b1f0871445156842424b1aab892ff",
        "SD_UTILITY_POOL": "0x26b94d9446e6775a4c9592fb825e2f9b26930b186faaaa3fd1a7a31878756020",
        "SOCIALIZING_POOL_CYCLE_DURATION": "0x3c6dcff840f36f9818a73b67d9d00197362f63687bd52e3c277bd0ffb30dde33",
        "SOCIALIZING_POOL_OPT_IN_COOLING_PERIOD": "0xc54a7590fe6738d7a81f393c1cf5ab3e577c91781037d93a5a9f5ce44f19eb51",
        "STADER_INSURANCE_FUND": "0xe5240448c78dfcff5bda4e4eed69ba9635df15d79da0e8a4cf889217106fa45b",
        "STADER_ORACLE": "0x9f919a2294d86593fbcec81ea71aa683cec51c78771c642f8894ba8f39497052",
        "STADER_TREASURY": "0x8567f5af844d68168987760a7ce1762804b9de703165fc50ce4fa85246016c91",
        "STAKE_POOL_MANAGER": "0x3d88d1233771c5c30791fb6805b7f91424dae1e5a68a57da846ca7ff83c64029",
        "TOTAL_FEE": "0x33271b56873d8abb908de4853f90a8a0ef8829548ec0bf6c298feed3917c50a2",
        "USER_WITHDRAW_MANAGER": "0xf935b8bf66b325637ad32ca875b588849cf4026791b79b4dc20623cd3dd36e20",
        "VALIDATOR_WITHDRAWAL_VAULT_IMPLEMENTATION": "0xbd34382cd421c5250595893a4ed6cdb2125e6be7d5e0a9dbc469de5d583adfcf",
        "VAULT_FACTORY": "0x8d4341681b282735dd0d55670ff8e0ad68a80cbfc2cee847065e9f771470f88f",
        "WITHDRAWN_KEYS_BATCH_SIZE": "0x6f8d0b773ad4970d3e7d47623dc9ce06a1b4fe833bf451d06a47e774f9acaa63"
      },
      "implementationNames": {
        "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB": "TransparentUpgradeableProxy",
        "0x808e8783Ba7e315517952d195E20bC8eDBa7da23": "StaderConfig"
      }
    },
    {
      "name": "Contribution",
      "address": "0x4c614C7BB9420caA1F19cB2C58B00864f2125Ce2",
      "type": "Contract",
      "sourceHashes": [
        "0xbbe53a68c0042f4050bdf21e8d16eee4688dd35d24e49740915f0a0cf994f0d6",
        "0x04d47a14538cc31c1d5699cd1ba8e634345861e576bb09735cacd8e7569495da"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1750500551,
      "sinceBlock": 22752148,
      "values": {
        "$admin": "0x0000000000000000000000000000000000000000",
        "$implementation": "0x09665baEFbfaAE3E9b3AC854717C2ab5534d2D25",
        "$pastUpgrades": [
          [
            "2025-06-21T10:09:11.000Z",
            "0x8650dce84d7ab72b87aebbc5655861fa2734ef95c3046485f40dc2901b291656",
            ["0x09665baEFbfaAE3E9b3AC854717C2ab5534d2D25"]
          ]
        ],
        "$upgradeCount": 1,
        "CONTRIBUTOR": "0xa0bb1af1c90aa52ed052b92714ff0087008cc720049bf1af77cca2600b31e80c",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getCurrentPeriod": 2,
        "periodInterval": 604800,
        "startTimestamp": 1750464000,
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "errors": { "proxiableUUID": "Processing error occurred." },
      "implementationNames": {
        "0x4c614C7BB9420caA1F19cB2C58B00864f2125Ce2": "ERC1967Proxy",
        "0x09665baEFbfaAE3E9b3AC854717C2ab5534d2D25": "Contribution"
      }
    },
    {
      "name": "PermissionlessNodeRegistry",
      "address": "0x4f4Bfa0861F62309934a5551E0B2541Ee82fdcF1",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x8a31005862e210fb46c22f57ca7de86d2464eec8332406d8f2c911e44e528253"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990387,
      "sinceBlock": 17416145,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x0534280dDc2A103039AeA6c691c643aA7a94F7a1",
        "$pastUpgrades": [
          [
            "2023-06-05T18:39:47.000Z",
            "0x916baa4391752ea04f7f2451d0c3e45d1f8389d0ba5caee20f73413017ecd4bd",
            ["0xAD22B3d194df228C2BFf95DE430EA4b4fC62BD43"]
          ],
          [
            "2023-06-16T07:08:47.000Z",
            "0xc154c90a7990d76382cb2524f4029d0a36569111241141274bcf02a32c9cd502",
            ["0x53dF50DcA8a30355A1f3272BD9095c3Bb4c374bd"]
          ],
          [
            "2023-10-16T05:20:11.000Z",
            "0xcc5cc54742be68fb1eb2e8a0c331571942268485d51256a905eb38335cc8cf3f",
            ["0x08a8083ab2e20C0b466417fbB681D1b8332ce745"]
          ],
          [
            "2024-02-20T15:55:35.000Z",
            "0x03569d44d3c83aa88984a7cc1c9a0fdb6e995a792d38c74a0dbc671654d660ad",
            ["0x0AddF12EE7D096e2a992046e3234D9B7a3788524"]
          ],
          [
            "2025-02-21T07:03:59.000Z",
            "0x3aba671b399383fee63eb327caa9dbb369f050b429df61176266298f98974e8d",
            ["0x0534280dDc2A103039AeA6c691c643aA7a94F7a1"]
          ]
        ],
        "$upgradeCount": 5,
        "COLLATERAL_ETH": "4000000000000000000",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "FRONT_RUN_PENALTY": "3000000000000000000",
        "getCollateralETH": "4000000000000000000",
        "getOperatorRewardAddress": [
          "0x0000000000000000000000000000000000000000",
          "0xb5fBD6E8a4ce4d53d22347d544555880a51b00D7",
          "0x5A14BD3f2bf84c3690d653F1d40cfb7a8a9B3c26",
          "0xD84521D076055047D9A659F6Bffeb8239ad24205",
          "0x390739B354A591B8Ee016Bab7953D95159A6963c"
        ],
        "getOperatorTotalKeys": [0, 4, 35, 1, 0],
        "getSocializingPoolStateChangeBlock": [
          0, 17472408, 17426642, 17444403, 17515072
        ],
        "getTotalActiveValidatorCount": 1829,
        "getTotalQueuedValidatorCount": 0,
        "inputKeyCountLimit": 50,
        "maxKeysPerOperator": 500,
        "maxNonTerminalKeyPerOperator": 500,
        "nextOperatorId": 283,
        "nextQueuedValidatorIndex": 3356,
        "nextValidatorId": 3373,
        "nodeELRewardVaultByOperatorId": [
          "0x0000000000000000000000000000000000000000",
          "0x5882e8DBead5CCc7E27B7ada5E0C6Fb34Ca124Ad",
          "0x1e6F8A7C096F509c9b2D15880e922Bba4fb00742",
          "0x1A9101f43a8bF842DFa26A496aB29E32245dcE71",
          "0x0d380Ecd17E168e6fde5B2bE1476AAb7778b8Ec5"
        ],
        "operatorStructById": [
          [
            false,
            false,
            "",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            true,
            false,
            "lez-go-ethx",
            "0xb5fBD6E8a4ce4d53d22347d544555880a51b00D7",
            "0xDE84C8Efc80266831920F0Cfc2EF6dA0e4D4d97d"
          ],
          [
            true,
            true,
            "stader_nimbus_besu",
            "0x5A14BD3f2bf84c3690d653F1d40cfb7a8a9B3c26",
            "0x4f2CE2d73263a647D3B2BbcF492b021935d1411C"
          ],
          [
            true,
            false,
            "stader_teku_geth",
            "0xD84521D076055047D9A659F6Bffeb8239ad24205",
            "0xD84521D076055047D9A659F6Bffeb8239ad24205"
          ],
          [
            true,
            true,
            "Ebunker",
            "0x390739B354A591B8Ee016Bab7953D95159A6963c",
            "0x390739B354A591B8Ee016Bab7953D95159A6963c"
          ]
        ],
        "paused": false,
        "POOL_ID": 1,
        "proposedRewardAddressByOperatorId": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "queuedValidators": [1, 2, 8, 5, 6],
        "socializingPoolStateChangeBlock": [
          0, 17472408, 17426642, 17444403, 17515072
        ],
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "totalActiveValidatorCount": 1829,
        "validatorQueueSize": 3356,
        "validatorRegistry": [
          [
            0,
            "0x",
            "0x",
            "0x",
            "0x0000000000000000000000000000000000000000",
            0,
            0,
            0
          ],
          [
            5,
            "0x88e2fb0a83f5f0a70cf49c726767df423826803fdc7e4b38d50afc0b7339c31338ef33c0fdc218265e37330612697740",
            "0xa90ab26c4b9b08af4fd257576e27ea5530d9f5839e79cb88ad833ffedfb7ab9fa0cbda2a4e92622ab101f0be6a3cbdcc031b13e0f710be8cf04229ed4150035c01f454b4415965e1874bbebde5de4bd8e664ce945f21736a59bf3f57e52f4ef3",
            "0xa4629aa0f8f275e6f25d457900b4f5d2b7458d5aa8ac468a942590dab29f47e3f9d4c61b6d370b0da0b20195dc22e89f0e9f7102f03747071789bfbf73c73af17a13fa088f41488b67de33e9041addea5339d05cd08fc40506fcf95956060e24",
            "0xbbFB64646E1c813579039c045e1D4eAe1A9fc682",
            1,
            17434034,
            17797171
          ],
          [
            5,
            "0x924834cbb69b8cbe82b553fed3fd9fe840a42ff49a8607f4a29b6be84931a79a8085ae9a57e4c161fe6ef27b95625c72",
            "0xae2ec5841799b70b55c641cdde9d828ee871314b9a1680bed44977287aff36b6780c780021c0736339c91e1b13a4753a12b91bd2d4055655eb68931aaeae349ea7ee4076645febbbbbe5718b43d944f4c4059970c3db527b0f084af4f7a0d767",
            "0xb92ded79de7557cbd2d5bb71fdf0c8a277fdfda5f75f40e81e2b47b9dc4e7082b264d7f6273bc03f8cd51b2f501e873809ede6ebface2312926eebdce297874b55d78ab376871db398bd97f08907ed2afa70f57886ffae894dadc6d9d3789fd5",
            "0x96b84391a4567CB383126520e070078f8EBBcEe5",
            2,
            17434034,
            18405112
          ],
          [
            5,
            "0x8e9e5b5beadb60b4378ddb22eac4f0cf4c8f259b8b0c0cafc5b429955466bcc8a972e1da96d5f86e3704929e86e70902",
            "0x892146cd783b146d81d57a5c3a06b60310b8a6553a7a3aa11dfebccc54c63dbc77f79f5612abede0c5cd3eeb4ac104fd193ef3b34a4725bcb3560769bf9a568d96ba22626daa1c7102b289ecd4493f401d115a9fa4e44f5256d4cb0299d771b9",
            "0x9118ace4c121ef554dbb33b71f56fdce649c3e2ae74e4346c963bf7606690a50345450bafba18e018cb7ee7afa750c7110cedd78dbe1f95c5ec8f5179664dc252efce7bbe737f393c9aac1723572911e4bc85f4cc8e0a3a04f992d9e894071d3",
            "0xdDe06220e72c5a1fd605B6Fd5b9E185D682D454E",
            1,
            17518693,
            18405112
          ],
          [
            5,
            "0xa208014aa09654cb72c2352d70a16f840488ecf395b8e35219459d9978ead9bb80df8670b2f71248eb239ac37ec34448",
            "0xb8d7d29f0e0ed68ebc5a2075dfafb1ca2a16188d9bd5e44dd7ca560f1a28c6969aee86162ddf86b4b00e959dfb0c402c083ac011d7b23208b6cf5dc5edef2a8b4918702f89bc5e18768b2af8fb372c9383439a21e9f3a9b2dee1d3d81933f175",
            "0xb8cdbe65f2821a68b279b71935e5d11ec81f4a36f9a96e5a63b42f5ff9c9f6248481de17a32d7c8d60d32bd880cb7f7e0528e6d8af33836a043b4463f11153816f12a7479496c34f5ecf66bd06b1d9c8a4b244ce02177a9fd3898e7d4af35b1d",
            "0xec81f793aFC5fe6E94843147510b8a89f6B5E0Bc",
            1,
            17518693,
            18405112
          ]
        ],
        "verifiedKeyBatchSize": 50
      },
      "errors": {
        "getOperatorRewardAddress": "Processing error occurred.",
        "getOperatorTotalKeys": "Processing error occurred.",
        "getSocializingPoolStateChangeBlock": "Processing error occurred.",
        "nodeELRewardVaultByOperatorId": "Processing error occurred.",
        "operatorStructById": "Processing error occurred.",
        "proposedRewardAddressByOperatorId": "Processing error occurred.",
        "queuedValidators": "Processing error occurred.",
        "socializingPoolStateChangeBlock": "Processing error occurred.",
        "validatorRegistry": "Processing error occurred."
      },
      "implementationNames": {
        "0x4f4Bfa0861F62309934a5551E0B2541Ee82fdcF1": "TransparentUpgradeableProxy",
        "0x0534280dDc2A103039AeA6c691c643aA7a94F7a1": "PermissionlessNodeRegistry"
      }
    },
    {
      "name": "EigenLayerPauserMultisig",
      "address": "0x5050389572f2d220ad927CcbeA0D406831012390",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x0c431C66F4dE941d089625E5B423D00707977060",
          "role": ".pausers"
        },
        {
          "permission": "act",
          "from": "eth:0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
          "role": ".pausers"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1686325811,
      "sinceBlock": 17443669,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x7474E1D80E844e6EdB430841DeEF702a6B747863",
          "0x45dcD05251F3327EcCd4766a9264DBDAab3A4065",
          "0xE34e8Cab673cA3fC60AD8bf8e503f4CA4Afb2D89",
          "0x9b2C61521AF4AB9f4BE25297838F72a56462B578",
          "0x347660a632B0Aac5B70dCd5e6C3444a7C933a137",
          "0xEFca484E497a9de170Da32abfa11650957dD2a95",
          "0x2E158da11961426E2A1Cc9e79f40244486b6845C",
          "0x9C7E495F6220c2Eccf19Ce73a2d1d486D53296E4",
          "0x4a3CD82B73821d075799680AcDff3e884B726777",
          "0x57af860e3a1C16641CDDDa92898266D2df7Dfa71"
        ],
        "$threshold": 1,
        "domainSeparator": "0xfbfd4ff7bef5c0320a947b1a9f8c619140699fe97b75752b6683fab61bd6c249",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "1 of 10 (10%)",
        "nonce": 28,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "0x5050389572f2d220ad927CcbeA0D406831012390": "GnosisSafeProxy",
        "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "StrategyBaseTVLLimits",
      "address": "0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc",
      "type": "Contract",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0xeeae2315884914d515d0026a50d7322f8d8d513c643f4ec7cf5b3c1302d04ba7"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1686349019,
      "sinceBlock": 17445570,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178",
        "$pastUpgrades": [
          [
            "2023-06-09T22:16:59.000Z",
            "0xbc6446c92131a356edff85618f044940164fc98d078a272b9e4c6a78e6102c23",
            ["0xdfdA04f980bE6A64E3607c95Ca26012Ab9aA46d3"]
          ],
          [
            "2025-04-17T22:30:11.000Z",
            "0xf5cdad33da1d1a2f3a9b315ed67eab912df6e23fa98b4561f42ae1b4f5594ba2",
            ["0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178"]
          ]
        ],
        "$upgradeCount": 2,
        "explanation": "Base Strategy implementation to inherit from for more complex implementations",
        "getTVLLimits": [
          "115792089237316195423570985008687907853269984665640564039457584007913129639935",
          "115792089237316195423570985008687907853269984665640564039457584007913129639935"
        ],
        "maxPerDeposit": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "maxTotalDeposits": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "sharesToUnderlying": [0, 1, 2, 3, 4],
        "sharesToUnderlyingView": [0, 1, 2, 3, 4],
        "strategyManager": "0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
        "totalShares": "4597464500885403933123",
        "underlyingToken": "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",
        "underlyingToShares": [0, 0, 1, 2, 3],
        "underlyingToSharesView": [0, 0, 1, 2, 3],
        "version": "1.3.0"
      },
      "errors": {
        "sharesToUnderlying": "Processing error occurred.",
        "sharesToUnderlyingView": "Processing error occurred.",
        "underlyingToShares": "Processing error occurred.",
        "underlyingToSharesView": "Processing error occurred."
      },
      "implementationNames": {
        "0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc": "TransparentUpgradeableProxy",
        "0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178": "StrategyBaseTVLLimits"
      }
    },
    {
      "address": "0x57af860e3a1C16641CDDDa92898266D2df7Dfa71",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "name": "UpgradeableBeacon",
      "address": "0x5a2a4F2F3C18f09179B6703e63D9eDD165909073",
      "type": "Contract",
      "template": "eigenlayer/StrategiesBeacon",
      "sourceHashes": [
        "0x8ccc6002eb6665381c95bfbb12e2ef5edee25f5e9d381c1938e9e96ac89c0313"
      ],
      "proxyType": "immutable",
      "description": "UpgradeableBeacon managing the single implementation for all strategies deployed via StrategyFactory.",
      "sinceTimestamp": 1686348959,
      "sinceBlock": 17445565,
      "values": {
        "$immutable": true,
        "implementation": "0xe2E2dB234b0FFB9AFe41e52dB7d3c2B8585646c3",
        "owner": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111"
      },
      "implementationNames": {
        "0x5a2a4F2F3C18f09179B6703e63D9eDD165909073": "UpgradeableBeacon"
      }
    },
    {
      "name": "SocketRegistry",
      "address": "0x5a3eD432f2De9645940333e4474bBAAB8cf64cf2",
      "type": "Contract",
      "template": "eigenlayer/SocketRegistry",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x20ad72ba1402c7715031bdbe60a9bf87718c4a9444c65a68650a7a2c662f43e2"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1733339723,
      "sinceBlock": 21331160,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0x5b60105ceD5207D6ad217BF2d426e133454eCFB4",
        "$pastUpgrades": [
          [
            "2024-12-04T19:15:23.000Z",
            "0xac0215d6889603e179b545d19d00944d5655764c4763ef724ffd7956b4d346b2",
            ["0x5b60105ceD5207D6ad217BF2d426e133454eCFB4"]
          ]
        ],
        "$upgradeCount": 1,
        "registryCoordinator": "0x0BAAc79acD45A023E19345c352d8a7a83C4e5656"
      },
      "implementationNames": {
        "0x5a3eD432f2De9645940333e4474bBAAB8cf64cf2": "TransparentUpgradeableProxy",
        "0x5b60105ceD5207D6ad217BF2d426e133454eCFB4": "SocketRegistry"
      }
    },
    {
      "address": "0x5A49Bf6c5690E22dFff3eB37F7dd18254eC361ED",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can confirm batches to the DA bridge.",
          "role": ".batchConfirmers"
        }
      ]
    },
    {
      "address": "0x5C044174cC9bcA35b933a2B5107b494BAFf34Bb6",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E",
          "role": "admin",
          "via": [
            { "address": "eth:0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea" }
          ]
        }
      ]
    },
    {
      "address": "0x5D9A6573206e5205702E4caD87DC61f4C2a1Ad04",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "StrategyFactory",
      "address": "0x5e4C39Ad7A3E881585e383dB9827EB4811f6F647",
      "type": "Contract",
      "template": "eigenlayer/StrategyFactory",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x00392f5dcb8592d0f6f83640dbd27a38aa84cfbafabae75f5e3219f0f0f73ae4"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Factory contract for permissionless strategy creation via beacon proxies.",
      "sinceTimestamp": 1723232243,
      "sinceBlock": 20493178,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0x1b97d8F963179C0e17E5F3d85cdfd9a31A49bc66",
        "$pastUpgrades": [
          [
            "2024-08-09T19:37:23.000Z",
            "0x5902550cb862b59ffcde620f813c350e6b860d4e518ce22987345337e055cf55",
            ["0x3e07cc2D34C8E0965f5BA45Ac1E960e535155c74"]
          ],
          [
            "2025-04-17T22:30:11.000Z",
            "0xf5cdad33da1d1a2f3a9b315ed67eab912df6e23fa98b4561f42ae1b4f5594ba2",
            ["0x1b97d8F963179C0e17E5F3d85cdfd9a31A49bc66"]
          ]
        ],
        "$upgradeCount": 2,
        "owner": "0xBE1685C81aA44FF9FB319dD389addd9374383e90",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "strategyBeacon": "0x0ed6703C298d28aE0878d1b28e88cA87F9662fE9",
        "strategyManager": "0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
        "version": "1.3.0"
      },
      "implementationNames": {
        "0x5e4C39Ad7A3E881585e383dB9827EB4811f6F647": "TransparentUpgradeableProxy",
        "0x1b97d8F963179C0e17E5F3d85cdfd9a31A49bc66": "StrategyFactory"
      }
    },
    {
      "name": "OracleReportSanityChecker",
      "address": "0x6232397ebac4f5772e53285B26c47914E9461E75",
      "type": "Contract",
      "template": "tokens/Lido/OracleReportSanityChecker",
      "sourceHashes": [
        "0xd50222dc8dfe7cd169366ab34979e2962975f9b018fa27dc1443d09a8698dc92"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1728395495,
      "sinceBlock": 20921274,
      "values": {
        "$immutable": true,
        "ALL_LIMITS_MANAGER_ROLE": "0x5bf88568a012dfc9fe67407ad6775052bddc4ac89902dea1f4373ef5d9f1e35b",
        "ANNUAL_BALANCE_INCREASE_LIMIT_MANAGER_ROLE": "0x12c02753cd3d584dc4bb965eb0c88392c4c4d7c00433fdb7490d33c61ea57622",
        "APPEARED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE": "0x14ca7b84baa11a976283347b0159b8ddf2dcf5fd5cf613cc567a3423cf510119",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXITED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE": "0x60b9982471bc0620c7b74959f48a86c55c92c11876fddc5b0b54d1ec47153e5d",
        "getLidoLocator": "0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "getMaxPositiveTokenRebase": 750000,
        "getOracleReportLimits": {
          "exitedValidatorsPerDayLimit": 3600,
          "appearedValidatorsPerDayLimit": 1800,
          "annualBalanceIncreaseBPLimit": 1000,
          "simulatedShareRateDeviationBPLimit": 50,
          "maxValidatorExitRequestsPerReport": 600,
          "maxItemsPerExtraDataTransaction": 8,
          "maxNodeOperatorsPerExtraDataItem": 24,
          "requestTimestampMargin": 7680,
          "maxPositiveTokenRebase": 750000,
          "initialSlashingAmountPWei": 8,
          "inactivityPenaltiesAmountPWei": 101,
          "clBalanceOraclesErrorUpperBPLimit": 50
        },
        "INITIAL_SLASHING_AND_PENALTIES_MANAGER_ROLE": "0xebfa317a5d279811b024586b17a50f48924bce86f6293b233927322d7209b507",
        "MAX_ITEMS_PER_EXTRA_DATA_TRANSACTION_ROLE": "0x13445b811594f3a8800b82296d63f371c695d2f86c1069c899ded3d73f523d2e",
        "MAX_NODE_OPERATORS_PER_EXTRA_DATA_ITEM_ROLE": "0xb3f2d16385bde8a7121e101a021aff43bbe4d4137a587832caf1f583b9d34395",
        "MAX_POSITIVE_TOKEN_REBASE_MANAGER_ROLE": "0x78de2bab4a3a0c88f50b6bb7c2290e0eb46bc61d575eae694d8bffbc2ca98c92",
        "MAX_VALIDATOR_EXIT_REQUESTS_PER_REPORT_ROLE": "0x9925400e72399e0a89e9b346878fc47ac0031526d0e060e33ff372d7a5d11ba8",
        "REQUEST_TIMESTAMP_MARGIN_MANAGER_ROLE": "0x2f8719116fbba3aba2a39759e34dcd29ea3516f7568c8321695aaea208280cd3",
        "SECOND_OPINION_MANAGER_ROLE": "0xaa0e0f619f5a9368ee035bae759cfe7da8958f44bd71456a05198effc68ea647",
        "secondOpinionOracle": "0x0000000000000000000000000000000000000000",
        "SHARE_RATE_DEVIATION_LIMIT_MANAGER_ROLE": "0x7b21c0949109e9e143f66d6aa1f8a065b3f4ab47ee9f84f6837fd0490eace4d5"
      },
      "implementationNames": {
        "0x6232397ebac4f5772e53285B26c47914E9461E75": "OracleReportSanityChecker"
      }
    },
    {
      "name": "PoolSelector",
      "address": "0x62e0b431990Ea128fe685E764FB04e7d604603B0",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x06902c283848163725d2c44870327ce2709986f67b28a7949b70ace96694d169"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990411,
      "sinceBlock": 17416147,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x8322793CEB2d8740aD83ED431e69aE87fa1a86AB",
        "$pastUpgrades": [
          [
            "2023-06-05T18:40:11.000Z",
            "0xee416b385fc1616df2dd885fe1856f4797ca7db96ca521e1eadcc89a57efdfcc",
            ["0x8322793CEB2d8740aD83ED431e69aE87fa1a86AB"]
          ]
        ],
        "$upgradeCount": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "POOL_WEIGHTS_SUM": 10000,
        "poolAllocationMaxSize": 50,
        "poolIdArrayIndexForExcessDeposit": 0,
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB"
      },
      "implementationNames": {
        "0x62e0b431990Ea128fe685E764FB04e7d604603B0": "TransparentUpgradeableProxy",
        "0x8322793CEB2d8740aD83ED431e69aE87fa1a86AB": "PoolSelector"
      }
    },
    {
      "address": "0x65C4799061c0D1e3E87ADdB65b02E92a558F842F",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ProxyAdmin",
      "address": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x68f689a23d3badd91255602a1eb13d4789baedc16d904c3103244642fc78ca8f"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x03ABEEC03BF39ac5A5C8886cF3496326d8164E1E",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x09134C643A6B95D342BdAf081Fa473338F066572",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x1DE458031bFbe5689deD5A8b9ed57e1E79EaB2A4",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x4f4Bfa0861F62309934a5551E0B2541Ee82fdcF1",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x62e0b431990Ea128fe685E764FB04e7d604603B0",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x7Af4730cc8EbAd1a050dcad5c03c33D2793EE91f",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x84645f1B80475992Df2C65c28bE6688d15dc6ED6",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x84ffDC9De310144D889540A49052F6d1AdB2C335",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x85A22763f94D703d2ee39E9374616ae4C1612569",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x9d4C3166c59412CEdBe7d901f5fDe41903a1d6Fc",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x9F0491B32DBce587c50c4C43AB303b06478193A7",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xaf42d795A6D279e9DCc19DC0eE1cE3ecd4ecf5dD",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xbe3781CE437Cc3fC8c8167913B4d462347D11F20",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xcf5EA1b38380f6aF39068375516Daf40Ed70D299",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xd1a72Bd052e0d65B7c26D3dd97A98B74AcbBb6c5",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xe225825bcf20F39E2F2e2170412a3247D83492D0",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xED6EE5049f643289ad52411E9aDeC698D04a9602",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xeDA89ed8F89D786D816F8E14CF8d2F90c6BF763f",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xF64bAe65f6f2a5277571143A24FaaFDFC0C2a737",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1685990279,
      "sinceBlock": 17416136,
      "values": {
        "$immutable": true,
        "owner": "0x1112D5C55670Cb5144BF36114C20a122908068B9"
      },
      "implementationNames": {
        "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e": "ProxyAdmin"
      }
    },
    {
      "address": "0x6A662c5DdCe0b76BD081b8A4ec3A4F8a671b0b1f",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "",
      "address": "0x7153803C06d6a36D6d91aEB3C1ed8e5b934Df601",
      "type": "Contract",
      "unverified": true,
      "proxyType": "immutable",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0xf6f4A30EeF7cf51Ed4Ee1415fB3bFDAf3694B0d2",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1735344335,
      "sinceBlock": 21497263,
      "values": { "$immutable": true },
      "implementationNames": {
        "0x7153803C06d6a36D6d91aEB3C1ed8e5b934Df601": ""
      }
    },
    {
      "address": "0x72Ff26D9517324eEFA89A48B75c5df41132c4f54",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x7474E1D80E844e6EdB430841DeEF702a6B747863",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "name": "EigenDADisperserRegistry",
      "address": "0x78cb05379a3b66E5227f2C1496432D7FFE794Fad",
      "type": "Contract",
      "template": "eigenlayer/EigenDADisperserRegistry",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x8d337ccea9456dccbcd3d6b82ca9d61509d3a9343487e057438b300efe5484c6"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Registry for EigenDA disperser info such as disperser key to address mapping.",
      "sinceTimestamp": 1744750295,
      "sinceBlock": 22276885,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0x7DECf99BE82Ea4Cf72F381a5fCBc04228955FBE5",
        "$pastUpgrades": [
          [
            "2025-04-15T20:51:35.000Z",
            "0x19a69477f502e4c9c6ffa34582f15519fcd131c25e889864b5ce976d865bacd2",
            ["0x7DECf99BE82Ea4Cf72F381a5fCBc04228955FBE5"]
          ]
        ],
        "$upgradeCount": 1,
        "dispersers": ["0xF3d7C0D52fF8f4CF74A3CD9C53778516f4235bE9"],
        "owner": "0x002721B4790d97dC140a049936aA710152Ba92D5"
      },
      "fieldMeta": {
        "dispersers": { "severity": "HIGH", "type": "RISK_PARAMETER" }
      },
      "implementationNames": {
        "0x78cb05379a3b66E5227f2C1496432D7FFE794Fad": "TransparentUpgradeableProxy",
        "0x7DECf99BE82Ea4Cf72F381a5fCBc04228955FBE5": "EigenDADisperserRegistry"
      }
    },
    {
      "name": "SDCollateral",
      "address": "0x7Af4730cc8EbAd1a050dcad5c03c33D2793EE91f",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x404456947ba7612dc168b44156c42c7797aa10d1de0404a24573275c837a2fac"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990435,
      "sinceBlock": 17416149,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x278097F753aB3E4A5e897dBB72Cea1592E78e9a5",
        "$pastUpgrades": [
          [
            "2023-06-05T18:40:35.000Z",
            "0xe75948a5c35e9c398ac26c9e0b662328955d2119e0cf00ae999b8c5086ac7945",
            ["0xe0BD7601908f0156DB9A02a79A12b2969816d241"]
          ],
          [
            "2024-02-20T15:53:35.000Z",
            "0xbbe9a14ddaa9379585249e2cf030eda9e184425816d635dfea0e3253c7437d3b",
            ["0x278097F753aB3E4A5e897dBB72Cea1592E78e9a5"]
          ]
        ],
        "$upgradeCount": 2,
        "convertETHToSD": [0, 6123, 12247, 18371, 24495],
        "convertSDToETH": [0, 0, 0, 0, 0],
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB"
      },
      "errors": {
        "convertETHToSD": "Processing error occurred.",
        "convertSDToETH": "Processing error occurred."
      },
      "implementationNames": {
        "0x7Af4730cc8EbAd1a050dcad5c03c33D2793EE91f": "TransparentUpgradeableProxy",
        "0x278097F753aB3E4A5e897dBB72Cea1592E78e9a5": "SDCollateral"
      }
    },
    {
      "name": "Safe",
      "address": "0x7F68e9C17D22005688b8E6968fCe31e32B4B03d1",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1728099143,
      "sinceBlock": 20896663,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": ["0x5e6a3ba74AF86211893e5dAf0EfdC92fdc52d3B5"],
        "$threshold": 1,
        "domainSeparator": "0x8d93468ebffa79901f086f2e11f14ab0aa2568948ed9d84f653bc646af4dec93",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "1 of 1 (100%)",
        "nonce": 0,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "0x7F68e9C17D22005688b8E6968fCe31e32B4B03d1": "SafeProxy",
        "0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0xae641c7d7a83bba7fa913b9544f946dc23ca0527c2f4abb9c6a3496f49375218"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x006124Ae7976137266feeBFb3F4D2BE4C073139D",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x00A5Fd09F6CeE6AE9C8b0E5e33287F7c82880505",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x0BAAc79acD45A023E19345c352d8a7a83C4e5656",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x130d8EA0052B45554e4C99079B84df292149Bd5E",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x5a3eD432f2De9645940333e4474bBAAB8cf64cf2",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x78cb05379a3b66E5227f2C1496432D7FFE794Fad",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xb2e7ef419a2A399472ae22ef5cFcCb8bE97A4B05",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xBd35a7a1CDeF403a6a99e4E8BA0974D198455030",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xD160e6C1543f562fc2B0A5bf090aED32640Ec55B",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xdb4c89956eEa6F606135E7d366322F2bDE609F15",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1712353787,
      "sinceBlock": 19592322,
      "values": {
        "$immutable": true,
        "owner": "0x002721B4790d97dC140a049936aA710152Ba92D5"
      },
      "implementationNames": {
        "0x8247EF5705d3345516286B72bFE6D690197C2E99": "ProxyAdmin"
      }
    },
    {
      "name": "Penalty",
      "address": "0x84645f1B80475992Df2C65c28bE6688d15dc6ED6",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x29bdedcc76a99db07a9dd03db1e78e181fbef50ed15702c18555da7210a327fb"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990351,
      "sinceBlock": 17416142,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x8D80Ad529f68B11C2492301BA4fB78e5A654C206",
        "$pastUpgrades": [
          [
            "2023-06-05T18:39:11.000Z",
            "0x5b22d6b009a5cc48c0dfcfa21a94a6670730bc4d750bf20c1509ab4aaf20e898",
            ["0x8D80Ad529f68B11C2492301BA4fB78e5A654C206"]
          ]
        ],
        "$upgradeCount": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "mevTheftPenaltyPerStrike": "1000000000000000000",
        "missedAttestationPenaltyPerStrike": "200000000000000000",
        "ratedOracleAddress": "0x51881A1Cde5DBAE15D02aE1824940b19768d8F2b",
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "validatorExitPenaltyThreshold": "2000000000000000000"
      },
      "implementationNames": {
        "0x84645f1B80475992Df2C65c28bE6688d15dc6ED6": "TransparentUpgradeableProxy",
        "0x8D80Ad529f68B11C2492301BA4fB78e5A654C206": "Penalty"
      }
    },
    {
      "name": "OperatorRewardsCollector",
      "address": "0x84ffDC9De310144D889540A49052F6d1AdB2C335",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x61349e2a9f9a32861c5cb40f277e8bb39d457c6c1cd83ececbaf15ec26d2c6a6"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990339,
      "sinceBlock": 17416141,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x922805C0097547663E0Df537aC65Bd9B65cb2A11",
        "$pastUpgrades": [
          [
            "2023-06-05T18:38:59.000Z",
            "0xe45d19e00672b1c088940fe5660b4300fba92d90ccaf20f1f6d632760f9aef92",
            ["0x6cCabBa6100bE33ded45BCec21Df92dba9Dfe250"]
          ],
          [
            "2024-02-20T15:55:59.000Z",
            "0xaea05a130b9000b5687c3aaad463b9dce01675f34f82c6fca1f275856ea76a7f",
            ["0x134Fee660A3259D8885F29c37FB1A6980a211c3f"]
          ],
          [
            "2025-02-21T07:02:23.000Z",
            "0xaa7162b0c21047cf3e7eff0e15a1e3f3a21503438dd6308bfcc325dbf15c79b7",
            ["0x922805C0097547663E0Df537aC65Bd9B65cb2A11"]
          ]
        ],
        "$upgradeCount": 3,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "weth": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "implementationNames": {
        "0x84ffDC9De310144D889540A49052F6d1AdB2C335": "TransparentUpgradeableProxy",
        "0x922805C0097547663E0Df537aC65Bd9B65cb2A11": "OperatorRewardsCollector"
      }
    },
    {
      "name": "AccountingOracle",
      "address": "0x852deD011285fe67063a08005c71a85690503Cee",
      "type": "Contract",
      "template": "tokens/Lido/AccountingOracle",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0x8eb8fe1367a0eb2d485632fc86c4e0eea79ee0a2dd3f72a2982a622b3c62f1ba"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["getConsensusReport", "getProcessingState"],
      "sinceTimestamp": 1683023999,
      "sinceBlock": 17172553,
      "values": {
        "$admin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "0x0e65898527E77210fB0133D00dd4C0E86Dc29bC7",
        "$pastUpgrades": [
          [
            "2023-05-02T10:39:59.000Z",
            "0x3def88f27741216b131de2861cf89af2ca2ac4242b384ee33dca8cc70c51c8dd",
            ["0x6F6541C2203196fEeDd14CD2C09550dA1CbEDa31"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["0xF3c5E0A67f32CF1dc07a8817590efa102079a1aF"]
          ],
          [
            "2024-10-25T16:03:23.000Z",
            "0x0078b3e0cecb3b50c78a22e0b1a985e6cde3bf431e9cb3b2ba4e50260122d542",
            ["0x0e65898527E77210fB0133D00dd4C0E86Dc29bC7"]
          ]
        ],
        "$upgradeCount": 3,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXTRA_DATA_FORMAT_EMPTY": 0,
        "EXTRA_DATA_FORMAT_LIST": 1,
        "EXTRA_DATA_TYPE_EXITED_VALIDATORS": 2,
        "EXTRA_DATA_TYPE_STUCK_VALIDATORS": 1,
        "GENESIS_TIME": 1606824023,
        "getConsensusContract": "0xD624B08C83bAECF0807Dd2c6880C3154a5F0B288",
        "getConsensusReport": {
          "hash": "0x32ef21a22b29de41a78d790fbfad0b45b27af00e8c981a4d27e10e19ad16b2b2",
          "refSlot": 12088799,
          "processingDeadlineTime": 1751976011,
          "processingStarted": true
        },
        "getConsensusVersion": 3,
        "getContractVersion": 2,
        "getProcessingState": {
          "currentFrameRefSlot": 12088799,
          "processingDeadlineTime": 1751976011,
          "mainDataHash": "0x32ef21a22b29de41a78d790fbfad0b45b27af00e8c981a4d27e10e19ad16b2b2",
          "mainDataSubmitted": true,
          "extraDataHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extraDataFormat": 0,
          "extraDataSubmitted": true,
          "extraDataItemsCount": 0,
          "extraDataItemsSubmitted": 0
        },
        "LEGACY_ORACLE": "0x442af784A788A5bd6F42A01Ebe9F287a871243fb",
        "LIDO": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "LOCATOR": "0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "MANAGE_CONSENSUS_CONTRACT_ROLE": "0x04a0afbbd09d5ad397fc858789da4f8edd59f5ca5098d70faa490babee945c3b",
        "MANAGE_CONSENSUS_VERSION_ROLE": "0xc31b1e4b732c5173dc51d519dfa432bad95550ecc4b0f9a61c2a558a2a8e4341",
        "proxy__getAdmin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "0x0e65898527E77210fB0133D00dd4C0E86Dc29bC7",
        "proxy__getIsOssified": false,
        "SECONDS_PER_SLOT": 12,
        "SUBMIT_DATA_ROLE": "0x65fa0c17458517c727737e4153dd477fa3e328cf706640b0f68b1a285c5990da"
      },
      "implementationNames": {
        "0x852deD011285fe67063a08005c71a85690503Cee": "OssifiableProxy",
        "0x0e65898527E77210fB0133D00dd4C0E86Dc29bC7": "AccountingOracle"
      }
    },
    {
      "name": "EVMScriptRegistry",
      "address": "0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
      "type": "Contract",
      "template": "tokens/Lido/EVMScriptRegistry",
      "sourceHashes": [
        "0x3cab9c9a12a52c625f55b2d3d9693f8eb062cb0d41841589b557888ad01afced",
        "0x00350407c4a32b62d60dbac5ac3093bf4bffd482f40b2df2a9cd3268365b84e5"
      ],
      "proxyType": "EIP897 proxy",
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": true,
        "$implementation": "0xBF1Ce0Bc4EdaAD8e576b3b55e19c4C15Cf6999eb",
        "appId": "0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61",
        "getEVMScriptRegistry": "0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getRecoveryVault": "0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "0xBF1Ce0Bc4EdaAD8e576b3b55e19c4C15Cf6999eb",
        "isDepositable": false,
        "isPetrified": false,
        "kernel": "0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "proxyType": 1,
        "REGISTRY_ADD_EXECUTOR_ROLE": "0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2",
        "REGISTRY_MANAGER_ROLE": "0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3"
      },
      "implementationNames": {
        "0x853cc0D5917f49B57B8e9F89e491F5E18919093A": "AppProxyPinned",
        "0xBF1Ce0Bc4EdaAD8e576b3b55e19c4C15Cf6999eb": "EVMScriptRegistry"
      }
    },
    {
      "name": "StrategyManager",
      "address": "0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
      "type": "Contract",
      "template": "eigenlayer/StrategyManager",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0xa50d63fab44e951546763a60992b2c223d1b089ebbd81504210b24beadcf5b50"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The StrategyManager contract is responsible for managing the EigenLayer token strategies. Each EigenDA quorum has at least one strategy that defines the operators quorum stake.",
      "sinceTimestamp": 1686348947,
      "sinceBlock": 17445564,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0xba4b2b8A076851A3044882493C2e36503d50b925",
        "$pastUpgrades": [
          [
            "2023-06-09T22:15:47.000Z",
            "0x1a21d3f2c0010ef91f57e2be2f5a85cddacc6c882d1868b89cbf1bb43c552e39",
            ["0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9"]
          ],
          [
            "2023-06-09T22:16:35.000Z",
            "0x81b4b8a4240e0ffeb65a97334f9c09c674c1e6f983ad78fd49695e4e7c1d5115",
            ["0x5d25EEf8CfEdaA47d31fE2346726dE1c21e342Fb"]
          ],
          [
            "2024-04-08T16:35:59.000Z",
            "0x39a8f50ef3a5e0cba11b2556bcf3f95ece0797de15b2fdde2f5820361da19b13",
            ["0x70f44C13944d49a236E3cD7a94f48f5daB6C619b"]
          ],
          [
            "2025-04-17T22:30:11.000Z",
            "0xf5cdad33da1d1a2f3a9b315ed67eab912df6e23fa98b4561f42ae1b4f5594ba2",
            ["0xba4b2b8A076851A3044882493C2e36503d50b925"]
          ]
        ],
        "$upgradeCount": 4,
        "DEFAULT_BURN_ADDRESS": "0x00000000000000000000000000000000000E16E4",
        "delegation": "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
        "DEPOSIT_TYPEHASH": "0x4337f82d142e41f2a8c10547cd8c859bddb92262a61058e77842e24d9dea9224",
        "domainSeparator": "0x12e2738060ebb37eceb9d44919c2fede717e592f513c1065ece34ca00bf2c18e",
        "getStrategiesWithBurnableShares": [[], []],
        "owner": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "strategyWhitelister": "0x5e4C39Ad7A3E881585e383dB9827EB4811f6F647",
        "version": "1.3.0"
      },
      "implementationNames": {
        "0x858646372CC42E1A627fcE94aa7A7033e7CF075A": "TransparentUpgradeableProxy",
        "0xba4b2b8A076851A3044882493C2e36503d50b925": "StrategyManager"
      }
    },
    {
      "name": "Auction",
      "address": "0x85A22763f94D703d2ee39E9374616ae4C1612569",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x8e06cc99687e5655e8f1d86f6a1cb77f325a37ca392728585167ab2b24d47e9b"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990315,
      "sinceBlock": 17416139,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0xa2Aa24E91A345B3dd8652f304390203D0e1c4d31",
        "$pastUpgrades": [
          [
            "2023-06-05T18:38:35.000Z",
            "0x9b2f8df1a7921a182e62f47a4a11b0d277513d2f883f824726e13c3c208b5b55",
            ["0xa2Aa24E91A345B3dd8652f304390203D0e1c4d31"]
          ]
        ],
        "$upgradeCount": 1,
        "bidIncrement": 5000000000000000,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "duration": 14400,
        "lots": [
          [
            0,
            0,
            0,
            "0x0000000000000000000000000000000000000000",
            0,
            false,
            false
          ],
          [
            0,
            0,
            0,
            "0x0000000000000000000000000000000000000000",
            0,
            false,
            false
          ],
          [
            0,
            0,
            0,
            "0x0000000000000000000000000000000000000000",
            0,
            false,
            false
          ],
          [
            0,
            0,
            0,
            "0x0000000000000000000000000000000000000000",
            0,
            false,
            false
          ],
          [
            0,
            0,
            0,
            "0x0000000000000000000000000000000000000000",
            0,
            false,
            false
          ]
        ],
        "MIN_AUCTION_DURATION": 7200,
        "nextLot": 1,
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB"
      },
      "errors": { "lots": "Processing error occurred." },
      "implementationNames": {
        "0x85A22763f94D703d2ee39E9374616ae4C1612569": "TransparentUpgradeableProxy",
        "0xa2Aa24E91A345B3dd8652f304390203D0e1c4d31": "Auction"
      }
    },
    {
      "address": "0x8642473a123FE33b0aaE90bD8604eA1029417236",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x130d8EA0052B45554e4C99079B84df292149Bd5E",
          "description": "can eject DA operators from a quorum.",
          "role": ".ejectors"
        }
      ]
    },
    {
      "name": "EigenDAServiceManager",
      "address": "0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
      "type": "Contract",
      "template": "eigenlayer/EigenDAServiceManager",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x41471c5c89db3f645030775d3f3cc317047a179f36469fbd736db24baed6523e"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Bridge contract that accepts blob batches data availability attestations. Batches availability is attested by EigenDA operators signatures and relayed to the service manager contract by the EigenDA disperser.",
      "ignoreInWatchMode": ["batchId", "taskNumber"],
      "sinceTimestamp": 1712353787,
      "sinceBlock": 19592322,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0xae448D008B6F69033AfdA361b46b36C472B6FEE0",
        "$pastUpgrades": [
          [
            "2024-04-05T21:49:47.000Z",
            "0x0742f1a4d072fc85fe39830a9d21536bf3e09c0ce5a7571cab93bd85d09ff576",
            ["0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9"]
          ],
          [
            "2024-04-05T21:49:59.000Z",
            "0xb51ad742d1c13af667acb1608d33790a5dcc4970153a6ac2f415390b16fb485e",
            ["0xF5fD25A90902c27068CF5eBe53Be8da693Ac899e"]
          ],
          [
            "2024-05-09T21:13:11.000Z",
            "0xb40a6884127043977ba87604e5b6a7447b7f8e6fa88b3ab3d940507c8e1c92d8",
            ["0x26089e9738b809d8308B0011B93b4225a112DB8C"]
          ],
          [
            "2024-05-21T19:56:59.000Z",
            "0x43cca617c25c2c5ac4164bdfbeedb8dbf7325056844893fe61bb9e2034ebad1e",
            ["0xCDFFF07d5b8AcdAd13607615118a2e65030f5be1"]
          ],
          [
            "2024-08-03T16:14:35.000Z",
            "0xfacff9a26f07d7ae55c6b9fc80059faa016f249c4624841cfcd43c34717cbaf7",
            ["0x0D2C5FD4Bb956cDD48A23fC3Ef77a768a5cDbAf7"]
          ],
          [
            "2024-09-17T14:17:11.000Z",
            "0xaedce35d052ceaed37943107a78d8fb3d833ac5619edeab62a8772d67afaaff9",
            ["0x58fDE694Db83e589ABb21A6Fe66cb20Ce5554a07"]
          ],
          [
            "2025-05-29T22:04:35.000Z",
            "0xfa483d640a2793a223b75e6a2c6fb8f9eaa2a1c0df1e6ca69d7d332251981282",
            ["0xae448D008B6F69033AfdA361b46b36C472B6FEE0"]
          ]
        ],
        "$upgradeCount": 7,
        "avsDirectory": "0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF",
        "batchConfirmers": [
          "0x8ED83c6Bb12E441Ca2C3a544F525d4a3Fb6484D8",
          "0x5A49Bf6c5690E22dFff3eB37F7dd18254eC361ED",
          "0x454Ef2f69f91527856E06659f92a66f464C1ca4e"
        ],
        "batchId": 109644,
        "BLOCK_STALE_MEASURE": 300,
        "blsApkRegistry": "0x00A5Fd09F6CeE6AE9C8b0E5e33287F7c82880505",
        "delegation": "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
        "eigenDADisperserRegistry": "0x78cb05379a3b66E5227f2C1496432D7FFE794Fad",
        "eigenDARelayRegistry": "0xD160e6C1543f562fc2B0A5bf090aED32640Ec55B",
        "eigenDAThresholdRegistry": "0xdb4c89956eEa6F606135E7d366322F2bDE609F15",
        "getRestakeableStrategies": [
          "0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0",
          "0x93c4b944D05dfe6df7645A86cd2206016c51564D",
          "0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
          "0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc",
          "0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d",
          "0x13760F50a9d7377e4F20CB8CF9e4c26586c658ff",
          "0xa4C637e0F704745D182e4D38cAb7E7485321d059",
          "0x57ba429517c3473B6d34CA9aCd56c0e735b94c02",
          "0x0Fe4F44beE93503346A3Ac9EE5A26b130a5796d6",
          "0x7CA911E83dabf90C90dD3De5411a10F1A6112184",
          "0x8CA7A5d6f3acd3A7A8bC468a8CD0FB14B6BD28b6",
          "0xAe60d8180437b5C34bB956822ac2710972584473",
          "0x298aFB19A105D59E74658C4C334Ff360BadE6dd2",
          "0xaCB55C530Acdb2849e6d4f36992Cd8c9D50ED8F7",
          "0x6075546538c3eFbD607ea6aFC24149fCcFb2edF4"
        ],
        "owner": "0x002721B4790d97dC140a049936aA710152Ba92D5",
        "paused": 0,
        "pauserRegistry": "0x0c431C66F4dE941d089625E5B423D00707977060",
        "paymentVault": "0xb2e7ef419a2A399472ae22ef5cFcCb8bE97A4B05",
        "quorumAdversaryThresholdPercentages": "0x212121",
        "quorumConfirmationThresholdPercentages": "0x373737",
        "quorumNumbersRequired": "0x0001",
        "registryCoordinator": "0x0BAAc79acD45A023E19345c352d8a7a83C4e5656",
        "rewardsInitiator": "0x178eeeA9E0928dA2153A1d7951FBe30CF8371b8A",
        "stakeRegistry": "0x006124Ae7976137266feeBFb3F4D2BE4C073139D",
        "staleStakesForbidden": false,
        "STORE_DURATION_BLOCKS": 100800,
        "taskNumber": 109644,
        "THRESHOLD_DENOMINATOR": 100
      },
      "fieldMeta": {
        "BLOCK_STALE_MEASURE": {
          "severity": "HIGH",
          "description": "This is the maximum amount of blocks in the past that the service will consider stake amounts to still be 'valid'. If a batch is signed by a certain amount of stake, it then needs to be submitted within the next BLOCK_STALE_MEASURE blocks, or the confirmBatch function will revert.",
          "type": "RISK_PARAMETER"
        },
        "quorumAdversaryThresholdPercentages": {
          "severity": "HIGH",
          "description": "The maximum percentage of the stake which can be held by adversarial nodes before the availability of a blob is affected. First bytes is hex value for the first quorum, second byte is for the second quorum and so on.",
          "type": "RISK_PARAMETER"
        },
        "quorumConfirmationThresholdPercentages": {
          "severity": "HIGH",
          "description": "The minimum percentage of stake that must attest in order to consider the blob dispersal successful. First bytes is hex value for the first quorum, second byte is for the second quorum and so on.",
          "type": "RISK_PARAMETER"
        },
        "batchConfirmers": {
          "severity": "HIGH",
          "description": "The list of addresses authorized to confirm the availability of blobs batches to the DA bridge.",
          "type": "RISK_PARAMETER"
        }
      },
      "implementationNames": {
        "0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0": "TransparentUpgradeableProxy",
        "0xae448D008B6F69033AfdA361b46b36C472B6FEE0": "EigenDAServiceManager"
      }
    },
    {
      "address": "0x875B5C06893563bA573ABe9b16801cA31A6ba4f4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "WithdrawalQueueERC721",
      "address": "0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
      "type": "Contract",
      "template": "tokens/Lido/WithdrawalQueueERC721",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0x700596a656c09529255fe261db91a5a98b3795dc7aac6bd680e1b9d5ad5f2f5f"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": [
        "getLastFinalizedRequestId",
        "getLastRequestId",
        "getLockedEtherAmount",
        "unfinalizedRequestNumber",
        "unfinalizedStETH"
      ],
      "sinceTimestamp": 1683023927,
      "sinceBlock": 17172547,
      "values": {
        "$admin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "0xE42C659Dc09109566720EA8b2De186c2Be7D94D9",
        "$pastUpgrades": [
          [
            "2023-05-02T10:38:47.000Z",
            "0x98c2170be034f750f5006cb69ea0aeeaf0858b11f6324ee53d582fa4dd49bc1a",
            ["0x6F6541C2203196fEeDd14CD2C09550dA1CbEDa31"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["0xE42C659Dc09109566720EA8b2De186c2Be7D94D9"]
          ]
        ],
        "$upgradeCount": 2,
        "BUNKER_MODE_DISABLED_TIMESTAMP": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "bunkerModeSinceTimestamp": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "FINALIZE_ROLE": "0x485191a2ef18512555bd4426d18a716ce8e98c80ec2de16394dcf86d7d91bc80",
        "getBaseURI": "https://wq-api.lido.fi/v1/nft",
        "getContractVersion": 1,
        "getLastFinalizedRequestId": 85291,
        "getLastRequestId": 85385,
        "getLockedEtherAmount": "14507497544975485289448",
        "getNFTDescriptorAddress": "0x0000000000000000000000000000000000000000",
        "getResumeSinceTimestamp": 1684163759,
        "isBunkerModeActive": false,
        "isPaused": false,
        "MANAGE_TOKEN_URI_ROLE": "0xbe882725f03f148e7c5a5e63ec45f182f7dcdb6bb8b92311ade5a6d138e0ee0f",
        "MAX_BATCHES_LENGTH": 36,
        "MAX_STETH_WITHDRAWAL_AMOUNT": "1000000000000000000000",
        "MIN_STETH_WITHDRAWAL_AMOUNT": 100,
        "name": "Lido: stETH Withdrawal NFT",
        "ORACLE_ROLE": "0x68e79a7bf1e0bc45d0a330c573bc367f9cf464fd326078812f301165fbda4ef1",
        "PAUSE_INFINITELY": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxy__getAdmin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "0xE42C659Dc09109566720EA8b2De186c2Be7D94D9",
        "proxy__getIsOssified": false,
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "STETH": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "symbol": "unstETH",
        "unfinalizedRequestNumber": 94,
        "unfinalizedStETH": "4631046956987049272650",
        "WSTETH": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0"
      },
      "implementationNames": {
        "0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1": "OssifiableProxy",
        "0xE42C659Dc09109566720EA8b2De186c2Be7D94D9": "WithdrawalQueueERC721"
      }
    },
    {
      "address": "0x891bbCfEF0C7504218b3156Cd0795cA5C8c7d489",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ProxyAdmin",
      "address": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0xae641c7d7a83bba7fa913b9544f946dc23ca0527c2f4abb9c6a3496f49375218"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x25E5F8B1E7aDf44518d35D5B2271f114e081f0E5",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x5e4C39Ad7A3E881585e383dB9827EB4811f6F647",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x93c4b944D05dfe6df7645A86cd2206016c51564D",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x948a420b8CC1d6BFd0B6087C2E7c344a2CD0bc39",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1686348935,
      "sinceBlock": 17445563,
      "values": {
        "$immutable": true,
        "owner": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111"
      },
      "implementationNames": {
        "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444": "ProxyAdmin"
      }
    },
    {
      "address": "0x8c910517388c87611e7aa4A6AEaaB7De7a649092",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x8ED83c6Bb12E441Ca2C3a544F525d4a3Fb6484D8",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can confirm batches to the DA bridge.",
          "role": ".batchConfirmers"
        }
      ]
    },
    {
      "name": "EIP712StETH",
      "address": "0x8F73e4C2A6D852bb4ab2A45E6a9CF5715b3228B7",
      "type": "Contract",
      "sourceHashes": [
        "0x15185b2d9f11dcf2ea4d005741fa941922e233e89fc5742793ebfb0ca05897c4"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1683023915,
      "sinceBlock": 17172546,
      "values": { "$immutable": true },
      "implementationNames": {
        "0x8F73e4C2A6D852bb4ab2A45E6a9CF5715b3228B7": "EIP712StETH"
      }
    },
    {
      "address": "0x8F8bD9e43972F7015FCAB5B99f21F904790e967c",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x8ffCF07A59631f0578f3E84B51C48cF0dEADCd95",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "EigenPodManager",
      "address": "0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338",
      "type": "Contract",
      "template": "eigenlayer/EigenPodManager",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0xbe7ad5846796adf94452f7dc75108c6c396689c7f7be205733374d0ef6c126ca"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": ["numPods"],
      "sinceTimestamp": 1686348947,
      "sinceBlock": 17445564,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0x8dB49233e3b7691D68745A31e4A0Cd9Cf924B7E9",
        "$pastUpgrades": [
          [
            "2023-06-09T22:15:47.000Z",
            "0x91d2c5fe26523df0e735f27df02925f42f66843eba7a414acc6bbdcc10bd6785",
            ["0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9"]
          ],
          [
            "2023-06-09T22:16:47.000Z",
            "0x080396d23f4e4b23c8c5dc9491368b3c9ea0eaa96627b60d66259fe35322054e",
            ["0xEB86a5c40FdE917E6feC440aBbCDc80E3862e111"]
          ],
          [
            "2024-04-08T16:35:59.000Z",
            "0x39a8f50ef3a5e0cba11b2556bcf3f95ece0797de15b2fdde2f5820361da19b13",
            ["0xe4297e3DaDBc7D99e26a2954820f514CB50C5762"]
          ],
          [
            "2024-09-04T16:00:47.000Z",
            "0x7c4214538630d20d915cd9871694ba7a2eece833dccabc7e43a8a9d2c73bc267",
            ["0x731A0aD160e407393Ff662231Add6Dd145AD3FEa"]
          ],
          [
            "2025-04-17T22:30:11.000Z",
            "0xf5cdad33da1d1a2f3a9b315ed67eab912df6e23fa98b4561f42ae1b4f5594ba2",
            ["0x9801266CbBbe1E94bB9dAf7de8D61528f49CeC77"]
          ],
          [
            "2025-05-07T20:56:59.000Z",
            "0xa21ccea07638809e5c429ef2b354259ff13aee47b3a5c0452143e2bd162a0968",
            ["0x8dB49233e3b7691D68745A31e4A0Cd9Cf924B7E9"]
          ]
        ],
        "$upgradeCount": 6,
        "beaconChainETHStrategy": "0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0",
        "burnableETHShares": 0,
        "delegationManager": "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
        "eigenPodBeacon": "0x5a2a4F2F3C18f09179B6703e63D9eDD165909073",
        "ethPOS": "0x00000000219ab540356cBB839Cbe05303d7705Fa",
        "numPods": 33806,
        "owner": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "pectraForkTimestamp": 1746612311,
        "proofTimestampSetter": "0xBE1685C81aA44FF9FB319dD389addd9374383e90",
        "version": "1.4.1"
      },
      "implementationNames": {
        "0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338": "TransparentUpgradeableProxy",
        "0x8dB49233e3b7691D68745A31e4A0Cd9Cf924B7E9": "EigenPodManager"
      }
    },
    {
      "name": "StrategyBaseTVLLimits",
      "address": "0x93c4b944D05dfe6df7645A86cd2206016c51564D",
      "type": "Contract",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0xeeae2315884914d515d0026a50d7322f8d8d513c643f4ec7cf5b3c1302d04ba7"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1686349019,
      "sinceBlock": 17445570,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178",
        "$pastUpgrades": [
          [
            "2023-06-09T22:16:59.000Z",
            "0x2d3c7d1611d7d6f9331598452e2a567c223b1ba5e8cfac15e81c1e352ce30cba",
            ["0xdfdA04f980bE6A64E3607c95Ca26012Ab9aA46d3"]
          ],
          [
            "2025-04-17T22:30:11.000Z",
            "0xf5cdad33da1d1a2f3a9b315ed67eab912df6e23fa98b4561f42ae1b4f5594ba2",
            ["0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178"]
          ]
        ],
        "$upgradeCount": 2,
        "explanation": "Base Strategy implementation to inherit from for more complex implementations",
        "getTVLLimits": [
          "115792089237316195423570985008687907853269984665640564039457584007913129639935",
          "115792089237316195423570985008687907853269984665640564039457584007913129639935"
        ],
        "maxPerDeposit": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "maxTotalDeposits": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "sharesToUnderlying": [0, 1, 2, 3, 4],
        "sharesToUnderlyingView": [0, 1, 2, 3, 4],
        "strategyManager": "0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
        "totalShares": "789590954394522717619193",
        "underlyingToken": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "underlyingToShares": [0, 0, 1, 2, 3],
        "underlyingToSharesView": [0, 0, 1, 2, 3],
        "version": "1.3.0"
      },
      "errors": {
        "sharesToUnderlying": "Processing error occurred.",
        "sharesToUnderlyingView": "Processing error occurred.",
        "underlyingToShares": "Processing error occurred.",
        "underlyingToSharesView": "Processing error occurred."
      },
      "implementationNames": {
        "0x93c4b944D05dfe6df7645A86cd2206016c51564D": "TransparentUpgradeableProxy",
        "0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178": "StrategyBaseTVLLimits"
      }
    },
    {
      "name": "AllocationManager",
      "address": "0x948a420b8CC1d6BFd0B6087C2E7c344a2CD0bc39",
      "type": "Contract",
      "template": "eigenlayer/AllocationManager",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x82974ffe4d2eaf842109ba34b64dc6aaacd4ab2040d3c53815e2cdf43946630b"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract used to create Operator Sets, and used by Operators to register to them. The Allocation Manager tracks allocation of stake to a Operator Set, and enables AVSs to slash that stake.",
      "sinceTimestamp": 1744052255,
      "sinceBlock": 22218956,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0x740058839A1668Af5700e5d7B062007275e77D25",
        "$pastUpgrades": [
          [
            "2025-04-07T18:57:35.000Z",
            "0x8a175833c16d3e56c8c4ee6851de69c63f17560dd8dac16c5cafdc343a817ff6",
            ["0x740058839A1668Af5700e5d7B062007275e77D25"]
          ]
        ],
        "$upgradeCount": 1,
        "ALLOCATION_CONFIGURATION_DELAY": 126000,
        "DEALLOCATION_DELAY": 100800,
        "delegation": "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
        "owner": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "permissionController": "0x25E5F8B1E7aDf44518d35D5B2271f114e081f0E5",
        "version": "1.3.0"
      },
      "implementationNames": {
        "0x948a420b8CC1d6BFd0B6087C2E7c344a2CD0bc39": "TransparentUpgradeableProxy",
        "0x740058839A1668Af5700e5d7B062007275e77D25": "AllocationManager"
      }
    },
    {
      "address": "0x97b4A6E0471A7c5906fF1Cc2a5970ed569B04815",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "NodeELRewardVault",
      "address": "0x97c92752DD8a8947cE453d3e35D2cad5857367af",
      "type": "Contract",
      "sourceHashes": [
        "0xa86d815477c11e894f144431da6020e21cf40e85bbb7bfd0665254d1793d9b17"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1685990495,
      "sinceBlock": 17416154,
      "values": { "$immutable": true },
      "implementationNames": {
        "0x97c92752DD8a8947cE453d3e35D2cad5857367af": "NodeELRewardVault"
      }
    },
    {
      "name": "ACL",
      "address": "0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb",
      "type": "Contract",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0x766bf5f8bd85cd18a36ec23449bcbb22c66fbc01f44a2e38ff2a06dd5919eb4b"
      ],
      "proxyType": "EIP897 proxy",
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "0x9f3b9198911054B122fDb865f8A5Ac516201c339",
        "ANY_ENTITY": "0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF",
        "appId": "0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a",
        "BURN_ENTITY": "0x0000000000000000000000000000000000000001",
        "CREATE_PERMISSIONS_ROLE": "0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a",
        "EMPTY_PARAM_HASH": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
        "getEVMScriptRegistry": "0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getInitializationBlock": 11473216,
        "getRecoveryVault": "0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "0x9f3b9198911054B122fDb865f8A5Ac516201c339",
        "isDepositable": false,
        "isPetrified": false,
        "kernel": "0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "NO_PERMISSION": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "proxyType": 2
      },
      "implementationNames": {
        "0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb": "AppProxyUpgradeable",
        "0x9f3b9198911054B122fDb865f8A5Ac516201c339": "ACL"
      }
    },
    {
      "address": "0x9b2C61521AF4AB9f4BE25297838F72a56462B578",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "name": "ExchangeRateUpdater",
      "address": "0x9b37180d847B27ADC13C2277299045C1237Ae281",
      "type": "Contract",
      "sourceHashes": [
        "0x98e3bbdacc542e5c3a095b9d74ad28c8ec703afb58eff6f7ead1a92ef1a5dd18"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1643910274,
      "sinceBlock": 14134435,
      "values": {
        "$immutable": true,
        "owner": "0x352978614FA84D763882A9023B169D8709C477f8",
        "tokenContract": "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704"
      },
      "implementationNames": {
        "0x9b37180d847B27ADC13C2277299045C1237Ae281": "ExchangeRateUpdater"
      }
    },
    {
      "address": "0x9C7E495F6220c2Eccf19Ce73a2d1d486D53296E4",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "name": "SocializingPool",
      "address": "0x9d4C3166c59412CEdBe7d901f5fDe41903a1d6Fc",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x170a2e2d9caa7e02c993a4fdf4c7577936df6bad137f76374298ce5f8bbb9c5b"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990447,
      "sinceBlock": 17416150,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0xCC0DAB27C23599cD7D2b7a04edF0730F8B2509a7",
        "$pastUpgrades": [
          [
            "2023-06-05T18:40:47.000Z",
            "0x0f8ce7b60070afe4f425f6155ccc48833bf5cb4b8a58219e6e053596ae9d7d0c",
            ["0xE87D8f52B730DB026ED1b0F15a2BD6380BD6b057"]
          ],
          [
            "2023-06-16T07:08:23.000Z",
            "0xb1b2819f3d97c9e888391901b44838a3b7871b1a57bfe1e6a0c70dfd1f948450",
            ["0x1082A48779188C53507d28b1D2A4B17Ad839be6D"]
          ],
          [
            "2024-02-20T05:28:23.000Z",
            "0xe91dee27425aa96874624b0a598c0ff5ae44db14e63519f3ad61c1fe18dff977",
            ["0xCC0DAB27C23599cD7D2b7a04edF0730F8B2509a7"]
          ]
        ],
        "$upgradeCount": 3,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getCurrentRewardsIndex": 28,
        "getRewardCycleDetails": [
          [1, 17617749],
          [17617750, 17819349],
          [17819350, 18020949],
          [18020950, 18222549]
        ],
        "getRewardDetails": {
          "currentIndex": 28,
          "currentStartBlock": 22859350,
          "currentEndBlock": 23060949
        },
        "handledRewards": [false, true, true, true, true],
        "initialBlock": 17416150,
        "lastReportedRewardsData": {
          "reportingBlockNumber": 22859349,
          "index": 27,
          "merkleRoot": "0xe4dddab3ba0fdbb09a4af7ec3ad86bb38fe528d4068cd6a151c66f1e4f565525",
          "poolId": 2,
          "operatorETHRewards": "908500334287624806",
          "userETHRewards": "20441257521471558489",
          "protocolETHRewards": "1362750501431437232",
          "operatorSDRewards": 0
        },
        "paused": false,
        "rewardsDataMap": [
          [
            0,
            0,
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
            0,
            0,
            0,
            0
          ],
          [
            17617749,
            1,
            "0x7e0380215bd703b48d944b908843516e2f86a108628a1801817373abdcb5e369",
            2,
            0,
            0,
            0,
            0
          ],
          [
            17819349,
            2,
            "0x0a98834f7e3b71cd455cc5fba1104706d841a1fe11cebe142891a208672969c0",
            2,
            0,
            0,
            0,
            0
          ],
          [
            18020949,
            3,
            "0x378e825f9b64a4600bf20cba35d2457dca9487f7644fa2fe2cb8b358057c588a",
            2,
            5780702882229186,
            "104052651880125354",
            5780702882229186,
            0
          ],
          [
            18222549,
            4,
            "0xe414b68878826164ca3d62d25ebe6c791126c1aaac0ebf8ce6762c2b4d5c2331",
            2,
            "22889774655294673",
            "412015943795304137",
            "22889774655294674",
            0
          ]
        ],
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "totalOperatorETHRewardsRemaining": "5639901892666035731",
        "totalOperatorSDRewardsRemaining": 0
      },
      "errors": {
        "handledRewards": "Processing error occurred.",
        "rewardsDataMap": "Processing error occurred."
      },
      "implementationNames": {
        "0x9d4C3166c59412CEdBe7d901f5fDe41903a1d6Fc": "TransparentUpgradeableProxy",
        "0xCC0DAB27C23599cD7D2b7a04edF0730F8B2509a7": "SocializingPool"
      }
    },
    {
      "name": "StrategyBaseTVLLimits",
      "address": "0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d",
      "type": "Contract",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0xeeae2315884914d515d0026a50d7322f8d8d513c643f4ec7cf5b3c1302d04ba7"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1701791243,
      "sinceBlock": 18721131,
      "values": {
        "$admin": "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444",
        "$implementation": "0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178",
        "$pastUpgrades": [
          [
            "2023-12-05T15:47:23.000Z",
            "0x98c6f2080df9ded027ca703bb52acef213576aa9b376f9c7451e41ab4c265170",
            ["0xdfdA04f980bE6A64E3607c95Ca26012Ab9aA46d3"]
          ],
          [
            "2025-04-17T22:30:11.000Z",
            "0xf5cdad33da1d1a2f3a9b315ed67eab912df6e23fa98b4561f42ae1b4f5594ba2",
            ["0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178"]
          ]
        ],
        "$upgradeCount": 2,
        "explanation": "Base Strategy implementation to inherit from for more complex implementations",
        "getTVLLimits": [
          "115792089237316195423570985008687907853269984665640564039457584007913129639935",
          "115792089237316195423570985008687907853269984665640564039457584007913129639935"
        ],
        "maxPerDeposit": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "maxTotalDeposits": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "paused": 0,
        "pauserRegistry": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
        "sharesToUnderlying": [0, 1, 2, 3, 4],
        "sharesToUnderlyingView": [0, 1, 2, 3, 4],
        "strategyManager": "0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
        "totalShares": "80334605394014902726152",
        "underlyingToken": "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
        "underlyingToShares": [0, 1, 2, 3, 4],
        "underlyingToSharesView": [0, 1, 2, 3, 4],
        "version": "1.3.0"
      },
      "errors": {
        "sharesToUnderlying": "Processing error occurred.",
        "sharesToUnderlyingView": "Processing error occurred.",
        "underlyingToShares": "Processing error occurred.",
        "underlyingToSharesView": "Processing error occurred."
      },
      "implementationNames": {
        "0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d": "TransparentUpgradeableProxy",
        "0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178": "StrategyBaseTVLLimits"
      }
    },
    {
      "name": "UserWithdrawalManager",
      "address": "0x9F0491B32DBce587c50c4C43AB303b06478193A7",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0xccd5e9a92d5980e3c83be4c7176f513127d09e43d6420bcd99848bc31d904d5a"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990495,
      "sinceBlock": 17416154,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x678f0D5Aac7398502B50B24B3Ce67EA2dC4Fc29C",
        "$pastUpgrades": [
          [
            "2023-06-05T18:41:35.000Z",
            "0x4d44b60c27fff6c9380e325aaf6b3aa993107d49cf0d9e83c601f9e0538ef015",
            ["0x0f9479226734eF4FD25B36470584f8E1Ab620E0c"]
          ],
          [
            "2023-10-16T05:19:11.000Z",
            "0x7bfc4184b4b93a8e70e77b86695e33ee9cac40627578fa1c10df7b56b38bf32c",
            ["0x678f0D5Aac7398502B50B24B3Ce67EA2dC4Fc29C"]
          ]
        ],
        "$upgradeCount": 2,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "ethRequestedForWithdraw": "3142809343161704641",
        "finalizationBatchLimit": 50,
        "maxNonRedeemedUserRequestCount": 1000,
        "nextRequestId": 5988,
        "nextRequestIdToFinalize": 5985,
        "paused": false,
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "userWithdrawRequests": [
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0]
        ]
      },
      "errors": { "userWithdrawRequests": "Processing error occurred." },
      "implementationNames": {
        "0x9F0491B32DBce587c50c4C43AB303b06478193A7": "TransparentUpgradeableProxy",
        "0x678f0D5Aac7398502B50B24B3Ce67EA2dC4Fc29C": "UserWithdrawalManager"
      }
    },
    {
      "name": "ETHx Token",
      "address": "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0xdef78c789e7659c7dbd7b8143be087c4f9ab799ddc3f61c5c7b731dce08f6baa"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990327,
      "sinceBlock": 17416140,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x4C22fFd479637EA0eD61D451CBe6355627283358",
        "$pastUpgrades": [
          [
            "2023-06-05T18:38:47.000Z",
            "0x1e457b3e821b24eb514b95c640eee302a03c26ec9faf658b2394c40f51580a48",
            ["0x4C22fFd479637EA0eD61D451CBe6355627283358"]
          ]
        ],
        "$upgradeCount": 1,
        "BURNER_ROLE": "0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848",
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "MINTER_ROLE": "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
        "name": "ETHx",
        "paused": false,
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "symbol": "ETHx",
        "totalSupply": "145390133946208989852115"
      },
      "implementationNames": {
        "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b": "TransparentUpgradeableProxy",
        "0x4C22fFd479637EA0eD61D451CBe6355627283358": "ETHx"
      }
    },
    {
      "address": "0xA3e302a6Ea0cf79B8580d94e92Eb5514292daacE",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Rocket Pool ETH Token",
      "address": "0xae78736Cd615f374D3085123A210448E74Fc6393",
      "type": "Contract",
      "sourceHashes": [
        "0x3abd0076b3c015fb6e0288c4b962b0d8f5b529971dccac72ead20921ae9279b2"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1632980684,
      "sinceBlock": 13325304,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "getCollateralRate": 59149,
        "getEthValue": [0, 1, 2, 3, 4],
        "getExchangeRate": "1140559780909858485",
        "getRethValue": [0, 0, 1, 2, 3],
        "getTotalCollateral": 27870162274,
        "name": "Rocket Pool ETH",
        "symbol": "rETH",
        "totalSupply": "413113585295523885518943",
        "version": 1
      },
      "errors": {
        "getEthValue": "Processing error occurred.",
        "getRethValue": "Processing error occurred."
      },
      "implementationNames": {
        "0xae78736Cd615f374D3085123A210448E74Fc6393": "RocketTokenRETH"
      }
    },
    {
      "name": "Liquid staked Ether 2.0 Token",
      "address": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
      "type": "Contract",
      "template": "tokens/Lido/stETH",
      "sourceHashes": [
        "0xe95d65e50752cf7b137131ff78cb164641fe141b0780189482701ebda1b66d4a",
        "0xdc88f413a8e8c93a3ee2d7f0ca94090b4b1feb8393663061d7bccedc81812975"
      ],
      "proxyType": "EIP897 proxy",
      "ignoreInWatchMode": [
        "getFeeDistribution",
        "totalSupply",
        "getBeaconStat",
        "getBufferedEther",
        "getDepositableEther",
        "getStakeLimitFullInfo",
        "getTotalPooledEther",
        "getTotalShares",
        "getCurrentStakeLimit"
      ],
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb",
        "appId": "0x3ca7c3e38968823ccb4c78ea688df41356f182ae1d159e4ee608d30d68cef320",
        "canDeposit": true,
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0x260e7e1a220ea89b9454cbcdc1fcc44087325df199a3986e560d75db18b2e253",
        "eip712Domain": {
          "name": "Liquid staked Ether 2.0",
          "version": "2",
          "chainId": 1,
          "verifyingContract": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84"
        },
        "getBeaconStat": {
          "depositedValidators": 398146,
          "beaconValidators": 397169,
          "beaconBalance": "9092130140549607000000000"
        },
        "getBufferedEther": "2873068652718255998576",
        "getContractVersion": 2,
        "getCurrentStakeLimit": "150000000000000000000000",
        "getDepositableEther": 0,
        "getEIP712StETH": "0x8F73e4C2A6D852bb4ab2A45E6a9CF5715b3228B7",
        "getEVMScriptRegistry": "0x853cc0D5917f49B57B8e9F89e491F5E18919093A",
        "getFee": 999,
        "getFeeDistribution": {
          "treasuryFeeBasisPoints": 5125,
          "insuranceFeeBasisPoints": 0,
          "operatorsFeeBasisPoints": 4874
        },
        "getInitializationBlock": 11473216,
        "getLidoLocator": "0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
        "getOracle": "0x442af784A788A5bd6F42A01Ebe9F287a871243fb",
        "getRecoveryVault": "0x0000000000000000000000000000000000000000",
        "getStakeLimitFullInfo": {
          "isStakingPaused": false,
          "isStakingLimitSet": true,
          "currentStakeLimit": "150000000000000000000000",
          "maxStakeLimit": "150000000000000000000000",
          "maxStakeLimitGrowthBlocks": 6400,
          "prevStakeLimit": "149999897023080000000000",
          "prevStakeBlockNumber": 22872691
        },
        "getTotalPooledEther": "9126267209202325255998576",
        "getTotalShares": "7557764386361831326066868",
        "getTreasury": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "getWithdrawalCredentials": "0x010000000000000000000000b9d7934878b5fb9610b3fe8a5e441e8fad7e293f",
        "hasInitialized": true,
        "implementation": "0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb",
        "isDepositable": false,
        "isPetrified": false,
        "isStakingPaused": false,
        "isStopped": false,
        "kernel": "0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
        "name": "Liquid staked Ether 2.0",
        "PAUSE_ROLE": "0x139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d",
        "proxyType": 2,
        "RESUME_ROLE": "0x2fc10cc8ae19568712f7a176fb4978616a610650813c9d05326c34abb62749c7",
        "STAKING_CONTROL_ROLE": "0xa42eee1333c0758ba72be38e728b6dadb32ea767de5b4ddbaea1dae85b1b051f",
        "STAKING_PAUSE_ROLE": "0x84ea57490227bc2be925c684e2a367071d69890b629590198f4125a018eb1de8",
        "symbol": "stETH",
        "totalSupply": "9126267209202325255998576",
        "UNSAFE_CHANGE_DEPOSITED_VALIDATORS_ROLE": "0xe6dc5d79630c61871e99d341ad72c5a052bed2fc8c79e5a4480a7cd31117576c"
      },
      "implementationNames": {
        "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84": "AppProxyUpgradeable",
        "0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb": "Lido"
      }
    },
    {
      "name": "PermissionedNodeRegistry",
      "address": "0xaf42d795A6D279e9DCc19DC0eE1cE3ecd4ecf5dD",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0xefb5f9b9332c835c9c36d844b8a1d172d084c32960d747e268b5cdf6fbb63e8a"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990363,
      "sinceBlock": 17416143,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x549CFb2EBbB21c20e1C35bF3b944cC76D13177B9",
        "$pastUpgrades": [
          [
            "2023-06-05T18:39:23.000Z",
            "0xf128ceae4b5f3b6371907fc534a81dc6ef2406148d57ee657d8b86b89983adde",
            ["0x506B066A118F8Ef5f1eE016e2c52BD54d6877Ffb"]
          ],
          [
            "2023-06-16T07:08:59.000Z",
            "0x4b66c3eaa94e9c9d4b0884cc450e42e16b44f56858acfbc4ad5c38bb3be5aaea",
            ["0x106c7053FBb563BCB06b723072bf0628Db69B27B"]
          ],
          [
            "2023-10-16T05:16:59.000Z",
            "0x5b60ec3e7820983aa2abd5235afd3a174d5d8240ea59fadd4428dc25da2a6354",
            ["0xF2b656B2fC829Ac1450cAD03DC302D680ebbc214"]
          ],
          [
            "2025-02-21T07:03:23.000Z",
            "0xeebec7dfa21323a243d72c2d3fc79bc32710c24d21d6b0af364fdf87cfc089b2",
            ["0x549CFb2EBbB21c20e1C35bF3b944cC76D13177B9"]
          ]
        ],
        "$upgradeCount": 4,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getCollateralETH": 0,
        "getOperatorRewardAddress": [
          "0x0000000000000000000000000000000000000000",
          "0x5A14BD3f2bf84c3690d653F1d40cfb7a8a9B3c26",
          "0xb851788Fa34B0d9215F54531061D4e2e06A74AEE",
          "0x7D4854ef27e8E5cfCE9001fc8fB380E2aBE268ec",
          "0x59eCf48345A221E0731E785ED79eD40d0A94E2A5"
        ],
        "getOperatorTotalKeys": [0, 54, 600, 530, 510],
        "getSocializingPoolStateChangeBlock": [
          0, 17428062, 17520381, 17521918, 17537242
        ],
        "getTotalActiveValidatorCount": 3182,
        "getTotalQueuedValidatorCount": 24,
        "inputKeyCountLimit": 50,
        "maxNonTerminalKeyPerOperator": 1000,
        "maxOperatorId": 13,
        "nextOperatorId": 12,
        "nextQueuedValidatorIndexByOperatorId": [0, 54, 600, 530, 510],
        "nextValidatorId": 4775,
        "operatorIdForExcessDeposit": 10,
        "operatorStructById": [
          [
            false,
            false,
            "",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            true,
            true,
            "stader-permissioned-internal",
            "0x5A14BD3f2bf84c3690d653F1d40cfb7a8a9B3c26",
            "0xaB9DEe304E65D6Fffc7b0f5E6381578F8138aE55"
          ],
          [
            true,
            true,
            "Stakin",
            "0xb851788Fa34B0d9215F54531061D4e2e06A74AEE",
            "0xb851788Fa34B0d9215F54531061D4e2e06A74AEE"
          ],
          [
            true,
            true,
            "Stakely",
            "0x7D4854ef27e8E5cfCE9001fc8fB380E2aBE268ec",
            "0xd541aEecB38c21D2A3C3269B977B8c2B7AD36221"
          ],
          [
            false,
            true,
            "CryptoManufaktur",
            "0x59eCf48345A221E0731E785ED79eD40d0A94E2A5",
            "0x3E7ba0b5015dBc209a4eAc1a3Ef3CBEF0162CF11"
          ]
        ],
        "paused": false,
        "POOL_ID": 2,
        "proposedRewardAddressByOperatorId": [
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000"
        ],
        "socializingPoolStateChangeBlock": [
          0, 17428062, 17520381, 17521918, 17537242
        ],
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "totalActiveOperatorCount": 9,
        "totalActiveValidatorCount": 3182,
        "validatorRegistry": [
          [
            0,
            "0x",
            "0x",
            "0x",
            "0x0000000000000000000000000000000000000000",
            0,
            0,
            0
          ],
          [
            4,
            "0x81b5ae54f41f78c67f39d07698e689b0641ea1974b8f580f52938d196679ee61f2940d6dfbd7b93fd929965fb690af46",
            "0xa7dbbe619082846818d9911beb3ca27f9b5b140f1b67f36ed812f0c02a518bdac4f95ea3d1c3b86c5d5fd44e8c3141da0b339257d4cea901da2274bada711f2fa106e956d43010f42b0c0ebed11c9948fa3284de224eda2a214d95b9ebcc851d",
            "0xb635d33fe35018b6d0cefb335d29c596f62a888d8482a136ec78caff6f759ab723ec1157a402fd87ac542d3e196f794d060af2046586a2bdb118a896a8956db53f2c46a32f1d6cbd10334070011b2922f35a79e66de437bae979f4c9a1f484cf",
            "0xb02fEC3EcE9e9FcB80709375204e7bDD4bD8C66a",
            1,
            17441351,
            0
          ],
          [
            4,
            "0xa9968703286b4f2f18357f8d433fb468fb5c125812959f5b4e6ef3be151f011ad88832f4f02b2052d5453aba6a2ab8e8",
            "0x82430d57b50457f6b7f153806ab3962384147f628d7873c13e6c91d4f900323f06b87994c820f371cbdc91fe2e6f3ba8155d374137506aa097fa1173da99dbef0bac4b2bc1ce392e46482dd3907a48399a2206c8354a1cf0904748beb491d3b1",
            "0x88942d816f45bcf1ce0a7c4f891ee7e3bc49f82aae3e2c1d2f3a976cc7a2dfe95f28993c5b2a94ae6ce47a247590c08f143ff0fd09d9636e2437069600e40a0bde811ff7280ac2bb5bed8b09d7abf6d53b7a5a3b232fa2c0ebdc685bf1ae09fb",
            "0x9B2e0c472aA3231EcFB9A8a5bB2019E1CB781D7A",
            1,
            17441351,
            0
          ],
          [
            4,
            "0xb2afbda9927103466a5da4a867850a0f1a3790233a05dfb7c127a22a3723b816c00f9c05c320478219f580fa67d6177c",
            "0x893b332911125cd577455b4a1adde2241cb6f5deb537b0f96052159a453fb3433404956e7259f96444ca477164b82b13186e612eec87ecf21e8a4a78796e2404507c0f4bfd12bcbe98795fb1acf2a5cca451c524af8cdd73545a0dc5402f098f",
            "0x873e5c813522615319d7b322181f73b9721893e8057b2263dc48a05caa1ed7b161a631216a6b7fe77c0b2283afd1c470125e06601dfd23e2786825bd146c3ca64601d08dd84df67e513df33e1ae965045b2d3029eb960e2c34660fbbd70ee28a",
            "0x3f0eFee8CAFf49Acd317D29DeEe909137785FaeA",
            1,
            17526171,
            0
          ],
          [
            5,
            "0xa16855f83ae264477d7eb42d0a37e4dbe567df2ae7a195f6a8f5c34f63be92d065a723a935696cad2f9540d12bdf8b6d",
            "0xa7f30bbf66e1ba9db5da7c96395da77ed63d4b1abd707750d6754b0cccf4d6a00b982d59a7985c46fe5ed8dae1fac92b06035bae478d8b7f4484eb0b8073876b66bcb9182d4637cd95824a67a05122a8e916f4b05497116702318e480fb7a5ee",
            "0x8ef7f93cf4e5ad00b65a7d03e374658d8ee8e807fecd479b0cb2e034dda8958648d8ccf14fa1a74a78d2fc676b327fad1435e1579117c4b47f443fea9503f62a8d3234d7316d98342f0fa20494cf6fda6cf1c3ddd22a66b92bd458516e4f7fb0",
            "0x1e7e1287BE20a49d70C4cb81809cAF7270bE0ca0",
            2,
            17533301,
            18455121
          ]
        ],
        "verifiedKeyBatchSize": 50
      },
      "errors": {
        "getOperatorRewardAddress": "Processing error occurred.",
        "getOperatorTotalKeys": "Processing error occurred.",
        "getSocializingPoolStateChangeBlock": "Processing error occurred.",
        "nextQueuedValidatorIndexByOperatorId": "Processing error occurred.",
        "operatorStructById": "Processing error occurred.",
        "proposedRewardAddressByOperatorId": "Processing error occurred.",
        "socializingPoolStateChangeBlock": "Processing error occurred.",
        "validatorRegistry": "Processing error occurred."
      },
      "implementationNames": {
        "0xaf42d795A6D279e9DCc19DC0eE1cE3ecd4ecf5dD": "TransparentUpgradeableProxy",
        "0x549CFb2EBbB21c20e1C35bF3b944cC76D13177B9": "PermissionedNodeRegistry"
      }
    },
    {
      "address": "0xAF4D94Cd299211de542530399290877E2c85F061",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "PaymentVault",
      "address": "0xb2e7ef419a2A399472ae22ef5cFcCb8bE97A4B05",
      "type": "Contract",
      "template": "eigenlayer/PaymentVault",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0xf39de15799feffaa8711b3b5e9ff8fb4c66ef1cbac1fe00cc984f957663d73d1"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Entrypoint for making reservations and on demand payments for EigenDA.",
      "sinceTimestamp": 1744750295,
      "sinceBlock": 22276885,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0x62242213E6FA34E943844f9B3124150EFb9CB0dD",
        "$pastUpgrades": [
          [
            "2025-04-15T20:51:35.000Z",
            "0x359ca1fa527881edba34879bf633971940ab7addc0c00d96eebbe318fb3f8bd5",
            ["0x62242213E6FA34E943844f9B3124150EFb9CB0dD"]
          ]
        ],
        "$upgradeCount": 1,
        "globalRatePeriodInterval": 30,
        "globalSymbolsPerPeriod": 131072,
        "lastPriceUpdateTime": 1744750295,
        "minNumSymbols": 4096,
        "owner": "0x002721B4790d97dC140a049936aA710152Ba92D5",
        "pricePerSymbol": 447000000,
        "priceUpdateCooldown": 1,
        "reservationPeriodInterval": 300
      },
      "implementationNames": {
        "0xb2e7ef419a2A399472ae22ef5cFcCb8bE97A4B05": "TransparentUpgradeableProxy",
        "0x62242213E6FA34E943844f9B3124150EFb9CB0dD": "PaymentVault"
      }
    },
    {
      "address": "0xb7Ae34BB33da55f12797e793E01e63a17B11d108",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "PauserRegistry",
      "address": "0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
      "type": "Contract",
      "template": "eigenlayer/EigenLayerPauserRegistry",
      "sourceHashes": [
        "0xe9ee049170eb130e342de2dc60d0af26bed01b9483da5f0a828cfa5095aca44c"
      ],
      "proxyType": "immutable",
      "description": "Defines and stores pauser and unpauser roles for EigenLayer contracts.",
      "sinceTimestamp": 1744052255,
      "sinceBlock": 22218956,
      "values": {
        "$immutable": true,
        "pausers": [
          "0x5050389572f2d220ad927CcbeA0D406831012390",
          "0xBE1685C81aA44FF9FB319dD389addd9374383e90",
          "0x369e6F597e22EaB55fFb173C6d9cD234BD699111"
        ],
        "unpauser": "0x369e6F597e22EaB55fFb173C6d9cD234BD699111"
      },
      "implementationNames": {
        "0xB8765ed72235d279c3Fb53936E4606db0Ef12806": "PauserRegistry"
      }
    },
    {
      "address": "0xB89001Ef513E10482B2667a0fC70F06cfF3a7418",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E",
          "role": "admin",
          "via": [
            { "address": "eth:0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea" }
          ]
        }
      ]
    },
    {
      "name": "Kernel",
      "address": "0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc",
      "type": "Contract",
      "sourceHashes": [
        "0x3ef00bf119dbb1f46a05a35111f35da84bb45cac1abfa574989211677d16787a",
        "0x452458b35204910fe71376b423bd8d2887a1e82d22843fd79880d4ac0dce2a33"
      ],
      "proxyType": "EIP897 proxy",
      "sinceTimestamp": 1608242396,
      "sinceBlock": 11473216,
      "values": {
        "$immutable": false,
        "$implementation": "0x2b33CF282f867A7FF693A66e11B0FcC5552e4425",
        "acl": "0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb",
        "APP_ADDR_NAMESPACE": "0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb",
        "APP_BASES_NAMESPACE": "0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f",
        "APP_MANAGER_ROLE": "0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0",
        "CORE_NAMESPACE": "0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8",
        "DEFAULT_ACL_APP_ID": "0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a",
        "getInitializationBlock": 11473216,
        "getRecoveryVault": "0x0000000000000000000000000000000000000000",
        "hasInitialized": true,
        "implementation": "0x2b33CF282f867A7FF693A66e11B0FcC5552e4425",
        "isDepositable": false,
        "isPetrified": false,
        "KERNEL_APP_ID": "0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c",
        "proxyType": 2,
        "recoveryVaultAppId": "0x0000000000000000000000000000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc": "KernelProxy",
        "0x2b33CF282f867A7FF693A66e11B0FcC5552e4425": "Kernel"
      }
    },
    {
      "name": "WithdrawalVault",
      "address": "0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f",
      "type": "Contract",
      "sourceHashes": [
        "0x5cbdf8b8bb204120168ae7790c42ca01a3c365626be04e051f3be6c99a63d794",
        "0xfed378d959d7c0807be954e4650d7b087554f356d30c10c652058ea4ef14c0ca"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1626093401,
      "sinceBlock": 12812480,
      "values": {
        "$admin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "0xCC52f17756C04bBa7E377716d7062fC36D7f69Fd",
        "$pastUpgrades": [
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["0xCC52f17756C04bBa7E377716d7062fC36D7f69Fd"]
          ]
        ],
        "$upgradeCount": 1,
        "getContractVersion": 1,
        "implementation": "0xCC52f17756C04bBa7E377716d7062fC36D7f69Fd",
        "LIDO": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "proxy_getAdmin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy_getIsOssified": false,
        "TREASURY": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"
      },
      "implementationNames": {
        "0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f": "WithdrawalsManagerProxy",
        "0xCC52f17756C04bBa7E377716d7062fC36D7f69Fd": "WithdrawalVault"
      }
    },
    {
      "name": "IndexRegistry",
      "address": "0xBd35a7a1CDeF403a6a99e4E8BA0974D198455030",
      "type": "Contract",
      "template": "eigenlayer/IndexRegistry",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x0a21d40cd8eeee384b8feb55d745d69c6793753a08622872cc24972811a97da9"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "A registry contract that keeps track of an ordered list of operators for each quorum.",
      "sinceTimestamp": 1712353799,
      "sinceBlock": 19592323,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0x1ae0b73118906f39D5ED30Ae4A484ce2F479a14c",
        "$pastUpgrades": [
          [
            "2024-04-05T21:49:59.000Z",
            "0xfebe64f00a8d96fe319e7b388f6cf4c4fb343dac129610a1c978f2ffc2e70a36",
            ["0x1f96861fEFa1065a5A96F20Deb6D8DC3ff48F7f9"]
          ],
          [
            "2024-04-05T21:49:59.000Z",
            "0x59468c0a593e95396455fade35463fcff5e9e310e1da5fef0de8f9ad00645acc",
            ["0x1ae0b73118906f39D5ED30Ae4A484ce2F479a14c"]
          ]
        ],
        "$upgradeCount": 2,
        "OPERATOR_DOES_NOT_EXIST_ID": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "registryCoordinator": "0x0BAAc79acD45A023E19345c352d8a7a83C4e5656"
      },
      "implementationNames": {
        "0xBd35a7a1CDeF403a6a99e4E8BA0974D198455030": "TransparentUpgradeableProxy",
        "0x1ae0b73118906f39D5ED30Ae4A484ce2F479a14c": "IndexRegistry"
      }
    },
    {
      "name": "EigenLayerOperationsMultisig",
      "address": "0xBE1685C81aA44FF9FB319dD389addd9374383e90",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" }
          ]
        },
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "interact",
          "from": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
          "description": "can cancel scheduled operations",
          "role": ".cancellers"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x25E5F8B1E7aDf44518d35D5B2271f114e081f0E5",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x5e4C39Ad7A3E881585e383dB9827EB4811f6F647",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x93c4b944D05dfe6df7645A86cd2206016c51564D",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x948a420b8CC1d6BFd0B6087C2E7c344a2CD0bc39",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" },
            {
              "address": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "delay": 864000
            }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x0c431C66F4dE941d089625E5B423D00707977060",
          "role": ".pausers"
        },
        {
          "permission": "act",
          "from": "eth:0xB8765ed72235d279c3Fb53936E4606db0Ef12806",
          "role": ".pausers"
        },
        {
          "permission": "act",
          "from": "eth:0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
          "delay": 864000,
          "role": ".proposers"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1686327791,
      "sinceBlock": 17443829,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0xdC541e2B4adD96888b2C79006F49A9748A4f1bDF",
          "0xE31ad7cFD94bD74C40b53160aA0E8A0b6D340830",
          "0xb7Ae34BB33da55f12797e793E01e63a17B11d108",
          "0x27ff193A6A1574A611E21c39FDA636fA1d61ba30",
          "0xFBB1A3C8C8A99A2A4797250dF87E307Dc3f01Fe0",
          "0xe7fFd467F7526abf9c8796EDeE0AD30110419127"
        ],
        "$threshold": 3,
        "domainSeparator": "0x34c8be0f1205a420b291c5ce97375b669d2d120e32d7aa5ea9f2497a0fbcc3e2",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 6 (50%)",
        "nonce": 72,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "0xBE1685C81aA44FF9FB319dD389addd9374383e90": "GnosisSafeProxy",
        "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "StaderInsuranceFund",
      "address": "0xbe3781CE437Cc3fC8c8167913B4d462347D11F20",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x4e60bb3fef2bf3f74d9667ead3e9a6860c63f6272395a951cb6a48dc6ba6e3cf"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990459,
      "sinceBlock": 17416151,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x2540939c846b8096534B0dCC6eBb6eBdF3ae1F3D",
        "$pastUpgrades": [
          [
            "2023-06-05T18:40:59.000Z",
            "0x03c9944198d3c07ce3300efcc53aba60acbef6728211b172f240883ed733edac",
            ["0x2540939c846b8096534B0dCC6eBb6eBdF3ae1F3D"]
          ]
        ],
        "$upgradeCount": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB"
      },
      "implementationNames": {
        "0xbe3781CE437Cc3fC8c8167913B4d462347D11F20": "TransparentUpgradeableProxy",
        "0x2540939c846b8096534B0dCC6eBb6eBdF3ae1F3D": "StaderInsuranceFund"
      }
    },
    {
      "address": "0xBE3c68821D585Cf1552214897a1c091014B1EB0a",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Coinbase Wrapped Staked ETH Token",
      "address": "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",
      "type": "Contract",
      "sourceHashes": [
        "0x3e6aa5a9e907eadff9fe4df338a8f629966b60307fbbe5956fb9886d74822fd1",
        "0xd3dbde7b05135719d2d2d58952d49300061bc1f4a385239b4b7fd985b83fe2fa"
      ],
      "proxyType": "ZeppelinOS proxy",
      "sinceTimestamp": 1643901537,
      "sinceBlock": 14133762,
      "values": {
        "$admin": "0xDEd1F5e7Fb71c1740AEBc09b6b0a5E24b0cB71d1",
        "$immutable": false,
        "$implementation": "0x31724cA0C982A31fbb5C57f4217AB585271fc9a5",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "admin": "0xDEd1F5e7Fb71c1740AEBc09b6b0a5E24b0cB71d1",
        "blacklister": "0xBE3c68821D585Cf1552214897a1c091014B1EB0a",
        "CANCEL_AUTHORIZATION_TYPEHASH": "0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429",
        "currency": "",
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0x04f14019d5946f59c261cc47c80cce951ffd35ef52dbed0e2c02d646c9013541",
        "exchangeRate": "1105037338625045664",
        "implementation": "0x31724cA0C982A31fbb5C57f4217AB585271fc9a5",
        "masterMinter": "0xd0F73E06E7b88c8e1da291bB744c4eEBAf9Af59f",
        "name": "Coinbase Wrapped Staked ETH",
        "oracle": "0x9b37180d847B27ADC13C2277299045C1237Ae281",
        "owner": "0xD0f9b590EAe80815b81bE857A21f69d07453560E",
        "paused": false,
        "pauser": "0x46574f57f3F5DFCCd296F80407b3f4778414f8f5",
        "PERMIT_TYPEHASH": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
        "RECEIVE_WITH_AUTHORIZATION_TYPEHASH": "0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8",
        "rescuer": "0x0000000000000000000000000000000000000000",
        "symbol": "cbETH",
        "totalSupply": "393750601365061869784889",
        "TRANSFER_WITH_AUTHORIZATION_TYPEHASH": "0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267",
        "version": "2"
      },
      "implementationNames": {
        "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704": "FiatTokenProxy",
        "0x31724cA0C982A31fbb5C57f4217AB585271fc9a5": "StakedTokenV1"
      }
    },
    {
      "address": "0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OracleDaemonConfig",
      "address": "0xbf05A929c3D7885a6aeAd833a992dA6E5ac23b09",
      "type": "Contract",
      "sourceHashes": [
        "0x6f38bad385eb6769def612742a8a4ab65d19921bffe96d1ee9241121e2ae1aba"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1683022991,
      "sinceBlock": 17172469,
      "values": {
        "$immutable": true,
        "CONFIG_MANAGER_ROLE": "0xbbfb55d933c2bfa638763473275b1d84c4418e58d26cf9d2cd5758237756d9f0",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000"
      },
      "implementationNames": {
        "0xbf05A929c3D7885a6aeAd833a992dA6E5ac23b09": "OracleDaemonConfig"
      }
    },
    {
      "name": "TimelockController",
      "address": "0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
      "type": "Contract",
      "template": "eigenlayer/TimelockControllerOwning",
      "sourceHashes": [
        "0x12390526d42e4274ef9e5135daddbb0595f5b9ace39b78e269965424334da88c"
      ],
      "proxyType": "immutable",
      "description": "A timelock that allows scheduling calls and executing or cancelling them with a delay.",
      "sinceTimestamp": 1732234379,
      "sinceBlock": 21239612,
      "values": {
        "$immutable": true,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": []
          },
          "TIMELOCK_ADMIN_ROLE": {
            "adminRole": "TIMELOCK_ADMIN_ROLE",
            "members": [
              "0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d",
              "0xFEA47018D632A77bA579846c840d5706705Dc598"
            ]
          },
          "PROPOSER_ROLE": {
            "adminRole": "TIMELOCK_ADMIN_ROLE",
            "members": [
              "0xBE1685C81aA44FF9FB319dD389addd9374383e90",
              "0x461854d84Ee845F905e0eCf6C288DDEEb4A9533F"
            ]
          },
          "EXECUTOR_ROLE": {
            "adminRole": "TIMELOCK_ADMIN_ROLE",
            "members": ["0x461854d84Ee845F905e0eCf6C288DDEEb4A9533F"]
          },
          "CANCELLER_ROLE": {
            "adminRole": "TIMELOCK_ADMIN_ROLE",
            "members": ["0xBE1685C81aA44FF9FB319dD389addd9374383e90"]
          }
        },
        "CANCELLER_ROLE": "0xfd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f783",
        "cancellers": ["0xBE1685C81aA44FF9FB319dD389addd9374383e90"],
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "EXECUTOR_ROLE": "0xd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63",
        "executors": ["0x461854d84Ee845F905e0eCf6C288DDEEb4A9533F"],
        "getMinDelay": 864000,
        "PROPOSER_ROLE": "0xb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1",
        "proposers": [
          "0xBE1685C81aA44FF9FB319dD389addd9374383e90",
          "0x461854d84Ee845F905e0eCf6C288DDEEb4A9533F"
        ],
        "TIMELOCK_ADMIN_ROLE": "0x5f58e3a2316349923ce3780f8d587db2d72378aed66a8261c916544fa6846ca5"
      },
      "implementationNames": {
        "0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d": "TimelockController"
      }
    },
    {
      "name": "LidoLocator",
      "address": "0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb",
      "type": "Contract",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0x69f924232e2916fff05aa3d4f0cbd7fd46005b8747ebacff3ac5e16761107735"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1681295123,
      "sinceBlock": 17031323,
      "values": {
        "$admin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "0x3ABc4764f0237923d52056CFba7E9AEBf87113D3",
        "$pastUpgrades": [
          [
            "2023-04-12T10:25:23.000Z",
            "0x3a2910624533935cc8c21837b1705bcb159a760796930097016186be705cc455",
            ["0xEC3B38EDc7878Ad3f18cFddcd341aa94Fc57d20B"]
          ],
          [
            "2023-04-13T09:33:35.000Z",
            "0x299b401a2312fa081a6cb5012797a0f5a23b07394a96d505ebf7f4ab6420ff63",
            ["0x2faE8f0A4D8D11B6EC35d04d3Ea6a0d195EB6D3F"]
          ],
          [
            "2023-04-14T07:17:47.000Z",
            "0x20aab9de778f007c034b35a11206f7e17ec8b28f9c8beabc26a8551ecab8f9f6",
            ["0xc601E93D9F48D5E374820957CdA57516e2523d6C"]
          ],
          [
            "2023-04-18T11:24:23.000Z",
            "0x6105c893856a2528347ff1b2efd0838097b8c562670116f60bb76eb54cb80ce6",
            ["0xd4f6BEF8DdBc7306684b8D7c836269e0E6f8B6D0"]
          ],
          [
            "2023-05-10T15:04:35.000Z",
            "0x3b419bde1ce29392444d861c02f3846ce0ea65b0caa50dbd5136f1ff46cddf4f",
            ["0x1D920cc5bACf7eE506a271a5259f2417CaDeCE1d"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["0x1D920cc5bACf7eE506a271a5259f2417CaDeCE1d"]
          ],
          [
            "2024-10-11T16:21:11.000Z",
            "0xc7bc3019721ecf320698f2897b329d1930f64661100a5fa159181146088e03c2",
            ["0x39aFE23cE59e8Ef196b81F0DCb165E9aD38b9463"]
          ],
          [
            "2024-10-25T16:03:23.000Z",
            "0x0078b3e0cecb3b50c78a22e0b1a985e6cde3bf431e9cb3b2ba4e50260122d542",
            ["0x3ABc4764f0237923d52056CFba7E9AEBf87113D3"]
          ]
        ],
        "$upgradeCount": 8,
        "accountingOracle": "0x852deD011285fe67063a08005c71a85690503Cee",
        "burner": "0xD15a672319Cf0352560eE76d9e89eAB0889046D3",
        "coreComponents": [
          "0x388C818CA8B9251b393131C08a736A67ccB19297",
          "0x6232397ebac4f5772e53285B26c47914E9461E75",
          "0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
          "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
          "0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
          "0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f"
        ],
        "depositSecurityModule": "0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD",
        "elRewardsVault": "0x388C818CA8B9251b393131C08a736A67ccB19297",
        "legacyOracle": "0x442af784A788A5bd6F42A01Ebe9F287a871243fb",
        "lido": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "oracleDaemonConfig": "0xbf05A929c3D7885a6aeAd833a992dA6E5ac23b09",
        "oracleReportComponentsForLido": [
          "0x852deD011285fe67063a08005c71a85690503Cee",
          "0x388C818CA8B9251b393131C08a736A67ccB19297",
          "0x6232397ebac4f5772e53285B26c47914E9461E75",
          "0xD15a672319Cf0352560eE76d9e89eAB0889046D3",
          "0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
          "0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f",
          "0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823"
        ],
        "oracleReportSanityChecker": "0x6232397ebac4f5772e53285B26c47914E9461E75",
        "postTokenRebaseReceiver": "0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823",
        "proxy__getAdmin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "0x3ABc4764f0237923d52056CFba7E9AEBf87113D3",
        "proxy__getIsOssified": false,
        "stakingRouter": "0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
        "treasury": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "validatorsExitBusOracle": "0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e",
        "withdrawalQueue": "0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",
        "withdrawalVault": "0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f"
      },
      "implementationNames": {
        "0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb": "OssifiableProxy",
        "0x3ABc4764f0237923d52056CFba7E9AEBf87113D3": "LidoLocator"
      }
    },
    {
      "name": "StaderStakePoolsManager",
      "address": "0xcf5EA1b38380f6aF39068375516Daf40Ed70D299",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x606535d2bbf30ec84e06209fbaaf1e86fd4a0623f511f62df6f8bcdcfda03f62"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990483,
      "sinceBlock": 17416153,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x716DF97EBC05CCb2745Bf04CD67df75cf2d11ee9",
        "$pastUpgrades": [
          [
            "2023-06-05T18:41:23.000Z",
            "0x6b32c8cb58b14d2d804e68a55200dc51b23b1f844057b2080852e5c127e2418b",
            ["0xb7Bde2975330679e01ca07Ed2d8c071B1c61247F"]
          ],
          [
            "2023-06-16T07:07:35.000Z",
            "0x87c18e94de0b56942c89d4dc94f3de4e15f6ea4e8cd63afbabddfb6064760f92",
            ["0x9dceaeB1C035C1427E64E6c6fEC61F816e0d0FF5"]
          ],
          [
            "2023-10-16T05:20:59.000Z",
            "0xe976165479eb34194671c7c9d1a9fbaff3e648c1d815f34bd4af6c7413a7fd40",
            ["0x716DF97EBC05CCb2745Bf04CD67df75cf2d11ee9"]
          ]
        ],
        "$upgradeCount": 3,
        "convertToAssets": [0, 1, 2, 3, 4],
        "convertToShares": [0, 0, 1, 2, 3],
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "excessETHDepositCoolDown": 21600000,
        "getExchangeRate": "1064520956095144973",
        "isVaultHealthy": true,
        "lastExcessETHDepositBlock": 17565295,
        "maxDeposit": "10000000000000000000000",
        "minDeposit": 100000000000000,
        "paused": false,
        "previewDeposit": [0, 0, 1, 2, 3],
        "previewWithdraw": [0, 1, 2, 3, 4],
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "totalAssets": "154754718651109183210090"
      },
      "errors": {
        "convertToAssets": "Processing error occurred.",
        "convertToShares": "Processing error occurred.",
        "previewDeposit": "Processing error occurred.",
        "previewWithdraw": "Processing error occurred."
      },
      "implementationNames": {
        "0xcf5EA1b38380f6aF39068375516Daf40Ed70D299": "TransparentUpgradeableProxy",
        "0x716DF97EBC05CCb2745Bf04CD67df75cf2d11ee9": "StaderStakePoolsManager"
      }
    },
    {
      "address": "0xd0F73E06E7b88c8e1da291bB744c4eEBAf9Af59f",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xD0f9b590EAe80815b81bE857A21f69d07453560E",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Burner",
      "address": "0xD15a672319Cf0352560eE76d9e89eAB0889046D3",
      "type": "Contract",
      "template": "tokens/Lido/Burner",
      "sourceHashes": [
        "0x10157e5d64980dbfd1f7d94307306bb86c3e3a9bb481af9253f4df368a6542f2"
      ],
      "proxyType": "immutable",
      "ignoreInWatchMode": [
        "getCoverSharesBurnt",
        "getExcessStETH",
        "getNonCoverSharesBurnt",
        "getSharesRequestedToBurn"
      ],
      "sinceTimestamp": 1683024071,
      "sinceBlock": 17172559,
      "values": {
        "$immutable": true,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getCoverSharesBurnt": "14684898881648297203",
        "getExcessStETH": 0,
        "getNonCoverSharesBurnt": "9919359819651829991230988",
        "getSharesRequestedToBurn": {
          "coverShares": 0,
          "nonCoverShares": "55988399618264595"
        },
        "REQUEST_BURN_MY_STETH_ROLE": "0x28186f938b759084eea36948ef1cd8b40ec8790a98d5f1a09b70879fe054e5cc",
        "REQUEST_BURN_SHARES_ROLE": "0x4be29e0e4eb91f98f709d98803cba271592782e293b84a625e025cbb40197ba8",
        "STETH": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "TREASURY": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c"
      },
      "implementationNames": {
        "0xD15a672319Cf0352560eE76d9e89eAB0889046D3": "Burner"
      }
    },
    {
      "name": "EigenDARelayRegistry",
      "address": "0xD160e6C1543f562fc2B0A5bf090aED32640Ec55B",
      "type": "Contract",
      "template": "eigenlayer/EigenDARelayRegistry",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x2a5d28cd901637b2eed614152fc63ba60a2a5e10127efe030849aec4cfe64007"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Registry for EigenDA relay keys, maps key to address.",
      "sinceTimestamp": 1744750223,
      "sinceBlock": 22276879,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0xF6D82FBBdf700c086389e72C3023812e956ECa9e",
        "$pastUpgrades": [
          [
            "2025-04-15T20:50:23.000Z",
            "0x5542d5049911c1b3f1a3d0e2f2c861a7e473c817622998049b78529202e6a374",
            ["0xF6D82FBBdf700c086389e72C3023812e956ECa9e"]
          ]
        ],
        "$upgradeCount": 1,
        "nextRelayKey": 1,
        "owner": "0x002721B4790d97dC140a049936aA710152Ba92D5",
        "relayers": [
          {
            "relay": "0xe8437B66E834B7CdC90cC5D98B8DD6e636b37D7a",
            "relayURL": "relay-0-mainnet-ethereum.eigenda.xyz"
          }
        ]
      },
      "fieldMeta": {
        "relayers": { "severity": "HIGH", "type": "RISK_PARAMETER" }
      },
      "implementationNames": {
        "0xD160e6C1543f562fc2B0A5bf090aED32640Ec55B": "TransparentUpgradeableProxy",
        "0xF6D82FBBdf700c086389e72C3023812e956ECa9e": "EigenDARelayRegistry"
      }
    },
    {
      "name": "PermissionlessPool",
      "address": "0xd1a72Bd052e0d65B7c26D3dd97A98B74AcbBb6c5",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x0a557cddf985a4da071b355e6d4b6dbcf272eb1466f849cceb0f1c97a67f985d"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990399,
      "sinceBlock": 17416146,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x30C2501B3B2031fBA3000DAa6f8ED0a42fBbB3F0",
        "$pastUpgrades": [
          [
            "2023-06-05T18:39:59.000Z",
            "0x86be83c2596b1486c6edc2ba31ea8fce28cf3439d8c935f4f5d8f43cb2dda811",
            ["0x30C2501B3B2031fBA3000DAa6f8ED0a42fBbB3F0"]
          ]
        ],
        "$upgradeCount": 1,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DEPOSIT_NODE_BOND": "3000000000000000000",
        "getCollateralETH": "4000000000000000000",
        "getNodeRegistry": "0x4f4Bfa0861F62309934a5551E0B2541Ee82fdcF1",
        "getSocializingPoolAddress": "0x1DE458031bFbe5689deD5A8b9ed57e1E79EaB2A4",
        "getTotalActiveValidatorCount": 1829,
        "getTotalQueuedValidatorCount": 0,
        "MAX_COMMISSION_LIMIT_BIPS": 1500,
        "operatorFee": 600,
        "protocolFee": 400,
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB"
      },
      "implementationNames": {
        "0xd1a72Bd052e0d65B7c26D3dd97A98B74AcbBb6c5": "TransparentUpgradeableProxy",
        "0x30C2501B3B2031fBA3000DAa6f8ED0a42fBbB3F0": "PermissionlessPool"
      }
    },
    {
      "address": "0xD2Ee81Cf07B12140C793FcE5B26313CDd9d78eA8",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x130d8EA0052B45554e4C99079B84df292149Bd5E",
          "description": "can eject DA operators from a quorum.",
          "role": ".ejectors"
        }
      ]
    },
    {
      "address": "0xdb0948Ba83610ef1Bc7a2863c16a257B6bF5f6A7",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E",
          "role": "admin",
          "via": [
            { "address": "eth:0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea" }
          ]
        }
      ]
    },
    {
      "name": "EigenDAThresholdRegistry",
      "address": "0xdb4c89956eEa6F606135E7d366322F2bDE609F15",
      "type": "Contract",
      "template": "eigenlayer/EigenDAThresholdRegistry",
      "sourceHashes": [
        "0xd87f004d37330210f1eb137e4498b14ba6340f079eaa0e9e7a22c1d4f76dde7d",
        "0x7de6bfaca27d4a2d2ff694543af488ed523e89a1f239036f972852611a228eae"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Registry of EigenDA threshold (i.e, adversary and confirmation threshold percentage for a quorum)",
      "sinceTimestamp": 1744750211,
      "sinceBlock": 22276878,
      "values": {
        "$admin": "0x8247EF5705d3345516286B72bFE6D690197C2E99",
        "$implementation": "0x92104977f16dAe423966caa5cD9C115F2D25a8D6",
        "$pastUpgrades": [
          [
            "2025-04-15T20:50:11.000Z",
            "0x903e00f79e1b98e13ebbc40db4c023249e3dca47685bd30ad86962d60aa83292",
            ["0x92104977f16dAe423966caa5cD9C115F2D25a8D6"]
          ]
        ],
        "$upgradeCount": 1,
        "nextBlobVersion": 1,
        "owner": "0x002721B4790d97dC140a049936aA710152Ba92D5",
        "quorumAdversaryThresholdPercentages": "0x212121",
        "quorumConfirmationThresholdPercentages": "0x373737",
        "quorumNumbersRequired": "0x0001"
      },
      "fieldMeta": {
        "getQuorumAdversaryThresholdPercentage": {
          "severity": "HIGH",
          "type": "RISK_PARAMETER"
        },
        "getQuorumConfirmationThresholdPercentage": {
          "severity": "HIGH",
          "type": "RISK_PARAMETER"
        },
        "quorumNumbersRequired": {
          "severity": "HIGH",
          "type": "RISK_PARAMETER"
        }
      },
      "implementationNames": {
        "0xdb4c89956eEa6F606135E7d366322F2bDE609F15": "TransparentUpgradeableProxy",
        "0x92104977f16dAe423966caa5cD9C115F2D25a8D6": "EigenDAThresholdRegistry"
      }
    },
    {
      "address": "0xdC541e2B4adD96888b2C79006F49A9748A4f1bDF",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xDEd1F5e7Fb71c1740AEBc09b6b0a5E24b0cB71d1",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",
          "role": "admin"
        }
      ]
    },
    {
      "address": "0xe0550117Cb066D3b330eBd764B0d75D3BA378734",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x0BAAc79acD45A023E19345c352d8a7a83C4e5656",
          "description": "can approve the replacement of churned operators from a quorum",
          "role": ".churnApprover"
        }
      ]
    },
    {
      "name": "Safe",
      "address": "0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E",
          "role": "admin"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1751444639,
      "sinceBlock": 22830326,
      "values": {
        "$immutable": false,
        "$implementation": "0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "0x2EAB2633c6180Ec592fB7A22EDAF323ccA51F85A",
          "0xdb0948Ba83610ef1Bc7a2863c16a257B6bF5f6A7",
          "0x5C044174cC9bcA35b933a2B5107b494BAFf34Bb6",
          "0xB89001Ef513E10482B2667a0fC70F06cfF3a7418",
          "0x1eB7d5898A9b3dCB8145e37B564ef00bC4cB794D"
        ],
        "$threshold": 1,
        "domainSeparator": "0xe5ed4b04915a7a7780d4b0883fc23c2e4cd46001417c16e98d6b179b5c963bfc",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "1 of 5 (20%)",
        "nonce": 1,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea": "SafeProxy",
        "0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "name": "SDIncentiveController",
      "address": "0xe225825bcf20F39E2F2e2170412a3247D83492D0",
      "type": "Contract",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x39c0061470d2dd87463dbda5cf825352731c721109783e43a2a8281de1de04da"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1707630371,
      "sinceBlock": 19202836,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x0d39d0d37B345F87a6a264d949c04dF7fc3F4026",
        "$pastUpgrades": [
          [
            "2024-02-11T05:46:11.000Z",
            "0x838d13b0cc9067c78beb150526df829a6ff62e6d48f8383ec24fa77fcefb9da4",
            ["0x0d39d0d37B345F87a6a264d949c04dF7fc3F4026"]
          ]
        ],
        "$upgradeCount": 1,
        "DECIMAL": "1000000000000000000",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "emissionPerBlock": "59530000000000000",
        "lastUpdateBlockNumber": 22843935,
        "rewardEndBlock": 22843935,
        "rewardPerToken": "192710365140142185",
        "rewardPerTokenStored": "192710365140142185",
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB"
      },
      "implementationNames": {
        "0xe225825bcf20F39E2F2e2170412a3247D83492D0": "TransparentUpgradeableProxy",
        "0x0d39d0d37B345F87a6a264d949c04dF7fc3F4026": "SDIncentiveController"
      }
    },
    {
      "name": "EigenPod",
      "address": "0xe2E2dB234b0FFB9AFe41e52dB7d3c2B8585646c3",
      "type": "Contract",
      "sourceHashes": [
        "0x564faf98ddc9e52975727858b28dca79e2e9c255cc327d002b4a92f648341b68"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1745598923,
      "sinceBlock": 22347263,
      "values": {
        "$immutable": true,
        "activeValidatorCount": 0,
        "currentCheckpoint": {
          "beaconBlockRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "proofsRemaining": 0,
          "podBalanceGwei": 0,
          "balanceDeltasGwei": 0,
          "prevBeaconBalanceGwei": 0
        },
        "currentCheckpointTimestamp": 0,
        "eigenPodManager": "0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338",
        "ethPOS": "0x00000000219ab540356cBB839Cbe05303d7705Fa",
        "GENESIS_TIME": 1606824023,
        "lastCheckpointTimestamp": 0,
        "podOwner": "0x0000000000000000000000000000000000000000",
        "proofSubmitter": "0x0000000000000000000000000000000000000000",
        "version": "1.4.1",
        "withdrawableRestakedExecutionLayerGwei": 0
      },
      "implementationNames": {
        "0xe2E2dB234b0FFB9AFe41e52dB7d3c2B8585646c3": "EigenPod"
      }
    },
    {
      "address": "0xE31ad7cFD94bD74C40b53160aA0E8A0b6D340830",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xE34e8Cab673cA3fC60AD8bf8e503f4CA4Afb2D89",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "address": "0xe37756BEdDC89e94A8d557fd5b95a4D2a57e9D60",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "TokenRateNotifier",
      "address": "0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823",
      "type": "Contract",
      "sourceHashes": [
        "0x6f6c2b5fe89e476b4a6700268156a2f5e028a4e7607ae4e93223d77f95fcb7d2"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1724328035,
      "sinceBlock": 20584006,
      "values": {
        "$immutable": true,
        "INDEX_NOT_FOUND": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
        "LIDO": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "MAX_OBSERVERS_COUNT": 32,
        "observers": ["0xd54c1c6413caac3477AC14b2a80D5398E3c32FfE"],
        "observersLength": 1,
        "owner": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "REQUIRED_INTERFACE": "0xa16ba44d"
      },
      "implementationNames": {
        "0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823": "TokenRateNotifier"
      }
    },
    {
      "address": "0xe7fFd467F7526abf9c8796EDeE0AD30110419127",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0xe8F09A9D42aEA0a3B393aD06F25CF512eA51707e",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "SDUtilityPool",
      "address": "0xED6EE5049f643289ad52411E9aDeC698D04a9602",
      "type": "Contract",
      "sourceHashes": [
        "0x993403059c5620e6c91110514f9f4a2f2331c55dab587699c67c19edddab92ad",
        "0x1f55e035c7eed1061948793bfc5d58c5606f44accce0349c88f7eb86fdfe4591"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1707630371,
      "sinceBlock": 19202836,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x3d38Bc6187Ab8403ba4fb9220D78Fb9dD0191CAC",
        "$pastUpgrades": [
          [
            "2024-02-11T05:46:11.000Z",
            "0x307e621b681c1ca556431ea74daff89e51b6c65f9206b60b29e1093a99dd459c",
            ["0x3d38Bc6187Ab8403ba4fb9220D78Fb9dD0191CAC"]
          ]
        ],
        "$upgradeCount": 1,
        "accrualBlockNumber": 22872391,
        "accumulatedProtocolFee": 0,
        "conservativeEthPerKey": "2000000000000000000",
        "cTokenTotalSupply": "5084051346246153923836215",
        "DECIMAL": "1000000000000000000",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "delegatorWithdrawRequests": [
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          [
            "0x3CB673783b7F383afc87d9e39e9b44F86CFD1b08",
            "999996186933345298",
            "1000071610000000000",
            "1000071610000000000",
            19296630
          ],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          ["0x0000000000000000000000000000000000000000", 0, 0, 0, 0],
          [
            "0x5572bF309Fd52069CdEb4D787974E9bE83940CE9",
            "3997831836476288588",
            "4000000000000000000",
            "4000000000000000000",
            19339264
          ]
        ],
        "exchangeRateStored": "1109353521948292814",
        "finalizationBatchLimit": 50,
        "getDelegationRatePerBlock": 20369405124,
        "getLatestExchangeRate": "1109360504381529238",
        "getLiquidationThreshold": 70,
        "getPoolAvailableSDBalance": "608106220078382532422882",
        "liquidations": [
          [
            "56881879409201640",
            5171079946291058,
            0,
            true,
            true,
            "0xF6349eEe20aEcD62C9891159fB714a1b5adE93Cd"
          ]
        ],
        "MAX_PROTOCOL_FEE": "100000000000000000",
        "MAX_UTILIZATION_RATE_PER_BLOCK": 95129375951,
        "maxETHWorthOfSDPerValidator": "1000000000000000000",
        "maxNonRedeemedDelegatorRequestCount": 1000,
        "MIN_SD_DELEGATE_LIMIT": 1000000000000000,
        "MIN_SD_WITHDRAW_LIMIT": 1000000000000,
        "minBlockDelayToFinalizeRequest": 50400,
        "nextRequestId": 287,
        "nextRequestIdToFinalize": 284,
        "paused": false,
        "poolUtilization": "892179944482337444",
        "protocolFee": 0,
        "riskConfig": {
          "liquidationThreshold": 70,
          "liquidationBonusPercent": 10,
          "liquidationFeePercent": 0,
          "ltv": 50
        },
        "sdRequestedForWithdraw": "318198304800000000000000",
        "sdReservedForClaim": "53202386813491502586990",
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "totalUtilizedSD": "5031904046645747815205071",
        "utilizationRatePerBlock": 22831050228,
        "utilizeIndex": "1137916056755797494"
      },
      "errors": { "delegatorWithdrawRequests": "Processing error occurred." },
      "implementationNames": {
        "0xED6EE5049f643289ad52411E9aDeC698D04a9602": "TransparentUpgradeableProxy",
        "0x3d38Bc6187Ab8403ba4fb9220D78Fb9dD0191CAC": "SDUtilityPool"
      }
    },
    {
      "address": "0xED732DEb32034e603bEEEdA84605dAbb8933594b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "PoolUtils",
      "address": "0xeDA89ed8F89D786D816F8E14CF8d2F90c6BF763f",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x508413cabac31cb91381e0f9d370787a6e613435825e86000eb4157552c9b369"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1685990423,
      "sinceBlock": 17416148,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0xBAA0c93E3e24E863E86C7B508Fc0dC57Bc5718a0",
        "$pastUpgrades": [
          [
            "2023-06-05T18:40:23.000Z",
            "0xee539543f6e26be8996ded2a22d6ef89eb34856a63f44ae04bf82bcce13172d7",
            ["0xE7Fc2aC2451C8544D1fA2851d67633acE507Bd7C"]
          ],
          [
            "2023-06-23T05:31:23.000Z",
            "0xdccac68465715f3cd7c3194f0bf7e4f0b74b721d5578d801e8b50c70f857eac6",
            ["0xc4f53a6c259a6951406534b214564b3B529719E4"]
          ],
          [
            "2024-02-20T15:54:35.000Z",
            "0xa551ac6f228b4cee0a4037a8bb39abec21563608e636c6d5e35a5e8da98c870c",
            ["0xBAA0c93E3e24E863E86C7B508Fc0dC57Bc5718a0"]
          ]
        ],
        "$upgradeCount": 3,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "getPoolIdArray": [1, 2],
        "getTotalActiveValidatorCount": 5011,
        "poolIdArray": [1, 2],
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB"
      },
      "implementationNames": {
        "0xeDA89ed8F89D786D816F8E14CF8d2F90c6BF763f": "TransparentUpgradeableProxy",
        "0xBAA0c93E3e24E863E86C7B508Fc0dC57Bc5718a0": "PoolUtils"
      }
    },
    {
      "address": "0xEFca484E497a9de170Da32abfa11650957dD2a95",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x5050389572f2d220ad927CcbeA0D406831012390" }
          ]
        }
      ]
    },
    {
      "name": "StaderOracle",
      "address": "0xF64bAe65f6f2a5277571143A24FaaFDFC0C2a737",
      "type": "Contract",
      "sourceHashes": [
        "0x36a2777510f3b20063560bdcb7f657da283bcfdc484a19b0a0f77d18f6a8b5e1",
        "0x287a5184c1ddc7028a07972fc240e7dec1146640b29bb19d0a81d827103cf17d"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1686894467,
      "sinceBlock": 17490416,
      "values": {
        "$admin": "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e",
        "$implementation": "0x1C43cFf3ABBdaE07e57E03F0bd3DD813F40B4785",
        "$pastUpgrades": [
          [
            "2023-06-16T05:47:47.000Z",
            "0xa4e30c68be8421752951624a1e68d7413b291886823aa133b89fec59af35af6e",
            ["0x36a5d40AC8Acb7cEc9C0e61c4d1fD338eBF6E414"]
          ],
          [
            "2024-11-13T19:30:23.000Z",
            "0x1c19e16c3f329ce18f66ab4afe13cec69d31251b88ffffee909faef565d9a8e2",
            ["0x1C43cFf3ABBdaE07e57E03F0bd3DD813F40B4785"]
          ]
        ],
        "$upgradeCount": 2,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "ER_CHANGE_MAX_BPS": 10000,
        "erChangeLimit": 33,
        "erInspectionMode": false,
        "erInspectionModeStartBlock": 0,
        "ETHX_ER_UF": "0x783e3ebf40ee443ac9cbca8dc88c9f47450598583c2168f0ae0021de08ad333b",
        "exchangeRate": {
          "reportingBlockNumber": 22867200,
          "totalETHBalance": "154754718651109183210090",
          "totalETHXSupply": "145374985588613893014679"
        },
        "getERReportableBlock": 22867200,
        "getExchangeRate": {
          "reportingBlockNumber": 22867200,
          "totalETHBalance": "154754718651109183210090",
          "totalETHXSupply": "145374985588613893014679"
        },
        "getMissedAttestationPenaltyReportableBlock": 22831200,
        "getSDPriceInETH": 163294530769231,
        "getSDPriceReportableBlock": 22867200,
        "getValidatorStats": {
          "reportingBlockNumber": 22831200,
          "exitingValidatorsBalance": 0,
          "exitedValidatorsBalance": "32007625719000000000",
          "slashedValidatorsBalance": 0,
          "exitingValidatorsCount": 0,
          "exitedValidatorsCount": 0,
          "slashedValidatorsCount": 0
        },
        "getValidatorStatsReportableBlock": 22831200,
        "getValidatorVerificationDetailReportableBlock": 22872000,
        "getWithdrawnValidatorReportableBlock": 22872600,
        "inspectionModeExchangeRate": {
          "reportingBlockNumber": 0,
          "totalETHBalance": 0,
          "totalETHXSupply": 0
        },
        "isPORFeedBasedERData": false,
        "lastReportedMAPDIndex": 0,
        "lastReportedSDPriceData": {
          "reportingBlockNumber": 22867200,
          "sdPriceInETH": 163294530769231
        },
        "lastTrustedNodeCountChangeBlock": 21236307,
        "MAX_ER_UPDATE_FREQUENCY": 50400,
        "MIN_TRUSTED_NODES": 3,
        "MISSED_ATTESTATION_PENALTY_UF": "0xedb5588a851185ccd926df348aee898122cd3e827fb7020e3c966fdac62a46af",
        "paused": false,
        "safeMode": false,
        "SD_PRICE_UF": "0x8ec4e223bb52129c3d652c6e55a137389860823d9a02acb9d051e591994c6d6f",
        "staderConfig": "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB",
        "trustedNodeChangeCoolingPeriod": 0,
        "trustedNodesCount": 3,
        "VALIDATOR_STATS_UF": "0x7607f5053d01557adb731d4aad009009bba2bf77a5b5f779733919451d426336",
        "VALIDATOR_VERIFICATION_DETAIL_UF": "0x6a7b51c29672c0ed412394a3e65ab758361d7c963b8657ce8c1f43dc0770b162",
        "validatorStats": {
          "reportingBlockNumber": 22831200,
          "exitingValidatorsBalance": 0,
          "exitedValidatorsBalance": "32007625719000000000",
          "slashedValidatorsBalance": 0,
          "exitingValidatorsCount": 0,
          "exitedValidatorsCount": 0,
          "slashedValidatorsCount": 0
        },
        "WITHDRAWN_VALIDATORS_UF": "0x9ae142790790fc18374cd6a6cc28573ecc78841658523afa63055cea42a9e1dd"
      },
      "implementationNames": {
        "0xF64bAe65f6f2a5277571143A24FaaFDFC0C2a737": "TransparentUpgradeableProxy",
        "0x1C43cFf3ABBdaE07e57E03F0bd3DD813F40B4785": "StaderOracle"
      }
    },
    {
      "name": "Liquidity",
      "address": "0xF65e73aAc9182e353600a916a6c7681F810f79C3",
      "type": "Contract",
      "template": "intmax/Liquidity",
      "sourceHashes": [
        "0xbbe53a68c0042f4050bdf21e8d16eee4688dd35d24e49740915f0a0cf994f0d6",
        "0xb9275415e421469022740fa72e25fe3870493ce79c59fb83be697001992526cd"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1750500599,
      "sinceBlock": 22752152,
      "values": {
        "$admin": "0x0000000000000000000000000000000000000000",
        "$implementation": "0x0fE3E6018E53cb90020b5C06BC4c7c4FcEa1eBF0",
        "$pastUpgrades": [
          [
            "2025-06-21T10:09:59.000Z",
            "0xbb35cae7bb4711e7e2db56c10d3f09f1c2d482bb00912b6593577d4dd744a86e",
            ["0x0fE3E6018E53cb90020b5C06BC4c7c4FcEa1eBF0"]
          ]
        ],
        "$upgradeCount": 1,
        "amlPermitter": "0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E",
        "contribution": "0x4c614C7BB9420caA1F19cB2C58B00864f2125Ce2",
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "deploymentTime": 1750550400,
        "eligibilityPermitter": "0x0000000000000000000000000000000000000000",
        "getDepositData": [
          [
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          [
            "0x6acd54b8f315ba232ca8729210abccac3073dd371e366c1d10b77b822f6e1862",
            "0x8F8bD9e43972F7015FCAB5B99f21F904790e967c"
          ],
          [
            "0xef3e41f08e4837fd0be9969635f412d4915c5ff86ae3c10def4ceb0bf79e4f9a",
            "0x8c910517388c87611e7aa4A6AEaaB7De7a649092"
          ],
          [
            "0xeb6a853c7b43f5b2b28c58c2093515fa9c0ed77fd44696cdc6ba08f203ab6c17",
            "0x875B5C06893563bA573ABe9b16801cA31A6ba4f4"
          ],
          [
            "0x73c4c536a230e606807abb0b95a9d6ed8ed2b2ca361e54fcf7a48ba8bb26a59c",
            "0x875B5C06893563bA573ABe9b16801cA31A6ba4f4"
          ]
        ],
        "getDepositDataHash": [
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x6acd54b8f315ba232ca8729210abccac3073dd371e366c1d10b77b822f6e1862",
          "0xef3e41f08e4837fd0be9969635f412d4915c5ff86ae3c10def4ceb0bf79e4f9a",
          "0xeb6a853c7b43f5b2b28c58c2093515fa9c0ed77fd44696cdc6ba08f203ab6c17",
          "0x73c4c536a230e606807abb0b95a9d6ed8ed2b2ca361e54fcf7a48ba8bb26a59c"
        ],
        "getLastDepositId": 2652,
        "getLastRelayedDepositId": 2651,
        "getNativeTokenIndex": 0,
        "paused": false,
        "RELAY_LIMIT": 450,
        "RELAYER": "0xab4f864e5201b0fde9b5ee3e4cf96384802b0ffdfcf7f9de4699ce21a30afc4f",
        "rollup": "0x16f4BFeb925e748ef4Af8ce96E48d4B78Ec9da47",
        "UPGRADE_INTERFACE_VERSION": "5.0.0",
        "WITHDRAWAL": "0x738128fe393bef1bcd8a524796fff40618b938cd467c71fcf37850ab0ba4f7d7",
        "WITHDRAWAL_FEE_RATIO_LIMIT": 1500
      },
      "errors": {
        "getDepositData": "Processing error occurred.",
        "getDepositDataHash": "Processing error occurred.",
        "proxiableUUID": "Processing error occurred."
      },
      "implementationNames": {
        "0xF65e73aAc9182e353600a916a6c7681F810f79C3": "ERC1967Proxy",
        "0x0fE3E6018E53cb90020b5C06BC4c7c4FcEa1eBF0": "Liquidity"
      }
    },
    {
      "name": "PredicateServiceManager",
      "address": "0xf6f4A30EeF7cf51Ed4Ee1415fB3bFDAf3694B0d2",
      "type": "Contract",
      "template": "eigenlayer/PredicateServiceManager",
      "sourceHashes": [
        "0x525b22d02f8b39d3432dfaf0061e3d91caa10d282e86ec7abeb4ca11790f6762",
        "0x55b4084f8591b2c3c51011b50fe478e7761ce2cab412359b4df3b6941fcba322"
      ],
      "proxyType": "EIP1967 proxy",
      "sinceTimestamp": 1735344335,
      "sinceBlock": 21497263,
      "values": {
        "$admin": "0x7153803C06d6a36D6d91aEB3C1ed8e5b934Df601",
        "$implementation": "0x1BafAF26d236FbEA3E86075370B554eC0477bFD0",
        "$pastUpgrades": [
          [
            "2024-12-28T00:05:35.000Z",
            "0x3030c79bf2466b689e79aa234036a7919eddece8031f456a1ff43fd2f08dcf93",
            ["0xf419F9E764A1BE0C69da27f8d1167Cc1b4Ce2A82"]
          ],
          [
            "2025-01-02T22:39:11.000Z",
            "0xabcffaccc47e521d3e7ece41458e2657436c19347cd9c9f359b7ca5fda8da025",
            ["0x1D97E1B6ec794031bD475A4Af9CF375b15624929"]
          ],
          [
            "2025-05-08T14:43:11.000Z",
            "0x3e8496c487d693ccaaba5374092074412beefbf09fad7e2deff08e6aa25a8b5c",
            ["0x1BafAF26d236FbEA3E86075370B554eC0477bFD0"]
          ]
        ],
        "$upgradeCount": 3,
        "aggregator": "0x38f6001e8ac11240f903CBa56aFF72A1425ae371",
        "avsDirectory": "0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF",
        "delegationManager": "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
        "deployedPolicyIDs": [
          "x-sanctions-example-policy",
          "x-example-033f2ab1377d3510",
          "x-aleo-6571f4121bd9fe5d",
          "x-aleo-55814530df7fc3cf",
          "x-aleo-6a52de9724a6e8f2"
        ],
        "getDeployedPolicies": [
          "x-sanctions-example-policy",
          "x-example-033f2ab1377d3510",
          "x-aleo-6571f4121bd9fe5d",
          "x-aleo-55814530df7fc3cf",
          "x-aleo-6a52de9724a6e8f2",
          "x-intmax-42efa3d6c0609ea6",
          "x-test-policy",
          "x-test-random-forty-percent",
          "x-nest-42efa3d6c0609ea6",
          "x-nest-prod-42efa3d6c0609ea6",
          "x-nest-prod-42efa3d6c0609ea6+1",
          "x-nest-b23a863e53ddc756",
          "x-nest-prod-003",
          "x-test-001",
          "x-nest-004",
          "x-nest-prod-004",
          "x-test-prod",
          "x-temp-001",
          "x-temp-002",
          "x-test-prod-001"
        ],
        "getRestakeableStrategies": [
          "0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0",
          "0x93c4b944D05dfe6df7645A86cd2206016c51564D",
          "0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
          "0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0",
          "0x93c4b944D05dfe6df7645A86cd2206016c51564D",
          "0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
          "0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc",
          "0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d"
        ],
        "owner": "0x38f6001e8ac11240f903CBa56aFF72A1425ae371",
        "pendingOwner": "0x0000000000000000000000000000000000000000",
        "socialGraphIDs": [
          "sg_sanctions_sample",
          "sg_aleo_e1a88b035370407e",
          "sg_aleo_13c287f941c26253"
        ],
        "stakeRegistry": "0x006124Ae7976137266feeBFb3F4D2BE4C073139D",
        "strategies": [
          "0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0",
          "0x93c4b944D05dfe6df7645A86cd2206016c51564D",
          "0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
          "0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0",
          "0x93c4b944D05dfe6df7645A86cd2206016c51564D"
        ],
        "thresholdStake": 0
      },
      "errors": {
        "deployedPolicyIDs": "Processing error occurred.",
        "strategies": "Processing error occurred."
      },
      "implementationNames": {
        "0xf6f4A30EeF7cf51Ed4Ee1415fB3bFDAf3694B0d2": "TransparentUpgradeableProxy",
        "0x1BafAF26d236FbEA3E86075370B554eC0477bFD0": "ServiceManager"
      }
    },
    {
      "address": "0xFBB1A3C8C8A99A2A4797250dF87E307Dc3f01Fe0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "StakingRouter",
      "address": "0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
      "type": "Contract",
      "template": "tokens/Lido/StakingRouter",
      "sourceHashes": [
        "0x04c21a54dfbc4ca3baf7ce93d62b487e1071a6439bde71a1896d76f073a66848",
        "0x503f0f420b9a496d2931807c8c9c7b3bae8e03c9d66fd0c046c0cee08657b365"
      ],
      "proxyType": "EIP1967 proxy",
      "ignoreInWatchMode": [
        "getAllStakingModuleDigests",
        "getStakingFeeAggregateDistribution",
        "getStakingModuleActiveValidatorsCount",
        "getStakingModuleLastDepositBlock",
        "getStakingModuleNonce",
        "getStakingModules",
        "getStakingRewardsDistribution"
      ],
      "sinceTimestamp": 1683023963,
      "sinceBlock": 17172550,
      "values": {
        "$admin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "$implementation": "0x89eDa99C0551d4320b56F82DDE8dF2f8D2eF81aA",
        "$pastUpgrades": [
          [
            "2023-05-02T10:39:23.000Z",
            "0xb8620f04a8db6bb52cfd0978c6677a5f16011e03d4622e5d660ea6ba34c2b122",
            ["0x6F6541C2203196fEeDd14CD2C09550dA1CbEDa31"]
          ],
          [
            "2023-05-15T15:15:59.000Z",
            "0x592d68a259af899fb435da0ac08c2fd500cb423f37f1d8ce8e3120cb84186b21",
            ["0xD8784e748f59Ba711fB5643191Ec3fAdD50Fb6df"]
          ],
          [
            "2024-10-25T16:03:23.000Z",
            "0x0078b3e0cecb3b50c78a22e0b1a985e6cde3bf431e9cb3b2ba4e50260122d542",
            ["0x89eDa99C0551d4320b56F82DDE8dF2f8D2eF81aA"]
          ]
        ],
        "$upgradeCount": 3,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DEPOSIT_CONTRACT": "0x00000000219ab540356cBB839Cbe05303d7705Fa",
        "FEE_PRECISION_POINTS": "100000000000000000000",
        "getAllStakingModuleDigests": [
          {
            "nodeOperatorsCount": 39,
            "activeNodeOperatorsCount": 37,
            "state": {
              "id": 1,
              "stakingModuleAddress": "0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5",
              "stakingModuleFee": 500,
              "treasuryFee": 500,
              "stakeShareLimit": 10000,
              "status": 0,
              "name": "curated-onchain-v1",
              "lastDepositAt": 1751941283,
              "lastDepositBlock": 22871455,
              "exitedValidatorsCount": 112391,
              "priorityExitShareThreshold": 10000,
              "maxDepositsPerBlock": 150,
              "minDepositBlockDistance": 25
            },
            "summary": {
              "totalExitedValidators": 112391,
              "totalDepositedValidators": 381950,
              "depositableValidatorsCount": 43475
            }
          },
          {
            "nodeOperatorsCount": 82,
            "activeNodeOperatorsCount": 82,
            "state": {
              "id": 2,
              "stakingModuleAddress": "0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
              "stakingModuleFee": 800,
              "treasuryFee": 200,
              "stakeShareLimit": 400,
              "status": 0,
              "name": "SimpleDVT",
              "lastDepositAt": 1749656087,
              "lastDepositBlock": 22682247,
              "exitedValidatorsCount": 519,
              "priorityExitShareThreshold": 444,
              "maxDepositsPerBlock": 150,
              "minDepositBlockDistance": 25
            },
            "summary": {
              "totalExitedValidators": 519,
              "totalDepositedValidators": 10154,
              "depositableValidatorsCount": 0
            }
          },
          {
            "nodeOperatorsCount": 437,
            "activeNodeOperatorsCount": 437,
            "state": {
              "id": 3,
              "stakingModuleAddress": "0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
              "stakingModuleFee": 600,
              "treasuryFee": 400,
              "stakeShareLimit": 200,
              "status": 0,
              "name": "Community Staking",
              "lastDepositAt": 1750456019,
              "lastDepositBlock": 22748455,
              "exitedValidatorsCount": 328,
              "priorityExitShareThreshold": 250,
              "maxDepositsPerBlock": 30,
              "minDepositBlockDistance": 25
            },
            "summary": {
              "totalExitedValidators": 328,
              "totalDepositedValidators": 6042,
              "depositableValidatorsCount": 2765
            }
          }
        ],
        "getContractVersion": 2,
        "getLido": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "getStakingFeeAggregateDistribution": {
          "modulesFee": "5121509399525460849",
          "treasuryFee": "4878490600474539147",
          "basePrecision": "100000000000000000000"
        },
        "getStakingModuleActiveValidatorsCount": [269559, 9635, 5714],
        "getStakingModuleIds": [1, 2, 3],
        "getStakingModuleIsActive": [true, true, true],
        "getStakingModuleIsDepositsPaused": [false, false, false],
        "getStakingModuleIsStopped": [false, false, false],
        "getStakingModuleLastDepositBlock": [22871455, 22682247, 22748455],
        "getStakingModuleMaxDepositsPerBlock": [150, 150, 30],
        "getStakingModuleMinDepositBlockDistance": [25, 25, 25],
        "getStakingModuleNonce": [16139, 958, 1321],
        "getStakingModules": [
          {
            "id": 1,
            "stakingModuleAddress": "0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5",
            "stakingModuleFee": 500,
            "treasuryFee": 500,
            "stakeShareLimit": 10000,
            "status": 0,
            "name": "curated-onchain-v1",
            "lastDepositAt": 1751941283,
            "lastDepositBlock": 22871455,
            "exitedValidatorsCount": 112391,
            "priorityExitShareThreshold": 10000,
            "maxDepositsPerBlock": 150,
            "minDepositBlockDistance": 25
          },
          {
            "id": 2,
            "stakingModuleAddress": "0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
            "stakingModuleFee": 800,
            "treasuryFee": 200,
            "stakeShareLimit": 400,
            "status": 0,
            "name": "SimpleDVT",
            "lastDepositAt": 1749656087,
            "lastDepositBlock": 22682247,
            "exitedValidatorsCount": 519,
            "priorityExitShareThreshold": 444,
            "maxDepositsPerBlock": 150,
            "minDepositBlockDistance": 25
          },
          {
            "id": 3,
            "stakingModuleAddress": "0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F",
            "stakingModuleFee": 600,
            "treasuryFee": 400,
            "stakeShareLimit": 200,
            "status": 0,
            "name": "Community Staking",
            "lastDepositAt": 1750456019,
            "lastDepositBlock": 22748455,
            "exitedValidatorsCount": 328,
            "priorityExitShareThreshold": 250,
            "maxDepositsPerBlock": 30,
            "minDepositBlockDistance": 25
          }
        ],
        "getStakingModulesCount": 3,
        "getStakingModuleStatus": [0, 0, 0],
        "getStakingRewardsDistribution": {
          "recipients": [
            "0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5",
            "0xaE7B191A31f627b4eB1d4DaC64eaB9976995b433",
            "0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F"
          ],
          "stakingModuleIds": [1, 2, 3],
          "stakingModuleFees": [
            "4730632344476111586",
            "270543473682732671",
            "120333581366616592"
          ],
          "totalFee": "9999999999999999996",
          "precisionPoints": "100000000000000000000"
        },
        "getTotalFeeE4Precision": 999,
        "getWithdrawalCredentials": "0x010000000000000000000000b9d7934878b5fb9610b3fe8a5e441e8fad7e293f",
        "MANAGE_WITHDRAWAL_CREDENTIALS_ROLE": "0xe7c742a54cd11fc9749a47ab34bdcd7327820908e8d0d48b4a5c7f17b0294098",
        "MAX_STAKING_MODULE_NAME_LENGTH": 31,
        "MAX_STAKING_MODULES_COUNT": 32,
        "proxy__getAdmin": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "proxy__getImplementation": "0x89eDa99C0551d4320b56F82DDE8dF2f8D2eF81aA",
        "proxy__getIsOssified": false,
        "REPORT_EXITED_VALIDATORS_ROLE": "0xc23292b191d95d2a7dd94fc6436eb44338fda9e1307d9394fd27c28157c1b33c",
        "REPORT_REWARDS_MINTED_ROLE": "0x779e5c23cb7a5bcb9bfe1e9a5165a00057f12bcdfd13e374540fdf1a1cd91137",
        "STAKING_MODULE_MANAGE_ROLE": "0x3105bcbf19d4417b73ae0e58d508a65ecf75665e46c2622d8521732de6080c48",
        "STAKING_MODULE_UNVETTING_ROLE": "0x240525496a9dc32284b17ce03b43e539e4bd81414634ee54395030d793463b57",
        "TOTAL_BASIS_POINTS": 10000,
        "UNSAFE_SET_EXITED_VALIDATORS_ROLE": "0x55180e25fcacf9af017d35d497765476319b23896daa1f9bc2b38fa80b36a163"
      },
      "implementationNames": {
        "0xFdDf38947aFB03C621C71b06C9C70bce73f12999": "OssifiableProxy",
        "0x89eDa99C0551d4320b56F82DDE8dF2f8D2eF81aA": "StakingRouter"
      }
    },
    {
      "name": "EigenLayerCommunityMultisig",
      "address": "0xFEA47018D632A77bA579846c840d5706705Dc598",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0",
          "description": "can pause the DA bridge",
          "role": ".pauserRegistry",
          "via": [
            { "address": "eth:0x0c431C66F4dE941d089625E5B423D00707977060" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x25E5F8B1E7aDf44518d35D5B2271f114e081f0E5",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x5e4C39Ad7A3E881585e383dB9827EB4811f6F647",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x858646372CC42E1A627fcE94aa7A7033e7CF075A",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x93c4b944D05dfe6df7645A86cd2206016c51564D",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x948a420b8CC1d6BFd0B6087C2E7c344a2CD0bc39",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d",
          "role": "admin",
          "via": [
            { "address": "eth:0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444" },
            { "address": "eth:0x369e6F597e22EaB55fFb173C6d9cD234BD699111" }
          ]
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1686680867,
      "sinceBlock": 17472847,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x17919FAC7024d5b770322E5Cb81607D247654116",
          "0x34C37613e1680efD9e203C979658e1d058b4B2BC",
          "0x72Ff26D9517324eEFA89A48B75c5df41132c4f54",
          "0x7F68e9C17D22005688b8E6968fCe31e32B4B03d1",
          "0xED732DEb32034e603bEEEdA84605dAbb8933594b",
          "0x97b4A6E0471A7c5906fF1Cc2a5970ed569B04815",
          "0x65C4799061c0D1e3E87ADdB65b02E92a558F842F",
          "0xe37756BEdDC89e94A8d557fd5b95a4D2a57e9D60",
          "0x8ffCF07A59631f0578f3E84B51C48cF0dEADCd95",
          "0xAF4D94Cd299211de542530399290877E2c85F061",
          "0xe8F09A9D42aEA0a3B393aD06F25CF512eA51707e",
          "0x6A662c5DdCe0b76BD081b8A4ec3A4F8a671b0b1f",
          "0x33E816008E7bc7798A73d0eaa640CC24f34d1626"
        ],
        "$threshold": 9,
        "domainSeparator": "0x80ea1f4244338ed9d96d172e60fd4459f4a8237651f29e743de9096eefa5c0fa",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "9 of 13 (69%)",
        "nonce": 5,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "0xFEA47018D632A77bA579846c840d5706705Dc598": "GnosisSafeProxy",
        "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "DepositSecurityModule",
      "address": "0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD",
      "type": "Contract",
      "template": "tokens/Lido/DepositSecurityModule",
      "sourceHashes": [
        "0xec602317aa2fc4de0a89b5c910911635f678fb88b51a6a46f12d8b1148d95d71"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1728395471,
      "sinceBlock": 20921272,
      "values": {
        "$immutable": true,
        "ATTEST_MESSAGE_PREFIX": "0x420b649044eb23ce1540808ba8ed5d375094551acd77ba36b6ba87b78b7b655b",
        "DEPOSIT_CONTRACT": "0x00000000219ab540356cBB839Cbe05303d7705Fa",
        "getGuardianQuorum": 4,
        "getGuardians": [
          "0x5fd0dDbC3351d009eb3f88DE7Cd081a614C519F1",
          "0x7912Fa976BcDe9c2cf728e213e892AD7588E6AaF",
          "0x14D5d5B71E048d2D75a39FfC5B407e3a3AB6F314",
          "0xf82D88217C249297C6037BA77CE34b3d8a90ab43",
          "0xa56b128Ea2Ea237052b0fA2a96a387C0E43157d8",
          "0xd4EF84b638B334699bcf5AF4B0410B8CCD71943f"
        ],
        "getMaxOperatorsPerUnvetting": 200,
        "getOwner": "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c",
        "getPauseIntentValidityPeriodBlocks": 6646,
        "isDepositsPaused": false,
        "LIDO": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "PAUSE_MESSAGE_PREFIX": "0x6b3c04956358bd57f0df35a391531933a5f35bbeb297822abaa44d6b55b38d35",
        "STAKING_ROUTER": "0xFdDf38947aFB03C621C71b06C9C70bce73f12999",
        "UNVET_MESSAGE_PREFIX": "0x7f941492e2f49621da669504b9b681d897c2d2917c1edc4009f4121a0a25ed9c",
        "VERSION": 3
      },
      "implementationNames": {
        "0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD": "DepositSecurityModule"
      }
    }
  ],
  "abis": {
    "0x00000000219ab540356cBB839Cbe05303d7705Fa": [
      "constructor()",
      "event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index)",
      "function deposit(bytes pubkey, bytes withdrawal_credentials, bytes signature, bytes32 deposit_data_root) payable",
      "function get_deposit_count() view returns (bytes)",
      "function get_deposit_root() view returns (bytes32)",
      "function supportsInterface(bytes4 interfaceId) pure returns (bool)"
    ],
    "0x002721B4790d97dC140a049936aA710152Ba92D5": [
      "constructor(address _singleton)"
    ],
    "0x006124Ae7976137266feeBFb3F4D2BE4C073139D": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x00A5Fd09F6CeE6AE9C8b0E5e33287F7c82880505": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x01422247a1d15BB4FcF91F5A077Cf25BA6460130": [
      "constructor(address _singleton)"
    ],
    "0x03ABEEC03BF39ac5A5C8886cF3496326d8164E1E": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x0534280dDc2A103039AeA6c691c643aA7a94F7a1": [
      "constructor()",
      "error CallerNotExistingRewardAddress()",
      "error CallerNotManager()",
      "error CallerNotNewRewardAddress()",
      "error CallerNotOperator()",
      "error CallerNotStaderContract()",
      "error CooldownNotComplete()",
      "error DuplicatePoolIDOrPoolNotAdded()",
      "error InSufficientBalance()",
      "error InvalidBondEthValue()",
      "error InvalidKeyCount()",
      "error InvalidStartAndEndIndex()",
      "error MaxKeyLimitExceed()",
      "error MaxKeyLimitReached()",
      "error MisMatchingInputKeysSize()",
      "error NoChangeInState()",
      "error NotEnoughSDCollateral()",
      "error OperatorAlreadyOnBoardedInProtocol()",
      "error OperatorIsDeactivate()",
      "error OperatorNotOnBoarded()",
      "error PageNumberIsZero()",
      "error PubkeyAlreadyExist()",
      "error TooManyVerifiedKeysReported()",
      "error TooManyWithdrawnKeysReported()",
      "error TransferFailed()",
      "error UNEXPECTED_STATUS()",
      "error ZeroAddress()",
      "event AddedValidatorKey(address indexed nodeOperator, bytes pubkey, uint256 validatorId)",
      "event DecreasedTotalActiveValidatorCount(uint256 totalActiveValidatorCount)",
      "event IncreasedTotalActiveValidatorCount(uint256 totalActiveValidatorCount)",
      "event Initialized(uint8 version)",
      "event OnboardedOperator(address indexed nodeOperator, address nodeRewardAddress, uint256 operatorId, bool optInForSocializingPool)",
      "event OperatorRewardAddressUpdated(address indexed nodeOperator, address indexed rewardAddress)",
      "event Paused(address account)",
      "event RewardAddressProposed(address indexed nodeOperator, address indexed rewardAddress)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TransferredCollateralToPool(uint256 amount)",
      "event Unpaused(address account)",
      "event UpdateMaxKeysPerOperator(uint256 maxKeysPerOperator)",
      "event UpdatedInputKeyCountLimit(uint256 batchKeyDepositLimit)",
      "event UpdatedMaxNonTerminalKeyPerOperator(uint64 maxNonTerminalKeyPerOperator)",
      "event UpdatedNextQueuedValidatorIndex(uint256 nextQueuedValidatorIndex)",
      "event UpdatedOperatorName(address indexed nodeOperator, string operatorName)",
      "event UpdatedSocializingPoolState(uint256 operatorId, bool optedForSocializingPool, uint256 block)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event UpdatedValidatorDepositBlock(uint256 validatorId, uint256 depositBlock)",
      "event UpdatedVerifiedKeyBatchSize(uint256 verifiedKeysBatchSize)",
      "event UpdatedWithdrawnKeyBatchSize(uint256 withdrawnKeysBatchSize)",
      "event ValidatorAddedViaReferral(uint256 amount, string referralId)",
      "event ValidatorMarkedAsFrontRunned(bytes pubkey, uint256 validatorId)",
      "event ValidatorMarkedReadyToDeposit(bytes pubkey, uint256 validatorId)",
      "event ValidatorStatusMarkedAsInvalidSignature(bytes pubkey, uint256 validatorId)",
      "event ValidatorWithdrawn(bytes pubkey, uint256 validatorId)",
      "function COLLATERAL_ETH() view returns (uint256)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function FRONT_RUN_PENALTY() view returns (uint256)",
      "function POOL_ID() view returns (uint8)",
      "function addValidatorKeys(bytes[] _pubkey, bytes[] _preDepositSignature, bytes[] _depositSignature) payable",
      "function addValidatorKeysWithUtilizeSD(string _referralId, uint256 _amountOfSDToUtilize, bytes[] _pubkey, bytes[] _preDepositSignature, bytes[] _depositSignature) payable",
      "function changeSocializingPoolState(bool _optInForSocializingPool) returns (address feeRecipientAddress)",
      "function confirmRewardAddressChange(address _operatorAddress)",
      "function getAllActiveValidators(uint256 _pageNumber, uint256 _pageSize) view returns (tuple(uint8 status, bytes pubkey, bytes preDepositSignature, bytes depositSignature, address withdrawVaultAddress, uint256 operatorId, uint256 depositBlock, uint256 withdrawnBlock)[])",
      "function getAllNodeELVaultAddress(uint256 _pageNumber, uint256 _pageSize) view returns (address[])",
      "function getCollateralETH() pure returns (uint256)",
      "function getOperatorRewardAddress(uint256 _operatorId) view returns (address)",
      "function getOperatorTotalKeys(uint256 _operatorId) view returns (uint256 _totalKeys)",
      "function getOperatorTotalNonTerminalKeys(address _nodeOperator, uint256 _startIndex, uint256 _endIndex) view returns (uint64)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getSocializingPoolStateChangeBlock(uint256 _operatorId) view returns (uint256)",
      "function getTotalActiveValidatorCount() view returns (uint256)",
      "function getTotalQueuedValidatorCount() view returns (uint256)",
      "function getValidatorsByOperator(address _operator, uint256 _pageNumber, uint256 _pageSize) view returns (tuple(uint8 status, bytes pubkey, bytes preDepositSignature, bytes depositSignature, address withdrawVaultAddress, uint256 operatorId, uint256 depositBlock, uint256 withdrawnBlock)[])",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function increaseTotalActiveValidatorCount(uint256 _count)",
      "function initialize(address _admin, address _staderConfig)",
      "function inputKeyCountLimit() view returns (uint16)",
      "function isExistingOperator(address _operAddr) view returns (bool)",
      "function isExistingPubkey(bytes _pubkey) view returns (bool)",
      "function markValidatorReadyToDeposit(bytes[] _readyToDepositPubkey, bytes[] _frontRunPubkey, bytes[] _invalidSignaturePubkey)",
      "function maxKeysPerOperator() view returns (uint256)",
      "function maxNonTerminalKeyPerOperator() view returns (uint64)",
      "function nextOperatorId() view returns (uint256)",
      "function nextQueuedValidatorIndex() view returns (uint256)",
      "function nextValidatorId() view returns (uint256)",
      "function nodeELRewardVaultByOperatorId(uint256) view returns (address)",
      "function onboardNodeOperator(bool _optInForSocializingPool, string _operatorName, address _operatorRewardAddress) returns (address feeRecipientAddress)",
      "function operatorIDByAddress(address) view returns (uint256)",
      "function operatorStructById(uint256) view returns (bool active, bool optedForSocializingPool, string operatorName, address operatorRewardAddress, address operatorAddress)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proposeRewardAddress(address _operatorAddress, address _newRewardAddress)",
      "function proposedRewardAddressByOperatorId(uint256) view returns (address)",
      "function queuedValidators(uint256) view returns (uint256)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function socializingPoolStateChangeBlock(uint256) view returns (uint256)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function totalActiveValidatorCount() view returns (uint256)",
      "function transferCollateralToPool(uint256 _amount)",
      "function unpause()",
      "function updateDepositStatusAndBlock(uint256 _validatorId)",
      "function updateInputKeyCountLimit(uint16 _inputKeyCountLimit)",
      "function updateMaxKeysPerOperator(uint256 _maxKeysPerOperator)",
      "function updateMaxNonTerminalKeyPerOperator(uint64 _maxNonTerminalKeyPerOperator)",
      "function updateNextQueuedValidatorIndex(uint256 _nextQueuedValidatorIndex)",
      "function updateOperatorName(string _operatorName)",
      "function updateStaderConfig(address _staderConfig)",
      "function updateVerifiedKeysBatchSize(uint256 _verifiedKeysBatchSize)",
      "function validatorIdByPubkey(bytes) view returns (uint256)",
      "function validatorIdsByOperatorId(uint256, uint256) view returns (uint256)",
      "function validatorQueueSize() view returns (uint256)",
      "function validatorRegistry(uint256) view returns (uint8 status, bytes pubkey, bytes preDepositSignature, bytes depositSignature, address withdrawVaultAddress, uint256 operatorId, uint256 depositBlock, uint256 withdrawnBlock)",
      "function verifiedKeyBatchSize() view returns (uint256)",
      "function withdrawnValidators(bytes[] _pubkeys)"
    ],
    "0x09134C643A6B95D342BdAf081Fa473338F066572": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x09665baEFbfaAE3E9b3AC854717C2ab5534d2D25": [
      "constructor()",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error PeriodIntervalZero()",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event ContributionRecorded(uint256 indexed periodNumber, bytes32 indexed tag, address indexed user, uint256 amount)",
      "event Initialized(uint64 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Upgraded(address indexed implementation)",
      "function CONTRIBUTOR() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function getCurrentPeriod() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, uint256 _periodInterval)",
      "function periodInterval() view returns (uint256)",
      "function proxiableUUID() view returns (bytes32)",
      "function recordContribution(bytes32 tag, address user, uint256 amount)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function startTimestamp() view returns (uint256)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function totalContributions(uint256, bytes32) view returns (uint256)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function userContributions(uint256, bytes32, address) view returns (uint256)"
    ],
    "0x0BAAc79acD45A023E19345c352d8a7a83C4e5656": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x0c431C66F4dE941d089625E5B423D00707977060": [
      "constructor(address[] _pausers, address _unpauser)",
      "event PauserStatusChanged(address pauser, bool canPause)",
      "event UnpauserChanged(address previousUnpauser, address newUnpauser)",
      "function isPauser(address) view returns (bool)",
      "function setIsPauser(address newPauser, bool canPause)",
      "function setUnpauser(address newUnpauser)",
      "function unpauser() view returns (address)"
    ],
    "0x0d39d0d37B345F87a6a264d949c04dF7fc3F4026": [
      "constructor()",
      "error CallerNotManager()",
      "error CallerNotStaderContract()",
      "error ExistingRewardPeriod()",
      "error InvalidEmissionRate()",
      "error InvalidEndBlock()",
      "error InvalidRewardAmount()",
      "error NoRewardsToClaim()",
      "error SDTransferFailed()",
      "error ZeroAddress()",
      "event EmissionRateUpdated(uint256 newEmissionRate)",
      "event Initialized(uint8 version)",
      "event RewardClaimed(address indexed user, uint256 reward)",
      "event RewardEndBlockUpdated(uint256 newRewardEndBlock)",
      "event RewardUpdated(address indexed user, uint256 reward)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UpdatedStaderConfig(address staderConfig)",
      "function DECIMAL() view returns (uint256)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function claim(address account)",
      "function earned(address account) view returns (uint256)",
      "function emissionPerBlock() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function lastUpdateBlockNumber() view returns (uint256)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function rewardEndBlock() view returns (uint256)",
      "function rewardPerToken() view returns (uint256)",
      "function rewardPerTokenStored() view returns (uint256)",
      "function rewards(address) view returns (uint256)",
      "function staderConfig() view returns (address)",
      "function start(uint256 rewardAmount, uint256 duration)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateRewardForAccount(address account)",
      "function updateStaderConfig(address _staderConfig)",
      "function userRewardPerTokenPaid(address) view returns (uint256)"
    ],
    "0x0De4Ea0184c2ad0BacA7183356Aea5B8d5Bf5c6e": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "0x0e65898527E77210fB0133D00dd4C0E86Dc29bC7": [
      "constructor(address lidoLocator, address lido, address legacyOracle, uint256 secondsPerSlot, uint256 genesisTime)",
      "error AddressCannotBeSame()",
      "error AddressCannotBeZero()",
      "error AdminCannotBeZero()",
      "error CannotSubmitExtraDataBeforeMainData()",
      "error ExtraDataAlreadyProcessed()",
      "error ExtraDataHashCannotBeZeroForNonEmptyData()",
      "error ExtraDataItemsCountCannotBeZeroForNonEmptyData()",
      "error HashCannotBeZero()",
      "error IncorrectOracleMigration(uint256 code)",
      "error InitialRefSlotCannotBeLessThanProcessingOne(uint256 initialRefSlot, uint256 processingRefSlot)",
      "error InvalidContractVersionIncrement()",
      "error InvalidExitedValidatorsData()",
      "error InvalidExtraDataItem(uint256 itemIndex)",
      "error InvalidExtraDataSortOrder(uint256 itemIndex)",
      "error LegacyOracleCannotBeZero()",
      "error LidoCannotBeZero()",
      "error LidoLocatorCannotBeZero()",
      "error NoConsensusReportToProcess()",
      "error NonZeroContractVersionOnInit()",
      "error ProcessingDeadlineMissed(uint256 deadline)",
      "error RefSlotAlreadyProcessing()",
      "error RefSlotCannotDecrease(uint256 refSlot, uint256 prevRefSlot)",
      "error RefSlotMustBeGreaterThanProcessingOne(uint256 refSlot, uint256 processingRefSlot)",
      "error SecondsPerSlotCannotBeZero()",
      "error SenderIsNotTheConsensusContract()",
      "error SenderNotAllowed()",
      "error UnexpectedChainConfig()",
      "error UnexpectedConsensusVersion(uint256 expectedVersion, uint256 receivedVersion)",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error UnexpectedDataHash(bytes32 consensusHash, bytes32 receivedHash)",
      "error UnexpectedExtraDataFormat(uint256 expectedFormat, uint256 receivedFormat)",
      "error UnexpectedExtraDataHash(bytes32 consensusHash, bytes32 receivedHash)",
      "error UnexpectedExtraDataIndex(uint256 expectedIndex, uint256 receivedIndex)",
      "error UnexpectedExtraDataItemsCount(uint256 expectedCount, uint256 receivedCount)",
      "error UnexpectedRefSlot(uint256 consensusRefSlot, uint256 dataRefSlot)",
      "error UnsupportedExtraDataFormat(uint256 format)",
      "error UnsupportedExtraDataType(uint256 itemIndex, uint256 dataType)",
      "error VersionCannotBeSame()",
      "event ConsensusHashContractSet(address indexed addr, address indexed prevAddr)",
      "event ConsensusVersionSet(uint256 indexed version, uint256 indexed prevVersion)",
      "event ContractVersionSet(uint256 version)",
      "event ExtraDataSubmitted(uint256 indexed refSlot, uint256 itemsProcessed, uint256 itemsCount)",
      "event ProcessingStarted(uint256 indexed refSlot, bytes32 hash)",
      "event ReportDiscarded(uint256 indexed refSlot, bytes32 hash)",
      "event ReportSubmitted(uint256 indexed refSlot, bytes32 hash, uint256 processingDeadlineTime)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event WarnExtraDataIncompleteProcessing(uint256 indexed refSlot, uint256 processedItemsCount, uint256 itemsCount)",
      "event WarnProcessingMissed(uint256 indexed refSlot)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXTRA_DATA_FORMAT_EMPTY() view returns (uint256)",
      "function EXTRA_DATA_FORMAT_LIST() view returns (uint256)",
      "function EXTRA_DATA_TYPE_EXITED_VALIDATORS() view returns (uint256)",
      "function EXTRA_DATA_TYPE_STUCK_VALIDATORS() view returns (uint256)",
      "function GENESIS_TIME() view returns (uint256)",
      "function LEGACY_ORACLE() view returns (address)",
      "function LIDO() view returns (address)",
      "function LOCATOR() view returns (address)",
      "function MANAGE_CONSENSUS_CONTRACT_ROLE() view returns (bytes32)",
      "function MANAGE_CONSENSUS_VERSION_ROLE() view returns (bytes32)",
      "function SECONDS_PER_SLOT() view returns (uint256)",
      "function SUBMIT_DATA_ROLE() view returns (bytes32)",
      "function discardConsensusReport(uint256 refSlot)",
      "function finalizeUpgrade_v2(uint256 consensusVersion)",
      "function getConsensusContract() view returns (address)",
      "function getConsensusReport() view returns (bytes32 hash, uint256 refSlot, uint256 processingDeadlineTime, bool processingStarted)",
      "function getConsensusVersion() view returns (uint256)",
      "function getContractVersion() view returns (uint256)",
      "function getLastProcessingRefSlot() view returns (uint256)",
      "function getProcessingState() view returns (tuple(uint256 currentFrameRefSlot, uint256 processingDeadlineTime, bytes32 mainDataHash, bool mainDataSubmitted, bytes32 extraDataHash, uint256 extraDataFormat, bool extraDataSubmitted, uint256 extraDataItemsCount, uint256 extraDataItemsSubmitted) result)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address consensusContract, uint256 consensusVersion)",
      "function initializeWithoutMigration(address admin, address consensusContract, uint256 consensusVersion, uint256 lastProcessingRefSlot)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setConsensusContract(address addr)",
      "function setConsensusVersion(uint256 version)",
      "function submitConsensusReport(bytes32 reportHash, uint256 refSlot, uint256 deadline)",
      "function submitReportData(tuple(uint256 consensusVersion, uint256 refSlot, uint256 numValidators, uint256 clBalanceGwei, uint256[] stakingModuleIdsWithNewlyExitedValidators, uint256[] numExitedValidatorsByStakingModule, uint256 withdrawalVaultBalance, uint256 elRewardsVaultBalance, uint256 sharesRequestedToBurn, uint256[] withdrawalFinalizationBatches, uint256 simulatedShareRate, bool isBunkerMode, uint256 extraDataFormat, bytes32 extraDataHash, uint256 extraDataItemsCount) data, uint256 contractVersion)",
      "function submitReportExtraDataEmpty()",
      "function submitReportExtraDataList(bytes data)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0x0ed6703C298d28aE0878d1b28e88cA87F9662fE9": [
      "constructor(address implementation_)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function implementation() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeTo(address newImplementation)"
    ],
    "0x0fE3E6018E53cb90020b5C06BC4c7c4FcEa1eBF0": [
      "constructor()",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AddressEmptyCode(address target)",
      "error AddressZero()",
      "error AlreadyRelayed()",
      "error AmlValidationFailed()",
      "error DepositAmountExceedsLimit(uint256 depositAmount, uint256 limit)",
      "error DepositHashAlreadyExists(bytes32 depositHash)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error EligibilityValidationFailed()",
      "error EnforcedPause()",
      "error ExpectedPause()",
      "error FailedCall()",
      "error InvalidDepositHash(bytes32 depositDataHash, bytes32 calculatedHash)",
      "error InvalidInitialization()",
      "error InvalidWithdrawalAddress()",
      "error NotInitializing()",
      "error OnlySenderCanCancelDeposit()",
      "error OutOfRange(uint256 upToDepositId, uint256 firstDepositId, uint256 lastDepositId)",
      "error RelayLimitExceeded()",
      "error SafeERC20FailedOperation(address token)",
      "error SenderIsNotScrollMessenger()",
      "error TokenAddressIsZero()",
      "error TriedToDepositZero()",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "error WithdrawalAddressNotSet()",
      "error WithdrawalFeeRatioExceedsLimit()",
      "error WithdrawalNotFound(bytes32 withdrawalHash)",
      "event ClaimedWithdrawal(address indexed recipient, bytes32 indexed withdrawalHash)",
      "event DepositCanceled(uint256 indexed depositId)",
      "event Deposited(uint256 indexed depositId, address indexed sender, bytes32 indexed recipientSaltHash, uint32 tokenIndex, uint256 amount, bool isEligible, uint256 depositedAt)",
      "event DepositsRelayed(uint256 indexed upToDepositId, uint256 gasLimit, bytes message)",
      "event DirectWithdrawalFailed(bytes32 indexed withdrawalHash, tuple(address recipient, uint32 tokenIndex, uint256 amount, bytes32 nullifier) withdrawal)",
      "event DirectWithdrawalSuccessed(bytes32 indexed withdrawalHash, address indexed recipient)",
      "event Initialized(uint64 version)",
      "event Paused(address account)",
      "event PermitterSet(address indexed amlPermitter, address indexed eligibilityPermitter)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Unpaused(address account)",
      "event Upgraded(address indexed implementation)",
      "event WithdrawalClaimable(bytes32 indexed withdrawalHash)",
      "event WithdrawalFeeCollected(uint32 indexed token, uint256 amount)",
      "event WithdrawalFeeRatioSet(uint32 indexed tokenIndex, uint256 feeRatio)",
      "event WithdrawalFeeWithdrawn(address indexed recipient, uint32 indexed token, uint256 amount)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function RELAYER() view returns (bytes32)",
      "function RELAY_LIMIT() view returns (uint256)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function WITHDRAWAL() view returns (bytes32)",
      "function WITHDRAWAL_FEE_RATIO_LIMIT() view returns (uint256)",
      "function amlPermitter() view returns (address)",
      "function cancelDeposit(uint256 depositId, tuple(address depositor, bytes32 recipientSaltHash, uint256 amount, uint32 tokenIndex, bool isEligible) deposit)",
      "function claimWithdrawals(tuple(address recipient, uint32 tokenIndex, uint256 amount, bytes32 nullifier)[] withdrawals)",
      "function claimableWithdrawals(bytes32) view returns (uint256)",
      "function collectedWithdrawalFees(uint32) view returns (uint256)",
      "function contribution() view returns (address)",
      "function deploymentTime() view returns (uint256)",
      "function depositERC1155(address tokenAddress, bytes32 recipientSaltHash, uint256 tokenId, uint256 amount, bytes amlPermission, bytes eligibilityPermission)",
      "function depositERC20(address tokenAddress, bytes32 recipientSaltHash, uint256 amount, bytes amlPermission, bytes eligibilityPermission)",
      "function depositERC721(address tokenAddress, bytes32 recipientSaltHash, uint256 tokenId, bytes amlPermission, bytes eligibilityPermission)",
      "function depositNativeToken(bytes32 recipientSaltHash, bytes amlPermission, bytes eligibilityPermission) payable",
      "function doesDepositHashExist(bytes32) view returns (bool)",
      "function eligibilityPermitter() view returns (address)",
      "function getDepositData(uint256 depositId) view returns (tuple(bytes32 depositHash, address sender))",
      "function getDepositDataBatch(uint256[] depositIds) view returns (tuple(bytes32 depositHash, address sender)[])",
      "function getDepositDataHash(uint256 depositId) view returns (bytes32)",
      "function getLastDepositId() view returns (uint256)",
      "function getLastRelayedDepositId() view returns (uint256)",
      "function getNativeTokenIndex() pure returns (uint32)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getTokenIndex(uint8 tokenType, address tokenAddress, uint256 tokenId) view returns (bool, uint32)",
      "function getTokenInfo(uint32 tokenIndex) view returns (tuple(uint8 tokenType, address tokenAddress, uint256 tokenId))",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _l1ScrollMessenger, address _rollup, address _withdrawal, address _claim, address _relayer, address _contribution, address[] initialERC20Tokens)",
      "function isDepositValid(uint256 depositId, bytes32 recipientSaltHash, uint32 tokenIndex, uint256 amount, bool isEligible, address sender) view returns (bool)",
      "function l1ScrollMessenger() view returns (address)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) pure returns (bytes4)",
      "function pauseDeposits()",
      "function paused() view returns (bool)",
      "function processWithdrawals(tuple(address recipient, uint32 tokenIndex, uint256 amount, bytes32 nullifier)[] withdrawals, bytes32[] withdrawalHashes)",
      "function proxiableUUID() view returns (bytes32)",
      "function relayDeposits(uint256 upToDepositId, uint256 gasLimit) payable",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function rollup() view returns (address)",
      "function setPermitter(address _amlPermitter, address _eligibilityPermitter)",
      "function setWithdrawalFeeRatio(uint32 tokenIndex, uint256 feeRatio)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unpauseDeposits()",
      "function upgradeToAndCall(address newImplementation, bytes data) payable",
      "function withdrawCollectedFees(address recipient, uint32[] tokenIndices)",
      "function withdrawalFeeRatio(uint32) view returns (uint256)"
    ],
    "0x1112D5C55670Cb5144BF36114C20a122908068B9": [
      "constructor(uint256 minDelay, address[] proposers, address[] executors, address admin)",
      "event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data)",
      "event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, uint256 delay)",
      "event Cancelled(bytes32 indexed id)",
      "event MinDelayChange(uint256 oldDuration, uint256 newDuration)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function CANCELLER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function PROPOSER_ROLE() view returns (bytes32)",
      "function TIMELOCK_ADMIN_ROLE() view returns (bytes32)",
      "function cancel(bytes32 id)",
      "function execute(address target, uint256 value, bytes payload, bytes32 predecessor, bytes32 salt) payable",
      "function executeBatch(address[] targets, uint256[] values, bytes[] payloads, bytes32 predecessor, bytes32 salt) payable",
      "function getMinDelay() view returns (uint256 duration)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getTimestamp(bytes32 id) view returns (uint256 timestamp)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hashOperation(address target, uint256 value, bytes data, bytes32 predecessor, bytes32 salt) pure returns (bytes32 hash)",
      "function hashOperationBatch(address[] targets, uint256[] values, bytes[] payloads, bytes32 predecessor, bytes32 salt) pure returns (bytes32 hash)",
      "function isOperation(bytes32 id) view returns (bool registered)",
      "function isOperationDone(bytes32 id) view returns (bool done)",
      "function isOperationPending(bytes32 id) view returns (bool pending)",
      "function isOperationReady(bytes32 id) view returns (bool ready)",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) returns (bytes4)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function schedule(address target, uint256 value, bytes data, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "function scheduleBatch(address[] targets, uint256[] values, bytes[] payloads, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateDelay(uint256 newDelay)"
    ],
    "0x11D58231A79D866674EaAa043Fdaeae9A3dF4c0E": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x130d8EA0052B45554e4C99079B84df292149Bd5E": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x133E3cc259EaF5ddCF3684Dff62965243FbB6150": [
      "constructor()",
      "error ZeroAddress()",
      "event Initialized(uint8 version)",
      "event NodeELRewardVaultCreated(address nodeDistributor)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event UpdatedVaultProxyImplementation(address vaultProxyImplementation)",
      "event WithdrawVaultCreated(address withdrawVault)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function NODE_REGISTRY_CONTRACT() view returns (bytes32)",
      "function computeNodeELRewardVaultAddress(uint8 _poolId, uint256 _operatorId) view returns (address)",
      "function computeWithdrawVaultAddress(uint8 _poolId, uint256 _operatorId, uint256 _validatorCount) view returns (address)",
      "function deployNodeELRewardVault(uint8 _poolId, uint256 _operatorId) returns (address)",
      "function deployWithdrawVault(uint8 _poolId, uint256 _operatorId, uint256 _validatorCount, uint256 _validatorId) returns (address)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getValidatorWithdrawCredential(address _withdrawVault) pure returns (bytes)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateStaderConfig(address _staderConfig)",
      "function updateVaultProxyAddress(address _vaultProxyImpl)",
      "function vaultProxyImplementation() view returns (address)"
    ],
    "0x135DDa560e946695d6f155dACaFC6f1F25C1F5AF": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb": [
      "function resume()",
      "function name() pure returns (string)",
      "function stop()",
      "function hasInitialized() view returns (bool)",
      "function approve(address _spender, uint256 _amount) returns (bool)",
      "function STAKING_CONTROL_ROLE() view returns (bytes32)",
      "function totalSupply() view returns (uint256)",
      "function getSharesByPooledEth(uint256 _ethAmount) view returns (uint256)",
      "function isStakingPaused() view returns (bool)",
      "function transferFrom(address _sender, address _recipient, uint256 _amount) returns (bool)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function setStakingLimit(uint256 _maxStakeLimit, uint256 _stakeLimitIncreasePerBlock)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function finalizeUpgrade_v2(address _lidoLocator, address _eip712StETH)",
      "function decimals() pure returns (uint8)",
      "function getRecoveryVault() view returns (address)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function getTotalPooledEther() view returns (uint256)",
      "function unsafeChangeDepositedValidators(uint256 _newDepositedValidators)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function increaseAllowance(address _spender, uint256 _addedValue) returns (bool)",
      "function getTreasury() view returns (address)",
      "function isStopped() view returns (bool)",
      "function getBufferedEther() view returns (uint256)",
      "function initialize(address _lidoLocator, address _eip712StETH) payable",
      "function receiveELRewards() payable",
      "function getWithdrawalCredentials() view returns (bytes32)",
      "function getCurrentStakeLimit() view returns (uint256)",
      "function getStakeLimitFullInfo() view returns (bool isStakingPaused, bool isStakingLimitSet, uint256 currentStakeLimit, uint256 maxStakeLimit, uint256 maxStakeLimitGrowthBlocks, uint256 prevStakeLimit, uint256 prevStakeBlockNumber)",
      "function transferSharesFrom(address _sender, address _recipient, uint256 _sharesAmount) returns (uint256)",
      "function balanceOf(address _account) view returns (uint256)",
      "function resumeStaking()",
      "function getFeeDistribution() view returns (uint16 treasuryFeeBasisPoints, uint16 insuranceFeeBasisPoints, uint16 operatorsFeeBasisPoints)",
      "function receiveWithdrawals() payable",
      "function getPooledEthByShares(uint256 _sharesAmount) view returns (uint256)",
      "function allowRecoverability(address token) view returns (bool)",
      "function nonces(address owner) view returns (uint256)",
      "function appId() view returns (bytes32)",
      "function getOracle() view returns (address)",
      "function eip712Domain() view returns (string name, string version, uint256 chainId, address verifyingContract)",
      "function getContractVersion() view returns (uint256)",
      "function getInitializationBlock() view returns (uint256)",
      "function transferShares(address _recipient, uint256 _sharesAmount) returns (uint256)",
      "function symbol() pure returns (string)",
      "function getEIP712StETH() view returns (address)",
      "function transferToVault(address)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function submit(address _referral) payable returns (uint256)",
      "function decreaseAllowance(address _spender, uint256 _subtractedValue) returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function transfer(address _recipient, uint256 _amount) returns (bool)",
      "function deposit(uint256 _maxDepositsCount, uint256 _stakingModuleId, bytes _depositCalldata)",
      "function UNSAFE_CHANGE_DEPOSITED_VALIDATORS_ROLE() view returns (bytes32)",
      "function getBeaconStat() view returns (uint256 depositedValidators, uint256 beaconValidators, uint256 beaconBalance)",
      "function removeStakingLimit()",
      "function handleOracleReport(uint256 _reportTimestamp, uint256 _timeElapsed, uint256 _clValidators, uint256 _clBalance, uint256 _withdrawalVaultBalance, uint256 _elRewardsVaultBalance, uint256 _sharesRequestedToBurn, uint256[] _withdrawalFinalizationBatches, uint256 _simulatedShareRate) returns (uint256[4] postRebaseAmounts)",
      "function getFee() view returns (uint16 totalFee)",
      "function kernel() view returns (address)",
      "function getTotalShares() view returns (uint256)",
      "function permit(address _owner, address _spender, uint256 _value, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s)",
      "function allowance(address _owner, address _spender) view returns (uint256)",
      "function isPetrified() view returns (bool)",
      "function getLidoLocator() view returns (address)",
      "function canDeposit() view returns (bool)",
      "function STAKING_PAUSE_ROLE() view returns (bytes32)",
      "function getDepositableEther() view returns (uint256)",
      "function sharesOf(address _account) view returns (uint256)",
      "function pauseStaking()",
      "function getTotalELRewardsCollected() view returns (uint256)",
      "event StakingPaused()",
      "event StakingResumed()",
      "event StakingLimitSet(uint256 maxStakeLimit, uint256 stakeLimitIncreasePerBlock)",
      "event StakingLimitRemoved()",
      "event CLValidatorsUpdated(uint256 indexed reportTimestamp, uint256 preCLValidators, uint256 postCLValidators)",
      "event DepositedValidatorsChanged(uint256 depositedValidators)",
      "event ETHDistributed(uint256 indexed reportTimestamp, uint256 preCLBalance, uint256 postCLBalance, uint256 withdrawalsWithdrawn, uint256 executionLayerRewardsWithdrawn, uint256 postBufferedEther)",
      "event TokenRebased(uint256 indexed reportTimestamp, uint256 timeElapsed, uint256 preTotalShares, uint256 preTotalEther, uint256 postTotalShares, uint256 postTotalEther, uint256 sharesMintedAsFees)",
      "event LidoLocatorSet(address lidoLocator)",
      "event ELRewardsReceived(uint256 amount)",
      "event WithdrawalsReceived(uint256 amount)",
      "event Submitted(address indexed sender, uint256 amount, address referral)",
      "event Unbuffered(uint256 amount)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)",
      "event EIP712StETHInitialized(address eip712StETH)",
      "event TransferShares(address indexed from, address indexed to, uint256 sharesValue)",
      "event SharesBurnt(address indexed account, uint256 preRebaseTokenAmount, uint256 postRebaseTokenAmount, uint256 sharesAmount)",
      "event Stopped()",
      "event Resumed()",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event ContractVersionSet(uint256 version)"
    ],
    "0x178eeeA9E0928dA2153A1d7951FBe30CF8371b8A": [
      "constructor(address _singleton)"
    ],
    "0x1ae0b73118906f39D5ED30Ae4A484ce2F479a14c": [
      "constructor(address _registryCoordinator)",
      "event Initialized(uint8 version)",
      "event QuorumIndexUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint32 newOperatorIndex)",
      "function OPERATOR_DOES_NOT_EXIST_ID() view returns (bytes32)",
      "function currentOperatorIndex(uint8, bytes32) view returns (uint32)",
      "function deregisterOperator(bytes32 operatorId, bytes quorumNumbers)",
      "function getLatestOperatorUpdate(uint8 quorumNumber, uint32 operatorIndex) view returns (tuple(uint32 fromBlockNumber, bytes32 operatorId))",
      "function getLatestQuorumUpdate(uint8 quorumNumber) view returns (tuple(uint32 fromBlockNumber, uint32 numOperators))",
      "function getOperatorListAtBlockNumber(uint8 quorumNumber, uint32 blockNumber) view returns (bytes32[])",
      "function getOperatorUpdateAtIndex(uint8 quorumNumber, uint32 operatorIndex, uint32 arrayIndex) view returns (tuple(uint32 fromBlockNumber, bytes32 operatorId))",
      "function getQuorumUpdateAtIndex(uint8 quorumNumber, uint32 quorumIndex) view returns (tuple(uint32 fromBlockNumber, uint32 numOperators))",
      "function initializeQuorum(uint8 quorumNumber)",
      "function registerOperator(bytes32 operatorId, bytes quorumNumbers) returns (uint32[])",
      "function registryCoordinator() view returns (address)",
      "function totalOperatorsForQuorum(uint8 quorumNumber) view returns (uint32)"
    ],
    "0x1b97d8F963179C0e17E5F3d85cdfd9a31A49bc66": [
      "constructor(address _strategyManager, address _pauserRegistry, string _version)",
      "error AlreadyBlacklisted()",
      "error BlacklistedToken()",
      "error CurrentlyPaused()",
      "error InputAddressZero()",
      "error InvalidNewPausedStatus()",
      "error InvalidShortString()",
      "error OnlyPauser()",
      "error OnlyUnpauser()",
      "error StrategyAlreadyExists()",
      "error StringTooLong(string str)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address indexed account, uint256 newPausedStatus)",
      "event StrategyBeaconModified(address previousBeacon, address newBeacon)",
      "event StrategySetForToken(address token, address strategy)",
      "event TokenBlacklisted(address token)",
      "event Unpaused(address indexed account, uint256 newPausedStatus)",
      "function blacklistTokens(address[] tokens)",
      "function deployNewStrategy(address token) returns (address newStrategy)",
      "function deployedStrategies(address) view returns (address)",
      "function initialize(address _initialOwner, uint256 _initialPausedStatus, address _strategyBeacon)",
      "function isBlacklisted(address) view returns (bool)",
      "function owner() view returns (address)",
      "function pause(uint256 newPausedStatus)",
      "function pauseAll()",
      "function paused(uint8 index) view returns (bool)",
      "function paused() view returns (uint256)",
      "function pauserRegistry() view returns (address)",
      "function removeStrategiesFromWhitelist(address[] strategiesToRemoveFromWhitelist)",
      "function renounceOwnership()",
      "function strategyBeacon() view returns (address)",
      "function strategyManager() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unpause(uint256 newPausedStatus)",
      "function version() view returns (string)",
      "function whitelistStrategies(address[] strategiesToWhitelist)"
    ],
    "0x1BafAF26d236FbEA3E86075370B554eC0477bFD0": [
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error ServiceManager__ArrayLengthMismatch()",
      "error ServiceManager__InvalidOperator()",
      "error ServiceManager__InvalidStrategy()",
      "error ServiceManager__Unauthorized()",
      "event AVSDirectoryUpdated(address indexed avsDirectory)",
      "event DelegationManagerUpdated(address indexed delegationManager)",
      "event DeployedPolicy(string indexed policyID, string policy)",
      "event Initialized(uint64 version)",
      "event OperatorRegistered(address indexed operator)",
      "event OperatorRemoved(address indexed operator)",
      "event OperatorSigningKeyRotated(address indexed operator, address indexed oldSigningKey, address indexed newSigningKey)",
      "event OperatorsStakesUpdated(address[][] indexed operatorsPerQuorum, bytes indexed quorumNumbers)",
      "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PermissionedOperatorsAdded(address[] operators)",
      "event PermissionedOperatorsRemoved(address[] operators)",
      "event SetPolicy(address indexed client, string indexed policyID)",
      "event StakeRegistryUpdated(address indexed stakeRegistry)",
      "event StrategyAdded(address indexed strategy)",
      "event StrategyRemoved(address indexed strategy)",
      "event TaskValidated(address indexed msgSender, address indexed target, uint256 indexed value, string policyID, string taskId, uint256 quorumThresholdCount, uint256 expireByTime, address[] signerAddresses)",
      "event ThresholdStakeUpdated(uint256 indexed thresholdStake)",
      "function acceptOwnership()",
      "function addPermissionedOperators(address[] _operators)",
      "function addStrategy(address _strategy, uint8 quorumNumber, uint256 index)",
      "function aggregator() view returns (address)",
      "function avsDirectory() view returns (address)",
      "function clientToPolicy(address, string) view returns (bool)",
      "function clientToPolicyID(address) view returns (string)",
      "function delegationManager() view returns (address)",
      "function deployPolicy(string _policyID, string _policy, uint256 _quorumThreshold)",
      "function deployedPolicyIDs(uint256) view returns (string)",
      "function deregisterOperatorFromAVS(address _operator)",
      "function getDeployedPolicies() view returns (string[])",
      "function getOperatorRestakedStrategies(address operator) view returns (address[])",
      "function getRestakeableStrategies() view returns (address[])",
      "function hashTaskSafe(tuple(string taskId, address msgSender, address target, uint256 value, bytes encodedSigAndArgs, string policyID, uint32 quorumThresholdCount, uint256 expireByTime) _task) view returns (bytes32)",
      "function hashTaskWithExpiry(tuple(string taskId, address msgSender, address target, uint256 value, bytes encodedSigAndArgs, string policyID, uint32 quorumThresholdCount, uint256 expireByTime) _task) pure returns (bytes32)",
      "function idToPolicy(string) view returns (string)",
      "function idToSocialGraph(string) view returns (string)",
      "function initialize(address _owner, address _aggregator, address _delegationManager, address _stakeRegistry, address _avsDirectory, uint256 _thresholdStake)",
      "function operators(address) view returns (uint256 totalStake, uint8 status)",
      "function overrideClientPolicyID(string _policyID, address _clientAddress)",
      "function owner() view returns (address)",
      "function pendingOwner() view returns (address)",
      "function policyIdToThreshold(string) view returns (uint256)",
      "function registerOperatorToAVS(address _operatorSigningKey, tuple(bytes signature, bytes32 salt, uint256 expiry) _operatorSignature)",
      "function removePermissionedOperators(address[] _operators)",
      "function removeStrategy(address _strategy)",
      "function renounceOwnership()",
      "function rotatePredicateSigningKey(address _oldSigningKey, address _newSigningKey)",
      "function setAVSDirectory(address _avsDirectory)",
      "function setDelegationManager(address _delegationManager)",
      "function setMetadataURI(string _metadataURI)",
      "function setPolicy(string _policyID)",
      "function setStakeRegistry(address _stakeRegistry)",
      "function setThresholdStake(uint256 _thresholdStake)",
      "function signingKeyToOperator(address) view returns (address)",
      "function socialGraphIDs(uint256) view returns (string)",
      "function spentTaskIds(string) view returns (bool)",
      "function stakeRegistry() view returns (address)",
      "function strategies(uint256) view returns (address)",
      "function thresholdStake() view returns (uint256)",
      "function transferOwnership(address newOwner)",
      "function updateOperatorsForQuorum(address[][] operatorsPerQuorum, bytes quorumNumbers)",
      "function validateSignatures(tuple(string taskId, address msgSender, address target, uint256 value, bytes encodedSigAndArgs, string policyID, uint32 quorumThresholdCount, uint256 expireByTime) _task, address[] signerAddresses, bytes[] signatures) returns (bool isVerified)"
    ],
    "0x1BeE69b7dFFfA4E2d53C2a2Df135C388AD25dCD2": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x1C43cFf3ABBdaE07e57E03F0bd3DD813F40B4785": [
      "constructor()",
      "error CallerNotManager()",
      "error CooldownNotComplete()",
      "error DuplicateSubmissionFromNode()",
      "error ERChangeLimitCrossed()",
      "error ERChangeLimitNotCrossed()",
      "error ERPermissibleChangeOutofBounds()",
      "error FrequencyUnchanged()",
      "error InspectionModeActive()",
      "error InsufficientTrustedNodes()",
      "error InvalidERDataSource()",
      "error InvalidMAPDIndex()",
      "error InvalidMerkleRootIndex()",
      "error InvalidPubkeyLength()",
      "error InvalidReportingBlock()",
      "error InvalidUpdate()",
      "error NodeAlreadyTrusted()",
      "error NodeNotTrusted()",
      "error NotATrustedNode()",
      "error PageNumberAlreadyReported()",
      "error ReportingFutureBlockData()",
      "error ReportingPreviousCycleData()",
      "error UpdateFrequencyNotSet()",
      "error ZeroAddress()",
      "error ZeroFrequency()",
      "event ERDataSourceToggled(bool isPORBasedERData)",
      "event ERInspectionModeActivated(bool erInspectionMode, uint256 time)",
      "event ExchangeRateSubmitted(address indexed from, uint256 block, uint256 totalEth, uint256 ethxSupply, uint256 time)",
      "event ExchangeRateUpdated(uint256 block, uint256 totalEth, uint256 ethxSupply, uint256 time)",
      "event Initialized(uint8 version)",
      "event MissedAttestationPenaltySubmitted(address indexed node, uint256 index, uint256 block, uint256 reportingBlockNumber, bytes[] pubkeys)",
      "event MissedAttestationPenaltyUpdated(uint256 index, uint256 block, bytes[] pubkeys)",
      "event Paused(address account)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SDPriceSubmitted(address indexed node, uint256 sdPriceInETH, uint256 reportedBlock, uint256 block)",
      "event SDPriceUpdated(uint256 sdPriceInETH, uint256 reportedBlock, uint256 block)",
      "event SafeModeDisabled()",
      "event SafeModeEnabled()",
      "event SocializingRewardsMerkleRootSubmitted(address indexed node, uint256 index, bytes32 merkleRoot, uint8 poolId, uint256 block)",
      "event SocializingRewardsMerkleRootUpdated(uint256 index, bytes32 merkleRoot, uint8 poolId, uint256 block)",
      "event TrustedNodeAdded(address indexed node)",
      "event TrustedNodeChangeCoolingPeriodUpdated(uint256 trustedNodeChangeCoolingPeriod)",
      "event TrustedNodeRemoved(address indexed node)",
      "event Unpaused(address account)",
      "event UpdateFrequencyUpdated(uint256 updateFrequency)",
      "event UpdatedERChangeLimit(uint256 erChangeLimit)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event ValidatorStatsSubmitted(address indexed from, uint256 block, uint256 activeValidatorsBalance, uint256 exitedValidatorsBalance, uint256 slashedValidatorsBalance, uint256 activeValidatorsCount, uint256 exitedValidatorsCount, uint256 slashedValidatorsCount, uint256 time)",
      "event ValidatorStatsUpdated(uint256 block, uint256 activeValidatorsBalance, uint256 exitedValidatorsBalance, uint256 slashedValidatorsBalance, uint256 activeValidatorsCount, uint256 exitedValidatorsCount, uint256 slashedValidatorsCount, uint256 time)",
      "event ValidatorVerificationDetailSubmitted(address indexed from, uint8 poolId, uint256 block, bytes[] sortedReadyToDepositPubkeys, bytes[] sortedFrontRunPubkeys, bytes[] sortedInvalidSignaturePubkeys, uint256 time)",
      "event ValidatorVerificationDetailUpdated(uint8 poolId, uint256 block, bytes[] sortedReadyToDepositPubkeys, bytes[] sortedFrontRunPubkeys, bytes[] sortedInvalidSignaturePubkeys, uint256 time)",
      "event WithdrawnValidatorsSubmitted(address indexed from, uint8 poolId, uint256 block, bytes[] pubkeys, uint256 time)",
      "event WithdrawnValidatorsUpdated(uint8 poolId, uint256 block, bytes[] pubkeys, uint256 time)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function ER_CHANGE_MAX_BPS() view returns (uint256)",
      "function ETHX_ER_UF() view returns (bytes32)",
      "function MAX_ER_UPDATE_FREQUENCY() view returns (uint256)",
      "function MIN_TRUSTED_NODES() view returns (uint256)",
      "function MISSED_ATTESTATION_PENALTY_UF() view returns (bytes32)",
      "function SD_PRICE_UF() view returns (bytes32)",
      "function VALIDATOR_STATS_UF() view returns (bytes32)",
      "function VALIDATOR_VERIFICATION_DETAIL_UF() view returns (bytes32)",
      "function WITHDRAWN_VALIDATORS_UF() view returns (bytes32)",
      "function addTrustedNode(address _nodeAddress)",
      "function closeERInspectionMode()",
      "function disableERInspectionMode()",
      "function disableSafeMode()",
      "function enableSafeMode()",
      "function erChangeLimit() view returns (uint256)",
      "function erInspectionMode() view returns (bool)",
      "function erInspectionModeStartBlock() view returns (uint256)",
      "function exchangeRate() view returns (uint256 reportingBlockNumber, uint256 totalETHBalance, uint256 totalETHXSupply)",
      "function getCurrentRewardsIndexByPoolId(uint8 _poolId) view returns (uint256)",
      "function getERReportableBlock() view returns (uint256)",
      "function getExchangeRate() view returns (tuple(uint256 reportingBlockNumber, uint256 totalETHBalance, uint256 totalETHXSupply))",
      "function getMerkleRootReportableBlockByPoolId(uint8 _poolId) view returns (uint256)",
      "function getMissedAttestationPenaltyReportableBlock() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getSDPriceInETH() view returns (uint256)",
      "function getSDPriceReportableBlock() view returns (uint256)",
      "function getValidatorStats() view returns (tuple(uint256 reportingBlockNumber, uint128 exitingValidatorsBalance, uint128 exitedValidatorsBalance, uint128 slashedValidatorsBalance, uint32 exitingValidatorsCount, uint32 exitedValidatorsCount, uint32 slashedValidatorsCount))",
      "function getValidatorStatsReportableBlock() view returns (uint256)",
      "function getValidatorVerificationDetailReportableBlock() view returns (uint256)",
      "function getWithdrawnValidatorReportableBlock() view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function inspectionModeExchangeRate() view returns (uint256 reportingBlockNumber, uint256 totalETHBalance, uint256 totalETHXSupply)",
      "function isPORFeedBasedERData() view returns (bool)",
      "function isTrustedNode(address) view returns (bool)",
      "function lastReportedMAPDIndex() view returns (uint256)",
      "function lastReportedSDPriceData() view returns (uint256 reportingBlockNumber, uint256 sdPriceInETH)",
      "function lastReportingBlockNumberForValidatorVerificationDetailByPoolId(uint8) view returns (uint256)",
      "function lastReportingBlockNumberForWithdrawnValidatorsByPoolId(uint8) view returns (uint256)",
      "function lastTrustedNodeCountChangeBlock() view returns (uint256)",
      "function missedAttestationPenalty(bytes32) view returns (uint16)",
      "function pause()",
      "function paused() view returns (bool)",
      "function removeTrustedNode(address _nodeAddress)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function safeMode() view returns (bool)",
      "function setERUpdateFrequency(uint256 _updateFrequency)",
      "function setMissedAttestationPenaltyUpdateFrequency(uint256 _updateFrequency)",
      "function setSDPriceUpdateFrequency(uint256 _updateFrequency)",
      "function setValidatorStatsUpdateFrequency(uint256 _updateFrequency)",
      "function setValidatorVerificationDetailUpdateFrequency(uint256 _updateFrequency)",
      "function setWithdrawnValidatorsUpdateFrequency(uint256 _updateFrequency)",
      "function staderConfig() view returns (address)",
      "function submitExchangeRateData(tuple(uint256 reportingBlockNumber, uint256 totalETHBalance, uint256 totalETHXSupply) _exchangeRate)",
      "function submitMissedAttestationPenalties(tuple(uint256 reportingBlockNumber, uint256 index, bytes[] sortedPubkeys) _mapd)",
      "function submitSDPrice(tuple(uint256 reportingBlockNumber, uint256 sdPriceInETH) _sdPriceData)",
      "function submitSocializingRewardsMerkleRoot(tuple(uint256 reportingBlockNumber, uint256 index, bytes32 merkleRoot, uint8 poolId, uint256 operatorETHRewards, uint256 userETHRewards, uint256 protocolETHRewards, uint256 operatorSDRewards) _rewardsData)",
      "function submitValidatorStats(tuple(uint256 reportingBlockNumber, uint128 exitingValidatorsBalance, uint128 exitedValidatorsBalance, uint128 slashedValidatorsBalance, uint32 exitingValidatorsCount, uint32 exitedValidatorsCount, uint32 slashedValidatorsCount) _validatorStats)",
      "function submitValidatorVerificationDetail(tuple(uint8 poolId, uint256 reportingBlockNumber, bytes[] sortedReadyToDepositPubkeys, bytes[] sortedFrontRunPubkeys, bytes[] sortedInvalidSignaturePubkeys) _validatorVerificationDetail)",
      "function submitWithdrawnValidators(tuple(uint8 poolId, uint256 reportingBlockNumber, bytes[] sortedPubkeys) _withdrawnValidators)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function togglePORFeedBasedERData()",
      "function trustedNodeChangeCoolingPeriod() view returns (uint256)",
      "function trustedNodesCount() view returns (uint256)",
      "function unpause()",
      "function updateERChangeLimit(uint256 _erChangeLimit)",
      "function updateERFromPORFeed()",
      "function updateFrequencyMap(bytes32) view returns (uint256)",
      "function updateStaderConfig(address _staderConfig)",
      "function updateTrustedNodeChangeCoolingPeriod(uint256 _trustedNodeChangeCoolingPeriod)",
      "function validatorStats() view returns (uint256 reportingBlockNumber, uint128 exitingValidatorsBalance, uint128 exitedValidatorsBalance, uint128 slashedValidatorsBalance, uint32 exitingValidatorsCount, uint32 exitedValidatorsCount, uint32 slashedValidatorsCount)"
    ],
    "0x1C468cf7089D263c2f53e2579b329B16aBc4dd96": [
      "constructor(address _registryCoordinator, address _delegationManager)",
      "event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)",
      "event OperatorStakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)",
      "event QuorumCreated(uint8 indexed quorumNumber)",
      "event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)",
      "event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)",
      "event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)",
      "function MAX_WEIGHING_FUNCTION_LENGTH() view returns (uint8)",
      "function WEIGHTING_DIVISOR() view returns (uint256)",
      "function addStrategies(uint8 quorumNumber, tuple(address strategy, uint96 multiplier)[] _strategyParams)",
      "function delegation() view returns (address)",
      "function deregisterOperator(bytes32 operatorId, bytes quorumNumbers)",
      "function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) view returns (uint96)",
      "function getCurrentTotalStake(uint8 quorumNumber) view returns (uint96)",
      "function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) view returns (tuple(uint32 updateBlockNumber, uint32 nextUpdateBlockNumber, uint96 stake))",
      "function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns (uint96)",
      "function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns (uint96)",
      "function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns (tuple(uint32 updateBlockNumber, uint32 nextUpdateBlockNumber, uint96 stake)[])",
      "function getStakeHistoryLength(bytes32 operatorId, uint8 quorumNumber) view returns (uint256)",
      "function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns (tuple(uint32 updateBlockNumber, uint32 nextUpdateBlockNumber, uint96 stake))",
      "function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns (uint32)",
      "function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns (uint96)",
      "function getTotalStakeHistoryLength(uint8 quorumNumber) view returns (uint256)",
      "function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns (uint32[])",
      "function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns (tuple(uint32 updateBlockNumber, uint32 nextUpdateBlockNumber, uint96 stake))",
      "function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, tuple(address strategy, uint96 multiplier)[] _strategyParams)",
      "function minimumStakeForQuorum(uint8) view returns (uint96)",
      "function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers)",
      "function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns (uint96[], uint96[])",
      "function registryCoordinator() view returns (address)",
      "function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove)",
      "function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake)",
      "function strategiesPerQuorum(uint8, uint256) view returns (address)",
      "function strategyParams(uint8, uint256) view returns (address strategy, uint96 multiplier)",
      "function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns (tuple(address strategy, uint96 multiplier))",
      "function strategyParamsLength(uint8 quorumNumber) view returns (uint256)",
      "function updateOperatorStake(address operator, bytes32 operatorId, bytes quorumNumbers) returns (uint192)",
      "function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns (uint96)"
    ],
    "0x1DE458031bFbe5689deD5A8b9ed57e1E79EaB2A4": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x2088435ABcB1234A9427B755931C9064C93a2595": [
      "constructor(address _serviceManager, address _stakeRegistry, address _blsApkRegistry, address _indexRegistry, address _socketRegistry)",
      "event ChurnApproverUpdated(address prevChurnApprover, address newChurnApprover)",
      "event EjectorUpdated(address prevEjector, address newEjector)",
      "event Initialized(uint8 version)",
      "event OperatorDeregistered(address indexed operator, bytes32 indexed operatorId)",
      "event OperatorRegistered(address indexed operator, bytes32 indexed operatorId)",
      "event OperatorSetParamsUpdated(uint8 indexed quorumNumber, tuple(uint32 maxOperatorCount, uint16 kickBIPsOfOperatorStake, uint16 kickBIPsOfTotalStake) operatorSetParams)",
      "event OperatorSocketUpdate(bytes32 indexed operatorId, string socket)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address indexed account, uint256 newPausedStatus)",
      "event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)",
      "event QuorumBlockNumberUpdated(uint8 indexed quorumNumber, uint256 blocknumber)",
      "event Unpaused(address indexed account, uint256 newPausedStatus)",
      "function OPERATOR_CHURN_APPROVAL_TYPEHASH() view returns (bytes32)",
      "function PUBKEY_REGISTRATION_TYPEHASH() view returns (bytes32)",
      "function blsApkRegistry() view returns (address)",
      "function calculateOperatorChurnApprovalDigestHash(address registeringOperator, bytes32 registeringOperatorId, tuple(uint8 quorumNumber, address operator)[] operatorKickParams, bytes32 salt, uint256 expiry) view returns (bytes32)",
      "function churnApprover() view returns (address)",
      "function createQuorum(tuple(uint32 maxOperatorCount, uint16 kickBIPsOfOperatorStake, uint16 kickBIPsOfTotalStake) operatorSetParams, uint96 minimumStake, tuple(address strategy, uint96 multiplier)[] strategyParams)",
      "function deregisterOperator(bytes quorumNumbers)",
      "function ejectOperator(address operator, bytes quorumNumbers)",
      "function ejectionCooldown() view returns (uint256)",
      "function ejector() view returns (address)",
      "function getCurrentQuorumBitmap(bytes32 operatorId) view returns (uint192)",
      "function getOperator(address operator) view returns (tuple(bytes32 operatorId, uint8 status))",
      "function getOperatorFromId(bytes32 operatorId) view returns (address)",
      "function getOperatorId(address operator) view returns (bytes32)",
      "function getOperatorSetParams(uint8 quorumNumber) view returns (tuple(uint32 maxOperatorCount, uint16 kickBIPsOfOperatorStake, uint16 kickBIPsOfTotalStake))",
      "function getOperatorStatus(address operator) view returns (uint8)",
      "function getQuorumBitmapAtBlockNumberByIndex(bytes32 operatorId, uint32 blockNumber, uint256 index) view returns (uint192)",
      "function getQuorumBitmapHistoryLength(bytes32 operatorId) view returns (uint256)",
      "function getQuorumBitmapIndicesAtBlockNumber(uint32 blockNumber, bytes32[] operatorIds) view returns (uint32[])",
      "function getQuorumBitmapUpdateByIndex(bytes32 operatorId, uint256 index) view returns (tuple(uint32 updateBlockNumber, uint32 nextUpdateBlockNumber, uint192 quorumBitmap))",
      "function indexRegistry() view returns (address)",
      "function initialize(address _initialOwner, address _churnApprover, address _ejector, address _pauserRegistry, uint256 _initialPausedStatus, tuple(uint32 maxOperatorCount, uint16 kickBIPsOfOperatorStake, uint16 kickBIPsOfTotalStake)[] _operatorSetParams, uint96[] _minimumStakes, tuple(address strategy, uint96 multiplier)[][] _strategyParams)",
      "function isChurnApproverSaltUsed(bytes32) view returns (bool)",
      "function lastEjectionTimestamp(address) view returns (uint256)",
      "function numRegistries() view returns (uint256)",
      "function owner() view returns (address)",
      "function pause(uint256 newPausedStatus)",
      "function pauseAll()",
      "function paused(uint8 index) view returns (bool)",
      "function paused() view returns (uint256)",
      "function pauserRegistry() view returns (address)",
      "function pubkeyRegistrationMessageHash(address operator) view returns (tuple(uint256 X, uint256 Y))",
      "function quorumCount() view returns (uint8)",
      "function quorumUpdateBlockNumber(uint8) view returns (uint256)",
      "function registerOperator(bytes quorumNumbers, string socket, tuple(tuple(uint256 X, uint256 Y) pubkeyRegistrationSignature, tuple(uint256 X, uint256 Y) pubkeyG1, tuple(uint256[2] X, uint256[2] Y) pubkeyG2) params, tuple(bytes signature, bytes32 salt, uint256 expiry) operatorSignature)",
      "function registerOperatorWithChurn(bytes quorumNumbers, string socket, tuple(tuple(uint256 X, uint256 Y) pubkeyRegistrationSignature, tuple(uint256 X, uint256 Y) pubkeyG1, tuple(uint256[2] X, uint256[2] Y) pubkeyG2) params, tuple(uint8 quorumNumber, address operator)[] operatorKickParams, tuple(bytes signature, bytes32 salt, uint256 expiry) churnApproverSignature, tuple(bytes signature, bytes32 salt, uint256 expiry) operatorSignature)",
      "function registries(uint256) view returns (address)",
      "function renounceOwnership()",
      "function serviceManager() view returns (address)",
      "function setChurnApprover(address _churnApprover)",
      "function setEjectionCooldown(uint256 _ejectionCooldown)",
      "function setEjector(address _ejector)",
      "function setOperatorSetParams(uint8 quorumNumber, tuple(uint32 maxOperatorCount, uint16 kickBIPsOfOperatorStake, uint16 kickBIPsOfTotalStake) operatorSetParams)",
      "function setPauserRegistry(address newPauserRegistry)",
      "function socketRegistry() view returns (address)",
      "function stakeRegistry() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unpause(uint256 newPausedStatus)",
      "function updateOperators(address[] operators)",
      "function updateOperatorsForQuorum(address[][] operatorsPerQuorum, bytes quorumNumbers)",
      "function updateSocket(string socket)"
    ],
    "0x2540939c846b8096534B0dCC6eBb6eBdF3ae1F3D": [
      "constructor()",
      "error CallerNotManager()",
      "error CallerNotStaderContract()",
      "error InSufficientBalance()",
      "error InvalidAmountProvided()",
      "error TransferFailed()",
      "error ZeroAddress()",
      "event FundWithdrawn(uint256 amount)",
      "event Initialized(uint8 version)",
      "event ReceivedInsuranceFund(uint256 amount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UpdatedStaderConfig(address _staderConfig)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function depositFund() payable",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function reimburseUserFund(uint256 _amount)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateStaderConfig(address _staderConfig)",
      "function withdrawFund(uint256 _amount)"
    ],
    "0x25E5F8B1E7aDf44518d35D5B2271f114e081f0E5": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x278097F753aB3E4A5e897dBB72Cea1592E78e9a5": [
      "constructor()",
      "error CallerNotManager()",
      "error CallerNotStaderContract()",
      "error CallerNotWithdrawVault()",
      "error InsufficientSDToWithdraw(uint256 operatorSDCollateral)",
      "error InsufficientSelfBondToRepay()",
      "error InvalidPoolId()",
      "error InvalidPoolLimit()",
      "error NoStateChange()",
      "error NonTerminalKeysNotZero()",
      "error SDTransferFailed()",
      "error ZeroAddress()",
      "event Initialized(uint8 version)",
      "event ReducedUtilizedPosition(address indexed operator, uint256 sdAmount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SDDeposited(address indexed operator, uint256 sdAmount)",
      "event SDRepaid(address operator, uint256 repayAmount)",
      "event SDSlashed(address indexed operator, address indexed auction, uint256 sdSlashed)",
      "event SDWithdrawn(address indexed operator, uint256 sdAmount)",
      "event UpdatedPoolIdForOperator(uint8 poolId, address operator)",
      "event UpdatedPoolThreshold(uint8 poolId, uint256 minThreshold, uint256 withdrawThreshold)",
      "event UpdatedStaderConfig(address indexed staderConfig)",
      "event UtilizedSDDeposited(address indexed operator, uint256 sdAmount)",
      "event UtilizedSDSlashed(address operator, uint256 sdSlashFromUtilized)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function convertETHToSD(uint256 _ethAmount) view returns (uint256)",
      "function convertSDToETH(uint256 _sdAmount) view returns (uint256)",
      "function depositSDAsCollateral(uint256 _sdAmount)",
      "function depositSDAsCollateralOnBehalf(address _operator, uint256 _sdAmount)",
      "function depositSDFromUtilityPool(address _operator, uint256 _sdAmount)",
      "function getMinimumSDToBond(uint8 _poolId, uint256 _numValidator) view returns (uint256 _minSDToBond)",
      "function getOperatorInfo(address _operator) view returns (uint8 _poolId, uint256 _operatorId, uint256 _validatorCount)",
      "function getOperatorWithdrawThreshold(address _operator) view returns (uint256 operatorWithdrawThreshold)",
      "function getRemainingSDToBond(address _operator, uint8 _poolId, uint256 _numValidator) view returns (uint256)",
      "function getRewardEligibleSD(address _operator) view returns (uint256 _rewardEligibleSD)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasEnoughSDCollateral(address _operator, uint8 _poolId, uint256 _numValidator) view returns (bool)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function maxApproveSD()",
      "function operatorSDBalance(address) view returns (uint256)",
      "function operatorUtilizedSDBalance(address) view returns (uint256)",
      "function poolThresholdbyPoolId(uint8) view returns (uint256 minThreshold, uint256 maxThreshold, uint256 withdrawThreshold, string units)",
      "function reduceUtilizedSDPosition(address _operator, uint256 _sdAmount)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function slashValidatorSD(uint256 _validatorId, uint8 _poolId)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferBackUtilizedSD(address _operator)",
      "function updatePoolThreshold(uint8 _poolId, uint256 _minThreshold, uint256 _maxThreshold, uint256 _withdrawThreshold, string _units)",
      "function updateStaderConfig(address _staderConfig)",
      "function withdraw(uint256 _requestedSD)",
      "function withdrawOnBehalf(uint256 _requestedSD, address _operator)"
    ],
    "0x2b33CF282f867A7FF693A66e11B0FcC5552e4425": [
      "function hasInitialized() view returns (bool)",
      "function KERNEL_APP_ID() pure returns (bytes32)",
      "function APP_ADDR_NAMESPACE() pure returns (bytes32)",
      "function getRecoveryVault() view returns (address)",
      "function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault) returns (address appProxy)",
      "function apps(bytes32, bytes32) view returns (address)",
      "function initialize(address _baseAcl, address _permissionsCreator)",
      "function CORE_NAMESPACE() pure returns (bytes32)",
      "function allowRecoverability(address token) view returns (bool)",
      "function newAppInstance(bytes32 _appId, address _appBase) returns (address appProxy)",
      "function recoveryVaultAppId() view returns (bytes32)",
      "function getInitializationBlock() view returns (uint256)",
      "function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)",
      "function APP_MANAGER_ROLE() view returns (bytes32)",
      "function newPinnedAppInstance(bytes32 _appId, address _appBase) returns (address appProxy)",
      "function transferToVault(address _token)",
      "function setApp(bytes32 _namespace, bytes32 _appId, address _app)",
      "function getApp(bytes32 _namespace, bytes32 _appId) view returns (address)",
      "function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault) returns (address appProxy)",
      "function newAppProxyPinned(address _kernel, bytes32 _appId, bytes _initializePayload) returns (address)",
      "function APP_BASES_NAMESPACE() pure returns (bytes32)",
      "function acl() view returns (address)",
      "function isPetrified() view returns (bool)",
      "function newAppProxy(address _kernel, bytes32 _appId) returns (address)",
      "function DEFAULT_ACL_APP_ID() pure returns (bytes32)",
      "function newAppProxy(address _kernel, bytes32 _appId, bytes _initializePayload) returns (address)",
      "function hasPermission(address _who, address _where, bytes32 _what, bytes _how) view returns (bool)",
      "function newAppProxyPinned(address _kernel, bytes32 _appId) returns (address)",
      "constructor(bool _shouldPetrify)",
      "event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)",
      "event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app)"
    ],
    "0x3073cC90aD39E0C30bb0d4c70F981FbD00f3458f": [
      "constructor()",
      "error CallerNotNodeRegistryContract()",
      "error InvalidRewardAmount()",
      "error NotEnoughRewardToDistribute()",
      "error TransferFailed()",
      "event DistributeRewardFailed(uint256 rewardAmount, uint256 rewardThreshold)",
      "event DistributedRewards(uint256 userShare, uint256 operatorShare, uint256 protocolShare)",
      "event ETHReceived(address indexed sender, uint256 amount)",
      "event SettledFunds(uint256 userShare, uint256 operatorShare, uint256 protocolShare)",
      "event UpdatedStaderConfig(address _staderConfig)",
      "function calculateValidatorWithdrawalShare() view returns (uint256 _userShare, uint256 _operatorShare, uint256 _protocolShare)",
      "function distributeRewards()",
      "function settleFunds()"
    ],
    "0x30C2501B3B2031fBA3000DAa6f8ED0a42fBbB3F0": [
      "constructor()",
      "error CallerNotManager()",
      "error CallerNotStaderContract()",
      "error CouldNotDetermineExcessETH()",
      "error InvalidCommission()",
      "error UnsupportedOperation()",
      "error ZeroAddress()",
      "event Initialized(uint8 version)",
      "event ReceivedCollateralETH(uint256 amount)",
      "event ReceivedInsuranceFund(uint256 amount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TransferredETHToSSPMForDefectiveKeys(uint256 amount)",
      "event UpdatedCommissionFees(uint256 protocolFee, uint256 operatorFee)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event ValidatorDepositedOnBeaconChain(uint256 indexed validatorId, bytes pubKey)",
      "event ValidatorPreDepositedOnBeaconChain(bytes pubKey)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DEPOSIT_NODE_BOND() view returns (uint256)",
      "function MAX_COMMISSION_LIMIT_BIPS() view returns (uint256)",
      "function computeDepositDataRoot(bytes _pubkey, bytes _signature, bytes _withdrawCredential, uint256 _depositAmount) pure returns (bytes32)",
      "function getCollateralETH() view returns (uint256)",
      "function getNodeRegistry() view returns (address)",
      "function getOperatorTotalNonTerminalKeys(address _nodeOperator, uint256 _startIndex, uint256 _endIndex) view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getSocializingPoolAddress() view returns (address)",
      "function getTotalActiveValidatorCount() view returns (uint256)",
      "function getTotalQueuedValidatorCount() view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function isExistingOperator(address _operAddr) view returns (bool)",
      "function isExistingPubkey(bytes _pubkey) view returns (bool)",
      "function operatorFee() view returns (uint256)",
      "function preDepositOnBeaconChain(bytes[] _pubkey, bytes[] _preDepositSignature, uint256 _operatorId, uint256 _operatorTotalKeys) payable",
      "function protocolFee() view returns (uint256)",
      "function receiveRemainingCollateralETH() payable",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setCommissionFees(uint256 _protocolFee, uint256 _operatorFee)",
      "function staderConfig() view returns (address)",
      "function stakeUserETHToBeaconChain() payable",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateStaderConfig(address _staderConfig)"
    ],
    "0x30D20208d987713f46DFD34EF128Bb16C404D10f": [
      "constructor()",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)",
      "event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(uint256 amount)",
      "function burnFrom(address account, uint256 amount)",
      "function checkpoints(address account, uint32 pos) view returns (tuple(uint32 fromBlock, uint224 votes))",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function delegate(address delegatee)",
      "function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)",
      "function delegates(address account) view returns (address)",
      "function getPastTotalSupply(uint256 blockNumber) view returns (uint256)",
      "function getPastVotes(address account, uint256 blockNumber) view returns (uint256)",
      "function getVotes(address account) view returns (uint256)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function numCheckpoints(address account) view returns (uint32)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
    ],
    "0x31724cA0C982A31fbb5C57f4217AB585271fc9a5": [
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event AuthorizationCanceled(address indexed authorizer, bytes32 indexed nonce)",
      "event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce)",
      "event Blacklisted(address indexed _account)",
      "event BlacklisterChanged(address indexed newBlacklister)",
      "event Burn(address indexed burner, uint256 amount)",
      "event ExchangeRateUpdated(address indexed oracle, uint256 newExchangeRate)",
      "event MasterMinterChanged(address indexed newMasterMinter)",
      "event Mint(address indexed minter, address indexed to, uint256 amount)",
      "event MinterConfigured(address indexed minter, uint256 minterAllowedAmount)",
      "event MinterRemoved(address indexed oldMinter)",
      "event OracleUpdated(address indexed newOracle)",
      "event OwnershipTransferred(address previousOwner, address newOwner)",
      "event Pause()",
      "event PauserChanged(address indexed newAddress)",
      "event RescuerChanged(address indexed newRescuer)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event UnBlacklisted(address indexed _account)",
      "event Unpause()",
      "function CANCEL_AUTHORIZATION_TYPEHASH() view returns (bytes32)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function PERMIT_TYPEHASH() view returns (bytes32)",
      "function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() view returns (bytes32)",
      "function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function authorizationState(address authorizer, bytes32 nonce) view returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function blacklist(address _account)",
      "function blacklister() view returns (address)",
      "function burn(uint256 _amount)",
      "function cancelAuthorization(address authorizer, bytes32 nonce, uint8 v, bytes32 r, bytes32 s)",
      "function configureMinter(address minter, uint256 minterAllowedAmount) returns (bool)",
      "function currency() view returns (string)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 decrement) returns (bool)",
      "function exchangeRate() view returns (uint256 _exchangeRate)",
      "function increaseAllowance(address spender, uint256 increment) returns (bool)",
      "function initialize(string tokenName, string tokenSymbol, string tokenCurrency, uint8 tokenDecimals, address newMasterMinter, address newPauser, address newBlacklister, address newOwner)",
      "function initializeV2(string newName)",
      "function initializeV2_1(address lostAndFound)",
      "function isBlacklisted(address _account) view returns (bool)",
      "function isMinter(address account) view returns (bool)",
      "function masterMinter() view returns (address)",
      "function mint(address _to, uint256 _amount) returns (bool)",
      "function minterAllowance(address minter) view returns (uint256)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function oracle() view returns (address _oracle)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function pauser() view returns (address)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s)",
      "function removeMinter(address minter) returns (bool)",
      "function rescueERC20(address tokenContract, address to, uint256 amount)",
      "function rescuer() view returns (address)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s)",
      "function unBlacklist(address _account)",
      "function unpause()",
      "function updateBlacklister(address _newBlacklister)",
      "function updateExchangeRate(uint256 newExchangeRate)",
      "function updateMasterMinter(address _newMasterMinter)",
      "function updateOracle(address newOracle)",
      "function updatePauser(address _newPauser)",
      "function updateRescuer(address newRescuer)",
      "function version() view returns (string)"
    ],
    "0x338477FfaF63c04AC06048787f910671eC914B34": [
      "constructor(address _singleton)"
    ],
    "0x369e6F597e22EaB55fFb173C6d9cD234BD699111": [
      "constructor(address _singleton)"
    ],
    "0x388C818CA8B9251b393131C08a736A67ccB19297": [
      "constructor(address _lido, address _treasury)",
      "event ERC20Recovered(address indexed requestedBy, address indexed token, uint256 amount)",
      "event ERC721Recovered(address indexed requestedBy, address indexed token, uint256 tokenId)",
      "event ETHReceived(uint256 amount)",
      "function LIDO() view returns (address)",
      "function TREASURY() view returns (address)",
      "function recoverERC20(address _token, uint256 _amount)",
      "function recoverERC721(address _token, uint256 _tokenId)",
      "function withdrawRewards(uint256 _maxAmount) returns (uint256 amount)"
    ],
    "0x39053D51B77DC0d36036Fc1fCc8Cb819df8Ef37A": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37": [
      "function ADD_PROTECTED_TOKEN_ROLE() view returns (bytes32)",
      "function supportsInterface(bytes4 _interfaceId) pure returns (bool)",
      "function hasInitialized() view returns (bool)",
      "function ERC1271_INTERFACE_ID() view returns (bytes4)",
      "function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) returns (bytes4)",
      "function isValidSignature(bytes32 _hash, bytes _signature) view returns (bytes4)",
      "function ERC1271_RETURN_INVALID_SIGNATURE() view returns (bytes4)",
      "function TRANSFER_ROLE() view returns (bytes32)",
      "function isValidSignature(bytes _data, bytes _signature) view returns (bytes4)",
      "function getProtectedTokensLength() view returns (uint256)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function RUN_SCRIPT_ROLE() view returns (bytes32)",
      "function SAFE_EXECUTE_ROLE() view returns (bytes32)",
      "function REMOVE_PROTECTED_TOKEN_ROLE() view returns (bytes32)",
      "function deposit(address _token, uint256 _value) payable",
      "function isDepositable() view returns (bool)",
      "function presignHash(bytes32 _hash)",
      "function DESIGNATE_SIGNER_ROLE() view returns (bytes32)",
      "function removeProtectedToken(address _token)",
      "function EXECUTE_ROLE() view returns (bytes32)",
      "function addProtectedToken(address _token)",
      "function allowRecoverability(address) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function initialize()",
      "function protectedTokens(uint256) view returns (address)",
      "function getInitializationBlock() view returns (uint256)",
      "function ERC1271_RETURN_VALID_SIGNATURE() view returns (bytes4)",
      "function transferToVault(address _token)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function setDesignatedSigner(address _designatedSigner)",
      "function designatedSigner() view returns (address)",
      "function safeExecute(address _target, bytes _data)",
      "function PROTECTED_TOKENS_CAP() view returns (uint256)",
      "function ADD_PRESIGNED_HASH_ROLE() view returns (bytes32)",
      "function isPresigned(bytes32) view returns (bool)",
      "function execute(address _target, uint256 _ethValue, bytes _data)",
      "function transfer(address _token, address _to, uint256 _value)",
      "function canForward(address _sender, bytes _evmScript) view returns (bool)",
      "function kernel() view returns (address)",
      "function forward(bytes _evmScript)",
      "function isPetrified() view returns (bool)",
      "function balance(address _token) view returns (uint256)",
      "function isForwarder() pure returns (bool)",
      "event SafeExecute(address indexed sender, address indexed target, bytes data)",
      "event Execute(address indexed sender, address indexed target, uint256 ethValue, bytes data)",
      "event AddProtectedToken(address indexed token)",
      "event RemoveProtectedToken(address indexed token)",
      "event PresignHash(address indexed sender, bytes32 indexed hash)",
      "event SetDesignatedSigner(address indexed sender, address indexed oldSigner, address indexed newSigner)",
      "event ReceiveERC721(address indexed token, address indexed operator, address indexed from, uint256 tokenId, bytes data)",
      "event VaultTransfer(address indexed token, address indexed to, uint256 amount)",
      "event VaultDeposit(address indexed token, address indexed sender, uint256 amount)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)"
    ],
    "0x3ABc4764f0237923d52056CFba7E9AEBf87113D3": [
      "constructor(tuple(address accountingOracle, address depositSecurityModule, address elRewardsVault, address legacyOracle, address lido, address oracleReportSanityChecker, address postTokenRebaseReceiver, address burner, address stakingRouter, address treasury, address validatorsExitBusOracle, address withdrawalQueue, address withdrawalVault, address oracleDaemonConfig) _config)",
      "error ZeroAddress()",
      "function accountingOracle() view returns (address)",
      "function burner() view returns (address)",
      "function coreComponents() view returns (address, address, address, address, address, address)",
      "function depositSecurityModule() view returns (address)",
      "function elRewardsVault() view returns (address)",
      "function legacyOracle() view returns (address)",
      "function lido() view returns (address)",
      "function oracleDaemonConfig() view returns (address)",
      "function oracleReportComponentsForLido() view returns (address, address, address, address, address, address, address)",
      "function oracleReportSanityChecker() view returns (address)",
      "function postTokenRebaseReceiver() view returns (address)",
      "function stakingRouter() view returns (address)",
      "function treasury() view returns (address)",
      "function validatorsExitBusOracle() view returns (address)",
      "function withdrawalQueue() view returns (address)",
      "function withdrawalVault() view returns (address)"
    ],
    "0x3d38Bc6187Ab8403ba4fb9220D78Fb9dD0191CAC": [
      "constructor()",
      "error AlreadyClaimed()",
      "error AlreadyLiquidated()",
      "error CallerNotAuthorizedToRedeem()",
      "error CallerNotManager()",
      "error CallerNotStaderContract()",
      "error CannotFindRequestId()",
      "error InsufficientPoolBalance()",
      "error InvalidAmountOfWithdraw()",
      "error InvalidInput()",
      "error InvalidWithdrawAmount()",
      "error MaxLimitOnWithdrawRequestCountReached()",
      "error NotClaimable()",
      "error NotLiquidatable()",
      "error NotLiquidator()",
      "error OperatorUtilizedSDBalanceNonZero()",
      "error RequestIdNotFinalized(uint256 requestId)",
      "error SDTransferFailed()",
      "error SDUtilizeLimitReached()",
      "error UnHealthyPosition()",
      "error ZeroAddress()",
      "event AccruedFees(uint256 feeAccumulated, uint256 totalProtocolFee, uint256 totalUtilizedSD)",
      "event ClearedUtilizerInterest(address indexed utilizer, uint256 sdInterest)",
      "event CompleteLiquidation(uint256 indexed index)",
      "event Delegated(address indexed delegator, uint256 sdAmount, uint256 sdXToMint)",
      "event FinalizedWithdrawRequest(uint256 nextRequestIdToFinalize)",
      "event Initialized(uint8 version)",
      "event LiquidationCall(address indexed account, uint256 totalLiquidationAmountInEth, uint256 liquidationBonusInEth, uint256 liquidationFeeInEth, address indexed liquidator)",
      "event Paused(address account)",
      "event ProtocolFeeFactorUpdated(uint256 protocolFeeFactor)",
      "event Redeemed(address indexed delegator, uint256 sdAmount, uint256 sdXAmount)",
      "event Repaid(address indexed utilizer, uint256 repayAmount)",
      "event RepaidUtilizedSDBalance(address indexed utilizer, uint256 utilizedSDAmount)",
      "event RequestRedeemed(address caller, uint256 sdToTransfer)",
      "event RiskConfigUpdated(uint256 liquidationThreshold, uint256 liquidationBonusPercent, uint256 liquidationFeePercent, uint256 ltv)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SDUtilized(address utilizer, uint256 utilizeAmount)",
      "event Unpaused(address account)",
      "event UpdatedConservativeEthPerKey(uint256 conservativeEthPerKey)",
      "event UpdatedFinalizationBatchLimit(uint256 finalizationBatchLimit)",
      "event UpdatedMaxETHWorthOfSDPerValidator(uint256 maxETHWorthOfSDPerValidator)",
      "event UpdatedMaxNonRedeemedDelegatorRequestCount(uint256 count)",
      "event UpdatedMinBlockDelayToFinalizeRequest(uint256 minBlockDelayToFinalizeRequest)",
      "event UpdatedStaderConfig(address indexed _staderConfig)",
      "event UtilizationRatePerBlockUpdated(uint256 utilizationRatePerBlock)",
      "event WithdrawRequestReceived(address caller, uint256 nextRequestId, uint256 sdAmountToWithdraw)",
      "event WithdrawnProtocolFee(uint256 amount)",
      "function DECIMAL() view returns (uint256)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MAX_PROTOCOL_FEE() view returns (uint256)",
      "function MAX_UTILIZATION_RATE_PER_BLOCK() view returns (uint256)",
      "function MIN_SD_DELEGATE_LIMIT() view returns (uint256)",
      "function MIN_SD_WITHDRAW_LIMIT() view returns (uint256)",
      "function accrualBlockNumber() view returns (uint256)",
      "function accrueFee()",
      "function accumulatedProtocolFee() view returns (uint256)",
      "function cTokenTotalSupply() view returns (uint256)",
      "function claim(uint256 _requestId)",
      "function clearUtilizerInterest(address[] _utilizer)",
      "function completeLiquidation(address account)",
      "function conservativeEthPerKey() view returns (uint256)",
      "function delegate(uint256 sdAmount)",
      "function delegatorCTokenBalance(address) view returns (uint256)",
      "function delegatorWithdrawRequestedCTokenCount(address) view returns (uint256)",
      "function delegatorWithdrawRequests(uint256) view returns (address owner, uint256 amountOfCToken, uint256 sdExpected, uint256 sdFinalized, uint256 requestBlock)",
      "function exchangeRateCurrent() returns (uint256)",
      "function exchangeRateStored() view returns (uint256)",
      "function finalizationBatchLimit() view returns (uint256)",
      "function finalizeDelegatorWithdrawalRequest()",
      "function getDelegationRatePerBlock() view returns (uint256)",
      "function getDelegatorLatestSDBalance(address _delegator) view returns (uint256)",
      "function getLatestExchangeRate() view returns (uint256)",
      "function getLiquidationThreshold() view returns (uint256)",
      "function getOperatorLiquidation(address account) view returns (tuple(uint256 totalAmountInEth, uint256 totalBonusInEth, uint256 totalFeeInEth, bool isRepaid, bool isClaimed, address liquidator))",
      "function getOperatorTotalEth(address operator) view returns (uint256)",
      "function getPoolAvailableSDBalance() view returns (uint256)",
      "function getRequestIdsByDelegator(address _delegator) view returns (uint256[])",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getUserData(address account) view returns (tuple(uint256 totalInterestSD, uint256 totalCollateralInEth, uint256 healthFactor, uint256 lockedEth))",
      "function getUtilizerLatestBalance(address _utilizer) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function liquidationCall(address account)",
      "function liquidationIndexByOperator(address) view returns (uint256)",
      "function liquidations(uint256) view returns (uint256 totalAmountInEth, uint256 totalBonusInEth, uint256 totalFeeInEth, bool isRepaid, bool isClaimed, address liquidator)",
      "function maxApproveSD()",
      "function maxETHWorthOfSDPerValidator() view returns (uint256)",
      "function maxNonRedeemedDelegatorRequestCount() view returns (uint256)",
      "function minBlockDelayToFinalizeRequest() view returns (uint256)",
      "function nextRequestId() view returns (uint256)",
      "function nextRequestIdToFinalize() view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function poolUtilization() view returns (uint256)",
      "function protocolFee() view returns (uint256)",
      "function renounceRole(bytes32 role, address account)",
      "function repay(uint256 repayAmount) returns (uint256 repaidAmount, uint256 feePaid)",
      "function repayFullAmount() returns (uint256 repaidAmount, uint256 feePaid)",
      "function repayOnBehalf(address utilizer, uint256 repayAmount) returns (uint256 repaidAmount, uint256 feePaid)",
      "function repayUtilizedSDBalance(address _utilizer, uint256 amount)",
      "function requestIdsByDelegatorAddress(address, uint256) view returns (uint256)",
      "function requestWithdraw(uint256 _cTokenAmount) returns (uint256 _requestId)",
      "function requestWithdrawWithSDAmount(uint256 _sdAmount) returns (uint256 _requestId)",
      "function revokeRole(bytes32 role, address account)",
      "function riskConfig() view returns (uint256 liquidationThreshold, uint256 liquidationBonusPercent, uint256 liquidationFeePercent, uint256 ltv)",
      "function sdRequestedForWithdraw() view returns (uint256)",
      "function sdReservedForClaim() view returns (uint256)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function totalUtilizedSD() view returns (uint256)",
      "function unpause()",
      "function updateConservativeEthPerKey(uint256 _newEthPerKey)",
      "function updateFinalizationBatchLimit(uint256 _finalizationBatchLimit)",
      "function updateMaxETHWorthOfSDPerValidator(uint256 _maxETHWorthOfSDPerValidator)",
      "function updateMaxNonRedeemedDelegatorRequestCount(uint256 _count)",
      "function updateMinBlockDelayToFinalizeRequest(uint256 _minBlockDelayToFinalizeRequest)",
      "function updateProtocolFee(uint256 _protocolFee)",
      "function updateRiskConfig(uint256 liquidationThreshold, uint256 liquidationBonusPercent, uint256 liquidationFeePercent, uint256 ltv)",
      "function updateStaderConfig(address _staderConfig)",
      "function updateUtilizationRatePerBlock(uint256 _utilizationRatePerBlock)",
      "function utilizationRatePerBlock() view returns (uint256)",
      "function utilize(uint256 utilizeAmount)",
      "function utilizeIndex() view returns (uint256)",
      "function utilizeWhileAddingKeys(address operator, uint256 utilizeAmount, uint256 nonTerminalKeyCount)",
      "function utilizerBalanceCurrent(address account) returns (uint256)",
      "function utilizerBalanceStored(address account) view returns (uint256)",
      "function utilizerData(address) view returns (uint256 principal, uint256 utilizeIndex)",
      "function withdrawProtocolFee(uint256 _amount)"
    ],
    "0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "0x41675C099F32341bf84BFc5382aF534df5C7461a": [
      "constructor()",
      "event AddedOwner(address indexed owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address indexed handler)",
      "event ChangedGuard(address indexed guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address indexed module)",
      "event EnabledModule(address indexed module)",
      "event ExecutionFailure(bytes32 indexed txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 indexed txHash, uint256 payment)",
      "event RemovedOwner(address indexed owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0x442af784A788A5bd6F42A01Ebe9F287a871243fb": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "0x461854d84Ee845F905e0eCf6C288DDEEb4A9533F": [
      "constructor(address _singleton)"
    ],
    "0x4ABEF2263d5A5ED582FC9A9789a41D85b68d69DB": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x4C22fFd479637EA0eD61D451CBe6355627283358": [
      "constructor()",
      "error CallerNotManager()",
      "error ZeroAddress()",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Initialized(uint8 version)",
      "event Paused(address account)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event Unpaused(address account)",
      "event UpdatedStaderConfig(address indexed _staderConfig)",
      "function BURNER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MINTER_ROLE() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burnFrom(address account, uint256 amount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function mint(address to, uint256 amount)",
      "function name() view returns (string)",
      "function pause()",
      "function paused() view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)",
      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
      "function unpause()",
      "function updateStaderConfig(address _staderConfig)"
    ],
    "0x4c614C7BB9420caA1F19cB2C58B00864f2125Ce2": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0x4f4Bfa0861F62309934a5551E0B2541Ee82fdcF1": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x5050389572f2d220ad927CcbeA0D406831012390": [
      "constructor(address _singleton)"
    ],
    "0x54945180dB7943c0ed0FEE7EdaB2Bd24620256bc": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x549CFb2EBbB21c20e1C35bF3b944cC76D13177B9": [
      "constructor()",
      "error CallerNotExistingRewardAddress()",
      "error CallerNotManager()",
      "error CallerNotNewRewardAddress()",
      "error CallerNotOperator()",
      "error CallerNotStaderContract()",
      "error DuplicatePoolIDOrPoolNotAdded()",
      "error InvalidKeyCount()",
      "error InvalidStartAndEndIndex()",
      "error MaxKeyLimitReached()",
      "error MaxOperatorLimitReached()",
      "error MisMatchingInputKeysSize()",
      "error NotAPermissionedNodeOperator()",
      "error NotEnoughSDCollateral()",
      "error OperatorAlreadyActive()",
      "error OperatorAlreadyDeactivate()",
      "error OperatorAlreadyOnBoardedInProtocol()",
      "error OperatorIsDeactivate()",
      "error OperatorNotOnBoarded()",
      "error PageNumberIsZero()",
      "error PubkeyAlreadyExist()",
      "error TooManyVerifiedKeysReported()",
      "error TooManyWithdrawnKeysReported()",
      "error UNEXPECTED_STATUS()",
      "error ZeroAddress()",
      "event AddedValidatorKey(address indexed nodeOperator, bytes pubkey, uint256 validatorId)",
      "event DecreasedTotalActiveValidatorCount(uint256 totalActiveValidatorCount)",
      "event IncreasedTotalActiveValidatorCount(uint256 totalActiveValidatorCount)",
      "event Initialized(uint8 version)",
      "event MarkedValidatorStatusAsPreDeposit(bytes pubkey)",
      "event MaxOperatorIdLimitChanged(uint256 maxOperatorId)",
      "event OnboardedOperator(address indexed nodeOperator, address nodeRewardAddress, uint256 operatorId)",
      "event OperatorActivated(uint256 operatorID)",
      "event OperatorDeactivated(uint256 operatorID)",
      "event OperatorRewardAddressUpdated(address indexed nodeOperator, address indexed rewardAddress)",
      "event OperatorWhitelisted(address permissionedNO)",
      "event Paused(address account)",
      "event RewardAddressProposed(address indexed nodeOperator, address indexed rewardAddress)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Unpaused(address account)",
      "event UpdatedInputKeyCountLimit(uint256 batchKeyDepositLimit)",
      "event UpdatedMaxNonTerminalKeyPerOperator(uint64 maxNonTerminalKeyPerOperator)",
      "event UpdatedOperatorName(address indexed nodeOperator, string operatorName)",
      "event UpdatedQueuedValidatorIndex(uint256 indexed operatorId, uint256 nextQueuedValidatorIndex)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event UpdatedValidatorDepositBlock(uint256 validatorId, uint256 depositBlock)",
      "event UpdatedVerifiedKeyBatchSize(uint256 verifiedKeysBatchSize)",
      "event UpdatedWithdrawnKeyBatchSize(uint256 withdrawnKeysBatchSize)",
      "event ValidatorMarkedAsFrontRunned(bytes pubkey, uint256 validatorId)",
      "event ValidatorStatusMarkedAsInvalidSignature(bytes pubkey, uint256 validatorId)",
      "event ValidatorWithdrawn(bytes pubkey, uint256 validatorId)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function POOL_ID() view returns (uint8)",
      "function activateNodeOperator(uint256 _operatorId)",
      "function addValidatorKeys(bytes[] _pubkey, bytes[] _preDepositSignature, bytes[] _depositSignature)",
      "function allocateValidatorsAndUpdateOperatorId(uint256 _numValidators) returns (uint256[] selectedOperatorCapacity)",
      "function confirmRewardAddressChange(address _operatorAddress)",
      "function deactivateNodeOperator(uint256 _operatorId)",
      "function getAllActiveValidators(uint256 _pageNumber, uint256 _pageSize) view returns (tuple(uint8 status, bytes pubkey, bytes preDepositSignature, bytes depositSignature, address withdrawVaultAddress, uint256 operatorId, uint256 depositBlock, uint256 withdrawnBlock)[])",
      "function getCollateralETH() pure returns (uint256)",
      "function getOperatorRewardAddress(uint256 _operatorId) view returns (address)",
      "function getOperatorTotalKeys(uint256 _operatorId) view returns (uint256 _totalKeys)",
      "function getOperatorTotalNonTerminalKeys(address _nodeOperator, uint256 _startIndex, uint256 _endIndex) view returns (uint64)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getSocializingPoolStateChangeBlock(uint256 _operatorId) view returns (uint256)",
      "function getTotalActiveValidatorCount() view returns (uint256)",
      "function getTotalQueuedValidatorCount() view returns (uint256)",
      "function getValidatorsByOperator(address _operator, uint256 _pageNumber, uint256 _pageSize) view returns (tuple(uint8 status, bytes pubkey, bytes preDepositSignature, bytes depositSignature, address withdrawVaultAddress, uint256 operatorId, uint256 depositBlock, uint256 withdrawnBlock)[])",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function increaseTotalActiveValidatorCount(uint256 _count)",
      "function initialize(address _admin, address _staderConfig)",
      "function inputKeyCountLimit() view returns (uint16)",
      "function isExistingOperator(address _operAddr) view returns (bool)",
      "function isExistingPubkey(bytes _pubkey) view returns (bool)",
      "function markValidatorReadyToDeposit(bytes[] _readyToDepositPubkey, bytes[] _frontRunPubkey, bytes[] _invalidSignaturePubkey)",
      "function markValidatorStatusAsPreDeposit(bytes _pubkey)",
      "function maxNonTerminalKeyPerOperator() view returns (uint64)",
      "function maxOperatorId() view returns (uint256)",
      "function nextOperatorId() view returns (uint256)",
      "function nextQueuedValidatorIndexByOperatorId(uint256) view returns (uint256)",
      "function nextValidatorId() view returns (uint256)",
      "function onboardNodeOperator(string _operatorName, address _operatorRewardAddress) returns (address feeRecipientAddress)",
      "function onlyPreDepositValidator(bytes _pubkey) view",
      "function operatorIDByAddress(address) view returns (uint256)",
      "function operatorIdForExcessDeposit() view returns (uint256)",
      "function operatorStructById(uint256) view returns (bool active, bool optedForSocializingPool, string operatorName, address operatorRewardAddress, address operatorAddress)",
      "function pause()",
      "function paused() view returns (bool)",
      "function permissionList(address) view returns (bool)",
      "function proposeRewardAddress(address _operatorAddress, address _newRewardAddress)",
      "function proposedRewardAddressByOperatorId(uint256) view returns (address)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function socializingPoolStateChangeBlock(uint256) view returns (uint256)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function totalActiveOperatorCount() view returns (uint256)",
      "function totalActiveValidatorCount() view returns (uint256)",
      "function unpause()",
      "function updateDepositStatusAndBlock(uint256 _validatorId)",
      "function updateInputKeyCountLimit(uint16 _inputKeyCountLimit)",
      "function updateMaxOperatorId(uint256 _maxOperatorId)",
      "function updateOperatorName(string _operatorName)",
      "function updateQueuedValidatorIndex(uint256 _operatorId, uint256 _nextQueuedValidatorIndex)",
      "function updateStaderConfig(address _staderConfig)",
      "function updateVerifiedKeysBatchSize(uint256 _verifiedKeysBatchSize)",
      "function validatorIdByPubkey(bytes) view returns (uint256)",
      "function validatorIdsByOperatorId(uint256, uint256) view returns (uint256)",
      "function validatorRegistry(uint256) view returns (uint8 status, bytes pubkey, bytes preDepositSignature, bytes depositSignature, address withdrawVaultAddress, uint256 operatorId, uint256 depositBlock, uint256 withdrawnBlock)",
      "function verifiedKeyBatchSize() view returns (uint256)",
      "function whitelistPermissionedNOs(address[] _permissionedNOs)",
      "function withdrawnValidators(bytes[] _pubkeys)"
    ],
    "0x5a2a4F2F3C18f09179B6703e63D9eDD165909073": [
      "constructor(address implementation_)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Upgraded(address indexed implementation)",
      "function implementation() view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeTo(address newImplementation)"
    ],
    "0x5a3eD432f2De9645940333e4474bBAAB8cf64cf2": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x5b60105ceD5207D6ad217BF2d426e133454eCFB4": [
      "constructor(address _registryCoordinator)",
      "function getOperatorSocket(bytes32 _operatorId) view returns (string)",
      "function migrateOperatorSockets(bytes32[] _operatorIds, string[] _sockets)",
      "function operatorIdToSocket(bytes32) view returns (string)",
      "function registryCoordinator() view returns (address)",
      "function setOperatorSocket(bytes32 _operatorId, string _socket)"
    ],
    "0x5d0B9cE2e277Daf508528E9f6Bf6314E79e4eD2b": [
      "constructor(address _registryCoordinator)",
      "event Initialized(uint8 version)",
      "event NewPubkeyRegistration(address indexed operator, tuple(uint256 X, uint256 Y) pubkeyG1, tuple(uint256[2] X, uint256[2] Y) pubkeyG2)",
      "event OperatorAddedToQuorums(address operator, bytes32 operatorId, bytes quorumNumbers)",
      "event OperatorRemovedFromQuorums(address operator, bytes32 operatorId, bytes quorumNumbers)",
      "function apkHistory(uint8, uint256) view returns (bytes24 apkHash, uint32 updateBlockNumber, uint32 nextUpdateBlockNumber)",
      "function currentApk(uint8) view returns (uint256 X, uint256 Y)",
      "function deregisterOperator(address operator, bytes quorumNumbers)",
      "function getApk(uint8 quorumNumber) view returns (tuple(uint256 X, uint256 Y))",
      "function getApkHashAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns (bytes24)",
      "function getApkHistoryLength(uint8 quorumNumber) view returns (uint32)",
      "function getApkIndicesAtBlockNumber(bytes quorumNumbers, uint256 blockNumber) view returns (uint32[])",
      "function getApkUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns (tuple(bytes24 apkHash, uint32 updateBlockNumber, uint32 nextUpdateBlockNumber))",
      "function getOperatorFromPubkeyHash(bytes32 pubkeyHash) view returns (address)",
      "function getOperatorId(address operator) view returns (bytes32)",
      "function getRegisteredPubkey(address operator) view returns (tuple(uint256 X, uint256 Y), bytes32)",
      "function initializeQuorum(uint8 quorumNumber)",
      "function operatorToPubkey(address) view returns (uint256 X, uint256 Y)",
      "function operatorToPubkeyHash(address) view returns (bytes32)",
      "function pubkeyHashToOperator(bytes32) view returns (address)",
      "function registerBLSPublicKey(address operator, tuple(tuple(uint256 X, uint256 Y) pubkeyRegistrationSignature, tuple(uint256 X, uint256 Y) pubkeyG1, tuple(uint256[2] X, uint256[2] Y) pubkeyG2) params, tuple(uint256 X, uint256 Y) pubkeyRegistrationMessageHash) returns (bytes32 operatorId)",
      "function registerOperator(address operator, bytes quorumNumbers)",
      "function registryCoordinator() view returns (address)"
    ],
    "0x5e4C39Ad7A3E881585e383dB9827EB4811f6F647": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x62242213E6FA34E943844f9B3124150EFb9CB0dD": [
      "constructor()",
      "event GlobalRatePeriodIntervalUpdated(uint64 previousValue, uint64 newValue)",
      "event GlobalSymbolsPerPeriodUpdated(uint64 previousValue, uint64 newValue)",
      "event Initialized(uint8 version)",
      "event OnDemandPaymentUpdated(address indexed account, uint80 onDemandPayment, uint80 totalDeposit)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PriceParamsUpdated(uint64 previousMinNumSymbols, uint64 newMinNumSymbols, uint64 previousPricePerSymbol, uint64 newPricePerSymbol, uint64 previousPriceUpdateCooldown, uint64 newPriceUpdateCooldown)",
      "event ReservationPeriodIntervalUpdated(uint64 previousValue, uint64 newValue)",
      "event ReservationUpdated(address indexed account, tuple(uint64 symbolsPerSecond, uint64 startTimestamp, uint64 endTimestamp, bytes quorumNumbers, bytes quorumSplits) reservation)",
      "function depositOnDemand(address _account) payable",
      "function getOnDemandTotalDeposit(address _account) view returns (uint80)",
      "function getOnDemandTotalDeposits(address[] _accounts) view returns (uint80[] _payments)",
      "function getReservation(address _account) view returns (tuple(uint64 symbolsPerSecond, uint64 startTimestamp, uint64 endTimestamp, bytes quorumNumbers, bytes quorumSplits))",
      "function getReservations(address[] _accounts) view returns (tuple(uint64 symbolsPerSecond, uint64 startTimestamp, uint64 endTimestamp, bytes quorumNumbers, bytes quorumSplits)[] _reservations)",
      "function globalRatePeriodInterval() view returns (uint64)",
      "function globalSymbolsPerPeriod() view returns (uint64)",
      "function initialize(address _initialOwner, uint64 _minNumSymbols, uint64 _pricePerSymbol, uint64 _priceUpdateCooldown, uint64 _globalSymbolsPerPeriod, uint64 _reservationPeriodInterval, uint64 _globalRatePeriodInterval)",
      "function lastPriceUpdateTime() view returns (uint64)",
      "function minNumSymbols() view returns (uint64)",
      "function onDemandPayments(address) view returns (uint80 totalDeposit)",
      "function owner() view returns (address)",
      "function pricePerSymbol() view returns (uint64)",
      "function priceUpdateCooldown() view returns (uint64)",
      "function renounceOwnership()",
      "function reservationPeriodInterval() view returns (uint64)",
      "function reservations(address) view returns (uint64 symbolsPerSecond, uint64 startTimestamp, uint64 endTimestamp, bytes quorumNumbers, bytes quorumSplits)",
      "function setGlobalRatePeriodInterval(uint64 _globalRatePeriodInterval)",
      "function setGlobalSymbolsPerPeriod(uint64 _globalSymbolsPerPeriod)",
      "function setPriceParams(uint64 _minNumSymbols, uint64 _pricePerSymbol, uint64 _priceUpdateCooldown)",
      "function setReservation(address _account, tuple(uint64 symbolsPerSecond, uint64 startTimestamp, uint64 endTimestamp, bytes quorumNumbers, bytes quorumSplits) _reservation)",
      "function setReservationPeriodInterval(uint64 _reservationPeriodInterval)",
      "function transferOwnership(address newOwner)",
      "function withdraw(uint256 _amount)",
      "function withdrawERC20(address _token, uint256 _amount)"
    ],
    "0x6232397ebac4f5772e53285B26c47914E9461E75": [
      "constructor(address _lidoLocator, address _admin, tuple(uint256 exitedValidatorsPerDayLimit, uint256 appearedValidatorsPerDayLimit, uint256 annualBalanceIncreaseBPLimit, uint256 simulatedShareRateDeviationBPLimit, uint256 maxValidatorExitRequestsPerReport, uint256 maxItemsPerExtraDataTransaction, uint256 maxNodeOperatorsPerExtraDataItem, uint256 requestTimestampMargin, uint256 maxPositiveTokenRebase, uint256 initialSlashingAmountPWei, uint256 inactivityPenaltiesAmountPWei, uint256 clBalanceOraclesErrorUpperBPLimit) _limitsList)",
      "error ActualShareRateIsZero()",
      "error AdminCannotBeZero()",
      "error CalledNotFromLido()",
      "error ExitedValidatorsLimitExceeded(uint256 limitPerDay, uint256 exitedPerDay)",
      "error IncorrectAppearedValidators(uint256 appearedValidatorsLimit)",
      "error IncorrectCLBalanceDecrease(uint256 negativeCLRebaseSum, uint256 maxNegativeCLRebaseSum)",
      "error IncorrectCLBalanceIncrease(uint256 annualBalanceDiff)",
      "error IncorrectELRewardsVaultBalance(uint256 actualELRewardsVaultBalance)",
      "error IncorrectExitedValidators(uint256 exitedValidatorsLimit)",
      "error IncorrectLimitValue(uint256 value, uint256 minAllowedValue, uint256 maxAllowedValue)",
      "error IncorrectNumberOfExitRequestsPerReport(uint256 maxRequestsCount)",
      "error IncorrectRequestFinalization(uint256 requestCreationBlock)",
      "error IncorrectSharesRequestedToBurn(uint256 actualSharesToBurn)",
      "error IncorrectSimulatedShareRate(uint256 simulatedShareRate, uint256 actualShareRate)",
      "error IncorrectWithdrawalsVaultBalance(uint256 actualWithdrawalVaultBalance)",
      "error NegativeRebaseFailedCLBalanceMismatch(uint256 reportedValue, uint256 provedValue, uint256 limitBP)",
      "error NegativeRebaseFailedSecondOpinionReportIsNotReady()",
      "error NegativeRebaseFailedWithdrawalVaultBalanceMismatch(uint256 reportedValue, uint256 provedValue)",
      "error NegativeTotalPooledEther()",
      "error TooHighTokenRebaseLimit()",
      "error TooLowTokenRebaseLimit()",
      "error TooManyItemsPerExtraDataTransaction(uint256 maxItemsCount, uint256 receivedItemsCount)",
      "error TooManyNodeOpsPerExtraDataItem(uint256 itemIndex, uint256 nodeOpsCount)",
      "event AnnualBalanceIncreaseBPLimitSet(uint256 annualBalanceIncreaseBPLimit)",
      "event AppearedValidatorsPerDayLimitSet(uint256 appearedValidatorsPerDayLimit)",
      "event CLBalanceOraclesErrorUpperBPLimitSet(uint256 clBalanceOraclesErrorUpperBPLimit)",
      "event ExitedValidatorsPerDayLimitSet(uint256 exitedValidatorsPerDayLimit)",
      "event InactivityPenaltiesAmountSet(uint256 inactivityPenaltiesAmountPWei)",
      "event InitialSlashingAmountSet(uint256 initialSlashingAmountPWei)",
      "event MaxItemsPerExtraDataTransactionSet(uint256 maxItemsPerExtraDataTransaction)",
      "event MaxNodeOperatorsPerExtraDataItemSet(uint256 maxNodeOperatorsPerExtraDataItem)",
      "event MaxPositiveTokenRebaseSet(uint256 maxPositiveTokenRebase)",
      "event MaxValidatorExitRequestsPerReportSet(uint256 maxValidatorExitRequestsPerReport)",
      "event NegativeCLRebaseAccepted(uint256 refSlot, uint256 clTotalBalance, uint256 clBalanceDecrease, uint256 maxAllowedCLRebaseNegativeSum)",
      "event NegativeCLRebaseConfirmed(uint256 refSlot, uint256 clBalanceWei, uint256 withdrawalVaultBalance)",
      "event RequestTimestampMarginSet(uint256 requestTimestampMargin)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SecondOpinionOracleChanged(address indexed secondOpinionOracle)",
      "event SimulatedShareRateDeviationBPLimitSet(uint256 simulatedShareRateDeviationBPLimit)",
      "function ALL_LIMITS_MANAGER_ROLE() view returns (bytes32)",
      "function ANNUAL_BALANCE_INCREASE_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function APPEARED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXITED_VALIDATORS_PER_DAY_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function INITIAL_SLASHING_AND_PENALTIES_MANAGER_ROLE() view returns (bytes32)",
      "function MAX_ITEMS_PER_EXTRA_DATA_TRANSACTION_ROLE() view returns (bytes32)",
      "function MAX_NODE_OPERATORS_PER_EXTRA_DATA_ITEM_ROLE() view returns (bytes32)",
      "function MAX_POSITIVE_TOKEN_REBASE_MANAGER_ROLE() view returns (bytes32)",
      "function MAX_VALIDATOR_EXIT_REQUESTS_PER_REPORT_ROLE() view returns (bytes32)",
      "function REQUEST_TIMESTAMP_MARGIN_MANAGER_ROLE() view returns (bytes32)",
      "function SECOND_OPINION_MANAGER_ROLE() view returns (bytes32)",
      "function SHARE_RATE_DEVIATION_LIMIT_MANAGER_ROLE() view returns (bytes32)",
      "function checkAccountingOracleReport(uint256 _timeElapsed, uint256 _preCLBalance, uint256 _postCLBalance, uint256 _withdrawalVaultBalance, uint256 _elRewardsVaultBalance, uint256 _sharesRequestedToBurn, uint256 _preCLValidators, uint256 _postCLValidators)",
      "function checkExitBusOracleReport(uint256 _exitRequestsCount) view",
      "function checkExitedValidatorsRatePerDay(uint256 _exitedValidatorsCount) view",
      "function checkExtraDataItemsCountPerTransaction(uint256 _extraDataListItemsCount) view",
      "function checkNodeOperatorsPerExtraDataItemCount(uint256 _itemIndex, uint256 _nodeOperatorsCount) view",
      "function checkSimulatedShareRate(uint256 _postTotalPooledEther, uint256 _postTotalShares, uint256 _etherLockedOnWithdrawalQueue, uint256 _sharesBurntDueToWithdrawals, uint256 _simulatedShareRate) view",
      "function checkWithdrawalQueueOracleReport(uint256 _lastFinalizableRequestId, uint256 _reportTimestamp) view",
      "function getLidoLocator() view returns (address)",
      "function getMaxPositiveTokenRebase() view returns (uint256)",
      "function getOracleReportLimits() view returns (tuple(uint256 exitedValidatorsPerDayLimit, uint256 appearedValidatorsPerDayLimit, uint256 annualBalanceIncreaseBPLimit, uint256 simulatedShareRateDeviationBPLimit, uint256 maxValidatorExitRequestsPerReport, uint256 maxItemsPerExtraDataTransaction, uint256 maxNodeOperatorsPerExtraDataItem, uint256 requestTimestampMargin, uint256 maxPositiveTokenRebase, uint256 initialSlashingAmountPWei, uint256 inactivityPenaltiesAmountPWei, uint256 clBalanceOraclesErrorUpperBPLimit))",
      "function getReportDataCount() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function reportData(uint256) view returns (uint64 timestamp, uint64 totalExitedValidators, uint128 negativeCLRebaseWei)",
      "function revokeRole(bytes32 role, address account)",
      "function secondOpinionOracle() view returns (address)",
      "function setAnnualBalanceIncreaseBPLimit(uint256 _annualBalanceIncreaseBPLimit)",
      "function setAppearedValidatorsPerDayLimit(uint256 _appearedValidatorsPerDayLimit)",
      "function setExitedValidatorsPerDayLimit(uint256 _exitedValidatorsPerDayLimit)",
      "function setInitialSlashingAndPenaltiesAmount(uint256 _initialSlashingAmountPWei, uint256 _inactivityPenaltiesAmountPWei)",
      "function setMaxExitRequestsPerOracleReport(uint256 _maxValidatorExitRequestsPerReport)",
      "function setMaxItemsPerExtraDataTransaction(uint256 _maxItemsPerExtraDataTransaction)",
      "function setMaxNodeOperatorsPerExtraDataItem(uint256 _maxNodeOperatorsPerExtraDataItem)",
      "function setMaxPositiveTokenRebase(uint256 _maxPositiveTokenRebase)",
      "function setOracleReportLimits(tuple(uint256 exitedValidatorsPerDayLimit, uint256 appearedValidatorsPerDayLimit, uint256 annualBalanceIncreaseBPLimit, uint256 simulatedShareRateDeviationBPLimit, uint256 maxValidatorExitRequestsPerReport, uint256 maxItemsPerExtraDataTransaction, uint256 maxNodeOperatorsPerExtraDataItem, uint256 requestTimestampMargin, uint256 maxPositiveTokenRebase, uint256 initialSlashingAmountPWei, uint256 inactivityPenaltiesAmountPWei, uint256 clBalanceOraclesErrorUpperBPLimit) _limitsList, address _secondOpinionOracle)",
      "function setRequestTimestampMargin(uint256 _requestTimestampMargin)",
      "function setSecondOpinionOracleAndCLBalanceUpperMargin(address _secondOpinionOracle, uint256 _clBalanceOraclesErrorUpperBPLimit)",
      "function setSimulatedShareRateDeviationBPLimit(uint256 _simulatedShareRateDeviationBPLimit)",
      "function smoothenTokenRebase(uint256 _preTotalPooledEther, uint256 _preTotalShares, uint256 _preCLBalance, uint256 _postCLBalance, uint256 _withdrawalVaultBalance, uint256 _elRewardsVaultBalance, uint256 _sharesRequestedToBurn, uint256 _etherToLockForWithdrawals, uint256 _newSharesToBurnForWithdrawals) view returns (uint256 withdrawals, uint256 elRewards, uint256 simulatedSharesToBurn, uint256 sharesToBurn)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0x62e0b431990Ea128fe685E764FB04e7d604603B0": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x63c0c19a282a1B52b07dD5a65b58948A07DAE32B": [
      "constructor(address _delegationManager, address _entryPoint)",
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error ExecutionFailed()",
      "error InvalidEIP712NameLength()",
      "error InvalidEIP712VersionLength()",
      "error InvalidShortString()",
      "error NotDelegationManager()",
      "error NotEntryPoint()",
      "error NotEntryPointOrSelf()",
      "error NotSelf()",
      "error StringTooLong(string str)",
      "error UnauthorizedCallContext()",
      "error UnsupportedCallType(bytes1 callType)",
      "error UnsupportedExecType(bytes1 execType)",
      "event EIP712DomainChanged()",
      "event SentPrefund(address indexed sender, uint256 amount, bool success)",
      "event SetDelegationManager(address indexed newDelegationManager)",
      "event SetEntryPoint(address indexed entryPoint)",
      "event TryExecuteUnsuccessful(uint256 batchExecutionindex, bytes result)",
      "function DOMAIN_VERSION() view returns (string)",
      "function NAME() view returns (string)",
      "function PACKED_USER_OP_TYPEHASH() view returns (bytes32)",
      "function VERSION() view returns (string)",
      "function addDeposit() payable",
      "function delegationManager() view returns (address)",
      "function disableDelegation(tuple(address delegate, address delegator, bytes32 authority, tuple(address enforcer, bytes terms, bytes args)[] caveats, uint256 salt, bytes signature) _delegation)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function enableDelegation(tuple(address delegate, address delegator, bytes32 authority, tuple(address enforcer, bytes terms, bytes args)[] caveats, uint256 salt, bytes signature) _delegation)",
      "function entryPoint() view returns (address)",
      "function execute(tuple(address target, uint256 value, bytes callData) _execution) payable",
      "function execute(bytes32 _mode, bytes _executionCalldata) payable",
      "function executeFromExecutor(bytes32 _mode, bytes _executionCalldata) payable returns (bytes[] returnData_)",
      "function getDeposit() view returns (uint256)",
      "function getDomainHash() view returns (bytes32)",
      "function getNonce(uint192 _key) view returns (uint256)",
      "function getNonce() view returns (uint256)",
      "function getPackedUserOperationHash(tuple(address sender, uint256 nonce, bytes initCode, bytes callData, bytes32 accountGasLimits, uint256 preVerificationGas, bytes32 gasFees, bytes paymasterAndData, bytes signature) _userOp) view returns (bytes32)",
      "function getPackedUserOperationTypedDataHash(tuple(address sender, uint256 nonce, bytes initCode, bytes callData, bytes32 accountGasLimits, uint256 preVerificationGas, bytes32 gasFees, bytes paymasterAndData, bytes signature) _userOp) view returns (bytes32)",
      "function isDelegationDisabled(bytes32 _delegationHash) view returns (bool)",
      "function isValidSignature(bytes32 _hash, bytes _signature) view returns (bytes4 magicValue_)",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) view returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) view returns (bytes4)",
      "function onERC721Received(address, address, uint256, bytes) view returns (bytes4)",
      "function redeemDelegations(bytes[] _permissionContexts, bytes32[] _modes, bytes[] _executionCallDatas)",
      "function supportsExecutionMode(bytes32 _mode) view returns (bool)",
      "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
      "function validateUserOp(tuple(address sender, uint256 nonce, bytes initCode, bytes callData, bytes32 accountGasLimits, uint256 preVerificationGas, bytes32 gasFees, bytes paymasterAndData, bytes signature) _userOp, bytes32, uint256 _missingAccountFunds) returns (uint256 validationData_)",
      "function withdrawDeposit(address _withdrawAddress, uint256 _withdrawAmount)"
    ],
    "0x678f0D5Aac7398502B50B24B3Ce67EA2dC4Fc29C": [
      "constructor()",
      "error CallerNotAuthorizedToRedeem()",
      "error CallerNotManager()",
      "error CannotFindRequestId()",
      "error ETHTransferFailed()",
      "error InSufficientBalance()",
      "error InvalidWithdrawAmount()",
      "error MaxLimitOnWithdrawRequestCountReached()",
      "error ProtocolNotHealthy()",
      "error RequestAlreadyRedeemed(uint256 _requestId)",
      "error UnsupportedOperationInSafeMode()",
      "error ZeroAddress()",
      "error ZeroAddressReceived()",
      "error requestIdNotFinalized(uint256 _requestId)",
      "event FinalizedWithdrawRequest(uint256 requestId)",
      "event Initialized(uint8 version)",
      "event Paused(address account)",
      "event ReceivedETH(uint256 _amount)",
      "event RecipientAddressUpdated(address indexed _sender, uint256 _requestId, address _oldRecipient, address _newRecipient)",
      "event RequestRedeemed(address indexed _sender, address _recipient, uint256 _ethTransferred)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Unpaused(address account)",
      "event UpdatedFinalizationBatchLimit(uint256 paginationLimit)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event WithdrawRequestReceived(address indexed _msgSender, address _recipient, uint256 _requestId, uint256 _sharesAmount, uint256 _etherAmount)",
      "event WithdrawRequestReferral(address indexed _msgSender, address _recipient, uint256 _requestId, uint256 _sharesAmount, uint256 _ethAmount, string _referralId)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function claim(uint256 _requestId)",
      "function ethRequestedForWithdraw() view returns (uint256)",
      "function finalizationBatchLimit() view returns (uint256)",
      "function finalizeUserWithdrawalRequest()",
      "function getRequestIdsByUser(address _owner) view returns (uint256[])",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function maxNonRedeemedUserRequestCount() view returns (uint256)",
      "function nextRequestId() view returns (uint256)",
      "function nextRequestIdToFinalize() view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function requestIdsByUserAddress(address, uint256) view returns (uint256)",
      "function requestWithdraw(uint256 _ethXAmount, address _owner, string _referralId) returns (uint256 _requestId)",
      "function requestWithdraw(uint256 _ethXAmount, address _owner) returns (uint256)",
      "function revokeRole(bytes32 role, address account)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unpause()",
      "function updateFinalizationBatchLimit(uint256 _finalizationBatchLimit)",
      "function updateStaderConfig(address _staderConfig)",
      "function userWithdrawRequests(uint256) view returns (address owner, uint256 ethXAmount, uint256 ethExpected, uint256 ethFinalized, uint256 requestBlock)"
    ],
    "0x67B12264Ca3e0037Fc7E22F2457b42643a04C86e": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x716DF97EBC05CCb2745Bf04CD67df75cf2d11ee9": [
      "constructor()",
      "error CallerNotManager()",
      "error CallerNotStaderContract()",
      "error CooldownNotComplete()",
      "error InsufficientBalance()",
      "error InvalidDepositAmount()",
      "error PoolIdDoesNotExit()",
      "error TransferFailed()",
      "error UnsupportedOperation()",
      "error UnsupportedOperationInSafeMode()",
      "error ZeroAddress()",
      "event AuctionedEthReceived(uint256 amount)",
      "event DepositReferral(address indexed caller, address indexed owner, uint256 assets, uint256 shares, string referralId)",
      "event Deposited(address indexed caller, address indexed owner, uint256 assets, uint256 shares)",
      "event ETHTransferredToPool(uint256 indexed poolId, address poolAddress, uint256 validatorCount)",
      "event ExecutionLayerRewardsReceived(uint256 amount)",
      "event Initialized(uint8 version)",
      "event Paused(address account)",
      "event ReceivedExcessEthFromPool(uint8 indexed poolId)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TransferredETHToUserWithdrawManager(uint256 amount)",
      "event Unpaused(address account)",
      "event UpdatedExcessETHDepositCoolDown(uint256 excessETHDepositCoolDown)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event WithdrawVaultUserShareReceived(uint256 amount)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function convertToAssets(uint256 _shares) view returns (uint256)",
      "function convertToShares(uint256 _assets) view returns (uint256)",
      "function deposit(address _receiver, string _referralId) payable returns (uint256 _shares)",
      "function deposit(address _receiver) payable returns (uint256)",
      "function depositETHOverTargetWeight()",
      "function excessETHDepositCoolDown() view returns (uint256)",
      "function getExchangeRate() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function isVaultHealthy() view returns (bool)",
      "function lastExcessETHDepositBlock() view returns (uint256)",
      "function maxDeposit() view returns (uint256)",
      "function minDeposit() view returns (uint256)",
      "function pause()",
      "function paused() view returns (bool)",
      "function previewDeposit(uint256 _assets) view returns (uint256)",
      "function previewWithdraw(uint256 _shares) view returns (uint256)",
      "function receiveEthFromAuction() payable",
      "function receiveExcessEthFromPool(uint8 _poolId) payable",
      "function receiveExecutionLayerRewards() payable",
      "function receiveWithdrawVaultUserShare() payable",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function totalAssets() view returns (uint256)",
      "function transferETHToUserWithdrawManager(uint256 _amount)",
      "function unpause()",
      "function updateExcessETHDepositCoolDown(uint256 _excessETHDepositCoolDown)",
      "function updateStaderConfig(address _staderConfig)",
      "function validatorBatchDeposit(uint8 _poolId)"
    ],
    "0x740058839A1668Af5700e5d7B062007275e77D25": [
      "constructor(address _delegation, address _pauserRegistry, address _permissionController, uint32 _DEALLOCATION_DELAY, uint32 _ALLOCATION_CONFIGURATION_DELAY, string _version)",
      "error AlreadyMemberOfSet()",
      "error CurrentlyPaused()",
      "error Empty()",
      "error InputAddressZero()",
      "error InputArrayLengthMismatch()",
      "error InsufficientMagnitude()",
      "error InvalidAVSRegistrar()",
      "error InvalidCaller()",
      "error InvalidNewPausedStatus()",
      "error InvalidOperator()",
      "error InvalidOperatorSet()",
      "error InvalidPermissions()",
      "error InvalidShortString()",
      "error InvalidSnapshotOrdering()",
      "error InvalidWadToSlash()",
      "error ModificationAlreadyPending()",
      "error NonexistentAVSMetadata()",
      "error NotMemberOfSet()",
      "error OnlyPauser()",
      "error OnlyUnpauser()",
      "error OperatorNotSlashable()",
      "error OutOfBounds()",
      "error SameMagnitude()",
      "error StrategiesMustBeInAscendingOrder()",
      "error StrategyAlreadyInOperatorSet()",
      "error StrategyNotInOperatorSet()",
      "error StringTooLong(string str)",
      "error UninitializedAllocationDelay()",
      "event AVSMetadataURIUpdated(address indexed avs, string metadataURI)",
      "event AVSRegistrarSet(address avs, address registrar)",
      "event AllocationDelaySet(address operator, uint32 delay, uint32 effectBlock)",
      "event AllocationUpdated(address operator, tuple(address avs, uint32 id) operatorSet, address strategy, uint64 magnitude, uint32 effectBlock)",
      "event EncumberedMagnitudeUpdated(address operator, address strategy, uint64 encumberedMagnitude)",
      "event Initialized(uint8 version)",
      "event MaxMagnitudeUpdated(address operator, address strategy, uint64 maxMagnitude)",
      "event OperatorAddedToOperatorSet(address indexed operator, tuple(address avs, uint32 id) operatorSet)",
      "event OperatorRemovedFromOperatorSet(address indexed operator, tuple(address avs, uint32 id) operatorSet)",
      "event OperatorSetCreated(tuple(address avs, uint32 id) operatorSet)",
      "event OperatorSlashed(address operator, tuple(address avs, uint32 id) operatorSet, address[] strategies, uint256[] wadSlashed, string description)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address indexed account, uint256 newPausedStatus)",
      "event StrategyAddedToOperatorSet(tuple(address avs, uint32 id) operatorSet, address strategy)",
      "event StrategyRemovedFromOperatorSet(tuple(address avs, uint32 id) operatorSet, address strategy)",
      "event Unpaused(address indexed account, uint256 newPausedStatus)",
      "function ALLOCATION_CONFIGURATION_DELAY() view returns (uint32)",
      "function DEALLOCATION_DELAY() view returns (uint32)",
      "function addStrategiesToOperatorSet(address avs, uint32 operatorSetId, address[] strategies)",
      "function clearDeallocationQueue(address operator, address[] strategies, uint16[] numToClear)",
      "function createOperatorSets(address avs, tuple(uint32 operatorSetId, address[] strategies)[] params)",
      "function delegation() view returns (address)",
      "function deregisterFromOperatorSets(tuple(address operator, address avs, uint32[] operatorSetIds) params)",
      "function getAVSRegistrar(address avs) view returns (address)",
      "function getAllocatableMagnitude(address operator, address strategy) view returns (uint64)",
      "function getAllocatedSets(address operator) view returns (tuple(address avs, uint32 id)[])",
      "function getAllocatedStake(tuple(address avs, uint32 id) operatorSet, address[] operators, address[] strategies) view returns (uint256[][])",
      "function getAllocatedStrategies(address operator, tuple(address avs, uint32 id) operatorSet) view returns (address[])",
      "function getAllocation(address operator, tuple(address avs, uint32 id) operatorSet, address strategy) view returns (tuple(uint64 currentMagnitude, int128 pendingDiff, uint32 effectBlock))",
      "function getAllocationDelay(address operator) view returns (bool, uint32)",
      "function getAllocations(address[] operators, tuple(address avs, uint32 id) operatorSet, address strategy) view returns (tuple(uint64 currentMagnitude, int128 pendingDiff, uint32 effectBlock)[])",
      "function getEncumberedMagnitude(address operator, address strategy) view returns (uint64)",
      "function getMaxMagnitude(address operator, address strategy) view returns (uint64)",
      "function getMaxMagnitudes(address[] operators, address strategy) view returns (uint64[])",
      "function getMaxMagnitudes(address operator, address[] strategies) view returns (uint64[])",
      "function getMaxMagnitudesAtBlock(address operator, address[] strategies, uint32 blockNumber) view returns (uint64[])",
      "function getMemberCount(tuple(address avs, uint32 id) operatorSet) view returns (uint256)",
      "function getMembers(tuple(address avs, uint32 id) operatorSet) view returns (address[])",
      "function getMinimumSlashableStake(tuple(address avs, uint32 id) operatorSet, address[] operators, address[] strategies, uint32 futureBlock) view returns (uint256[][] slashableStake)",
      "function getOperatorSetCount(address avs) view returns (uint256)",
      "function getRegisteredSets(address operator) view returns (tuple(address avs, uint32 id)[])",
      "function getStrategiesInOperatorSet(tuple(address avs, uint32 id) operatorSet) view returns (address[])",
      "function getStrategyAllocations(address operator, address strategy) view returns (tuple(address avs, uint32 id)[], tuple(uint64 currentMagnitude, int128 pendingDiff, uint32 effectBlock)[])",
      "function initialize(address initialOwner, uint256 initialPausedStatus)",
      "function isMemberOfOperatorSet(address operator, tuple(address avs, uint32 id) operatorSet) view returns (bool)",
      "function isOperatorSet(tuple(address avs, uint32 id) operatorSet) view returns (bool)",
      "function isOperatorSlashable(address operator, tuple(address avs, uint32 id) operatorSet) view returns (bool)",
      "function modifyAllocations(address operator, tuple(tuple(address avs, uint32 id) operatorSet, address[] strategies, uint64[] newMagnitudes)[] params)",
      "function owner() view returns (address)",
      "function pause(uint256 newPausedStatus)",
      "function pauseAll()",
      "function paused(uint8 index) view returns (bool)",
      "function paused() view returns (uint256)",
      "function pauserRegistry() view returns (address)",
      "function permissionController() view returns (address)",
      "function registerForOperatorSets(address operator, tuple(address avs, uint32[] operatorSetIds, bytes data) params)",
      "function removeStrategiesFromOperatorSet(address avs, uint32 operatorSetId, address[] strategies)",
      "function renounceOwnership()",
      "function setAVSRegistrar(address avs, address registrar)",
      "function setAllocationDelay(address operator, uint32 delay)",
      "function slashOperator(address avs, tuple(address operator, uint32 operatorSetId, address[] strategies, uint256[] wadsToSlash, string description) params)",
      "function transferOwnership(address newOwner)",
      "function unpause(uint256 newPausedStatus)",
      "function updateAVSMetadataURI(address avs, string metadataURI)",
      "function version() view returns (string)"
    ],
    "0x78cb05379a3b66E5227f2C1496432D7FFE794Fad": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x7Af4730cc8EbAd1a050dcad5c03c33D2793EE91f": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x7DECf99BE82Ea4Cf72F381a5fCBc04228955FBE5": [
      "constructor()",
      "event DisperserAdded(uint32 indexed key, address indexed disperser)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function disperserKeyToAddress(uint32 _key) view returns (address)",
      "function disperserKeyToInfo(uint32) view returns (address disperserAddress)",
      "function initialize(address _initialOwner)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setDisperserInfo(uint32 _disperserKey, tuple(address disperserAddress) _disperserInfo)",
      "function transferOwnership(address newOwner)"
    ],
    "0x7F68e9C17D22005688b8E6968fCe31e32B4B03d1": [
      "constructor(address _singleton)"
    ],
    "0x808e8783Ba7e315517952d195E20bC8eDBa7da23": [
      "constructor()",
      "error IndenticalValue()",
      "error InvalidLimits()",
      "error InvalidMaxDepositValue()",
      "error InvalidMaxWithdrawValue()",
      "error InvalidMinDepositValue()",
      "error InvalidMinWithdrawValue()",
      "error ZeroAddress()",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SetAccount(bytes32 key, address newAddress)",
      "event SetConstant(bytes32 key, uint256 amount)",
      "event SetContract(bytes32 key, address newAddress)",
      "event SetToken(bytes32 key, address newAddress)",
      "event SetVariable(bytes32 key, uint256 amount)",
      "function ADMIN() view returns (bytes32)",
      "function AUCTION_CONTRACT() view returns (bytes32)",
      "function DECIMALS() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function ETHX_SUPPLY_POR_FEED() view returns (bytes32)",
      "function ETH_BALANCE_POR_FEED() view returns (bytes32)",
      "function ETH_DEPOSIT_CONTRACT() view returns (bytes32)",
      "function ETH_PER_NODE() view returns (bytes32)",
      "function ETHx() view returns (bytes32)",
      "function FULL_DEPOSIT_SIZE() view returns (bytes32)",
      "function MANAGER() view returns (bytes32)",
      "function MAX_DEPOSIT_AMOUNT() view returns (bytes32)",
      "function MAX_WITHDRAW_AMOUNT() view returns (bytes32)",
      "function MIN_BLOCK_DELAY_TO_FINALIZE_WITHDRAW_REQUEST() view returns (bytes32)",
      "function MIN_DEPOSIT_AMOUNT() view returns (bytes32)",
      "function MIN_WITHDRAW_AMOUNT() view returns (bytes32)",
      "function NODE_EL_REWARD_VAULT_IMPLEMENTATION() view returns (bytes32)",
      "function OPERATOR() view returns (bytes32)",
      "function OPERATOR_MAX_NAME_LENGTH() view returns (bytes32)",
      "function OPERATOR_REWARD_COLLECTOR() view returns (bytes32)",
      "function PENALTY_CONTRACT() view returns (bytes32)",
      "function PERMISSIONED_NODE_REGISTRY() view returns (bytes32)",
      "function PERMISSIONED_POOL() view returns (bytes32)",
      "function PERMISSIONED_SOCIALIZING_POOL() view returns (bytes32)",
      "function PERMISSIONLESS_NODE_REGISTRY() view returns (bytes32)",
      "function PERMISSIONLESS_POOL() view returns (bytes32)",
      "function PERMISSIONLESS_SOCIALIZING_POOL() view returns (bytes32)",
      "function POOL_SELECTOR() view returns (bytes32)",
      "function POOL_UTILS() view returns (bytes32)",
      "function PRE_DEPOSIT_SIZE() view returns (bytes32)",
      "function REWARD_THRESHOLD() view returns (bytes32)",
      "function ROLE_SD_REWARD_APPROVER() view returns (bytes32)",
      "function ROLE_SD_REWARD_ENTRY() view returns (bytes32)",
      "function SD() view returns (bytes32)",
      "function SD_COLLATERAL() view returns (bytes32)",
      "function SD_INCENTIVE_CONTROLLER() view returns (bytes32)",
      "function SD_UTILITY_POOL() view returns (bytes32)",
      "function SOCIALIZING_POOL_CYCLE_DURATION() view returns (bytes32)",
      "function SOCIALIZING_POOL_OPT_IN_COOLING_PERIOD() view returns (bytes32)",
      "function STADER_INSURANCE_FUND() view returns (bytes32)",
      "function STADER_ORACLE() view returns (bytes32)",
      "function STADER_TREASURY() view returns (bytes32)",
      "function STAKE_POOL_MANAGER() view returns (bytes32)",
      "function TOTAL_FEE() view returns (bytes32)",
      "function USER_WITHDRAW_MANAGER() view returns (bytes32)",
      "function VALIDATOR_WITHDRAWAL_VAULT_IMPLEMENTATION() view returns (bytes32)",
      "function VAULT_FACTORY() view returns (bytes32)",
      "function WITHDRAWN_KEYS_BATCH_SIZE() view returns (bytes32)",
      "function getAdmin() view returns (address)",
      "function getAuctionContract() view returns (address)",
      "function getDecimals() view returns (uint256)",
      "function getETHBalancePORFeedProxy() view returns (address)",
      "function getETHDepositContract() view returns (address)",
      "function getETHXSupplyPORFeedProxy() view returns (address)",
      "function getETHxToken() view returns (address)",
      "function getFullDepositSize() view returns (uint256)",
      "function getMaxDepositAmount() view returns (uint256)",
      "function getMaxWithdrawAmount() view returns (uint256)",
      "function getMinBlockDelayToFinalizeWithdrawRequest() view returns (uint256)",
      "function getMinDepositAmount() view returns (uint256)",
      "function getMinWithdrawAmount() view returns (uint256)",
      "function getNodeELRewardVaultImplementation() view returns (address)",
      "function getOperatorMaxNameLength() view returns (uint256)",
      "function getOperatorRewardsCollector() view returns (address)",
      "function getPenaltyContract() view returns (address)",
      "function getPermissionedNodeRegistry() view returns (address)",
      "function getPermissionedPool() view returns (address)",
      "function getPermissionedSocializingPool() view returns (address)",
      "function getPermissionlessNodeRegistry() view returns (address)",
      "function getPermissionlessPool() view returns (address)",
      "function getPermissionlessSocializingPool() view returns (address)",
      "function getPoolSelector() view returns (address)",
      "function getPoolUtils() view returns (address)",
      "function getPreDepositSize() view returns (uint256)",
      "function getRewardsThreshold() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getSDCollateral() view returns (address)",
      "function getSDIncentiveController() view returns (address)",
      "function getSDUtilityPool() view returns (address)",
      "function getSocializingPoolCycleDuration() view returns (uint256)",
      "function getSocializingPoolOptInCoolingPeriod() view returns (uint256)",
      "function getStaderInsuranceFund() view returns (address)",
      "function getStaderOracle() view returns (address)",
      "function getStaderToken() view returns (address)",
      "function getStaderTreasury() view returns (address)",
      "function getStakePoolManager() view returns (address)",
      "function getStakedEthPerNode() view returns (uint256)",
      "function getTotalFee() view returns (uint256)",
      "function getUserWithdrawManager() view returns (address)",
      "function getValidatorWithdrawalVaultImplementation() view returns (address)",
      "function getVaultFactory() view returns (address)",
      "function getWithdrawnKeyBatchSize() view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _ethDepositContract)",
      "function onlyManagerRole(address account) view returns (bool)",
      "function onlyOperatorRole(address account) view returns (bool)",
      "function onlySDRewardApproverRole(address account) view returns (bool)",
      "function onlySDRewardEntryRole(address account) view returns (bool)",
      "function onlyStaderContract(address _addr, bytes32 _contractName) view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateAdmin(address _admin)",
      "function updateAuctionContract(address _auctionContract)",
      "function updateETHBalancePORFeedProxy(address _ethBalanceProxy)",
      "function updateETHXSupplyPORFeedProxy(address _ethXSupplyProxy)",
      "function updateETHxToken(address _ethX)",
      "function updateMaxDepositAmount(uint256 _maxDepositAmount)",
      "function updateMaxWithdrawAmount(uint256 _maxWithdrawAmount)",
      "function updateMinBlockDelayToFinalizeWithdrawRequest(uint256 _minBlockDelay)",
      "function updateMinDepositAmount(uint256 _minDepositAmount)",
      "function updateMinWithdrawAmount(uint256 _minWithdrawAmount)",
      "function updateNodeELRewardImplementation(address _nodeELRewardVaultImpl)",
      "function updateOperatorRewardsCollector(address _operatorRewardsCollector)",
      "function updatePenaltyContract(address _penaltyContract)",
      "function updatePermissionedNodeRegistry(address _permissionedNodeRegistry)",
      "function updatePermissionedPool(address _permissionedPool)",
      "function updatePermissionedSocializingPool(address _permissionedSocializePool)",
      "function updatePermissionlessNodeRegistry(address _permissionlessNodeRegistry)",
      "function updatePermissionlessPool(address _permissionlessPool)",
      "function updatePermissionlessSocializingPool(address _permissionlessSocializePool)",
      "function updatePoolSelector(address _poolSelector)",
      "function updatePoolUtils(address _poolUtils)",
      "function updateRewardsThreshold(uint256 _rewardsThreshold)",
      "function updateSDCollateral(address _sdCollateral)",
      "function updateSDIncentiveController(address _sdIncentiveController)",
      "function updateSDUtilityPool(address _utilityPool)",
      "function updateSocializingPoolCycleDuration(uint256 _socializingPoolCycleDuration)",
      "function updateSocializingPoolOptInCoolingPeriod(uint256 _SocializePoolOptInCoolingPeriod)",
      "function updateStaderInsuranceFund(address _staderInsuranceFund)",
      "function updateStaderOracle(address _staderOracle)",
      "function updateStaderToken(address _staderToken)",
      "function updateStaderTreasury(address _staderTreasury)",
      "function updateStakePoolManager(address _stakePoolManager)",
      "function updateUserWithdrawManager(address _userWithdrawManager)",
      "function updateValidatorWithdrawalVaultImplementation(address _validatorWithdrawalVaultImpl)",
      "function updateVaultFactory(address _vaultFactory)",
      "function updateWithdrawnKeysBatchSize(uint256 _withdrawnKeysBatchSize)"
    ],
    "0x8247EF5705d3345516286B72bFE6D690197C2E99": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x8322793CEB2d8740aD83ED431e69aE87fa1a86AB": [
      "constructor()",
      "error CallerNotManager()",
      "error CallerNotOperator()",
      "error CallerNotStaderContract()",
      "error InvalidNewTargetInput()",
      "error InvalidSumOfPoolWeights()",
      "error InvalidTargetWeight()",
      "error ZeroAddress()",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UpdatedPoolAllocationMaxSize(uint16 poolAllocationMaxSize)",
      "event UpdatedPoolWeight(uint8 indexed poolId, uint256 poolWeight)",
      "event UpdatedStaderConfig(address staderConfig)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function POOL_WEIGHTS_SUM() view returns (uint256)",
      "function computePoolAllocationForDeposit(uint8 _poolId, uint256 _newValidatorToRegister) view returns (uint256 selectedPoolCapacity)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function poolAllocationForExcessETHDeposit(uint256 _excessETHAmount) returns (uint256[] selectedPoolCapacity, uint8[] poolIdArray)",
      "function poolAllocationMaxSize() view returns (uint16)",
      "function poolIdArrayIndexForExcessDeposit() view returns (uint256)",
      "function poolWeights(uint8) view returns (uint256)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updatePoolAllocationMaxSize(uint16 _poolAllocationMaxSize)",
      "function updatePoolWeights(uint256[] _poolTargets)",
      "function updateStaderConfig(address _staderConfig)"
    ],
    "0x84645f1B80475992Df2C65c28bE6688d15dc6ED6": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x84ffDC9De310144D889540A49052F6d1AdB2C335": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x852deD011285fe67063a08005c71a85690503Cee": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "0x853cc0D5917f49B57B8e9F89e491F5E18919093A": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "0x858646372CC42E1A627fcE94aa7A7033e7CF075A": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x85A22763f94D703d2ee39E9374616ae4C1612569": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x870679E138bCdf293b7Ff14dD44b70FC97e12fc0": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "0x89eDa99C0551d4320b56F82DDE8dF2f8D2eF81aA": [
      "constructor(address _depositContract)",
      "error AppAuthLidoFailed()",
      "error ArraysLengthMismatch(uint256 firstArrayLength, uint256 secondArrayLength)",
      "error DepositContractZeroAddress()",
      "error DirectETHTransfer()",
      "error EmptyWithdrawalsCredentials()",
      "error ExitedValidatorsCountCannotDecrease()",
      "error InvalidContractVersionIncrement()",
      "error InvalidDepositsValue(uint256 etherValue, uint256 depositsCount)",
      "error InvalidFeeSum()",
      "error InvalidMaxDepositPerBlockValue()",
      "error InvalidMinDepositBlockDistance()",
      "error InvalidPriorityExitShareThreshold()",
      "error InvalidPublicKeysBatchLength(uint256 actual, uint256 expected)",
      "error InvalidReportData(uint256 code)",
      "error InvalidSignaturesBatchLength(uint256 actual, uint256 expected)",
      "error InvalidStakeShareLimit()",
      "error NonZeroContractVersionOnInit()",
      "error ReportedExitedValidatorsExceedDeposited(uint256 reportedExitedValidatorsCount, uint256 depositedValidatorsCount)",
      "error StakingModuleAddressExists()",
      "error StakingModuleNotActive()",
      "error StakingModuleStatusTheSame()",
      "error StakingModuleUnregistered()",
      "error StakingModuleWrongName()",
      "error StakingModulesLimitExceeded()",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error UnexpectedCurrentValidatorsCount(uint256 currentModuleExitedValidatorsCount, uint256 currentNodeOpExitedValidatorsCount, uint256 currentNodeOpStuckValidatorsCount)",
      "error UnexpectedFinalExitedValidatorsCount(uint256 newModuleTotalExitedValidatorsCount, uint256 newModuleTotalExitedValidatorsCountInStakingRouter)",
      "error UnrecoverableModuleError()",
      "error ZeroAddressAdmin()",
      "error ZeroAddressLido()",
      "error ZeroAddressStakingModule()",
      "event ContractVersionSet(uint256 version)",
      "event ExitedAndStuckValidatorsCountsUpdateFailed(uint256 indexed stakingModuleId, bytes lowLevelRevertData)",
      "event RewardsMintedReportFailed(uint256 indexed stakingModuleId, bytes lowLevelRevertData)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StakingModuleAdded(uint256 indexed stakingModuleId, address stakingModule, string name, address createdBy)",
      "event StakingModuleExitedValidatorsIncompleteReporting(uint256 indexed stakingModuleId, uint256 unreportedExitedValidatorsCount)",
      "event StakingModuleFeesSet(uint256 indexed stakingModuleId, uint256 stakingModuleFee, uint256 treasuryFee, address setBy)",
      "event StakingModuleMaxDepositsPerBlockSet(uint256 indexed stakingModuleId, uint256 maxDepositsPerBlock, address setBy)",
      "event StakingModuleMinDepositBlockDistanceSet(uint256 indexed stakingModuleId, uint256 minDepositBlockDistance, address setBy)",
      "event StakingModuleShareLimitSet(uint256 indexed stakingModuleId, uint256 stakeShareLimit, uint256 priorityExitShareThreshold, address setBy)",
      "event StakingModuleStatusSet(uint256 indexed stakingModuleId, uint8 status, address setBy)",
      "event StakingRouterETHDeposited(uint256 indexed stakingModuleId, uint256 amount)",
      "event WithdrawalCredentialsSet(bytes32 withdrawalCredentials, address setBy)",
      "event WithdrawalsCredentialsChangeFailed(uint256 indexed stakingModuleId, bytes lowLevelRevertData)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DEPOSIT_CONTRACT() view returns (address)",
      "function FEE_PRECISION_POINTS() view returns (uint256)",
      "function MANAGE_WITHDRAWAL_CREDENTIALS_ROLE() view returns (bytes32)",
      "function MAX_STAKING_MODULES_COUNT() view returns (uint256)",
      "function MAX_STAKING_MODULE_NAME_LENGTH() view returns (uint256)",
      "function REPORT_EXITED_VALIDATORS_ROLE() view returns (bytes32)",
      "function REPORT_REWARDS_MINTED_ROLE() view returns (bytes32)",
      "function STAKING_MODULE_MANAGE_ROLE() view returns (bytes32)",
      "function STAKING_MODULE_UNVETTING_ROLE() view returns (bytes32)",
      "function TOTAL_BASIS_POINTS() view returns (uint256)",
      "function UNSAFE_SET_EXITED_VALIDATORS_ROLE() view returns (bytes32)",
      "function addStakingModule(string _name, address _stakingModuleAddress, uint256 _stakeShareLimit, uint256 _priorityExitShareThreshold, uint256 _stakingModuleFee, uint256 _treasuryFee, uint256 _maxDepositsPerBlock, uint256 _minDepositBlockDistance)",
      "function decreaseStakingModuleVettedKeysCountByNodeOperator(uint256 _stakingModuleId, bytes _nodeOperatorIds, bytes _vettedSigningKeysCounts)",
      "function deposit(uint256 _depositsCount, uint256 _stakingModuleId, bytes _depositCalldata) payable",
      "function finalizeUpgrade_v2(uint256[] _priorityExitShareThresholds, uint256[] _maxDepositsPerBlock, uint256[] _minDepositBlockDistances)",
      "function getAllNodeOperatorDigests(uint256 _stakingModuleId) view returns (tuple(uint256 id, bool isActive, tuple(uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[])",
      "function getAllStakingModuleDigests() view returns (tuple(uint256 nodeOperatorsCount, uint256 activeNodeOperatorsCount, tuple(uint24 id, address stakingModuleAddress, uint16 stakingModuleFee, uint16 treasuryFee, uint16 stakeShareLimit, uint8 status, string name, uint64 lastDepositAt, uint256 lastDepositBlock, uint256 exitedValidatorsCount, uint16 priorityExitShareThreshold, uint64 maxDepositsPerBlock, uint64 minDepositBlockDistance) state, tuple(uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[])",
      "function getContractVersion() view returns (uint256)",
      "function getDepositsAllocation(uint256 _depositsCount) view returns (uint256 allocated, uint256[] allocations)",
      "function getLido() view returns (address)",
      "function getNodeOperatorDigests(uint256 _stakingModuleId, uint256[] _nodeOperatorIds) view returns (tuple(uint256 id, bool isActive, tuple(uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[] digests)",
      "function getNodeOperatorDigests(uint256 _stakingModuleId, uint256 _offset, uint256 _limit) view returns (tuple(uint256 id, bool isActive, tuple(uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[])",
      "function getNodeOperatorSummary(uint256 _stakingModuleId, uint256 _nodeOperatorId) view returns (tuple(uint256 targetLimitMode, uint256 targetValidatorsCount, uint256 stuckValidatorsCount, uint256 refundedValidatorsCount, uint256 stuckPenaltyEndTimestamp, uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getStakingFeeAggregateDistribution() view returns (uint96 modulesFee, uint96 treasuryFee, uint256 basePrecision)",
      "function getStakingFeeAggregateDistributionE4Precision() view returns (uint16 modulesFee, uint16 treasuryFee)",
      "function getStakingModule(uint256 _stakingModuleId) view returns (tuple(uint24 id, address stakingModuleAddress, uint16 stakingModuleFee, uint16 treasuryFee, uint16 stakeShareLimit, uint8 status, string name, uint64 lastDepositAt, uint256 lastDepositBlock, uint256 exitedValidatorsCount, uint16 priorityExitShareThreshold, uint64 maxDepositsPerBlock, uint64 minDepositBlockDistance))",
      "function getStakingModuleActiveValidatorsCount(uint256 _stakingModuleId) view returns (uint256 activeValidatorsCount)",
      "function getStakingModuleDigests(uint256[] _stakingModuleIds) view returns (tuple(uint256 nodeOperatorsCount, uint256 activeNodeOperatorsCount, tuple(uint24 id, address stakingModuleAddress, uint16 stakingModuleFee, uint16 treasuryFee, uint16 stakeShareLimit, uint8 status, string name, uint64 lastDepositAt, uint256 lastDepositBlock, uint256 exitedValidatorsCount, uint16 priorityExitShareThreshold, uint64 maxDepositsPerBlock, uint64 minDepositBlockDistance) state, tuple(uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)[] digests)",
      "function getStakingModuleIds() view returns (uint256[] stakingModuleIds)",
      "function getStakingModuleIsActive(uint256 _stakingModuleId) view returns (bool)",
      "function getStakingModuleIsDepositsPaused(uint256 _stakingModuleId) view returns (bool)",
      "function getStakingModuleIsStopped(uint256 _stakingModuleId) view returns (bool)",
      "function getStakingModuleLastDepositBlock(uint256 _stakingModuleId) view returns (uint256)",
      "function getStakingModuleMaxDepositsCount(uint256 _stakingModuleId, uint256 _maxDepositsValue) view returns (uint256)",
      "function getStakingModuleMaxDepositsPerBlock(uint256 _stakingModuleId) view returns (uint256)",
      "function getStakingModuleMinDepositBlockDistance(uint256 _stakingModuleId) view returns (uint256)",
      "function getStakingModuleNonce(uint256 _stakingModuleId) view returns (uint256)",
      "function getStakingModuleStatus(uint256 _stakingModuleId) view returns (uint8)",
      "function getStakingModuleSummary(uint256 _stakingModuleId) view returns (tuple(uint256 totalExitedValidators, uint256 totalDepositedValidators, uint256 depositableValidatorsCount) summary)",
      "function getStakingModules() view returns (tuple(uint24 id, address stakingModuleAddress, uint16 stakingModuleFee, uint16 treasuryFee, uint16 stakeShareLimit, uint8 status, string name, uint64 lastDepositAt, uint256 lastDepositBlock, uint256 exitedValidatorsCount, uint16 priorityExitShareThreshold, uint64 maxDepositsPerBlock, uint64 minDepositBlockDistance)[] res)",
      "function getStakingModulesCount() view returns (uint256)",
      "function getStakingRewardsDistribution() view returns (address[] recipients, uint256[] stakingModuleIds, uint96[] stakingModuleFees, uint96 totalFee, uint256 precisionPoints)",
      "function getTotalFeeE4Precision() view returns (uint16 totalFee)",
      "function getWithdrawalCredentials() view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hasStakingModule(uint256 _stakingModuleId) view returns (bool)",
      "function initialize(address _admin, address _lido, bytes32 _withdrawalCredentials)",
      "function onValidatorsCountsByNodeOperatorReportingFinished()",
      "function renounceRole(bytes32 role, address account)",
      "function reportRewardsMinted(uint256[] _stakingModuleIds, uint256[] _totalShares)",
      "function reportStakingModuleExitedValidatorsCountByNodeOperator(uint256 _stakingModuleId, bytes _nodeOperatorIds, bytes _exitedValidatorsCounts)",
      "function reportStakingModuleStuckValidatorsCountByNodeOperator(uint256 _stakingModuleId, bytes _nodeOperatorIds, bytes _stuckValidatorsCounts)",
      "function revokeRole(bytes32 role, address account)",
      "function setStakingModuleStatus(uint256 _stakingModuleId, uint8 _status)",
      "function setWithdrawalCredentials(bytes32 _withdrawalCredentials)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unsafeSetExitedValidatorsCount(uint256 _stakingModuleId, uint256 _nodeOperatorId, bool _triggerUpdateFinish, tuple(uint256 currentModuleExitedValidatorsCount, uint256 currentNodeOperatorExitedValidatorsCount, uint256 currentNodeOperatorStuckValidatorsCount, uint256 newModuleExitedValidatorsCount, uint256 newNodeOperatorExitedValidatorsCount, uint256 newNodeOperatorStuckValidatorsCount) _correction)",
      "function updateExitedValidatorsCountByStakingModule(uint256[] _stakingModuleIds, uint256[] _exitedValidatorsCounts) returns (uint256)",
      "function updateRefundedValidatorsCount(uint256 _stakingModuleId, uint256 _nodeOperatorId, uint256 _refundedValidatorsCount)",
      "function updateStakingModule(uint256 _stakingModuleId, uint256 _stakeShareLimit, uint256 _priorityExitShareThreshold, uint256 _stakingModuleFee, uint256 _treasuryFee, uint256 _maxDepositsPerBlock, uint256 _minDepositBlockDistance)",
      "function updateTargetValidatorsLimits(uint256 _stakingModuleId, uint256 _nodeOperatorId, uint256 _targetLimitMode, uint256 _targetLimit)"
    ],
    "0x8b9566AdA63B64d1E1dcF1418b43fd1433b72444": [
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function changeProxyAdmin(address proxy, address newAdmin)",
      "function getProxyAdmin(address proxy) view returns (address)",
      "function getProxyImplementation(address proxy) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgrade(address proxy, address implementation)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x8D80Ad529f68B11C2492301BA4fB78e5A654C206": [
      "constructor()",
      "error CallerNotManager()",
      "error CallerNotWithdrawVault()",
      "error InvalidPubkeyLength()",
      "error ValidatorSettled()",
      "error ZeroAddress()",
      "event ForceExitValidator(bytes pubkey)",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UpdatedAdditionalPenaltyAmount(bytes pubkey, uint256 amount)",
      "event UpdatedMEVTheftPenaltyPerStrike(uint256 mevTheftPenalty)",
      "event UpdatedMissedAttestationPenaltyPerStrike(uint256 missedAttestationPenalty)",
      "event UpdatedPenaltyOracleAddress(address penaltyOracleAddress)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event UpdatedValidatorExitPenaltyThreshold(uint256 totalPenaltyThreshold)",
      "event ValidatorMarkedAsSettled(bytes pubkey)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function additionalPenaltyAmount(bytes32) view returns (uint256)",
      "function calculateMEVTheftPenalty(bytes32 _pubkeyRoot) returns (uint256)",
      "function calculateMissedAttestationPenalty(bytes32 _pubkeyRoot) view returns (uint256)",
      "function getAdditionalPenaltyAmount(bytes _pubkey) view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig, address _ratedOracleAddress)",
      "function markValidatorSettled(uint8 _poolId, uint256 _validatorId)",
      "function mevTheftPenaltyPerStrike() view returns (uint256)",
      "function missedAttestationPenaltyPerStrike() view returns (uint256)",
      "function ratedOracleAddress() view returns (address)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setAdditionalPenaltyAmount(bytes _pubkey, uint256 _amount)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function totalPenaltyAmount(bytes) view returns (uint256)",
      "function updateMEVTheftPenaltyPerStrike(uint256 _mevTheftPenaltyPerStrike)",
      "function updateMissedAttestationPenaltyPerStrike(uint256 _missedAttestationPenaltyPerStrike)",
      "function updateRatedOracleAddress(address _ratedOracleAddress)",
      "function updateStaderConfig(address _staderConfig)",
      "function updateTotalPenaltyAmount(bytes[] _pubkey)",
      "function updateValidatorExitPenaltyThreshold(uint256 _validatorExitPenaltyThreshold)",
      "function validatorExitPenaltyThreshold() view returns (uint256)"
    ],
    "0x8dB49233e3b7691D68745A31e4A0Cd9Cf924B7E9": [
      "constructor(address _ethPOS, address _eigenPodBeacon, address _delegationManager, address _pauserRegistry, string _version)",
      "error CurrentlyPaused()",
      "error EigenPodAlreadyExists()",
      "error InputAddressZero()",
      "error InvalidNewPausedStatus()",
      "error InvalidShortString()",
      "error InvalidStrategy()",
      "error LegacyWithdrawalsNotCompleted()",
      "error OnlyDelegationManager()",
      "error OnlyEigenPod()",
      "error OnlyPauser()",
      "error OnlyProofTimestampSetter()",
      "error OnlyUnpauser()",
      "error SharesNegative()",
      "error SharesNotMultipleOfGwei()",
      "error StringTooLong(string str)",
      "event BeaconChainETHDeposited(address indexed podOwner, uint256 amount)",
      "event BeaconChainETHWithdrawalCompleted(address indexed podOwner, uint256 shares, uint96 nonce, address delegatedAddress, address withdrawer, bytes32 withdrawalRoot)",
      "event BeaconChainSlashingFactorDecreased(address staker, uint64 prevBeaconChainSlashingFactor, uint64 newBeaconChainSlashingFactor)",
      "event BurnableETHSharesIncreased(uint256 shares)",
      "event Initialized(uint8 version)",
      "event NewTotalShares(address indexed podOwner, int256 newTotalShares)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address indexed account, uint256 newPausedStatus)",
      "event PectraForkTimestampSet(uint64 newPectraForkTimestamp)",
      "event PodDeployed(address indexed eigenPod, address indexed podOwner)",
      "event PodSharesUpdated(address indexed podOwner, int256 sharesDelta)",
      "event ProofTimestampSetterSet(address newProofTimestampSetter)",
      "event Unpaused(address indexed account, uint256 newPausedStatus)",
      "function addShares(address staker, address strategy, uint256 shares) returns (uint256, uint256)",
      "function beaconChainETHStrategy() view returns (address)",
      "function beaconChainSlashingFactor(address podOwner) view returns (uint64)",
      "function burnableETHShares() view returns (uint256)",
      "function createPod() returns (address)",
      "function delegationManager() view returns (address)",
      "function eigenPodBeacon() view returns (address)",
      "function ethPOS() view returns (address)",
      "function getPod(address podOwner) view returns (address)",
      "function hasPod(address podOwner) view returns (bool)",
      "function increaseBurnableShares(address, uint256 addedSharesToBurn)",
      "function initialize(address initialOwner, uint256 _initPausedStatus)",
      "function numPods() view returns (uint256)",
      "function owner() view returns (address)",
      "function ownerToPod(address podOwner) view returns (address)",
      "function pause(uint256 newPausedStatus)",
      "function pauseAll()",
      "function paused(uint8 index) view returns (bool)",
      "function paused() view returns (uint256)",
      "function pauserRegistry() view returns (address)",
      "function pectraForkTimestamp() view returns (uint64)",
      "function podOwnerDepositShares(address podOwner) view returns (int256 shares)",
      "function proofTimestampSetter() view returns (address)",
      "function recordBeaconChainETHBalanceUpdate(address podOwner, uint256 prevRestakedBalanceWei, int256 balanceDeltaWei)",
      "function removeDepositShares(address staker, address strategy, uint256 depositSharesToRemove) returns (uint256)",
      "function renounceOwnership()",
      "function setPectraForkTimestamp(uint64 timestamp)",
      "function setProofTimestampSetter(address newProofTimestampSetter)",
      "function stake(bytes pubkey, bytes signature, bytes32 depositDataRoot) payable",
      "function stakerDepositShares(address user, address strategy) view returns (uint256 depositShares)",
      "function transferOwnership(address newOwner)",
      "function unpause(uint256 newPausedStatus)",
      "function version() view returns (string)",
      "function withdrawSharesAsTokens(address staker, address strategy, address, uint256 shares)"
    ],
    "0x8F73e4C2A6D852bb4ab2A45E6a9CF5715b3228B7": [
      "constructor(address _stETH)",
      "error ZeroStETHAddress()",
      "function domainSeparatorV4(address _stETH) view returns (bytes32)",
      "function eip712Domain(address _stETH) view returns (string name, string version, uint256 chainId, address verifyingContract)",
      "function hashTypedDataV4(address _stETH, bytes32 _structHash) view returns (bytes32)"
    ],
    "0x91E677b07F7AF907ec9a428aafA9fc14a0d3A338": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x92104977f16dAe423966caa5cD9C115F2D25a8D6": [
      "constructor()",
      "event DefaultSecurityThresholdsV2Updated(tuple(uint8 confirmationThreshold, uint8 adversaryThreshold) previousDefaultSecurityThresholdsV2, tuple(uint8 confirmationThreshold, uint8 adversaryThreshold) newDefaultSecurityThresholdsV2)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QuorumAdversaryThresholdPercentagesUpdated(bytes previousQuorumAdversaryThresholdPercentages, bytes newQuorumAdversaryThresholdPercentages)",
      "event QuorumConfirmationThresholdPercentagesUpdated(bytes previousQuorumConfirmationThresholdPercentages, bytes newQuorumConfirmationThresholdPercentages)",
      "event QuorumNumbersRequiredUpdated(bytes previousQuorumNumbersRequired, bytes newQuorumNumbersRequired)",
      "event VersionedBlobParamsAdded(uint16 indexed version, tuple(uint32 maxNumOperators, uint32 numChunks, uint8 codingRate) versionedBlobParams)",
      "function addVersionedBlobParams(tuple(uint32 maxNumOperators, uint32 numChunks, uint8 codingRate) _versionedBlobParams) returns (uint16)",
      "function getBlobParams(uint16 version) view returns (tuple(uint32 maxNumOperators, uint32 numChunks, uint8 codingRate))",
      "function getIsQuorumRequired(uint8 quorumNumber) view returns (bool)",
      "function getQuorumAdversaryThresholdPercentage(uint8 quorumNumber) view returns (uint8 adversaryThresholdPercentage)",
      "function getQuorumConfirmationThresholdPercentage(uint8 quorumNumber) view returns (uint8 confirmationThresholdPercentage)",
      "function initialize(address _initialOwner, bytes _quorumAdversaryThresholdPercentages, bytes _quorumConfirmationThresholdPercentages, bytes _quorumNumbersRequired, tuple(uint32 maxNumOperators, uint32 numChunks, uint8 codingRate)[] _versionedBlobParams)",
      "function nextBlobVersion() view returns (uint16)",
      "function owner() view returns (address)",
      "function quorumAdversaryThresholdPercentages() view returns (bytes)",
      "function quorumConfirmationThresholdPercentages() view returns (bytes)",
      "function quorumNumbersRequired() view returns (bytes)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function versionedBlobParams(uint16) view returns (uint32 maxNumOperators, uint32 numChunks, uint8 codingRate)"
    ],
    "0x922805C0097547663E0Df537aC65Bd9B65cb2A11": [
      "constructor()",
      "error InsufficientBalance()",
      "error TransferFailed()",
      "error WethTransferFailed()",
      "error ZeroAddress()",
      "event Claimed(address indexed receiver, uint256 amount)",
      "event DepositedFor(address indexed sender, address indexed receiver, uint256 amount)",
      "event Initialized(uint8 version)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UpdatedStaderConfig(address indexed staderConfig)",
      "event UpdatedWethAddress(address indexed weth)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function balances(address) view returns (uint256)",
      "function claim()",
      "function claimLiquidation(address operator)",
      "function claimWithAmount(uint256 _amount)",
      "function depositFor(address _receiver) payable",
      "function getBalance(address operator) view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateStaderConfig(address _staderConfig)",
      "function updateWethAddress(address _weth)",
      "function weth() view returns (address)",
      "function withdrawableInEth(address operator) view returns (uint256)"
    ],
    "0x93c4b944D05dfe6df7645A86cd2206016c51564D": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x948a420b8CC1d6BFd0B6087C2E7c344a2CD0bc39": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x97c92752DD8a8947cE453d3e35D2cad5857367af": [
      "constructor()",
      "error ETHTransferFailed(address recipient, uint256 amount)",
      "error NotEnoughRewardToWithdraw()",
      "error TransferFailed()",
      "event ETHReceived(address indexed sender, uint256 amount)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event Withdrawal(uint256 protocolAmount, uint256 operatorAmount, uint256 userAmount)",
      "function withdraw()"
    ],
    "0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "0x9b37180d847B27ADC13C2277299045C1237Ae281": [
      "event AllowanceReplenished(address indexed caller, uint256 allowance, uint256 amountReplenished)",
      "event CallerConfigured(address indexed caller, uint256 amount, uint256 interval)",
      "event CallerRemoved(address indexed caller)",
      "event ExchangeRateUpdated(address indexed caller, uint256 amount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function allowances(address) view returns (uint256)",
      "function allowancesLastSet(address) view returns (uint256)",
      "function callers(address) view returns (bool)",
      "function configureCaller(address caller, uint256 amount, uint256 interval)",
      "function currentAllowance(address caller) returns (uint256)",
      "function estimatedAllowance(address caller) view returns (uint256)",
      "function initialize(address newOwner, address newTokenContract)",
      "function intervals(address) view returns (uint256)",
      "function maxAllowances(address) view returns (uint256)",
      "function owner() view returns (address)",
      "function removeCaller(address caller)",
      "function renounceOwnership()",
      "function tokenContract() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function updateExchangeRate(uint256 _newExchangeRate)"
    ],
    "0x9d4C3166c59412CEdBe7d901f5fDe41903a1d6Fc": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x9d7eD45EE2E8FC5482fa2428f15C971e6369011d": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0x9F0491B32DBce587c50c4C43AB303b06478193A7": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0x9f3b9198911054B122fDb865f8A5Ac516201c339": [
      "function hasInitialized() view returns (bool)",
      "function createBurnedPermission(address _app, bytes32 _role)",
      "function burnPermissionManager(address _app, bytes32 _role)",
      "function grantPermission(address _entity, address _app, bytes32 _role)",
      "function getPermissionParamsLength(address _entity, address _app, bytes32 _role) view returns (uint256)",
      "function evalParams(bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how) view returns (bool)",
      "function NO_PERMISSION() view returns (bytes32)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function CREATE_PERMISSIONS_ROLE() view returns (bytes32)",
      "function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)",
      "function hasPermission(address _who, address _where, bytes32 _what) view returns (bool)",
      "function allowRecoverability(address token) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function getInitializationBlock() view returns (uint256)",
      "function revokePermission(address _entity, address _app, bytes32 _role)",
      "function transferToVault(address _token)",
      "function getPermissionParam(address _entity, address _app, bytes32 _role, uint256 _index) view returns (uint8, uint8, uint240)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function ANY_ENTITY() view returns (address)",
      "function removePermissionManager(address _app, bytes32 _role)",
      "function setPermissionManager(address _newManager, address _app, bytes32 _role)",
      "function getPermissionManager(address _app, bytes32 _role) view returns (address)",
      "function createPermission(address _entity, address _app, bytes32 _role, address _manager)",
      "function initialize(address _permissionsCreator)",
      "function EMPTY_PARAM_HASH() view returns (bytes32)",
      "function kernel() view returns (address)",
      "function isPetrified() view returns (bool)",
      "function BURN_ENTITY() view returns (address)",
      "function hasPermission(address _who, address _where, bytes32 _what, uint256[] _how) view returns (bool)",
      "function hasPermission(address _who, address _where, bytes32 _what, bytes _how) view returns (bool)",
      "event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed)",
      "event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash)",
      "event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)"
    ],
    "0xa29b819654cE6224A222bb5f586920105E2D7E0E": [
      "function hasInitialized() view returns (bool)",
      "function getVersion() view returns (uint256)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function initialize(address _lidoLocator, address _accountingOracleConsensusContract)",
      "function finalizeUpgrade_v4(address _accountingOracle)",
      "function getLastCompletedReportDelta() view returns (uint256 postTotalPooledEther, uint256 preTotalPooledEther, uint256 timeElapsed)",
      "function getLido() view returns (address)",
      "function getCurrentFrame() view returns (uint256 frameEpochId, uint256 frameStartTime, uint256 frameEndTime)",
      "function allowRecoverability(address token) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function handlePostTokenRebase(uint256, uint256 timeElapsed, uint256, uint256 preTotalEther, uint256 postTotalShares, uint256 postTotalEther, uint256)",
      "function getLastCompletedEpochId() view returns (uint256)",
      "function getContractVersion() view returns (uint256)",
      "function getInitializationBlock() view returns (uint256)",
      "function handleConsensusLayerReport(uint256 _refSlot, uint256 _clBalance, uint256 _clValidators)",
      "function transferToVault(address _token)",
      "function getAccountingOracle() view returns (address)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getCurrentEpochId() view returns (uint256)",
      "function getEVMScriptRegistry() view returns (address)",
      "function kernel() view returns (address)",
      "function isPetrified() view returns (bool)",
      "function getBeaconSpec() view returns (uint64 epochsPerFrame, uint64 slotsPerEpoch, uint64 secondsPerSlot, uint64 genesisTime)",
      "event Completed(uint256 epochId, uint128 beaconBalance, uint128 beaconValidators)",
      "event PostTotalShares(uint256 postTotalPooledEther, uint256 preTotalPooledEther, uint256 timeElapsed, uint256 totalShares)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)",
      "event ContractVersionSet(uint256 version)"
    ],
    "0xa2Aa24E91A345B3dd8652f304390203D0e1c4d31": [
      "constructor()",
      "error AlreadyClaimed()",
      "error AuctionEnded()",
      "error AuctionNotEnded()",
      "error BidWasSuccessful()",
      "error CallerNotManager()",
      "error ETHWithdrawFailed()",
      "error InSufficientBid()",
      "error InSufficientETH()",
      "error LotWasAuctioned()",
      "error NoBidPlaced()",
      "error SDTransferFailed()",
      "error ShortDuration()",
      "error ZeroAddress()",
      "error notQualified()",
      "event AuctionDurationUpdated(uint256 duration)",
      "event BidCancelled(uint256 lotId)",
      "event BidIncrementUpdated(uint256 _bidIncrement)",
      "event BidPlaced(uint256 lotId, address indexed bidder, uint256 bid)",
      "event BidWithdrawn(uint256 lotId, address indexed withdrawalAccount, uint256 amount)",
      "event ETHClaimed(uint256 lotId, address indexed sspm, uint256 ethAmount)",
      "event Initialized(uint8 version)",
      "event LotCreated(uint256 lotId, uint256 sdAmount, uint256 startBlock, uint256 endBlock, uint256 bidIncrement)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event SDClaimed(uint256 lotId, address indexed highestBidder, uint256 sdAmount)",
      "event UnsuccessfulSDAuctionExtracted(uint256 lotId, uint256 sdAmount, address indexed recipient)",
      "event UpdatedStaderConfig(address indexed _staderConfig)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MIN_AUCTION_DURATION() view returns (uint256)",
      "function addBid(uint256 lotId) payable",
      "function bidIncrement() view returns (uint256)",
      "function claimSD(uint256 lotId)",
      "function createLot(uint256 _sdAmount)",
      "function duration() view returns (uint256)",
      "function extractNonBidSD(uint256 lotId)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function lots(uint256) view returns (uint256 startBlock, uint256 endBlock, uint256 sdAmount, address highestBidder, uint256 highestBidAmount, bool sdClaimed, bool ethExtracted)",
      "function nextLot() view returns (uint256)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferHighestBidToSSPM(uint256 lotId)",
      "function updateBidIncrement(uint256 _bidIncrement)",
      "function updateDuration(uint256 _duration)",
      "function updateStaderConfig(address _staderConfig)",
      "function withdrawUnselectedBid(uint256 lotId)"
    ],
    "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xA396D855D70e1A1ec1A0199ADB9845096683B6A2": [
      "constructor(address _delegation, address _pauserRegistry, string _version)",
      "error CurrentlyPaused()",
      "error InputAddressZero()",
      "error InvalidNewPausedStatus()",
      "error InvalidShortString()",
      "error InvalidSignature()",
      "error OnlyPauser()",
      "error OnlyUnpauser()",
      "error OperatorAlreadyRegisteredToAVS()",
      "error OperatorNotRegisteredToAVS()",
      "error OperatorNotRegisteredToEigenLayer()",
      "error SaltSpent()",
      "error SignatureExpired()",
      "error StringTooLong(string str)",
      "event AVSMetadataURIUpdated(address indexed avs, string metadataURI)",
      "event Initialized(uint8 version)",
      "event OperatorAVSRegistrationStatusUpdated(address indexed operator, address indexed avs, uint8 status)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address indexed account, uint256 newPausedStatus)",
      "event Unpaused(address indexed account, uint256 newPausedStatus)",
      "function OPERATOR_AVS_REGISTRATION_TYPEHASH() view returns (bytes32)",
      "function OPERATOR_SET_FORCE_DEREGISTRATION_TYPEHASH() view returns (bytes32)",
      "function OPERATOR_SET_REGISTRATION_TYPEHASH() view returns (bytes32)",
      "function avsOperatorStatus(address avs, address operator) view returns (uint8)",
      "function calculateOperatorAVSRegistrationDigestHash(address operator, address avs, bytes32 salt, uint256 expiry) view returns (bytes32)",
      "function cancelSalt(bytes32 salt)",
      "function delegation() view returns (address)",
      "function deregisterOperatorFromAVS(address operator)",
      "function domainSeparator() view returns (bytes32)",
      "function initialize(address initialOwner, uint256 initialPausedStatus)",
      "function operatorSaltIsSpent(address operator, bytes32 salt) view returns (bool isSpent)",
      "function owner() view returns (address)",
      "function pause(uint256 newPausedStatus)",
      "function pauseAll()",
      "function paused(uint8 index) view returns (bool)",
      "function paused() view returns (uint256)",
      "function pauserRegistry() view returns (address)",
      "function registerOperatorToAVS(address operator, tuple(bytes signature, bytes32 salt, uint256 expiry) operatorSignature)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function unpause(uint256 newPausedStatus)",
      "function updateAVSMetadataURI(string metadataURI)",
      "function version() view returns (string)"
    ],
    "0xA75112d1df37FA53a431525CD47A7d7faCEA7E73": [
      "constructor(address _strategyManager, address _eigenPodManager, address _allocationManager, address _pauserRegistry, address _permissionController, uint32 _MIN_WITHDRAWAL_DELAY, string _version)",
      "error ActivelyDelegated()",
      "error CallerCannotUndelegate()",
      "error CurrentlyPaused()",
      "error FullySlashed()",
      "error InputAddressZero()",
      "error InputArrayLengthMismatch()",
      "error InputArrayLengthZero()",
      "error InvalidNewPausedStatus()",
      "error InvalidPermissions()",
      "error InvalidShortString()",
      "error InvalidSignature()",
      "error InvalidSnapshotOrdering()",
      "error NotActivelyDelegated()",
      "error OnlyAllocationManager()",
      "error OnlyEigenPodManager()",
      "error OnlyPauser()",
      "error OnlyStrategyManagerOrEigenPodManager()",
      "error OnlyUnpauser()",
      "error OperatorNotRegistered()",
      "error OperatorsCannotUndelegate()",
      "error SaltSpent()",
      "error SignatureExpired()",
      "error StringTooLong(string str)",
      "error WithdrawalDelayNotElapsed()",
      "error WithdrawalNotQueued()",
      "error WithdrawerNotCaller()",
      "event DelegationApproverUpdated(address indexed operator, address newDelegationApprover)",
      "event DepositScalingFactorUpdated(address staker, address strategy, uint256 newDepositScalingFactor)",
      "event Initialized(uint8 version)",
      "event OperatorMetadataURIUpdated(address indexed operator, string metadataURI)",
      "event OperatorRegistered(address indexed operator, address delegationApprover)",
      "event OperatorSharesDecreased(address indexed operator, address staker, address strategy, uint256 shares)",
      "event OperatorSharesIncreased(address indexed operator, address staker, address strategy, uint256 shares)",
      "event OperatorSharesSlashed(address indexed operator, address strategy, uint256 totalSlashedShares)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address indexed account, uint256 newPausedStatus)",
      "event SlashingWithdrawalCompleted(bytes32 withdrawalRoot)",
      "event SlashingWithdrawalQueued(bytes32 withdrawalRoot, tuple(address staker, address delegatedTo, address withdrawer, uint256 nonce, uint32 startBlock, address[] strategies, uint256[] scaledShares) withdrawal, uint256[] sharesToWithdraw)",
      "event StakerDelegated(address indexed staker, address indexed operator)",
      "event StakerForceUndelegated(address indexed staker, address indexed operator)",
      "event StakerUndelegated(address indexed staker, address indexed operator)",
      "event Unpaused(address indexed account, uint256 newPausedStatus)",
      "function DELEGATION_APPROVAL_TYPEHASH() view returns (bytes32)",
      "function allocationManager() view returns (address)",
      "function beaconChainETHStrategy() view returns (address)",
      "function calculateDelegationApprovalDigestHash(address staker, address operator, address approver, bytes32 approverSalt, uint256 expiry) view returns (bytes32)",
      "function calculateWithdrawalRoot(tuple(address staker, address delegatedTo, address withdrawer, uint256 nonce, uint32 startBlock, address[] strategies, uint256[] scaledShares) withdrawal) pure returns (bytes32)",
      "function completeQueuedWithdrawal(tuple(address staker, address delegatedTo, address withdrawer, uint256 nonce, uint32 startBlock, address[] strategies, uint256[] scaledShares) withdrawal, address[] tokens, bool receiveAsTokens)",
      "function completeQueuedWithdrawals(tuple(address staker, address delegatedTo, address withdrawer, uint256 nonce, uint32 startBlock, address[] strategies, uint256[] scaledShares)[] withdrawals, address[][] tokens, bool[] receiveAsTokens)",
      "function convertToDepositShares(address staker, address[] strategies, uint256[] withdrawableShares) view returns (uint256[])",
      "function cumulativeWithdrawalsQueued(address staker) view returns (uint256 totalQueued)",
      "function decreaseDelegatedShares(address staker, uint256 curDepositShares, uint64 beaconChainSlashingFactorDecrease)",
      "function delegateTo(address operator, tuple(bytes signature, uint256 expiry) approverSignatureAndExpiry, bytes32 approverSalt)",
      "function delegatedTo(address staker) view returns (address operator)",
      "function delegationApprover(address operator) view returns (address)",
      "function delegationApproverSaltIsSpent(address delegationApprover, bytes32 salt) view returns (bool spent)",
      "function depositScalingFactor(address staker, address strategy) view returns (uint256)",
      "function domainSeparator() view returns (bytes32)",
      "function eigenPodManager() view returns (address)",
      "function getDepositedShares(address staker) view returns (address[], uint256[])",
      "function getOperatorShares(address operator, address[] strategies) view returns (uint256[])",
      "function getOperatorsShares(address[] operators, address[] strategies) view returns (uint256[][])",
      "function getQueuedWithdrawal(bytes32 withdrawalRoot) view returns (tuple(address staker, address delegatedTo, address withdrawer, uint256 nonce, uint32 startBlock, address[] strategies, uint256[] scaledShares) withdrawal, uint256[] shares)",
      "function getQueuedWithdrawalRoots(address staker) view returns (bytes32[])",
      "function getQueuedWithdrawals(address staker) view returns (tuple(address staker, address delegatedTo, address withdrawer, uint256 nonce, uint32 startBlock, address[] strategies, uint256[] scaledShares)[] withdrawals, uint256[][] shares)",
      "function getSlashableSharesInQueue(address operator, address strategy) view returns (uint256)",
      "function getWithdrawableShares(address staker, address[] strategies) view returns (uint256[] withdrawableShares, uint256[] depositShares)",
      "function increaseDelegatedShares(address staker, address strategy, uint256 prevDepositShares, uint256 addedShares)",
      "function initialize(address initialOwner, uint256 initialPausedStatus)",
      "function isDelegated(address staker) view returns (bool)",
      "function isOperator(address operator) view returns (bool)",
      "function minWithdrawalDelayBlocks() view returns (uint32)",
      "function modifyOperatorDetails(address operator, address newDelegationApprover)",
      "function operatorShares(address operator, address strategy) view returns (uint256 shares)",
      "function owner() view returns (address)",
      "function pause(uint256 newPausedStatus)",
      "function pauseAll()",
      "function paused(uint8 index) view returns (bool)",
      "function paused() view returns (uint256)",
      "function pauserRegistry() view returns (address)",
      "function pendingWithdrawals(bytes32 withdrawalRoot) view returns (bool pending)",
      "function permissionController() view returns (address)",
      "function queueWithdrawals(tuple(address[] strategies, uint256[] depositShares, address __deprecated_withdrawer)[] params) returns (bytes32[])",
      "function queuedWithdrawals(bytes32 withdrawalRoot) view returns (tuple(address staker, address delegatedTo, address withdrawer, uint256 nonce, uint32 startBlock, address[] strategies, uint256[] scaledShares) withdrawal)",
      "function redelegate(address newOperator, tuple(bytes signature, uint256 expiry) newOperatorApproverSig, bytes32 approverSalt) returns (bytes32[] withdrawalRoots)",
      "function registerAsOperator(address initDelegationApprover, uint32 allocationDelay, string metadataURI)",
      "function renounceOwnership()",
      "function slashOperatorShares(address operator, address strategy, uint64 prevMaxMagnitude, uint64 newMaxMagnitude)",
      "function strategyManager() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function undelegate(address staker) returns (bytes32[] withdrawalRoots)",
      "function unpause(uint256 newPausedStatus)",
      "function updateOperatorMetadataURI(address operator, string metadataURI)",
      "function version() view returns (string)"
    ],
    "0xA89Ea51FddE660f67d1850e03C9c9862d33Bc42c": [
      "constructor(uint256 secondsPerSlot, uint256 genesisTime, address lidoLocator)",
      "error AddressCannotBeSame()",
      "error AddressCannotBeZero()",
      "error AdminCannotBeZero()",
      "error ArgumentOutOfBounds()",
      "error HashCannotBeZero()",
      "error InitialRefSlotCannotBeLessThanProcessingOne(uint256 initialRefSlot, uint256 processingRefSlot)",
      "error InvalidContractVersionIncrement()",
      "error InvalidRequestsData()",
      "error InvalidRequestsDataLength()",
      "error InvalidRequestsDataSortOrder()",
      "error NoConsensusReportToProcess()",
      "error NodeOpValidatorIndexMustIncrease(uint256 moduleId, uint256 nodeOpId, uint256 prevRequestedValidatorIndex, uint256 requestedValidatorIndex)",
      "error NonZeroContractVersionOnInit()",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error ProcessingDeadlineMissed(uint256 deadline)",
      "error RefSlotAlreadyProcessing()",
      "error RefSlotCannotDecrease(uint256 refSlot, uint256 prevRefSlot)",
      "error RefSlotMustBeGreaterThanProcessingOne(uint256 refSlot, uint256 processingRefSlot)",
      "error ResumedExpected()",
      "error SecondsPerSlotCannotBeZero()",
      "error SenderIsNotTheConsensusContract()",
      "error SenderNotAllowed()",
      "error UnexpectedChainConfig()",
      "error UnexpectedConsensusVersion(uint256 expectedVersion, uint256 receivedVersion)",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error UnexpectedDataHash(bytes32 consensusHash, bytes32 receivedHash)",
      "error UnexpectedRefSlot(uint256 consensusRefSlot, uint256 dataRefSlot)",
      "error UnexpectedRequestsDataLength()",
      "error UnsupportedRequestsDataFormat(uint256 format)",
      "error VersionCannotBeSame()",
      "error ZeroPauseDuration()",
      "event ConsensusHashContractSet(address indexed addr, address indexed prevAddr)",
      "event ConsensusVersionSet(uint256 indexed version, uint256 indexed prevVersion)",
      "event ContractVersionSet(uint256 version)",
      "event Paused(uint256 duration)",
      "event ProcessingStarted(uint256 indexed refSlot, bytes32 hash)",
      "event ReportDiscarded(uint256 indexed refSlot, bytes32 hash)",
      "event ReportSubmitted(uint256 indexed refSlot, bytes32 hash, uint256 processingDeadlineTime)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event ValidatorExitRequest(uint256 indexed stakingModuleId, uint256 indexed nodeOperatorId, uint256 indexed validatorIndex, bytes validatorPubkey, uint256 timestamp)",
      "event WarnDataIncompleteProcessing(uint256 indexed refSlot, uint256 requestsProcessed, uint256 requestsCount)",
      "event WarnProcessingMissed(uint256 indexed refSlot)",
      "function DATA_FORMAT_LIST() view returns (uint256)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function GENESIS_TIME() view returns (uint256)",
      "function MANAGE_CONSENSUS_CONTRACT_ROLE() view returns (bytes32)",
      "function MANAGE_CONSENSUS_VERSION_ROLE() view returns (bytes32)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function SECONDS_PER_SLOT() view returns (uint256)",
      "function SUBMIT_DATA_ROLE() view returns (bytes32)",
      "function discardConsensusReport(uint256 refSlot)",
      "function getConsensusContract() view returns (address)",
      "function getConsensusReport() view returns (bytes32 hash, uint256 refSlot, uint256 processingDeadlineTime, bool processingStarted)",
      "function getConsensusVersion() view returns (uint256)",
      "function getContractVersion() view returns (uint256)",
      "function getLastProcessingRefSlot() view returns (uint256)",
      "function getLastRequestedValidatorIndices(uint256 moduleId, uint256[] nodeOpIds) view returns (int256[])",
      "function getProcessingState() view returns (tuple(uint256 currentFrameRefSlot, uint256 processingDeadlineTime, bytes32 dataHash, bool dataSubmitted, uint256 dataFormat, uint256 requestsCount, uint256 requestsSubmitted) result)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getTotalRequestsProcessed() view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address admin, address consensusContract, uint256 consensusVersion, uint256 lastProcessingRefSlot)",
      "function isPaused() view returns (bool)",
      "function pauseFor(uint256 _duration)",
      "function pauseUntil(uint256 _pauseUntilInclusive)",
      "function renounceRole(bytes32 role, address account)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function setConsensusContract(address addr)",
      "function setConsensusVersion(uint256 version)",
      "function submitConsensusReport(bytes32 reportHash, uint256 refSlot, uint256 deadline)",
      "function submitReportData(tuple(uint256 consensusVersion, uint256 refSlot, uint256 requestsCount, uint256 dataFormat, bytes data) data, uint256 contractVersion)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0xae448D008B6F69033AfdA361b46b36C472B6FEE0": [
      "constructor(address __avsDirectory, address __rewardsCoordinator, address __registryCoordinator, address __stakeRegistry, address __eigenDAThresholdRegistry, address __eigenDARelayRegistry, address __paymentVault, address __eigenDADisperserRegistry)",
      "event BatchConfirmed(bytes32 indexed batchHeaderHash, uint32 batchId)",
      "event BatchConfirmerStatusChanged(address batchConfirmer, bool status)",
      "event DefaultSecurityThresholdsV2Updated(tuple(uint8 confirmationThreshold, uint8 adversaryThreshold) previousDefaultSecurityThresholdsV2, tuple(uint8 confirmationThreshold, uint8 adversaryThreshold) newDefaultSecurityThresholdsV2)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address indexed account, uint256 newPausedStatus)",
      "event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)",
      "event QuorumAdversaryThresholdPercentagesUpdated(bytes previousQuorumAdversaryThresholdPercentages, bytes newQuorumAdversaryThresholdPercentages)",
      "event QuorumConfirmationThresholdPercentagesUpdated(bytes previousQuorumConfirmationThresholdPercentages, bytes newQuorumConfirmationThresholdPercentages)",
      "event QuorumNumbersRequiredUpdated(bytes previousQuorumNumbersRequired, bytes newQuorumNumbersRequired)",
      "event RewardsInitiatorUpdated(address prevRewardsInitiator, address newRewardsInitiator)",
      "event StaleStakesForbiddenUpdate(bool value)",
      "event Unpaused(address indexed account, uint256 newPausedStatus)",
      "event VersionedBlobParamsAdded(uint16 indexed version, tuple(uint32 maxNumOperators, uint32 numChunks, uint8 codingRate) versionedBlobParams)",
      "function BLOCK_STALE_MEASURE() view returns (uint32)",
      "function STORE_DURATION_BLOCKS() view returns (uint32)",
      "function THRESHOLD_DENOMINATOR() view returns (uint256)",
      "function avsDirectory() view returns (address)",
      "function batchId() view returns (uint32)",
      "function batchIdToBatchMetadataHash(uint32) view returns (bytes32)",
      "function blsApkRegistry() view returns (address)",
      "function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, tuple(uint32[] nonSignerQuorumBitmapIndices, tuple(uint256 X, uint256 Y)[] nonSignerPubkeys, tuple(uint256 X, uint256 Y)[] quorumApks, tuple(uint256[2] X, uint256[2] Y) apkG2, tuple(uint256 X, uint256 Y) sigma, uint32[] quorumApkIndices, uint32[] totalStakeIndices, uint32[][] nonSignerStakeIndices) params) view returns (tuple(uint96[] signedStakeForQuorum, uint96[] totalStakeForQuorum), bytes32)",
      "function confirmBatch(tuple(bytes32 blobHeadersRoot, bytes quorumNumbers, bytes signedStakeForQuorums, uint32 referenceBlockNumber) batchHeader, tuple(uint32[] nonSignerQuorumBitmapIndices, tuple(uint256 X, uint256 Y)[] nonSignerPubkeys, tuple(uint256 X, uint256 Y)[] quorumApks, tuple(uint256[2] X, uint256[2] Y) apkG2, tuple(uint256 X, uint256 Y) sigma, uint32[] quorumApkIndices, uint32[] totalStakeIndices, uint32[][] nonSignerStakeIndices) nonSignerStakesAndSignature)",
      "function createAVSRewardsSubmission(tuple(tuple(address strategy, uint96 multiplier)[] strategiesAndMultipliers, address token, uint256 amount, uint32 startTimestamp, uint32 duration)[] rewardsSubmissions)",
      "function createOperatorDirectedAVSRewardsSubmission(tuple(tuple(address strategy, uint96 multiplier)[] strategiesAndMultipliers, address token, tuple(address operator, uint256 amount)[] operatorRewards, uint32 startTimestamp, uint32 duration, string description)[] operatorDirectedRewardsSubmissions)",
      "function delegation() view returns (address)",
      "function deregisterOperatorFromAVS(address operator)",
      "function eigenDADisperserRegistry() view returns (address)",
      "function eigenDARelayRegistry() view returns (address)",
      "function eigenDAThresholdRegistry() view returns (address)",
      "function getBlobParams(uint16 version) view returns (tuple(uint32 maxNumOperators, uint32 numChunks, uint8 codingRate))",
      "function getIsQuorumRequired(uint8 quorumNumber) view returns (bool)",
      "function getOperatorRestakedStrategies(address operator) view returns (address[])",
      "function getQuorumAdversaryThresholdPercentage(uint8 quorumNumber) view returns (uint8)",
      "function getQuorumConfirmationThresholdPercentage(uint8 quorumNumber) view returns (uint8)",
      "function getRestakeableStrategies() view returns (address[])",
      "function initialize(address _pauserRegistry, uint256 _initialPausedStatus, address _initialOwner, address[] _batchConfirmers, address _rewardsInitiator)",
      "function isBatchConfirmer(address) view returns (bool)",
      "function latestServeUntilBlock(uint32 referenceBlockNumber) pure returns (uint32)",
      "function owner() view returns (address)",
      "function pause(uint256 newPausedStatus)",
      "function pauseAll()",
      "function paused(uint8 index) view returns (bool)",
      "function paused() view returns (uint256)",
      "function pauserRegistry() view returns (address)",
      "function paymentVault() view returns (address)",
      "function quorumAdversaryThresholdPercentages() view returns (bytes)",
      "function quorumConfirmationThresholdPercentages() view returns (bytes)",
      "function quorumNumbersRequired() view returns (bytes)",
      "function registerOperatorToAVS(address operator, tuple(bytes signature, bytes32 salt, uint256 expiry) operatorSignature)",
      "function registryCoordinator() view returns (address)",
      "function renounceOwnership()",
      "function rewardsInitiator() view returns (address)",
      "function setBatchConfirmer(address _batchConfirmer)",
      "function setClaimerFor(address claimer)",
      "function setPauserRegistry(address newPauserRegistry)",
      "function setRewardsInitiator(address newRewardsInitiator)",
      "function setStaleStakesForbidden(bool value)",
      "function stakeRegistry() view returns (address)",
      "function staleStakesForbidden() view returns (bool)",
      "function taskNumber() view returns (uint32)",
      "function transferOwnership(address newOwner)",
      "function trySignatureAndApkVerification(bytes32 msgHash, tuple(uint256 X, uint256 Y) apk, tuple(uint256[2] X, uint256[2] Y) apkG2, tuple(uint256 X, uint256 Y) sigma) view returns (bool pairingSuccessful, bool siganatureIsValid)",
      "function unpause(uint256 newPausedStatus)",
      "function updateAVSMetadataURI(string _metadataURI)"
    ],
    "0xae78736Cd615f374D3085123A210448E74Fc6393": [
      "constructor(address _rocketStorageAddress)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event EtherDeposited(address indexed from, uint256 amount, uint256 time)",
      "event TokensBurned(address indexed from, uint256 amount, uint256 ethAmount, uint256 time)",
      "event TokensMinted(address indexed to, uint256 amount, uint256 ethAmount, uint256 time)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function balanceOf(address account) view returns (uint256)",
      "function burn(uint256 _rethAmount)",
      "function decimals() view returns (uint8)",
      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
      "function depositExcess() payable",
      "function depositExcessCollateral()",
      "function getCollateralRate() view returns (uint256)",
      "function getEthValue(uint256 _rethAmount) view returns (uint256)",
      "function getExchangeRate() view returns (uint256)",
      "function getRethValue(uint256 _ethAmount) view returns (uint256)",
      "function getTotalCollateral() view returns (uint256)",
      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
      "function mint(uint256 _ethAmount, address _to)",
      "function name() view returns (string)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address recipient, uint256 amount) returns (bool)",
      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)",
      "function version() view returns (uint8)"
    ],
    "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function appId() view returns (bytes32)",
      "function kernel() view returns (address)",
      "constructor(address _kernel, bytes32 _appId, bytes _initializePayload)",
      "event ProxyDeposit(address sender, uint256 value)"
    ],
    "0xaf42d795A6D279e9DCc19DC0eE1cE3ecd4ecf5dD": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xaFDa870d4A94B9444F9F22A0e61806178b6Bf178": [
      "constructor(address _strategyManager, address _pauserRegistry, string _version)",
      "error BalanceExceedsMaxTotalDeposits()",
      "error CurrentlyPaused()",
      "error InputAddressZero()",
      "error InvalidNewPausedStatus()",
      "error InvalidShortString()",
      "error MaxPerDepositExceedsMax()",
      "error NewSharesZero()",
      "error OnlyPauser()",
      "error OnlyStrategyManager()",
      "error OnlyUnderlyingToken()",
      "error OnlyUnpauser()",
      "error StringTooLong(string str)",
      "error TotalSharesExceedsMax()",
      "error WithdrawalAmountExceedsTotalDeposits()",
      "event ExchangeRateEmitted(uint256 rate)",
      "event Initialized(uint8 version)",
      "event MaxPerDepositUpdated(uint256 previousValue, uint256 newValue)",
      "event MaxTotalDepositsUpdated(uint256 previousValue, uint256 newValue)",
      "event Paused(address indexed account, uint256 newPausedStatus)",
      "event StrategyTokenSet(address token, uint8 decimals)",
      "event Unpaused(address indexed account, uint256 newPausedStatus)",
      "function deposit(address token, uint256 amount) returns (uint256 newShares)",
      "function explanation() pure returns (string)",
      "function getTVLLimits() view returns (uint256, uint256)",
      "function initialize(uint256 _maxPerDeposit, uint256 _maxTotalDeposits, address _underlyingToken)",
      "function initialize(address _underlyingToken)",
      "function maxPerDeposit() view returns (uint256)",
      "function maxTotalDeposits() view returns (uint256)",
      "function pause(uint256 newPausedStatus)",
      "function pauseAll()",
      "function paused(uint8 index) view returns (bool)",
      "function paused() view returns (uint256)",
      "function pauserRegistry() view returns (address)",
      "function setTVLLimits(uint256 newMaxPerDeposit, uint256 newMaxTotalDeposits)",
      "function shares(address user) view returns (uint256)",
      "function sharesToUnderlying(uint256 amountShares) view returns (uint256)",
      "function sharesToUnderlyingView(uint256 amountShares) view returns (uint256)",
      "function strategyManager() view returns (address)",
      "function totalShares() view returns (uint256)",
      "function underlyingToShares(uint256 amountUnderlying) view returns (uint256)",
      "function underlyingToSharesView(uint256 amountUnderlying) view returns (uint256)",
      "function underlyingToken() view returns (address)",
      "function unpause(uint256 newPausedStatus)",
      "function userUnderlying(address user) returns (uint256)",
      "function userUnderlyingView(address user) view returns (uint256)",
      "function version() view returns (string)",
      "function withdraw(address recipient, address token, uint256 amountShares)"
    ],
    "0xb2e7ef419a2A399472ae22ef5cFcCb8bE97A4B05": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xB8765ed72235d279c3Fb53936E4606db0Ef12806": [
      "constructor(address[] _pausers, address _unpauser)",
      "error InputAddressZero()",
      "error OnlyUnpauser()",
      "event PauserStatusChanged(address pauser, bool canPause)",
      "event UnpauserChanged(address previousUnpauser, address newUnpauser)",
      "function isPauser(address) view returns (bool)",
      "function setIsPauser(address newPauser, bool canPause)",
      "function setUnpauser(address newUnpauser)",
      "function unpauser() view returns (address)"
    ],
    "0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc": [
      "function proxyType() pure returns (uint256 proxyTypeId)",
      "function apps(bytes32, bytes32) view returns (address)",
      "function isDepositable() view returns (bool)",
      "function implementation() view returns (address)",
      "function recoveryVaultAppId() view returns (bytes32)",
      "constructor(address _kernelImpl)",
      "event ProxyDeposit(address sender, uint256 value)",
      "event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app)"
    ],
    "0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f": [
      "constructor()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function implementation() view returns (address)",
      "function proxy_changeAdmin(address newAdmin)",
      "function proxy_getAdmin() view returns (address)",
      "function proxy_getIsOssified() view returns (bool)",
      "function proxy_upgradeTo(address newImplementation, bytes setupCalldata)"
    ],
    "0xba4b2b8A076851A3044882493C2e36503d50b925": [
      "constructor(address _delegation, address _pauserRegistry, string _version)",
      "error CurrentlyPaused()",
      "error InputAddressZero()",
      "error InvalidNewPausedStatus()",
      "error InvalidShortString()",
      "error InvalidSignature()",
      "error MaxStrategiesExceeded()",
      "error OnlyDelegationManager()",
      "error OnlyPauser()",
      "error OnlyStrategyWhitelister()",
      "error OnlyUnpauser()",
      "error SharesAmountTooHigh()",
      "error SharesAmountZero()",
      "error SignatureExpired()",
      "error StakerAddressZero()",
      "error StrategyNotFound()",
      "error StrategyNotWhitelisted()",
      "error StringTooLong(string str)",
      "event BurnableSharesDecreased(address strategy, uint256 shares)",
      "event BurnableSharesIncreased(address strategy, uint256 shares)",
      "event Deposit(address staker, address strategy, uint256 shares)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address indexed account, uint256 newPausedStatus)",
      "event StrategyAddedToDepositWhitelist(address strategy)",
      "event StrategyRemovedFromDepositWhitelist(address strategy)",
      "event StrategyWhitelisterChanged(address previousAddress, address newAddress)",
      "event Unpaused(address indexed account, uint256 newPausedStatus)",
      "function DEFAULT_BURN_ADDRESS() view returns (address)",
      "function DEPOSIT_TYPEHASH() view returns (bytes32)",
      "function addShares(address staker, address strategy, uint256 shares) returns (uint256, uint256)",
      "function addStrategiesToDepositWhitelist(address[] strategiesToWhitelist)",
      "function burnShares(address strategy)",
      "function calculateStrategyDepositDigestHash(address staker, address strategy, address token, uint256 amount, uint256 nonce, uint256 expiry) view returns (bytes32)",
      "function delegation() view returns (address)",
      "function depositIntoStrategy(address strategy, address token, uint256 amount) returns (uint256 depositShares)",
      "function depositIntoStrategyWithSignature(address strategy, address token, uint256 amount, address staker, uint256 expiry, bytes signature) returns (uint256 depositShares)",
      "function domainSeparator() view returns (bytes32)",
      "function getBurnableShares(address strategy) view returns (uint256)",
      "function getDeposits(address staker) view returns (address[], uint256[])",
      "function getStakerStrategyList(address staker) view returns (address[])",
      "function getStrategiesWithBurnableShares() view returns (address[], uint256[])",
      "function increaseBurnableShares(address strategy, uint256 addedSharesToBurn)",
      "function initialize(address initialOwner, address initialStrategyWhitelister, uint256 initialPausedStatus)",
      "function nonces(address signer) view returns (uint256 nonce)",
      "function owner() view returns (address)",
      "function pause(uint256 newPausedStatus)",
      "function pauseAll()",
      "function paused(uint8 index) view returns (bool)",
      "function paused() view returns (uint256)",
      "function pauserRegistry() view returns (address)",
      "function removeDepositShares(address staker, address strategy, uint256 depositSharesToRemove) returns (uint256)",
      "function removeStrategiesFromDepositWhitelist(address[] strategiesToRemoveFromWhitelist)",
      "function renounceOwnership()",
      "function setStrategyWhitelister(address newStrategyWhitelister)",
      "function stakerDepositShares(address staker, address strategy) view returns (uint256 shares)",
      "function stakerStrategyList(address staker, uint256) view returns (address strategies)",
      "function stakerStrategyListLength(address staker) view returns (uint256)",
      "function strategyIsWhitelistedForDeposit(address strategy) view returns (bool whitelisted)",
      "function strategyWhitelister() view returns (address)",
      "function transferOwnership(address newOwner)",
      "function unpause(uint256 newPausedStatus)",
      "function version() view returns (string)",
      "function withdrawSharesAsTokens(address staker, address strategy, address token, uint256 shares)"
    ],
    "0xBAA0c93E3e24E863E86C7B508Fc0dC57Bc5718a0": [
      "constructor()",
      "error CallerNotOperator()",
      "error CallerNotStaderContract()",
      "error EmptyNameString()",
      "error ExistingOrMismatchingPoolId()",
      "error InvalidLengthOfPubkey()",
      "error InvalidLengthOfSignature()",
      "error MismatchingPoolId()",
      "error NameCrossedMaxLength()",
      "error OperatorIsNotOnboarded()",
      "error PoolIdNotPresent()",
      "error PubkeyAlreadyExist()",
      "error PubkeyDoesNotExit()",
      "error ZeroAddress()",
      "event DeactivatedPool(uint8 indexed poolId, address poolAddress)",
      "event ExitOperator(address indexed operator, uint256 totalAmount)",
      "event ExitValidator(bytes pubkey)",
      "event Initialized(uint8 version)",
      "event PoolAdded(uint8 indexed poolId, address poolAddress)",
      "event PoolAddressUpdated(uint8 indexed poolId, address poolAddress)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event UpdatedStaderConfig(address staderConfig)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function addNewPool(uint8 _poolId, address _poolAddress)",
      "function calculateRewardShare(uint8 _poolId, uint256 _totalRewards) view returns (uint256 userShare, uint256 operatorShare, uint256 protocolShare)",
      "function getActiveValidatorCountByPool(uint8 _poolId) view returns (uint256)",
      "function getCollateralETH(uint8 _poolId) view returns (uint256)",
      "function getNodeRegistry(uint8 _poolId) view returns (address)",
      "function getOperatorFee(uint8 _poolId) view returns (uint256)",
      "function getOperatorPoolId(address _operAddr) view returns (uint8)",
      "function getOperatorTotalNonTerminalKeys(uint8 _poolId, address _nodeOperator, uint256 _startIndex, uint256 _endIndex) view returns (uint256)",
      "function getPoolIdArray() view returns (uint8[])",
      "function getProtocolFee(uint8 _poolId) view returns (uint256)",
      "function getQueuedValidatorCountByPool(uint8 _poolId) view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getSocializingPoolAddress(uint8 _poolId) view returns (address)",
      "function getTotalActiveValidatorCount() view returns (uint256)",
      "function getValidatorPoolId(bytes _pubkey) view returns (uint8)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function isExistingOperator(address _operAddr) view returns (bool)",
      "function isExistingPoolId(uint8 _poolId) view returns (bool)",
      "function isExistingPubkey(bytes _pubkey) view returns (bool)",
      "function onlyValidKeys(bytes _pubkey, bytes _preDepositSignature, bytes _depositSignature) view",
      "function onlyValidName(string _name) view",
      "function poolAddressById(uint8) view returns (address)",
      "function poolIdArray(uint256) view returns (uint8)",
      "function processOperatorExit(address _operator, uint256 totalAmount)",
      "function processValidatorExitList(bytes[] _pubkeys)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updatePoolAddress(uint8 _poolId, address _newPoolAddress)",
      "function updateStaderConfig(address _staderConfig)"
    ],
    "0xBd35a7a1CDeF403a6a99e4E8BA0974D198455030": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xBE1685C81aA44FF9FB319dD389addd9374383e90": [
      "constructor(address _singleton)"
    ],
    "0xbe3781CE437Cc3fC8c8167913B4d462347D11F20": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704": [
      "constructor(address implementationContract)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address implementation)",
      "function admin() view returns (address)",
      "function changeAdmin(address newAdmin)",
      "function implementation() view returns (address)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xbf05A929c3D7885a6aeAd833a992dA6E5ac23b09": [
      "constructor(address _admin, address[] _configManagers)",
      "error EmptyValue(string key)",
      "error ValueDoesntExist(string key)",
      "error ValueExists(string key)",
      "error ValueIsSame(string key, bytes value)",
      "error ZeroAddress()",
      "event ConfigValueSet(string key, bytes value)",
      "event ConfigValueUnset(string key)",
      "event ConfigValueUpdated(string key, bytes value)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function CONFIG_MANAGER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function get(string _key) view returns (bytes)",
      "function getList(string[] _keys) view returns (bytes[])",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function set(string _key, bytes _value)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unset(string _key)",
      "function update(string _key, bytes _value)"
    ],
    "0xBF1Ce0Bc4EdaAD8e576b3b55e19c4C15Cf6999eb": [
      "function getScriptExecutor(bytes _script) view returns (address)",
      "function hasInitialized() view returns (bool)",
      "function REGISTRY_ADD_EXECUTOR_ROLE() view returns (bytes32)",
      "function getEVMScriptExecutor(bytes _script) view returns (address)",
      "function getRecoveryVault() view returns (address)",
      "function disableScriptExecutor(uint256 _executorId)",
      "function allowRecoverability(address token) view returns (bool)",
      "function appId() view returns (bytes32)",
      "function initialize()",
      "function addScriptExecutor(address _executor) returns (uint256 id)",
      "function getInitializationBlock() view returns (uint256)",
      "function transferToVault(address _token)",
      "function canPerform(address _sender, bytes32 _role, uint256[] _params) view returns (bool)",
      "function getEVMScriptRegistry() view returns (address)",
      "function REGISTRY_MANAGER_ROLE() view returns (bytes32)",
      "function enableScriptExecutor(uint256 _executorId)",
      "function kernel() view returns (address)",
      "function isPetrified() view returns (bool)",
      "function executors(uint256) view returns (address executor, bool enabled)",
      "event EnableExecutor(uint256 indexed executorId, address indexed executorAddress)",
      "event DisableExecutor(uint256 indexed executorId, address indexed executorAddress)",
      "event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData)",
      "event RecoverToVault(address indexed vault, address indexed token, uint256 amount)"
    ],
    "0xC06Fd4F821eaC1fF1ae8067b36342899b57BAa2d": [
      "constructor(uint256 minDelay, address[] proposers, address[] executors)",
      "event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data)",
      "event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, uint256 delay)",
      "event Cancelled(bytes32 indexed id)",
      "event MinDelayChange(uint256 oldDuration, uint256 newDuration)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "function CANCELLER_ROLE() view returns (bytes32)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function EXECUTOR_ROLE() view returns (bytes32)",
      "function PROPOSER_ROLE() view returns (bytes32)",
      "function TIMELOCK_ADMIN_ROLE() view returns (bytes32)",
      "function cancel(bytes32 id)",
      "function execute(address target, uint256 value, bytes payload, bytes32 predecessor, bytes32 salt) payable",
      "function executeBatch(address[] targets, uint256[] values, bytes[] payloads, bytes32 predecessor, bytes32 salt) payable",
      "function getMinDelay() view returns (uint256 duration)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getTimestamp(bytes32 id) view returns (uint256 timestamp)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function hashOperation(address target, uint256 value, bytes data, bytes32 predecessor, bytes32 salt) pure returns (bytes32 hash)",
      "function hashOperationBatch(address[] targets, uint256[] values, bytes[] payloads, bytes32 predecessor, bytes32 salt) pure returns (bytes32 hash)",
      "function isOperation(bytes32 id) view returns (bool registered)",
      "function isOperationDone(bytes32 id) view returns (bool done)",
      "function isOperationPending(bytes32 id) view returns (bool pending)",
      "function isOperationReady(bytes32 id) view returns (bool ready)",
      "function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) returns (bytes4)",
      "function onERC1155Received(address, address, uint256, uint256, bytes) returns (bytes4)",
      "function onERC721Received(address, address, uint256, bytes) returns (bytes4)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function schedule(address target, uint256 value, bytes data, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "function scheduleBatch(address[] targets, uint256[] values, bytes[] payloads, bytes32 predecessor, bytes32 salt, uint256 delay)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function updateDelay(uint256 newDelay)"
    ],
    "0xC125fECDDabFe13f29EB287Bb8551892AEE7C98A": [
      "constructor(address _registryCoordinator, address _stakeRegistry)",
      "event EjectorUpdated(address ejector, bool status)",
      "event Initialized(uint8 version)",
      "event OperatorEjected(bytes32 operatorId, uint8 quorumNumber)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event QuorumEjection(uint32 ejectedOperators, bool ratelimitHit)",
      "event QuorumEjectionParamsSet(uint8 quorumNumber, uint32 rateLimitWindow, uint16 ejectableStakePercent)",
      "function amountEjectableForQuorum(uint8 _quorumNumber) view returns (uint256)",
      "function ejectOperators(bytes32[][] _operatorIds)",
      "function initialize(address _owner, address[] _ejectors, tuple(uint32 rateLimitWindow, uint16 ejectableStakePercent)[] _quorumEjectionParams)",
      "function isEjector(address) view returns (bool)",
      "function owner() view returns (address)",
      "function quorumEjectionParams(uint8) view returns (uint32 rateLimitWindow, uint16 ejectableStakePercent)",
      "function registryCoordinator() view returns (address)",
      "function renounceOwnership()",
      "function setEjector(address _ejector, bool _status)",
      "function setQuorumEjectionParams(uint8 _quorumNumber, tuple(uint32 rateLimitWindow, uint16 ejectableStakePercent) _quorumEjectionParams)",
      "function stakeEjectedForQuorum(uint8, uint256) view returns (uint256 timestamp, uint256 stakeEjected)",
      "function stakeRegistry() view returns (address)",
      "function transferOwnership(address newOwner)"
    ],
    "0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "0xCC0DAB27C23599cD7D2b7a04edF0730F8B2509a7": [
      "constructor()",
      "error CallerNotManager()",
      "error CallerNotStaderContract()",
      "error ETHTransferFailed(address recipient, uint256 amount)",
      "error FutureCycleIndex()",
      "error InsufficientETHRewards()",
      "error InsufficientSDRewards()",
      "error InvalidAmount()",
      "error InvalidCycleIndex()",
      "error InvalidProof(uint256 cycle, address operator)",
      "error RewardAlreadyClaimed(address operator, uint256 cycle)",
      "error RewardAlreadyHandled()",
      "error SDTransferFailed()",
      "error ZeroAddress()",
      "event ETHReceived(address indexed sender, uint256 amount)",
      "event Initialized(uint8 version)",
      "event OperatorRewardsClaimed(address indexed recipient, uint256 ethRewards, uint256 sdRewards)",
      "event OperatorRewardsUpdated(uint256 ethRewards, uint256 totalETHRewards, uint256 sdRewards, uint256 totalSDRewards)",
      "event Paused(address account)",
      "event ProtocolETHRewardsTransferred(uint256 ethRewards)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Unpaused(address account)",
      "event UpdatedStaderConfig(address indexed staderConfig)",
      "event UpdatedStaderOperatorRegistry(address indexed staderOperatorRegistry)",
      "event UpdatedStaderValidatorRegistry(address indexed staderValidatorRegistry)",
      "event UserETHRewardsTransferred(uint256 ethRewards)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function claim(uint256[] _index, uint256[] _amountSD, uint256[] _amountETH, bytes32[][] _merkleProof)",
      "function claimAndDepositSD(uint256[] _index, uint256[] _amountSD, uint256[] _amountETH, bytes32[][] _merkleProof)",
      "function claimedRewards(address, uint256) view returns (bool)",
      "function getCurrentRewardsIndex() view returns (uint256 index)",
      "function getRewardCycleDetails(uint256 _index) view returns (uint256 _startBlock, uint256 _endBlock)",
      "function getRewardDetails() view returns (uint256 currentIndex, uint256 currentStartBlock, uint256 currentEndBlock)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function handleRewards(tuple(uint256 reportingBlockNumber, uint256 index, bytes32 merkleRoot, uint8 poolId, uint256 operatorETHRewards, uint256 userETHRewards, uint256 protocolETHRewards, uint256 operatorSDRewards) _rewardsData)",
      "function handledRewards(uint256) view returns (bool)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialBlock() view returns (uint256)",
      "function initialize(address _admin, address _staderConfig)",
      "function lastReportedRewardsData() view returns (uint256 reportingBlockNumber, uint256 index, bytes32 merkleRoot, uint8 poolId, uint256 operatorETHRewards, uint256 userETHRewards, uint256 protocolETHRewards, uint256 operatorSDRewards)",
      "function maxApproveSD()",
      "function pause()",
      "function paused() view returns (bool)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function rewardsDataMap(uint256) view returns (uint256 reportingBlockNumber, uint256 index, bytes32 merkleRoot, uint8 poolId, uint256 operatorETHRewards, uint256 userETHRewards, uint256 protocolETHRewards, uint256 operatorSDRewards)",
      "function staderConfig() view returns (address)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function totalOperatorETHRewardsRemaining() view returns (uint256)",
      "function totalOperatorSDRewardsRemaining() view returns (uint256)",
      "function unpause()",
      "function updateStaderConfig(address _staderConfig)",
      "function verifyProof(uint256 _index, address _operator, uint256 _amountSD, uint256 _amountETH, bytes32[] _merkleProof) view returns (bool)"
    ],
    "0xCC52f17756C04bBa7E377716d7062fC36D7f69Fd": [
      "constructor(address _lido, address _treasury)",
      "error InvalidContractVersionIncrement()",
      "error LidoZeroAddress()",
      "error NonZeroContractVersionOnInit()",
      "error NotEnoughEther(uint256 requested, uint256 balance)",
      "error NotLido()",
      "error TreasuryZeroAddress()",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error ZeroAmount()",
      "event ContractVersionSet(uint256 version)",
      "event ERC20Recovered(address indexed requestedBy, address indexed token, uint256 amount)",
      "event ERC721Recovered(address indexed requestedBy, address indexed token, uint256 tokenId)",
      "function LIDO() view returns (address)",
      "function TREASURY() view returns (address)",
      "function getContractVersion() view returns (uint256)",
      "function initialize()",
      "function recoverERC20(address _token, uint256 _amount)",
      "function recoverERC721(address _token, uint256 _tokenId)",
      "function withdrawWithdrawals(uint256 _amount)"
    ],
    "0xcf5EA1b38380f6aF39068375516Daf40Ed70D299": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xD15a672319Cf0352560eE76d9e89eAB0889046D3": [
      "constructor(address _admin, address _treasury, address _stETH, uint256 _totalCoverSharesBurnt, uint256 _totalNonCoverSharesBurnt)",
      "error AppAuthLidoFailed()",
      "error BurnAmountExceedsActual(uint256 requestedAmount, uint256 actualAmount)",
      "error DirectETHTransfer()",
      "error StETHRecoveryWrongFunc()",
      "error ZeroAddress(string field)",
      "error ZeroBurnAmount()",
      "error ZeroRecoveryAmount()",
      "event ERC20Recovered(address indexed requestedBy, address indexed token, uint256 amount)",
      "event ERC721Recovered(address indexed requestedBy, address indexed token, uint256 tokenId)",
      "event ExcessStETHRecovered(address indexed requestedBy, uint256 amountOfStETH, uint256 amountOfShares)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event StETHBurnRequested(bool indexed isCover, address indexed requestedBy, uint256 amountOfStETH, uint256 amountOfShares)",
      "event StETHBurnt(bool indexed isCover, uint256 amountOfStETH, uint256 amountOfShares)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function REQUEST_BURN_MY_STETH_ROLE() view returns (bytes32)",
      "function REQUEST_BURN_SHARES_ROLE() view returns (bytes32)",
      "function STETH() view returns (address)",
      "function TREASURY() view returns (address)",
      "function commitSharesToBurn(uint256 _sharesToBurn)",
      "function getCoverSharesBurnt() view returns (uint256)",
      "function getExcessStETH() view returns (uint256)",
      "function getNonCoverSharesBurnt() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getSharesRequestedToBurn() view returns (uint256 coverShares, uint256 nonCoverShares)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function recoverERC20(address _token, uint256 _amount)",
      "function recoverERC721(address _token, uint256 _tokenId)",
      "function recoverExcessStETH()",
      "function renounceRole(bytes32 role, address account)",
      "function requestBurnMyStETH(uint256 _stETHAmountToBurn)",
      "function requestBurnMyStETHForCover(uint256 _stETHAmountToBurn)",
      "function requestBurnShares(address _from, uint256 _sharesAmountToBurn)",
      "function requestBurnSharesForCover(address _from, uint256 _sharesAmountToBurn)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
    ],
    "0xD160e6C1543f562fc2B0A5bf090aED32640Ec55B": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xd1a72Bd052e0d65B7c26D3dd97A98B74AcbBb6c5": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xdb4c89956eEa6F606135E7d366322F2bDE609F15": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address admin_)",
      "function changeAdmin(address newAdmin)",
      "function implementation() returns (address implementation_)",
      "function upgradeTo(address newImplementation)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xe147e23753505e2C83b5f9ef229a9B7e7B3F50Ea": [
      "constructor(address _singleton)"
    ],
    "0xe225825bcf20F39E2F2e2170412a3247D83492D0": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xe2E2dB234b0FFB9AFe41e52dB7d3c2B8585646c3": [
      "constructor(address _ethPOS, address _eigenPodManager, uint64 _GENESIS_TIME, string _version)",
      "error BeaconTimestampTooFarInPast()",
      "error CannotCheckpointTwiceInSingleBlock()",
      "error CheckpointAlreadyActive()",
      "error CredentialsAlreadyVerified()",
      "error CurrentlyPaused()",
      "error ForkTimestampZero()",
      "error InputAddressZero()",
      "error InputArrayLengthMismatch()",
      "error InsufficientWithdrawableBalance()",
      "error InvalidEIP4788Response()",
      "error InvalidProof()",
      "error InvalidProofLength()",
      "error InvalidProofLength()",
      "error InvalidPubKeyLength()",
      "error InvalidShortString()",
      "error InvalidValidatorFieldsLength()",
      "error MsgValueNot32ETH()",
      "error NoActiveCheckpoint()",
      "error NoBalanceToCheckpoint()",
      "error OnlyEigenPodManager()",
      "error OnlyEigenPodOwner()",
      "error OnlyEigenPodOwnerOrProofSubmitter()",
      "error StringTooLong(string str)",
      "error TimestampOutOfRange()",
      "error ValidatorInactiveOnBeaconChain()",
      "error ValidatorIsExitingBeaconChain()",
      "error ValidatorNotActiveInPod()",
      "error ValidatorNotSlashedOnBeaconChain()",
      "error WithdrawalCredentialsNotForEigenPod()",
      "event CheckpointCreated(uint64 indexed checkpointTimestamp, bytes32 indexed beaconBlockRoot, uint256 validatorCount)",
      "event CheckpointFinalized(uint64 indexed checkpointTimestamp, int256 totalShareDeltaWei)",
      "event EigenPodStaked(bytes pubkey)",
      "event Initialized(uint8 version)",
      "event NonBeaconChainETHReceived(uint256 amountReceived)",
      "event ProofSubmitterUpdated(address prevProofSubmitter, address newProofSubmitter)",
      "event RestakedBeaconChainETHWithdrawn(address indexed recipient, uint256 amount)",
      "event ValidatorBalanceUpdated(uint40 validatorIndex, uint64 balanceTimestamp, uint64 newValidatorBalanceGwei)",
      "event ValidatorCheckpointed(uint64 indexed checkpointTimestamp, uint40 indexed validatorIndex)",
      "event ValidatorRestaked(uint40 validatorIndex)",
      "event ValidatorWithdrawn(uint64 indexed checkpointTimestamp, uint40 indexed validatorIndex)",
      "function GENESIS_TIME() view returns (uint64)",
      "function activeValidatorCount() view returns (uint256)",
      "function checkpointBalanceExitedGwei(uint64) view returns (uint64)",
      "function currentCheckpoint() view returns (tuple(bytes32 beaconBlockRoot, uint24 proofsRemaining, uint64 podBalanceGwei, int64 balanceDeltasGwei, uint64 prevBeaconBalanceGwei))",
      "function currentCheckpointTimestamp() view returns (uint64)",
      "function eigenPodManager() view returns (address)",
      "function ethPOS() view returns (address)",
      "function getParentBlockRoot(uint64 timestamp) view returns (bytes32)",
      "function initialize(address _podOwner)",
      "function lastCheckpointTimestamp() view returns (uint64)",
      "function podOwner() view returns (address)",
      "function proofSubmitter() view returns (address)",
      "function recoverTokens(address[] tokenList, uint256[] amountsToWithdraw, address recipient)",
      "function setProofSubmitter(address newProofSubmitter)",
      "function stake(bytes pubkey, bytes signature, bytes32 depositDataRoot) payable",
      "function startCheckpoint(bool revertIfNoBalance)",
      "function validatorPubkeyHashToInfo(bytes32 validatorPubkeyHash) view returns (tuple(uint64 validatorIndex, uint64 restakedBalanceGwei, uint64 lastCheckpointedAt, uint8 status))",
      "function validatorPubkeyToInfo(bytes validatorPubkey) view returns (tuple(uint64 validatorIndex, uint64 restakedBalanceGwei, uint64 lastCheckpointedAt, uint8 status))",
      "function validatorStatus(bytes validatorPubkey) view returns (uint8)",
      "function validatorStatus(bytes32 pubkeyHash) view returns (uint8)",
      "function verifyCheckpointProofs(tuple(bytes32 balanceContainerRoot, bytes proof) balanceContainerProof, tuple(bytes32 pubkeyHash, bytes32 balanceRoot, bytes proof)[] proofs)",
      "function verifyStaleBalance(uint64 beaconTimestamp, tuple(bytes32 beaconStateRoot, bytes proof) stateRootProof, tuple(bytes32[] validatorFields, bytes proof) proof)",
      "function verifyWithdrawalCredentials(uint64 beaconTimestamp, tuple(bytes32 beaconStateRoot, bytes proof) stateRootProof, uint40[] validatorIndices, bytes[] validatorFieldsProofs, bytes32[][] validatorFields)",
      "function version() view returns (string)",
      "function withdrawRestakedBeaconChainETH(address recipient, uint256 amountWei)",
      "function withdrawableRestakedExecutionLayerGwei() view returns (uint64)"
    ],
    "0xE42C659Dc09109566720EA8b2De186c2Be7D94D9": [
      "constructor(address _wstETH, string _name, string _symbol)",
      "error AdminZeroAddress()",
      "error ApprovalToOwner()",
      "error ApproveToCaller()",
      "error ArraysLengthMismatch(uint256 _firstArrayLength, uint256 _secondArrayLength)",
      "error BatchesAreNotSorted()",
      "error CantSendValueRecipientMayHaveReverted()",
      "error EmptyBatches()",
      "error InvalidContractVersionIncrement()",
      "error InvalidHint(uint256 _hint)",
      "error InvalidOwnerAddress(address)",
      "error InvalidReportTimestamp()",
      "error InvalidRequestId(uint256 _requestId)",
      "error InvalidRequestIdRange(uint256 startId, uint256 endId)",
      "error InvalidState()",
      "error NonZeroContractVersionOnInit()",
      "error NotEnoughEther()",
      "error NotOwner(address _sender, address _owner)",
      "error NotOwnerOrApproved(address sender)",
      "error NotOwnerOrApprovedForAll(address sender)",
      "error PauseUntilMustBeInFuture()",
      "error PausedExpected()",
      "error RequestAlreadyClaimed(uint256 _requestId)",
      "error RequestAmountTooLarge(uint256 _amountOfStETH)",
      "error RequestAmountTooSmall(uint256 _amountOfStETH)",
      "error RequestIdsNotSorted()",
      "error RequestNotFoundOrNotFinalized(uint256 _requestId)",
      "error ResumedExpected()",
      "error StringTooLong(string str)",
      "error TooMuchEtherToFinalize(uint256 sent, uint256 maxExpected)",
      "error TransferFromIncorrectOwner(address from, address realOwner)",
      "error TransferFromZeroAddress()",
      "error TransferToNonIERC721Receiver(address)",
      "error TransferToThemselves()",
      "error TransferToZeroAddress()",
      "error UnexpectedContractVersion(uint256 expected, uint256 received)",
      "error ZeroAmountOfETH()",
      "error ZeroMetadata()",
      "error ZeroPauseDuration()",
      "error ZeroRecipient()",
      "error ZeroShareRate()",
      "error ZeroTimestamp()",
      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
      "event BaseURISet(string baseURI)",
      "event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)",
      "event BunkerModeDisabled()",
      "event BunkerModeEnabled(uint256 _sinceTimestamp)",
      "event ContractVersionSet(uint256 version)",
      "event InitializedV1(address _admin)",
      "event MetadataUpdate(uint256 _tokenId)",
      "event NftDescriptorAddressSet(address nftDescriptorAddress)",
      "event Paused(uint256 duration)",
      "event Resumed()",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
      "event WithdrawalClaimed(uint256 indexed requestId, address indexed owner, address indexed receiver, uint256 amountOfETH)",
      "event WithdrawalRequested(uint256 indexed requestId, address indexed requestor, address indexed owner, uint256 amountOfStETH, uint256 amountOfShares)",
      "event WithdrawalsFinalized(uint256 indexed from, uint256 indexed to, uint256 amountOfETHLocked, uint256 sharesToBurn, uint256 timestamp)",
      "function BUNKER_MODE_DISABLED_TIMESTAMP() view returns (uint256)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function FINALIZE_ROLE() view returns (bytes32)",
      "function MANAGE_TOKEN_URI_ROLE() view returns (bytes32)",
      "function MAX_BATCHES_LENGTH() view returns (uint256)",
      "function MAX_STETH_WITHDRAWAL_AMOUNT() view returns (uint256)",
      "function MIN_STETH_WITHDRAWAL_AMOUNT() view returns (uint256)",
      "function ORACLE_ROLE() view returns (bytes32)",
      "function PAUSE_INFINITELY() view returns (uint256)",
      "function PAUSE_ROLE() view returns (bytes32)",
      "function RESUME_ROLE() view returns (bytes32)",
      "function STETH() view returns (address)",
      "function WSTETH() view returns (address)",
      "function approve(address _to, uint256 _requestId)",
      "function balanceOf(address _owner) view returns (uint256)",
      "function bunkerModeSinceTimestamp() view returns (uint256)",
      "function calculateFinalizationBatches(uint256 _maxShareRate, uint256 _maxTimestamp, uint256 _maxRequestsPerCall, tuple(uint256 remainingEthBudget, bool finished, uint256[36] batches, uint256 batchesLength) _state) view returns (tuple(uint256 remainingEthBudget, bool finished, uint256[36] batches, uint256 batchesLength))",
      "function claimWithdrawal(uint256 _requestId)",
      "function claimWithdrawals(uint256[] _requestIds, uint256[] _hints)",
      "function claimWithdrawalsTo(uint256[] _requestIds, uint256[] _hints, address _recipient)",
      "function finalize(uint256 _lastRequestIdToBeFinalized, uint256 _maxShareRate) payable",
      "function findCheckpointHints(uint256[] _requestIds, uint256 _firstIndex, uint256 _lastIndex) view returns (uint256[] hintIds)",
      "function getApproved(uint256 _requestId) view returns (address)",
      "function getBaseURI() view returns (string)",
      "function getClaimableEther(uint256[] _requestIds, uint256[] _hints) view returns (uint256[] claimableEthValues)",
      "function getContractVersion() view returns (uint256)",
      "function getLastCheckpointIndex() view returns (uint256)",
      "function getLastFinalizedRequestId() view returns (uint256)",
      "function getLastRequestId() view returns (uint256)",
      "function getLockedEtherAmount() view returns (uint256)",
      "function getNFTDescriptorAddress() view returns (address)",
      "function getResumeSinceTimestamp() view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getRoleMember(bytes32 role, uint256 index) view returns (address)",
      "function getRoleMemberCount(bytes32 role) view returns (uint256)",
      "function getWithdrawalRequests(address _owner) view returns (uint256[] requestsIds)",
      "function getWithdrawalStatus(uint256[] _requestIds) view returns (tuple(uint256 amountOfStETH, uint256 amountOfShares, address owner, uint256 timestamp, bool isFinalized, bool isClaimed)[] statuses)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin)",
      "function isApprovedForAll(address _owner, address _operator) view returns (bool)",
      "function isBunkerModeActive() view returns (bool)",
      "function isPaused() view returns (bool)",
      "function name() view returns (string)",
      "function onOracleReport(bool _isBunkerModeNow, uint256 _bunkerStartTimestamp, uint256 _currentReportTimestamp)",
      "function ownerOf(uint256 _requestId) view returns (address)",
      "function pauseFor(uint256 _duration)",
      "function pauseUntil(uint256 _pauseUntilInclusive)",
      "function prefinalize(uint256[] _batches, uint256 _maxShareRate) view returns (uint256 ethToLock, uint256 sharesToBurn)",
      "function renounceRole(bytes32 role, address account)",
      "function requestWithdrawals(uint256[] _amounts, address _owner) returns (uint256[] requestIds)",
      "function requestWithdrawalsWithPermit(uint256[] _amounts, address _owner, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) _permit) returns (uint256[] requestIds)",
      "function requestWithdrawalsWstETH(uint256[] _amounts, address _owner) returns (uint256[] requestIds)",
      "function requestWithdrawalsWstETHWithPermit(uint256[] _amounts, address _owner, tuple(uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) _permit) returns (uint256[] requestIds)",
      "function resume()",
      "function revokeRole(bytes32 role, address account)",
      "function safeTransferFrom(address _from, address _to, uint256 _requestId)",
      "function safeTransferFrom(address _from, address _to, uint256 _requestId, bytes _data)",
      "function setApprovalForAll(address _operator, bool _approved)",
      "function setBaseURI(string _baseURI)",
      "function setNFTDescriptorAddress(address _nftDescriptorAddress)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function tokenURI(uint256 _requestId) view returns (string)",
      "function transferFrom(address _from, address _to, uint256 _requestId)",
      "function unfinalizedRequestNumber() view returns (uint256)",
      "function unfinalizedStETH() view returns (uint256)"
    ],
    "0xe6793B9e4FbA7DE0ee833F9D02bba7DB5EB27823": [
      "constructor(address initialOwner_, address lido_)",
      "error ErrorAddExistedObserver()",
      "error ErrorBadObserverInterface()",
      "error ErrorMaxObserversCountExceeded()",
      "error ErrorNoObserverToRemove()",
      "error ErrorNotAuthorizedRebaseCaller()",
      "error ErrorTokenRateNotifierRevertedWithNoData()",
      "error ErrorZeroAddressLido()",
      "error ErrorZeroAddressObserver()",
      "error ErrorZeroAddressOwner()",
      "event ObserverAdded(address indexed observer)",
      "event ObserverRemoved(address indexed observer)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PushTokenRateFailed(address indexed observer, bytes lowLevelRevertData)",
      "function INDEX_NOT_FOUND() view returns (uint256)",
      "function LIDO() view returns (address)",
      "function MAX_OBSERVERS_COUNT() view returns (uint256)",
      "function REQUIRED_INTERFACE() view returns (bytes4)",
      "function addObserver(address observer_)",
      "function handlePostTokenRebase(uint256, uint256, uint256, uint256, uint256, uint256, uint256)",
      "function observers(uint256) view returns (address)",
      "function observersLength() view returns (uint256)",
      "function owner() view returns (address)",
      "function removeObserver(address observer_)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0xe7f3705c9Addf2DE14e03C345fA982CAb2c1C6B1": [
      "constructor(string _version)",
      "error AdminAlreadyPending()",
      "error AdminAlreadySet()",
      "error AdminNotPending()",
      "error AdminNotSet()",
      "error AppointeeAlreadySet()",
      "error AppointeeNotSet()",
      "error CannotHaveZeroAdmins()",
      "error InvalidShortString()",
      "error NotAdmin()",
      "error StringTooLong(string str)",
      "event AdminRemoved(address indexed account, address admin)",
      "event AdminSet(address indexed account, address admin)",
      "event AppointeeRemoved(address indexed account, address indexed appointee, address target, bytes4 selector)",
      "event AppointeeSet(address indexed account, address indexed appointee, address target, bytes4 selector)",
      "event Initialized(uint8 version)",
      "event PendingAdminAdded(address indexed account, address admin)",
      "event PendingAdminRemoved(address indexed account, address admin)",
      "function acceptAdmin(address account)",
      "function addPendingAdmin(address account, address admin)",
      "function canCall(address account, address caller, address target, bytes4 selector) view returns (bool)",
      "function getAdmins(address account) view returns (address[])",
      "function getAppointeePermissions(address account, address appointee) view returns (address[], bytes4[])",
      "function getAppointees(address account, address target, bytes4 selector) view returns (address[])",
      "function getPendingAdmins(address account) view returns (address[])",
      "function isAdmin(address account, address caller) view returns (bool)",
      "function isPendingAdmin(address account, address pendingAdmin) view returns (bool)",
      "function removeAdmin(address account, address admin)",
      "function removeAppointee(address account, address appointee, address target, bytes4 selector)",
      "function removePendingAdmin(address account, address admin)",
      "function setAppointee(address account, address appointee, address target, bytes4 selector)",
      "function version() view returns (string)"
    ],
    "0xED6EE5049f643289ad52411E9aDeC698D04a9602": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xeDA89ed8F89D786D816F8E14CF8d2F90c6BF763f": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xef082Ff43805B93Ed375Fd47A964Fe136cCB9021": [
      "constructor()",
      "error AddressEmptyCode(address target)",
      "error AddressZero()",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error InvalidInitialization()",
      "error NotInitializing()",
      "error NotLiquidity()",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error PolicyIDEmpty()",
      "error UUPSUnauthorizedCallContext()",
      "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
      "event Initialized(uint64 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PolicySet(string policyID)",
      "event PredicateManagerSet(address predicateManager)",
      "event Upgraded(address indexed implementation)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function getPolicy() view returns (string)",
      "function getPredicateManager() view returns (address)",
      "function initialize(address _admin, address _liquidity, address _predicateManager, string policyID)",
      "function liquidity() view returns (address)",
      "function owner() view returns (address)",
      "function permit(address user, uint256 value, bytes encodedData, bytes permission) returns (bool)",
      "function proxiableUUID() view returns (bytes32)",
      "function renounceOwnership()",
      "function setPolicy(string policyID)",
      "function setPredicateManager(address serviceManager)",
      "function transferOwnership(address newOwner)",
      "function upgradeToAndCall(address newImplementation, bytes data) payable"
    ],
    "0xf393d241258164E9779972447284fC4D47C3b4d1": [
      "constructor()",
      "error CallerNotManager()",
      "error CallerNotStaderContract()",
      "error CouldNotDetermineExcessETH()",
      "error InvalidCommission()",
      "error UnsupportedOperation()",
      "error ZeroAddress()",
      "event Initialized(uint8 version)",
      "event ReceivedCollateralETH(uint256 amount)",
      "event ReceivedInsuranceFund(uint256 amount)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event TransferredETHToSSPMForDefectiveKeys(uint256 amount)",
      "event UpdatedCommissionFees(uint256 protocolFee, uint256 operatorFee)",
      "event UpdatedStaderConfig(address staderConfig)",
      "event ValidatorDepositedOnBeaconChain(uint256 indexed validatorId, bytes pubKey)",
      "event ValidatorPreDepositedOnBeaconChain(bytes pubKey)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function MAX_COMMISSION_LIMIT_BIPS() view returns (uint256)",
      "function computeDepositDataRoot(bytes _pubkey, bytes _signature, bytes _withdrawCredential, uint256 _depositAmount) pure returns (bytes32)",
      "function fullDepositOnBeaconChain(bytes[] _pubkey)",
      "function getCollateralETH() view returns (uint256)",
      "function getNodeRegistry() view returns (address)",
      "function getOperatorTotalNonTerminalKeys(address _nodeOperator, uint256 _startIndex, uint256 _endIndex) view returns (uint256)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getSocializingPoolAddress() view returns (address)",
      "function getTotalActiveValidatorCount() view returns (uint256)",
      "function getTotalQueuedValidatorCount() view returns (uint256)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _admin, address _staderConfig)",
      "function isExistingOperator(address _operAddr) view returns (bool)",
      "function isExistingPubkey(bytes _pubkey) view returns (bool)",
      "function operatorFee() view returns (uint256)",
      "function preDepositValidatorCount() view returns (uint256)",
      "function protocolFee() view returns (uint256)",
      "function receiveInsuranceFund() payable",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function setCommissionFees(uint256 _protocolFee, uint256 _operatorFee)",
      "function staderConfig() view returns (address)",
      "function stakeUserETHToBeaconChain() payable",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function transferETHOfDefectiveKeysToSSPM(uint256 _defectiveKeyCount)",
      "function transferExcessETHToSSPM()",
      "function updateStaderConfig(address _staderConfig)"
    ],
    "0xF64bAe65f6f2a5277571143A24FaaFDFC0C2a737": [
      "constructor(address _logic, address admin_, bytes _data) payable",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xF65e73aAc9182e353600a916a6c7681F810f79C3": [
      "constructor(address implementation, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event Upgraded(address indexed implementation)"
    ],
    "0xF6D82FBBdf700c086389e72C3023812e956ECa9e": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RelayAdded(address indexed relay, uint32 indexed key, string relayURL)",
      "function addRelayInfo(tuple(address relayAddress, string relayURL) relayInfo) returns (uint32)",
      "function initialize(address _initialOwner)",
      "function nextRelayKey() view returns (uint32)",
      "function owner() view returns (address)",
      "function relayKeyToAddress(uint32 key) view returns (address)",
      "function relayKeyToInfo(uint32) view returns (address relayAddress, string relayURL)",
      "function relayKeyToUrl(uint32 key) view returns (string)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)"
    ],
    "0xf6f4A30EeF7cf51Ed4Ee1415fB3bFDAf3694B0d2": [
      "constructor(address _logic, address initialOwner, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error ProxyDeniedAdminAccess()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "0xfb1bffC9d739B8D520DaF37dF666da4C687191EA": [
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)",
      "event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xFdDf38947aFB03C621C71b06C9C70bce73f12999": [
      "constructor(address implementation_, address admin_, bytes data_)",
      "error NotAdmin()",
      "error ProxyIsOssified()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event BeaconUpgraded(address indexed beacon)",
      "event ProxyOssified()",
      "event Upgraded(address indexed implementation)",
      "function proxy__changeAdmin(address newAdmin_)",
      "function proxy__getAdmin() view returns (address)",
      "function proxy__getImplementation() view returns (address)",
      "function proxy__getIsOssified() view returns (bool)",
      "function proxy__ossify()",
      "function proxy__upgradeTo(address newImplementation_)",
      "function proxy__upgradeToAndCall(address newImplementation_, bytes setupCalldata_, bool forceCall_)"
    ],
    "0xFEA47018D632A77bA579846c840d5706705Dc598": [
      "constructor(address _singleton)"
    ],
    "0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD": [
      "constructor(address _lido, address _depositContract, address _stakingRouter, uint256 _pauseIntentValidityPeriodBlocks, uint256 _maxOperatorsPerUnvetting)",
      "error DepositInactiveModule()",
      "error DepositNoQuorum()",
      "error DepositRootChanged()",
      "error DepositTooFrequent()",
      "error DepositUnexpectedBlockHash()",
      "error DepositsArePaused()",
      "error DepositsNotPaused()",
      "error DuplicateAddress(address addr)",
      "error InvalidSignature()",
      "error ModuleNonceChanged()",
      "error NotAGuardian(address addr)",
      "error NotAnOwner(address caller)",
      "error PauseIntentExpired()",
      "error SignaturesNotSorted()",
      "error UnvetPayloadInvalid()",
      "error UnvetUnexpectedBlockHash()",
      "error ZeroAddress(string field)",
      "error ZeroParameter(string parameter)",
      "event DepositsPaused(address indexed guardian)",
      "event DepositsUnpaused()",
      "event GuardianAdded(address guardian)",
      "event GuardianQuorumChanged(uint256 newValue)",
      "event GuardianRemoved(address guardian)",
      "event LastDepositBlockChanged(uint256 newValue)",
      "event MaxOperatorsPerUnvettingChanged(uint256 newValue)",
      "event OwnerChanged(address newValue)",
      "event PauseIntentValidityPeriodBlocksChanged(uint256 newValue)",
      "function ATTEST_MESSAGE_PREFIX() view returns (bytes32)",
      "function DEPOSIT_CONTRACT() view returns (address)",
      "function LIDO() view returns (address)",
      "function PAUSE_MESSAGE_PREFIX() view returns (bytes32)",
      "function STAKING_ROUTER() view returns (address)",
      "function UNVET_MESSAGE_PREFIX() view returns (bytes32)",
      "function VERSION() view returns (uint256)",
      "function addGuardian(address addr, uint256 newQuorum)",
      "function addGuardians(address[] addresses, uint256 newQuorum)",
      "function canDeposit(uint256 stakingModuleId) view returns (bool)",
      "function depositBufferedEther(uint256 blockNumber, bytes32 blockHash, bytes32 depositRoot, uint256 stakingModuleId, uint256 nonce, bytes depositCalldata, tuple(bytes32 r, bytes32 vs)[] sortedGuardianSignatures)",
      "function getGuardianIndex(address addr) view returns (int256)",
      "function getGuardianQuorum() view returns (uint256)",
      "function getGuardians() view returns (address[])",
      "function getLastDepositBlock() view returns (uint256)",
      "function getMaxOperatorsPerUnvetting() view returns (uint256)",
      "function getOwner() view returns (address)",
      "function getPauseIntentValidityPeriodBlocks() view returns (uint256)",
      "function isDepositsPaused() view returns (bool)",
      "function isGuardian(address addr) view returns (bool)",
      "function isMinDepositDistancePassed(uint256 stakingModuleId) view returns (bool)",
      "function pauseDeposits(uint256 blockNumber, tuple(bytes32 r, bytes32 vs) sig)",
      "function removeGuardian(address addr, uint256 newQuorum)",
      "function setGuardianQuorum(uint256 newValue)",
      "function setMaxOperatorsPerUnvetting(uint256 newValue)",
      "function setOwner(address newValue)",
      "function setPauseIntentValidityPeriodBlocks(uint256 newValue)",
      "function unpauseDeposits()",
      "function unvetSigningKeys(uint256 blockNumber, bytes32 blockHash, uint256 stakingModuleId, uint256 nonce, bytes nodeOperatorIds, bytes vettedSigningKeysCounts, tuple(bytes32 r, bytes32 vs) sig)"
    ]
  },
  "usedTemplates": {
    "eigenlayer/AllocationManager": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/AVSDirectory": "0xc57750a5155e09049ae1ea4afd500090b460c5844ccb1d2d973da7af0d8d96f7",
    "eigenlayer/BLSApkRegistry": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/DelegationManager": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/EigenDADisperserRegistry": "0x2c838fbf8c11140f540ad7325afadb6581a83d99e20b209772f8f4a52ff01ea4",
    "eigenlayer/EigenDAPauserRegistry": "0x650c2bb1c48c3b4074538696cc4c8cc5a1610e60b132f774c9b120c619c34086",
    "eigenlayer/EigenDARelayRegistry": "0x0d507fbf4a396f03440bf549c0390245960539ae8aee2eac66ed61a0d5e37737",
    "eigenlayer/EigenDAServiceManager": "0x43be05ba9f6891eb189c2895b180400592e5a6628f6148b82760ee4bfb6ce1c6",
    "eigenlayer/EigenDAThresholdRegistry": "0x60726ce29319c0806396dbbc935f55a813ae0b3ae4e7af1019d742c45d281915",
    "eigenlayer/EigenLayerPauserRegistry": "0x650c2bb1c48c3b4074538696cc4c8cc5a1610e60b132f774c9b120c619c34086",
    "eigenlayer/EigenPodManager": "0xf1378651f0f74d64b9ef4ecb62fc6b0908c5fa61d0228aea84689e975859f4cf",
    "eigenlayer/EjectionManager": "0xbf1efcdc54104ebb9105e95373588d3451b5a97a4fcfdc4cbab5c69278a04a8b",
    "eigenlayer/IndexRegistry": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/PaymentVault": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/PermissionController": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/PredicateServiceManager": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/RegistryCoordinator": "0xeef8d3302c7236f5745dd51b4d6b05b44a371c9708994d86a8d2b7e4b573dedc",
    "eigenlayer/SocketRegistry": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/StakeRegistry": "0x354e5717008504cef09d88027f76fe2fe308210a96b59fce263f4d8ec5868080",
    "eigenlayer/StrategiesBeacon": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/StrategyFactory": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/StrategyManager": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "eigenlayer/TimelockControllerOwning": "0xaf1ebe8a6cc93d2ab3ea744cf16dd3a829de773907808c85af29327d02934811",
    "global/DepositContract": "0xfc77f1d7412b523d27d6db22532ffaa54e0026a15c868272f2f454514cab5df5",
    "global/ProxyAdmin": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "intmax/Liquidity": "0xe10117850d958010ee1114d9b670f0bcab3f2bc6b5bcd2f8ab97946c6da9415b",
    "tokens/Lido/AccountingOracle": "0x932fc7139d4e4e7175a766e7f02cd072df41c8a83dd102aae45da3c8ce3cac62",
    "tokens/Lido/Burner": "0xf6c8cf6cb60ea799f5de86286c9080914905458749bb49c535b87e53b5a0247d",
    "tokens/Lido/DepositSecurityModule": "0x99ae4ecad8b09875ad720b21d7a45c1e420639eb19bb5cb3311f71c2c9e872c8",
    "tokens/Lido/EVMScriptRegistry": "0x1aa84beab6ea9134fd6d07ba52f9382adc5aa46e9c4b38cb3ed5200978909460",
    "tokens/Lido/LegacyOracle": "0xd4c2b7792d1aa8bda3a9e6605109fdfd535626c0735212849251027e9c9678f9",
    "tokens/Lido/LidoDaoAgent": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "tokens/Lido/OracleReportSanityChecker": "0x47a07f409203f7440bed7b0a0d5dcb73848ade84630ed647b710648354fc6728",
    "tokens/Lido/StakingRouter": "0x7fdd2590302f0d63b26bc9cca1b853bc9cfff4ddb1499d4be826b88bee082ab2",
    "tokens/Lido/stETH": "0x37a7c6753d191d9570683970648eab69b28b5e19257ea6b82872f52ad9c5f0e1",
    "tokens/Lido/ValidatorsExitBusOracle": "0x11365707f780cd17f5f0f1cc48c59745a28a1f5725b533c928cdaac71c9e3938",
    "tokens/Lido/WithdrawalQueueERC721": "0xa1e1aabda76d31acb0074e52508c9fe4f357b9c4fc00e5cae52840093116c816"
  },
  "permissionsConfigHash": "0x2f9b6e73defcfbe274a019d02ffba940a10b637ea8992e6d00bd9ee51289f0b5"
}
