{
  "name": "katana",
  "chain": "ethereum",
  "timestamp": 1754486452,
  "configHash": "0xa29cce979f02451c6117d619654123a3e517735b29a6018de613fbc9eb92832c",
  "sharedModules": ["shared-polygon-cdk"],
  "entries": [
    {
      "address": "eth:0x000000000000000000000000000000000000dEaD",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x000d4411cdeb152378626B5C5E33fd5D6808939a",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x09f5F2592791208219A1F51e3855Be9419fF6bE4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x0A4857fD89ABfB7536a6D0Bd4400EF769E84Ec8b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x0D61C8b6CA9669A36F351De3AE335e9689dd9C5b",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "AggchainFEP",
      "address": "eth:0x100d3ca4f97776A40A7D93dB4AbF0FEA34230666",
      "type": "Contract",
      "template": "polygon-cdk/AggchainFEP",
      "sourceHashes": [
        "0xa25e4c87882527d75fa2198c374939dd0c3b3fd509be89ee51c9b206bc62bdc4",
        "0xe893ad152fe92e36431300818c1be2ef9c1d514a53c4ea4beba3dc0f4f9b8e4f"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main system contract defining the katana Layer 2 logic. As this contract is based on the OP-Succinct L2OutputOracle, OP stack outputRoots (L2 state roots) are saved here.",
      "ignoreInWatchMode": [
        "lastAccInputHash",
        "latestBlockNumber",
        "latestOutputIndex",
        "nextBlockNumber",
        "nextOutputIndex"
      ],
      "sinceTimestamp": 1746619859,
      "sinceBlock": 22431675,
      "values": {
        "$admin": "eth:0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
        "$implementation": "eth:0xe7FE45579D784DC83B0feD844A65f4cEEFDe5682",
        "$pastUpgrades": [
          [
            "2025-05-07T12:10:59.000Z",
            "0x94512726adae49bb62110e2e8b037723a60d921d2ad2f18626e2d83a532e9f68",
            ["eth:0x18C45DD422f6587357a6d3b23307E75D42b2bc5B"]
          ],
          [
            "2025-06-23T14:53:59.000Z",
            "0x3db4c1e8616cc300c46b7fea10aa3ef4d6e394642fce20ab2fd8ce15d16a7966",
            ["eth:0x18C45DD422f6587357a6d3b23307E75D42b2bc5B"]
          ],
          [
            "2025-06-25T13:28:59.000Z",
            "0x69b66ecfc6cd449a80b58c1fcb937f436ca4afedc3cb9586fb7f9b3f35546c79",
            ["eth:0xe7FE45579D784DC83B0feD844A65f4cEEFDe5682"]
          ]
        ],
        "$upgradeCount": 3,
        "admin": "eth:0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
        "AGGCHAIN_TYPE": "0x0001",
        "aggchainManager": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a",
        "aggLayerGateway": "eth:0x046Bb8bb98Db4ceCbB2929542686B74b516274b3",
        "aggregationVkey": "0x003991487ea72a40a1caa7c234b12c0da52fc4ccc748a07f6ebd354bbb54772e",
        "bridgeAddress": "eth:0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "CONSENSUS_TYPE": 1,
        "forceBatchAddress": "eth:0x0000000000000000000000000000000000000000",
        "forceBatchTimeout": 0,
        "gasTokenAddress": "eth:0x0000000000000000000000000000000000000000",
        "gasTokenNetwork": 0,
        "globalExitRootManager": "eth:0x580bda1e7A0CFAe92Fa7F6c20A3794F169CE3CFb",
        "L2_BLOCK_TIME": 1,
        "l2BlockTime": 1,
        "lastAccInputHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "lastForceBatch": 0,
        "lastForceBatchSequenced": 0,
        "latestBlockNumber": 7738088,
        "latestOutputIndex": 862,
        "networkName": "katana",
        "nextBlockNumber": 7738089,
        "nextOutputIndex": 863,
        "optimisticMode": false,
        "optimisticModeManager": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a",
        "pendingAdmin": "eth:0x0000000000000000000000000000000000000000",
        "pendingAggchainManager": "eth:0x0000000000000000000000000000000000000000",
        "pendingOptimisticModeManager": "eth:0x0000000000000000000000000000000000000000",
        "pendingVKeyManager": "eth:0x0000000000000000000000000000000000000000",
        "pol": "eth:0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6",
        "rangeVkeyCommitment": "0x2ebb1e0d5380158f22adf3750cc6056100a133d274fd7c5b457148ff29dfe173",
        "rollupConfigHash": "0x6cd1b72f40b6ddf464897d8d1b084241f38ae5fda17175ff45afb3307b2523e9",
        "rollupManager": "eth:0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
        "startingBlockNumber": 4102088,
        "startingTimestamp": 1750844899,
        "SUBMISSION_INTERVAL": 1,
        "submissionInterval": 1,
        "trustedSequencer": "eth:0xC1E65a0cEbF95f56Cd8729f7e37CB33eD94d6439",
        "trustedSequencerURL": "https://rpc.katanarpc.com",
        "useDefaultGateway": true,
        "version": "v2.0.0",
        "vKeyManager": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a"
      },
      "fieldMeta": {
        "CONSENSUS_TYPE": {
          "description": "0 - ECDSA sig verification, 1 - aggchainVkey verification (read by the pessimistic program)"
        },
        "optimisticMode": {
          "severity": "HIGH",
          "description": "degrades the system into a permissioned finalization mode without validity proofs. the state root in the aggchain proof in optimistic mode does not need an op succinct validity proof, but only a signature of the trustedSequencer."
        },
        "aggregationVkey": {
          "severity": "HIGH",
          "description": "Verification key for the aggregation step which aggregates multiple range proofs into a single proof. The aggregation proof ensures that all range proofs in a given block range are linked and use the `rangeVkeyCommitment` as the verification key. This proof is in turn wrapped by the aggchainVkey."
        },
        "rangeVkeyCommitment": {
          "severity": "HIGH",
          "description": "Verification key for the OP Stack derivation + STF proof for a range of blocks. This proof is the bottom level proof, wrapped by the aggregationVkey."
        }
      },
      "implementationNames": {
        "eth:0x100d3ca4f97776A40A7D93dB4AbF0FEA34230666": "PolygonTransparentProxy",
        "eth:0xe7FE45579D784DC83B0feD844A65f4cEEFDe5682": "AggchainFEP"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0x14Be6579A41342ca6B402ec85E7be538e6Ade951",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x8fd8f837bb320bd2a7463c103bea2ff207b0969b5795f320a6c868858aa92074"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x2DC70fb75b88d2eB4715bc06E1595E6D97c34DFF",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$immutable": true,
        "owner": "eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "implementationNames": {
        "eth:0x14Be6579A41342ca6B402ec85E7be538e6Ade951": "ProxyAdmin"
      }
    },
    {
      "name": "L1ERC721Bridge",
      "address": "eth:0x15a32FCeA89617Ff450F094cDE102CCa46598B7F",
      "type": "Contract",
      "template": "opstack/L1ERC721Bridge",
      "sourceHashes": [
        "0x7913a1d7d0c47796c94eb6f8fd87a89ae9f2716eda57c9be4fd2b27c70bed617",
        "0x28669b49da3effd51f0f9424ca9cdd455c5b9327c09a40c65fc06f114a6eb837"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Used to bridge ERC-721 tokens from host chain to this chain.",
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$admin": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
        "$implementation": "eth:0x7aE1d3BD877a4C5CA257404ce26BE93A02C98013",
        "$pastUpgrades": [
          [
            "2025-05-08T22:20:11.000Z",
            "0x8889fe6d2dfe60b7a36d37f1f1177c604c413baef6bb6aa5ef9a517dce5bddb8",
            ["eth:0xAE2AF01232a6c4a4d3012C5eC5b1b35059caF10d"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x276d3730f219f7ec22274f7263180b8452B46d47"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x7aE1d3BD877a4C5CA257404ce26BE93A02C98013"]
          ]
        ],
        "$upgradeCount": 3,
        "messenger": "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E",
        "MESSENGER": "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E",
        "OTHER_BRIDGE": "eth:0x4200000000000000000000000000000000000014",
        "otherBridge": "eth:0x4200000000000000000000000000000000000014",
        "paused": false,
        "superchainConfig": "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811",
        "version": "2.4.0"
      },
      "implementationNames": {
        "eth:0x15a32FCeA89617Ff450F094cDE102CCa46598B7F": "Proxy",
        "eth:0x7aE1d3BD877a4C5CA257404ce26BE93A02C98013": "L1ERC721Bridge"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "name": "Yearn Strategist Multisig",
      "address": "eth:0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xd5a33441170541b7df25812e0e3dff6562b2f09ab835a6b431cb9e7198a47605",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1608699144,
      "sinceBlock": 11507716,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0xB13C8f58a233607569D2F8411B912148aeC4aEe2",
          "eth:0xBD5f1429Ab467E69BEeba51E547C00A21F2a2092",
          "eth:0x787aba336583f4A1D4f8cBBFDFFD49f3a38De665",
          "eth:0x2C2dc95F8C8060a7e3B354c1B9540881AEa1613C",
          "eth:0xd0002c648CCa8DeE2f2b8D70D542Ccde8ad6EC03",
          "eth:0x1b5f15DCb82d25f91c65b53CEe151E8b9fBdD271",
          "eth:0x254f44F45ac892730e511f143DEd3Cd920b075aF"
        ],
        "$threshold": 3,
        "domainSeparator": "0xbb16ecb0b279d38c2ca14b411c7106024a7c501d970c4bceb13756c75313c405",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 7 (43%)",
        "nonce": 2939,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7": "Proxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x96d2f0fa1bd83ebd61ba6a2351c64c7fda7aa580b11ea67bb6bf4338e5c28512"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0xEaB94275eD336D80d4F46EA8Ea0427e351f11D65",
          "description": "set and change address mappings.",
          "role": ".owner"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x15a32FCeA89617Ff450F094cDE102CCa46598B7F",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x1AaA08d577cbC3da3b955DC1B7a281D7b8fE3372",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x74034597d29613CC8C0BDc8780e1d292A553Bd32",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0x98906C3f90A06B5484DD67bf32938815d2993dBC",
          "description": "upgrading the bridge implementation can give access to all funds escrowed therein.",
          "role": ".$admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xA84C37cD0b9bA1B43276C11976DBE9d1344C7f4E",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xb6e1f8B589A14B79DDD3aD7F0589AB548c70C174",
          "role": "admin"
        },
        {
          "permission": "upgrade",
          "from": "eth:0xe06278351d120288eDfCB963F934113Ca3C21AFe",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$immutable": true,
        "addressManager": "eth:0xEaB94275eD336D80d4F46EA8Ea0427e351f11D65",
        "isUpgrading": false,
        "owner": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a"
      },
      "implementationNames": {
        "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832": "ProxyAdmin"
      }
    },
    {
      "name": "AnchorStateRegistry",
      "address": "eth:0x1AaA08d577cbC3da3b955DC1B7a281D7b8fE3372",
      "type": "Contract",
      "template": "opstack/AnchorStateRegistry",
      "sourceHashes": [
        "0x7913a1d7d0c47796c94eb6f8fd87a89ae9f2716eda57c9be4fd2b27c70bed617",
        "0x5d50c259a38eef46641553e8ec1910a443c1b25062ea558d0b3e0bc7218adae1"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contains the latest confirmed state root that can be used as a starting point in a dispute game.",
      "ignoreInWatchMode": ["anchorGame", "getAnchorRoot"],
      "sinceTimestamp": 1753290299,
      "sinceBlock": 22983239,
      "values": {
        "$admin": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
        "$implementation": "eth:0x7b465370BB7A333f99edd19599EB7Fb1c2D3F8D2",
        "$pastUpgrades": [
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x7b465370BB7A333f99edd19599EB7Fb1c2D3F8D2"]
          ]
        ],
        "$upgradeCount": 1,
        "anchorGame": "eth:0x0000000000000000000000000000000000000000",
        "disputeGameFactory": "eth:0xe06278351d120288eDfCB963F934113Ca3C21AFe",
        "getAnchorRoot": [
          "0xdead000000000000000000000000000000000000000000000000000000000000",
          0
        ],
        "portal": "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E",
        "respectedGameType": 1,
        "superchainConfig": "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811",
        "version": "2.2.2"
      },
      "implementationNames": {
        "eth:0x1AaA08d577cbC3da3b955DC1B7a281D7b8fE3372": "Proxy",
        "eth:0x7b465370BB7A333f99edd19599EB7Fb1c2D3F8D2": "AnchorStateRegistry"
      }
    },
    {
      "address": "eth:0x1b5f15DCb82d25f91c65b53CEe151E8b9fBdD271",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x1DD6473a6bb5fF9041D945C7d15AC8fBc2Ee1164",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "PreimageOracle",
      "address": "eth:0x1fb8cdFc6831fc866Ed9C51aF8817Da5c287aDD3",
      "type": "Contract",
      "template": "opstack/PreimageOracle",
      "sourceHashes": [
        "0xd9838f1f137bd5397f583f33c414ec9c0fc3dc69401213fae0f09c36d4ac8e47"
      ],
      "proxyType": "immutable",
      "description": "The PreimageOracle contract is used to load the required data from L1 for a dispute game.",
      "sinceTimestamp": 1740762647,
      "sinceBlock": 21946249,
      "values": {
        "$immutable": true,
        "challengePeriod": 86400,
        "KECCAK_TREE_DEPTH": 16,
        "MAX_LEAF_COUNT": 65535,
        "MIN_BOND_SIZE": "250000000000000000",
        "minProposalSize": 126000,
        "PRECOMPILE_CALL_RESERVED_GAS": 100000,
        "proposalCount": 0,
        "proposals": [],
        "version": "1.1.4"
      },
      "implementationNames": {
        "eth:0x1fb8cdFc6831fc866Ed9C51aF8817Da5c287aDD3": "PreimageOracle"
      }
    },
    {
      "address": "eth:0x1FFDA89C755f6D4Af069897D77CcAbb580Fd412a",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "sequence",
          "from": "eth:0xb6e1f8B589A14B79DDD3aD7F0589AB548c70C174",
          "role": ".batcherHash"
        }
      ]
    },
    {
      "name": "L1CrossDomainMessenger",
      "address": "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E",
      "type": "Contract",
      "template": "opstack/L1CrossDomainMessenger",
      "sourceHashes": [
        "0x20a2eb4d3677fc8a15e944f7b1843acd01b2e92acdc4c7a7f7a35b07b891149b",
        "0x03bcdc719cb7bd0a1377c01bb50b30a6122b308f673b7d7b15a3bb8628e6bd8c"
      ],
      "proxyType": "resolved delegate proxy",
      "description": "Sends messages from host chain to this chain, and relays messages back onto host chain. In the event that a message sent from host chain to this chain is rejected for exceeding this chain's epoch gas limit, it can be resubmitted via this contract's replay function.",
      "ignoreInWatchMode": ["messageNonce"],
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$admin": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
        "$immutable": false,
        "$implementation": "eth:0x5D5a095665886119693F0B41d8DFeE78da033e8B",
        "$pastUpgrades": [
          [
            "2025-05-08T22:20:11.000Z",
            "0x8889fe6d2dfe60b7a36d37f1f1177c604c413baef6bb6aa5ef9a517dce5bddb8",
            ["eth:0xD3494713A5cfaD3F5359379DfA074E2Ac8C6Fd65"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x3eA6084748ED1b2A9B5D4426181F1ad8C93F6231"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x5D5a095665886119693F0B41d8DFeE78da033e8B"]
          ]
        ],
        "$upgradeCount": 3,
        "ENCODING_OVERHEAD": 260,
        "FLOOR_CALLDATA_OVERHEAD": 40,
        "MESSAGE_VERSION": 1,
        "messageNonce": "1766847064778384329583297500742918515827483896875618958121606201292619776",
        "MIN_GAS_CALLDATA_OVERHEAD": 16,
        "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR": 63,
        "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR": 64,
        "OTHER_MESSENGER": "eth:0x4200000000000000000000000000000000000007",
        "otherMessenger": "eth:0x4200000000000000000000000000000000000007",
        "paused": false,
        "portal": "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E",
        "PORTAL": "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E",
        "RELAY_CALL_OVERHEAD": 40000,
        "RELAY_CONSTANT_OVERHEAD": 200000,
        "RELAY_GAS_CHECK_BUFFER": 5000,
        "RELAY_RESERVED_GAS": 40000,
        "ResolvedDelegateProxy_addressManager": "eth:0xEaB94275eD336D80d4F46EA8Ea0427e351f11D65",
        "ResolvedDelegateProxy_implementationName": "OVM_L1CrossDomainMessenger",
        "superchainConfig": "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811",
        "TX_BASE_GAS": 21000,
        "version": "2.6.0"
      },
      "implementationNames": {
        "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E": "ResolvedDelegateProxy",
        "eth:0x5D5a095665886119693F0B41d8DFeE78da033e8B": "L1CrossDomainMessenger"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "address": "eth:0x227D9Ea843910Edd305c42e7bB9Ce6D9f369238c",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x2483A0d6a3Bd89D5C17aA80B3f8f6102ac053361",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OptimismPortal2",
      "address": "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E",
      "type": "Contract",
      "template": "opstack/OptimismPortal2_noForce",
      "sourceHashes": [
        "0x7913a1d7d0c47796c94eb6f8fd87a89ae9f2716eda57c9be4fd2b27c70bed617",
        "0x9cf3cb8a68c82a3a8328495d5f019daa51e9098a69b69ee8e349e3058b789338"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The OptimismPortal contract usually is the main entry point to deposit funds from L1 to L2 or for finalizing withdrawals. It specifies which game type can be used for withdrawals, which currently is the PermissionedDisputeGame. This specific fork of the standard contract **disables the depositTransaction() function**, which prevents users from sending or forcing any transactions from L1 to L2, including token deposits. It is instead used for configuration and administration of the system.",
      "ignoreInWatchMode": ["params", "balance"],
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$admin": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
        "$implementation": "eth:0x51c852eC17062FB229A117Cb8abCBc7Eb171D5Bc",
        "$pastUpgrades": [
          [
            "2025-05-08T22:20:11.000Z",
            "0x8889fe6d2dfe60b7a36d37f1f1177c604c413baef6bb6aa5ef9a517dce5bddb8",
            ["eth:0xe2F826324b2faf99E513D16D266c3F80aE87832B"]
          ],
          [
            "2025-05-08T23:31:35.000Z",
            "0xe49eea7d70073f7015c5d877a31b1375ba3422bebfdbcc23aa31111c01392c12",
            ["eth:0x9a6C2Dcc7e523f87716e17Ba36D10CCfFA0A60bb"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x2D7e764a0D9919e16983a46595CfA81fc34fa7Cd"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0xB443Da3e07052204A02d630a8933dAc05a0d6fB4"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x51c852eC17062FB229A117Cb8abCBc7Eb171D5Bc"]
          ]
        ],
        "$upgradeCount": 5,
        "disputeGameFactory": "eth:0xe06278351d120288eDfCB963F934113Ca3C21AFe",
        "disputeGameFinalityDelaySeconds": 302400,
        "guardian": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a",
        "l2Sender": "eth:0x000000000000000000000000000000000000dEaD",
        "params": {
          "prevBaseFee": 1000000000,
          "prevBoughtGas": 0,
          "prevBlockNum": 22441727
        },
        "paused": false,
        "proofMaturityDelaySeconds": 604800,
        "RespectedGameString": "PermissionedDisputeGame",
        "respectedGameType": 1,
        "respectedGameTypeUpdatedAt": 1746742811,
        "superchainConfig": "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811",
        "systemConfig": "eth:0xb6e1f8B589A14B79DDD3aD7F0589AB548c70C174",
        "version": "3.14.0"
      },
      "fieldMeta": {
        "paused": {
          "severity": "HIGH",
          "description": "Whether the contract is paused or not. Determined by the SuperchainConfig contract PAUSED_SLOT. Here it pauses withdrawals. If this is paused, also the L1CrossDomainMessenger and ERC-20, ERC-721 deposits are paused."
        }
      },
      "implementationNames": {
        "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E": "Proxy",
        "eth:0x51c852eC17062FB229A117Cb8abCBc7Eb171D5Bc": "OptimismPortal2"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": { "0": "FaultDisputeGame", "1": "PermissionedDisputeGame" }
        }
      ],
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "address": "eth:0x254f44F45ac892730e511f143DEd3Cd920b075aF",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0x263b251D67BB154DD6b8352539466ACE7948ED56",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x8fd8f837bb320bd2a7463c103bea2ff207b0969b5795f320a6c868858aa92074"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$immutable": true,
        "owner": "eth:0x9d851f8b8751c5FbC09b9E74E6e68E9950949052",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "implementationNames": {
        "eth:0x263b251D67BB154DD6b8352539466ACE7948ED56": "ProxyAdmin"
      }
    },
    {
      "name": "vbWBTC",
      "address": "eth:0x2C24B57e2CCd1f273045Af6A5f632504C432374F",
      "type": "Contract",
      "template": "polygon-cdk/GenericVaultBridgeToken",
      "sourceHashes": [
        "0x525b22d02f8b39d3432dfaf0061e3d91caa10d282e86ec7abeb4ca11790f6762",
        "0xbae5ca8308e7ebc2f3f89d306b5fa59219afbb56103cc06937985534329887e5"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This token contract uses a standard 'vault bridge token' implementation created by Agglayer CDK. It keeps deposited assets in a vault and issues an IOU token (Vault Bridge WBTC) which can be deposited to Agglayer. The underlying asset is generating yield, which does not accrue to the vbWBTC-IOU but is sent to eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756.",
      "ignoreInWatchMode": [
        "backingDifference",
        "stakedAssets",
        "totalAssets",
        "totalSupply",
        "yield"
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$admin": "eth:0x420693B32113a0e00Eb9f3315D5D5ec3b32C2d69",
        "$implementation": "eth:0xcC865B0324121b43728176024f58bdbB3afd6f29",
        "$pastUpgrades": [
          [
            "2025-05-22T10:30:35.000Z",
            "0xda746ba183a805e81c8fc2bbaf726ca806f3a877b123a32c4a8fb233a3401cf1",
            ["eth:0xcC865B0324121b43728176024f58bdbB3afd6f29"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec"]
          },
          "REBALANCER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec"]
          },
          "YIELD_COLLECTOR_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec",
              "eth:0xcB1e45481461aeF38E6B0a34F1444E9C5D647645"
            ]
          },
          "PAUSER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec"]
          }
        },
        "asset": "eth:0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
        "backingDifference": { "positive": true, "difference": 2590 },
        "decimals": 8,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DOMAIN_SEPARATOR": "0x7317613d3079fd0c32c0dda038dce0e4bd277cdaa8af2d5aece3fd671e98171d",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Vault Bridge WBTC",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "eth:0x2C24B57e2CCd1f273045Af6A5f632504C432374F",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "lxlyBridge": "eth:0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "lxlyId": 0,
        "migrationFeesFund": 0,
        "migrationManager": "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02",
        "minimumReservePercentage": 0,
        "minimumYieldVaultDeposit": 0,
        "name": "Vault Bridge WBTC",
        "paused": false,
        "PAUSER_ROLE": "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
        "REBALANCER_ROLE": "0xccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f46",
        "reservedAssets": 0,
        "reservePercentage": 0,
        "stakedAssets": 33124489038,
        "symbol": "vbWBTC",
        "totalAssets": 33124489038,
        "totalSupply": 33124486448,
        "underlyingToken": "eth:0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
        "version": "0.5.0",
        "yield": 2590,
        "YIELD_COLLECTOR_ROLE": "0x4a43bb67995c7ae052564b1795e7bc07c4a74f92efdf2192466c19356570d627",
        "yieldRecipient": "eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756",
        "yieldVault": "eth:0x812B2C6Ab3f4471c0E43D4BB61098a9211017427",
        "yieldVaultMaximumSlippagePercentage": "10000000000000000"
      },
      "implementationNames": {
        "eth:0x2C24B57e2CCd1f273045Af6A5f632504C432374F": "TransparentUpgradeableProxy",
        "eth:0xcC865B0324121b43728176024f58bdbB3afd6f29": "GenericVaultBridgeToken"
      },
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "address": "eth:0x2C2dc95F8C8060a7e3B354c1B9540881AEa1613C",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "vbETH",
      "address": "eth:0x2DC70fb75b88d2eB4715bc06E1595E6D97c34DFF",
      "type": "Contract",
      "template": "polygon-cdk/GenericVaultBridgeToken",
      "sourceHashes": [
        "0x525b22d02f8b39d3432dfaf0061e3d91caa10d282e86ec7abeb4ca11790f6762",
        "0x4988be5ea9a1e587b7ad36189901d0e442b1905a12fcfb0f0896de5d089234cd"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This token contract uses a standard 'vault bridge token' implementation created by Agglayer CDK. It keeps deposited assets in a vault and issues an IOU token (Vault Bridge ETH) which can be deposited to Agglayer. The underlying asset is generating yield, which does not accrue to the vbETH-IOU but is sent to eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756.",
      "ignoreInWatchMode": [
        "backingDifference",
        "stakedAssets",
        "totalAssets",
        "totalSupply",
        "yield"
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$admin": "eth:0x14Be6579A41342ca6B402ec85E7be538e6Ade951",
        "$implementation": "eth:0x81c16F89222C32806Daf01f5129937dFE19D525e",
        "$pastUpgrades": [
          [
            "2025-05-22T10:30:35.000Z",
            "0x5771d96984dfa1aa2ac1437a9a760fcdd8698a51646c357d228ca93a0c2bef49",
            ["eth:0x81c16F89222C32806Daf01f5129937dFE19D525e"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec"]
          },
          "REBALANCER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec"]
          },
          "YIELD_COLLECTOR_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec",
              "eth:0xcB1e45481461aeF38E6B0a34F1444E9C5D647645"
            ]
          },
          "PAUSER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec"]
          }
        },
        "asset": "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "backingDifference": {
          "positive": true,
          "difference": "395775839316782355"
        },
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DOMAIN_SEPARATOR": "0x77c9bdc0ad8d7c8ea91dc91d2e2c21c7e58113df311138139cacca9ca1d9e2d6",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Vault Bridge ETH",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "eth:0x2DC70fb75b88d2eB4715bc06E1595E6D97c34DFF",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "lxlyBridge": "eth:0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "lxlyId": 0,
        "migrationFeesFund": 0,
        "migrationManager": "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02",
        "minimumReservePercentage": 0,
        "minimumYieldVaultDeposit": 0,
        "name": "Vault Bridge ETH",
        "paused": false,
        "PAUSER_ROLE": "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
        "REBALANCER_ROLE": "0xccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f46",
        "reservedAssets": 0,
        "reservePercentage": 0,
        "stakedAssets": "12941050844038343151305",
        "symbol": "vbETH",
        "totalAssets": "12941050844038343151305",
        "totalSupply": "12940655068199026368950",
        "underlyingToken": "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "version": "0.5.0",
        "yield": "395775839316782355",
        "YIELD_COLLECTOR_ROLE": "0x4a43bb67995c7ae052564b1795e7bc07c4a74f92efdf2192466c19356570d627",
        "yieldRecipient": "eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756",
        "yieldVault": "eth:0x31A5684983EeE865d943A696AAC155363bA024f9",
        "yieldVaultMaximumSlippagePercentage": "10000000000000000"
      },
      "implementationNames": {
        "eth:0x2DC70fb75b88d2eB4715bc06E1595E6D97c34DFF": "TransparentUpgradeableProxy",
        "eth:0x81c16F89222C32806Daf01f5129937dFE19D525e": "VbETH"
      },
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "name": "Katana vaultBridge Multisig 1",
      "address": "eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x2C24B57e2CCd1f273045Af6A5f632504C432374F",
          "role": "admin",
          "via": [
            { "address": "eth:0x420693B32113a0e00Eb9f3315D5D5ec3b32C2d69" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x2DC70fb75b88d2eB4715bc06E1595E6D97c34DFF",
          "role": "admin",
          "via": [
            { "address": "eth:0x14Be6579A41342ca6B402ec85E7be538e6Ade951" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x6d4f9f9f8f0155509ecd6Ac6c544fF27999845CC",
          "role": "admin",
          "via": [
            { "address": "eth:0x377a9e5df2882DC1DF8A0bD162cbc640eA634010" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x14Be6579A41342ca6B402ec85E7be538e6Ade951",
          "role": ".owner"
        },
        {
          "permission": "act",
          "from": "eth:0x377a9e5df2882DC1DF8A0bD162cbc640eA634010",
          "role": ".owner"
        },
        {
          "permission": "act",
          "from": "eth:0x420693B32113a0e00Eb9f3315D5D5ec3b32C2d69",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747898927,
      "sinceBlock": 22536924,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x4082A1D91A353b16e112FbE36b55d222bF417919",
          "eth:0x9d851f8b8751c5FbC09b9E74E6e68E9950949052",
          "eth:0xd0673F989bc3BA9314d0AAF28BfC84e99B7898CC"
        ],
        "$threshold": 2,
        "domainSeparator": "0x8100a7fceea463840453b5b073dbbc1a296151cad372fd1aa2c69ee03f4615f6",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 3 (67%)",
        "nonce": 5,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "name": "SuperchainConfig",
      "address": "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811",
      "type": "Contract",
      "template": "opstack/SuperchainConfigNoGuard",
      "sourceHashes": [
        "0x7913a1d7d0c47796c94eb6f8fd87a89ae9f2716eda57c9be4fd2b27c70bed617",
        "0x03dba37173051b02bc81487e181c791bcf1aef664c249e5d035f11f488bdd686"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This is NOT the shared SuperchainConfig contract of the OP stack Superchain but rather a local fork. It manages the `PAUSED_SLOT`, a boolean value indicating whether the local chain is paused, and `GUARDIAN_SLOT`, the address of the guardian which can pause and unpause the system.",
      "sinceTimestamp": 1746740171,
      "sinceBlock": 22441511,
      "values": {
        "$admin": "eth:0x6d0ff67fb427422AfF35EEa8596949B374b09a52",
        "$implementation": "eth:0x4da82a327773965b8d4D85Fa3dB8249b387458E7",
        "$pastUpgrades": [
          [
            "2025-05-08T21:36:11.000Z",
            "0x6b05edf50882b041037241876943a7ce9a9665502d49c8a0aceb351f8d47a2b8",
            ["eth:0x838897A86Cb4F130D0eFC1203d7dA6D0db4bEd1A"]
          ],
          [
            "2025-06-30T10:33:47.000Z",
            "0x56f6765801bec01f9aa2a5c9750daada809b1f7a3f5343800c0b76c6308b4558",
            ["eth:0xd81f43eDBCAcb4c29a9bA38a13Ee5d79278270cC"]
          ],
          [
            "2025-06-30T10:33:47.000Z",
            "0x56f6765801bec01f9aa2a5c9750daada809b1f7a3f5343800c0b76c6308b4558",
            ["eth:0x838897A86Cb4F130D0eFC1203d7dA6D0db4bEd1A"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x4da82a327773965b8d4D85Fa3dB8249b387458E7"]
          ]
        ],
        "$upgradeCount": 4,
        "guardian": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a",
        "GUARDIAN_SLOT": "0xd30e835d3f35624761057ff5b27d558f97bd5be034621e62240e5c0b784abe68",
        "paused": false,
        "PAUSED_SLOT": "0x54176ff9944c4784e5857ec4e5ef560a462c483bf534eda43f91bb01a470b1b6",
        "version": "1.2.0"
      },
      "implementationNames": {
        "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811": "Proxy",
        "eth:0x4da82a327773965b8d4D85Fa3dB8249b387458E7": "SuperchainConfig"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "address": "eth:0x34d23C4fb6542B467cA8724bAD30AC811399b184",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0x377a9e5df2882DC1DF8A0bD162cbc640eA634010",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x8fd8f837bb320bd2a7463c103bea2ff207b0969b5795f320a6c868858aa92074"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x6d4f9f9f8f0155509ecd6Ac6c544fF27999845CC",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$immutable": true,
        "owner": "eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "implementationNames": {
        "eth:0x377a9e5df2882DC1DF8A0bD162cbc640eA634010": "ProxyAdmin"
      }
    },
    {
      "address": "eth:0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x387Cde8598E1CBb297FDc5bAEbA5E5c5c2735344",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "vbUSDS",
      "address": "eth:0x3DD459dE96F9C28e3a343b831cbDC2B93c8C4855",
      "type": "Contract",
      "template": "polygon-cdk/GenericVaultBridgeToken",
      "sourceHashes": [
        "0x525b22d02f8b39d3432dfaf0061e3d91caa10d282e86ec7abeb4ca11790f6762",
        "0xbae5ca8308e7ebc2f3f89d306b5fa59219afbb56103cc06937985534329887e5"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This token contract uses a standard 'vault bridge token' implementation created by Agglayer CDK. It keeps deposited assets in a vault and issues an IOU token (Vault Bridge USDS) which can be deposited to Agglayer. The underlying asset is generating yield, which does not accrue to the vbUSDS-IOU but is sent to eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756.",
      "ignoreInWatchMode": [
        "backingDifference",
        "stakedAssets",
        "totalAssets",
        "totalSupply",
        "yield"
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$admin": "eth:0xD1e389c046FB734D2a0c7C390312210c408ba832",
        "$implementation": "eth:0xcC865B0324121b43728176024f58bdbB3afd6f29",
        "$pastUpgrades": [
          [
            "2025-05-22T10:30:35.000Z",
            "0x219783dd1d89579d2930234430e92b72a7e4e314bb10955de8a2e3eb25290acc",
            ["eth:0xcC865B0324121b43728176024f58bdbB3afd6f29"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xA8C31B2edd84c654d06d626383f4154D1E40C5Ff"]
          },
          "REBALANCER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xA8C31B2edd84c654d06d626383f4154D1E40C5Ff"]
          },
          "YIELD_COLLECTOR_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0xA8C31B2edd84c654d06d626383f4154D1E40C5Ff",
              "eth:0xcB1e45481461aeF38E6B0a34F1444E9C5D647645"
            ]
          },
          "PAUSER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xA8C31B2edd84c654d06d626383f4154D1E40C5Ff"]
          }
        },
        "asset": "eth:0xdC035D45d973E3EC169d2276DDab16f1e407384F",
        "backingDifference": {
          "positive": true,
          "difference": 8494288091399591
        },
        "decimals": 18,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DOMAIN_SEPARATOR": "0x727225c0812888bc018b5b139aafd565a4eadb5a9a12d3995323de0bec14ccf4",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Vault Bridge USDS",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "eth:0x3DD459dE96F9C28e3a343b831cbDC2B93c8C4855",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "lxlyBridge": "eth:0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "lxlyId": 0,
        "migrationFeesFund": 0,
        "migrationManager": "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02",
        "minimumReservePercentage": 0,
        "minimumYieldVaultDeposit": 0,
        "name": "Vault Bridge USDS",
        "paused": false,
        "PAUSER_ROLE": "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
        "REBALANCER_ROLE": "0xccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f46",
        "reservedAssets": 0,
        "reservePercentage": 0,
        "stakedAssets": "68159770727763530450",
        "symbol": "vbUSDS",
        "totalAssets": "68159770727763530450",
        "totalSupply": "68151276439672130859",
        "underlyingToken": "eth:0xdC035D45d973E3EC169d2276DDab16f1e407384F",
        "version": "0.5.0",
        "yield": 8494288091399591,
        "YIELD_COLLECTOR_ROLE": "0x4a43bb67995c7ae052564b1795e7bc07c4a74f92efdf2192466c19356570d627",
        "yieldRecipient": "eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756",
        "yieldVault": "eth:0x0868076663Bbc6638ceDd27704cc8F0Fa53d5b81",
        "yieldVaultMaximumSlippagePercentage": "10000000000000000"
      },
      "implementationNames": {
        "eth:0x3DD459dE96F9C28e3a343b831cbDC2B93c8C4855": "TransparentUpgradeableProxy",
        "eth:0xcC865B0324121b43728176024f58bdbB3afd6f29": "GenericVaultBridgeToken"
      },
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "address": "eth:0x4082A1D91A353b16e112FbE36b55d222bF417919",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "MigrationManager",
      "address": "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02",
      "type": "Contract",
      "template": "polygon-cdk/MigrationManager",
      "sourceHashes": [
        "0x525b22d02f8b39d3432dfaf0061e3d91caa10d282e86ec7abeb4ca11790f6762",
        "0x9b0e45306537c9239f8f5b642a4beaafd206728e42a557b88f1eeccee5647066"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Helper contract for the vaultBridge tokens on Layer 2. If any vbTokens are minted 'natively' on Layer 2, this contract can receive the underlying assets and lock them in the Layer 1 vaults.",
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$admin": "eth:0x263b251D67BB154DD6b8352539466ACE7948ED56",
        "$implementation": "eth:0xC6dD6399eAE419A0a33A8dc307f4c1dB26D30e45",
        "$pastUpgrades": [
          [
            "2025-05-22T10:30:35.000Z",
            "0xe7bb72352b7a946e63626c8facddd751a5c413b1f8e617bc03972e29c79f7066",
            ["eth:0xC6dD6399eAE419A0a33A8dc307f4c1dB26D30e45"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x9d851f8b8751c5FbC09b9E74E6e68E9950949052"]
          },
          "PAUSER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x9d851f8b8751c5FbC09b9E74E6e68E9950949052"]
          }
        },
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "lxlyBridge": "eth:0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "paused": false,
        "PAUSER_ROLE": "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
        "version": "0.5.0"
      },
      "implementationNames": {
        "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02": "TransparentUpgradeableProxy",
        "eth:0xC6dD6399eAE419A0a33A8dc307f4c1dB26D30e45": "MigrationManager"
      },
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0x420693B32113a0e00Eb9f3315D5D5ec3b32C2d69",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x8fd8f837bb320bd2a7463c103bea2ff207b0969b5795f320a6c868858aa92074"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x2C24B57e2CCd1f273045Af6A5f632504C432374F",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$immutable": true,
        "owner": "eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "implementationNames": {
        "eth:0x420693B32113a0e00Eb9f3315D5D5ec3b32C2d69": "ProxyAdmin"
      }
    },
    {
      "address": "eth:0x450A3A6AE85904cb4Aa0809Fb41E53B687a28397",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Conduit Multisig 1",
      "address": "eth:0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1680797639,
      "sinceBlock": 16990669,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0x81175155D85377C337d92f1FA52Da166C3A4E7Ac",
          "eth:0x860e06Fe384D1A3340111e7D142E02642178c053",
          "eth:0x50930d652266EF4127FA3A1906B7Cb9951076628",
          "eth:0xA0737fea60F0601A192E3d2c98865A883ab0bda2",
          "eth:0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
          "eth:0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
          "eth:0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
          "eth:0x3840f487A17A41100DD1Bf0946c34f132a57Fd5f",
          "eth:0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
          "eth:0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
          "eth:0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe"
        ],
        "$threshold": 4,
        "domainSeparator": "0x0f634ad56005ddbd68dc52233931a858f740b8ab706671c42b055efef561257e",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "4 of 11 (36%)",
        "nonce": 143,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0x4a4962275DF8C60a80d3a25faEc5AA7De116A746": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "address": "eth:0x4A6f5889409Bf4Bf3Bff0Fef585D7A29FdA64258",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x4D8007a0E9f293e62E2b0F43C6Cf4C4B9e135BAe",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Katana Foundation Engineering/Security Multisig",
      "address": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0x59fe14e95a8aa7f52213f18bae5c9329cf583a7ba31194698b15eddb97d5e825"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x100d3ca4f97776A40A7D93dB4AbF0FEA34230666",
          "description": "change the op-succinct related verification keys (aggregationVkey, rangeVkeyCommitment) and the rollupConfigHash.",
          "role": ".aggchainManager"
        },
        {
          "permission": "interact",
          "from": "eth:0x100d3ca4f97776A40A7D93dB4AbF0FEA34230666",
          "description": "toggle the 'optimisticMode'.",
          "role": ".optimisticModeManager"
        },
        {
          "permission": "interact",
          "from": "eth:0x74034597d29613CC8C0BDc8780e1d292A553Bd32",
          "description": "can pull funds from the contract in case of emergency.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0xb6e1f8B589A14B79DDD3aD7F0589AB548c70C174",
          "description": "it can update the preconfer address, the batch submitter (Sequencer) address and the gas configuration of the system.",
          "role": ".owner"
        },
        {
          "permission": "interact",
          "from": "eth:0xEaB94275eD336D80d4F46EA8Ea0427e351f11D65",
          "description": "set and change address mappings.",
          "role": ".owner",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x15a32FCeA89617Ff450F094cDE102CCa46598B7F",
          "role": "admin",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x1AaA08d577cbC3da3b955DC1B7a281D7b8fE3372",
          "role": "admin",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E",
          "role": "admin",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E",
          "role": "admin",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811",
          "role": "admin",
          "via": [
            { "address": "eth:0x6d0ff67fb427422AfF35EEa8596949B374b09a52" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x74034597d29613CC8C0BDc8780e1d292A553Bd32",
          "role": "admin",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0x98906C3f90A06B5484DD67bf32938815d2993dBC",
          "description": "upgrading the bridge implementation can give access to all funds escrowed therein.",
          "role": ".$admin",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xA84C37cD0b9bA1B43276C11976DBE9d1344C7f4E",
          "role": "admin",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xb6e1f8B589A14B79DDD3aD7F0589AB548c70C174",
          "role": "admin",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        },
        {
          "permission": "upgrade",
          "from": "eth:0xe06278351d120288eDfCB963F934113Ca3C21AFe",
          "role": "admin",
          "via": [
            { "address": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
          "role": ".owner"
        },
        {
          "permission": "act",
          "from": "eth:0x6d0ff67fb427422AfF35EEa8596949B374b09a52",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747746383,
      "sinceBlock": 22524319,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x3E5c63644E683549055b9Be8653de26E0B4CD36E",
        "$members": [
          "eth:0x516eEcfb38aA308c5f1878497108c7d054fd46B7",
          "eth:0xEad77b01ea770839F7f576Cd1516Ff6A298d9dB2",
          "eth:0x54c401eD03D086fE13221E5422165f3b024265d9",
          "eth:0xAb3506507449bF1880f3337825efd19ac89E235E",
          "eth:0xcAB31b6A7b4d2eCd562A09e2BfA46535a18862f9"
        ],
        "$threshold": 3,
        "domainSeparator": "0xa991ea0b07a30c112b52e877338926e0572d18598309fd73ee27ec9a387eab82",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 5 (60%)",
        "nonce": 6,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a": "GnosisSafeProxy",
        "eth:0x3E5c63644E683549055b9Be8653de26E0B4CD36E": "GnosisSafeL2"
      }
    },
    {
      "address": "eth:0x50930d652266EF4127FA3A1906B7Cb9951076628",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "vbUSDC",
      "address": "eth:0x53E82ABbb12638F09d9e624578ccB666217a765e",
      "type": "Contract",
      "template": "polygon-cdk/GenericVaultBridgeToken",
      "sourceHashes": [
        "0x525b22d02f8b39d3432dfaf0061e3d91caa10d282e86ec7abeb4ca11790f6762",
        "0xbae5ca8308e7ebc2f3f89d306b5fa59219afbb56103cc06937985534329887e5"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This token contract uses a standard 'vault bridge token' implementation created by Agglayer CDK. It keeps deposited assets in a vault and issues an IOU token (Vault Bridge USDC) which can be deposited to Agglayer. The underlying asset is generating yield, which does not accrue to the vbUSDC-IOU but is sent to eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756.",
      "ignoreInWatchMode": [
        "backingDifference",
        "stakedAssets",
        "totalAssets",
        "totalSupply",
        "yield"
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$admin": "eth:0x8970650CF3f1E57cA804C65B4DBcFf698789FE30",
        "$implementation": "eth:0xcC865B0324121b43728176024f58bdbB3afd6f29",
        "$pastUpgrades": [
          [
            "2025-05-22T10:30:35.000Z",
            "0xba1f13977401e784b36c67323c10a86828a2ba7dacce1c84be247bb3964a0aeb",
            ["eth:0xcC865B0324121b43728176024f58bdbB3afd6f29"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xf4F2f5F6bAdBE05433C4604320ecC56BbECBC04E"]
          },
          "REBALANCER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xf4F2f5F6bAdBE05433C4604320ecC56BbECBC04E"]
          },
          "YIELD_COLLECTOR_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0xf4F2f5F6bAdBE05433C4604320ecC56BbECBC04E",
              "eth:0xcB1e45481461aeF38E6B0a34F1444E9C5D647645"
            ]
          },
          "PAUSER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0xf4F2f5F6bAdBE05433C4604320ecC56BbECBC04E"]
          }
        },
        "asset": "eth:0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "backingDifference": { "positive": true, "difference": 5540444341 },
        "decimals": 6,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DOMAIN_SEPARATOR": "0xf208e01223892bb2dfb35c2d306f682552de4492b4e45dff4876243fc048a8c2",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Vault Bridge USDC",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "eth:0x53E82ABbb12638F09d9e624578ccB666217a765e",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "lxlyBridge": "eth:0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "lxlyId": 0,
        "migrationFeesFund": 0,
        "migrationManager": "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02",
        "minimumReservePercentage": 0,
        "minimumYieldVaultDeposit": 0,
        "name": "Vault Bridge USDC",
        "paused": false,
        "PAUSER_ROLE": "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
        "REBALANCER_ROLE": "0xccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f46",
        "reservedAssets": 0,
        "reservePercentage": 0,
        "stakedAssets": 86484643285276,
        "symbol": "vbUSDC",
        "totalAssets": 86484643285276,
        "totalSupply": 86479102840935,
        "underlyingToken": "eth:0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "version": "0.5.0",
        "yield": 5540444341,
        "YIELD_COLLECTOR_ROLE": "0x4a43bb67995c7ae052564b1795e7bc07c4a74f92efdf2192466c19356570d627",
        "yieldRecipient": "eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756",
        "yieldVault": "eth:0xBEefb9f61CC44895d8AEc381373555a64191A9c4",
        "yieldVaultMaximumSlippagePercentage": "10000000000000000"
      },
      "implementationNames": {
        "eth:0x53E82ABbb12638F09d9e624578ccB666217a765e": "TransparentUpgradeableProxy",
        "eth:0xcC865B0324121b43728176024f58bdbB3afd6f29": "GenericVaultBridgeToken"
      },
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "address": "eth:0x54DFA4B635E7eB98515fEBA81d360A3871739277",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "PermissionedDisputeGame",
      "address": "eth:0x667b7DA73DA7B2A75286378FF45637eEaE9B4793",
      "type": "Contract",
      "template": "opstack/PermissionedDisputeGame",
      "sourceHashes": [
        "0x7129ee348039f13e017c18c90ffcb319f67a8fdd3b4a5a28c39aabc8bf0c57f6"
      ],
      "proxyType": "immutable",
      "description": "Same as FaultDisputeGame, but only two permissioned addresses are designated as proposer and challenger.",
      "sinceTimestamp": 1753290299,
      "sinceBlock": 22983239,
      "values": {
        "$immutable": true,
        "absolutePrestate": "0x038512e02c4c3f7bdaec27d00edf55b7155e0905301e1a88083e4e0a6764d54c",
        "absolutePrestateDecoded": "v1.3.1 (govApproved)",
        "anchorStateRegistry": "eth:0x1AaA08d577cbC3da3b955DC1B7a281D7b8fE3372",
        "bondDistributionMode": 0,
        "challenger": "eth:0x4a4962275DF8C60a80d3a25faEc5AA7De116A746",
        "claimData": [],
        "claimDataLen": 0,
        "clockExtension": 10800,
        "createdAt": 0,
        "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "gameCreator": "eth:0x0000000000000000000000000000000000000000",
        "gameData": {
          "gameType_": 1,
          "rootClaim_": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extraData_": "0x0000000000000000000000000000000000000000000000000000000000000000"
        },
        "gameType": 1,
        "getChallengerDuration": [],
        "l1Head": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "l2BlockNumber": 0,
        "l2BlockNumberChallenged": false,
        "l2BlockNumberChallenger": "eth:0x0000000000000000000000000000000000000000",
        "l2ChainId": 747474,
        "maxClockDuration": 302400,
        "maxGameDepth": 73,
        "proposer": "eth:0x4A6f5889409Bf4Bf3Bff0Fef585D7A29FdA64258",
        "resolvedAt": 0,
        "rootClaim": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "splitDepth": 30,
        "startingBlockNumber": 0,
        "startingOutputRoot": {
          "root": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "l2BlockNumber": 0
        },
        "startingRootHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "status": 0,
        "version": "1.4.1",
        "vm": "eth:0xF027F4A985560fb13324e943edf55ad6F1d15Dc1",
        "wasRespectedGameTypeWhenCreated": false,
        "weth": "eth:0x74034597d29613CC8C0BDc8780e1d292A553Bd32"
      },
      "fieldMeta": {
        "absolutePrestateDecoded": {
          "description": "Prestate tag for known prestates."
        }
      },
      "implementationNames": {
        "eth:0x667b7DA73DA7B2A75286378FF45637eEaE9B4793": "PermissionedDisputeGame"
      },
      "usedTypes": [
        {
          "typeCaster": "Mapping",
          "arg": {
            "0x03682932cec7ce0a3874b19675a6bbc923054a7b321efc7d3835187b172494b6": "v1.6.0 (cannon64)",
            "0x03ee2917da962ec266b091f4b62121dc9682bb0db534633707325339f99ee405": "v1.5.1-rc.1 (cannon64)",
            "0x0354eee87a1775d96afee8977ef6d5d6bd3612b256170952a01bf1051610ee01": "v1.5.1-rc.1",
            "0x039970872142f48b189d18dcbc03a3737338d098b0101713dc2d6710f9deb5ef": "v1.5.0 (cannon64)",
            "0x039facea52b20c605c05efb0a33560a92de7074218998f75bcdf61e8989cb5d9": "v1.5.0",
            "0x0386cde2f2b1bde1189ac9c9b7d66774e6260eca778223def326bfe680c14ab9": "v1.4.1-rc.2 (cannon64)",
            "0x03045fd433fb5391c40751939d7cb5e9dfe83cf156f9395566a311e7fe9d3aa2": "v1.4.1-rc.2",
            "0x03b7eaa4e3cbce90381921a4b48008f4769871d64f93d113fcadca08ecee503b": "v1.4.0 (cannon64)",
            "0x03f89406817db1ed7fd8b31e13300444652cdb0b9c509a674de43483b2f83568": "v1.4.0 (govApproved)",
            "0x0336751a224445089ba5456c8028376a0faf2bafa81d35f43fab8730258cdf37": "v1.4.0-unichain",
            "0x0348ce2059f718af75729c2c56860551b46b665956a641b3cb2cd51e50b7b725": "v1.4.0-rc.2 (cannon64)",
            "0x0364e4e72922e7d649338f558f8a14b50ca31922a1484e73ea03987fb1516095": "v1.4.0-rc.2",
            "0x032e5d6119ee983cb87deae3eef16ea6086f2347433c99f1820d60f36a24a6e6": "v1.4.0-rc.1 (cannon64)",
            "0x03925193e3e89f87835bbdf3a813f60b2aa818a36bbe71cd5d8fd7e79f5e8afe": "v1.4.0-rc.1",
            "0x03c50b9fd04bdadc228205f340767bbf2d01a030aec39903120d3559d94bb8cc": "v1.3.1-ink",
            "0x038512e02c4c3f7bdaec27d00edf55b7155e0905301e1a88083e4e0a6764d54c": "v1.3.1 (govApproved)",
            "0x03e806a2859a875267a563462a06d4d1d1b455a9efee959a46e21e54b6caf69a": "v1.3.1-rc.1",
            "0x030de10d9da911a2b180ecfae2aeaba8758961fc28262ce989458c6f9a547922": "v1.3.0-rc.3",
            "0x0385c3f8ee78491001d92b90b07d0cf387b7b52ab9b83b4d87c994e92cf823ba": "v1.3.0-rc.2",
            "0x0367c4aa897bffbded0b523f277ca892298dc3c691baf37bc2099b86024f9673": "v1.3.0-rc.1",
            "0x03617abec0b255dc7fc7a0513a2c2220140a1dcd7a1c8eca567659bd67e05cea": "v1.2.0 (govApproved)",
            "0x03e69d3de5155f4a80da99dd534561cbddd4f9dd56c9ecc704d6886625711d2b": "v1.1.0",
            "0x0398bdd93e2e9313befdf82beb709da6a4daf35ce1abb42d8a998ec9bc1c572e": "v1.0.1",
            "0x037ef3c1a487960b0e633d3e513df020c43432769f41a634d18a9595cbf53c55": "v1.0.0 (govApproved)",
            "0x034c8cc69f22c35ae386a97136715dd48aaf97fd190942a111bfa680c2f2f421": "v0.3.0",
            "0x031e3b504740d0b1264e8cf72b6dde0d497184cfb3f98e451c6be8b33bd3f808": "v0.2.0",
            "0x038942ec840131a63c49fa514a3f0577ae401fd5584d56ad50cdf5a8b41d4538": "v0.1.0",
            "0x03babef4b4c6d866d56e6356d961839fd9475931d11e0ea507420a87b0cadbdd": "v0.0.1"
          }
        }
      ]
    },
    {
      "name": "Katana yieldRecipient Mulsitig",
      "address": "eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1751104547,
      "sinceBlock": 22802177,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x34d23C4fb6542B467cA8724bAD30AC811399b184",
          "eth:0x09f5F2592791208219A1F51e3855Be9419fF6bE4",
          "eth:0x0A4857fD89ABfB7536a6D0Bd4400EF769E84Ec8b",
          "eth:0x54DFA4B635E7eB98515fEBA81d360A3871739277",
          "eth:0xb3dA4c1Ba8De9E04f22B1554a070189F518FDCac",
          "eth:0xa1a4C71024a0CAD6a1cEf85561f1B9a34E00ff62",
          "eth:0x227D9Ea843910Edd305c42e7bB9Ce6D9f369238c"
        ],
        "$threshold": 2,
        "domainSeparator": "0x8c638b7731828e488739b87af5111a636a5ac204b246e63bda300de362cc436a",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 7 (29%)",
        "nonce": 56,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0x6d0ff67fb427422AfF35EEa8596949B374b09a52",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x96d2f0fa1bd83ebd61ba6a2351c64c7fda7aa580b11ea67bb6bf4338e5c28512"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1746740171,
      "sinceBlock": 22441511,
      "values": {
        "$immutable": true,
        "addressManager": "eth:0x0000000000000000000000000000000000000000",
        "isUpgrading": false,
        "owner": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a"
      },
      "implementationNames": {
        "eth:0x6d0ff67fb427422AfF35EEa8596949B374b09a52": "ProxyAdmin"
      }
    },
    {
      "name": "vbUSDT",
      "address": "eth:0x6d4f9f9f8f0155509ecd6Ac6c544fF27999845CC",
      "type": "Contract",
      "template": "polygon-cdk/GenericVaultBridgeToken",
      "sourceHashes": [
        "0x525b22d02f8b39d3432dfaf0061e3d91caa10d282e86ec7abeb4ca11790f6762",
        "0xbae5ca8308e7ebc2f3f89d306b5fa59219afbb56103cc06937985534329887e5"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "This token contract uses a standard 'vault bridge token' implementation created by Agglayer CDK. It keeps deposited assets in a vault and issues an IOU token (Vault Bridge USDT) which can be deposited to Agglayer. The underlying asset is generating yield, which does not accrue to the vbUSDT-IOU but is sent to eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756.",
      "ignoreInWatchMode": [
        "backingDifference",
        "stakedAssets",
        "totalAssets",
        "totalSupply",
        "yield"
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$admin": "eth:0x377a9e5df2882DC1DF8A0bD162cbc640eA634010",
        "$implementation": "eth:0xcC865B0324121b43728176024f58bdbB3afd6f29",
        "$pastUpgrades": [
          [
            "2025-05-22T10:30:35.000Z",
            "0xe5faaacdd7685d1b7fb939c740c7830a0fd07a48a7dc4495a3862e2a9cbff0cd",
            ["eth:0xcC865B0324121b43728176024f58bdbB3afd6f29"]
          ]
        ],
        "$upgradeCount": 1,
        "accessControl": {
          "DEFAULT_ADMIN_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec"]
          },
          "REBALANCER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec"]
          },
          "YIELD_COLLECTOR_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": [
              "eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec",
              "eth:0xcB1e45481461aeF38E6B0a34F1444E9C5D647645"
            ]
          },
          "PAUSER_ROLE": {
            "adminRole": "DEFAULT_ADMIN_ROLE",
            "members": ["eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec"]
          }
        },
        "asset": "eth:0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "backingDifference": { "positive": true, "difference": 1156903403 },
        "decimals": 6,
        "DEFAULT_ADMIN_ROLE": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "DOMAIN_SEPARATOR": "0xb80a4f7d2a2cc76fdaf2e936f017dddaca3e63f59cc318bc7506fafc54b81d3c",
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Vault Bridge USDT",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "eth:0x6d4f9f9f8f0155509ecd6Ac6c544fF27999845CC",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "lxlyBridge": "eth:0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe",
        "lxlyId": 0,
        "migrationFeesFund": 0,
        "migrationManager": "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02",
        "minimumReservePercentage": 0,
        "minimumYieldVaultDeposit": 0,
        "name": "Vault Bridge USDT",
        "paused": false,
        "PAUSER_ROLE": "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
        "REBALANCER_ROLE": "0xccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f46",
        "reservedAssets": 0,
        "reservePercentage": 0,
        "stakedAssets": 24439403047041,
        "symbol": "vbUSDT",
        "totalAssets": 24439403047041,
        "totalSupply": 24438246143638,
        "underlyingToken": "eth:0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "version": "0.5.0",
        "yield": 1156903403,
        "YIELD_COLLECTOR_ROLE": "0x4a43bb67995c7ae052564b1795e7bc07c4a74f92efdf2192466c19356570d627",
        "yieldRecipient": "eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756",
        "yieldVault": "eth:0xc54b4E08C1Dcc199fdd35c6b5Ab589ffD3428a8d",
        "yieldVaultMaximumSlippagePercentage": "10000000000000000"
      },
      "implementationNames": {
        "eth:0x6d4f9f9f8f0155509ecd6Ac6c544fF27999845CC": "TransparentUpgradeableProxy",
        "eth:0xcC865B0324121b43728176024f58bdbB3afd6f29": "GenericVaultBridgeToken"
      },
      "category": { "name": "External Bridges", "priority": 1 }
    },
    {
      "address": "eth:0x73D8846324B30477EA3Ac055589e40F39DE497F8",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "DelayedWETH",
      "address": "eth:0x74034597d29613CC8C0BDc8780e1d292A553Bd32",
      "type": "Contract",
      "template": "opstack/DelayedWETH",
      "sourceHashes": [
        "0x7913a1d7d0c47796c94eb6f8fd87a89ae9f2716eda57c9be4fd2b27c70bed617",
        "0x1c7d0fda5ed6d8fc7f5b5f7df5e307f0fcfd173fa5833ea9fce8875d5d44d86a"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contract designed to hold the bonded ETH for each game. It is designed as a wrapper around WETH to allow an owner to function as a backstop if a game would incorrectly distribute funds.",
      "ignoreInWatchMode": ["totalSupply"],
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$admin": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
        "$implementation": "eth:0x5e40B9231B86984b5150507046e354dbFbeD3d9e",
        "$pastUpgrades": [
          [
            "2025-05-08T22:20:11.000Z",
            "0x8889fe6d2dfe60b7a36d37f1f1177c604c413baef6bb6aa5ef9a517dce5bddb8",
            ["eth:0x71e966Ae981d1ce531a7b6d23DC0f27B38409087"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x5e40B9231B86984b5150507046e354dbFbeD3d9e"]
          ]
        ],
        "$upgradeCount": 2,
        "config": "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811",
        "decimals": 18,
        "delay": 302400,
        "name": "Wrapped Ether",
        "owner": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a",
        "symbol": "WETH",
        "totalSupply": 0,
        "version": "1.3.0"
      },
      "implementationNames": {
        "eth:0x74034597d29613CC8C0BDc8780e1d292A553Bd32": "Proxy",
        "eth:0x5e40B9231B86984b5150507046e354dbFbeD3d9e": "DelayedWETH"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "address": "eth:0x787aba336583f4A1D4f8cBBFDFFD49f3a38De665",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x81175155D85377C337d92f1FA52Da166C3A4E7Ac",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Katana Steakhouse Financial / Morpho Multisig",
      "address": "eth:0x827e86072B06674a077f592A531dcE4590aDeCdB",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1741081103,
      "sinceBlock": 21972679,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x0D61C8b6CA9669A36F351De3AE335e9689dd9C5b",
          "eth:0xcC771952fdE840E30C6802734e5ad20479c2959f",
          "eth:0x387Cde8598E1CBb297FDc5bAEbA5E5c5c2735344",
          "eth:0xE3fCEE6B6cd564E073346f71394f60eC9aDf5120"
        ],
        "$threshold": 2,
        "domainSeparator": "0xfbb159689ec7fd867986ea91ca0b87e0b127fb4e819eb33b3bec6755cc129ebc",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 4 (50%)",
        "nonce": 45,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0x827e86072B06674a077f592A531dcE4590aDeCdB": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "address": "eth:0x860e06Fe384D1A3340111e7D142E02642178c053",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0x8970650CF3f1E57cA804C65B4DBcFf698789FE30",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x8fd8f837bb320bd2a7463c103bea2ff207b0969b5795f320a6c868858aa92074"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x53E82ABbb12638F09d9e624578ccB666217a765e",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$immutable": true,
        "owner": "eth:0xf4F2f5F6bAdBE05433C4604320ecC56BbECBC04E",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "implementationNames": {
        "eth:0x8970650CF3f1E57cA804C65B4DBcFf698789FE30": "ProxyAdmin"
      }
    },
    {
      "name": "L1StandardBridge",
      "address": "eth:0x98906C3f90A06B5484DD67bf32938815d2993dBC",
      "type": "Contract",
      "template": "opstack/L1StandardBridge",
      "sourceHashes": [
        "0xbfb58685ff2f2f07eaa01a3c4e3c33c97686bfd3ae7c50c49f9da6ef5098cb31",
        "0x4e15d99844dc5a4304c2396a66c95ec41218ea311c8e524b118fad7beed0bb53"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The main entry point to deposit ERC20 tokens from host chain to this chain.",
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$admin": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
        "$implementation": "eth:0x0b09ba359A106C9ea3b181CBc5F394570c7d2a7A",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "l2TokenBridge": "eth:0x4200000000000000000000000000000000000010",
        "messenger": "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E",
        "MESSENGER": "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E",
        "OTHER_BRIDGE": "eth:0x4200000000000000000000000000000000000010",
        "otherBridge": "eth:0x4200000000000000000000000000000000000010",
        "paused": false,
        "superchainConfig": "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811",
        "version": "2.3.0"
      },
      "implementationNames": {
        "eth:0x98906C3f90A06B5484DD67bf32938815d2993dBC": "L1ChugSplashProxy",
        "eth:0x0b09ba359A106C9ea3b181CBc5F394570c7d2a7A": "L1StandardBridge"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "name": "Polygon Labs Engineering/Security Multisig",
      "address": "eth:0x9d851f8b8751c5FbC09b9E74E6e68E9950949052",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02",
          "role": "admin",
          "via": [
            { "address": "eth:0x263b251D67BB154DD6b8352539466ACE7948ED56" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x263b251D67BB154DD6b8352539466ACE7948ED56",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747897679,
      "sinceBlock": 22536821,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0xeD44D1CFfB91e163CB7126bdEeA83959f175dB37",
          "eth:0xffbfc0c8331C5fc912DDA3C6D4A86eEB80203238",
          "eth:0xdFEd8373695a7b3DaF268CF91e71f6a7024A56Da",
          "eth:0xED7cC82235A7757702475c8f77c7830c095FB5a2",
          "eth:0x21618593F7147235aC8D511d68A547C935F9d417"
        ],
        "$threshold": 2,
        "domainSeparator": "0x1e10c8adfe5d143b638cfd7dc768d352d2c056220c2d69fef33e91a1c2b79531",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 5 (40%)",
        "nonce": 21,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0x9d851f8b8751c5FbC09b9E74E6e68E9950949052": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "address": "eth:0xA0737fea60F0601A192E3d2c98865A883ab0bda2",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xa0C600a6e85bf225958FFAcC70B5FDDF9A059038",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xa1a4C71024a0CAD6a1cEf85561f1B9a34E00ff62",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xa4000bDD2bB92ce6750b31F1eeda47Bd1cB8e6e4",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "OptimismMintableERC20Factory",
      "address": "eth:0xA84C37cD0b9bA1B43276C11976DBE9d1344C7f4E",
      "type": "Contract",
      "template": "opstack/OptimismMintableERC20Factory",
      "sourceHashes": [
        "0x7913a1d7d0c47796c94eb6f8fd87a89ae9f2716eda57c9be4fd2b27c70bed617",
        "0x9650b4bba6299e410f01a369a95a2c57e1c3ca35f0d80c13f4f59fc468f370e5"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "A helper contract that generates OptimismMintableERC20 contracts on the network it's deployed to. OptimismMintableERC20 is a standard extension of the base ERC20 token contract designed to allow the L1StandardBridge contracts to mint and burn tokens. This makes it possible to use an OptimismMintableERC20 as this chain's representation of a token on the host chain, or vice-versa.",
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$admin": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
        "$implementation": "eth:0x5493f4677A186f64805fe7317D6993ba4863988F",
        "$pastUpgrades": [
          [
            "2025-05-08T22:20:11.000Z",
            "0x8889fe6d2dfe60b7a36d37f1f1177c604c413baef6bb6aa5ef9a517dce5bddb8",
            ["eth:0xE01efbeb1089D1d1dB9c6c8b135C934C0734c846"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x5493f4677A186f64805fe7317D6993ba4863988F"]
          ]
        ],
        "$upgradeCount": 2,
        "bridge": "eth:0x98906C3f90A06B5484DD67bf32938815d2993dBC",
        "BRIDGE": "eth:0x98906C3f90A06B5484DD67bf32938815d2993dBC",
        "version": "1.10.1"
      },
      "implementationNames": {
        "eth:0xA84C37cD0b9bA1B43276C11976DBE9d1344C7f4E": "Proxy",
        "eth:0x5493f4677A186f64805fe7317D6993ba4863988F": "OptimismMintableERC20Factory"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "name": "Katana vaultBridge Multisig 2",
      "address": "eth:0xA8C31B2edd84c654d06d626383f4154D1E40C5Ff",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x3DD459dE96F9C28e3a343b831cbDC2B93c8C4855",
          "role": "admin",
          "via": [
            { "address": "eth:0xD1e389c046FB734D2a0c7C390312210c408ba832" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0xD1e389c046FB734D2a0c7C390312210c408ba832",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747906727,
      "sinceBlock": 22537572,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7",
          "eth:0x9d851f8b8751c5FbC09b9E74E6e68E9950949052",
          "eth:0xd0673F989bc3BA9314d0AAF28BfC84e99B7898CC"
        ],
        "$threshold": 2,
        "domainSeparator": "0x4e8b8862f67543cfa55e84722ef6496ecac8bf06a9d8f45b16b03b0267f33202",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 3 (67%)",
        "nonce": 6,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0xA8C31B2edd84c654d06d626383f4154D1E40C5Ff": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "address": "eth:0xB13C8f58a233607569D2F8411B912148aeC4aEe2",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xb3dA4c1Ba8De9E04f22B1554a070189F518FDCac",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "SystemConfig",
      "address": "eth:0xb6e1f8B589A14B79DDD3aD7F0589AB548c70C174",
      "type": "Contract",
      "template": "opstack/SystemConfig",
      "sourceHashes": [
        "0x7913a1d7d0c47796c94eb6f8fd87a89ae9f2716eda57c9be4fd2b27c70bed617",
        "0x921de6fc906d159fdcef862d2b9559063f5e7b9b7588fa5f33153360ddf296e7"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Contains configuration parameters such as the Sequencer address, gas limit on this chain and the unsafe block signer address.",
      "ignoreInWatchMode": ["scalar", "overhead"],
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$admin": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
        "$implementation": "eth:0x340f923E5c7cbB2171146f64169EC9d5a9FfE647",
        "$pastUpgrades": [
          [
            "2025-05-08T22:20:11.000Z",
            "0x8889fe6d2dfe60b7a36d37f1f1177c604c413baef6bb6aa5ef9a517dce5bddb8",
            ["eth:0xAB9d6cB7A427c0765163A7f45BB91cAfe5f2D375"]
          ],
          [
            "2025-05-08T22:20:11.000Z",
            "0x8889fe6d2dfe60b7a36d37f1f1177c604c413baef6bb6aa5ef9a517dce5bddb8",
            ["eth:0xAB9d6cB7A427c0765163A7f45BB91cAfe5f2D375"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x760C48C62A85045A6B69f07F4a9f22868659CbCc"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x340f923E5c7cbB2171146f64169EC9d5a9FfE647"]
          ]
        ],
        "$upgradeCount": 4,
        "basefeeScalar": 1368,
        "BATCH_INBOX_SLOT": "0x71ac12829d66ee73d8d95bff50b3589745ce57edae70a3fb111a2342464dc597",
        "batcherHash": "eth:0x1FFDA89C755f6D4Af069897D77CcAbb580Fd412a",
        "batchInbox": "eth:0x000d4411cdeb152378626B5C5E33fd5D6808939a",
        "blobbasefeeScalar": 801949,
        "DISPUTE_GAME_FACTORY_SLOT": "0x52322a25d9f59ea17656545543306b7aef62bc0cc53a0e65ccfa0c75b97aa906",
        "disputeGameFactory": "eth:0xe06278351d120288eDfCB963F934113Ca3C21AFe",
        "eip1559Denominator": 250,
        "eip1559Elasticity": 60,
        "gasLimit": 60000000,
        "getAddresses": {
          "l1CrossDomainMessenger": "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E",
          "l1ERC721Bridge": "eth:0x15a32FCeA89617Ff450F094cDE102CCa46598B7F",
          "l1StandardBridge": "eth:0x98906C3f90A06B5484DD67bf32938815d2993dBC",
          "disputeGameFactory": "eth:0xe06278351d120288eDfCB963F934113Ca3C21AFe",
          "optimismPortal": "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E",
          "optimismMintableERC20Factory": "eth:0xA84C37cD0b9bA1B43276C11976DBE9d1344C7f4E"
        },
        "L1_CROSS_DOMAIN_MESSENGER_SLOT": "0x383f291819e6d54073bc9a648251d97421076bdd101933c0c022219ce9580636",
        "L1_ERC_721_BRIDGE_SLOT": "0x46adcbebc6be8ce551740c29c47c8798210f23f7f4086c41752944352568d5a7",
        "L1_STANDARD_BRIDGE_SLOT": "0x9904ba90dde5696cda05c9e0dab5cbaa0fea005ace4d11218a02ac668dad6376",
        "l1CrossDomainMessenger": "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E",
        "l1ERC721Bridge": "eth:0x15a32FCeA89617Ff450F094cDE102CCa46598B7F",
        "l1StandardBridge": "eth:0x98906C3f90A06B5484DD67bf32938815d2993dBC",
        "maximumGasLimit": 200000000,
        "minimumGasLimit": 21000000,
        "operatorFeeConstant": 1351351351351,
        "operatorFeeScalar": 0,
        "opStackDA": {
          "isSequencerSendingBlobTx": true,
          "isUsingCelestia": false,
          "isUsingEigenDA": false
        },
        "OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT": "0xa04c5bb938ca6fc46d95553abf0a76345ce3e722a30bf4f74928b8e7d852320c",
        "OPTIMISM_PORTAL_SLOT": "0x4b6c74f9e688cb39801f2112c14a8c57232a3fc5202e1444126d4bce86eb19ac",
        "optimismMintableERC20Factory": "eth:0xA84C37cD0b9bA1B43276C11976DBE9d1344C7f4E",
        "optimismPortal": "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E",
        "overhead": 0,
        "owner": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a",
        "resourceConfig": {
          "maxResourceLimit": 20000000,
          "elasticityMultiplier": 10,
          "baseFeeMaxChangeDenominator": 8,
          "minimumBaseFee": 1000000000,
          "systemTxMaxGas": 1000000,
          "maximumBaseFee": "340282366920938463463374607431768211455"
        },
        "scalar": "452312848583266388373324160190187140051835877600158453279134631875638723928",
        "sequencerInbox": "eth:0x000d4411cdeb152378626B5C5E33fd5D6808939a",
        "START_BLOCK_SLOT": "0xa11ee3ab75b40e88a0105e935d17cd36c8faee0138320d776c411291bdbbb19f",
        "startBlock": 22441727,
        "UNSAFE_BLOCK_SIGNER_SLOT": "0x65a7ed542fb37fe237fdfbdd70b31598523fe5b32879e307bae27a0bd9581c08",
        "unsafeBlockSigner": "eth:0x450A3A6AE85904cb4Aa0809Fb41E53B687a28397",
        "version": "2.5.0",
        "VERSION": 0
      },
      "fieldMeta": {
        "gasLimit": {
          "severity": "LOW",
          "description": "Gas limit for blocks on L2."
        },
        "eip1559Denominator": {
          "description": "volatility param: lower denominator -> quicker fee changes on L2"
        }
      },
      "implementationNames": {
        "eth:0xb6e1f8B589A14B79DDD3aD7F0589AB548c70C174": "Proxy",
        "eth:0x340f923E5c7cbB2171146f64169EC9d5a9FfE647": "SystemConfig"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "address": "eth:0xBD5f1429Ab467E69BEeba51E547C00A21F2a2092",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xC1E65a0cEbF95f56Cd8729f7e37CB33eD94d6439",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x100d3ca4f97776A40A7D93dB4AbF0FEA34230666",
          "description": "finalize any state root with only their signature.",
          "role": ".trustedSequencer",
          "condition": "optimisticMode is enabled by the optimisticModeManager."
        }
      ]
    },
    {
      "address": "eth:0xcB1e45481461aeF38E6B0a34F1444E9C5D647645",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xcC771952fdE840E30C6802734e5ad20479c2959f",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xd0002c648CCa8DeE2f2b8D70D542Ccde8ad6EC03",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Polygon Multisig 2",
      "address": "eth:0xd0673F989bc3BA9314d0AAF28BfC84e99B7898CC",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747896083,
      "sinceBlock": 22536688,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x2483A0d6a3Bd89D5C17aA80B3f8f6102ac053361",
          "eth:0x73D8846324B30477EA3Ac055589e40F39DE497F8",
          "eth:0x34d23C4fb6542B467cA8724bAD30AC811399b184",
          "eth:0x1DD6473a6bb5fF9041D945C7d15AC8fBc2Ee1164",
          "eth:0xa43901c63f7702C407378E55E0d0EB4064a2AE31"
        ],
        "$threshold": 3,
        "domainSeparator": "0xe9a6f7ca104e472f8e458bdecd3e110c7b1e1463aa5767d04bf4418c30651293",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "3 of 5 (60%)",
        "nonce": 21,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0xd0673F989bc3BA9314d0AAF28BfC84e99B7898CC": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    },
    {
      "name": "ProxyAdmin",
      "address": "eth:0xD1e389c046FB734D2a0c7C390312210c408ba832",
      "type": "Contract",
      "template": "global/ProxyAdmin",
      "sourceHashes": [
        "0x8fd8f837bb320bd2a7463c103bea2ff207b0969b5795f320a6c868858aa92074"
      ],
      "proxyType": "immutable",
      "directlyReceivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x3DD459dE96F9C28e3a343b831cbDC2B93c8C4855",
          "role": "admin"
        }
      ],
      "sinceTimestamp": 1747909835,
      "sinceBlock": 22537828,
      "values": {
        "$immutable": true,
        "owner": "eth:0xA8C31B2edd84c654d06d626383f4154D1E40C5Ff",
        "UPGRADE_INTERFACE_VERSION": "5.0.0"
      },
      "implementationNames": {
        "eth:0xD1e389c046FB734D2a0c7C390312210c408ba832": "ProxyAdmin"
      }
    },
    {
      "name": "DisputeGameFactory",
      "address": "eth:0xe06278351d120288eDfCB963F934113Ca3C21AFe",
      "type": "Contract",
      "template": "opstack/DisputeGameFactory",
      "sourceHashes": [
        "0x7913a1d7d0c47796c94eb6f8fd87a89ae9f2716eda57c9be4fd2b27c70bed617",
        "0x85ca17941ef36ac6b28a4f8f89803d0d41ef419c47586dcd3acdb47ee9617285"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "The dispute game factory allows the creation of dispute games, used to propose state roots and eventually challenge them.",
      "ignoreInWatchMode": ["gameCount"],
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$admin": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832",
        "$implementation": "eth:0x4bbA758F006Ef09402eF31724203F316ab74e4a0",
        "$pastUpgrades": [
          [
            "2025-05-08T22:20:11.000Z",
            "0x8889fe6d2dfe60b7a36d37f1f1177c604c413baef6bb6aa5ef9a517dce5bddb8",
            ["eth:0xc641A33cab81C559F2bd4b21EA34C290E2440C2B"]
          ],
          [
            "2025-07-23T17:04:59.000Z",
            "0xc60a3166aa296b584f143a129ac53f156ee9946373ff5fb97b3785cc5fc092a2",
            ["eth:0x4bbA758F006Ef09402eF31724203F316ab74e4a0"]
          ]
        ],
        "$upgradeCount": 2,
        "game1337": "eth:0x0000000000000000000000000000000000000000",
        "gameCount": 0,
        "gameImpls": [
          "eth:0x0000000000000000000000000000000000000000",
          "eth:0x667b7DA73DA7B2A75286378FF45637eEaE9B4793",
          "eth:0x0000000000000000000000000000000000000000",
          "eth:0x0000000000000000000000000000000000000000",
          "eth:0x0000000000000000000000000000000000000000"
        ],
        "initBonds": [0, 0, 0, 0, 0],
        "owner": "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a",
        "permissionedGamesTotal": 0,
        "version": "1.0.1"
      },
      "fieldMeta": {
        "gameImpls": { "severity": "HIGH" },
        "game1337": { "severity": "HIGH" }
      },
      "implementationNames": {
        "eth:0xe06278351d120288eDfCB963F934113Ca3C21AFe": "Proxy",
        "eth:0x4bbA758F006Ef09402eF31724203F316ab74e4a0": "DisputeGameFactory"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "address": "eth:0xE3fCEE6B6cd564E073346f71394f60eC9aDf5120",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "AddressManager",
      "address": "eth:0xEaB94275eD336D80d4F46EA8Ea0427e351f11D65",
      "type": "Contract",
      "template": "opstack/AddressManager",
      "sourceHashes": [
        "0xdc86a850f11dc2b5c0472a05d0e3c14f239baf2c3b1ab19631591b0827985380"
      ],
      "proxyType": "immutable",
      "description": "Legacy contract used to manage a mapping of string names to addresses. Modern OP stack uses a different standard proxy system instead, but this contract is still necessary for backwards compatibility with several older contracts.",
      "sinceTimestamp": 1746742811,
      "sinceBlock": 22441727,
      "values": {
        "$immutable": true,
        "owner": "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832"
      },
      "implementationNames": {
        "eth:0xEaB94275eD336D80d4F46EA8Ea0427e351f11D65": "AddressManager"
      },
      "category": { "name": "Spam", "priority": -1 }
    },
    {
      "address": "eth:0xefCf0c8faFB425997870f845e26fC6cA6EE6dD5C",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "MIPS",
      "address": "eth:0xF027F4A985560fb13324e943edf55ad6F1d15Dc1",
      "type": "Contract",
      "template": "opstack/MIPS",
      "sourceHashes": [
        "0x115725ab57eeed11f754138c0ec5f9bfba41e494b2336c2cd4745778eb26f776"
      ],
      "proxyType": "immutable",
      "description": "The MIPS contract is used to execute the final step of the dispute game which objectively determines the winner of the dispute.",
      "sinceTimestamp": 1741217219,
      "sinceBlock": 21983963,
      "values": {
        "$immutable": true,
        "oracle": "eth:0x1fb8cdFc6831fc866Ed9C51aF8817Da5c287aDD3",
        "version": "1.0.0"
      },
      "implementationNames": {
        "eth:0xF027F4A985560fb13324e943edf55ad6F1d15Dc1": "MIPS64"
      }
    },
    {
      "address": "eth:0xF0B77EaE7F2dabCC2571c7418406A0dCA3afA4f0",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xF3313C48BD8E17b823d5498D62F37019dFEA647D",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Katana vaultBridge Multisig 3",
      "address": "eth:0xf4F2f5F6bAdBE05433C4604320ecC56BbECBC04E",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0xfe0725afd3cf2e5fb7627005a6bcf13ef7e35f78034eed2211edbffdb6a9aab5",
        "0x7d388119a66f3eae147d748f86136f073d907d6b36f7e87e9363c4c7a2899a8a"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "upgrade",
          "from": "eth:0x53E82ABbb12638F09d9e624578ccB666217a765e",
          "role": "admin",
          "via": [
            { "address": "eth:0x8970650CF3f1E57cA804C65B4DBcFf698789FE30" }
          ]
        }
      ],
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0x8970650CF3f1E57cA804C65B4DBcFf698789FE30",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1747898375,
      "sinceBlock": 22536878,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a",
        "$members": [
          "eth:0x9d851f8b8751c5FbC09b9E74E6e68E9950949052",
          "eth:0xd0673F989bc3BA9314d0AAF28BfC84e99B7898CC",
          "eth:0x827e86072B06674a077f592A531dcE4590aDeCdB"
        ],
        "$threshold": 2,
        "domainSeparator": "0xfc78bcef520e28a1d28a302ba77e4e1c6243659b8de842391bdd58be4664fa1d",
        "getChainId": 1,
        "GnosisSafe_modules": [],
        "multisigThreshold": "2 of 3 (67%)",
        "nonce": 6,
        "VERSION": "1.4.1"
      },
      "implementationNames": {
        "eth:0xf4F2f5F6bAdBE05433C4604320ecC56BbECBC04E": "SafeProxy",
        "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": "Safe"
      }
    }
  ],
  "abis": {
    "eth:0x0b09ba359A106C9ea3b181CBc5F394570c7d2a7A": [
      "constructor()",
      "event ERC20BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20DepositInitiated(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ERC20WithdrawalFinalized(address indexed l1Token, address indexed l2Token, address indexed from, address to, uint256 amount, bytes extraData)",
      "event ETHBridgeFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHBridgeInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHDepositInitiated(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event ETHWithdrawalFinalized(address indexed from, address indexed to, uint256 amount, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC20(address _localToken, address _remoteToken, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC20To(address _localToken, address _remoteToken, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function bridgeETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _minGasLimit, bytes _extraData)",
      "function depositETH(uint32 _minGasLimit, bytes _extraData) payable",
      "function depositETHTo(address _to, uint32 _minGasLimit, bytes _extraData) payable",
      "function deposits(address, address) view returns (uint256)",
      "function finalizeBridgeERC20(address _localToken, address _remoteToken, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeBridgeETH(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function finalizeERC20Withdrawal(address _l1Token, address _l2Token, address _from, address _to, uint256 _amount, bytes _extraData)",
      "function finalizeETHWithdrawal(address _from, address _to, uint256 _amount, bytes _extraData) payable",
      "function initialize(address _messenger, address _superchainConfig)",
      "function l2TokenBridge() view returns (address)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "eth:0x100d3ca4f97776A40A7D93dB4AbF0FEA34230666": [
      "constructor(address _logic, address admin, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedInnerCall()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "eth:0x14Be6579A41342ca6B402ec85E7be538e6Ade951": [
      "constructor(address initialOwner)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0x15a32FCeA89617Ff450F094cDE102CCa46598B7F": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "eth:0x16388463d60FFE0661Cf7F1f31a7D658aC790ff7": [
      "constructor(address _masterCopy)"
    ],
    "eth:0x19DbD16f0a8e706D817B7e3b7bcF72917Ebb8832": [
      "constructor(address _owner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function addressManager() view returns (address)",
      "function changeProxyAdmin(address _proxy, address _newAdmin)",
      "function getProxyAdmin(address _proxy) view returns (address)",
      "function getProxyImplementation(address _proxy) view returns (address)",
      "function implementationName(address) view returns (string)",
      "function isUpgrading() view returns (bool)",
      "function owner() view returns (address)",
      "function proxyType(address) view returns (uint8)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function setAddressManager(address _address)",
      "function setImplementationName(address _address, string _name)",
      "function setProxyType(address _address, uint8 _type)",
      "function setUpgrading(bool _upgrading)",
      "function transferOwnership(address newOwner)",
      "function upgrade(address _proxy, address _implementation)",
      "function upgradeAndCall(address _proxy, address _implementation, bytes _data) payable"
    ],
    "eth:0x1AaA08d577cbC3da3b955DC1B7a281D7b8fE3372": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "eth:0x1fb8cdFc6831fc866Ed9C51aF8817Da5c287aDD3": [
      "constructor(uint256 _minProposalSize, uint256 _challengePeriod)",
      "error ActiveProposal()",
      "error AlreadyFinalized()",
      "error AlreadyInitialized()",
      "error BadProposal()",
      "error BondTransferFailed()",
      "error InsufficientBond()",
      "error InvalidInputSize()",
      "error InvalidPreimage()",
      "error InvalidProof()",
      "error NotEOA()",
      "error NotInitialized()",
      "error PartOffsetOOB()",
      "error PostStateMatches()",
      "error StatesNotContiguous()",
      "error TreeSizeOverflow()",
      "error WrongStartingBlock()",
      "function KECCAK_TREE_DEPTH() view returns (uint256)",
      "function MAX_LEAF_COUNT() view returns (uint256)",
      "function MIN_BOND_SIZE() view returns (uint256)",
      "function PRECOMPILE_CALL_RESERVED_GAS() view returns (uint256)",
      "function addLeavesLPP(uint256 _uuid, uint256 _inputStartBlock, bytes _input, bytes32[] _stateCommitments, bool _finalize)",
      "function challengeFirstLPP(address _claimant, uint256 _uuid, tuple(bytes input, uint256 index, bytes32 stateCommitment) _postState, bytes32[] _postStateProof)",
      "function challengeLPP(address _claimant, uint256 _uuid, tuple(uint64[25] state) _stateMatrix, tuple(bytes input, uint256 index, bytes32 stateCommitment) _preState, bytes32[] _preStateProof, tuple(bytes input, uint256 index, bytes32 stateCommitment) _postState, bytes32[] _postStateProof)",
      "function challengePeriod() view returns (uint256 challengePeriod_)",
      "function getTreeRootLPP(address _owner, uint256 _uuid) view returns (bytes32 treeRoot_)",
      "function initLPP(uint256 _uuid, uint32 _partOffset, uint32 _claimedSize) payable",
      "function loadBlobPreimagePart(uint256 _z, uint256 _y, bytes _commitment, bytes _proof, uint256 _partOffset)",
      "function loadKeccak256PreimagePart(uint256 _partOffset, bytes _preimage)",
      "function loadLocalData(uint256 _ident, bytes32 _localContext, bytes32 _word, uint256 _size, uint256 _partOffset) returns (bytes32 key_)",
      "function loadPrecompilePreimagePart(uint256 _partOffset, address _precompile, uint64 _requiredGas, bytes _input)",
      "function loadSha256PreimagePart(uint256 _partOffset, bytes _preimage)",
      "function minProposalSize() view returns (uint256 minProposalSize_)",
      "function preimageLengths(bytes32) view returns (uint256)",
      "function preimagePartOk(bytes32, uint256) view returns (bool)",
      "function preimageParts(bytes32, uint256) view returns (bytes32)",
      "function proposalBlocks(address, uint256, uint256) view returns (uint64)",
      "function proposalBlocksLen(address _claimant, uint256 _uuid) view returns (uint256 len_)",
      "function proposalBonds(address, uint256) view returns (uint256)",
      "function proposalBranches(address, uint256, uint256) view returns (bytes32)",
      "function proposalCount() view returns (uint256 count_)",
      "function proposalMetadata(address, uint256) view returns (bytes32)",
      "function proposalParts(address, uint256) view returns (bytes32)",
      "function proposals(uint256) view returns (address claimant, uint256 uuid)",
      "function readPreimage(bytes32 _key, uint256 _offset) view returns (bytes32 dat_, uint256 datLen_)",
      "function squeezeLPP(address _claimant, uint256 _uuid, tuple(uint64[25] state) _stateMatrix, tuple(bytes input, uint256 index, bytes32 stateCommitment) _preState, bytes32[] _preStateProof, tuple(bytes input, uint256 index, bytes32 stateCommitment) _postState, bytes32[] _postStateProof)",
      "function version() view returns (string)",
      "function zeroHashes(uint256) view returns (bytes32)"
    ],
    "eth:0x2008A6Ba8CAF85AaFAe7880664Dfe681D533ac2E": [
      "constructor(address _addressManager, string _implementationName)"
    ],
    "eth:0x250D30c523104bf0a06825e7eAdE4Dc46EdfE40E": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "eth:0x263b251D67BB154DD6b8352539466ACE7948ED56": [
      "constructor(address initialOwner)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0x2C24B57e2CCd1f273045Af6A5f632504C432374F": [
      "constructor(address _logic, address initialOwner, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error ProxyDeniedAdminAccess()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "eth:0x2DC70fb75b88d2eB4715bc06E1595E6D97c34DFF": [
      "constructor(address _logic, address initialOwner, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error ProxyDeniedAdminAccess()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "eth:0x2De242e27386e224E5fbF110EA8406d5B70740ec": [
      "constructor(address _singleton)"
    ],
    "eth:0x2F439B95fa789C5d3a5C99cc70EB3ee83D08a811": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "eth:0x340f923E5c7cbB2171146f64169EC9d5a9FfE647": [
      "constructor()",
      "event ConfigUpdate(uint256 indexed version, uint8 indexed updateType, bytes data)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function BATCH_INBOX_SLOT() view returns (bytes32)",
      "function DISPUTE_GAME_FACTORY_SLOT() view returns (bytes32)",
      "function L1_CROSS_DOMAIN_MESSENGER_SLOT() view returns (bytes32)",
      "function L1_ERC_721_BRIDGE_SLOT() view returns (bytes32)",
      "function L1_STANDARD_BRIDGE_SLOT() view returns (bytes32)",
      "function OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT() view returns (bytes32)",
      "function OPTIMISM_PORTAL_SLOT() view returns (bytes32)",
      "function START_BLOCK_SLOT() view returns (bytes32)",
      "function UNSAFE_BLOCK_SIGNER_SLOT() view returns (bytes32)",
      "function VERSION() view returns (uint256)",
      "function basefeeScalar() view returns (uint32)",
      "function batchInbox() view returns (address addr_)",
      "function batcherHash() view returns (bytes32)",
      "function blobbasefeeScalar() view returns (uint32)",
      "function disputeGameFactory() view returns (address addr_)",
      "function eip1559Denominator() view returns (uint32)",
      "function eip1559Elasticity() view returns (uint32)",
      "function gasLimit() view returns (uint64)",
      "function getAddresses() view returns (tuple(address l1CrossDomainMessenger, address l1ERC721Bridge, address l1StandardBridge, address disputeGameFactory, address optimismPortal, address optimismMintableERC20Factory))",
      "function initialize(address _owner, uint32 _basefeeScalar, uint32 _blobbasefeeScalar, bytes32 _batcherHash, uint64 _gasLimit, address _unsafeBlockSigner, tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee) _config, address _batchInbox, tuple(address l1CrossDomainMessenger, address l1ERC721Bridge, address l1StandardBridge, address disputeGameFactory, address optimismPortal, address optimismMintableERC20Factory) _addresses)",
      "function l1CrossDomainMessenger() view returns (address addr_)",
      "function l1ERC721Bridge() view returns (address addr_)",
      "function l1StandardBridge() view returns (address addr_)",
      "function maximumGasLimit() pure returns (uint64)",
      "function minimumGasLimit() view returns (uint64)",
      "function operatorFeeConstant() view returns (uint64)",
      "function operatorFeeScalar() view returns (uint32)",
      "function optimismMintableERC20Factory() view returns (address addr_)",
      "function optimismPortal() view returns (address addr_)",
      "function overhead() view returns (uint256)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function resourceConfig() view returns (tuple(uint32 maxResourceLimit, uint8 elasticityMultiplier, uint8 baseFeeMaxChangeDenominator, uint32 minimumBaseFee, uint32 systemTxMaxGas, uint128 maximumBaseFee))",
      "function scalar() view returns (uint256)",
      "function setBatcherHash(bytes32 _batcherHash)",
      "function setEIP1559Params(uint32 _denominator, uint32 _elasticity)",
      "function setGasConfig(uint256 _overhead, uint256 _scalar)",
      "function setGasConfigEcotone(uint32 _basefeeScalar, uint32 _blobbasefeeScalar)",
      "function setGasLimit(uint64 _gasLimit)",
      "function setOperatorFeeScalars(uint32 _operatorFeeScalar, uint64 _operatorFeeConstant)",
      "function setUnsafeBlockSigner(address _unsafeBlockSigner)",
      "function startBlock() view returns (uint256 startBlock_)",
      "function transferOwnership(address newOwner)",
      "function unsafeBlockSigner() view returns (address addr_)",
      "function version() pure returns (string)"
    ],
    "eth:0x377a9e5df2882DC1DF8A0bD162cbc640eA634010": [
      "constructor(address initialOwner)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0x3DD459dE96F9C28e3a343b831cbDC2B93c8C4855": [
      "constructor(address _logic, address initialOwner, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error ProxyDeniedAdminAccess()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "eth:0x3E5c63644E683549055b9Be8653de26E0B4CD36E": [
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)",
      "event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0x41675C099F32341bf84BFc5382aF534df5C7461a": [
      "constructor()",
      "event AddedOwner(address indexed owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address indexed handler)",
      "event ChangedGuard(address indexed guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address indexed module)",
      "event EnabledModule(address indexed module)",
      "event ExecutionFailure(bytes32 indexed txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 indexed txHash, uint256 payment)",
      "event RemovedOwner(address indexed owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0x417d01B64Ea30C4E163873f3a1f77b727c689e02": [
      "constructor(address _logic, address initialOwner, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error ProxyDeniedAdminAccess()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "eth:0x420693B32113a0e00Eb9f3315D5D5ec3b32C2d69": [
      "constructor(address initialOwner)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0x4a4962275DF8C60a80d3a25faEc5AA7De116A746": [
      "constructor(address _singleton)"
    ],
    "eth:0x4bbA758F006Ef09402eF31724203F316ab74e4a0": [
      "constructor()",
      "error GameAlreadyExists(bytes32 uuid)",
      "error IncorrectBondAmount()",
      "error NoImplementation(uint32 gameType)",
      "event DisputeGameCreated(address indexed disputeProxy, uint32 indexed gameType, bytes32 indexed rootClaim)",
      "event ImplementationSet(address indexed impl, uint32 indexed gameType)",
      "event InitBondUpdated(uint32 indexed gameType, uint256 indexed newBond)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function create(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) payable returns (address proxy_)",
      "function findLatestGames(uint32 _gameType, uint256 _start, uint256 _n) view returns (tuple(uint256 index, bytes32 metadata, uint64 timestamp, bytes32 rootClaim, bytes extraData)[] games_)",
      "function gameAtIndex(uint256 _index) view returns (uint32 gameType_, uint64 timestamp_, address proxy_)",
      "function gameCount() view returns (uint256 gameCount_)",
      "function gameImpls(uint32) view returns (address)",
      "function games(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) view returns (address proxy_, uint64 timestamp_)",
      "function getGameUUID(uint32 _gameType, bytes32 _rootClaim, bytes _extraData) pure returns (bytes32 uuid_)",
      "function initBonds(uint32) view returns (uint256)",
      "function initialize(address _owner)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setImplementation(uint32 _gameType, address _impl)",
      "function setInitBond(uint32 _gameType, uint256 _initBond)",
      "function transferOwnership(address newOwner)",
      "function version() view returns (string)"
    ],
    "eth:0x4da82a327773965b8d4D85Fa3dB8249b387458E7": [
      "constructor()",
      "event ConfigUpdate(uint8 indexed updateType, bytes data)",
      "event Initialized(uint8 version)",
      "event Paused(string identifier)",
      "event Unpaused()",
      "function GUARDIAN_SLOT() view returns (bytes32)",
      "function PAUSED_SLOT() view returns (bytes32)",
      "function guardian() view returns (address guardian_)",
      "function initialize(address _guardian, bool _paused)",
      "function pause(string _identifier)",
      "function paused() view returns (bool paused_)",
      "function unpause()",
      "function version() view returns (string)"
    ],
    "eth:0x4e981bAe8E3cd06Ca911ffFE5504B2653ac1C38a": [
      "constructor(address _singleton)"
    ],
    "eth:0x51c852eC17062FB229A117Cb8abCBc7Eb171D5Bc": [
      "constructor(uint256 _proofMaturityDelaySeconds, uint256 _disputeGameFinalityDelaySeconds)",
      "error AlreadyFinalized()",
      "error BadTarget()",
      "error Blacklisted()",
      "error CallPaused()",
      "error ContentLengthMismatch()",
      "error EmptyItem()",
      "error GasEstimation()",
      "error InvalidDataRemainder()",
      "error InvalidDisputeGame()",
      "error InvalidGameType()",
      "error InvalidHeader()",
      "error InvalidMerkleProof()",
      "error InvalidProof()",
      "error LargeCalldata()",
      "error LegacyGame()",
      "error NonReentrant()",
      "error OutOfGas()",
      "error ProposalNotValidated()",
      "error SmallGasLimit()",
      "error Unauthorized()",
      "error UnexpectedList()",
      "error UnexpectedString()",
      "error Unproven()",
      "event DisputeGameBlacklisted(address indexed disputeGame)",
      "event Initialized(uint8 version)",
      "event RespectedGameTypeSet(uint32 indexed newGameType, uint64 indexed updatedAt)",
      "event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)",
      "event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)",
      "event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)",
      "event WithdrawalProvenExtension1(bytes32 indexed withdrawalHash, address indexed proofSubmitter)",
      "function blacklistDisputeGame(address _disputeGame)",
      "function checkWithdrawal(bytes32 _withdrawalHash, address _proofSubmitter) view",
      "function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable",
      "function disputeGameBlacklist(address) view returns (bool)",
      "function disputeGameFactory() view returns (address)",
      "function disputeGameFinalityDelaySeconds() view returns (uint256)",
      "function donateETH() payable",
      "function finalizeWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx)",
      "function finalizeWithdrawalTransactionExternalProof(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, address _proofSubmitter)",
      "function finalizedWithdrawals(bytes32) view returns (bool)",
      "function guardian() view returns (address)",
      "function initialize(address _disputeGameFactory, address _systemConfig, address _superchainConfig, uint32 _initialRespectedGameType)",
      "function l2Sender() view returns (address)",
      "function minimumGasLimit(uint64 _byteCount) pure returns (uint64)",
      "function numProofSubmitters(bytes32 _withdrawalHash) view returns (uint256)",
      "function params() view returns (uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)",
      "function paused() view returns (bool)",
      "function proofMaturityDelaySeconds() view returns (uint256)",
      "function proofSubmitters(bytes32, uint256) view returns (address)",
      "function proveWithdrawalTransaction(tuple(uint256 nonce, address sender, address target, uint256 value, uint256 gasLimit, bytes data) _tx, uint256 _disputeGameIndex, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes[] _withdrawalProof)",
      "function provenWithdrawals(bytes32, address) view returns (address disputeGameProxy, uint64 timestamp)",
      "function respectedGameType() view returns (uint32)",
      "function respectedGameTypeUpdatedAt() view returns (uint64)",
      "function setRespectedGameType(uint32 _gameType)",
      "function superchainConfig() view returns (address)",
      "function systemConfig() view returns (address)",
      "function version() pure returns (string)"
    ],
    "eth:0x53E82ABbb12638F09d9e624578ccB666217a765e": [
      "constructor(address _logic, address initialOwner, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error ProxyDeniedAdminAccess()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "eth:0x5493f4677A186f64805fe7317D6993ba4863988F": [
      "constructor()",
      "event Initialized(uint8 version)",
      "event OptimismMintableERC20Created(address indexed localToken, address indexed remoteToken, address deployer)",
      "event StandardL2TokenCreated(address indexed remoteToken, address indexed localToken)",
      "function BRIDGE() view returns (address)",
      "function bridge() view returns (address)",
      "function createOptimismMintableERC20(address _remoteToken, string _name, string _symbol) returns (address)",
      "function createOptimismMintableERC20WithDecimals(address _remoteToken, string _name, string _symbol, uint8 _decimals) returns (address)",
      "function createStandardL2Token(address _remoteToken, string _name, string _symbol) returns (address)",
      "function deployments(address) view returns (address)",
      "function initialize(address _bridge)",
      "function version() view returns (string)"
    ],
    "eth:0x5D5a095665886119693F0B41d8DFeE78da033e8B": [
      "constructor()",
      "event FailedRelayedMessage(bytes32 indexed msgHash)",
      "event Initialized(uint8 version)",
      "event RelayedMessage(bytes32 indexed msgHash)",
      "event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit)",
      "event SentMessageExtension1(address indexed sender, uint256 value)",
      "function ENCODING_OVERHEAD() view returns (uint64)",
      "function FLOOR_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MESSAGE_VERSION() view returns (uint16)",
      "function MIN_GAS_CALLDATA_OVERHEAD() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR() view returns (uint64)",
      "function MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR() view returns (uint64)",
      "function OTHER_MESSENGER() view returns (address)",
      "function PORTAL() view returns (address)",
      "function RELAY_CALL_OVERHEAD() view returns (uint64)",
      "function RELAY_CONSTANT_OVERHEAD() view returns (uint64)",
      "function RELAY_GAS_CHECK_BUFFER() view returns (uint64)",
      "function RELAY_RESERVED_GAS() view returns (uint64)",
      "function TX_BASE_GAS() view returns (uint64)",
      "function baseGas(bytes _message, uint32 _minGasLimit) pure returns (uint64)",
      "function failedMessages(bytes32) view returns (bool)",
      "function initialize(address _superchainConfig, address _portal)",
      "function messageNonce() view returns (uint256)",
      "function otherMessenger() view returns (address)",
      "function paused() view returns (bool)",
      "function portal() view returns (address)",
      "function relayMessage(uint256 _nonce, address _sender, address _target, uint256 _value, uint256 _minGasLimit, bytes _message) payable",
      "function sendMessage(address _target, bytes _message, uint32 _minGasLimit) payable",
      "function successfulMessages(bytes32) view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)",
      "function xDomainMessageSender() view returns (address)"
    ],
    "eth:0x5e40B9231B86984b5150507046e354dbFbeD3d9e": [
      "constructor(uint256 _delay)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event Initialized(uint8 version)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function balanceOf(address src) view returns (uint256)",
      "function config() view returns (address)",
      "function decimals() view returns (uint8)",
      "function delay() view returns (uint256)",
      "function deposit() payable",
      "function hold(address _guy, uint256 _wad)",
      "function hold(address _guy)",
      "function initialize(address _owner, address _config)",
      "function name() view returns (string)",
      "function owner() view returns (address)",
      "function recover(uint256 _wad)",
      "function renounceOwnership()",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
      "function transferOwnership(address newOwner)",
      "function unlock(address _guy, uint256 _wad)",
      "function version() view returns (string)",
      "function withdraw(uint256 _wad)",
      "function withdraw(address _guy, uint256 _wad)",
      "function withdrawals(address, address) view returns (uint256 amount, uint256 timestamp)"
    ],
    "eth:0x667b7DA73DA7B2A75286378FF45637eEaE9B4793": [
      "constructor(tuple(uint32 gameType, bytes32 absolutePrestate, uint256 maxGameDepth, uint256 splitDepth, uint64 clockExtension, uint64 maxClockDuration, address vm, address weth, address anchorStateRegistry, uint256 l2ChainId) _params, address _proposer, address _challenger)",
      "error AlreadyInitialized()",
      "error AnchorRootNotFound()",
      "error BadAuth()",
      "error BlockNumberMatches()",
      "error BondTransferFailed()",
      "error CannotDefendRootClaim()",
      "error ClaimAboveSplit()",
      "error ClaimAlreadyExists()",
      "error ClaimAlreadyResolved()",
      "error ClockNotExpired()",
      "error ClockTimeExceeded()",
      "error ContentLengthMismatch()",
      "error DuplicateStep()",
      "error EmptyItem()",
      "error GameDepthExceeded()",
      "error GameNotFinalized()",
      "error GameNotInProgress()",
      "error GameNotResolved()",
      "error IncorrectBondAmount()",
      "error InvalidBondDistributionMode()",
      "error InvalidChallengePeriod()",
      "error InvalidClockExtension()",
      "error InvalidDataRemainder()",
      "error InvalidDisputedClaimIndex()",
      "error InvalidHeader()",
      "error InvalidHeaderRLP()",
      "error InvalidLocalIdent()",
      "error InvalidOutputRootProof()",
      "error InvalidParent()",
      "error InvalidPrestate()",
      "error InvalidSplitDepth()",
      "error L2BlockNumberChallenged()",
      "error MaxDepthTooLarge()",
      "error NoCreditToClaim()",
      "error OutOfOrderResolution()",
      "error ReservedGameType()",
      "error UnexpectedList()",
      "error UnexpectedRootClaim(bytes32 rootClaim)",
      "error UnexpectedString()",
      "error ValidStep()",
      "event GameClosed(uint8 bondDistributionMode)",
      "event Move(uint256 indexed parentIndex, bytes32 indexed claim, address indexed claimant)",
      "event Resolved(uint8 indexed status)",
      "function absolutePrestate() view returns (bytes32 absolutePrestate_)",
      "function addLocalData(uint256 _ident, uint256 _execLeafIdx, uint256 _partOffset)",
      "function anchorStateRegistry() view returns (address registry_)",
      "function attack(bytes32 _disputed, uint256 _parentIndex, bytes32 _claim) payable",
      "function bondDistributionMode() view returns (uint8)",
      "function challengeRootL2Block(tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) _outputRootProof, bytes _headerRLP)",
      "function challenger() view returns (address challenger_)",
      "function claimCredit(address _recipient)",
      "function claimData(uint256) view returns (uint32 parentIndex, address counteredBy, address claimant, uint128 bond, bytes32 claim, uint128 position, uint128 clock)",
      "function claimDataLen() view returns (uint256 len_)",
      "function claims(bytes32) view returns (bool)",
      "function clockExtension() view returns (uint64 clockExtension_)",
      "function closeGame()",
      "function createdAt() view returns (uint64)",
      "function credit(address _recipient) view returns (uint256 credit_)",
      "function defend(bytes32 _disputed, uint256 _parentIndex, bytes32 _claim) payable",
      "function extraData() pure returns (bytes extraData_)",
      "function gameCreator() pure returns (address creator_)",
      "function gameData() view returns (uint32 gameType_, bytes32 rootClaim_, bytes extraData_)",
      "function gameType() view returns (uint32 gameType_)",
      "function getChallengerDuration(uint256 _claimIndex) view returns (uint64 duration_)",
      "function getNumToResolve(uint256 _claimIndex) view returns (uint256 numRemainingChildren_)",
      "function getRequiredBond(uint128 _position) view returns (uint256 requiredBond_)",
      "function hasUnlockedCredit(address) view returns (bool)",
      "function initialize() payable",
      "function l1Head() pure returns (bytes32 l1Head_)",
      "function l2BlockNumber() pure returns (uint256 l2BlockNumber_)",
      "function l2BlockNumberChallenged() view returns (bool)",
      "function l2BlockNumberChallenger() view returns (address)",
      "function l2ChainId() view returns (uint256 l2ChainId_)",
      "function maxClockDuration() view returns (uint64 maxClockDuration_)",
      "function maxGameDepth() view returns (uint256 maxGameDepth_)",
      "function move(bytes32 _disputed, uint256 _challengeIndex, bytes32 _claim, bool _isAttack) payable",
      "function normalModeCredit(address) view returns (uint256)",
      "function proposer() view returns (address proposer_)",
      "function refundModeCredit(address) view returns (uint256)",
      "function resolutionCheckpoints(uint256) view returns (bool initialCheckpointComplete, uint32 subgameIndex, uint128 leftmostPosition, address counteredBy)",
      "function resolve() returns (uint8 status_)",
      "function resolveClaim(uint256 _claimIndex, uint256 _numToResolve)",
      "function resolvedAt() view returns (uint64)",
      "function resolvedSubgames(uint256) view returns (bool)",
      "function rootClaim() pure returns (bytes32 rootClaim_)",
      "function splitDepth() view returns (uint256 splitDepth_)",
      "function startingBlockNumber() view returns (uint256 startingBlockNumber_)",
      "function startingOutputRoot() view returns (bytes32 root, uint256 l2BlockNumber)",
      "function startingRootHash() view returns (bytes32 startingRootHash_)",
      "function status() view returns (uint8)",
      "function step(uint256 _claimIndex, bool _isAttack, bytes _stateData, bytes _proof)",
      "function subgames(uint256, uint256) view returns (uint256)",
      "function version() pure returns (string)",
      "function vm() view returns (address vm_)",
      "function wasRespectedGameTypeWhenCreated() view returns (bool)",
      "function weth() view returns (address weth_)"
    ],
    "eth:0x67C912fF560951526BffDff66dFbD4DF8AE23756": [
      "constructor(address _singleton)"
    ],
    "eth:0x6d0ff67fb427422AfF35EEa8596949B374b09a52": [
      "constructor(address _owner)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function addressManager() view returns (address)",
      "function changeProxyAdmin(address _proxy, address _newAdmin)",
      "function getProxyAdmin(address _proxy) view returns (address)",
      "function getProxyImplementation(address _proxy) view returns (address)",
      "function implementationName(address) view returns (string)",
      "function isUpgrading() view returns (bool)",
      "function owner() view returns (address)",
      "function proxyType(address) view returns (uint8)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function setAddressManager(address _address)",
      "function setImplementationName(address _address, string _name)",
      "function setProxyType(address _address, uint8 _type)",
      "function setUpgrading(bool _upgrading)",
      "function transferOwnership(address newOwner)",
      "function upgrade(address _proxy, address _implementation)",
      "function upgradeAndCall(address _proxy, address _implementation, bytes _data) payable"
    ],
    "eth:0x6d4f9f9f8f0155509ecd6Ac6c544fF27999845CC": [
      "constructor(address _logic, address initialOwner, bytes _data) payable",
      "error AddressEmptyCode(address target)",
      "error ERC1967InvalidAdmin(address admin)",
      "error ERC1967InvalidImplementation(address implementation)",
      "error ERC1967NonPayable()",
      "error FailedCall()",
      "error ProxyDeniedAdminAccess()",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)"
    ],
    "eth:0x74034597d29613CC8C0BDc8780e1d292A553Bd32": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "eth:0x7aE1d3BD877a4C5CA257404ce26BE93A02C98013": [
      "constructor()",
      "event ERC721BridgeFinalized(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 tokenId, bytes extraData)",
      "event ERC721BridgeInitiated(address indexed localToken, address indexed remoteToken, address indexed from, address to, uint256 tokenId, bytes extraData)",
      "event Initialized(uint8 version)",
      "function MESSENGER() view returns (address)",
      "function OTHER_BRIDGE() view returns (address)",
      "function bridgeERC721(address _localToken, address _remoteToken, uint256 _tokenId, uint32 _minGasLimit, bytes _extraData)",
      "function bridgeERC721To(address _localToken, address _remoteToken, address _to, uint256 _tokenId, uint32 _minGasLimit, bytes _extraData)",
      "function deposits(address, address, uint256) view returns (bool)",
      "function finalizeBridgeERC721(address _localToken, address _remoteToken, address _from, address _to, uint256 _tokenId, bytes _extraData)",
      "function initialize(address _messenger, address _superchainConfig)",
      "function messenger() view returns (address)",
      "function otherBridge() view returns (address)",
      "function paused() view returns (bool)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "eth:0x7b465370BB7A333f99edd19599EB7Fb1c2D3F8D2": [
      "constructor()",
      "error AnchorStateRegistry_AnchorGameBlacklisted()",
      "error AnchorStateRegistry_InvalidAnchorGame()",
      "error AnchorStateRegistry_Unauthorized()",
      "event AnchorNotUpdated(address indexed game)",
      "event AnchorUpdated(address indexed game)",
      "event Initialized(uint8 version)",
      "function anchorGame() view returns (address)",
      "function anchors(uint32) view returns (bytes32, uint256)",
      "function disputeGameFactory() view returns (address)",
      "function getAnchorRoot() view returns (bytes32, uint256)",
      "function initialize(address _superchainConfig, address _disputeGameFactory, address _portal, tuple(bytes32 root, uint256 l2BlockNumber) _startingAnchorRoot)",
      "function isGameBlacklisted(address _game) view returns (bool)",
      "function isGameClaimValid(address _game) view returns (bool)",
      "function isGameFinalized(address _game) view returns (bool)",
      "function isGameProper(address _game) view returns (bool)",
      "function isGameRegistered(address _game) view returns (bool)",
      "function isGameResolved(address _game) view returns (bool)",
      "function isGameRespected(address _game) view returns (bool)",
      "function isGameRetired(address _game) view returns (bool)",
      "function portal() view returns (address)",
      "function respectedGameType() view returns (uint32)",
      "function setAnchorState(address _game)",
      "function superchainConfig() view returns (address)",
      "function version() view returns (string)"
    ],
    "eth:0x81c16F89222C32806Daf01f5129937dFE19D525e": [
      "constructor()",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AssetsTooLarge(uint256 availableAssets, uint256 requestedAssets)",
      "error CannotCompleteMigration(uint256 requiredAssets, uint256 receivedAssets, uint256 assetsInMigrationFund)",
      "error CannotRebalanceReserve()",
      "error ContractNotSupportedOnThisNetwork()",
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)",
      "error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)",
      "error ERC20InvalidApprover(address approver)",
      "error ERC20InvalidReceiver(address receiver)",
      "error ERC20InvalidSender(address sender)",
      "error ERC20InvalidSpender(address spender)",
      "error ERC2612ExpiredSignature(uint256 deadline)",
      "error ERC2612InvalidSigner(address signer, address owner)",
      "error EnforcedPause()",
      "error ExcessiveYieldVaultSharesBurned(uint256 burnedShares, uint256 withdrawnAssets)",
      "error ExpectedPause()",
      "error IncorrectAmountOfSharesMinted(uint256 mintedShares, uint256 requiredShares)",
      "error IncorrectAmountOfSharesRedeemed(uint256 redeemedShares, uint256 requiredShares)",
      "error IncorrectMsgValue(uint256 msgValue, uint256 requestedAssets)",
      "error InsufficientUnderlyingTokenReceived(uint256 receivedAssets, uint256 requestedAssets)",
      "error InsufficientYieldVaultSharesMinted(uint256 depositedAssets, uint256 mintedShares)",
      "error InvalidAccountNonce(address account, uint256 currentNonce)",
      "error InvalidAmountInERC20Permit(uint256 amount, uint256 minimumAmount)",
      "error InvalidAssets()",
      "error InvalidDestinationNetworkId()",
      "error InvalidInitialization()",
      "error InvalidInitializer()",
      "error InvalidLxLyBridge()",
      "error InvalidMigrationManager()",
      "error InvalidMinimumReservePercentage()",
      "error InvalidName()",
      "error InvalidOriginNetwork()",
      "error InvalidOwner()",
      "error InvalidOwnerInERC20Permit(address owner, address expectedOwner)",
      "error InvalidPermitData()",
      "error InvalidReceiver()",
      "error InvalidSelectorInERC20Permit(bytes4 selector)",
      "error InvalidShares()",
      "error InvalidSpenderInERC20Permit(address spender, address expectedSpender)",
      "error InvalidSymbol()",
      "error InvalidUnderlyingToken()",
      "error InvalidVaultBridgeTokenPart2()",
      "error InvalidYieldRecipient()",
      "error InvalidYieldVault()",
      "error InvalidYieldVaultMaximumSlippagePercentage()",
      "error MinimumYieldVaultDepositNotMet(uint256 assetsToDeposit, uint256 minimumYieldVaultDeposit)",
      "error NoNeedToRebalanceReserve()",
      "error NoYield()",
      "error NotInitializing()",
      "error ReentrancyGuardReentrantCall()",
      "error SafeERC20FailedOperation(address token)",
      "error Unauthorized()",
      "error UnknownError(bytes data)",
      "error UnknownFunction(bytes4 functionSelector)",
      "error YieldVaultDepositFailed(uint256 assetsToDeposit, uint256 depositLimit)",
      "error YieldVaultRedemptionFailed(uint256 sharesToRedeem, uint256 redemptionLimit)",
      "error YieldVaultWithdrawalFailed(uint256 assetsToWithdraw, uint256 withdrawalLimit)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Burned(uint256 vbTokenAmount)",
      "event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares)",
      "event DonatedAsYield(address indexed who, uint256 assets)",
      "event DonatedForCompletingMigration(address indexed who, uint256 assets)",
      "event EIP712DomainChanged()",
      "event Initialized(uint64 version)",
      "event MigrationCompleted(uint32 indexed originNetwork, uint256 indexed shares, uint256 indexed assets, uint256 migrationFeesFundUtilization)",
      "event MinimumReservePercentageSet(uint256 minimumReservePercentage)",
      "event Paused(address account)",
      "event ReserveRebalanced(uint256 oldReservedAssets, uint256 newReservedAssets, uint256 reservePercentage)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event TransferFeeCalculatorSet(address transferFeeCalculator)",
      "event Unpaused(address account)",
      "event Withdraw(address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares)",
      "event YieldCollected(address indexed yieldRecipient, uint256 vbTokenAmount)",
      "event YieldRecipientSet(address indexed yieldRecipient)",
      "event YieldVaultDrained(uint256 redeemedShares, uint256 receivedAssets)",
      "event YieldVaultMaximumSlippagePercentageSet(uint256 slippagePercentage)",
      "event YieldVaultSet(address yieldVault)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function PAUSER_ROLE() view returns (bytes32)",
      "function REBALANCER_ROLE() view returns (bytes32)",
      "function YIELD_COLLECTOR_ROLE() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function asset() view returns (address assetTokenAddress)",
      "function backingDifference() view returns (bool positive, uint256 difference)",
      "function balanceOf(address account) view returns (uint256)",
      "function claimAndRedeem(bytes32[32] smtProofLocalExitRoot, bytes32[32] smtProofRollupExitRoot, uint256 globalIndex, bytes32 mainnetExitRoot, bytes32 rollupExitRoot, address destinationAddress, uint256 amount, address receiver, bytes metadata) returns (uint256 assets)",
      "function convertToAssets(uint256 shares) pure returns (uint256 assets)",
      "function convertToShares(uint256 assets) pure returns (uint256 shares)",
      "function decimals() view returns (uint8)",
      "function deposit(uint256 assets, address receiver) returns (uint256 shares)",
      "function depositAndBridge(uint256 assets, address receiver, uint32 destinationNetworkId, bool forceUpdateGlobalExitRoot) returns (uint256 shares)",
      "function depositGasToken(address receiver) payable returns (uint256 shares)",
      "function depositGasTokenAndBridge(address destinationAddress, uint32 destinationNetworkId, bool forceUpdateGlobalExitRoot) payable returns (uint256 shares)",
      "function depositWithPermit(uint256 assets, address receiver, bytes permitData) returns (uint256 shares)",
      "function depositWithPermitAndBridge(uint256 assets, address receiver, uint32 destinationNetworkId, bool forceUpdateGlobalExitRoot, bytes permitData) returns (uint256 shares)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address initializer_, tuple(address owner, string name, string symbol, address underlyingToken, uint256 minimumReservePercentage, address yieldVault, address yieldRecipient, address lxlyBridge, uint256 minimumYieldVaultDeposit, address migrationManager, uint256 yieldVaultMaximumSlippagePercentage, address vaultBridgeTokenPart2) initParams)",
      "function lxlyBridge() view returns (address)",
      "function lxlyId() view returns (uint32)",
      "function maxDeposit(address) view returns (uint256 maxAssets)",
      "function maxMint(address) view returns (uint256 maxShares)",
      "function maxRedeem(address owner) view returns (uint256 maxShares)",
      "function maxWithdraw(address owner) view returns (uint256 maxAssets)",
      "function migrationFeesFund() view returns (uint256)",
      "function migrationManager() view returns (address)",
      "function minimumReservePercentage() view returns (uint256)",
      "function minimumYieldVaultDeposit() view returns (uint256)",
      "function mint(uint256 shares, address receiver) returns (uint256 assets)",
      "function mintWithGasToken(uint256 shares, address receiver) payable returns (uint256 assets)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function paused() view returns (bool)",
      "function performReversibleYieldVaultDeposit(uint256 assets)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function previewDeposit(uint256 assets) view returns (uint256 shares)",
      "function previewMint(uint256 shares) view returns (uint256 assets)",
      "function previewRedeem(uint256 shares) view returns (uint256 assets)",
      "function previewWithdraw(uint256 assets) view returns (uint256 shares)",
      "function redeem(uint256 shares, address receiver, address owner) returns (uint256 assets)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function reservePercentage() view returns (uint256)",
      "function reservedAssets() view returns (uint256)",
      "function revokeRole(bytes32 role, address account)",
      "function stakedAssets() view returns (uint256)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function totalAssets() view returns (uint256 totalManagedAssets)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function underlyingToken() view returns (address)",
      "function version() pure returns (string)",
      "function withdraw(uint256 assets, address receiver, address owner) returns (uint256 shares)",
      "function yield() view returns (uint256)",
      "function yieldRecipient() view returns (address)",
      "function yieldVault() view returns (address)",
      "function yieldVaultMaximumSlippagePercentage() view returns (uint256)"
    ],
    "eth:0x827e86072B06674a077f592A531dcE4590aDeCdB": [
      "constructor(address _singleton)"
    ],
    "eth:0x8970650CF3f1E57cA804C65B4DBcFf698789FE30": [
      "constructor(address initialOwner)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0x98906C3f90A06B5484DD67bf32938815d2993dBC": [
      "constructor(address _owner)",
      "function getImplementation() returns (address)",
      "function getOwner() returns (address)",
      "function setCode(bytes _code)",
      "function setOwner(address _owner)",
      "function setStorage(bytes32 _key, bytes32 _value)"
    ],
    "eth:0x9d851f8b8751c5FbC09b9E74E6e68E9950949052": [
      "constructor(address _singleton)"
    ],
    "eth:0xA84C37cD0b9bA1B43276C11976DBE9d1344C7f4E": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "eth:0xA8C31B2edd84c654d06d626383f4154D1E40C5Ff": [
      "constructor(address _singleton)"
    ],
    "eth:0xb6e1f8B589A14B79DDD3aD7F0589AB548c70C174": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "eth:0xC6dD6399eAE419A0a33A8dc307f4c1dB26D30e45": [
      "constructor()",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error CannotWrapGasToken()",
      "error EnforcedPause()",
      "error ExpectedPause()",
      "error InsufficientUnderlyingTokenBalanceAfterWrapping(uint256 newBalance, uint256 expectedBalance)",
      "error InvalidInitialization()",
      "error InvalidLayerYLxLyId()",
      "error InvalidLxLyBridge()",
      "error InvalidNativeConverter()",
      "error InvalidOwner()",
      "error InvalidUnderlyingToken()",
      "error InvalidVbToken()",
      "error NonMatchingInputLengths()",
      "error NotInitializing()",
      "error ReentrancyGuardReentrantCall()",
      "error SafeERC20FailedOperation(address token)",
      "error Unauthorized()",
      "event Initialized(uint64 version)",
      "event NativeConverterConfigured(uint32 indexed layerYLxlyId, address indexed nativeConverter, address indexed vbToken)",
      "event Paused(address account)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Unpaused(address account)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function PAUSER_ROLE() view returns (bytes32)",
      "function configureNativeConverters(uint32[] layerYLxlyIds, address[] nativeConverters, address vbToken)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address owner_, address lxlyBridge_)",
      "function lxlyBridge() view returns (address)",
      "function nativeConvertersConfiguration(uint32 layerYLxlyId, address nativeConverter) view returns (tuple(address vbToken, address underlyingToken) tokenPair)",
      "function onMessageReceived(address originAddress, uint32 originNetwork, bytes data) payable",
      "function pause()",
      "function paused() view returns (bool)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function revokeRole(bytes32 role, address account)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function unpause()",
      "function version() pure returns (string)"
    ],
    "eth:0xcC865B0324121b43728176024f58bdbB3afd6f29": [
      "constructor()",
      "error AccessControlBadConfirmation()",
      "error AccessControlUnauthorizedAccount(address account, bytes32 neededRole)",
      "error AssetsTooLarge(uint256 availableAssets, uint256 requestedAssets)",
      "error CannotCompleteMigration(uint256 requiredAssets, uint256 receivedAssets, uint256 assetsInMigrationFund)",
      "error CannotRebalanceReserve()",
      "error ECDSAInvalidSignature()",
      "error ECDSAInvalidSignatureLength(uint256 length)",
      "error ECDSAInvalidSignatureS(bytes32 s)",
      "error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)",
      "error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)",
      "error ERC20InvalidApprover(address approver)",
      "error ERC20InvalidReceiver(address receiver)",
      "error ERC20InvalidSender(address sender)",
      "error ERC20InvalidSpender(address spender)",
      "error ERC2612ExpiredSignature(uint256 deadline)",
      "error ERC2612InvalidSigner(address signer, address owner)",
      "error EnforcedPause()",
      "error ExcessiveYieldVaultSharesBurned(uint256 burnedShares, uint256 withdrawnAssets)",
      "error ExpectedPause()",
      "error IncorrectAmountOfSharesMinted(uint256 mintedShares, uint256 requiredShares)",
      "error IncorrectAmountOfSharesRedeemed(uint256 redeemedShares, uint256 requiredShares)",
      "error InsufficientUnderlyingTokenReceived(uint256 receivedAssets, uint256 requestedAssets)",
      "error InsufficientYieldVaultSharesMinted(uint256 depositedAssets, uint256 mintedShares)",
      "error InvalidAccountNonce(address account, uint256 currentNonce)",
      "error InvalidAmountInERC20Permit(uint256 amount, uint256 minimumAmount)",
      "error InvalidAssets()",
      "error InvalidDestinationNetworkId()",
      "error InvalidInitialization()",
      "error InvalidInitializer()",
      "error InvalidLxLyBridge()",
      "error InvalidMigrationManager()",
      "error InvalidMinimumReservePercentage()",
      "error InvalidName()",
      "error InvalidOriginNetwork()",
      "error InvalidOwner()",
      "error InvalidOwnerInERC20Permit(address owner, address expectedOwner)",
      "error InvalidPermitData()",
      "error InvalidReceiver()",
      "error InvalidSelectorInERC20Permit(bytes4 selector)",
      "error InvalidShares()",
      "error InvalidSpenderInERC20Permit(address spender, address expectedSpender)",
      "error InvalidSymbol()",
      "error InvalidUnderlyingToken()",
      "error InvalidVaultBridgeTokenPart2()",
      "error InvalidYieldRecipient()",
      "error InvalidYieldVault()",
      "error InvalidYieldVaultMaximumSlippagePercentage()",
      "error MinimumYieldVaultDepositNotMet(uint256 assetsToDeposit, uint256 minimumYieldVaultDeposit)",
      "error NoNeedToRebalanceReserve()",
      "error NoYield()",
      "error NotInitializing()",
      "error ReentrancyGuardReentrantCall()",
      "error SafeERC20FailedOperation(address token)",
      "error Unauthorized()",
      "error UnknownError(bytes data)",
      "error UnknownFunction(bytes4 functionSelector)",
      "error YieldVaultDepositFailed(uint256 assetsToDeposit, uint256 depositLimit)",
      "error YieldVaultRedemptionFailed(uint256 sharesToRedeem, uint256 redemptionLimit)",
      "error YieldVaultWithdrawalFailed(uint256 assetsToWithdraw, uint256 withdrawalLimit)",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Burned(uint256 vbTokenAmount)",
      "event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares)",
      "event DonatedAsYield(address indexed who, uint256 assets)",
      "event DonatedForCompletingMigration(address indexed who, uint256 assets)",
      "event EIP712DomainChanged()",
      "event Initialized(uint64 version)",
      "event MigrationCompleted(uint32 indexed originNetwork, uint256 indexed shares, uint256 indexed assets, uint256 migrationFeesFundUtilization)",
      "event MinimumReservePercentageSet(uint256 minimumReservePercentage)",
      "event Paused(address account)",
      "event ReserveRebalanced(uint256 oldReservedAssets, uint256 newReservedAssets, uint256 reservePercentage)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "event TransferFeeCalculatorSet(address transferFeeCalculator)",
      "event Unpaused(address account)",
      "event Withdraw(address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares)",
      "event YieldCollected(address indexed yieldRecipient, uint256 vbTokenAmount)",
      "event YieldRecipientSet(address indexed yieldRecipient)",
      "event YieldVaultDrained(uint256 redeemedShares, uint256 receivedAssets)",
      "event YieldVaultMaximumSlippagePercentageSet(uint256 slippagePercentage)",
      "event YieldVaultSet(address yieldVault)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function PAUSER_ROLE() view returns (bytes32)",
      "function REBALANCER_ROLE() view returns (bytes32)",
      "function YIELD_COLLECTOR_ROLE() view returns (bytes32)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function asset() view returns (address assetTokenAddress)",
      "function backingDifference() view returns (bool positive, uint256 difference)",
      "function balanceOf(address account) view returns (uint256)",
      "function claimAndRedeem(bytes32[32] smtProofLocalExitRoot, bytes32[32] smtProofRollupExitRoot, uint256 globalIndex, bytes32 mainnetExitRoot, bytes32 rollupExitRoot, address destinationAddress, uint256 amount, address receiver, bytes metadata) returns (uint256 assets)",
      "function convertToAssets(uint256 shares) pure returns (uint256 assets)",
      "function convertToShares(uint256 assets) pure returns (uint256 shares)",
      "function decimals() view returns (uint8)",
      "function deposit(uint256 assets, address receiver) returns (uint256 shares)",
      "function depositAndBridge(uint256 assets, address receiver, uint32 destinationNetworkId, bool forceUpdateGlobalExitRoot) returns (uint256 shares)",
      "function depositWithPermit(uint256 assets, address receiver, bytes permitData) returns (uint256 shares)",
      "function depositWithPermitAndBridge(uint256 assets, address receiver, uint32 destinationNetworkId, bool forceUpdateGlobalExitRoot, bytes permitData) returns (uint256 shares)",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address initializer_, tuple(address owner, string name, string symbol, address underlyingToken, uint256 minimumReservePercentage, address yieldVault, address yieldRecipient, address lxlyBridge, uint256 minimumYieldVaultDeposit, address migrationManager, uint256 yieldVaultMaximumSlippagePercentage, address vaultBridgeTokenPart2) initParams)",
      "function lxlyBridge() view returns (address)",
      "function lxlyId() view returns (uint32)",
      "function maxDeposit(address) view returns (uint256 maxAssets)",
      "function maxMint(address) view returns (uint256 maxShares)",
      "function maxRedeem(address owner) view returns (uint256 maxShares)",
      "function maxWithdraw(address owner) view returns (uint256 maxAssets)",
      "function migrationFeesFund() view returns (uint256)",
      "function migrationManager() view returns (address)",
      "function minimumReservePercentage() view returns (uint256)",
      "function minimumYieldVaultDeposit() view returns (uint256)",
      "function mint(uint256 shares, address receiver) returns (uint256 assets)",
      "function name() view returns (string)",
      "function nonces(address owner) view returns (uint256)",
      "function paused() view returns (bool)",
      "function performReversibleYieldVaultDeposit(uint256 assets)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function previewDeposit(uint256 assets) view returns (uint256 shares)",
      "function previewMint(uint256 shares) view returns (uint256 assets)",
      "function previewRedeem(uint256 shares) view returns (uint256 assets)",
      "function previewWithdraw(uint256 assets) view returns (uint256 shares)",
      "function redeem(uint256 shares, address receiver, address owner) returns (uint256 assets)",
      "function renounceRole(bytes32 role, address callerConfirmation)",
      "function reservePercentage() view returns (uint256)",
      "function reservedAssets() view returns (uint256)",
      "function revokeRole(bytes32 role, address account)",
      "function stakedAssets() view returns (uint256)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function symbol() view returns (string)",
      "function totalAssets() view returns (uint256 totalManagedAssets)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)",
      "function underlyingToken() view returns (address)",
      "function version() pure returns (string)",
      "function withdraw(uint256 assets, address receiver, address owner) returns (uint256 shares)",
      "function yield() view returns (uint256)",
      "function yieldRecipient() view returns (address)",
      "function yieldVault() view returns (address)",
      "function yieldVaultMaximumSlippagePercentage() view returns (uint256)"
    ],
    "eth:0xd0673F989bc3BA9314d0AAF28BfC84e99B7898CC": [
      "constructor(address _singleton)"
    ],
    "eth:0xD1e389c046FB734D2a0c7C390312210c408ba832": [
      "constructor(address initialOwner)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function UPGRADE_INTERFACE_VERSION() view returns (string)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function transferOwnership(address newOwner)",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "eth:0xe06278351d120288eDfCB963F934113Ca3C21AFe": [
      "constructor(address _admin)",
      "event AdminChanged(address previousAdmin, address newAdmin)",
      "event Upgraded(address indexed implementation)",
      "function admin() returns (address)",
      "function changeAdmin(address _admin)",
      "function implementation() returns (address)",
      "function upgradeTo(address _implementation)",
      "function upgradeToAndCall(address _implementation, bytes _data) payable returns (bytes)"
    ],
    "eth:0xe7FE45579D784DC83B0feD844A65f4cEEFDe5682": [
      "constructor(address _globalExitRootManager, address _pol, address _bridgeAddress, address _rollupManager, address _aggLayerGateway)",
      "error AggchainManagerCannotBeZero()",
      "error AggchainVKeyNotFound()",
      "error AggregationVkeyMustBeDifferentThanZero()",
      "error BatchAlreadyVerified()",
      "error BatchNotSequencedOrNotSequenceEnd()",
      "error CannotProposeFutureL2Output()",
      "error ExceedMaxVerifyBatches()",
      "error FinalAccInputHashDoesNotMatch()",
      "error FinalNumBatchBelowLastVerifiedBatch()",
      "error FinalNumBatchDoesNotMatchPendingState()",
      "error FinalPendingStateNumInvalid()",
      "error ForceBatchNotAllowed()",
      "error ForceBatchTimeoutNotExpired()",
      "error ForceBatchesAlreadyActive()",
      "error ForceBatchesDecentralized()",
      "error ForceBatchesNotAllowedOnEmergencyState()",
      "error ForceBatchesOverflow()",
      "error ForcedDataDoesNotMatch()",
      "error GasTokenNetworkMustBeZeroOnEther()",
      "error GlobalExitRootNotExist()",
      "error HaltTimeoutNotExpired()",
      "error HaltTimeoutNotExpiredAfterEmergencyState()",
      "error HugeTokenMetadataNotSupported()",
      "error InitNumBatchAboveLastVerifiedBatch()",
      "error InitNumBatchDoesNotMatchPendingState()",
      "error InitSequencedBatchDoesNotMatch()",
      "error InvalidAggLayerGatewayAddress()",
      "error InvalidAggchainDataLength()",
      "error InvalidAggchainType()",
      "error InvalidInitializeFunction()",
      "error InvalidInitializeTransaction()",
      "error InvalidInitializer()",
      "error InvalidProof()",
      "error InvalidRangeBatchTimeTarget()",
      "error InvalidRangeForceBatchTimeout()",
      "error InvalidRangeMultiplierBatchFee()",
      "error InvalidZeroAddress()",
      "error L1InfoTreeLeafCountInvalid()",
      "error L2BlockNumberLessThanNextBlockNumber()",
      "error L2BlockTimeMustBeGreaterThanZero()",
      "error L2OutputRootCannotBeZero()",
      "error MaxTimestampSequenceInvalid()",
      "error NewAccInputHashDoesNotExist()",
      "error NewPendingStateTimeoutMustBeLower()",
      "error NewStateRootNotInsidePrime()",
      "error NewTrustedAggregatorTimeoutMustBeLower()",
      "error NotEnoughMaticAmount()",
      "error NotEnoughPOLAmount()",
      "error OldAccInputHashDoesNotExist()",
      "error OldStateRootDoesNotExist()",
      "error OnlyAdmin()",
      "error OnlyAggchainManager()",
      "error OnlyOptimisticModeManager()",
      "error OnlyPendingAdmin()",
      "error OnlyPendingAggchainManager()",
      "error OnlyPendingOptimisticModeManager()",
      "error OnlyPendingVKeyManager()",
      "error OnlyRollupManager()",
      "error OnlyTrustedAggregator()",
      "error OnlyTrustedSequencer()",
      "error OnlyVKeyManager()",
      "error OptimisticModeEnabled()",
      "error OptimisticModeNotEnabled()",
      "error OwnedAggchainVKeyAlreadyAdded()",
      "error OwnedAggchainVKeyNotFound()",
      "error PendingStateDoesNotExist()",
      "error PendingStateInvalid()",
      "error PendingStateNotConsolidable()",
      "error PendingStateTimeoutExceedHaltAggregationTimeout()",
      "error RangeVkeyCommitmentMustBeDifferentThanZero()",
      "error RollupConfigHashMustBeDifferentThanZero()",
      "error SequenceZeroBatches()",
      "error SequencedTimestampBelowForcedTimestamp()",
      "error SequencedTimestampInvalid()",
      "error StartL2TimestampMustBeLessThanCurrentTime()",
      "error StoredRootMustBeDifferentThanNewRoot()",
      "error SubmissionIntervalMustBeGreaterThanZero()",
      "error TransactionsLengthAboveMax()",
      "error TrustedAggregatorTimeoutExceedHaltAggregationTimeout()",
      "error TrustedAggregatorTimeoutNotExpired()",
      "error UseDefaultGatewayAlreadyDisabled()",
      "error UseDefaultGatewayAlreadyEnabled()",
      "error ZeroValueAggchainVKey()",
      "event AcceptAdminRole(address newAdmin)",
      "event AcceptAggchainManagerRole(address oldAggchainManager, address newAggchainManager)",
      "event AcceptOptimisticModeManagerRole(address oldOptimisticModeManager, address newOptimisticModeManager)",
      "event AcceptVKeyManagerRole(address oldVKeyManager, address newVKeyManager)",
      "event AddAggchainVKey(bytes4 selector, bytes32 newAggchainVKey)",
      "event AggregationVkeyUpdated(bytes32 indexed oldAggregationVkey, bytes32 indexed newAggregationVkey)",
      "event DisableOptimisticMode()",
      "event DisableUseDefaultGatewayFlag()",
      "event EnableOptimisticMode()",
      "event EnableUseDefaultGatewayFlag()",
      "event Initialized(uint8 version)",
      "event OutputProposed(bytes32 indexed outputRoot, uint256 indexed l2OutputIndex, uint256 indexed l2BlockNumber, uint256 l1Timestamp)",
      "event RangeVkeyCommitmentUpdated(bytes32 indexed oldRangeVkeyCommitment, bytes32 indexed newRangeVkeyCommitment)",
      "event RollupConfigHashUpdated(bytes32 indexed oldRollupConfigHash, bytes32 indexed newRollupConfigHash)",
      "event SetTrustedSequencer(address newTrustedSequencer)",
      "event SetTrustedSequencerURL(string newTrustedSequencerURL)",
      "event SubmissionIntervalUpdated(uint256 oldSubmissionInterval, uint256 newSubmissionInterval)",
      "event TransferAdminRole(address newPendingAdmin)",
      "event TransferAggchainManagerRole(address currentAggchainManager, address newPendingAggchainManager)",
      "event TransferOptimisticModeManagerRole(address currentOptimisticModeManager, address newPendingOptimisticModeManager)",
      "event TransferVKeyManagerRole(address currentVKeyManager, address newPendingVKeyManager)",
      "event UpdateAggchainVKey(bytes4 selector, bytes32 previousAggchainVKey, bytes32 newAggchainVKey)",
      "function AGGCHAIN_TYPE() view returns (bytes2)",
      "function CONSENSUS_TYPE() view returns (uint32)",
      "function L2_BLOCK_TIME() view returns (uint256)",
      "function SUBMISSION_INTERVAL() view returns (uint256)",
      "function acceptAdminRole()",
      "function acceptAggchainManagerRole()",
      "function acceptOptimisticModeManagerRole()",
      "function acceptVKeyManagerRole()",
      "function addOwnedAggchainVKey(bytes4 aggchainVKeySelector, bytes32 newAggchainVKey)",
      "function admin() view returns (address)",
      "function aggLayerGateway() view returns (address)",
      "function aggchainManager() view returns (address)",
      "function aggregationVkey() view returns (bytes32)",
      "function bridgeAddress() view returns (address)",
      "function computeL2Timestamp(uint256 _l2BlockNumber) view returns (uint256)",
      "function disableOptimisticMode()",
      "function disableUseDefaultGatewayFlag()",
      "function enableOptimisticMode()",
      "function enableUseDefaultGatewayFlag()",
      "function forceBatchAddress() view returns (address)",
      "function forceBatchTimeout() view returns (uint64)",
      "function forcedBatches(uint64) view returns (bytes32)",
      "function gasTokenAddress() view returns (address)",
      "function gasTokenNetwork() view returns (uint32)",
      "function getAggchainHash(bytes aggchainData) view returns (bytes32)",
      "function getAggchainTypeFromSelector(bytes4 aggchainVKeySelector) pure returns (bytes2)",
      "function getAggchainVKey(bytes4 aggchainVKeySelector) view returns (bytes32 aggchainVKey)",
      "function getAggchainVKeySelector(bytes2 aggchainVKeyVersion, bytes2 aggchainType) pure returns (bytes4)",
      "function getAggchainVKeyVersionFromSelector(bytes4 aggchainVKeySelector) pure returns (bytes2)",
      "function getL2Output(uint256 _l2OutputIndex) view returns (tuple(bytes32 outputRoot, uint128 timestamp, uint128 l2BlockNumber))",
      "function globalExitRootManager() view returns (address)",
      "function initAggchainManager(address newAggchainManager)",
      "function initialize(bytes initializeBytesAggchain)",
      "function initialize(address, address, uint32, address, string, string) pure",
      "function l2BlockTime() view returns (uint256)",
      "function lastAccInputHash() view returns (bytes32)",
      "function lastForceBatch() view returns (uint64)",
      "function lastForceBatchSequenced() view returns (uint64)",
      "function latestBlockNumber() view returns (uint256)",
      "function latestOutputIndex() view returns (uint256)",
      "function networkName() view returns (string)",
      "function nextBlockNumber() view returns (uint256)",
      "function nextOutputIndex() view returns (uint256)",
      "function onVerifyPessimistic(bytes aggchainData)",
      "function optimisticMode() view returns (bool)",
      "function optimisticModeManager() view returns (address)",
      "function ownedAggchainVKeys(bytes4 aggchainVKeySelector) view returns (bytes32 ownedAggchainVKey)",
      "function pendingAdmin() view returns (address)",
      "function pendingAggchainManager() view returns (address)",
      "function pendingOptimisticModeManager() view returns (address)",
      "function pendingVKeyManager() view returns (address)",
      "function pol() view returns (address)",
      "function rangeVkeyCommitment() view returns (bytes32)",
      "function rollupConfigHash() view returns (bytes32)",
      "function rollupManager() view returns (address)",
      "function setTrustedSequencer(address newTrustedSequencer)",
      "function setTrustedSequencerURL(string newTrustedSequencerURL)",
      "function startingBlockNumber() view returns (uint256)",
      "function startingTimestamp() view returns (uint256)",
      "function submissionInterval() view returns (uint256)",
      "function transferAdminRole(address newPendingAdmin)",
      "function transferAggchainManagerRole(address newAggchainManager)",
      "function transferOptimisticModeManagerRole(address newOptimisticModeManager)",
      "function transferVKeyManagerRole(address newVKeyManager)",
      "function trustedSequencer() view returns (address)",
      "function trustedSequencerURL() view returns (string)",
      "function updateAggregationVkey(bytes32 _aggregationVkey)",
      "function updateOwnedAggchainVKey(bytes4 aggchainVKeySelector, bytes32 updatedAggchainVKey)",
      "function updateRangeVkeyCommitment(bytes32 _rangeVkeyCommitment)",
      "function updateRollupConfigHash(bytes32 _rollupConfigHash)",
      "function updateSubmissionInterval(uint256 _submissionInterval)",
      "function useDefaultGateway() view returns (bool)",
      "function vKeyManager() view returns (address)",
      "function version() view returns (string)"
    ],
    "eth:0xEaB94275eD336D80d4F46EA8Ea0427e351f11D65": [
      "event AddressSet(string indexed name, address newAddress, address oldAddress)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "function getAddress(string _name) view returns (address)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function setAddress(string _name, address _address)",
      "function transferOwnership(address newOwner)"
    ],
    "eth:0xF027F4A985560fb13324e943edf55ad6F1d15Dc1": [
      "constructor(address _oracle)",
      "error InvalidExitedValue()",
      "error InvalidMemoryProof()",
      "error InvalidPC()",
      "error InvalidRMWInstruction()",
      "error InvalidSecondMemoryProof()",
      "function oracle() view returns (address oracle_)",
      "function step(bytes _stateData, bytes _proof, bytes32 _localContext) returns (bytes32 postState_)",
      "function version() view returns (string)"
    ],
    "eth:0xf4F2f5F6bAdBE05433C4604320ecC56BbECBC04E": [
      "constructor(address _singleton)"
    ]
  },
  "usedTemplates": {
    "global/ProxyAdmin": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "opstack/AddressManager": "0x7d24ef68050bed263f4cfd0471631d16b2f33814fbbd4e9aadf666c81bbf0c2d",
    "opstack/AnchorStateRegistry": "0x0745ad704a222adcc2bfc1e083729a31e749ccc5465e0adb2995f87981c21fba",
    "opstack/DelayedWETH": "0x6204eff8fefa7dd586f22b14f80248f0a502a2faa646eecb1203180349f26d2d",
    "opstack/DisputeGameFactory": "0xdec1700fd03bf991ef19b9aa3b5f992abf853de33e6ebae19b785a8d72b37356",
    "opstack/L1CrossDomainMessenger": "0x595eac283f949c40d81ad81550396e35b3345dca8e49cfca901122a2b4046561",
    "opstack/L1ERC721Bridge": "0xafa13690ce8b74136cc340eaa940528c1a96aaf7b4c95715b884decb544f7c67",
    "opstack/L1StandardBridge": "0x8cbd85e2852b26d67c72cb658b98929c845a20ccce30e84f84644c0b39e9252e",
    "opstack/MIPS": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "opstack/OptimismMintableERC20Factory": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "opstack/OptimismPortal2_noForce": "0x7ac072ef679e441e8543bbc677bcba6f25016b1232f4ee456519a28e3c3e2dee",
    "opstack/PermissionedDisputeGame": "0x7767458874d21640683474eaa7fb0c67552d513da9358bb1bcff2c755a165df3",
    "opstack/PreimageOracle": "0x6c435c8491ea31b14ac576d12c5ae3988f849f8c365b3989e522aba5f84ca1ec",
    "opstack/SuperchainConfigNoGuard": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "opstack/SystemConfig": "0x499f136cde0c11e214b4e9ef6ee1149701d33e15d10cb3284d703257956f96d3",
    "polygon-cdk/AggchainFEP": "0xe76daa21c193a887d44735f121af17f3fd3a776d2afb00817fa72b98ea4bfc6a",
    "polygon-cdk/GenericVaultBridgeToken": "0xd2f17c711d335952bd81aea0281b2e00062cc2cadf4fceec51609fb741d004a7",
    "polygon-cdk/MigrationManager": "0xf0db03721cc15af078d6a93a1b8d8f8e438c2611fdb2fb5c22d599e6c939a384"
  },
  "usedBlockNumbers": { "ethereum": 23082286 },
  "permissionsConfigHash": "0xe3b24dc9d40320cf35a8cbac2122c7b1f69aa352f417f4c122bafef35ad29fc0"
}
