{
  "name": "facet",
  "chain": "ethereum",
  "timestamp": 1754411666,
  "configHash": "0x09c22825d1caee100606b8ecceddb408e78592894ce5a21699d8abe6fb78b596",
  "entries": [
    {
      "name": "Inbox",
      "address": "eth:0x00000000000000000000000000000000000FacE7",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "SP1Verifier",
      "address": "eth:0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459",
      "type": "Contract",
      "template": "succinct/SP1Verifier",
      "sourceHashes": [
        "0x3ffef9f4f4cd24743e4612a4c1011ca13c0b983c52bbe8f4a6d40a58e5eeae42"
      ],
      "proxyType": "immutable",
      "description": "Verifier contract for SP1 proofs (v5.0.0).",
      "sinceTimestamp": 1748550023,
      "sinceBlock": 22590744,
      "values": {
        "$immutable": true,
        "VERIFIER_HASH": "0xd4e8ecd2357dd882209800acd6abb443d231cf287d77ba62b732ce937c8b56e7",
        "VERSION": "v5.0.0"
      },
      "implementationNames": {
        "eth:0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459": "SP1Verifier"
      }
    },
    {
      "name": "L1ETHBridge",
      "address": "eth:0x13D21988F08997d20822d247A5015C4D13102F88",
      "type": "Contract",
      "template": "facet/L1ETHBridge",
      "sourceHashes": [
        "0x69944b23a896634033db21c6cc3f25d885368fb5c81ff579eb5433bafb47fc68"
      ],
      "proxyType": "immutable",
      "description": "L1ETHBridge is an ETH bridge built on top of Rollup contract. It is the selected canonical bridge for this risk analysis. It used to bridge ETH from L1 to L2. Note that the token received on L2 has a different ticker/symbol than the token sent on L1.",
      "sinceTimestamp": 1753397063,
      "sinceBlock": 22992074,
      "values": {
        "$immutable": true,
        "l2Bridge": "eth:0x85e725E5b7E42f3377cB3A1Fdd8a5Ee6350d3850",
        "owner": "eth:0x0000000000000000000000000000000000000000",
        "paused": false,
        "rollup": "eth:0xd0E3721bba691d3735b0827edBe893789cA1486D",
        "withdrawalDelay": 0
      },
      "implementationNames": {
        "eth:0x13D21988F08997d20822d247A5015C4D13102F88": "L1Bridge"
      },
      "category": { "name": "Canonical Bridges", "priority": 2 }
    },
    {
      "name": "FacetSafeModule",
      "address": "eth:0x3235AdE33cF7013f5b5A51089390396e931e6BCF",
      "type": "Contract",
      "template": "facet/FacetSafeModule",
      "sourceHashes": [
        "0xe72f875e22302b6f4ba7cf79658f0038ab2f434e188a6a5cf5db5dc59475f168"
      ],
      "proxyType": "immutable",
      "description": "Module that allows the Safe to send Facet transactions.",
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0xb2B01DeCb6cd36E7396b78D3744482627F22C525",
          "role": ".GnosisSafe_modules"
        }
      ],
      "sinceTimestamp": 1733593847,
      "sinceBlock": 21352215,
      "values": {
        "$immutable": true,
        "facetProxyAddress": "eth:0xC9F2d55C56Ef9fE4262c4d5b48d8032241AF4d25"
      },
      "implementationNames": {
        "eth:0x3235AdE33cF7013f5b5A51089390396e931e6BCF": "FacetSafeModule"
      }
    },
    {
      "name": "SP1Verifier",
      "address": "eth:0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5",
      "type": "Contract",
      "template": "succinct/SP1Verifier",
      "sourceHashes": [
        "0x3a6132d983fd1e502fe3b75fbf74f0debc0d183b404d144b5220d8d5b3645582"
      ],
      "proxyType": "immutable",
      "description": "Verifier contract for SP1 proofs (v5.0.0).",
      "sinceTimestamp": 1748550083,
      "sinceBlock": 22590749,
      "values": {
        "$immutable": true,
        "VERIFIER_HASH": "0xa4594c59bbc142f3b81c3ecb7f50a7c34bc9af7c4c444b5d48b795427e285913",
        "VERSION": "v5.0.0"
      },
      "implementationNames": {
        "eth:0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5": "SP1Verifier"
      }
    },
    {
      "address": "eth:0x615452db5467849689E98a8C5C242A96cF768a94",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "propose",
          "from": "eth:0xd0E3721bba691d3735b0827edBe893789cA1486D",
          "role": ".whitelistedProposers"
        }
      ]
    },
    {
      "name": "SP1VerifierGateway",
      "address": "eth:0x70C7FdB9e543bD15cd392df04e6d4BD05AfD8A66",
      "type": "Contract",
      "template": "succinct/SP1VerifierGateway",
      "sourceHashes": [
        "0xc651adcd746b8794c5b6c418aeb146f1b13b207cc9d2712ba66a42bd4b29af37"
      ],
      "proxyType": "immutable",
      "description": "This contract is the router for zk proof verification. It stores the mapping between identifiers and the address of onchain verifier contracts, routing each identifier to the corresponding verifier contract.",
      "sinceTimestamp": 1751301179,
      "sinceBlock": 22818451,
      "values": {
        "$immutable": true,
        "activeVerifiers": [
          {
            "selector": "0xd4e8ecd2",
            "verifier": "eth:0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459"
          },
          {
            "selector": "0xa4594c59",
            "verifier": "eth:0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5"
          }
        ],
        "allVerifiers": [
          {
            "selector": "0xd4e8ecd2",
            "verifier": "eth:0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459"
          },
          {
            "selector": "0xa4594c59",
            "verifier": "eth:0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5"
          }
        ],
        "owner": "eth:0x0000000000000000000000000000000000000000"
      },
      "fieldMeta": {
        "activeVerifiers": {
          "description": "Verifiers that are routed to by their selector and not frozen."
        },
        "allVerifiers": {
          "description": "All verifiers that were ever routed to by this gateway."
        }
      },
      "implementationNames": {
        "eth:0x70C7FdB9e543bD15cd392df04e6d4BD05AfD8A66": "SP1VerifierGateway"
      }
    },
    {
      "address": "eth:0x75deB70b12689e9CaeF4b316eDD04F213Af06127",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x77610267a344Eb39955c20908978830f61e2373C",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0x85e725E5b7E42f3377cB3A1Fdd8a5Ee6350d3850",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Facet Multisig",
      "address": "eth:0xb2B01DeCb6cd36E7396b78D3744482627F22C525",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0xd0E3721bba691d3735b0827edBe893789cA1486D",
          "description": "can set the whitelisted proposers.",
          "role": ".owner"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1701094787,
      "sinceBlock": 18663532,
      "values": {
        "$immutable": false,
        "$implementation": "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "eth:0x77610267a344Eb39955c20908978830f61e2373C",
          "eth:0xD66Cb98865181a890ffee5654fAe1D6b4D1827a7",
          "eth:0x75deB70b12689e9CaeF4b316eDD04F213Af06127"
        ],
        "$threshold": 2,
        "domainSeparator": "0x4a566a7839f4fa7ba86474f484e7e11b96ee4927109cfcfdddad250cd7a3fec3",
        "getChainId": 1,
        "GnosisSafe_modules": [
          "eth:0x3235AdE33cF7013f5b5A51089390396e931e6BCF",
          "eth:0xDB866fD9241cd32851Df760c1Ec536f3199B22cE"
        ],
        "multisigThreshold": "2 of 3 (67%)",
        "nonce": 308,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "eth:0xb2B01DeCb6cd36E7396b78D3744482627F22C525": "GnosisSafeProxy",
        "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "FacetSafeProxy",
      "address": "eth:0xC9F2d55C56Ef9fE4262c4d5b48d8032241AF4d25",
      "type": "Contract",
      "template": "facet/FacetSafeProxy",
      "sourceHashes": [
        "0xeeb64378c57fe40198d92b6136616a0243788e51e4d363d57f38a4c6ad891ff8"
      ],
      "proxyType": "immutable",
      "description": "Helper of the Safe Module that allows to send Facet transactions.",
      "sinceTimestamp": 1733593775,
      "sinceBlock": 21352209,
      "values": { "$immutable": true },
      "implementationNames": {
        "eth:0xC9F2d55C56Ef9fE4262c4d5b48d8032241AF4d25": "FacetSafeProxy"
      }
    },
    {
      "name": "Rollup",
      "address": "eth:0xd0E3721bba691d3735b0827edBe893789cA1486D",
      "type": "Contract",
      "template": "facet/Rollup",
      "sourceHashes": [
        "0x10b46b3a5fd93432baa3a1ae6ca022b0295206b71e75b9d5ded7d050ff31c12e"
      ],
      "proxyType": "immutable",
      "description": "Rollup contract for Facet. This is the core contract that manages the state of the rollup and its proof system.",
      "sinceTimestamp": 1753123523,
      "sinceBlock": 22969440,
      "values": {
        "$immutable": true,
        "AGG_VKEY": "0x00a133aaa30298590731a9ac4edce773ba91365e7bcdc7cf1aaca780104efffc",
        "anchorL2BlockNumber": 1661982,
        "anchorProposalId": 32,
        "anchorRoot": "0x7ba05cac12025bbf522ecad8ceb230a6e5d3b082c81e4a8ffb99b962566c0dba",
        "canonicalProposalFor": [],
        "canonicalProposalIdFor": [],
        "CHALLENGER_BOND": "5000000000000000000",
        "computeL2Timestamp": [],
        "FALLBACK_TIMEOUT_SECS": 1209600,
        "getAnchorRoot": [
          "0x7ba05cac12025bbf522ecad8ceb230a6e5d3b082c81e4a8ffb99b962566c0dba",
          1661982
        ],
        "getProposalsLength": 61,
        "isInFallbackWindow": [],
        "L2_BLOCK_TIME": 12,
        "L2_START_TIMESTAMP": 1753097123,
        "l2BlockAge": [],
        "MAX_CHALLENGE_SECS": 604800,
        "MAX_PROVE_SECS": 259200,
        "owner": "eth:0xb2B01DeCb6cd36E7396b78D3744482627F22C525",
        "PROPOSAL_INTERVAL": 1800,
        "PROPOSER_BOND": 1000000000000000,
        "RANGE_VKEY_COMMITMENT": "0x086ab4d935fcdee448c15bd365c3de90508ce1db1aa66b4f65bac4d7642a7d93",
        "renouncedOwner": "eth:0xdeaddeaddeaddeaddeaddeaddeaddeaddead0001",
        "ROLLUP_CONFIG_HASH": "0x9554c3fe04d8bd05d2dff01471781e1d9fbbdcfa58bda686ad883fe5451fd97c",
        "sequencerInbox": "eth:0x00000000000000000000000000000000000face7",
        "VERIFIER": "eth:0x70C7FdB9e543bD15cd392df04e6d4BD05AfD8A66",
        "version": "1.0.0",
        "whitelistedProposers": [
          "eth:0x615452db5467849689E98a8C5C242A96cF768a94"
        ]
      },
      "implementationNames": {
        "eth:0xd0E3721bba691d3735b0827edBe893789cA1486D": "Rollup"
      },
      "category": { "name": "Local Infrastructure", "priority": 5 }
    },
    {
      "address": "eth:0xD66Cb98865181a890ffee5654fAe1D6b4D1827a7",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "eth:0xDeaDDEaDDeAdDeAdDEAdDEaddeAddEAdDEAd0001",
      "type": "EOA",
      "proxyType": "EOA"
    }
  ],
  "abis": {
    "eth:0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459": [
      "error InvalidProof()",
      "error WrongVerifierSelector(bytes4 received, bytes4 expected)",
      "function VERIFIER_HASH() pure returns (bytes32)",
      "function VERSION() pure returns (string)",
      "function Verify(bytes proof, uint256[] public_inputs) view returns (bool success)",
      "function hashPublicValues(bytes publicValues) pure returns (bytes32)",
      "function verifyProof(bytes32 programVKey, bytes publicValues, bytes proofBytes) view"
    ],
    "eth:0x13D21988F08997d20822d247A5015C4D13102F88": [
      "constructor(address _rollup)",
      "error ContentLengthMismatch()",
      "error EmptyItem()",
      "error InvalidDataRemainder()",
      "error InvalidDepositAmount()",
      "error InvalidHeader()",
      "error InvalidOutputRoot()",
      "error InvalidWithdrawalProof()",
      "error L2BridgeAlreadySet()",
      "error L2BridgeNotSet()",
      "error ProposalNotCanonical()",
      "error RootBlacklisted()",
      "error UnexpectedList()",
      "error UnexpectedString()",
      "error WithdrawalAlreadyFinalized()",
      "error WithdrawalAlreadyProven()",
      "error WithdrawalDelayNotMet()",
      "error WithdrawalNotProven()",
      "event DepositInitiated(address indexed from, address indexed to, uint256 amount)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Paused(address account)",
      "event RollupUpdated(address indexed oldRollup, address indexed newRollup)",
      "event RootBlacklistStatusChanged(bytes32 indexed root, bool blacklisted)",
      "event Unpaused(address account)",
      "event WithdrawalDelayUpdated(uint256 oldDelay, uint256 newDelay)",
      "event WithdrawalFinalized(address indexed to, uint256 amount, uint256 nonce)",
      "event WithdrawalProven(address indexed rollup, address indexed to, uint256 amount, uint256 nonce, uint256 proposalId)",
      "function finalizeWithdrawal(address to, uint256 amount, uint256 nonce)",
      "function finalized(bytes32) view returns (bool)",
      "function initiateDeposit() payable",
      "function l2Bridge() view returns (address)",
      "function owner() view returns (address)",
      "function pause()",
      "function paused() view returns (bool)",
      "function proveWithdrawal(address to, uint256 amount, uint256 nonce, uint256 proposalId, tuple(bytes32 version, bytes32 stateRoot, bytes32 messagePasserStorageRoot, bytes32 latestBlockhash) rootProof, bytes[] withdrawalProof)",
      "function proven(bytes32, address) view returns (uint32 proposalId, uint32 provenAt)",
      "function renounceOwnership()",
      "function rollup() view returns (address)",
      "function rootBlacklisted(bytes32) view returns (bool)",
      "function setL2Bridge(address _l2Bridge)",
      "function setRollup(address _rollup)",
      "function setRootBlacklisted(bytes32 root, bool blacklisted)",
      "function setWithdrawalDelay(uint256 _withdrawalDelay)",
      "function transferOwnership(address newOwner)",
      "function unpause()",
      "function withdrawalDelay() view returns (uint256)"
    ],
    "eth:0x3235AdE33cF7013f5b5A51089390396e931e6BCF": [
      "function facetProxyAddress() view returns (address)",
      "function sendFacetTransaction(bytes to, uint256 value, uint256 gasLimit, bytes data)"
    ],
    "eth:0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5": [
      "error InvalidProof()",
      "error ProofInvalid()",
      "error PublicInputNotInField()",
      "error WrongVerifierSelector(bytes4 received, bytes4 expected)",
      "function VERIFIER_HASH() pure returns (bytes32)",
      "function VERSION() pure returns (string)",
      "function Verify(uint256[8] proof, uint256[2] input) view",
      "function compressProof(uint256[8] proof) view returns (uint256[4] compressed)",
      "function hashPublicValues(bytes publicValues) pure returns (bytes32)",
      "function verifyCompressedProof(uint256[4] compressedProof, uint256[2] input) view",
      "function verifyProof(bytes32 programVKey, bytes publicValues, bytes proofBytes) view"
    ],
    "eth:0x70C7FdB9e543bD15cd392df04e6d4BD05AfD8A66": [
      "constructor(address initialOwner)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error RouteAlreadyExists(address verifier)",
      "error RouteIsFrozen(bytes4 selector)",
      "error RouteNotFound(bytes4 selector)",
      "error SelectorCannotBeZero()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RouteAdded(bytes4 selector, address verifier)",
      "event RouteFrozen(bytes4 selector, address verifier)",
      "function addRoute(address verifier)",
      "function freezeRoute(bytes4 selector)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function routes(bytes4) view returns (address verifier, bool frozen)",
      "function transferOwnership(address newOwner)",
      "function verifyProof(bytes32 programVKey, bytes publicValues, bytes proofBytes) view"
    ],
    "eth:0xb2B01DeCb6cd36E7396b78D3744482627F22C525": [
      "constructor(address _singleton)"
    ],
    "eth:0xC9F2d55C56Ef9fE4262c4d5b48d8032241AF4d25": [
      "constructor()",
      "function sendFacetTransaction(bytes to, uint256 value, uint256 gasLimit, bytes data)"
    ],
    "eth:0xd0E3721bba691d3735b0827edBe893789cA1486D": [
      "constructor(uint256 _challengeSecs, uint256 _proveSecs, uint256 _challengerBond, uint256 _proposerBond, uint256 _fallbackTimeout, uint256 _proposalInterval, bytes32 _startRoot, uint256 _startBlock, uint256 _l2StartTimestamp, uint256 _l2BlockTime, address _verifier, bytes32 _rollupHash, bytes32 _aggVkey, bytes32 _rangeCommit)",
      "error AlreadyChallenged()",
      "error AlreadyResolved()",
      "error BadAuth()",
      "error BadCadence()",
      "error BlockAlreadyProven()",
      "error GameNotOver()",
      "error GameOver()",
      "error IncorrectBondAmount()",
      "error InvalidL2BlockNumber()",
      "error InvalidParentGame()",
      "error L1BlockHashNotAvailable()",
      "error L1BlockHashNotCheckpointed()",
      "error NoCanonicalProposal()",
      "error NoCredit()",
      "error ParentGameNotResolved()",
      "error ProposingBackwards()",
      "error ProposingFutureBlock()",
      "error TransferFailed()",
      "event AnchorUpdated(uint256 indexed proposalId, bytes32 root, uint256 l2BlockNumber)",
      "event BlockProven(uint256 indexed l2BlockNumber, bytes32 root, address indexed prover)",
      "event L1BlockHashCheckpointed(uint256 indexed l1BlockNumber, bytes32 blockHash)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalChallenged(uint256 indexed proposalId, address indexed challenger)",
      "event ProposalClosed(uint256 indexed proposalId)",
      "event ProposalProven(uint256 indexed proposalId, address indexed prover)",
      "event ProposalResolved(uint256 indexed proposalId, uint8 status)",
      "event ProposalSubmitted(uint256 indexed proposalId, uint256 indexed parentId, address indexed proposer, bytes32 root, uint256 l2BlockNumber)",
      "event ProposerPermissionUpdated(address indexed proposer, bool allowed)",
      "function AGG_VKEY() view returns (bytes32)",
      "function CHALLENGER_BOND() view returns (uint256)",
      "function FALLBACK_TIMEOUT_SECS() view returns (uint256)",
      "function L2_BLOCK_TIME() view returns (uint256)",
      "function L2_START_TIMESTAMP() view returns (uint256)",
      "function MAX_CHALLENGE_SECS() view returns (uint256)",
      "function MAX_PROVE_SECS() view returns (uint256)",
      "function PROPOSAL_INTERVAL() view returns (uint256)",
      "function PROPOSER_BOND() view returns (uint256)",
      "function RANGE_VKEY_COMMITMENT() view returns (bytes32)",
      "function ROLLUP_CONFIG_HASH() view returns (bytes32)",
      "function VERIFIER() view returns (address)",
      "function anchorL2BlockNumber() view returns (uint256)",
      "function anchorProposalId() view returns (uint256)",
      "function anchorRoot() view returns (bytes32)",
      "function canonicalProposalFor(uint256 l2BlockNumber) view returns (tuple(bytes32 rootClaim, address proposer, uint32 l2BlockNumber, uint32 parentIndex, uint32 deadline, uint64 resolvedAt, uint8 proposalStatus, uint8 resolutionStatus, address challenger, address prover))",
      "function canonicalProposalIdFor(uint256 l2BlockNumber) view returns (uint256)",
      "function challengeProposal(uint256 id) payable",
      "function checkpointL1BlockHash(uint256 l1BlockNumber)",
      "function claimCredit(address recipient)",
      "function computeL2Timestamp(uint256 _l2BlockNumber) view returns (uint256)",
      "function credit(address) view returns (uint256)",
      "function gameOver(uint256 proposalId) view returns (bool)",
      "function getAnchorRoot() view returns (bytes32, uint256)",
      "function getProposal(uint256 id) view returns (tuple(bytes32 rootClaim, address proposer, uint32 l2BlockNumber, uint32 parentIndex, uint32 deadline, uint64 resolvedAt, uint8 proposalStatus, uint8 resolutionStatus, address challenger, address prover))",
      "function getProposals(uint256[] ids) view returns (tuple(bytes32 rootClaim, address proposer, uint32 l2BlockNumber, uint32 parentIndex, uint32 deadline, uint64 resolvedAt, uint8 proposalStatus, uint8 resolutionStatus, address challenger, address prover)[] out)",
      "function getProposalsLength() view returns (uint256)",
      "function isInFallbackWindow(uint256 l2BlockNumber) view returns (bool)",
      "function isResolvable(uint256 proposalId) view returns (bool)",
      "function isWhitelistedProposer(address proposer) view returns (bool)",
      "function l1BlockHashes(uint256) view returns (bytes32)",
      "function l2BlockAge(uint256 l2BlockNumber) view returns (uint256)",
      "function latestProposals(uint256 count) view returns (uint256[] ids)",
      "function needsDefense(uint256 proposalId) view returns (bool)",
      "function owner() view returns (address)",
      "function proposalIsCanonical(uint256 proposalId) view returns (bool)",
      "function proveBlock(uint256 l2BlockNumber, bytes32 root, uint256 l1BlockNumber, bytes proof)",
      "function proveProposal(uint256 id, uint256 l1BlockNumber, bytes proof)",
      "function renounceOwnership()",
      "function resolveProposal(uint256 id)",
      "function setProposer(address proposer, bool allowed)",
      "function submitProposal(bytes32 root, uint256 l2BlockNumber, uint256 parentId) payable returns (uint256 proposalId)",
      "function transferOwnership(address newOwner)",
      "function version() view returns (string)",
      "function whitelistedProposer(address) view returns (bool)"
    ],
    "eth:0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ]
  },
  "usedTemplates": {
    "facet/FacetSafeModule": "0x6f2371af8e7f8af4e383d97b7ac36a626827fbe25be6bd42613bed29ed5b9df2",
    "facet/FacetSafeProxy": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "facet/L1ETHBridge": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "facet/Rollup": "0x5f90d5f1f797bc179e7cefece5f58747e38c3404441d81b1a653d6f6ab628163",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "succinct/SP1Verifier": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "succinct/SP1VerifierGateway": "0x9dd3e588fb5bceb40abbb60a0e68e868c7e81a6959705eb6f5f2c53651d5e85c"
  },
  "usedBlockNumbers": { "ethereum": 23076085 },
  "permissionsConfigHash": "0xca4442f35d48306dfa54ab1dcb8035b9f2c017911a82ca39e1ce4c6793f19930"
}
