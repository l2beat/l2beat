{
  "name": "facet",
  "chain": "ethereum",
  "blockNumber": 22920123,
  "configHash": "0xd92753304e5821e567a895d45ce54e96b1ece28457a6a9c3e304c0666a81e74b",
  "entries": [
    {
      "name": "FacetEtherBridgeV6",
      "address": "0x0000000000000b07ED001607f5263D85bf28Ce4C",
      "type": "Contract",
      "template": "facet/FacetEtherBridge",
      "sourceHashes": [
        "0x64951d7e399d4852270a3959b8d5a2e1cab268e252375816e78ad88ab3d971e2",
        "0xd5a977325a2b053491581c54141a59a425e2fe510cdfa1cd3b85ab45ca437a7e"
      ],
      "proxyType": "EIP1967 proxy",
      "description": "Official Facet implementation of the Ether Bridge.",
      "sinceTimestamp": 1734701579,
      "sinceBlock": 21444055,
      "values": {
        "$admin": "0x0000000000000000000000000000000000000000",
        "$implementation": "0x68c56f4D88846A4Cdce966d92D92a0636baf40FE",
        "$pastUpgrades": [],
        "$upgradeCount": 0,
        "eip712Domain": {
          "fields": "0x0f",
          "name": "Facet Ether Bridge",
          "version": "1",
          "chainId": 1,
          "verifyingContract": "0x0000000000000b07ED001607f5263D85bf28Ce4C",
          "salt": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "extensions": []
        },
        "getAdmin": "0xb2B01DeCb6cd36E7396b78D3744482627F22C525",
        "getDumbContract": "0x1673540243E793B0e77C038D4a88448efF524DcE",
        "getSigner": "0x314d660b083675f415cCAA9c545FeedF377d1006"
      },
      "implementationNames": {
        "0x0000000000000b07ED001607f5263D85bf28Ce4C": "ERC1967Factory",
        "0x68c56f4D88846A4Cdce966d92D92a0636baf40FE": "FacetEtherBridgeV6"
      }
    },
    {
      "name": "SP1Verifier",
      "address": "0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459",
      "type": "Contract",
      "template": "succinct/SP1Verifier",
      "sourceHashes": [
        "0x3ffef9f4f4cd24743e4612a4c1011ca13c0b983c52bbe8f4a6d40a58e5eeae42"
      ],
      "proxyType": "immutable",
      "description": "Verifier contract for SP1 proofs (v5.0.0).",
      "sinceTimestamp": 1748550023,
      "sinceBlock": 22590744,
      "values": {
        "$immutable": true,
        "VERIFIER_HASH": "0xd4e8ecd2357dd882209800acd6abb443d231cf287d77ba62b732ce937c8b56e7",
        "VERSION": "v5.0.0"
      },
      "implementationNames": {
        "0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459": "SP1Verifier"
      }
    },
    {
      "name": "Rollup",
      "address": "0x101e853255f3a0cA1dd3772d00893A103A6d0261",
      "type": "Contract",
      "template": "facet/Rollup",
      "sourceHashes": [
        "0xd216d1bc3ddc27353a122901c9226323aaff4c9ca1da61b91c7e1baf40b4c9b1"
      ],
      "proxyType": "immutable",
      "description": "Rollup contract for Facet",
      "sinceTimestamp": 1751482343,
      "sinceBlock": 22833445,
      "values": {
        "$immutable": true,
        "AGG_VKEY": "0x00a133aaa30298590731a9ac4edce773ba91365e7bcdc7cf1aaca780104efffc",
        "anchorProposalId": 21,
        "CHALLENGER_BOND": "5000000000000000000",
        "computeL2Timestamp": [],
        "FALLBACK_TIMEOUT_SECS": 1209600,
        "getAnchorProposal": {
          "rootClaim": "0x005025f50424292e146edb709aac573f2656d7bedf3d8334302f86ad33d2b4d5",
          "l1Head": "0x9020cb07c64c5211ce9e580cd54c59d043300d43e2d2e57ec9a9f2eb8a07d963",
          "proposer": "0x615452db5467849689E98a8C5C242A96cF768a94",
          "l2BlockNumber": 1505688,
          "parentIndex": 20,
          "deadline": 1752518399,
          "resolvedAt": 1752518447,
          "proposalStatus": 4,
          "resolutionStatus": 1,
          "challenger": "0x0000000000000000000000000000000000000000",
          "prover": "0x0000000000000000000000000000000000000000"
        },
        "getAnchorRoot": [
          "0x005025f50424292e146edb709aac573f2656d7bedf3d8334302f86ad33d2b4d5",
          1505688
        ],
        "getProposalsLength": 50,
        "L2_BLOCK_TIME": 12,
        "L2_START_TIMESTAMP": 1751459195,
        "l2BlockAge": [],
        "MAX_CHALLENGE_SECS": 604800,
        "MAX_PROVE_SECS": 259200,
        "owner": "0xb2B01DeCb6cd36E7396b78D3744482627F22C525",
        "PROPOSAL_INTERVAL": 1800,
        "PROPOSER_BOND": 1000000000000000,
        "RANGE_VKEY_COMMITMENT": "0x086ab4d935fcdee448c15bd365c3de90508ce1db1aa66b4f65bac4d7642a7d93",
        "ROLLUP_CONFIG_HASH": "0x9554c3fe04d8bd05d2dff01471781e1d9fbbdcfa58bda686ad883fe5451fd97c",
        "VERIFIER": "0x70C7FdB9e543bD15cd392df04e6d4BD05AfD8A66",
        "version": "1.0.0"
      },
      "implementationNames": {
        "0x101e853255f3a0cA1dd3772d00893A103A6d0261": "Rollup"
      }
    },
    {
      "address": "0x1673540243E793B0e77C038D4a88448efF524DcE",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x314d660b083675f415cCAA9c545FeedF377d1006",
      "type": "EOA",
      "proxyType": "EOA",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x0000000000000b07ED001607f5263D85bf28Ce4C",
          "description": "can sign arbitrary withdrawals for users.",
          "role": ".getSigner"
        }
      ]
    },
    {
      "name": "FacetSafeModule",
      "address": "0x3235AdE33cF7013f5b5A51089390396e931e6BCF",
      "type": "Contract",
      "template": "facet/FacetSafeModule",
      "sourceHashes": [
        "0xe72f875e22302b6f4ba7cf79658f0038ab2f434e188a6a5cf5db5dc59475f168"
      ],
      "proxyType": "immutable",
      "description": "Module that allows the Safe to send Facet transactions.",
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0xb2B01DeCb6cd36E7396b78D3744482627F22C525",
          "role": ".GnosisSafe_modules"
        }
      ],
      "sinceTimestamp": 1733593847,
      "sinceBlock": 21352215,
      "values": {
        "$immutable": true,
        "facetProxyAddress": "0xC9F2d55C56Ef9fE4262c4d5b48d8032241AF4d25"
      },
      "implementationNames": {
        "0x3235AdE33cF7013f5b5A51089390396e931e6BCF": "FacetSafeModule"
      }
    },
    {
      "name": "SP1Verifier",
      "address": "0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5",
      "type": "Contract",
      "sourceHashes": [
        "0x3a6132d983fd1e502fe3b75fbf74f0debc0d183b404d144b5220d8d5b3645582"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1748550083,
      "sinceBlock": 22590749,
      "values": {
        "$immutable": true,
        "VERIFIER_HASH": "0xa4594c59bbc142f3b81c3ecb7f50a7c34bc9af7c4c444b5d48b795427e285913",
        "VERSION": "v5.0.0"
      },
      "implementationNames": {
        "0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5": "SP1Verifier"
      }
    },
    {
      "address": "0x615452db5467849689E98a8C5C242A96cF768a94",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "SP1VerifierGateway",
      "address": "0x70C7FdB9e543bD15cd392df04e6d4BD05AfD8A66",
      "type": "Contract",
      "template": "succinct/SP1VerifierGateway",
      "sourceHashes": [
        "0xc651adcd746b8794c5b6c418aeb146f1b13b207cc9d2712ba66a42bd4b29af37"
      ],
      "proxyType": "immutable",
      "description": "This contract is the router for zk proof verification. It stores the mapping between identifiers and the address of onchain verifier contracts, routing each identifier to the corresponding verifier contract.",
      "sinceTimestamp": 1751301179,
      "sinceBlock": 22818451,
      "values": {
        "$immutable": true,
        "activeVerifiers": [
          {
            "selector": "0xd4e8ecd2",
            "verifier": "0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459"
          },
          {
            "selector": "0xa4594c59",
            "verifier": "0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5"
          }
        ],
        "allVerifiers": [
          {
            "selector": "0xd4e8ecd2",
            "verifier": "0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459"
          },
          {
            "selector": "0xa4594c59",
            "verifier": "0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5"
          }
        ],
        "owner": "0x0000000000000000000000000000000000000000"
      },
      "fieldMeta": {
        "activeVerifiers": {
          "description": "Verifiers that are routed to by their selector and not frozen."
        },
        "allVerifiers": {
          "description": "All verifiers that were ever routed to by this gateway."
        }
      },
      "implementationNames": {
        "0x70C7FdB9e543bD15cd392df04e6d4BD05AfD8A66": "SP1VerifierGateway"
      }
    },
    {
      "address": "0x75deB70b12689e9CaeF4b316eDD04F213Af06127",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "address": "0x77610267a344Eb39955c20908978830f61e2373C",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "Facet Multisig",
      "address": "0xb2B01DeCb6cd36E7396b78D3744482627F22C525",
      "type": "Contract",
      "template": "GnosisSafe",
      "sourceHashes": [
        "0x81a7349eebb98ac33b0bc6842e3cb258034a8f2a4ba004570bb8e2e25947f9ff",
        "0xd42bbf9f7dcd3720a7fc6bdc6edfdfae8800a37d6dd4decfa0ef6ca4a2e88940"
      ],
      "proxyType": "gnosis safe",
      "receivedPermissions": [
        {
          "permission": "interact",
          "from": "eth:0x0000000000000b07ED001607f5263D85bf28Ce4C",
          "description": "can withdraw all funds from the bridge.",
          "role": ".getAdmin"
        }
      ],
      "ignoreInWatchMode": ["nonce"],
      "sinceTimestamp": 1701094787,
      "sinceBlock": 18663532,
      "values": {
        "$immutable": false,
        "$implementation": "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552",
        "$members": [
          "0x77610267a344Eb39955c20908978830f61e2373C",
          "0xD66Cb98865181a890ffee5654fAe1D6b4D1827a7",
          "0x75deB70b12689e9CaeF4b316eDD04F213Af06127"
        ],
        "$threshold": 2,
        "domainSeparator": "0x4a566a7839f4fa7ba86474f484e7e11b96ee4927109cfcfdddad250cd7a3fec3",
        "getChainId": 1,
        "GnosisSafe_modules": [
          "0x3235AdE33cF7013f5b5A51089390396e931e6BCF",
          "0xDB866fD9241cd32851Df760c1Ec536f3199B22cE"
        ],
        "multisigThreshold": "2 of 3 (67%)",
        "nonce": 308,
        "VERSION": "1.3.0"
      },
      "implementationNames": {
        "0xb2B01DeCb6cd36E7396b78D3744482627F22C525": "GnosisSafeProxy",
        "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": "GnosisSafe"
      }
    },
    {
      "name": "FacetSafeProxy",
      "address": "0xC9F2d55C56Ef9fE4262c4d5b48d8032241AF4d25",
      "type": "Contract",
      "template": "facet/FacetSafeProxy",
      "sourceHashes": [
        "0xeeb64378c57fe40198d92b6136616a0243788e51e4d363d57f38a4c6ad891ff8"
      ],
      "proxyType": "immutable",
      "description": "Helper of the Safe Module that allows to send Facet transactions.",
      "sinceTimestamp": 1733593775,
      "sinceBlock": 21352209,
      "values": { "$immutable": true },
      "implementationNames": {
        "0xC9F2d55C56Ef9fE4262c4d5b48d8032241AF4d25": "FacetSafeProxy"
      }
    },
    {
      "address": "0xD66Cb98865181a890ffee5654fAe1D6b4D1827a7",
      "type": "EOA",
      "proxyType": "EOA"
    },
    {
      "name": "EthscriptionsSafeModule",
      "address": "0xDB866fD9241cd32851Df760c1Ec536f3199B22cE",
      "type": "Contract",
      "template": "facet/EthscriptionsSafeModule",
      "sourceHashes": [
        "0x3b42bbbb2e985d16af9ccbee812a73e53882232fc47dab8cf43369b5b853df33"
      ],
      "proxyType": "immutable",
      "description": "Module that allows the Safe to interact with Ethscriptions.",
      "directlyReceivedPermissions": [
        {
          "permission": "act",
          "from": "eth:0xb2B01DeCb6cd36E7396b78D3744482627F22C525",
          "role": ".GnosisSafe_modules"
        }
      ],
      "sinceTimestamp": 1697832707,
      "sinceBlock": 18393837,
      "values": {
        "$immutable": true,
        "ethscriptionsProxyAddress": "0xeEd444Fc821b866b002f30f502C53e88E15d5095"
      },
      "implementationNames": {
        "0xDB866fD9241cd32851Df760c1Ec536f3199B22cE": "EthscriptionsSafeModule"
      }
    },
    {
      "name": "EthscriptionsSafeProxy",
      "address": "0xeEd444Fc821b866b002f30f502C53e88E15d5095",
      "type": "Contract",
      "template": "facet/EthscriptionsSafeProxy",
      "sourceHashes": [
        "0x09dadea0389245a8882bad041f0349cda9669a53f590677017514fdbe7ec0c8a"
      ],
      "proxyType": "immutable",
      "description": "Helper of the Safe Module that allows to send Ethscriptions transactions.",
      "sinceTimestamp": 1697832623,
      "sinceBlock": 18393830,
      "values": { "$immutable": true },
      "implementationNames": {
        "0xeEd444Fc821b866b002f30f502C53e88E15d5095": "EthscriptionsSafeProxy"
      }
    }
  ],
  "abis": {
    "0x0000000000000b07ED001607f5263D85bf28Ce4C": [
      "error DeploymentFailed()",
      "error SaltDoesNotStartWithCaller()",
      "error Unauthorized()",
      "error UpgradeFailed()",
      "event AdminChanged(address indexed proxy, address indexed admin)",
      "event Deployed(address indexed proxy, address indexed implementation, address indexed admin)",
      "event Upgraded(address indexed proxy, address indexed implementation)",
      "function adminOf(address proxy) view returns (address admin)",
      "function changeAdmin(address proxy, address admin)",
      "function deploy(address implementation, address admin) payable returns (address proxy)",
      "function deployAndCall(address implementation, address admin, bytes data) payable returns (address proxy)",
      "function deployDeterministic(address implementation, address admin, bytes32 salt) payable returns (address proxy)",
      "function deployDeterministicAndCall(address implementation, address admin, bytes32 salt, bytes data) payable returns (address proxy)",
      "function initCodeHash() view returns (bytes32 result)",
      "function predictDeterministicAddress(bytes32 salt) view returns (address predicted)",
      "function upgrade(address proxy, address implementation) payable",
      "function upgradeAndCall(address proxy, address implementation, bytes data) payable"
    ],
    "0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459": [
      "error InvalidProof()",
      "error WrongVerifierSelector(bytes4 received, bytes4 expected)",
      "function VERIFIER_HASH() pure returns (bytes32)",
      "function VERSION() pure returns (string)",
      "function Verify(bytes proof, uint256[] public_inputs) view returns (bool success)",
      "function hashPublicValues(bytes publicValues) pure returns (bytes32)",
      "function verifyProof(bytes32 programVKey, bytes publicValues, bytes proofBytes) view"
    ],
    "0x101e853255f3a0cA1dd3772d00893A103A6d0261": [
      "constructor(uint256 _challengeSecs, uint256 _proveSecs, uint256 _challengerBond, uint256 _proposerBond, uint256 _fallbackTimeout, uint256 _proposalInterval, bytes32 _startRoot, uint128 _startBlock, uint256 _l2StartTimestamp, uint256 _l2BlockTime, address _verifier, bytes32 _rollupHash, bytes32 _aggVkey, bytes32 _rangeCommit)",
      "error AlreadyChallenged()",
      "error AlreadyResolved()",
      "error BadAuth()",
      "error BadCadence()",
      "error GameNotOver()",
      "error GameOver()",
      "error IncorrectBondAmount()",
      "error InvalidParentGame()",
      "error InvalidProposalStatus()",
      "error NoCredit()",
      "error NotFinalized()",
      "error ParentGameNotResolved()",
      "error ParentNotResolved()",
      "error TransferFailed()",
      "event AnchorUpdated(uint256 indexed proposalId, bytes32 root, uint128 l2BlockNumber)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event ProposalChallenged(uint256 indexed proposalId, address indexed challenger)",
      "event ProposalClosed(uint256 indexed proposalId)",
      "event ProposalProven(uint256 indexed proposalId, address indexed prover)",
      "event ProposalResolved(uint256 indexed proposalId, uint8 status)",
      "event ProposalSubmitted(uint256 indexed proposalId, uint256 indexed parentId, address indexed proposer, bytes32 root, uint128 l2BlockNumber)",
      "event ProposerPermissionUpdated(address indexed proposer, bool allowed)",
      "function AGG_VKEY() view returns (bytes32)",
      "function CHALLENGER_BOND() view returns (uint256)",
      "function FALLBACK_TIMEOUT_SECS() view returns (uint256)",
      "function L2_BLOCK_TIME() view returns (uint256)",
      "function L2_START_TIMESTAMP() view returns (uint256)",
      "function MAX_CHALLENGE_SECS() view returns (uint256)",
      "function MAX_PROVE_SECS() view returns (uint256)",
      "function PROPOSAL_INTERVAL() view returns (uint256)",
      "function PROPOSER_BOND() view returns (uint256)",
      "function RANGE_VKEY_COMMITMENT() view returns (bytes32)",
      "function ROLLUP_CONFIG_HASH() view returns (bytes32)",
      "function VERIFIER() view returns (address)",
      "function allowedProposer(address a) view returns (bool)",
      "function anchorProposalId() view returns (uint32)",
      "function challengeProposal(uint256 id) payable",
      "function claimCredit(address recipient)",
      "function computeL2Timestamp(uint256 _l2BlockNumber) view returns (uint256)",
      "function credit(address) view returns (uint256)",
      "function gameOver(uint256 proposalId) view returns (bool)",
      "function getAnchorProposal() view returns (tuple(bytes32 rootClaim, bytes32 l1Head, address proposer, uint32 l2BlockNumber, uint32 parentIndex, uint32 deadline, uint64 resolvedAt, uint8 proposalStatus, uint8 resolutionStatus, address challenger, address prover))",
      "function getAnchorRoot() view returns (bytes32, uint128)",
      "function getProposal(uint256 id) view returns (tuple(bytes32 rootClaim, bytes32 l1Head, address proposer, uint32 l2BlockNumber, uint32 parentIndex, uint32 deadline, uint64 resolvedAt, uint8 proposalStatus, uint8 resolutionStatus, address challenger, address prover))",
      "function getProposals(uint256[] ids) view returns (tuple(bytes32 rootClaim, bytes32 l1Head, address proposer, uint32 l2BlockNumber, uint32 parentIndex, uint32 deadline, uint64 resolvedAt, uint8 proposalStatus, uint8 resolutionStatus, address challenger, address prover)[] out)",
      "function getProposalsLength() view returns (uint256)",
      "function isResolvable(uint256 proposalId) view returns (bool)",
      "function l2BlockAge(uint256 l2BlockNumber) view returns (uint256)",
      "function latestProposals(uint256 count) view returns (uint256[] ids)",
      "function needsDefense(uint256 proposalId) view returns (bool)",
      "function owner() view returns (address)",
      "function proposalAuthorized(address proposer, uint256 proposedL2BlockNumber) view returns (bool)",
      "function proveProposal(uint256 id, bytes proof)",
      "function renounceOwnership()",
      "function resolveProposal(uint256 id)",
      "function setProposer(address proposer, bool allowed)",
      "function submitProposal(bytes32 root, uint128 l2BlockNumber, uint32 parentId) payable returns (uint256 proposalId)",
      "function transferOwnership(address newOwner)",
      "function version() view returns (string)",
      "function whitelistedProposer(address) view returns (bool)"
    ],
    "0x3235AdE33cF7013f5b5A51089390396e931e6BCF": [
      "function facetProxyAddress() view returns (address)",
      "function sendFacetTransaction(bytes to, uint256 value, uint256 gasLimit, bytes data)"
    ],
    "0x50ACFBEdecf4cbe350E1a86fC6f03a821772f1e5": [
      "error InvalidProof()",
      "error ProofInvalid()",
      "error PublicInputNotInField()",
      "error WrongVerifierSelector(bytes4 received, bytes4 expected)",
      "function VERIFIER_HASH() pure returns (bytes32)",
      "function VERSION() pure returns (string)",
      "function Verify(uint256[8] proof, uint256[2] input) view",
      "function compressProof(uint256[8] proof) view returns (uint256[4] compressed)",
      "function hashPublicValues(bytes publicValues) pure returns (bytes32)",
      "function verifyCompressedProof(uint256[4] compressedProof, uint256[2] input) view",
      "function verifyProof(bytes32 programVKey, bytes publicValues, bytes proofBytes) view"
    ],
    "0x68c56f4D88846A4Cdce966d92D92a0636baf40FE": [
      "constructor()",
      "error FeatureDisabled()",
      "error InvalidAmount()",
      "error InvalidInitialization()",
      "error NotFactory()",
      "error NotInitializing()",
      "error ZeroAdminAddress()",
      "event Initialized(uint64 version)",
      "function adminMarkComplete(address recipient, bytes32 withdrawalId)",
      "function adminWithdraw(address recipient, uint256 amount)",
      "function adminWithdrawFCT(address recipient, uint256 amount)",
      "function bridgeAndCall(address recipient, address dumbContractToCall, bytes functionCalldata, uint64) payable",
      "function deposit() payable",
      "function donateETH() payable",
      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
      "function getAdmin() view returns (address)",
      "function getDumbContract() pure returns (address)",
      "function getSigner() view returns (address)",
      "function initialize()",
      "function processedWithdraws(bytes32 withdrawalId) view returns (bool)",
      "function setAdmin(address admin)",
      "function withdraw(tuple(address recipient, uint256 amount, bytes32 withdrawalId, bytes32 blockHash, uint256 blockNumber, bytes signature) req)"
    ],
    "0x70C7FdB9e543bD15cd392df04e6d4BD05AfD8A66": [
      "constructor(address initialOwner)",
      "error OwnableInvalidOwner(address owner)",
      "error OwnableUnauthorizedAccount(address account)",
      "error RouteAlreadyExists(address verifier)",
      "error RouteIsFrozen(bytes4 selector)",
      "error RouteNotFound(bytes4 selector)",
      "error SelectorCannotBeZero()",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event RouteAdded(bytes4 selector, address verifier)",
      "event RouteFrozen(bytes4 selector, address verifier)",
      "function addRoute(address verifier)",
      "function freezeRoute(bytes4 selector)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function routes(bytes4) view returns (address verifier, bool frozen)",
      "function transferOwnership(address newOwner)",
      "function verifyProof(bytes32 programVKey, bytes publicValues, bytes proofBytes) view"
    ],
    "0xb2B01DeCb6cd36E7396b78D3744482627F22C525": [
      "constructor(address _singleton)"
    ],
    "0xC9F2d55C56Ef9fE4262c4d5b48d8032241AF4d25": [
      "constructor()",
      "function sendFacetTransaction(bytes to, uint256 value, uint256 gasLimit, bytes data)"
    ],
    "0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552": [
      "constructor()",
      "event AddedOwner(address owner)",
      "event ApproveHash(bytes32 indexed approvedHash, address indexed owner)",
      "event ChangedFallbackHandler(address handler)",
      "event ChangedGuard(address guard)",
      "event ChangedThreshold(uint256 threshold)",
      "event DisabledModule(address module)",
      "event EnabledModule(address module)",
      "event ExecutionFailure(bytes32 txHash, uint256 payment)",
      "event ExecutionFromModuleFailure(address indexed module)",
      "event ExecutionFromModuleSuccess(address indexed module)",
      "event ExecutionSuccess(bytes32 txHash, uint256 payment)",
      "event RemovedOwner(address owner)",
      "event SafeReceived(address indexed sender, uint256 value)",
      "event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)",
      "event SignMsg(bytes32 indexed msgHash)",
      "function VERSION() view returns (string)",
      "function addOwnerWithThreshold(address owner, uint256 _threshold)",
      "function approveHash(bytes32 hashToApprove)",
      "function approvedHashes(address, bytes32) view returns (uint256)",
      "function changeThreshold(uint256 _threshold)",
      "function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view",
      "function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view",
      "function disableModule(address prevModule, address module)",
      "function domainSeparator() view returns (bytes32)",
      "function enableModule(address module)",
      "function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes)",
      "function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns (bool success)",
      "function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns (bool success)",
      "function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns (bool success, bytes returnData)",
      "function getChainId() view returns (uint256)",
      "function getModulesPaginated(address start, uint256 pageSize) view returns (address[] array, address next)",
      "function getOwners() view returns (address[])",
      "function getStorageAt(uint256 offset, uint256 length) view returns (bytes)",
      "function getThreshold() view returns (uint256)",
      "function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns (bytes32)",
      "function isModuleEnabled(address module) view returns (bool)",
      "function isOwner(address owner) view returns (bool)",
      "function nonce() view returns (uint256)",
      "function removeOwner(address prevOwner, address owner, uint256 _threshold)",
      "function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns (uint256)",
      "function setFallbackHandler(address handler)",
      "function setGuard(address guard)",
      "function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver)",
      "function signedMessages(bytes32) view returns (uint256)",
      "function simulateAndRevert(address targetContract, bytes calldataPayload)",
      "function swapOwner(address prevOwner, address oldOwner, address newOwner)"
    ],
    "0xDB866fD9241cd32851Df760c1Ec536f3199B22cE": [
      "function createEthscription(address to, string dataURI)",
      "function ethscriptionsProxyAddress() view returns (address)",
      "function transferEthscription(address to, bytes32 ethscriptionId)"
    ],
    "0xeEd444Fc821b866b002f30f502C53e88E15d5095": [
      "constructor()",
      "event ethscriptions_protocol_CreateEthscription(address indexed initialOwner, string contentURI)",
      "event ethscriptions_protocol_TransferEthscription(address indexed recipient, bytes32 indexed ethscriptionId)",
      "function createEthscription(address to, string dataURI)",
      "function transferEthscription(address to, bytes32 ethscriptionId)"
    ]
  },
  "usedTemplates": {
    "facet/EthscriptionsSafeModule": "0x6f2371af8e7f8af4e383d97b7ac36a626827fbe25be6bd42613bed29ed5b9df2",
    "facet/EthscriptionsSafeProxy": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "facet/FacetEtherBridge": "0xbb9993b8f35798795519db980c5342ad5d79a1fa8975ca041dfa3b6910c8b229",
    "facet/FacetSafeModule": "0x6f2371af8e7f8af4e383d97b7ac36a626827fbe25be6bd42613bed29ed5b9df2",
    "facet/FacetSafeProxy": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "facet/Rollup": "0x97e2d6006f5d50b6ff45a428f59c03833f2d002664487a192f5d5d6dbde401c8",
    "GnosisSafe": "0x12db59bec64fa8de67bbeb6a6e913f6c5ff1598c0a5fba90282afaf08e2a748c",
    "succinct/SP1Verifier": "0x6fbb45d11251921c07e800160fe95b7bb7e81f6f3b7d0c02107126e904d8cd9c",
    "succinct/SP1VerifierGateway": "0x9dd3e588fb5bceb40abbb60a0e68e868c7e81a6959705eb6f5f2c53651d5e85c"
  },
  "permissionsConfigHash": "0xd93a9ee3d8951392e4645b500a88ca94df8bd69de65f52522c05d2bcc21d9f23"
}
