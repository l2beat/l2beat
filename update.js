const fs = require("fs");
const ethers = require("ethers");

main().catch((e) => {
  console.error(e);
  process.exit(1);
});

async function main() {
  const sinceFile = fs.readFileSync("since.txt", "utf-8");

  let results = [];

  let file = undefined;

  const lines = sinceFile.split("\n");
  for (const line of lines) {
    if (line.startsWith(" ")) {
      const [, lineNumber, before, block, after] = line.match(
        /^ +(\d+): (.+)sinceBlock: (\d+)(.+)$/
      );
      results.push({
        file,
        line: `${before}sinceBlock: ${block}${after}`,
        lineNumber: Number(lineNumber),
        before,
        block: Number(block),
        after,
      });
    } else if (line !== "") {
      file = line.slice(0, -1);
    }
  }

  const blockNumbers = [...new Set(results.map((x) => x.block))];
  const provider = new ethers.providers.AlchemyProvider("mainnet");

  const timestamps = new Map([
    [0, 0],
    [999, 1438272137],
    [4145415, 1502476756],
    [11900384, 1613912075],
    [11511393, 1608747211],
    [10926829, 1600970788],
    [11937214, 1614400291],
    [8482162, 1567580452],
    [10635417, 1597105639],
    [7246755, 1550710665],
    [11267788, 1605514726],
    [12432942, 1621001241],
    [11203771, 1604665283],
    [11060110, 1602761920],
    [11103292, 1603333709],
    [13371307, 1633603227],
    [12314534, 1619421369],
    [13570063, 1636297637],
    [3851136, 1497110560],
    [8514296, 1568013787],
    [3788558, 1496083510],
    [12432350, 1620993315],
    [10152914, 1590651480],
    [8493105, 1567727777],
    [7803477, 1558444909],
    [13776242, 1639124481],
    [13225262, 1631641934],
    [13806396, 1639526491],
    [9907101, 1587355556],
    [7107317, 1548134340],
    [5409020, 1523274016],
    [4281611, 1505597189],
    [6585593, 1540537245],
    [10988298, 1601800062],
    [4009731, 1499817451],
    [12829313, 1626322460],
    [5294655, 1521628040],
    [11320818, 1606218049],
    [9601359, 1583280535],
    [8983575, 1574471013],
    [7710758, 1557192318],
    [7710760, 1557192331],
    [9879363, 1586985186],
    [13627483, 1637077921],
    [12451018, 1621242935],
    [12450988, 1621242525],
    [8040814, 1561649739],
    [12693728, 1624495330],
    [6702068, 1542186708],
    [10647806, 1597270648],
    [8950398, 1573993299],
    [11607504, 1610021949],
    [4170788, 1503006656],
    [4010949, 1499841781],
    [12008914, 1615354524],
    [8297651, 1565102047],
    [12293419, 1619140030],
    [12674086, 1624230467],
    [12674089, 1624230521],
    [12809555, 1626053832],
    [11138920, 1603805479],
    [4329040, 1506906127],
    [10123949, 1590261525],
    [13533418, 1635800117],
    [11016156, 1602176748],
    [5787425, 1528979942],
    [11762222, 1612075738],
    [12159908, 1617364200],
    [10998076, 1601931978],
    [11654666, 1610646626],
    [11465581, 1608140520],
    [11465584, 1608140560],
    [7611221, 1555852887],
    [6965508, 1545963928],
    [10828939, 1599673371],
    [7726894, 1557411619],
    [6301780, 1536521774],
    [3557596, 1492523116],
    [11281056, 1605690833],
    [11446769, 1607890633],
    [11056775, 1602717322],
    [5008746, 1517448069],
    [13771084, 1639053378],
    [9076087, 1575874126],
    [5005233, 1517395802],
    [8174400, 1563449444],
    [12084124, 1616355826],
    [13415141, 1634198360],
    [11072329, 1602922956],
    [12342123, 1619789623],
    [9958363, 1588042366],
    [11143904, 1603871844],
    [11638804, 1610436587],
    [12224343, 1618218294],
    [11096120, 1603238349],
    [11473216, 1608242396],
    [11480180, 1608334322],
    [5533907, 1525118631],
    [13847597, 1640077252],
    [7544036, 1554948637],
    [10057681, 1589371378],
    [12178594, 1617611299],
    [12505975, 1621978961],
    [4621060, 1511637118],
    [11886238, 1613723201],
    [7605604, 1555778052],
    [13468356, 1634918516],
    [11434969, 1607734167],
    [6111735, 1533749838],
    [10970706, 1601563115],
    [5475683, 1524250249],
    [10763456, 1598807335],
    [7815779, 1558611941],
    [10945544, 1601222047],
    [7641712, 1556264879],
    [13782589, 1639209014],
    [3978297, 1499264338],
    [13254878, 1632037514],
    [14881557, 1654039974],
    [5710114, 1527798219],
    [10884563, 1600410737],
    [6294931, 1536420623],
    [8426430, 1566830180],
    [10804048, 1599343689],
    [10933279, 1601056863],
    [9921528, 1587548415],
    [5003910, 1517376819],
    [3811884, 1496460359],
    [11882236, 1613670383],
    [11995547, 1615175880],
    [13849184, 1640098645],
    [5392950, 1523044361],
    [11867297, 1613471654],
    [13073708, 1629616433],
    [10997867, 1601929393],
    [11094181, 1603212673],
    [11427059, 1607628365],
    [9736969, 1585090944],
    [7208992, 1549934999],
    [4827494, 1514688568],
    [4356679, 1507735071],
    [13947046, 1641407258],
    [13325306, 1632980703],
    [8835135, 1572367723],
    [10570346, 1596238023],
    [10569013, 1596220363],
    [10363171, 1593467066],
    [12314545, 1619421512],
    [12454535, 1621289435],
    [12739085, 1625105851],
    [3898960, 1497889273],
    [11897052, 1613866257],
    [10801571, 1599311156],
    [10736094, 1598444887],
    [8363030, 1565978672],
    [4470432, 1509542207],
    [13116045, 1630182084],
    [8314597, 1565329008],
    [9369177, 1580196479],
    [13524498, 1635679310],
    [4634748, 1511829681],
    [12478255, 1621608122],
    [11644425, 1610511447],
    [12961612, 1628120225],
    [4961540, 1516760378],
    [12147964, 1617205273],
    [6988184, 1546294558],
    [8164986, 1563321887],
    [9247089, 1578581061],
    [10861674, 1600107086],
    [6082465, 1533324504],
    [11095278, 1603226675],
    [12017421, 1615467640],
    [11093593, 1603204574],
    [11067236, 1602855151],
    [12003415, 1615280900],
    [6766284, 1543095952],
    [4719568, 1513077455],
    [11345242, 1606542899],
    [4862225, 1515221841],
    [10475744, 1594972885],
    [12901564, 1627299017],
    [9129781, 1576744001],
    [11305469, 1606014225],
    [12525700, 1622243344],
    [12647126, 1623867835],
    [12640867, 1623784100],
    [13262081, 1632133470],
    [11967192, 1614799636],
    [13012048, 1628793901],
    [13013879, 1628818577],
    [10141009, 1590491810],
    [11834295, 1613033682],
    [11787727, 1612414780],
    [8929632, 1573694037],
    [11783715, 1612360715],
    [12093596, 1616482490],
    [12011518, 1615389188],
    [12283778, 1619011215],
    [14225869, 1645130774],
    [14485967, 1648621885],
    [14429472, 1647862894],
    [14485971, 1648621976],
    [11149779, 1603949642],
    [13627429, 1637077208],
    [9687270, 1584424507],
    [9687286, 1584424719],
    [11656238, 1610668212],
    [12409015, 1620680982],
    [12409013, 1620680934],
    [12781431, 1625675779],
    [12686786, 1624401464],
    [12831579, 1626352527],
    [14429055, 1647857148],
    [14742549, 1652101033],
    [13809566, 1639569183],
    [11841962, 1613135194],
    [12810001, 1626059966],
    [10269890, 1592218707],
  ]);

  for (const blockNumber of blockNumbers) {
    if (!timestamps.has(blockNumber)) {
      const { timestamp } = await provider.getBlock(blockNumber);
      timestamps.set(blockNumber, timestamp);
    }
  }

  for (const result of results) {
    const timestamp = timestamps.get(result.block);
    if (timestamp === undefined) {
      throw new Error(`Missing timestamp for block ${result.block}`);
    }
    let contents = fs.readFileSync(result.file, "utf-8");
    const lines = contents.split("\n");
    if (lines[result.lineNumber - 1] !== result.line) {
      console.error(JSON.stringify(result.line), JSON.stringify(lines[result.lineNumber - 1]))
      throw new Error("Different line");
    }
    lines[
      result.lineNumber - 1
    ] = `${result.before}sinceTimestamp: new UnixTime(${timestamp})${result.after}`;
    contents = lines.join("\n");
    fs.writeFileSync(result.file, contents);
  }
}
