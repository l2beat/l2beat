{
  "$schema": "https://biomejs.dev/schemas/1.9.3/schema.json",
  "files": {
    "ignore": ["node_modules/", ".cache/", "dist/", ".next/", "build/"]
  },
  "formatter": {
    "enabled": true,
    "formatWithErrors": false,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineEnding": "lf",
    "lineWidth": 80,
    "attributePosition": "auto"
  },
  "vcs": {
    "enabled": true,
    "clientKind": "git",
    "defaultBranch": "main",
    "useIgnoreFile": true
  },
  "organizeImports": { "enabled": true },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": false,
      "complexity": {
        "noBannedTypes": "error",
        "noExtraBooleanCast": "error",
        "noMultipleSpacesInRegularExpressionLiterals": "error",
        "noStaticOnlyClass": "error",
        "noUselessCatch": "error",
        "noUselessConstructor": "error",
        "noUselessThisAlias": "error",
        "noUselessTypeConstraint": "error",
        "noWith": "error"
      },
      "correctness": {
        "noUnusedImports": "error",
        "noConstAssign": "error",
        "noConstantCondition": "off",
        "noEmptyCharacterClassInRegex": "error",
        "noEmptyPattern": "error",
        "noGlobalObjectCalls": "error",
        "noInnerDeclarations": "error",
        "noInvalidConstructorSuper": "error",
        "noNewSymbol": "error",
        "noNonoctalDecimalEscape": "error",
        "noPrecisionLoss": "error",
        "noSelfAssign": "error",
        "noSetterReturn": "error",
        "noSwitchDeclarations": "error",
        "noUndeclaredVariables": "error",
        "noUnreachable": "error",
        "noUnreachableSuper": "error",
        "noUnsafeFinally": "error",
        "noUnsafeOptionalChaining": "error",
        "noUnusedLabels": "error",
        "noUnusedVariables": "error",
        "useIsNan": "error",
        "useValidForDirection": "error",
        "useYield": "error"
      },
      "style": {
        "useForOf": "error",
        "noDefaultExport": "error",
        "noNamespace": "error",
        "noNonNullAssertion": "error",
        "useAsConstAssertion": "error",
        "useLiteralEnumMembers": "error",
        "useImportType": "error"
      },
      "performance": {
        "noAccumulatingSpread": "error",
        "noDelete": "error"
      },
      "nursery": {
        "noDuplicateElseIf": "error",
        "noRestrictedImports": {
          "level": "error",
          "options": {
            "paths": {
              "console": "Do not use console",
              "node:console": "Do not use console",
              "assert": "Use assert from @l2beat/shared-pure",
              "node:assert": "Use assert from @l2beat/shared-pure",
              "lodash": "Use lodash/{module}"
            }
          }
        },
        "useSortedClasses": {
          "level": "error",
          "options": {
            "attributes": ["className", "classname"],
            "functions": ["cn", "cva"]
          }
        }
      },
      "suspicious": {
        "noAssignInExpressions": "off",
        "noAsyncPromiseExecutor": "error",
        "noCatchAssign": "error",
        "noClassAssign": "error",
        "noCompareNegZero": "error",
        "noConfusingVoidType": "error",
        "noControlCharactersInRegex": "error",
        "noDebugger": "error",
        "noDoubleEquals": "error",
        "noDuplicateCase": "error",
        "noDuplicateClassMembers": "error",
        "noDuplicateObjectKeys": "error",
        "noDuplicateParameters": "error",
        "noEmptyBlockStatements": "off",
        "noExplicitAny": "error",
        "noExtraNonNullAssertion": "error",
        "noFallthroughSwitchClause": "error",
        "noFocusedTests": "error",
        "noFunctionAssign": "error",
        "noGlobalAssign": "error",
        "noImportAssign": "error",
        "noMisleadingCharacterClass": "error",
        "noMisleadingInstantiator": "error",
        "noPrototypeBuiltins": "error",
        "noRedeclare": "error",
        "noShadowRestrictedNames": "error",
        "noUnsafeDeclarationMerging": "error",
        "noUnsafeNegation": "error",
        "useAwait": "error",
        "useGetterReturn": "error",
        "useValidTypeof": "error"
      }
    }
  },
  "javascript": {
    "formatter": {
      "jsxQuoteStyle": "double",
      "quoteProperties": "asNeeded",
      "trailingCommas": "all",
      "semicolons": "asNeeded",
      "arrowParentheses": "always",
      "bracketSpacing": true,
      "bracketSameLine": false,
      "quoteStyle": "single",
      "attributePosition": "auto"
    },
    "jsxRuntime": "reactClassic"
  },
  "overrides": [
    {
      "include": ["**/test/**/*.ts", "*.test.ts"],
      "linter": {
        "rules": {
          "style": { "noNonNullAssertion": "off" },
          "suspicious": { "noExplicitAny": "off", "useAwait": "off" }
        }
      }
    },
    {
      "include": ["*.ts", "*.tsx", "*.mts", "*.cts"],
      "linter": {
        "rules": {
          "correctness": {
            "noConstAssign": "off",
            "noGlobalObjectCalls": "off",
            "noInvalidConstructorSuper": "off",
            "noNewSymbol": "off",
            "noSetterReturn": "off",
            "noUndeclaredVariables": "off",
            "noUnreachable": "off",
            "noUnreachableSuper": "off"
          },
          "style": {
            "noArguments": "error",
            "noVar": "error",
            "useConst": "error"
          },
          "suspicious": {
            "noDuplicateClassMembers": "off",
            "noDuplicateObjectKeys": "off",
            "noDuplicateParameters": "off",
            "noFunctionAssign": "off",
            "noImportAssign": "off",
            "noRedeclare": "off",
            "noUnsafeNegation": "off",
            "useGetterReturn": "off"
          }
        }
      }
    },
    {
      // I know it's dumb to do it here in overrides but if I place
      // it in the frontend/biome.json, it will be ignored by the
      // IDE extension as it only reads the root biome.json file.
      // This will be fixed in biome 2.0 so remove this once we migrate.
      "include": ["packages/frontend/src/**/*.tsx"],
      "linter": {
        "rules": {
          "a11y": {
            "noBlankTarget": "error"
          },
          "complexity": {
            "noUselessFragments": "error"
          },
          "correctness": {
            "useExhaustiveDependencies": "error",
            "useHookAtTopLevel": "error",
            "noChildrenProp": "error",
            "noVoidElementsWithChildren": "error"
          },
          "suspicious": {
            "noDuplicateJsxProps": "error"
          },
          "style": {
            "useFragmentSyntax": "error"
          }
        }
      }
    }
  ]
}
