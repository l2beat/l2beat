name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - master
      - main
  merge_group:

jobs:
  build-backend:
    name: Build backend container image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Docker.io mirror
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]
      - name: Build container
        uses: docker/build-push-action@v5
        with:
          push: false
          file: Dockerfile.backend
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build mocked frontend
        run: pnpm build:frontend-ci
        env:
          MOCK: true

      # We can get rid of it later, now it's used
      # so we can more easily inspect occasional
      # longer frontend build times
      - name: Preserve frontend build summary
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-summary
          path: .turbo/runs

  build-protocolbeat:
    name: Build protocolbeat
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build protocolbeat
        run: pnpm build:protocolbeat

  build-tools:
    name: Build tools
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build tools
        run: pnpm build:tools

  build-uops-dashboard:
    name: Build uops-dashboard
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build tx-decoder
        run: pnpm build:uops-dashboard

  build-token-backend:
    name: Build token-backend container image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Docker.io mirror
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]
      - name: Build container
        uses: docker/build-push-action@v5
        with:
          push: false
          file: Dockerfile.token-backend
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Typecheck
        run: pnpm typecheck

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
      TEST_DB_URL: postgresql://postgres:postgres@localhost:5432/postgres
      CONFIG_ALCHEMY_API_KEY: ${{ secrets.CONFIG_ALCHEMY_API_KEY }}
    services:
      postgres:
        image: mirror.gcr.io/postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Test
        run: pnpm test --reporter min

  biome:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Biome CLI
        uses: biomejs/setup-biome@v2
        with:
          version: 2.0.6

      - name: Run Biome
        run: biome ci

  test-all-pages:
    name: Test All Pages
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build dependencies
        run: pnpm build:dependencies:frontend

      - name: Start mock server and test pages
        run: |
          cd packages/frontend 
          pnpm test-all-pages

  test-gha-timeouts:
    name: Test if all GH Action jobs have timeout defined
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Setup yq
        uses: dcarbone/install-yq-action@v1
      - name: Test all workflow manifests
        run: |
          declare -a failed_files

          echo "Scanning files for timeout definitions"
          for file in .github/workflows/*.y*ml; do
            out=$(yq -r '
              (.jobs // {})
              | to_entries[]
              | select(.value | has("timeout-minutes") | not)
              | .key
            ' "$file")
            echo "$file: ${out:-"OK"}"
            if [[ -n "$out" ]]; then
              failed_files+=($file)
            fi
          done
          if [[ ${#failed_files[@]} -gt 0 ]]; then
            echo
            echo "Some workflows are missing timeout definition. Files failing validation:"
            echo "${failed_files[@]}"
            exit 1
          fi
