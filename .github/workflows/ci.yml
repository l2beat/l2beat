name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - master
      - main
  merge_group:

jobs:
  build-backend:
    name: Build backend container image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Build container
        uses: docker/build-push-action@v5
        with:
          push: false
          file: Dockerfile.backend
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build mocked frontend
        run: pnpm build:frontend
        env:
          MOCK: true

  build-protocolbeat:
    name: Build protocolbeat
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build protocolbeat
        run: pnpm build:protocolbeat

  build-tools:
    name: Build tools
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build tools
        run: pnpm build:tools

  build-uops-dashboard:
    name: Build uops-dashboard
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build tx-decoder
        run: pnpm build:uops-dashboard

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Typecheck
        run: pnpm typecheck

  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
      TEST_DB_URL: postgresql://postgres:postgres@localhost:5432/postgres
      CONFIG_ALCHEMY_API_KEY: ${{ secrets.CONFIG_ALCHEMY_API_KEY }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Test
        run: pnpm test --reporter min

  biome:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Biome CLI
        uses: biomejs/setup-biome@v2
        with:
          version: 2.0.6

      - name: Run Biome
        run: biome ci

  test-all-pages:
    name: Test All Pages
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build dependencies
        run: pnpm build:dependencies

      - name: Start mock server and test pages
        run: |
          cd packages/frontend 

          pnpm build
          
          # Start the mock server in the background and redirect output to /dev/null
          pnpm start:mock > /dev/null 2>&1 &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 3
          
          # Test all pages
          pnpm test-all-pages
          
          # Kill the server
          echo "Stopping server..."
          kill $SERVER_PID
